OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended

Starting a Gradle Daemon, 3 incompatible and 7 stopped Daemons could not be reused, use --status for details

> Configure project :
Starting build with version 3.8.0-SNAPSHOT (commit id 8e1516f8) using Gradle 8.6, Java 19 and Scala 2.13.12
Build properties: maxParallelForks=8, maxScalacThreads=8, maxTestRetries=0

> Task :connect:compileJava NO-SOURCE
> Task :compileJava NO-SOURCE
> Task :server-common:processResources NO-SOURCE
> Task :connect:processResources NO-SOURCE
> Task :connect:classes UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE
> Task :group-coordinator:processResources
> Task :jar
> Task :assemble
> Task :connect:jar
> Task :connect:assemble
> Task :core:processResources
> Task :server-common:processTestResources
> Task :connect:checkstyleMain NO-SOURCE
> Task :compileTestJava NO-SOURCE
> Task :connect:compileTestJava NO-SOURCE
> Task :processTestResources NO-SOURCE
> Task :testClasses UP-TO-DATE
> Task :connect:processTestResources NO-SOURCE
> Task :connect:testClasses UP-TO-DATE
> Task :raft:processResources
> Task :group-coordinator:processTestResources
> Task :connect:checkstyleTest NO-SOURCE
> Task :test NO-SOURCE
> Task :connect:spotbugsMain NO-SOURCE
> Task :server:processResources NO-SOURCE
> Task :raft:processTestResources
> Task :connect:spotbugsTest SKIPPED
> Task :connect:test NO-SOURCE
> Task :connect:check UP-TO-DATE
> Task :connect:build
> Task :server-common:createVersionFile
> Task :raft:createVersionFile
> Task :storage:storage-api:processResources NO-SOURCE
> Task :tools:tools-api:processResources NO-SOURCE
> Task :tools:tools-api:createVersionFile
> Task :storage:processResources
> Task :metadata:processResources
> Task :metadata:processTestResources
> Task :storage:storage-api:createVersionFile
> Task :examples:processResources NO-SOURCE
> Task :storage:storage-api:processTestResources NO-SOURCE
> Task :storage:createVersionFile
> Task :examples:processTestResources NO-SOURCE
> Task :jmh-benchmarks:processResources NO-SOURCE
> Task :core:processTestResources
> Task :jmh-benchmarks:processTestResources NO-SOURCE
> Task :streams:processResources
> Task :connect:json:processResources
> Task :clients:processResources
> Task :log4j-appender:processResources NO-SOURCE
> Task :log4j-appender:processTestResources NO-SOURCE
> Task :streams:createStreamsVersionFile
> Task :server:createVersionFile
> Task :server:processTestResources NO-SOURCE
> Task :clients:createVersionFile
> Task :connect:api:processResources
> Task :connect:transforms:processResources
> Task :shell:processResources NO-SOURCE
> Task :storage:processTestResources
> Task :tools:processResources NO-SOURCE
> Task :shell:processTestResources
> Task :streams:processTestResources
> Task :streams:test-utils:processResources NO-SOURCE
> Task :trogdor:processResources NO-SOURCE
> Task :clients:processTestResources
> Task :connect:runtime:processResources
> Task :connect:test-plugins:processResources
> Task :tools:processTestResources
> Task :connect:api:processTestResources
> Task :connect:json:processTestResources
> Task :connect:basic-auth-extension:processResources
> Task :connect:basic-auth-extension:processTestResources NO-SOURCE
> Task :connect:mirror:processResources
> Task :connect:test-plugins:processTestResources NO-SOURCE
> Task :connect:file:processResources
> Task :connect:mirror-client:processResources NO-SOURCE
> Task :connect:transforms:processTestResources NO-SOURCE
> Task :streams:examples:processResources NO-SOURCE
> Task :connect:mirror-client:processTestResources NO-SOURCE
> Task :connect:mirror:processTestResources
> Task :connect:file:processTestResources
> Task :streams:streams-scala:processResources NO-SOURCE
> Task :streams:test-utils:processTestResources
> Task :trogdor:processTestResources
> Task :streams:examples:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0100:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-0101:compileJava NO-SOURCE
> Task :streams:streams-scala:processTestResources
> Task :streams:upgrade-system-tests-0100:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-0102:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-0100:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-0102:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-0110:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-0102:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-0101:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-0110:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-0101:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-0110:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-0102:jar
> Task :streams:upgrade-system-tests-0102:assemble
> Task :spotlessInternalRegisterDependencies
> Task :streams:upgrade-system-tests-0102:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-0100:jar
> Task :streams:upgrade-system-tests-0100:assemble
> Task :streams:upgrade-system-tests-0110:jar
> Task :streams:upgrade-system-tests-0110:assemble
> Task :streams:upgrade-system-tests-0101:jar
> Task :streams:upgrade-system-tests-0101:assemble
> Task :streams:upgrade-system-tests-0110:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-0100:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-0101:checkstyleMain NO-SOURCE
> Task :connect:runtime:processTestResources
> Task :streams:upgrade-system-tests-10:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-10:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-10:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-10:jar
> Task :streams:upgrade-system-tests-10:assemble
> Task :streams:upgrade-system-tests-10:checkstyleMain NO-SOURCE
> Task :transaction-coordinator:compileJava
> Task :transaction-coordinator:processResources NO-SOURCE
> Task :transaction-coordinator:classes
> Task :transaction-coordinator:jar
> Task :transaction-coordinator:assemble
> Task :generator:compileJava
> Task :generator:processResources NO-SOURCE
> Task :generator:classes
> Task :generator:jar
> Task :streams:upgrade-system-tests-0102:compileTestJava

> Task :core:processMessages
MessageGenerator: processed 2 Kafka message JSON files(s).

> Task :clients:processMessages
MessageGenerator: processed 160 Kafka message JSON files(s).

> Task :streams:upgrade-system-tests-10:compileTestJava
> Task :streams:upgrade-system-tests-0100:compileTestJava
> Task :streams:upgrade-system-tests-0101:compileTestJava
> Task :streams:upgrade-system-tests-0110:compileTestJava

> Task :group-coordinator:processMessages
MessageGenerator: processed 16 Kafka message JSON files(s).

> Task :generator:assemble

> Task :clients:processTestMessages
MessageGenerator: processed 4 Kafka message JSON files(s).

> Task :metadata:processMessages
MessageGenerator: processed 25 Kafka message JSON files(s).

> Task :streams:processMessages
MessageGenerator: processed 1 Kafka message JSON files(s).

> Task :transaction-coordinator:compileTestJava NO-SOURCE
> Task :transaction-coordinator:processTestResources NO-SOURCE
> Task :transaction-coordinator:testClasses UP-TO-DATE
> Task :transaction-coordinator:checkstyleTest NO-SOURCE

> Task :raft:processMessages
MessageGenerator: processed 1 Kafka message JSON files(s).

> Task :streams:upgrade-system-tests-0100:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0100:testClasses

> Task :storage:processMessages
MessageGenerator: processed 4 Kafka message JSON files(s).

> Task :generator:compileTestJava
> Task :generator:processTestResources NO-SOURCE
> Task :generator:testClasses
> Task :transaction-coordinator:checkstyleMain
> Task :streams:streams-scala:spotlessScala
> Task :generator:spotbugsTest SKIPPED
> Task :transaction-coordinator:spotbugsTest SKIPPED
> Task :streams:streams-scala:spotlessScalaCheck
> Task :streams:streams-scala:spotlessCheck
> Task :streams:upgrade-system-tests-0100:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-0100:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-0101:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0101:testClasses
> Task :streams:upgrade-system-tests-0101:checkstyleTest
> Task :streams:upgrade-system-tests-0101:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-0101:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-0100:checkstyleTest
> Task :transaction-coordinator:spotbugsMain
> Task :transaction-coordinator:test NO-SOURCE
> Task :transaction-coordinator:check
> Task :transaction-coordinator:build
> Task :streams:upgrade-system-tests-0102:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0102:testClasses
> Task :generator:checkstyleMain
> Task :generator:checkstyleTest
> Task :streams:upgrade-system-tests-0110:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0110:testClasses
> Task :clients:compileJava
> Task :streams:upgrade-system-tests-0101:test
> Task :streams:upgrade-system-tests-0101:check
> Task :streams:upgrade-system-tests-0101:build
> Task :streams:upgrade-system-tests-10:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-0102:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-0102:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-10:testClasses
> Task :rat
> Task :check
> Task :build
> Task :streams:upgrade-system-tests-0110:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-0110:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-11:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-11:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-11:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-11:jar
> Task :streams:upgrade-system-tests-11:assemble
> Task :streams:upgrade-system-tests-11:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-0102:checkstyleTest
> Task :streams:upgrade-system-tests-20:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-20:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-20:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-20:jar
> Task :streams:upgrade-system-tests-20:assemble
> Task :streams:upgrade-system-tests-20:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-0110:checkstyleTest
> Task :streams:upgrade-system-tests-0100:test
> Task :streams:upgrade-system-tests-0100:check
> Task :streams:upgrade-system-tests-0100:build
> Task :streams:upgrade-system-tests-21:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-21:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-21:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-21:jar
> Task :streams:upgrade-system-tests-21:assemble
> Task :streams:upgrade-system-tests-21:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-10:checkstyleTest
> Task :streams:upgrade-system-tests-10:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-10:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-0102:test
> Task :streams:upgrade-system-tests-0102:check
> Task :streams:upgrade-system-tests-0102:build
> Task :streams:upgrade-system-tests-22:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-22:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-22:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-22:jar
> Task :streams:upgrade-system-tests-22:assemble
> Task :streams:upgrade-system-tests-22:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-11:compileTestJava
> Task :streams:upgrade-system-tests-11:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-11:testClasses
> Task :streams:upgrade-system-tests-0110:test
> Task :streams:upgrade-system-tests-0110:check
> Task :streams:upgrade-system-tests-0110:build
> Task :streams:upgrade-system-tests-23:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-23:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-23:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-23:jar
> Task :streams:upgrade-system-tests-23:assemble
> Task :streams:upgrade-system-tests-23:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-11:checkstyleTest
> Task :streams:upgrade-system-tests-11:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-11:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-10:test
> Task :streams:upgrade-system-tests-10:check
> Task :streams:upgrade-system-tests-10:build
> Task :streams:upgrade-system-tests-24:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-24:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-24:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-24:jar
> Task :streams:upgrade-system-tests-24:assemble
> Task :streams:upgrade-system-tests-24:checkstyleMain NO-SOURCE
> Task :generator:spotbugsMain
> Task :streams:upgrade-system-tests-20:compileTestJava
> Task :streams:upgrade-system-tests-20:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-20:testClasses
> Task :streams:upgrade-system-tests-11:test
> Task :streams:upgrade-system-tests-11:check
> Task :streams:upgrade-system-tests-11:build
> Task :streams:upgrade-system-tests-20:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-20:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-25:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-25:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-25:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-25:jar
> Task :streams:upgrade-system-tests-25:assemble
> Task :streams:upgrade-system-tests-25:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-20:checkstyleTest
> Task :streams:upgrade-system-tests-21:compileTestJava
> Task :streams:upgrade-system-tests-21:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-21:testClasses
> Task :streams:upgrade-system-tests-20:test
> Task :streams:upgrade-system-tests-20:check
> Task :streams:upgrade-system-tests-20:build
> Task :streams:upgrade-system-tests-26:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-26:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-26:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-26:jar
> Task :streams:upgrade-system-tests-26:assemble
> Task :streams:upgrade-system-tests-26:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-24:compileTestJava
> Task :streams:upgrade-system-tests-24:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-24:testClasses
> Task :streams:upgrade-system-tests-22:compileTestJava
> Task :streams:upgrade-system-tests-22:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-22:testClasses
> Task :streams:upgrade-system-tests-23:compileTestJava
> Task :streams:upgrade-system-tests-23:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-23:testClasses
> Task :streams:upgrade-system-tests-21:checkstyleTest
> Task :streams:upgrade-system-tests-21:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-21:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-22:checkstyleTest
> Task :streams:upgrade-system-tests-22:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-22:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-25:compileTestJava
> Task :streams:upgrade-system-tests-23:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-23:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-24:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-24:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-25:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-25:testClasses
> Task :streams:upgrade-system-tests-24:checkstyleTest
> Task :streams:upgrade-system-tests-23:checkstyleTest
> Task :streams:upgrade-system-tests-21:test
> Task :streams:upgrade-system-tests-21:check
> Task :streams:upgrade-system-tests-21:build
> Task :streams:upgrade-system-tests-25:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-25:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-27:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-27:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-27:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-27:jar
> Task :streams:upgrade-system-tests-27:assemble
> Task :streams:upgrade-system-tests-27:checkstyleMain NO-SOURCE

> Task :generator:test

Gradle Test Run :generator:test > Gradle Test Executor 30 > IsNullConditionalTest > testNotNullCheck() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 30 > IsNullConditionalTest > testNeverNullWithBlockScope() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 30 > IsNullConditionalTest > testNeverNull() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 30 > IsNullConditionalTest > testAnotherNullCheck() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 30 > IsNullConditionalTest > testNullCheck() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > testToSnakeCase() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > testCapitalizeFirst() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > testConstants() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > testLowerCaseFirst() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > testFirstIsCapitalized() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 31 > MessageGeneratorTest > stripSuffixTest() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 32 > VersionsTest > testIntersections() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 32 > VersionsTest > testSubtract() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 32 > VersionsTest > testRoundTrips() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 32 > VersionsTest > testVersionsParse() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 32 > VersionsTest > testContains() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 36 > EntityTypeTest > testVerifyTypeMismatches() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 36 > EntityTypeTest > testVerifyTypeMatches() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 36 > EntityTypeTest > testUnknownEntityType() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidTaggedVersionsNotASubetOfVersions() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testAlwaysTrueConditionalWithAlwaysEmitBlockScope() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidNullDefaultForPotentiallyNonNullableStruct() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testLowerRangeCheckWithElse() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testFullRangeCheck() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidNullDefaultForPotentiallyNonNullableArray() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testAlwaysTrueConditional() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidFieldName() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testAlwaysFalseConditional() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testLowerRangeCheckWithIfMember() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testUpperRangeCheckWithIfNotMember() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidTaggedVersionsWithoutTag() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidFlexibleVersionsRange() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testUpperRangeCheckWithIfMember() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testAnotherAlwaysFalseConditional() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testAllowMembershipCheckAlwaysFalseFails() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testLowerRangeCheckWithIfNotMember() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidNullDefaultForInt() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 34 > VersionConditionalTest > testUpperRangeCheckWithElse() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testNullDefaultsWithDeprecatedVersions() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testDuplicateTags() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidNullDefaultForNullableStruct() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidTaggedVersionsRange() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testNullDefaults() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidTagWithoutTaggedVersions() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidNegativeTag() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 33 > MessageDataGeneratorTest > testInvalidSometimesNullableTaggedField() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 38 > CodeBufferTest > testWrite() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 38 > CodeBufferTest > testIndentMustBeNonNegative() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 38 > CodeBufferTest > testEquals() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 35 > StructRegistryTest > testDuplicateCommonStructError() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 35 > StructRegistryTest > testSingleStruct() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 35 > StructRegistryTest > testReSpecifiedCommonStructError() PASSED

Gradle Test Run :generator:test > Gradle Test Executor 35 > StructRegistryTest > testCommonStructs() PASSED

> Task :streams:upgrade-system-tests-23:test
> Task :streams:upgrade-system-tests-23:check
> Task :streams:upgrade-system-tests-23:build
> Task :streams:upgrade-system-tests-28:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-28:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-28:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-28:jar
> Task :streams:upgrade-system-tests-28:assemble
> Task :streams:upgrade-system-tests-28:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-26:compileTestJava
> Task :streams:upgrade-system-tests-26:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-26:testClasses
> Task :streams:upgrade-system-tests-22:test
> Task :streams:upgrade-system-tests-22:check
> Task :streams:upgrade-system-tests-22:build
> Task :streams:upgrade-system-tests-26:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-26:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-30:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-30:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-30:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-30:jar
> Task :streams:upgrade-system-tests-30:assemble
> Task :streams:upgrade-system-tests-30:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-25:checkstyleTest
> Task :streams:upgrade-system-tests-26:checkstyleTest
> Task :generator:check
> Task :generator:build
> Task :streams:upgrade-system-tests-31:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-31:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-31:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-31:jar
> Task :streams:upgrade-system-tests-31:assemble
> Task :streams:upgrade-system-tests-31:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-24:test
> Task :streams:upgrade-system-tests-24:check
> Task :streams:upgrade-system-tests-24:build
> Task :streams:upgrade-system-tests-32:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-32:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-32:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-32:jar
> Task :streams:upgrade-system-tests-32:assemble
> Task :streams:upgrade-system-tests-32:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-27:compileTestJava
> Task :streams:upgrade-system-tests-27:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-27:testClasses
> Task :streams:upgrade-system-tests-27:checkstyleTest
> Task :streams:upgrade-system-tests-27:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-27:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-28:compileTestJava
> Task :streams:upgrade-system-tests-28:processTestResources NO-SOURCE
> Task :streams:upgrade-system-tests-28:testClasses
> Task :streams:upgrade-system-tests-27:test
> Task :streams:upgrade-system-tests-27:check
> Task :streams:upgrade-system-tests-27:build
> Task :streams:upgrade-system-tests-28:spotbugsMain NO-SOURCE
> Task :streams:upgrade-system-tests-28:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-25:test
> Task :streams:upgrade-system-tests-25:check
> Task :streams:upgrade-system-tests-25:build
> Task :streams:upgrade-system-tests-33:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-33:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-33:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-34:compileJava NO-SOURCE
> Task :streams:upgrade-system-tests-34:processResources NO-SOURCE
> Task :streams:upgrade-system-tests-34:classes UP-TO-DATE
> Task :streams:upgrade-system-tests-33:jar
> Task :streams:upgrade-system-tests-33:assemble
> Task :streams:upgrade-system-tests-33:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-34:jar
> Task :streams:upgrade-system-tests-34:assemble
> Task :streams:upgrade-system-tests-34:checkstyleMain NO-SOURCE
> Task :streams:upgrade-system-tests-28:checkstyleTest
> Task :clients:classes
> Task :streams:upgrade-system-tests-26:test
> Task :streams:upgrade-system-tests-31:compileTestJava
> Task :tools:tools-api:compileJava
> Task :tools:tools-api:classes
> Task :tools:tools-api:jar
> Task :server-common:compileJava
> Task :examples:compileJava
> Task :storage:storage-api:compileJava
> Task :streams:upgrade-system-tests-28:test
> Task :server-common:classes
> Task :raft:compileJava
> Task :server-common:jar
> Task :raft:classes
> Task :raft:jar
> Task :storage:storage-api:classes
> Task :storage:storage-api:jar
> Task :examples:classes
> Task :examples:jar
> Task :examples:assemble
> Task :streams:upgrade-system-tests-30:compileTestJava
> Task :examples:checkstyleMain
> Task :examples:compileTestJava NO-SOURCE
> Task :examples:testClasses UP-TO-DATE
> Task :examples:checkstyleTest NO-SOURCE
> Task :storage:compileJava
> Task :storage:classes
> Task :clients:shadowJar
> Task :clients:jar SKIPPED
> Task :clients:assemble UP-TO-DATE
> Task :storage:jar
> Task :streams:upgrade-system-tests-34:compileTestJava
> Task :examples:spotbugsTest SKIPPED
> Task :streams:upgrade-system-tests-33:compileTestJava
> Task :log4j-appender:compileJava
> Task :log4j-appender:classes
> Task :log4j-appender:jar
> Task :log4j-appender:assemble
> Task :metadata:compileJava
> Task :log4j-appender:checkstyleMain
> Task :metadata:classes
> Task :connect:api:compileJava
> Task :metadata:jar
> Task :connect:json:compileJava
> Task :connect:api:classes
> Task :connect:json:classes
> Task :connect:transforms:compileJava
> Task :connect:transforms:classes
> Task :metadata:assemble
> Task :streams:upgrade-system-tests-32:compileTestJava
> Task :group-coordinator:compileJava
> Task :group-coordinator:classes
> Task :group-coordinator:jar
> Task :group-coordinator:assemble
> Task :server:compileJava
> Task :core:compileJava NO-SOURCE
> Task :streams:compileJava
> Task :examples:spotbugsMain
> Task :server:classes
> Task :group-coordinator:checkstyleMain
> Task :examples:test NO-SOURCE
> Task :examples:check
> Task :examples:build
> Task :server:jar
> Task :clients:checkstyleMain
> Task :clients:compileTestJava
> Task :streams:classes
> Task :streams:copyDependantLibs
> Task :log4j-appender:spotbugsMain
> Task :metadata:checkstyleMain
> Task :streams:jar
> Task :raft:assemble
> Task :core:compileScala
> Task :server:assemble
> Task :server:checkstyleMain
> Task :raft:checkstyleMain
> Task :server-common:assemble
> Task :server-common:checkstyleMain
> Task :group-coordinator:spotbugsMain
> Task :metadata:spotbugsMain
> Task :raft:spotbugsMain
> Task :server:spotbugsMain
> Task :server-common:spotbugsMain
> Task :clients:testClasses
> Task :clients:spotbugsTest SKIPPED
> Task :clients:checkstyleTest
> Task :server-common:compileTestJava
> Task :server-common:testClasses
> Task :clients:spotbugsMain
> Task :server:compileTestJava
> Task :server:testClasses
> Task :storage:storage-api:compileTestJava
> Task :storage:storage-api:testClasses
> Task :connect:api:copyDependantLibs
> Task :connect:api:jar
> Task :connect:json:copyDependantLibs
> Task :connect:json:jar
> Task :connect:transforms:copyDependantLibs
> Task :connect:transforms:jar
> Task :log4j-appender:compileTestJava
> Task :log4j-appender:testClasses
> Task :raft:compileTestJava
> Task :raft:testClasses
> Task :log4j-appender:checkstyleTest
> Task :log4j-appender:spotbugsTest SKIPPED
> Task :group-coordinator:compileTestJava
> Task :group-coordinator:testClasses

> Task :log4j-appender:test

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testSyncSendWithoutIgnoringExceptionsShouldNotThrowException() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testLog4jAppends() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testRealProducerConfigWithSyncSendAndNotIgnoringExceptionsShouldThrowException() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testSetSaslMechanism() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testJaasConfigNotSet() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testRealProducerConfigWithSyncSendShouldNotThrowException() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testKafkaLog4jConfigs() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testSyncSendAndSimulateProducerFailShouldThrowException() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testSaslMechanismNotSet() PASSED

Gradle Test Run :log4j-appender:test > Gradle Test Executor 87 > KafkaLog4jAppenderTest > testSetJaasConfig() PASSED

> Task :metadata:compileTestJava
> Task :metadata:testClasses
> Task :group-coordinator:spotbugsTest SKIPPED
> Task :log4j-appender:check
> Task :log4j-appender:build
> Task :metadata:spotbugsTest SKIPPED
> Task :group-coordinator:checkstyleTest
> Task :raft:spotbugsTest SKIPPED

> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.8.0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.8.1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.8.2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.9.0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecord(MetadataVersion) > "testNewOffsetCommitRecord(MetadataVersion).3.8-IV0" PASSED


> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecordThrowsWhenNullSubscription() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testEmptyPartitionMetadataWhenRacksUnavailableGroupSubscriptionMetadataRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecord(MetadataVersion, short) > "testNewGroupMetadataRecord(MetadataVersion, short).0.10.0-IV0, 0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecord(MetadataVersion, short) > "testNewGroupMetadataRecord(MetadataVersion, short).1.1-IV0, 1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecord(MetadataVersion, short) > "testNewGroupMetadataRecord(MetadataVersion, short).2.2-IV0, 2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecord(MetadataVersion, short) > "testNewGroupMetadataRecord(MetadataVersion, short).3.5-IV0, 3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupSubscriptionMetadataRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.8.0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.8.1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.8.2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.9.0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupWithEmptyProtocolType() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion) > "testNewOffsetCommitRecordWithExpireTimestamp(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataRecordThrowsWhenEmptyAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewTargetAssignmentEpochTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewTargetAssignmentTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewTargetAssignmentEpochRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewMemberSubscriptionTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewCurrentAssignmentTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewTargetAssignmentRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewCurrentAssignmentRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewOffsetCommitTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupMetadataTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testEmptyGroupMetadataRecord(MetadataVersion, short) > "testEmptyGroupMetadataRecord(MetadataVersion, short).0.10.0-IV0, 0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testEmptyGroupMetadataRecord(MetadataVersion, short) > "testEmptyGroupMetadataRecord(MetadataVersion, short).1.1-IV0, 1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testEmptyGroupMetadataRecord(MetadataVersion, short) > "testEmptyGroupMetadataRecord(MetadataVersion, short).2.2-IV0, 2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testEmptyGroupMetadataRecord(MetadataVersion, short) > "testEmptyGroupMetadataRecord(MetadataVersion, short).3.5-IV0, 3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupEpochTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewMemberSubscriptionRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupSubscriptionMetadataTombstoneRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > RecordHelpersTest > testNewGroupEpochRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testPreparingRebalanceToStableIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testIsInStates() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberJoinWithUnknownInstanceIdAndKnownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testReplaceGroupInstanceWithNonExistingMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testAwaitingRebalanceToAwaitingRebalanceIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testStableToDeadTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testInitNextGenerationEmptyGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotRebalanceWhenDead() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testPendingMembersLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testInitNextGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testPreparingRebalanceToEmptyTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSelectProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotRebalanceWhenPreparingRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testMaybeElectNewJoinedLeaderChooseExisting() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testEmptyToAwaitingRebalanceIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testDeadToPreparingRebalanceIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotAddPendingMemberIfStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testRemovalFromPendingWhenMemberIsRemoved() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDescribeGroupStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testIsSubscribedToTopic() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotRemovePendingSyncOfUnknownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testRemovalFromPendingSyncWhenMemberIsRemoved() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCanRebalanceWhenCompletingRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testDeadToAwaitingRebalanceIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testDeadToDeadIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testUpdateMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testElectNewJoinedLeader() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testEmptyToDeadTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatIllegalGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupUnknownMemberNewGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testUnknownGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRebalanceCompletesBeforeMemberJoins() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInCompletingRebalanceStateTriggersRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatExpirationShouldRemovePendingMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testValidateOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGetDifferentStaticMemberIdAfterEachRejoin() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testValidateOffsetDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSelectProtocolRaisesIfNoMembers() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testStableToPreparingRebalanceTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testNewGenerationClearsPendingSyncMembers() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSubscribedTopicsNonConsumerGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testReplaceGroupInstance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveGroupStaticMemberWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testAwaitingRebalanceToPreparingRebalanceTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testPreparingRebalanceToDeadTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testStableToStableIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatEmptyGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatDuringPreparingRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testStateTransitionMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testNotCompleteJoinFuture() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCanAddAndRemovePendingSyncMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDescribeGroupRebalancing() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSubscribedTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testDeadToStableIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotAddStaticMemberIfAlreadyPresent() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testAwaitingRebalanceToStableTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCompleteJoinFuture() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSupportsProtocols() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testRemovalFromPendingAfterMemberIsStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testEmptyToStableIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testNotCompleteSyncFuture() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCanRebalanceWhenStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testValidateDeleteGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCompleteSyncFuture() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testOffsetExpirationCondition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testPreparingRebalanceToPreparingRebalanceIllegalTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testSelectProtocolChoosesCompatibleProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > ClassicGroupTest > testCannotAddPendingSyncOfUnknownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > EventAccumulatorTest > testBasicOperations() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testShouldThrowFencedInstanceIdExceptionWhenStaticMemberWithDifferentMemberIdJoins() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > EventAccumulatorTest > testDoneUnblockWaitingThreads() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > EventAccumulatorTest > testKeyConcurrentAndOrderingGuarantees() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > EventAccumulatorTest > testCloseUnblockWaitingThreads() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupDescribeNoErrors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testCreateAndClose() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplayGroupMetadataRecords(boolean) > "testReplayGroupMetadataRecords(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplayGroupMetadataRecords(boolean) > "testReplayGroupMetadataRecords(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testEventsAreDrainedWhenClosed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupMemberEpochValidation() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testProcessingGuarantees() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaderFailureInSyncGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGenerationIdIncrementsOnRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupExistingMemberDoesNotTriggerRebalanceInStableState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testEventsAreProcessed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupSecondJoinInconsistentProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testEventsAreRejectedWhenClosed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMembersValidBatchLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testPendingMemberBatchLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupFromIllegalGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testShouldThrownUnreleasedInstanceIdExceptionWhenNewMemberJoinsWithInUseInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRebalanceTimesOutWhenSyncRequestIsNotReceivedFromFollowers() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 90 > MultiThreadedEventProcessorTest > testRecordThreadIdleRatioTwoThreads() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testResetRebalanceDelayWhenNewMemberJoinsGroupDuringInitialRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupStates() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGroupIdsByTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRebalanceTimesOutWhenSyncRequestIsNotReceived() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupWithEmptyGroupProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupMemberSessionTimeout() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupUnknownConsumerNewDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupCompletedRebalanceSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDynamicMembersJoinGroupWithMaxSizeAndRequiredKnownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRevocationTimeoutExpiration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNewMemberIsRejectedWithMaximumMembersIsReached() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatDuringRebalanceCausesRebalanceInProgress() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithKnownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGenerateRecordsOnNewClassicGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLastJoiningMembersAreKickedOutWhenRejoiningGroupWithMaxSize() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testMemberIdGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDelayRebalanceUptoRebalanceTimeout() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDynamicMembersCanRejoinGroupWithMaxSizeWhileRebalancing() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSecondMemberPartiallyJoinAndTimeout() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnClassicGroupStateTransitionOnLoading() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testUpdatingSubscriptionTriggersNewTargetAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberSyncAsLeaderWithInvalidMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNewMemberTimeoutCompletion() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupInconsistentGroupProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithUnknownMemberIdAndChangeOfProtocolWithSelectedProtocolChanged() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupSessionTimeoutTooLarge() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupSessionTimeoutTooSmall() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupEmptyAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupShouldReceiveErrorIfGroupOverMaxSize() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testCompleteJoinRemoveNotYetRejoinedDynamicMembers() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testMemberJoinsEmptyConsumerGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testListGroups() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testPartitionAssignorExceptionOnRegularHeartbeat() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testCompleteJoinPhaseNoMembersRejoinedExtendsJoinPhase() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnNewMetadataImageWithEmptyDelta() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupAsExistingMemberWithUpdatedMetadataTriggersRebalanceInStableState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnClassicGroupStateTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupDescribeWithErrors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupFromUnchangedLeaderShouldRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupMaybeDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupCompletionWhenPendingMemberTimesOut() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberHeartbeatLeaderWithInvalidMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinedMemberPendingMemberBatchLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupRebalanceSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveGroupUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupFollowerAfterLeader() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNoGroupEpochBumpWhenStaticMemberTemporarilyLeaves() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnLoadedSchedulesClassicGroupMemberHeartbeats() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSessionTimeoutLifecycle() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateWithUpdatedProtocolTriggersRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatUnknownMemberExistingGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupUnknownConsumerExistingGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeavingStaticMemberBumpsGroupEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveGroupUnknownMemberIdExistingGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSubscriptionMetadataRefreshedAgainAfterWriteFailure() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupFromUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupReplaceStaticMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDescribeGroupsGroupIdNotFoundException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMembersUnknownInstanceBatchLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupJoinInconsistentProtocolType() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNewMemberFailureAfterJoinGroupCompletion() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupCompletionWhenPendingMemberJoins() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberFenceDuplicateRejoinedFollower() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGroupEpochBumpWhenNewStaticMemberJoins() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithLeaderIdAndKnownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout() PASSED

> Task :metadata:checkstyleTest
> Task :raft:checkstyleTest
> Task :server:spotbugsTest SKIPPED

> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMembersJoinGroupWithMaxSize() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberReJoinWithIllegalStateAsUnknownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithFollowerIdAndChangeOfProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testExistingMemberJoinDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNewJoiningMemberTriggersNewTargetAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatExpirationShouldRemoveMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveGroupWithFencedInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerHeartbeatRequestValidation() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupProtocolTypeIsNotProvidedWhenAnErrorOccurs() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupExistingMemberInEmptyState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithLeaderIdAndUnknownMemberId(boolean) > "testStaticMemberRejoinWithLeaderIdAndUnknownMemberId(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithLeaderIdAndUnknownMemberId(boolean) > "testStaticMemberRejoinWithLeaderIdAndUnknownMemberId(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithUnknownMemberIdAndChangeOfProtocolWhileSelectProtocolUnchanged() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testCompleteJoinPhaseInEmptyStateSkipsRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSessionTimeoutExpirationStaticMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSubscriptionMetadataRefreshedAfterGroupIsLoaded() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnLoadedExceedGroupMaxSizeTriggersRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSessionTimeoutExpiration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentWhenOneConsumerRemovedAfterInitialAssignmentWithTwoConsumersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupExistingMemberUpdatedMetadataTriggersRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testOneConsumerNoTopic() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentWhenOneConsumerAddedAndOnePartitionAfterInitialAssignmentWithTwoConsumersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDynamicMembersJoinGroupWithMaxSizeAndNotRequiredKnownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentNumConsumersGreaterThanNumPartitionsWhenOneConsumerAdded() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentWhenOnePartitionAddedForTwoConsumersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testOneConsumerSubscribedToNonExistentTopic() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupReturnsAnErrorWhenProtocolTypeIsInconsistent() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testFirstAssignmentThreeConsumersThreeTopicsDifferentSubscriptions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testFirstAssignmentNumConsumersGreaterThanNumPartitions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentWhenMultipleSubscriptionsRemovedAfterInitialAssignmentWithThreeConsumersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnConsumerGroupStateTransition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testReassignmentWhenOneConsumerAddedAfterInitialAssignmentWithTwoConsumersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testHeartbeatDuringCompletingRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > RangeAssignorTest > testFirstAssignmentTwoConsumersTwoTopicsSameSubscriptions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupMemberEpochValidationForStaticMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromNewTargetToAssigning() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromStableToStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromNewTargetToRevoke() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromNewTargetToStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testShouldThrowFencedInstanceIdExceptionWhenStaticMemberWithDifferentMemberIdLeaves() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromAssigningToStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupFromUnchangedFollowerDoesNotRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromRevokeToAssigning() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromRevokeToStableWhenPartitionsPendingRevocationAreReassignedBeforeBeingRevoked() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnConsumerGroupStateTransitionOnLoading() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testNewTargetRestartReconciliation() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateNoError(boolean) > "testReplaceStaticMemberInStableStateNoError(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateNoError(boolean) > "testReplaceStaticMemberInStableStateNoError(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinAsFollowerWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinedMemberPendingMemberBatchLeaveGroupWithUnknownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateSucceeds(boolean) > "testReplaceStaticMemberInStableStateSucceeds(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateSucceeds(boolean) > "testReplaceStaticMemberInStableStateSucceeds(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromRevokeToRevoke(List) > "testTransitionFromRevokeToRevoke(List).null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeavingMemberBumpsGroupEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testNewMemberJoinExpiration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromRevokeToRevoke(List) > "testTransitionFromRevokeToRevoke(List).[]" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromRevokeToStable() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CurrentAssignmentBuilderTest > testTransitionFromAssigningToAssigning() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithUnknownMemberIdAndChangeOfProtocolWhileSelectProtocolUnchangedPersistenceFailure() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorResultTest > testRecordsCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorResultTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorResultTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testShouldThrowUnknownMemberIdExceptionWhenUnknownStaticMemberLeaves() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupLeaderAfterFollower() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGenerateRecordsOnNewClassicGroupFailureTransformsError() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupFromUnknownMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testShouldThrownUnknownMemberIdExceptionWhenUnknownStaticMemberJoins() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupReturnsTheProtocolType() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupAppendErrorConversion() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testValidLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupMemberSessionTimeoutDuringRebalance() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testLeaveGroupInvalidGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupAsLeaderAppendFailureTransformsError() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupSucceedWhenProtocolTypeAndNameAreNotProvided() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinAsFollowerWithMismatchedInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberGetsBackAssignmentUponRejoin() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupMaybeDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupAsExistingLeaderTriggersRebalanceInStableState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnNewMetadataImage() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReconciliationRestartsWhenNewTargetAssignmentIsInstalled() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupReturnsAnErrorWhenProtocolNameIsInconsistent() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMembersLeaveUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithExplicitUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithInvalidRecordType() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testGroupStuckInRebalanceTimeoutDueToNonjoinedStaticMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMembersFencedInstanceBatchLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeAllRecordTypes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRevocationTimeoutLifecycle() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithKeyEmptyBuffer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testValidHeartbeat() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithTombstoneForValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberJoinAsFirstMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testSyncGroupSucceedWhenProtocolTypeAndNameAreConsistent() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithInvalidValueBytes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithInvalidKeyBytes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinAsLeaderWithMismatchedInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserializeWithValueEmptyBuffer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRebalanceTimesOutWhenSyncRequestIsNotReceivedFromLeaders() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testDeserialize() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testSerializeValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testStaticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testSerializeNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReplaceStaticMemberInStableStateErrors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > RecordSerdeTest > testSerializeKey() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testClassicGroupMemberHeartbeatMaintainsSession() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > AssignmentTest > testFromTargetAssignmentRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testUnknownMemberIdJoinsConsumerGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > AssignmentTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > AssignmentTest > testPartitionsAndMetadataCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > AssignmentTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testOnLoaded() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testJoinGroupExistingPendingMemberWithGroupInstanceIdThrowsException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testReconciliationProcess() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testRebalanceDoesNotTimeOutWhenAllSyncAreReceived() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > GroupMetadataManagerTest > testConsumerGroupDescribeBeforeAndAfterCommittingOffset() PASSED

> Task :server:checkstyleTest


> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testOneMemberNoTopicSubscription() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testValidityAndBalanceForLargeSampleSet() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentWhenOneMemberAddedAfterInitialAssignmentWithTwoMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentWhenOneSubscriptionRemovedAfterInitialAssignmentWithTwoMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentWhenOneMemberRemovedAfterInitialAssignmentWithThreeMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentOnAddingPartitionsWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentOnRackChangesWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsWithMemberAndPartitionRacks2() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testOneMemberSubscribedToNonexistentTopic() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentTwoMembersTwoTopicsNoMemberRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentForTwoMembersTwoTopicsGivenUnbalancedPrevAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentTwoMembersTwoTopicsNoPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentWhenOneSubscriptionRemovedWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentWhenPartitionsAreAddedForTwoMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentNumMembersGreaterThanTotalNumPartitions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsWithSomeMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > OptimizedUniformAssignmentBuilderTest > testReassignmentOnAddingMemberWithRackAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testUpdateSubscriptionMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testAsDescribedGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testUpdatingMemberUpdatesPartitionEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testIsSubscribedToTopic() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testDeletingMemberRemovesPartitionEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testUpdatingMemberUpdatesPartitionEpochWhenPartitionIsReassignedBeforeBeingRevoked() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testAddPartitionEpochs() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testAsListedGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testGetOrCreateMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testValidateOffsetFetch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testUpdateMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testRemoveMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testValidateOffsetCommit(boolean) > "testValidateOffsetCommit(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testValidateOffsetCommit(boolean) > "testValidateOffsetCommit(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testPreferredServerAssignor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testGroupState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testStateTransitionMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testMetadataRefreshDeadline() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testIsInStatesCaseInsensitive() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testGroupTypeFromString() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testRemovePartitionEpochs() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testGetStaticMemberByInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testUpdatingMemberUpdatesPartitionEpochWhenPartitionIsNotReleased() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testValidateDeleteGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testOffsetExpirationCondition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testRemoveStaticMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 91 > ConsumerGroupTest > testNoStaticMember() PASSED

> Task :server-common:checkstyleTest
> Task :server-common:spotbugsTest SKIPPED

> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testPartialAssignmentUpdate() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testCreateAssignmentMemberSpec() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testEmpty() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testAssignmentHasNotChanged() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testNewMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testUpdateMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testDeleteMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testStaticMemberReplace() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > TargetAssignmentBuilderTest > testAssignmentSwapped() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testRevertLastWrittenOffsetFailed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testUpdateLastCommittedOffsetFailed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testUpdateLastWrittenOffsetFailed() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testUpdateLastCommittedOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testRevertWrittenOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 93 > SnapshottableCoordinatorTest > testUpdateLastWrittenOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleUnloadingWithStalePartitionEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testRetryableTimer() PASSED


> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleLoadingAfterLoadingFailure() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionCompletionWhenReplayFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOp() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testClose() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleReadOp() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleLoadingWithFailure() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOpWhenWriteFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testPartitionLoadGeneratesSnapshotAtHighWatermark() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTimer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testPartitionLoadGeneratesSnapshotAtHighWatermarkNoRecordsLoaded() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleReadOpWhenOpsFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testPartitionLoadSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOpWhenWriteTimesOut() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleUnloadingWithEmptyEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionCompletionWhenWriteTimesOut() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleUnloadingWhenContextDoesntExist() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionCompletion(TransactionResult) > "testScheduleTransactionCompletion(TransactionResult).ABORT" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionCompletion(TransactionResult) > "testScheduleTransactionCompletion(TransactionResult).COMMIT" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleReadOpWhenPartitionInactive() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionalWriteOp() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testNonRetryableTimer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testRetryableTimerWithCustomBackoff() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOpWhenReplayFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleUnloading() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionCompletionWhenWriteFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testOnNewMetadataImage() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOpWhenOpFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleLoading() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleWriteOpWhenInactive() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleLoadingWithStalePartitionEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testStateChanges() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testRescheduleTimer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testScheduleTransactionalWriteOpWhenVerificationFails() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 92 > CoordinatorRuntimeTest > testCancelTimer() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupTransactionalOffsetCommitWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWhileInCompletingRebalanceState() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchAllOffsetsWithPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetFetchFromAdminClient() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchAllOffsetsAtDifferentCommittedOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupFetchOffsetsWithDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetDeletionsSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testReplayWithTombstoneAndPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOnPartitionsDeleted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithFencedInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetFetchWithStaleMemberEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitsSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).4" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).5" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).6" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).7" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).8" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short) > "testConsumerGroupOffsetCommitWithVersionSmallerThanVersion9(short).9" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchOffsetsAtDifferentCommittedOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testReplayTransactionEndMarkerKeepsTheMostRecentCommittedOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).0" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).2" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).3" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).4" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).5" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).6" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).7" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).8" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitWithUnknownGroup(short) > "testOffsetCommitWithUnknownGroup(short).9" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithUnknownInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetDeleteWithPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testDeleteGroupAllOffsetsWithPendingTransactionalOffsets(GroupType) > "testDeleteGroupAllOffsetsWithPendingTransactionalOffsets(GroupType).consumer" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testDeleteGroupAllOffsetsWithPendingTransactionalOffsets(GroupType) > "testDeleteGroupAllOffsetsWithPendingTransactionalOffsets(GroupType).classic" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testCleanupExpiredOffsetsWithPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetFetchWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetDeleteWithErrors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetCommitsNumberMetricWithTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupTransactionalOffsetCommitWithUnknownGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchOffsetsWithPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayGroupMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitFromAdminClient() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testSimpleGroupOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testReplayTransactionEndMarkerWithCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayOffsetCommitWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupTargetAssignmentMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupMetadataWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithOffsetMetadataTooLarge() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayWithUnsupportedVersion() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupTransactionalOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetDeleteWithPendingTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testCleanupExpiredOffsetsGroupHasNoOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupTransactionalOffsetCommitWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithUnknownMemberId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testSimpleGroupOffsetCommitWithInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchAllOffsetsWithUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitMaintainsSession() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupTransactionalOffsetCommitWithUnknownGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupTransactionalOffsetCommitWithStaleMemberEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testCleanupExpiredOffsetsEmptyOffsetExpirationCondition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testDeleteGroupAllOffsets(GroupType) > "testDeleteGroupAllOffsets(GroupType).consumer" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testDeleteGroupAllOffsets(GroupType) > "testDeleteGroupAllOffsets(GroupType).classic" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testOffsetsExpiredSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithIllegalGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetDeleteWithErrors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testFetchOffsetsWithUnknownGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupFetchAllOffsetsWithDeadGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testCleanupExpiredOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithRetentionTime() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetDelete() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupTransactionalOffsetCommitWithIllegalGenerationId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testReplay() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetFetchWithMemberIdAndEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupTransactionalOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testGenericGroupOffsetCommitWithoutMemberIdAndGeneration() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testTransactionalReplay() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testConsumerGroupOffsetCommitWithStaleMemberEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > OffsetMetadataManagerTest > testCleanupExpiredOffsetsGroupDoesNotExist() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testMatchesSupportedProtocols() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testHasHeartbeatSatisfied() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testHasValidGroupInstanceId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testDescribeNoMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testMetadataRaisesOnUnsupportedProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testVoteForPreferredProtocol() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testVoteRaisesOnNoSupportedProtocols() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testPlainProtocolSet() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > ClassicGroupMemberTest > testDescribe() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > SubscribedTopicMetadataTest > testRacksForPartition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > SubscribedTopicMetadataTest > testNumberOfPartitions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > SubscribedTopicMetadataTest > testAttribute() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > SubscribedTopicMetadataTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 94 > SubscribedTopicMetadataTest > testTopicMetadataCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testDeleteGroupsInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testOnPartitionsDeleted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupTargetAssignmentMemberKeyWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupPartitionMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayGroupMetadataWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayKeyCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupCurrentMemberAssignmentWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testDeleteGroups() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayEndTransactionMarker(TransactionResult) > "testReplayEndTransactionMarker(TransactionResult).ABORT" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayEndTransactionMarker(TransactionResult) > "testReplayEndTransactionMarker(TransactionResult).COMMIT" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testCommitOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupPartitionMetadataWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testScheduleCleanupGroupMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupTargetAssignmentMetadataWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupMemberMetadataWithNullValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testConsumerGroupHeartbeat() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testCommitTransactionalOffset() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupMemberMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupTargetAssignmentMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayConsumerGroupCurrentMemberAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testOnLoaded() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testCleanupGroupMetadata() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorShardTest > testReplayTransactionalOffsetCommit() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > OffsetExpirationConditionImplTest > testIsOffsetExpired() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentWhenOneSubscriptionRemovedAfterInitialAssignmentWithTwoMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentWhenOneMemberRemovedAfterInitialAssignmentWithThreeMembersThreeTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentOnAddingPartitionsWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentOnRackChangesWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsNoPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testFirstAssignmentTwoMembersTwoTopicsNoMemberRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentWhenOneMemberAddedAndPartitionsAddedTwoMembersTwoTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentWhenPartitionsAreAddedForTwoMembersNoMemberRack() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentForTwoMembersThreeTopicsGivenUnbalancedPrevAssignment() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentWhenOneSubscriptionRemovedWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testTwoMembersSubscribedToNonexistentTopics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testFirstAssignmentNumMembersGreaterThanTotalNumPartitions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsWithSomeMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testFirstAssignmentThreeMembersThreeTopicsWithMemberAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testTwoMembersNoTopicSubscription() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GeneralUniformAssignmentBuilderTest > testReassignmentOnAddingMemberWithRackAndPartitionRacks() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testAsConsumerGroupDescribeWithTargetAssignmentNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testUpdateWithConsumerGroupMemberMetadataValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testNewMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testUpdateMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testAsConsumerGroupDescribeWithTopicNameNotFound() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testAsConsumerGroupDescribeMember() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > ConsumerGroupMemberTest > testUpdateWithConsumerGroupCurrentMemberAssignmentValue() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorRuntimeMetricsTest > testEventQueueSize() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorRuntimeMetricsTest > testThreadIdleRatioSensor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorRuntimeMetricsTest > testPartitionLoadSensorMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorRuntimeMetricsTest > testUpdateNumPartitionsMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 95 > GroupCoordinatorRuntimeMetricsTest > testMetricNames() PASSED

> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForValidConsumerByteRate2() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForFractionalConsumerByteRate() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithUser() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithIpAndClientId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testInvalidEntityTypes() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForValidRequestPercentage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEmptyEntity() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForUnknownQuota() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testIsValidIpEntityWithNull() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testIsValidIpEntityWithLocalhost() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithUserAndClientId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForUnresolvableIpEntity() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForConsumerByteRateTooLarge() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testEntityTypes() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithIpAndUser() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForZeroQuota() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testInvalidQuotaKeys() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testIsValidIpEntityWithUnresolvableHostname() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForNegativeQuota() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testValidateQuotaKeyValueForValidConsumerByteRate() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testAlterAndRemove() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithIp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotaControlManagerTest > testConfigKeysForEntityTypeWithClientId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > LogReplayTrackerTest > testEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ControllerMetadataMetricsPublisherTest > testLoadSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ControllerMetadataMetricsPublisherTest > testPublish() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ControllerMetadataMetricsPublisherTest > testMetricsBeforePublishing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotasImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotasImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotasImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClientQuotasImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetadataImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > BrokersToIsrsTest > testLeadersOnlyIterator() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > BrokersToIsrsTest > testNoLeader() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > BrokersToIsrsTest > testIterator() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetadataImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetadataImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetadataImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testNoMetadataVersionChangeDuringMigration() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClusterImageNodeTest > testBrokersChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClusterImageNodeTest > testUnknownChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testReplayRecords() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClusterImageNodeTest > testControllersChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > ClusterImageNodeTest > testChildNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testUpdateFeatures() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > SnapshotEmitterTest > testEmit() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCanUseUnsafeDowngradeIfMetadataChanged() SKIPPED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > RecordListWriterTest > testWrite() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > RecordListWriterTest > testCloseWithoutFreeze() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testApplyMetadataVersionChangeRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > RecordListWriterTest > testWriteAfterClose() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testUpdateFeaturesErrorCases() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCanUseSafeDowngradeIfMetadataDidNotChange() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testTranslateConfigTypes() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testIsSplittable() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testUnsafeDowngradeIsTemporarilyDisabled() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotDowngradeBefore3_3_IV0() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testResolveEffectiveTopicConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testTranslateConfigSources() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCanUpgradeToHigherVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testGetConfigValueDefault() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KafkaConfigSchemaTest > testIsSensitive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotDowngradeToVersionBeforeMinimumSupportedKraftVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotUnsafeDowngradeToHigherVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotUseSafeDowngradeIfMetadataChanged() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCreateFeatureLevelRecords() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testReplay() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KRaftMigrationZkWriterTest > testReconcileSnapshotTopics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotUpgradeToLowerVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KRaftMigrationZkWriterTest > testReconcileSnapshotEmptyZk() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > FeatureControlManagerTest > testCannotDowngradeToHigherVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > KRaftMigrationZkWriterTest > testExtraneousZkPartitions() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testAlwaysHasNodeId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testDefaultFeatureMap() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testHasBrokerId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testLocalSupportedFeature() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV0FromNumber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV1ToNumberString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testZkMigrationNotReadyIfNotAllControllersRegistered() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testZkMigrationNotReadyIfMetadataVersionTooLow() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV0FromNumberString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV0ToNumber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testIsControllerId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testZkMigrationReadyIfControllerRegistrationNotSupported() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testAlwaysHasClusterId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testFromInvalidNumber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testReasonNotSupported() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testFromInvalidString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV1FromNumberString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV1FromNumber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV1ToNumber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 98 > MetaPropertiesVersionTest > testV0ToNumberString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testZkMigrationNotReadyIfControllerNotReady() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testDefaultFeatureMapWithUnstable() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > QuorumFeaturesTest > testZkMigrationReadyIfAllControllersReady() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > AclsImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > AclsImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > AclsImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > AclsImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ImageDowngradeTest > testPreControlledShutdownStateVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ImageDowngradeTest > testPremodernVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ImageDowngradeTest > testDirectoryAssignmentState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ClusterImageControllersNodeTest > testNode1Child() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ClusterImageControllersNodeTest > testUnknownChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > ClusterImageControllersNodeTest > testChildNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > RaftSnapshotWriterTest > testCloseWithoutFreeze() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > RaftSnapshotWriterTest > testFreezeAndClose() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > DelegationTokenDataTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > DelegationTokenDataTest > testFromRecordAndToRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > DelegationTokenDataTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > DelegationTokenDataTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testPrefixAcls() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAllowEveryoneIfNoAclFoundConfigEnabled() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testFindResultPrincipalMatching() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAuthorizationWithManyAcls() PASSED


> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 97 > LoggingFaultHandlerTest > testHandleExceptionInAction() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > LoggingFaultHandlerTest > testHandleFault() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > DeadlineTest > testOneMillisecondDeadline() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > DeadlineTest > testNegativeDelayFails() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > DeadlineTest > testOneMillisecondDeadlineWithBase() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > DeadlineTest > testMaximumDelay() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testIterateOverSnapshotWhileExpandingTable() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testEmptyTable() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testReset() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testDeleteOnEmptyDeltaTable() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testIterateOverSnapshotWhileDeletingAndReplacing() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testIteratorAtOlderEpoch() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testAddAndRemove() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testIterateOverSnapshot() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 97 > SnapshottableHashTableTest > testRevert() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionRemoveIf() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionRemove() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfContains(boolean) > "testDelegationOfContains(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfContains(boolean) > "testDelegationOfContains(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfToArrayIntoGivenDestination() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfSpliterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfParallelStream() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfRemoved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionRemoveAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testSingletonSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfStream() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfSize(int) > "testDelegationOfSize(int).1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfSize(int) > "testDelegationOfSize(int).2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfContainsAll(boolean) > "testDelegationOfContainsAll(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfContainsAll(boolean) > "testDelegationOfContainsAll(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionRetainAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testHashCode() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfToArray() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionClear() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfToString(String) > "testDelegationOfToString(String).a" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfToString(String) > "testDelegationOfToString(String).b" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionAdd() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfForEach() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testUnderlying() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testEmptySet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfUnsupportedFunctionAddAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > PCollectionsImmutableSetTest > testDelegationOfAdded() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testChainFuture() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testWaitWithLoggingError() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testWaitWithLogging() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testChainFutureExceptionally() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testWaitWithLoggingTimeout(boolean) > "testWaitWithLoggingTimeout(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > FutureUtilsTest > testWaitWithLoggingTimeout(boolean) > "testWaitWithLoggingTimeout(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimerTaskListTest > testGetDelay() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimerTaskListTest > testAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimelineHashMapTest > testIteration() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimelineHashMapTest > testMapMethods() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimelineHashMapTest > testMapEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimelineHashMapTest > testNullsForbidden() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 96 > TimelineHashMapTest > testEmptyMap() PASSED


> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 99 > ResignedStateTest > testNegativeScenarioAcknowledgeResignation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > ResignedStateTest > testResignedState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > ResignedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > ResignedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testValidSnapshotFilename() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testValidPartialSnapshotFilename() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testDeleteSnapshot(boolean) > "testDeleteSnapshot(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testDeleteSnapshot(boolean) > "testDeleteSnapshot(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testValidDeletedSnapshotFilename() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 99 > SnapshotsTest > testInvalidSnapshotFilenames() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testWakeupClientOnSend() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testSendToBlackedOutDestination() PASSED


> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testNextCheckTimeNs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testFindOneStaleBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testUsableBrokerIterator() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testMetadataOffsetComparator() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testControlledShutdownOffsetIsOnlyUpdatedOnce() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testTouchThrowsExceptionUnlessRegistered() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testCalculateNextBrokerState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testBrokerHeartbeatStateList() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > BrokerHeartbeatManagerTest > testHasValidSession() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ProducerIdControlManagerTest > testUnknownBrokerOrEpoch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ProducerIdControlManagerTest > testMonotonic() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ProducerIdControlManagerTest > testMaxValue() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ProducerIdControlManagerTest > testGenerateProducerIds() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ProducerIdControlManagerTest > testInitialResult() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testNullPointerExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testUnexpectedBaseOffsetExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testInterruptedExceptionFailureMessageWhenInactive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testIsNotTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testNotLeaderExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testNullPointerExceptionFailureMessageWhenInactive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testNotLeaderExceptionFailureMessage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testInterruptedExceptionFailureMessageWhenActive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testRejectedExecutionExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testInterruptedExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testUnexpectedBaseOffsetFailureMessage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testRejectedExecutionExceptionFailureMessage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testTopicExistsExceptionInfo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testNullPointerExceptionFailureMessageWhenActive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testTopicExistsExceptionFailureMessage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > EventHandlerExceptionInfoTest > testIsTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > AclsDeltaTest > testThrowsExceptionOnInvalidStateWhenImageIsEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testValidateFilter() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > AclsDeltaTest > testKeepsDeleteIfInImage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > AclsDeltaTest > testRemovesDeleteIfNotInImage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > AclsDeltaTest > testThrowsExceptionOnInvalidStateWhenImageHasOtherAcls() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testValidateNewAcl() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testUnexpectedBeginTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testMultipleTransactionsInOneBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testOneTransactionInMultipleBatches(boolean) > "testOneTransactionInMultipleBatches(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testOneTransactionInMultipleBatches(boolean) > "testOneTransactionInMultipleBatches(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testLoadSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testSingletonBeginAndEnd() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testAlignedTransactionBatches() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testDeleteDedupe() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testUnexpectedAbortTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testMultipleTransactionsInOneBatchesWithNoOp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetadataBatchLoaderTest > testUnexpectedEndTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterImageBrokersNodeTest > testNode1Child() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterImageBrokersNodeTest > testUnknownChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterImageBrokersNodeTest > testChildNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationsPublisherTest > testName() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationsPublisherTest > testInitialControllers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationsPublisherTest > testOnMetadataUpdate(boolean) > "testOnMetadataUpdate(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationsPublisherTest > testOnMetadataUpdate(boolean) > "testOnMetadataUpdate(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ImageWriterOptionsTest > testSetMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ImageWriterOptionsTest > testHandleLoss() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ImageWriterOptionsTest > testDefaultLossHandler() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationTest > testFromRecordAndToRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationTest > testToNode() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ControllerRegistrationTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testCreateAclDeleteAcl() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > AclControlManagerTest > testAddAndDelete() PASSED


> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testUnsupportedVersionError() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testSendAndFailAuthentication() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testSendAndReceiveOutboundRequest() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testSendAndDisconnect() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).0" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).1" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).2" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).3" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).4" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).5" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).6" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).7" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).8" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).9" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).10" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).11" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).12" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).13" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).14" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).15" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testFetchRequestDowngrade(short) > "testFetchRequestDowngrade(short).16" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > KafkaNetworkChannelTest > testSendToUnknownDestination() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateOffsetLessThanOldestSnapshotOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTruncateBelowHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testAppendAsFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTopicId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateValidEpochAndOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotMuchEalierEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateOffsetLessThanLEO() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testEndOffsetForEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateEpochGreaterThanLastKnownEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTruncateWillRemoveOlderSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testEmptyAppendNotAllowed() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateEpochLessThanFirstEpochInLog() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateEpochLessThanOldestSnapshotEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testFailToIncreaseLogStartPastHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testReadOutOfRangeOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateExistingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testReadRecords() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateOffsetGreatThanEndOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUpdateLogStartOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateUnknownEpochLessThanLastKnownGreaterThanOldestSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testReadUpToLogEnd() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotMuchLaterEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testAppendControlRecord() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUnexpectedAppendOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testAssignEpochStartOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testValidateOffsetEqualToOldestSnapshotOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotBeforeLogStartOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUpdateHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testMonotonicEpochStartOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUnflushedRecordsLostAfterReopen() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotWithMissingEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTruncateFullyToLatestSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testAppendAsLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testDecrementHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testMetadataValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testDoesntTruncateFully() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUpdateLogStartOffsetWillRemoveOlderSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTopicPartition() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testReadUpToHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testTruncateTo() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testUpdateLogStartOffsetWithMissingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testCreateSnapshotLaterThanHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MockLogTest > testReadMissingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > KafkaRaftClientDriverTest > testUncaughtException() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > KafkaRaftClientDriverTest > testShutdown() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > MockExpirationServiceTest > testFailAfter() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RequestManagerTest > testResetAllConnections() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RequestManagerTest > testSuccessfulResponse() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RequestManagerTest > testRequestTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RequestManagerTest > testBackoffAfterFailure() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RequestManagerTest > testIgnoreUnexpectedResponse() PASSED


> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testDoesNotCompleteReassignmentIfIsrDoesNotHaveAllTargetReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testRearrangement() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testDoesNotCompleteReassignment() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testNoneAddedOrRemoved() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testIsReassignmentInProgress() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testDoesNotCompleteReassignmentIfNoneOngoing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testRemovals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testDoesCompleteReassignmentSomeNewReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testAdditionsAndRemovals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testDoesCompleteReassignmentAllNewReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testAdditions() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > PartitionReassignmentReplicasTest > testOriginalReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecordsPartialTransactionNoSupport() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testFailoverDuringMigrationTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterMetadataAuthorizerTest > testDeleteAclsError() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterMetadataAuthorizerTest > testCreateAclsError() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterMetadataAuthorizerTest > testCreateAcls() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > ClusterMetadataAuthorizerTest > testDeleteAcls() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testLogDirPropsForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testVerificationFailureOnMetadataLogDirWithError() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testNonFailedDirectoryPropsForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testNodeIdForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierVerificationFailsOnEmptyAndLogDirsOverlap() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testVerificationFailureOnLackOfMetadataLogDir() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testMetaPropertiesEnsembleLoadEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBootstrapZkMigrationRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testMetaPropertiesEnsembleLoadError() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testSuccessfulVerification() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testErrorLogDirsForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testNodeIdForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testVerificationFailureOnRequireAtLeastOneValid() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testEmptyLogDirsForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testEmptyLogDirsForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testLogDirPropsForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testInsertBootstrapRecordsToEmptyLog() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testAppendRecords() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierVerificationFailsOnEmptyAndErrorOverlap() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testMetadataLogDirForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testSuccessfulVerificationWithClusterIdAndNodeId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testClusterIdForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testMetaPropertiesEnsembleLoad() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testMetadataLogDirForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierWriteLogDirChanges() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierWithoutModifications() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierWriteChanged() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testSuccessfulVerificationWithClusterId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testNonFailedDirectoryPropsForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testErrorLogDirsForFoo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierVerificationFailsOnErrorAndLogDirsOverlap() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopierGenerateValidDirectoryId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testClusterIdForEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testCopyFooItemByItem() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 102 > MetaPropertiesEnsembleTest > testVerificationFailureOnRequireV0() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testTimeouts() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAllowAuditLogging(boolean) > "testAllowAuditLogging(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAllowAuditLogging(boolean) > "testAllowAuditLogging(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testGetDefaultResult() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testStartWithEarlyStartListeners() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testDenyAuditLogging(boolean) > "testDenyAuditLogging(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testDenyAuditLogging(boolean) > "testDenyAuditLogging(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testTopicAclWithOperationAll() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testDenyPrecedenceWithOperationAll() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testUpgradeFromPreProductionVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testConfigure() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAuthorizationPriorToCompleteInitialLoad() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testHostAddressAclValidation() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testCompleteInitialLoad() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testAllowEveryoneIfNoAclFoundConfigDisabled() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testCompleteInitialLoadWithException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testFindResultImplication() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testGetConfiguredSuperUsers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testFatalMetadataErrorDuringLogLoading() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testSimpleAuthorizations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > StandardAuthorizerTest > testListAcls() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testTopicDualWriteDelta() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testBeginMigrationOnce() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testMigrationWithClientException(boolean) > "testMigrationWithClientException(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testMigrationWithClientException(boolean) > "testMigrationWithClientException(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testTopicDualWriteSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testShouldNotMoveToNextStateIfControllerNodesAreNotReadyToMigrate(boolean) > "testShouldNotMoveToNextStateIfControllerNodesAreNotReadyToMigrate(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testShouldNotMoveToNextStateIfControllerNodesAreNotReadyToMigrate(boolean) > "testShouldNotMoveToNextStateIfControllerNodesAreNotReadyToMigrate(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testNoDualWriteBeforeMigration() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testControllerFailover() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testSkipWaitForBrokersInDualWrite() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testOnlySendNeededRPCsToBrokers(boolean) > "testOnlySendNeededRPCsToBrokers(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testOnlySendNeededRPCsToBrokers(boolean) > "testOnlySendNeededRPCsToBrokers(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [0, 0, 0, 0], 0, 0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [0, 0, 1, 0], 1, 1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [1, 1, 1, 1], 1, 4" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[1000], [999], 1, 999" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[1000], [1000], 1, 1000" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[1000], [1001], 1, 1001" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[1000], [1000, 1], 2, 1001" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [0, 0, 0, 0], 0, 0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[1000], [1000, 1000, 1000], 3, 3000" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [201], 1, 201" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional[200], [200, 1], 2, 201" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional.empty, [201], 1, 201" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > KRaftMigrationDriverTest > testCoalesceMigrationRecords(Optional, List, int, int) > "testCoalesceMigrationRecords(Optional, List, int, int).Optional.empty, [200, 1], 2, 201" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV0SerializationWithJustClusterIdAndNodeId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV1SerializationWithDirectoryId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testClusterIdRequiredInV1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testNodeIdRequiredInV1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV1SerializationWithNonUuidClusterId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV0SerializationWithJustNodeId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV1SerializationWithoutDirectoryId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV0SerializationWithAll() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV0SerializationWithJustClusterId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 100 > MetaPropertiesTest > testV0SerializationWithNothing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ActivationRecordsGeneratorTest > testActivationMessageForEmptyLog() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ActivationRecordsGeneratorTest > testActivationMessageForNonEmptyLogWithMigrations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ActivationRecordsGeneratorTest > testActivationMessageForNonEmptyLogNoMigrations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testIncrementalAlterConfigsWithoutExistence() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testIncrementalAlterConfigs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testIncrementalAlterConfigsWithPolicy() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testLegacyAlterConfigs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testIncrementalAlterConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testIncrementalAlterMultipleConfigValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigurationControlManagerTest > testReplay() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionReassignmentRevertTest > testSomeRemoving() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionReassignmentRevertTest > testNoneAddedOrRemoved() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionReassignmentRevertTest > testSomeRemovingAndAdding() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionReassignmentRevertTest > testIsrSpecialCase() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionReassignmentRevertTest > testSomeAdding() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testWrappedRuntimeExceptionIsNotTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testNewWrongControllerExceptionWithNoController() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testNewPreMigrationExceptionWithActiveController() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testExecutionExceptionWithNullCauseIsNotTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testWrappedTimeoutExceptionIsTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testRuntimeExceptionIsNotTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testNewWrongControllerExceptionWithActiveController() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testTopicExistsExceptionIsNotTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testNewPreMigrationExceptionWithNoController() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ControllerExceptionsTest > testTimeoutExceptionIsTimeoutException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testLastAppliedRecordMetrics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testUpdateEventQueueProcessingTime() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testUpdateEventQueueTime() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testUpdateZKWriteBehindLag() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testMetricNames(boolean) > "testMetricNames(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > QuorumControllerMetricsTest > testMetricNames(boolean) > "testMetricNames(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > FeaturesImageTest > testEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > FeaturesImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > FeaturesImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > FeaturesImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > FeaturesImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testEscapeBackslashes() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testUserEntityWithBackslashesInNameRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testEscapeNormalString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > ipEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testClientIdEntityWithParentheses() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testErrorOnInvalidEntityType() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > defaultUserEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testEscapeParentheses() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testErrorOnInvalidEmptyEntityName() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > testEscapeEmptyString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > defaultClientIdEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > defaultIpEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > clientIdAndUserEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > clientIdEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ClientQuotasImageNodeTest > userEntityRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > NodeStringifierTest > testEnterNode() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > NodeStringifierTest > testNesting() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > NodeStringifierTest > testOutput() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ImageReWriterTest > testWrite() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ImageReWriterTest > testCloseInvokesFinishSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ImageReWriterTest > testCloseWithoutFreeze() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ImageReWriterTest > testWriteAfterClose() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigSynonymTest > testHoursToMilliseconds() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > ConfigSynonymTest > testMinutesToMilliseconds() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testToLeaderAndIsrPartitionState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testPartitionRegistrationToRecord_ElrShouldBeNullIfEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testPartitionRegistrationToRecord(MetadataVersion) > "testPartitionRegistrationToRecord(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testPartitionRegistrationToRecord(MetadataVersion) > "testPartitionRegistrationToRecord(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testPartitionRegistrationToRecord(MetadataVersion) > "testPartitionRegistrationToRecord(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testMigratingRecordDirectories() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testRecordRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testMergePartitionChangeRecordWithReassignmentData() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingLeader() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingPartitionEpoch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderSetsDefaultAddingAndRemovingReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingLeaderEpoch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingIsr() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingLeaderRecoveryState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderSuccess() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testPartitionControlInfoMergeAndDiff() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testElectionWasClean() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testBuilderThrowsIllegalStateExceptionWhenMissingReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testDirectories() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 106 > PartitionRegistrationTest > testConsistentEqualsAndHashCode PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrCanShrinkToZero(boolean) > "testEligibleLeaderReplicas_IsrCanShrinkToZero(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrCanShrinkToZero(boolean) > "testEligibleLeaderReplicas_IsrCanShrinkToZero(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testStoppedLeaderIsDemotedAfterReassignmentCompletesEvenIfNoNewEligibleLeaders() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short) > "testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short) > "testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short) > "testEligibleLeaderReplicas_IsrAddNewMemberNotInELR(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_ElectLastKnownLeaderShouldFail() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrEnlargementCompletesReassignment(short) > "testIsrEnlargementCompletesReassignment(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrEnlargementCompletesReassignment(short) > "testIsrEnlargementCompletesReassignment(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrEnlargementCompletesReassignment(short) > "testIsrEnlargementCompletesReassignment(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_ElrCanBeElected(boolean) > "testEligibleLeaderReplicas_ElrCanBeElected(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_ElrCanBeElected(boolean) > "testEligibleLeaderReplicas_ElrCanBeElected(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testElectLeader(short) > "testElectLeader(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testElectLeader(short) > "testElectLeader(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testElectLeader(short) > "testElectLeader(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUpdateDirectories() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testChangeRecordIsNoOp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRemovingReplicaReassignment(short) > "testRemovingReplicaReassignment(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRemovingReplicaReassignment(short) > "testRemovingReplicaReassignment(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRemovingReplicaReassignment(short) > "testRemovingReplicaReassignment(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testAddingReplicaReassignment(short) > "testAddingReplicaReassignment(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testAddingReplicaReassignment(short) > "testAddingReplicaReassignment(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testAddingReplicaReassignment(short) > "testAddingReplicaReassignment(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testLeaderEpochBumpZkMigration(short) > "testLeaderEpochBumpZkMigration(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testLeaderEpochBumpZkMigration(short) > "testLeaderEpochBumpZkMigration(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testLeaderEpochBumpZkMigration(short) > "testLeaderEpochBumpZkMigration(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testKeepsDirectoriesAfterReassignment() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanSetsLeaderRecoveringState(boolean, boolean) > "testUncleanSetsLeaderRecoveringState(boolean, boolean).true, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanSetsLeaderRecoveringState(boolean, boolean) > "testUncleanSetsLeaderRecoveringState(boolean, boolean).true, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanSetsLeaderRecoveringState(boolean, boolean) > "testUncleanSetsLeaderRecoveringState(boolean, boolean).false, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanSetsLeaderRecoveringState(boolean, boolean) > "testUncleanSetsLeaderRecoveringState(boolean, boolean).false, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testReassignmentRearrangesReplicas(short) > "testReassignmentRearrangesReplicas(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testReassignmentRearrangesReplicas(short) > "testReassignmentRearrangesReplicas(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testReassignmentRearrangesReplicas(short) > "testReassignmentRearrangesReplicas(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testNoChange(short) > "testNoChange(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testNoChange(short) > "testNoChange(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testNoChange(short) > "testNoChange(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_ElectLastKnownLeader() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean) > "testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean).true, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean) > "testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean).true, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean) > "testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean).false, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean) > "testChangeInLeadershipDoesNotChangeRecoveryState(boolean, boolean).false, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short) > "testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testAbortTransactionRecordNotAllowedInSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short) > "testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short) > "testEligibleLeaderReplicas_RemoveUncleanShutdownReplicasFromElr(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testEndTransactionRecordNotAllowedInSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testActivateAndDeactivate() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testLoadSnapshotClearsTransactionalState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanLeaderElection(short) > "testUncleanLeaderElection(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testActivate() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanLeaderElection(short) > "testUncleanLeaderElection(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testHandleLoadSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testUncleanLeaderElection(short) > "testUncleanLeaderElection(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeAndLeaderChange(short) > "testIsrChangeAndLeaderChange(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeAndLeaderChange(short) > "testIsrChangeAndLeaderChange(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeAndLeaderChange(short) > "testIsrChangeAndLeaderChange(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short) > "testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short) > "testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short) > "testEligibleLeaderReplicas_IsrShrinkBelowMinISR(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testTriggerLeaderEpochBumpIfNeeded(short) > "testTriggerLeaderEpochBumpIfNeeded(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testTriggerLeaderEpochBumpIfNeeded(short) > "testTriggerLeaderEpochBumpIfNeeded(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testTriggerLeaderEpochBumpIfNeeded(short) > "testTriggerLeaderEpochBumpIfNeeded(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeDoesntBumpLeaderEpoch(short) > "testIsrChangeDoesntBumpLeaderEpoch(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeDoesntBumpLeaderEpoch(short) > "testIsrChangeDoesntBumpLeaderEpoch(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testIsrChangeDoesntBumpLeaderEpoch(short) > "testIsrChangeDoesntBumpLeaderEpoch(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRevertReassignment(short) > "testRevertReassignment(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testReplayTransaction(boolean) > "testReplayTransaction(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRevertReassignment(short) > "testRevertReassignment(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testRevertReassignment(short) > "testRevertReassignment(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrExpandAboveMinISR(short) > "testEligibleLeaderReplicas_IsrExpandAboveMinISR(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrExpandAboveMinISR(short) > "testEligibleLeaderReplicas_IsrExpandAboveMinISR(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > PartitionChangeBuilderTest > testEligibleLeaderReplicas_IsrExpandAboveMinISR(short) > "testEligibleLeaderReplicas_IsrExpandAboveMinISR(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testReplayTransaction(boolean) > "testReplayTransaction(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testActivateFailsIfNewNextWriteOffsetIsNegative() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testHandleCommitBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testActivateFailsIfAlreadyActive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testDeactivateFailsIfNotActive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testBeginTransactionRecordNotAllowedInSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testEndLoadSnapshotFailsWhenNotInSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testHandleScheduleAtomicAppend() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > OffsetControlManagerTest > testInitialValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testTopicChange() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleBrokerUnfencing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testDelta() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleNewFencedBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleBrokerFencing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleZkBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleNewTopic() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleNewUnfencedBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testHandleDeletedTopic() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ControllerMetricsChangesTest > testInitialValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ProducerIdsImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ProducerIdsImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ProducerIdsImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ProducerIdsImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testEligibleLeaderReplicas_CleanElection() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreatePartitionsISRInvariants() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublishTransaction(boolean) > "testPublishTransaction(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testShrinkAndExpandIsr() PASSED


> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromMemoryRecords(CompressionType) > "testReadFromMemoryRecords(CompressionType).none" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordVoterQuorumState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordNonVoterQuorumState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordRate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordLogEnd() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordNumUnknownVoterConnections() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordLatency() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 105 > KafkaRaftMetricsTest > shouldRecordPollIdleRatio() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromMemoryRecords(CompressionType) > "testReadFromMemoryRecords(CompressionType).gzip" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromMemoryRecords(CompressionType) > "testReadFromMemoryRecords(CompressionType).snappy" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromMemoryRecords(CompressionType) > "testReadFromMemoryRecords(CompressionType).lz4" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromMemoryRecords(CompressionType) > "testReadFromMemoryRecords(CompressionType).zstd" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testLeaderChangeControlBatch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromFileRecords(CompressionType) > "testReadFromFileRecords(CompressionType).none" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 103 > MemoryBatchReaderTest > testIteration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromFileRecords(CompressionType) > "testReadFromFileRecords(CompressionType).gzip" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromFileRecords(CompressionType) > "testReadFromFileRecords(CompressionType).snappy" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromFileRecords(CompressionType) > "testReadFromFileRecords(CompressionType).lz4" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > RecordsBatchReaderTest > testReadFromFileRecords(CompressionType) > "testReadFromFileRecords(CompressionType).zstd" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > SnapshotWriterReaderTest > testAbortedSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > SnapshotWriterReaderTest > testSnapshotDelimiters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > SnapshotWriterReaderTest > testAppendToFrozenSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 101 > SnapshotWriterReaderTest > testWritingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FollowerStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FollowerStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FollowerStateTest > testFetchTimeoutExpiration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FollowerStateTest > testMonotonicHighWatermark() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testUpdateHighWatermarkMetadata() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testObserverStateExpiration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testNonFollowerAcknowledgement() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testUpdateHighWatermarkQuorumSizeOne() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testUpdateHighWatermarkQuorumSizeTwo() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testNoOpForNegativeRemoteNodeId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testCheckQuorumWithOneVoter() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testUpdateHighWatermarkQuorumSizeThree() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testDescribeQuorumWithMultipleVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testNonMonotonicHighWatermarkUpdate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testFollowerAcknowledgement() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testCheckQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testDescribeQuorumWithObservers() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testIdempotentEndOffsetUpdate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testLastCaughtUpTimeVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testNonMonotonicLocalEndOffsetUpdate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testLastCaughtUpTimeObserver() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testDescribeQuorumWithSingleVoter() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testGetNonLeaderFollowersByFetchOffsetDescending() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > LeaderStateTest > testRequireNonNullAccumulator() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > BlockingMessageQueueTest > testOfferAndPoll() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > BlockingMessageQueueTest > testWakeupFromPoll() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testBatchWriteReadSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testCreateSnapshotWithSameId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testPartialWriteReadSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testBufferWriteReadSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testAbortedSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testAppendToFrozenSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testWritingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 109 > FileRawSnapshotTest > testWriteReadSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > FileBasedStateStoreTest > testCantReadVersionQuorumState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > FileBasedStateStoreTest > testReadElectionState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > FileBasedStateStoreTest > testSupportedVersion() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > FileBasedStateStoreTest > testWriteElectionState() PASSED

> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testDeferredIsQueuedAfterTriggering() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testTimeouts() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testCreateAndClose() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testSize() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testHandleEvents() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testRejectedExecutionException() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testInterruptedWithDeferredEvents() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testHandleExceptionThrowingAnException() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testInterruptedWithEmptyQueue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testShutdownBeforeDeferred() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testInterruptedExceptionHandling() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testScheduleDeferredWithTagReplacement() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaEventQueueTest > testScheduleDeferred() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > ProcessTerminatingFaultHandlerTest > testHaltIsCalled() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > ProcessTerminatingFaultHandlerTest > testExitIsCalled() PASSED


> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublishTransaction(boolean) > "testPublishTransaction(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testInstallPublishers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testCreateAndClose() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testRemoveLeaderships() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testLoadEmptyBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testReloadSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testRemovePublisher() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testProcessExpiredBrokerHeartbeat() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testLastAppliedOffset() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreatePartitionsFailsWithManualAssignmentWithAllFenced() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testCatchingUpState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsWithValidateOnlyFlag(boolean) > testCreateTopicsWithValidateOnlyFlag with mutationQuotaExceeded: true PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsWithValidateOnlyFlag(boolean) > testCreateTopicsWithValidateOnlyFlag with mutationQuotaExceeded: false PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreatePartitionsFailsWhenAllBrokersAreFencedOrInControlledShutdown() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean) > "testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean).false, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean) > "testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean).false, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testReassignPartitions(short) > "testReassignPartitions(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean) > "testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean).true, false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testReassignPartitions(short) > "testReassignPartitions(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean) > "testPublisherCannotBeInstalledMoreThanOnce(boolean, boolean).true, true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testReassignPartitions(short) > "testReassignPartitions(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testSnapshotDuringTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testReassignPartitions(short) > "testReassignPartitions(short).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testDuplicateTopicIdReplay() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testLoadEmptySnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testNoPublishEmptyImage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testEligibleLeaderReplicas_ShrinkAndExpandIsr() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > MetadataLoaderTest > testPublishTransactionWithinBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageNodeTest > testNodeChildNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ConfigurationsImageNodeTest > testNodeChildNameParsing() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testElectPreferredLeaders() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > SnapshotGeneratorTest > testSnapshotsDisabled() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > SnapshotGeneratorTest > testEmitterProblem() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testDeleteTopicsWithMutationQuotaExceeded() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > SnapshotGeneratorTest > testCreateSnapshot() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > SnapshotGeneratorTest > testTimeBasedSnapshots() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BrokerRegistrationInControlledShutdownChangeTest > testValueRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BrokerRegistrationInControlledShutdownChangeTest > testAsBoolean() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BrokerRegistrationInControlledShutdownChangeTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToControllerRegistrationRequestFailsOnNullHost() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testEmptyHostname() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testNullHostnameGetsResolved() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToBrokerRegistrationRecordFailsOnZeroPort() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testHandleDirectoriesOffline() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToBrokerRegistrationRequestFailsOnNullHost() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionHandleUnknownTopicIdOrName(short) > "testAlterPartitionHandleUnknownTopicIdOrName(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testRoundTripToBrokerRegistrationRequest() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreateWithExplicitFirstListener(int) > "testCreateWithExplicitFirstListener(int).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionHandleUnknownTopicIdOrName(short) > "testAlterPartitionHandleUnknownTopicIdOrName(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreateWithExplicitFirstListener(int) > "testCreateWithExplicitFirstListener(int).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreateWithExplicitFirstListener(int) > "testCreateWithExplicitFirstListener(int).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionHandleUnknownTopicIdOrName(short) > "testAlterPartitionHandleUnknownTopicIdOrName(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreateWithExplicitFirstListener(int) > "testCreateWithExplicitFirstListener(int).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testRoundTripToControllerRegistrationRequest() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionHandleUnknownTopicIdOrName(short) > "testAlterPartitionHandleUnknownTopicIdOrName(short).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testRoundTripToControllerRegistrationRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToControllerRegistrationRecordFailsOnZeroPort() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreatePreservesOrdering(int) > "testCreatePreservesOrdering(int).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreatePreservesOrdering(int) > "testCreatePreservesOrdering(int).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreatePreservesOrdering(int) > "testCreatePreservesOrdering(int).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testCreatePreservesOrdering(int) > "testCreatePreservesOrdering(int).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectShuttingDownBrokers(short) > "testAlterPartitionShouldRejectShuttingDownBrokers(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testEmptyHostnameGetsResolved() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testNullHostname() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToBrokerRegistrationRecordFailsOnNullHost() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToControllerRegistrationRequestFailsOnZeroPort() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testRoundTripToBrokerRegistrationRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToBrokerRegistrationRequestFailsOnZeroPort() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ListenerInfoTest > testToControllerRegistrationRecordFailsOnNullHost() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectShuttingDownBrokers(short) > "testAlterPartitionShouldRejectShuttingDownBrokers(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ScramCredentialDataTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ScramCredentialDataTest > testFromRecordAndToRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ScramCredentialDataTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > ScramCredentialDataTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > StandardAclTest > testToBindingRoundTrips() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > StandardAclTest > testCompareTo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > StandardAclTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BootstrapMetadataTest > testFromRecordsListWithOldMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BootstrapMetadataTest > testCopyWithOnlyVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BootstrapMetadataTest > testFromRecordsList() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BootstrapMetadataTest > testFromVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BootstrapMetadataTest > testFromRecordsListWithoutMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectShuttingDownBrokers(short) > "testAlterPartitionShouldRejectShuttingDownBrokers(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > PartitionAssignmentTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > PartitionAssignmentTest > testPartitionAssignmentReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > PartitionAssignmentTest > testConsistentEqualsAndHashCode() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectShuttingDownBrokers(short) > "testAlterPartitionShouldRejectShuttingDownBrokers(short).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsWithMutationQuotaExceeded() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testValidateGoodManualPartitionAssignments() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsWithConfigs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testTopicNameCollision() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 108 > BatchFileWriterReaderTest > testHeaderFooter() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCancelReassignPartitions() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testValidateNewTopicNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testFenceMultipleBrokers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testBalancePartitionLeaders() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testInvalidAlterPartitionRequests() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testHandleAssignReplicasToDirsFailsOnOlderMv() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testReassignPartitionsHandlesNewReassignmentThatRemovesPreviouslyAddingReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testDeleteTopics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testEligibleLeaderReplicas_EffectiveMinIsr() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicWithCollisionChars() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testHandleAssignReplicasToDirs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreatePartitions() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testInvalidCreateTopicsWithValidateOnlyFlag() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testManualPartitionAssignmentOnAllFencedBrokers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectFencedBrokers(short) > "testAlterPartitionShouldRejectFencedBrokers(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectFencedBrokers(short) > "testAlterPartitionShouldRejectFencedBrokers(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectFencedBrokers(short) > "testAlterPartitionShouldRejectFencedBrokers(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectFencedBrokers(short) > "testAlterPartitionShouldRejectFencedBrokers(short).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsWithPolicy() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testPreferredElectionDoesNotTriggerUncleanElection() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testElectUncleanLeaders_WithoutElr(boolean) > "testElectUncleanLeaders_WithoutElr(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testElectUncleanLeaders_WithoutElr(boolean) > "testElectUncleanLeaders_WithoutElr(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testValidateBadManualPartitionAssignments() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testEligibleLeaderReplicas_BrokerFence() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testKRaftClusterDescriber() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testProcessBrokerHeartbeatInControlledShutdown(MetadataVersion) > "testProcessBrokerHeartbeatInControlledShutdown(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testProcessBrokerHeartbeatInControlledShutdown(MetadataVersion) > "testProcessBrokerHeartbeatInControlledShutdown(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreatePartitionsWithMutationQuotaExceeded() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectBrokersWithStaleEpoch(short) > "testAlterPartitionShouldRejectBrokersWithStaleEpoch(short).0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectBrokersWithStaleEpoch(short) > "testAlterPartitionShouldRejectBrokersWithStaleEpoch(short).1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectBrokersWithStaleEpoch(short) > "testAlterPartitionShouldRejectBrokersWithStaleEpoch(short).2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testAlterPartitionShouldRejectBrokersWithStaleEpoch(short) > "testAlterPartitionShouldRejectBrokersWithStaleEpoch(short).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ReplicationControlManagerTest > testCreateTopicsISRInvariants() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testEmptyWithInvalidIBP() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testImage1withInvalidIBP() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > DelegationTokenImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testEmptyWithInvalidIBP() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testImage1withInvalidIBP() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramCredentialDataNodeTest > testPrintUnredacted() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > ScramCredentialDataNodeTest > testPrintRedacted() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testDirectoriesAreSorted() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testHasOnlineDir() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testFromRecordAndToRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testToNode() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BrokerRegistrationTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testDeserializeWithUnhandledFrameVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingMalformedFrameVersionVarint() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingVersionTooLarge() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testSerde() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingMalformedMessageVersionVarint() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingMalformedMessage() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingUnsupportedApiKey() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingMalformedMessageTypeVarint() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > MetadataRecordSerdeTest > testParsingRecordWithGarbageAtEnd() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > VersionRangeTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > VersionRangeTest > testContains() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > VersionRangeTest > testEquality() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StandardAclWithIdTest > testToRecordRoundTrips() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StandardAclWithIdTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testMultiBatchSameAsMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testOneBatchLargerThanMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testMultiBatchLargerThanMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testOneBatchSameAsMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testEmptyBatches() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testOneBatchSmallerThanMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > BufferingBatchConsumerTest > testMultiBatchSmallerThanMinSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testNonPositiveReplicationFactor() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testPlacementOnFencedReplicaOnSingleRack() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testRackListAllBrokersFenced() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testRackListNotEnoughBrokers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testRackListWithMultipleRacks() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testAllBrokersFenced() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testNotEnoughBrokers() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testMultiPartitionTopicPlacementOnSingleUnfencedBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testBrokerList() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testSuccessfulPlacement() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testEvenDistribution() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testAvoidFencedReplicaIfPossibleOnSingleRack() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testRackListNonPositiveReplicationFactor() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > StripedReplicaPlacerTest > testRackListWithInvalidRacks() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > RecordRedactorTest > testNonSensitiveConfigRecordToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > RecordRedactorTest > testUserScramCredentialRecordToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > RecordRedactorTest > testTopicRecordToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > RecordRedactorTest > testUserScramCredentialRecordToStringWithNullName() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > RecordRedactorTest > testSensitiveConfigRecordToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > LocalLogManagerTest > testCreateAndClose() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > LocalLogManagerTest > testPassLeadership() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > LocalLogManagerTest > testCommits() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 107 > LocalLogManagerTest > testClaimsLeadership() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegistrationWithUnsupportedMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testHasOnlineDir() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testDefaultDir() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testUnregister() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterControlWithOlderMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testReplayRegisterBrokerRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testReplayBrokerRegistrationChangeRecord() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterWithDuplicateDirectoryId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegistrationsToRecords(MetadataVersion) > "testRegistrationsToRecords(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegistrationsToRecords(MetadataVersion) > "testRegistrationsToRecords(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testPlaceReplicas(int) > "testPlaceReplicas(int).3" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testPlaceReplicas(int) > "testPlaceReplicas(int).10" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testReplay(MetadataVersion) > "testReplay(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testReplay(MetadataVersion) > "testReplay(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterControlManagerTest > testRegistrationWithIncorrectClusterId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > QuorumControllerMetricsIntegrationTest > testFailingOverIncrementsNewActiveControllerCount(boolean) > "testFailingOverIncrementsNewActiveControllerCount(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > QuorumControllerMetricsIntegrationTest > testFailingOverIncrementsNewActiveControllerCount(boolean) > "testFailingOverIncrementsNewActiveControllerCount(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > QuorumControllerMetricsIntegrationTest > testClosingQuorumControllerClosesMetrics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > QuorumControllerMetricsIntegrationTest > testEventQueueOperationsStartedMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > QuorumControllerMetricsIntegrationTest > testTimeoutMetrics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testGlobalTopicCountMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testPreferredReplicaImbalanceCountMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testMetadataErrorCount() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testGlobalPartitionCountMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testOfflinePartitionCountMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testFencedBrokerMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testActiveBrokerCountMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ControllerMetadataMetricsTest > testMetricNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ClusterImageTest > testHandleLossOfControllerRegistrations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MetadataVersionChangeTest > testMetadataVersionChangeExceptionToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MetadataVersionChangeTest > testIsUpgrade() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MetadataVersionChangeTest > testIsDowngrade() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ConfigurationImageNodeTest > testUnknownChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ConfigurationImageNodeTest > testSecretChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ConfigurationImageNodeTest > testNonSecretChild() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BrokerRegistrationFencingChangeTest > testValueRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BrokerRegistrationFencingChangeTest > testAsBoolean() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BrokerRegistrationFencingChangeTest > testValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testDoesNotContainNoChange() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testByteToLeaderRecoveryState() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testLeaderRecoveryStateValue() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testOptionalInvalidValue() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testUniqueValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testInvalidValue() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > LeaderRecoveryStateTest > testChangeTo() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testCopyWithout2() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testValidateIsr() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testToArray() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testClone() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testToSet() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testValidate() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testCopyWithout() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testContains() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testCopyWith() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testContains2() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > ReplicasTest > testToList() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > StandardAclRecordIteratorTest > testIteration() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > StandardAclRecordIteratorTest > testNoSuchElementException() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BootstrapDirectoryTest > testMissingDirectory() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BootstrapDirectoryTest > testReadFromConfiguration() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BootstrapDirectoryTest > testReadFromConfigurationFile() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BootstrapDirectoryTest > testReadFromConfigurationWithAncientVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > BootstrapDirectoryTest > testReadFromEmptyConfiguration() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MigrationManifestTest > testOneBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MigrationManifestTest > testEmpty() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > MigrationManifestTest > testManyBatch() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > testWritePropertiesFile(boolean) > "testWritePropertiesFile(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > testWritePropertiesFile(boolean) > "testWritePropertiesFile(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > testReadPropertiesFile() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > loadRequiredIntProp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > loadMissingRequiredIntProp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 110 > PropertiesUtilsTest > loadNonIntegerRequiredIntProp() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testFenceMultipleBrokers() PASSED


> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaYammerMetricsTest > testTaggedMetricNameWithEmptyValue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaYammerMetricsTest > testTaggedMetricName() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > KafkaYammerMetricsTest > testUntaggedMetric() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > TimelineHashSetTest > testToArray() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > TimelineHashSetTest > testIteration() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > TimelineHashSetTest > testSetMethods() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > TimelineHashSetTest > testNullsForbidden() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 112 > TimelineHashSetTest > testEmptySet() PASSED


> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBalancePartitionLeaders() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecordsNonEmptyLog() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecords33() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecords34() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testSnapshotSaveAndLoad() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testFatalMetadataReplayErrorOnActive() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testAppendRecordsAtomically() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testNoOpRecordWriteAfterTimeout() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecordsPartialTransaction() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testMigrationsEnabledForOldBootstrapMetadataVersion() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testUnregisterBroker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecordsPartialBootstrap(boolean) > "testActivationRecordsPartialBootstrap(boolean).true" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testActivationRecordsPartialBootstrap(boolean) > "testActivationRecordsPartialBootstrap(boolean).false" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBrokerHeartbeatDuringMigration(MetadataVersion) > "testBrokerHeartbeatDuringMigration(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBrokerHeartbeatDuringMigration(MetadataVersion) > "testBrokerHeartbeatDuringMigration(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBrokerHeartbeatDuringMigration(MetadataVersion) > "testBrokerHeartbeatDuringMigration(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testBrokerHeartbeatDuringMigration(MetadataVersion) > "testBrokerHeartbeatDuringMigration(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testConfigResourceExistenceChecker() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testEarlyControllerResults() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testFatalMetadataErrorDuringSnapshotLoading() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testUpgradeMigrationStateFrom34() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testDelayedConfigurationOperations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > QuorumControllerTest > testConfigurationOperations() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > ResultOrErrorTest > testError() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > ResultOrErrorTest > testEquals() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > ResultOrErrorTest > testResult() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testDeleteAfterChanges() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testLocalReassignmentChanges() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testTopicNameToIdView() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testUpdatedLeaders() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testBasicLocalChanges() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testEmptyImageRoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testTopicIdToNameView() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testApplyDelta1() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testImage2RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicsImageTest > testImage1RoundTrip() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testUpdateBatchProcessingTimeNs() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testInitialValueOfCurrentControllerId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testManagedMetrics() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testUpdateBatchSize() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testUpdateLastAppliedImageProvenance() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testSetValueOfCurrentControllerId() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataLoaderMetricsTest > testMetricNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testNormalDoesRedactsSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testNormalDoesRedactsUnknownConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testDisabledDoesNotRedactUnknownConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testNormalRedactsScram() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testStrictRedactsScram() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testStrictRedactsNonSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testDisabledDoesNotRedactNonSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testDisabledDoesNotRedactDelegationToken() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testNormalRedactsDelegationToken() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testStrictRedactsDelegationToken() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testNormalDoesNotRedactNonSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testDisabledDoesNotRedactScram() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testStrictRedactsUnknownConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testDisabledDoesNotRedactSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > MetadataNodeRedactionCriteriaTest > testStrictRedactsSensitiveConfig() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > SnapshotEmitterMetricsTest > testLatestSnapshotGeneratedAgeMsMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > SnapshotEmitterMetricsTest > testLatestSnapshotGeneratedBytesMetric() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > SnapshotEmitterMetricsTest > testMetricNames() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > BrokerStateTest > testUnknownValues() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > BrokerStateTest > testFromValue() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > OptionalStringComparatorTest > testComparisons() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicAssignmentTest > testToString() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicAssignmentTest > testTopicAssignmentReplicas() PASSED

Gradle Test Run :metadata:test > Gradle Test Executor 104 > TopicAssignmentTest > testConsistentEqualsAndHashCode() PASSED

> Task :storage:assemble

> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeAsUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToInvalidLeaderOrResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testObserverInitializationFailsIfElectionStateHasVotedCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToVotedHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToVotedHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToFollowerSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToLeaderOrResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToUnattachedHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToLeaderOrResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToVotedSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testObserverFollowerToUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToFollowerSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToAnyStateLowerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToUnattachedHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToVotedSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToAnyStateLowerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToAnyStateLowerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToVoted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializePrimordialEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToAnyStateLowerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeWithCorruptedStore() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testObserverUnattachedToFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCannotBecomeFollowerOfNonVoter() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testObserverCannotBecomeCandidateOrLeaderOrVoted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToAnyStateLowerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInconsistentVotersBetweenConfigAndState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToFollowerHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeAsFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeAsResignedCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToLeaderWithoutGrantedVote() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToFollowerHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testHighWatermarkRetained() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToVotedSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testHasRemoteLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToFollowerHigherEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testVotedToUnattachedSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testLeaderToUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeAsVoted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testUnattachedToFollowerSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testFollowerToUnattachedSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeAsResignedLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToVoted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testInitializeWithEmptyLocalId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCandidateToResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > QuorumStateTest > testCannotFollowOrVoteForSelf() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > VotedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > VotedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > VotedStateTest > testElectionTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > BatchMemoryPoolTest > testOversizeAllocation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > BatchMemoryPoolTest > testReleaseBufferNotMatchingBatchSize() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > BatchMemoryPoolTest > testAllocateAndRelease() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > BatchMemoryPoolTest > testMultipleAllocations() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > TimeRatioTest > testRatio() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 111 > TimeRatioTest > testRatioMisalignedWindow() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testCannotRejectVoteFromLocalId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testSingleNodeQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testThreeNodeQuorumVoteGranted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testTwoNodeQuorumVoteRejected() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testTwoNodeQuorumVoteGranted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testCannotChangeVoteRejectedToGranted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testIdempotentGrant() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testCannotGrantOrRejectNonVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testIdempotentReject() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testThreeNodeQuorumVoteRejected() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > CandidateStateTest > testCannotChangeVoteGrantedToRejected() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testPartialFetchSnapshotRequestAsLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLatestSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponsePartialData() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestOffsetLessThanLogStart() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLeaderShouldResignLeadershipIfNotGetFetchSnapshotRequestFromMajorityVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testListenerRenotified() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestWithNewerEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestTruncateToLogStart() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseToNotFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestOffsetAtZero() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseFromOlderEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestUnknownPartition() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLatestSnapshotIdMissing() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ControlRecordTest > testCtr() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ControlRecordTest > testControlRecordTypeValues() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseFromNewerEpochNotLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestWithLastFetchedEpochLessThanOldestSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchResponseWithSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsCandidateFromStateStore() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestClusterIdValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testCreateSnapshotAsFollowerWithInvalidSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestAtLogStartOffsetWithValidEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumStartsNewElectionImmediatelyIfFollowerUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestWithOlderEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestAtLogStartOffsetWithInvalidEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestAsFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchRequestWithLargerLastFetchedEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInvalidFetchRequest() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestAsLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testVoteResponseIgnoredAfterBecomingFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testRejectVotesFromSameEpochAfterResigningLeadership() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testCreateSnapshotAsLeaderWithInvalidSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseFromNewerEpochLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendWithRequiredBaseOffset(boolean) > "testAppendWithRequiredBaseOffset(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFollowerListenerNotified(boolean) > "testFollowerListenerNotified(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendWithRequiredBaseOffset(boolean) > "testAppendWithRequiredBaseOffset(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFollowerListenerNotified(boolean) > "testFollowerListenerNotified(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testPurgatoryFetchSatisfiedByWrite() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseMissingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFollowerReplication() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testSecondListenerNotified(boolean) > "testSecondListenerNotified(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleCommitCallbackFiresInVotedState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverQuorumDiscoveryFailure() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleEndQuorumRequest() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testSecondListenerNotified(boolean) > "testSecondListenerNotified(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testClusterAuthorizationFailedInBeginQuorumEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchResponseWithInvalidSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLeaderImmediatelySendsSnapshotId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testPurgatoryFetchCompletedByFollowerTransition() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestMissingSnapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderImmediatelySendsDivergingEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLeaderListenerNotified(boolean) > "testLeaderListenerNotified(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleLeaderChangeFiresAfterListenerReachesEpochStartOffsetOnEmptyLog() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testGracefulShutdownSingleMemberQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testLeaderListenerNotified(boolean) > "testLeaderListenerNotified(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendFailedWithRecordBatchTooLargeException() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotResponseWithInvalidId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderIgnoreVoteRequestOnSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > KafkaRaftClientSnapshotTest > testFetchSnapshotRequestWithInvalidPosition() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > UnattachedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > UnattachedStateTest > testGrantVote(boolean) > "testGrantVote(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > UnattachedStateTest > testElectionTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testChannelWokenUpIfLingerTimeoutReachedWithoutAppend() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsFollowerNonEmptyLog() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testClusterAuthorizationFailedInVote() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testResignWillCompleteFetchPurgatory() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumEpochSentBasedOnFetchOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInvalidVoteRequest() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumIgnoredAsLeaderIfOlderEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testClusterAuthorizationFailedInEndQuorumEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFetchResponseIgnoredAfterBecomingCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendFailedWithFencedEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsFollowerEmptyLog() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testGrantVotesFromHigherEpochAfterResigningCandidacy() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeObserverNoPreviousState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsResignedLeaderFromStateStore() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testVoteRequestTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testDescribeQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverLeaderRediscoveryAfterBrokerNotAvailableError() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testCandidateIgnoreVoteRequestOnSameEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleBeginQuorumEpochAfterUserInitiatedResign() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testVoterBecomeCandidateAfterFetchTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderGracefulShutdownTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumEpochRequestClusterIdValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testElectionTimeoutAfterUserInitiatedResign() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverFetchWithNoLocalId() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendFailedWithNotLeaderException() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).0" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).1" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).2" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).3" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).4" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).5" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).6" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).7" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).8" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).9" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).10" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).11" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).12" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).13" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).14" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).15" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderStateUpdateWithDifferentFetchRequestVersions(short) > "testLeaderStateUpdateWithDifferentFetchRequestVersions(short).16" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderShouldNotResignLeadershipIfOnlyOneVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumIgnoredAsCandidateIfOlderEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testAppendWithRequiredBaseOffset(boolean) > "testAppendWithRequiredBaseOffset(boolean).false" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testAppendWithRequiredBaseOffset(boolean) > "testAppendWithRequiredBaseOffset(boolean).true" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testRetryElection() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testGrantVotesFromHigherEpochAfterResigningLeadership() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleInvalidVoteRequestWithOlderEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testSingleBatchAccumulation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleLeaderChangeFiresAfterUnattachedRegistration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFollowerGracefulShutdown() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testRecordsAreSplit() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testLingerBeginsOnFirstWrite() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testForceDrain() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLateRegisteredListenerCatchesUp() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsCandidateAndBecomeLeaderQuorumOfThree() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testDrainDoesNotBlockWithConcurrentAppend() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testForceDrainBeforeAppendLeaderChangeMessage() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testLingerIgnoredIfAccumulatorEmpty() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testUnflushedBuffersReleasedByClose() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testCompletedBatchReleaseBuffer() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testMultipleBatchAccumulation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testLeaderChangeMessageWritten() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > BatchAccumulatorTest > testCloseWhenEmpty() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAccumulatorClearedAfterBecomingUnattached() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testRejectVotesFromSameEpochAfterResigningCandidacy() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testWithAllSupportedControlRecords(ControlRecordType) > "testWithAllSupportedControlRecords(ControlRecordType).LEADER_CHANGE" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testWithAllSupportedControlRecords(ControlRecordType) > "testWithAllSupportedControlRecords(ControlRecordType).SNAPSHOT_HEADER" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testWithAllSupportedControlRecords(ControlRecordType) > "testWithAllSupportedControlRecords(ControlRecordType).SNAPSHOT_FOOTER" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testControlRecordIteration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testControlRecordTypeValues() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAccumulatorClearedAfterBecomingFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testClusterAuthorizationFailedInFetch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeSingleMemberQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleVoteRequestAsFollowerWithVotedCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderAppendSingleMemberQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleBeginQuorumResponse() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testEmptyRecords(Records) > "testEmptyRecords(Records).FileRecords(size=0, file=/tmp/kafka18332891462231518936.tmp, start=0, end=2147483647)" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testEmptyRecords(Records) > "testEmptyRecords(Records).MemoryRecords(size=0, buffer=java.nio.HeapByteBuffer[pos=0 lim=0 cap=0])" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAccumulatorClearedAfterBecomingVoted() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testMetrics() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testAppendFailedWithBufferAllocationException() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testListenerCommitCallbackAfterLeaderWrite() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderShouldResignLeadershipIfNotGetFetchRequestFromMajorityVoters() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleCommitCallbackFiresInCandidateState() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleLeaderChangeFiresAfterListenerReachesEpochStartOffset() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleBeginQuorumRequest() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEndQuorumEpochRetriesWhileResigned() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testGrantVotesWhenShuttingDown() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testChannelWokenUpIfLingerTimeoutReachedDuringAppend() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testLeaderGracefulShutdown() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleInvalidVoteRequestAsObserver() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testResignInOlderEpochIgnored() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsLeaderFromStateStoreSingleMemberQuorum() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testVoteRequestClusterIdValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleVoteRequestAsFollowerWithElectedLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverSendDiscoveryFetchAfterFetchTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testEmptyRecordSetInFetchResponse() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testPurgatoryFetchTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleLeaderChangeFiresAfterFollowerRegistration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFetchResponseIgnoredAfterBecomingFollowerOfDifferentLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testVoterOnlyRequestValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsResignedAndBecomeCandidate() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testReregistrationChangesListenerContext() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testCannotResignIfObserver() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverGracefulShutdown() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testInitializeAsCandidateAndBecomeLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testDescribeQuorumNonLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleCommitCallbackFiresAfterFollowerHighWatermarkAdvances() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testCannotResignWithLargerEpochThanCurrentEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFollowerLogReconciliation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFetchShouldBeTreatedAsLeaderAcknowledgement() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testFetchRequestClusterIdValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testCannotResignIfNotLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleValidVoteRequestAsFollower() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testObserverLeaderRediscoveryAfterRequestTimeout() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testBeginQuorumEpochRequestClusterIdValidation() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > KafkaRaftClientTest > testHandleEndQuorumRequestWithLowerPriorityToBecomeLeader() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ValidOffsetAndEpochTest > diverging() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ValidOffsetAndEpochTest > testValidWithoutSpecifyingOffsetAndEpoch() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ValidOffsetAndEpochTest > valid() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ValidOffsetAndEpochTest > snapshot() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testBuildBatch(CompressionType) > "testBuildBatch(CompressionType).none" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testBuildBatch(CompressionType) > "testBuildBatch(CompressionType).gzip" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testBuildBatch(CompressionType) > "testBuildBatch(CompressionType).snappy" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testBuildBatch(CompressionType) > "testBuildBatch(CompressionType).lz4" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testBuildBatch(CompressionType) > "testBuildBatch(CompressionType).zstd" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).128" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).157" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).256" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).433" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).512" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).777" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > BatchBuilderTest > testHasRoomForUncompressed(int) > "testHasRoomForUncompressed(int).1024" PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ThresholdPurgatoryTest > testExpiration() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ThresholdPurgatoryTest > testExternalCompletion() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ThresholdPurgatoryTest > testCompleteAllExceptionally() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ThresholdPurgatoryTest > testThresholdCompletion() PASSED

Gradle Test Run :raft:test > Gradle Test Executor 113 > ThresholdPurgatoryTest > testCompleteAll() PASSED

> Task :server:test

Gradle Test Run :server:test > Gradle Test Executor 116 > ClientMetricsReceiverPluginTest > testExportMetrics() PASSED

Gradle Test Run :server:test > Gradle Test Executor 119 > ClientMetricsInstanceMetadataTest > testIsMatchMultiplePatternValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 119 > ClientMetricsInstanceMetadataTest > testIsMatchWithNullValueFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 119 > ClientMetricsInstanceMetadataTest > testIsMatchValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 119 > ClientMetricsInstanceMetadataTest > testIsMatchMismatchFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 119 > ClientMetricsInstanceMetadataTest > testIsMatchWithInvalidKeyFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdateGetRequestWithImmediateRetryAfterPushFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdateGetRequestWithImmediateRetryFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdatePushRequestWithImmediateRetryFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdateRequestTimestampValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdatePushRequestWithImmediateRetryAfterGetValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdateGetRequestAfterElapsedTimeValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 118 > ClientMetricsInstanceTest > testMaybeUpdatePushRequestAfterElapsedTimeValid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryCompressionTypeInvalid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryMetricsTooLarge() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetrySameClientImmediateRetryFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testUpdateSubscriptionWithNullProperties() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testUpdateSubscriptionWithInvalidMetricsProperties() PASSED

> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > GroupCoordinatorConfigTest > testConfigs() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > RecordTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > RecordTest > testKeyCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > RecordTest > testValueCanBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > RecordTest > testEquals() PASSED

> Task :storage:checkstyleMain

> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 106 > StandardAuthorizerPropertyTest > matchingLiteralDenyOverridesAllAllowRules PASSED


> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > ClientAssignorTest > testNameAndMetadataCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > ClientAssignorTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > ClientAssignorTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > ClientAssignorTest > testFromRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > TopicMetadataTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > TopicMetadataTest > testTopicIdAndNameCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > TopicMetadataTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > TopicMetadataTest > testFromRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > GroupCoordinatorMetricsShardTest > testTimelineGaugeCounters() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > GroupCoordinatorMetricsShardTest > testConsumerGroupStateTransitionMetrics() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 121 > GroupCoordinatorMetricsShardTest > testGenericGroupStateTransitionMetrics() PASSED


> Task :server:test

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryAllMetricSubscribedSubscription() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryConcurrentRequestNewClientInstance() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryConcurrentRequestAfterSubscriptionUpdate() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testUpdateSubscriptionWithEmptyProperties() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryTerminatingFlag() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testUpdateSubscriptionWithPropertiesDeletion() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryConcurrentRequestAfterSubscriptionUpdate() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryClientInstanceIdInvalid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetrySameClientImmediateRetryAfterPushFail() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryAfterPushIntervalTime() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testCacheEviction() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryWithoutSubscription() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryConcurrentRequestNewClientInstance() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetry() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryAfterPushIntervalTime() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testCacheExpirationTaskCancelledOnInstanceUpdate() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetrySubscriptionIdInvalid() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testCacheEvictionWithMultipleClients() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryPluginException() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetryUpdateSubscription() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testGetTelemetry() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryThrottleError() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryNextRequestPostTerminatingFlag() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testUpdateSubscription() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryNullMetricsData() PASSED

Gradle Test Run :server:test > Gradle Test Executor 120 > ClientMetricsManagerTest > testPushTelemetryOnNewServer() PASSED


> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testFileRecords PASSED

> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 124 > DirectoryIdTest > testLostIsReserved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > DirectoryIdTest > testUnassignedIsReserved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > DirectoryIdTest > testIsOnline() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > DirectoryIdTest > testMigratingIsReserved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > DirectoryIdTest > testCreateAssignmentMap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > PasswordEncoderTest > testEncoderConfigChange() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > PasswordEncoderTest > testEncodeDecodeAlgorithms() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > PasswordEncoderTest > testEncodeDecode() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testMaxLengthMustNotBeNegative() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testHashCodeAndEqualsForEmptyList() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testIteratorIsImmutable() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testMaxLengthMustNotBeZero() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testToArray() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testGet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testClear() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testAddAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testRemove() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testHashCodeAndEqualsForNonEmptyList() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testSubList() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testOwnedListMustNotBeTooLong() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > BoundedListTest > testAddingToBoundedList() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TopicFilterTest > testIncludeLists() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimerTest > testAlreadyExpiredTask() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimerTest > testTaskExpiration() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimelineIntegerTest > testModifyValue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimelineIntegerTest > testReset() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimelineIntegerTest > testSnapshot() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 124 > TimelineIntegerTest > testToStringAndEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > FeaturesTest > testZkModeFeatures() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > FeaturesTest > testKRaftModeFeatures() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > EndpointReadyFuturesTest > testImmediateCompletion() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > EndpointReadyFuturesTest > testAddMultipleReadinessFutures() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > EndpointReadyFuturesTest > testFailedReadinessFuture() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > EndpointReadyFuturesTest > testAddReadinessFutures() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > EndpointReadyFuturesTest > testAddReadinessFuture() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TranslatedValueMapViewTest > testGet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TranslatedValueMapViewTest > testEntrySet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TranslatedValueMapViewTest > testEntrySetIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TranslatedValueMapViewTest > testContains() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TranslatedValueMapViewTest > testIsEmptyAndSize() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TimelineLongTest > testModifyValue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TimelineLongTest > testReset() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TimelineLongTest > testSnapshot() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 125 > TimelineLongTest > testToStringAndEquals() PASSED

> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 106 > StandardAuthorizerPropertyTest > matchingLiteralAllowWithNoMatchingDenyRules PASSED

> Task :storage:spotbugsMain

> Task :group-coordinator:test

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testListGroupsFailedWithNotCoordinatorException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testHeartbeatCoordinatorNotAvailableException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCommitTransactionalOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testListGroupsFailedImmediately() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testSyncGroupInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDescribeGroupCoordinatorLoadInProgress() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testOnPartitionsDeleted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupDescribeCoordinatorNotActive() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testLeaveGroupThrowsUnknownMemberIdException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCompleteTransactionWhenNotCoordinatorServiceStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testListGroupsWithEmptyTopicPartitions() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.UnknownTopicOrPartitionException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.NotEnoughReplicasException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.TimeoutException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.NotLeaderOrFollowerException, 16" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.KafkaStorageException, 16" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.RecordTooLargeException, -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.RecordBatchTooLargeException, -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.InvalidFetchSizeException: , -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWithException(Throwable, short) > "testDeleteOffsetsWithException(Throwable, short).org.apache.kafka.common.errors.InvalidRequestException: Invalid, 42" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDescribeGroups() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testLeaveGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testListGroups() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchAllOffsets(boolean) > "testFetchAllOffsets(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchAllOffsets(boolean) > "testFetchAllOffsets(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupDescribe() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testHeartbeatCoordinatorException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.UnknownTopicOrPartitionException, 15, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.NotEnoughReplicasException, 15, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.TimeoutException, 15, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.NotLeaderOrFollowerException, 16, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.KafkaStorageException, 16, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.RecordTooLargeException, -1, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.RecordBatchTooLargeException, -1, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.InvalidFetchSizeException: , -1, null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeatWithException(Throwable, short, String) > "testConsumerGroupHeartbeatWithException(Throwable, short, String).org.apache.kafka.common.errors.InvalidRequestException: Invalid, 42, Invalid" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroups() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testHeartbeatWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDescribeGroupsWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsets() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testJoinGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCommitTransactionalOffsetsWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testLeaveGroupWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCommitTransactionalOffsetsWithWrappedError() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testJoinGroupWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testOnResignationWithEmptyLeaderEpoch() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchOffsetsWhenNotStarted(boolean) > "testFetchOffsetsWhenNotStarted(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchOffsetsWhenNotStarted(boolean) > "testFetchOffsetsWhenNotStarted(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupDescribeInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testHeartbeat() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupHeartbeat() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testListGroupsWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testGroupMetadataTopicConfigs() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testSyncGroupWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testSyncGroup() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testPartitionFor() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchOffsets(boolean) > "testFetchOffsets(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchOffsets(boolean) > "testFetchOffsets(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testSyncGroupWithException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testConsumerGroupDescribeCoordinatorLoadInProgress() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDescribeGroupsInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testOnPartitionsDeletedWhenServiceIsNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testJoinGroupWithException() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchAllOffsetsWhenNotStarted(boolean) > "testFetchAllOffsetsWhenNotStarted(boolean).true" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testFetchAllOffsetsWhenNotStarted(boolean) > "testFetchAllOffsetsWhenNotStarted(boolean).false" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCommitTransactionalOffsetsWithInvalidGroupId(String) > "testCommitTransactionalOffsetsWithInvalidGroupId(String).null" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCommitTransactionalOffsetsWithInvalidGroupId(String) > "testCommitTransactionalOffsetsWithInvalidGroupId(String)." PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCompleteTransaction() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testStartupShutdown() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testJoinGroupInvalidGroupId() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testCompleteTransactionWithUnexpectedPartition() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.UnknownTopicOrPartitionException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.NotEnoughReplicasException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.TimeoutException, 15" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.NotLeaderOrFollowerException, 16" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.KafkaStorageException, 16" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.RecordTooLargeException, -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.RecordBatchTooLargeException, -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.InvalidFetchSizeException: , -1" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteGroupsWithException(Throwable, short) > "testDeleteGroupsWithException(Throwable, short).org.apache.kafka.common.errors.InvalidRequestException: Invalid, 42" PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testOnElection() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testOnResignation() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorServiceTest > testDeleteOffsetsWhenNotStarted() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > OffsetAndMetadataTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > OffsetAndMetadataTest > testFromTransactionalRequest() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > OffsetAndMetadataTest > testFromRequest() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > OffsetAndMetadataTest > testFromRecord() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > VersionedMetadataTest > testMetadataCannotBeNull() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > VersionedMetadataTest > testAttributes() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > VersionedMetadataTest > testEquals() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorMetricsTest > testGlobalSensors() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorMetricsTest > aggregateShards() PASSED

Gradle Test Run :group-coordinator:test > Gradle Test Executor 123 > GroupCoordinatorMetricsTest > testMetricNames() PASSED

> Task :server:test

Gradle Test Run :server:test > Gradle Test Executor 122 > AssignmentsManagerTest > testQueuedReplicaToDirAssignmentsMetric() PASSED

Gradle Test Run :server:test > Gradle Test Executor 122 > AssignmentsManagerTest > testRequeuesFailedAssignmentPropagations() PASSED

Gradle Test Run :server:test > Gradle Test Executor 122 > AssignmentsManagerTest > testOnCompletion() PASSED

Gradle Test Run :server:test > Gradle Test Executor 122 > AssignmentsManagerTest > testBuildRequestData() PASSED

Gradle Test Run :server:test > Gradle Test Executor 122 > AssignmentsManagerTest > testAssignmentAggregation() PASSED


> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 126 > DeferredEventQueueTest > testFailEvents() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > DeferredEventQueueTest > testCompleteEvents() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > DeferredEventQueueTest > testFailOnIncorrectOrdering() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testFromVersionString() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsInControlledShutdownStateSupported(MetadataVersion) > "testIsInControlledShutdownStateSupported(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testMinSupportedVersionFor() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsElrSupported(MetadataVersion) > "testIsElrSupported(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testShortVersion() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > AssignmentsHelperTest > testBuildRequestData() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > MetadataVersionValidatorTest > testMetadataVersionValidator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseEmptyArg() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testInitializeBootstrapPropertiesWithBothBootstraps() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testInitializeBootstrapPropertiesWithNoBootstraps() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testMaybeMergeOptionsOverwriteExisting() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseSingleArg() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseArgs() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionRecordVersion(MetadataVersion) > "testPartitionRecordVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testInitializeBootstrapPropertiesWithBrokerBootstrap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPrevious() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testKRaftFeatureLevelsAtAndAfter3_0_IV1() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseArgsWithMultipleDelimiters() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testMaybeMergeOptionsDefaultValueIfNotExist() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testInitializeBootstrapPropertiesWithControllerBootstrap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseEmptyArgWithNoDelimiter() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testMaybeMergeOptionsDefaultOverwriteExisting() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testParseEmptyArgAsValid() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > CommandLineUtilsTest > testMaybeMergeOptionsNotOverwriteExisting() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testGroupMetadataValueVersion(MetadataVersion) > "testGroupMetadataValueVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion) > "testOffsetCommitValueVersionWithExpiredTimestamp(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testVersion() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > assertLatestProductionIsProduction() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testKRaftVersions() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonObjectIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeLong() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testAsJsonObject() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeDouble() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeString() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonValueToString() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testAsJsonObjectOption() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testAsJsonArrayOption() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testAsJsonArray() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonValueHashCode() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeInt() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testDirectoryAssignmentSupported(MetadataVersion) > "testDirectoryAssignmentSupported(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testMetadataChanged() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeMap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeSeq() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonObjectGet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonValueEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonArrayIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testJsonObjectApply() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeBoolean() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > JsonTest > testDecodeOptional() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testIsDelegationTokenSupported(MetadataVersion) > "testIsDelegationTokenSupported(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testKRaftFeatureLevelsBefore3_0_IV1() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > SnapshotRegistryTest > testEmptyRegistry() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > SnapshotRegistryTest > testCreateSnapshots() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > SnapshotRegistryTest > testDeleteSnapshotUpTo() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > SnapshotRegistryTest > testCreateAndDeleteSnapshots() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 127 > SnapshotRegistryTest > testCreateSnapshotOfLatest() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testPartitionChangeRecordVersion(MetadataVersion) > "testPartitionChangeRecordVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > assertLatestProductionIsLessThanLatest() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testRegisterBrokerRecordVersion(MetadataVersion) > "testRegisterBrokerRecordVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.8.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.8.1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.8.2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.9.0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.10.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.11.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.11.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).0.11.0-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).1.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).1.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.1-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.1-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.2-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.4-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).2.8-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.0-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.0-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.1-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.2-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.3-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.3-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.3-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.3-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.4-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.5-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.5-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.5-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.6-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.6-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.6-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.7-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.7-IV1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.7-IV2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.7-IV3" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.7-IV4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > testOffsetCommitValueVersion(MetadataVersion) > "testOffsetCommitValueVersion(MetadataVersion).3.8-IV0" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > MetadataVersionTest > assertLatestIsNotProduction() PASSED

> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testMemoryRecords PASSED


> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 128 > ProducerIdsBlockTest > testEmptyBlock() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > ProducerIdsBlockTest > testClaimNextId() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > ProducerIdsBlockTest > testDynamicBlock() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionPutAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionPutIfAbsent() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfGet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfRemoved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionReplaceWhenMappedToAnyValue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testSingletonMap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfKeySet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionComputeIfPresent() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfValues() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionReplaceAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfSize(int) > "testDelegationOfSize(int).1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfSize(int) > "testDelegationOfSize(int).2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionReplaceWhenMappedToSpecificValue(boolean) > "testDelegationOfUnsupportedFunctionReplaceWhenMappedToSpecificValue(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionReplaceWhenMappedToSpecificValue(boolean) > "testDelegationOfUnsupportedFunctionReplaceWhenMappedToSpecificValue(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionRemoveByKeyAndValue(boolean) > "testDelegationOfUnsupportedFunctionRemoveByKeyAndValue(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionRemoveByKeyAndValue(boolean) > "testDelegationOfUnsupportedFunctionRemoveByKeyAndValue(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfGetOrDefault() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfContainsKey(boolean) > "testDelegationOfContainsKey(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfContainsKey(boolean) > "testDelegationOfContainsKey(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testHashCode() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionComputeIfAbsent() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfContainsValue(boolean) > "testDelegationOfContainsValue(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfContainsValue(boolean) > "testDelegationOfContainsValue(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfEntrySet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionClear() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionMerge() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfToString(String) > "testDelegationOfToString(String).a" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfToString(String) > "testDelegationOfToString(String).b" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionPut() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfForEach() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionCompute() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testUnderlying() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testEmptyMap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUnsupportedFunctionRemoveByKey() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > PCollectionsImmutableMapTest > testDelegationOfUpdated() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BrokerCompressionTypeTest > testTargetCompressionType() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testShouldCallCompletionHandlerWithDisconnectedResponseWhenNodeNotReady() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testShouldNotSendAnythingWhenNoRequests() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testShutdownThreadShouldNotCauseException() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testDisconnectWithoutShutdownShouldCauseException() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testShouldCreateClientRequestAndSendWhenNodeIsReady() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testInterruption(boolean) > "testInterruption(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testInterruption(boolean) > "testInterruption(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > InterBrokerSendThreadTest > testFailingExpiredRequests() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testInsertAndRemove() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testEmptyTable() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testHashCollisions() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testFindSlot() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testExpectedSizeToCapacity() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > BaseHashTableTest > testExpansion() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > TimelineObjectTest > testModifyValue() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > TimelineObjectTest > testReset() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > TimelineObjectTest > testSnapshot() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 126 > TimelineObjectTest > testToStringAndEquals() PASSED

> Task :group-coordinator:check
> Task :group-coordinator:build
> Task :streams:assemble

> Task :server-common:test

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionRemoveIf() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionRemove() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfContains(boolean) > "testDelegationOfContains(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfContains(boolean) > "testDelegationOfContains(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfToArrayIntoGivenDestination() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfCeiling(int) > "testDelegationOfCeiling(int).11" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfCeiling(int) > "testDelegationOfCeiling(int).10" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfSpliterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfHeadSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfDescendingSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfParallelStream() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionPollLast() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfRemoved() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionRemoveAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testSingletonSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfHigher(int) > "testDelegationOfHigher(int).12" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfHigher(int) > "testDelegationOfHigher(int).13" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfStream() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfDescendingIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfIsEmpty(boolean) > "testDelegationOfIsEmpty(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfLast() > "testDelegationOfLast()." PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfLast() > "testDelegationOfLast()." PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfSize(int) > "testDelegationOfSize(int).1" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfSize(int) > "testDelegationOfSize(int).2" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfIterator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfTailSetInclusive() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfContainsAll(boolean) > "testDelegationOfContainsAll(boolean).true" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfContainsAll(boolean) > "testDelegationOfContainsAll(boolean).false" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionRetainAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfTailSet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testHashCode() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfToArray() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfSubSetWithFromAndToElements() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionClear() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testEquals() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfToString(String) > "testDelegationOfToString(String).a" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfToString(String) > "testDelegationOfToString(String).b" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionAdd() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfForEach() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfHeadSetInclusive() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testUnderlying() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfSubSetWithFromElement() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testEmptySet() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionAddAll() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfAdded() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfFirst() > "testDelegationOfFirst()." PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfFirst() > "testDelegationOfFirst()." PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfFloor(int) > "testDelegationOfFloor(int).9" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfFloor(int) > "testDelegationOfFloor(int).10" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfLower(int) > "testDelegationOfLower(int).9" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfLower(int) > "testDelegationOfLower(int).4" PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfComparator() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > PCollectionsImmutableNavigableSetTest > testDelegationOfUnsupportedFunctionPollFirst() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > CsvTest > testCsvMap() PASSED

Gradle Test Run :server-common:test > Gradle Test Executor 128 > SystemTimerReaperTest > testReaper() PASSED

> Task :server:check
> Task :server:build

> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 106 > StandardAuthorizerPropertyTest > matchingPrefixAllowWithNoMatchingDenyRules PASSED

> Task :server-common:check
> Task :server-common:build
> Task :streams:test-utils:compileJava
> Task :connect:test-plugins:compileJava
> Task :connect:test-plugins:classes
> Task :connect:test-plugins:jar
> Task :streams:test-utils:classes
> Task :streams:test-utils:copyDependantLibs
> Task :streams:test-utils:jar

> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 114 > RecordsIteratorTest > testCrcValidation PASSED

> Task :streams:checkstyleMain
> Task :trogdor:compileJava
> Task :trogdor:classes
> Task :trogdor:copyDependantLibs
> Task :trogdor:jar
> Task :trogdor:assemble
> Task :connect:runtime:compileJava
> Task :tools:compileJava
> Task :tools:classes
> Task :connect:runtime:classes
> Task :streams:spotbugsMain

> Task :core:compileScala
[Warn] /home/compf/.gradle/workers/warning:[options] bootstrap class path not set in conjunction with -source 8
/home/compf/data/uni/master/sem4/data_clump_solver/cloned_projects/core/src/main/java/kafka/log/remote/RemoteLogManager.java:234:  [removal] AccessController in java.security has been deprecated and marked for removal
[Warn] /home/compf/data/uni/master/sem4/data_clump_solver/cloned_projects/core/src/main/java/kafka/log/remote/RemoteLogManager.java:256:  [removal] AccessController in java.security has been deprecated and marked for removal

> Task :metadata:test

Gradle Test Run :metadata:test > Gradle Test Executor 106 > StandardAuthorizerPropertyTest > matchingPrefixDenyOverridesAllAllowRules PASSED

> Task :metadata:check
> Task :metadata:build
> Task :core:classes
> Task :trogdor:checkstyleMain
> Task :core:copyDependantLibs
> Task :tools:checkstyleMain
> Task :core:jar
> Task :core:assemble
> Task :core:compileTestJava NO-SOURCE
> Task :core:checkstyleMain
> Task :connect:api:assemble
> Task :shell:compileJava
> Task :shell:classes
> Task :trogdor:compileTestJava
> Task :shell:checkstyleMain
> Task :trogdor:testClasses
> Task :tools:spotbugsMain
> Task :connect:api:checkstyleMain
> Task :trogdor:checkstyleTest
> Task :trogdor:spotbugsTest SKIPPED
> Task :connect:api:compileTestJava
> Task :connect:api:testClasses
> Task :connect:api:checkstyleTest
> Task :core:compileTestScala
> Task :shell:spotbugsMain
> Task :trogdor:spotbugsMain
> Task :connect:api:spotbugsMain
> Task :connect:api:spotbugsTest SKIPPED
> Task :connect:basic-auth-extension:compileJava
> Task :connect:basic-auth-extension:classes
> Task :connect:basic-auth-extension:copyDependantLibs
> Task :connect:basic-auth-extension:jar
> Task :connect:basic-auth-extension:assemble

> Task :raft:test

Gradle Test Run :raft:test > Gradle Test Executor 103 > RaftEventSimulationTest > canMakeProgressIfMajorityIsReachable PASSED

> Task :connect:basic-auth-extension:checkstyleMain
> Task :connect:basic-auth-extension:compileTestJava
> Task :connect:basic-auth-extension:testClasses
> Task :connect:basic-auth-extension:checkstyleTest
> Task :connect:basic-auth-extension:spotbugsTest SKIPPED
> Task :connect:file:compileJava
> Task :connect:file:classes
> Task :connect:file:checkstyleMain

> Task :connect:api:test

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > FieldTest > testEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotAllowNullKey() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldValidateLogicalTypes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldHaveToString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldRemoveAllHeadersWithSameKeyWhenEmpty() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldTransformHeadersWithKey() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddDate() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddTime() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotAddHeadersWithObjectValuesAndMismatchedSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotValidateMismatchedValuesWithBuiltInTypes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldRemoveAllHeadersWithSameKey() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldTransformAndRemoveHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldBeEquals() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldValidateBuildInTypes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldRemoveAllHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldTransformHeadersWhenEmpty() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotValidateNullValuesWithBuiltInTypes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldTransformHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddMultipleHeadersWithSameKeyAndRetainLatest() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldRetainLatestWhenEmpty() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddHeadersWithPrimitiveValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotAddHeadersWithNullObjectValuesWithNonOptionalSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldNotAllowToAddNullHeader() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldDuplicateAndAlwaysReturnEquivalentButDifferentObject() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldThrowNpeWhenAddingCollectionWithNullHeader() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddTimestamp() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddDecimal() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > ConnectHeadersTest > shouldAddHeadersWithNullObjectValuesWithOptionalSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > SourceRecordTest > shouldDuplicateRecordAndCloneHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > SourceRecordTest > shouldCreateSinkRecordWithEmptyHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > SourceRecordTest > shouldDuplicateRecordUsingNewHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > SourceRecordTest > shouldModifyRecordHeader() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 132 > SourceRecordTest > shouldCreateSinkRecordWithHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > ConnectorReconfigurationTest > testReconfigureStopException() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > ConnectorReconfigurationTest > testDefaultReconfigure() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testTypeNotNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testStringBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testDefaultFieldsDifferentValueOverwriting() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testMapValueSchemaNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testBytesBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testNonStructCantHaveFields() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testDoubleBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testFloatBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testFieldNameNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testBooleanBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt16Builder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt16BuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testBytesBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testStructBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt64Builder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testDefaultFieldsSameValueOverwriting() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testMapBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testParameters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testArrayBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testArrayBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testDuplicateFields() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testStringBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testEmptyStruct() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testMapBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt64BuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt8Builder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testFieldSchemaNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt32BuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt8BuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testMapKeySchemaNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testFloatBuilderInvalidDefault() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testInt32Builder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testBooleanBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testArraySchemaNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > SchemaBuilderTest > testDoubleBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 133 > ConverterTypeTest > shouldFindByName() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > ConnectHeaderTest > shouldGetSchemaFromStruct() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > ConnectHeaderTest > shouldAllowNonNullValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > ConnectHeaderTest > shouldSatisfyEquals() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > ConnectHeaderTest > shouldAllowNullSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > ConnectHeaderTest > shouldAllowNullValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > SourceConnectorTest > shouldStopAndStartWhenReconfigure() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > SourceConnectorTest > shouldInitializeContext() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 134 > SourceConnectorTest > shouldInitializeContextWithTaskConfigs() PASSED

> Task :connect:basic-auth-extension:spotbugsMain

> Task :trogdor:test

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > StringExpanderTest > testExpansions() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > StringExpanderTest > testNoExpansionNeeded() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testRandomComponentPayloadGeneratorErrors() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testConstantPayloadGenerator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testSequentialPayloadGenerator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testNullPayloadGenerator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testUniformRandomPayloadGenerator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testPayloadIterator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testUniformRandomPayloadGeneratorPaddingBytes() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 135 > PayloadGeneratorTest > testRandomComponentPayloadGenerator() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseInvalidRequestException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseJsonMappingException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseNotFound() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToExceptionClassNotFoundException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseInvalidTypeIdException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToExceptionNotFoundException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseUnknownException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToExceptionSerializationException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseClassNotFoundException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToResponseSerializationException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > RestExceptionMapperTest > testToExceptionRuntimeException() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > HistogramTest > testHistogramPercentiles() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > HistogramTest > testHistogramSamples() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 136 > HistogramTest > testHistogramAverage() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 138 > StringFormatterTest > testDurationString() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 138 > StringFormatterTest > testDateString() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 138 > StringFormatterTest > testPrettyPrintGrid() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 137 > JsonSerializationTest > testDeserializationDoesNotProduceNulls() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 137 > TopologyTest > testAgentNodeNames() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 137 > ThrottleTest > testThrottle() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 139 > BasicPlatformTest > testCreateBasicPlatform() PASSED

> Task :connect:file:spotbugsMain
> Task :connect:json:assemble

> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 140 > DeleteTopicsResultTest > testDeleteTopicsResultWithNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DeleteTopicsResultTest > testDeleteTopicsResultWithIds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DeleteTopicsResultTest > testInvalidConfigurations() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > MemberDescriptionTest > testEqualsWithoutGroupInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > MemberDescriptionTest > testEqualsWithGroupInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > MemberDescriptionTest > testNonEqual() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testInvalidResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testValidBuildRequestCall() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testInvalidHandleResponseCall() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testInvalidBuildRequestCall() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testSuccessfulResponse() PASSED


> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testFatalErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > AbortTransactionHandlerTest > testRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testUnmappedHandleClassicGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testSuccessfulHandleConsumerGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testUnmappedHandleConsumerGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testInvalidBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testRetriableHandleConsumerGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testFailedHandleClassicGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testBuildRequestWithMultipleGroupTypes(boolean) > "testBuildRequestWithMultipleGroupTypes(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testBuildRequestWithMultipleGroupTypes(boolean) > "testBuildRequestWithMultipleGroupTypes(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testFailedHandleConsumerGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testSuccessfulHandleClassicGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > DescribeConsumerGroupsHandlerTest > testRetriableHandleClassicGroupResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testFailedHandleResponseInMemberLevel() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testUnmappedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testSuccessfulHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testRetriableHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > RemoveMembersFromConsumerGroupHandlerTest > testFailedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CommonClientConfigsTest > testMetricsReporters() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CommonClientConfigsTest > testExponentialBackoffDefaults() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CommonClientConfigsTest > testInvalidSaslMechanism() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteConsumerGroupOffsetsResultTest > testPartitionMissingInResponseErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteConsumerGroupOffsetsResultTest > testPartitionLevelErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteConsumerGroupOffsetsResultTest > testTopLevelErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteConsumerGroupOffsetsResultTest > testNoErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteConsumerGroupOffsetsResultTest > testPartitionMissingInRequestErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > ListTransactionsResultTest > testPartialFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > ListTransactionsResultTest > testAllFuturesFailIfLookupFails() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > ListTransactionsResultTest > testAllFuturesSucceed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > TopicCollectionTest > testTopicCollection() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > AdminMetadataManagerTest > testAuthenticationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > AdminMetadataManagerTest > testSetUsingBootstrapControllers(boolean) > "testSetUsingBootstrapControllers(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > AdminMetadataManagerTest > testSetUsingBootstrapControllers(boolean) > "testSetUsingBootstrapControllers(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > AdminMetadataManagerTest > testMetadataReady() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > AdminMetadataManagerTest > testMetadataRefreshBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandleResponseSanityCheck() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandleSuccessfulResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandleLookupRetriablePartitionInvalidMetadataResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testBuildRequestSimple() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandleUnexpectedPartitionErrorResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testMixedResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandlePartitionErrorResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > DeleteRecordsHandlerTest > testHandleRetriablePartitionTimeoutResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testPartitionSuccessfullyMapped() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testUnexpectedPartitionError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testInvalidTopicError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testRetriableTopicErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testTopicAuthorizationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testIgnoreUnrequestedPartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testRetryIfLeaderUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testBuildLookupRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testUnexpectedTopicError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > PartitionLeaderStrategyTest > testRetriablePartitionErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig) > testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig) > testNoExceptionThrownWhenOnlySubscribedTopicDeleted(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldGetAllEntries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldImplementHashCodeProperly() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > testHashCodeAndEqualsWithNull() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldImplementToStringProperly() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldReturnNullOnGetUnknownEntry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldImplementEqualsProperly() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > shouldGetEntry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigTest > testEquals() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesInvalidRequestError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeReplicaLogDirs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsDontRetryThrottlingExceptionWhenDisabled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testGetOrCreateListValue() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testOffsetCommitNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsOptionsWithBatchedApi() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testClientSideTimeoutAfterFailureToSend() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testIncrementalAlterConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testParseDescribeClusterResponseWithError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConsumerGroupNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeNonConsumerGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeReplicaLogDirsUnexpected() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterReplicaLogDirsUnrequested() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConfigsPartialResponse() PASSED

> Task :connect:basic-auth-extension:test

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testBadPassword() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testUnknownBearer() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testUnknownLoginModule() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testSecurityContextSet() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testNoFileOption() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testInternalZombieFencingEndpointSkipped() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testPostNotChangingConnectorTask() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testInternalTaskConfigEndpointSkipped() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testUnsupportedCallback() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testBadCredential() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 143 > BasicAuthSecurityRestExtensionTest > testGoodJaasConfigInitialization() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testUnknownCredentialsFile() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testEmptyCredentialsFile() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 141 > JaasBasicAuthFilterTest > testSuccess() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 143 > BasicAuthSecurityRestExtensionTest > testBadJaasConfigExtensionSetup() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 143 > BasicAuthSecurityRestExtensionTest > testBadJaasConfigInitialization() PASSED

Gradle Test Run :connect:basic-auth-extension:test > Gradle Test Executor 143 > BasicAuthSecurityRestExtensionTest > testJaasConfigurationNotOverwritten() PASSED

> Task :trogdor:test

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskRequest() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskDestruction() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTasksRequestMatches() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testWorkersExitingAtDifferentTimes() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testAgentFailureAndTaskExpiry() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentCreateWorkers() PASSED

> Task :connect:json:checkstyleMain

> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterUserScramCredentialsUnknownMechanism() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeBrokerConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeProducers() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testConnectionFailureOnMetadataUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDefaultApiTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testGetSubLevelError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testBatchedListConsumerGroupOffsetsWithNoOffsetFetchBatching() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListClientMetricsResourcesNotSupported() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeClusterFailBack() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testInvalidTopicNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterConsumerGroupOffsetsRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreatePartitionsDontRetryThrottlingExceptionWhenDisabled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeAcls() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsOptionsWithUnbatchedApi() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeClusterHandleError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeBrokerAndLogConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsFindCoordinatorNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeClientMetricsConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRequestTimeoutExceedingDefaultApiTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsPartialResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteMultipleConsumerGroupsWithOlderBroker() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupDefaultReason() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeProducersRetryAfterDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMaxTimestampUnsupportedMultipleOffsetSpec() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class) > "testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class).TOPIC_AUTHORIZATION_FAILED, TOPIC_AUTHORIZATION_FAILED, class org.apache.kafka.common.errors.TopicAuthorizationException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class) > "testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class).UNKNOWN_TOPIC_OR_PARTITION, NONE, class org.apache.kafka.common.errors.UnknownTopicOrPartitionException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class) > "testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class).UNKNOWN_TOPIC_OR_PARTITION, UNKNOWN_TOPIC_OR_PARTITION, class org.apache.kafka.common.errors.UnknownTopicOrPartitionException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class) > "testListOffsetsMetadataNonRetriableErrors(Errors, Errors, Class).UNKNOWN_TOPIC_OR_PARTITION, LEADER_NOT_AVAILABLE, class org.apache.kafka.common.errors.UnknownTopicOrPartitionException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsHandleNotControllerException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testEqualsOfClientQuotaFilterComponent() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterReplicaLogDirsPartialFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testPrettyPrintException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testBatchedListConsumerGroupOffsetsWithNoFindCoordinatorBatching() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeMultipleConsumerGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListTransactions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterPartitionReassignments() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConsumerGroupsWithAuthorizedOperationsOmitted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirsPartialFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterUserScramCredentials() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerTimeoutMaxWait() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeFeaturesSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testTimeoutWithoutMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirsOfflineDirDeprecated() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsFindCoordinatorRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteTopicsDontRetryThrottlingExceptionWhenDisabled() PASSED

> Task :connect:basic-auth-extension:check
> Task :connect:basic-auth-extension:build

> Task :trogdor:test

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentGetStatus() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentGetUptime() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentStartShutdown() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskDistribution() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testCreateExpiredWorkerIsNotScheduled() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskRequestWithOldStartMsGetsUpdated() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentProgrammaticShutdown() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testDestroyWorkers() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testNetworkPartitionFault() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testKiboshFaults() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskRequestWithFutureStartMsDoesNotGetRun() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentExecWithTimeout() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentExecWithNormalExit() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreatesNotExistingTopics() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreateZeroTopicsDoesNothing() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreateNonExistingTopicsWithZeroTopicsDoesNothing() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreateTopicsFailsIfAtLeastOneTopicExists() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreatesOneTopicVerifiesOneTopic() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCommonConfigOverwritesDefaultProps() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testClientConfigOverwritesBothDefaultAndCommonConfigs() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testVerifyTopics() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testExistingTopicsNotCreated() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testGetMatchingTopicPartitionsCorrectlyMatchesExactTopicName() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreateRetriesOnTimeout() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testExistingTopicsMustHaveRequestedNumberOfPartitions() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testAddConfigsToPropertiesAddsAllConfigs() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testGetMatchingTopicPartitionsCorrectlyMatchesTopics() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > WorkerUtilsTest > testCreateOneTopic() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testWorkerCompletions() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > AgentTest > testAgentFinishesTasks() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > JsonUtilTest > testObjectFromCommandLineArgument() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > JsonUtilTest > testOpenBraceComesFirst() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > CoordinatorClientTest > testPrettyPrintTaskInfo() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > ConsumeBenchSpecTest > testMaterializeTopicsWithSomePartitions() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > ConsumeBenchSpecTest > testMaterializeTopicsWithNoPartitions() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > ConsumeBenchSpecTest > testInvalidTopicNameRaisesExceptionInMaterialize() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > TopicsSpecTest > testPartitionNumbers() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > TopicsSpecTest > testMaterialize() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 147 > TopicsSpecTest > testPartitionsSpec() PASSED

> Task :connect:mirror-client:compileJava

> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsHandlesFulfillmentTimeouts() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListClientMetricsResourcesEmpty() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteRecordsTopicAuthorizationError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterClientQuotas() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupsWithTypes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRetryDescribeTransactionsAfterNotCoordinatorError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupsWithStates() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConfigsUnrequested() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesDuringSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMetadataRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testMetricsReporterAutoGeneratedClientId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupsMetadataFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeUserScramCredentials() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesUpdateFailedError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeMetadataQuorumSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupsNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterReplicaLogDirsSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterReplicaLogDirsPartialResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCloseAdminClientInCallback() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsRetryThrottlingExceptionWhenEnabled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDefaultApiTimeoutOverride() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testClientSideTimeoutAfterFailureToReceiveResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirsOfflineDir() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsMaxTimestampUnsupportedSingleOffsetSpec() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeFeaturesFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListPartitionReassignments() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsWithLeaderChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConsumerGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteTopics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestInClientWhenDowngradeFlagIsNotSetDuringDeletion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsWithMultiplePartitionsLeaderChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsNumRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupsWithTypesOlderBrokerVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupOffsetsRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testClientInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupTruncatesReason() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterConsumerGroupOffsetsNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerTimeoutAndSuccessRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestForEmptyUpdates() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesPartialSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeCluster() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeTransactions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterConsumerGroupOffsetsFindCoordinatorNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupsWithOlderBroker() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAbortTransaction() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateAcls() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCloseAdminClient() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeMetadataQuorumFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDefaultApiTimeoutAndRequestTimeoutConflicts() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testPropagatedMetadataFetchException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeMetadataQuorumRetriableError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreatePartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeOldAndNewConsumerGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAdminClientApisAuthenticationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerTimeoutAndFailureRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirsDeprecated() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreatePartitionsRetryThrottlingExceptionWhenEnabled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testMetadataRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsUnsupportedNonMaxTimestamp() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCreateTopicsRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeConsumerGroupRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteAcls() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testParseSuccessfulDescribeClusterResponse(boolean) > "testParseSuccessfulDescribeClusterResponse(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testParseSuccessfulDescribeClusterResponse(boolean) > "testParseSuccessfulDescribeClusterResponse(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAdminClientFailureWhenClosed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testBatchedListConsumerGroupOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroupReason() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeLogDirsWithVolumeBytes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterConsumerGroupOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testElectLeaders() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteRecordsMultipleSends() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testFenceProducers() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAbortTransactionFindLeaderAfterDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestForInvalidFeatureName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupsRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testAlterReplicaLogDirsLogDirNotFound() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeClientQuotas() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteTopicsRetryThrottlingExceptionWhenEnabled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListConsumerGroupsWithStatesOlderBrokerVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testClientInstanceIdInvalidTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsNonMaxTimestampDowngradedImmediately() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListClientMetricsResources() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testClientInstanceIdNoTelemetryReporterRegistered() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testGenerateClientId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesTopLevelError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnregisterBrokerTimeoutMaxRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testSuccessfulRetryAfterRequestTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUpdateFeaturesHandleNotControllerException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testOffsetCommitRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeProducersTimeout(boolean) > "testDescribeProducersTimeout(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeProducersTimeout(boolean) > "testDescribeProducersTimeout(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeGroupsWithBothUnsupportedApis() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testParseDescribeClusterResponseWithUnexpectedEndpointType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteTopicsPartialResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testRemoveMembersFromGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDisableJmxReporter() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testExplicitlyEnableJmxReporter() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDescribeTopicsByIds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testOffsetCommitWithMultipleErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testListOffsetsPartialResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testCalcTimeoutMsRemainingAsInt() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testUnreachableBootstrapServer() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > KafkaAdminClientTest > testDeleteConsumerGroupOffsetsNonRetriableErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ScramMechanismTest > testFromMechanismName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > AdminBootstrapAddressesTest > testTwoBootstrapsSet() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > AdminBootstrapAddressesTest > testFromConfig(boolean) > "testFromConfig(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > AdminBootstrapAddressesTest > testFromConfig(boolean) > "testFromConfig(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > AdminBootstrapAddressesTest > testNoBootstrapSet(boolean) > "testNoBootstrapSet(boolean).false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > AdminBootstrapAddressesTest > testNoBootstrapSet(boolean) > "testNoBootstrapSet(boolean).true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DeleteConsumerGroupsHandlerTest > testUnmappedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DeleteConsumerGroupsHandlerTest > testSuccessfulHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DeleteConsumerGroupsHandlerTest > testRetriableHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DeleteConsumerGroupsHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DeleteConsumerGroupsHandlerTest > testFailedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testHandleResponseWithFatalErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testBuildRequestWithFilteredState() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testBuildRequestWithFilteredProducerId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testHandleSuccessfulResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testCoordinatorLoadingErrorIsRetriable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testBuildRequestWithDurationFilter() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ListTransactionsHandlerTest > testBuildRequestWithoutFilters() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConsumerRecordsTest > iterator() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerNoTopic(boolean) > testOneConsumerNoTopic(boolean).hasConsumerRack = true PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerNoTopic(boolean) > testOneConsumerNoTopic(boolean).hasConsumerRack = false PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersTwoTopicsSixPartitions(RackConfig) > testTwoConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersTwoTopicsSixPartitions(RackConfig) > testTwoConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersTwoTopicsSixPartitions(RackConfig) > testTwoConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistent(RackConfig) > testStaticMemberRangeAssignmentPersistent(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistent(RackConfig) > testStaticMemberRangeAssignmentPersistent(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistent(RackConfig) > testStaticMemberRangeAssignmentPersistent(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareAssignmentWithUniformSubscription() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testCoPartitionedAssignmentWithSameSubscription() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareAssignmentWithUniformPartitions() PASSED

> Task :connect:api:test

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > DecimalTest > testToLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > DecimalTest > testFromLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > DecimalTest > testBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertStringWithQuotesAndOtherDelimiterCharacters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseFalseAsBooleanIfSurroundedByWhitespace() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseLongAsInt64() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseAsMapWithNullKeys() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseBigIntegerAsDecimalWithZeroScale() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimestampStringAsTimestampInArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseQuotedTimeStringAsTimeInMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsWithSingleDelimiter() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertMapWithStringKeys() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseDateStringAsDate() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConsumeMultipleTokens() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimeStringWithEscapedColonsAsDate() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseBooleanLiteralsEmbeddedInMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseNullArrayElements() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseUnquotedEmbeddedMapValuesAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithStringValuesWithWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertMapWithStringKeysAndShortValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithStringValuesWithoutWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertSimpleString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertEmptyString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseEmptyMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseMultipleTimestampStringAsTimestampInArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseUnquotedArrayElementsAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseDateStringAsDateInArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsBeginningWithTrueAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToParseStringOfMapWithIntValuesWithOnlyBlankEntries() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertBooleanValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseAsMapWithoutCommas() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseStringsBeginningWithNullAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsBeginningWithFalseAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimestampStringWithEscapedColonsAsTimestamp() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > canConsume() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithIntValuesWithoutWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringListWithExtraDelimitersAndReturnString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseDoubleAsFloat64() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotEncounterInfiniteLoop() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimeStringAsTimeInMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseFloatAsFloat32() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToConvertToListFromStringWithExtraDelimiters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithShortValuesWithWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsWithoutDelimiters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertStringOfNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseIntegerAsInt32() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToParseStringOfMapWithIntValuesWithBlankEntry() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToParseStringOfMapWithIntValuesWithBlankEntries() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertMapWithStringKeysAndIntegerValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertDateValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToParseInvalidBooleanValueString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertTimestampValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseNullAsNullIfSurroundedByWhitespace() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertNullValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertTimeValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToParseStringOfMalformedMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseNullMapValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithShortValuesWithoutWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimeStringAsTimeInArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertListWithStringValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsWithEscapedDelimiters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertStringOfListWithOnlyNumericElementTypesIntoListOfLargestNumericType() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringOfMapWithIntValuesWithWhitespaceAsMap() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertListWithIntegerValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseEmptyArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTrueAsBooleanIfSurroundedByWhitespace() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldConvertStringOfListWithMixedElementTypesIntoListWithDifferentElementTypes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseAsArrayWithoutCommas() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseShortAsInt16() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimeStringAsDate() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseNull() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseTimestampStringAsTimestamp() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldEscapeStringsWithEmbeddedQuotesAndBackslashes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldNotParseUnquotedEmbeddedMapKeysAsStrings() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringListWithMultipleElementTypesAndReturnListWithNoSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseBooleanLiteralsEmbeddedInArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseByteAsInt8() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldFailToConvertToListFromStringWithNonCommonElementTypeAndBlankElement() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 149 > ValuesTest > shouldParseStringsWithMultipleDelimiters() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testFromLogicalInvalidHasTimeComponents() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testFromLogicalInvalidSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testToLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testFromLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > DateTest > testToLogicalInvalidSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > TimestampTest > testFromLogicalInvalidSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > TimestampTest > testToLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > TimestampTest > testFromLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > TimestampTest > testBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 150 > TimestampTest > testToLogicalInvalidSchema() PASSED

> Task :connect:mirror:compileJava
> Task :connect:mirror:classes
> Task :connect:mirror-client:classes

> Task :trogdor:test

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > TaskSpecTest > testTaskSpecSerialization() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 148 > TimeIntervalTransactionsGeneratorTest > testCommitsTransactionAfterIntervalPasses() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTaskCancellation() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testCreateTask() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testTasksRequest() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testCoordinatorStatus() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > CoordinatorTest > testCoordinatorUptime() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > ExternalCommandWorkerTest > testProcessWithFailedExit() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > ExternalCommandWorkerTest > testProcessNotFound() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > ExternalCommandWorkerTest > testProcessForceKillTimeout() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > ExternalCommandWorkerTest > testProcessStop() PASSED

Gradle Test Run :trogdor:test > Gradle Test Executor 144 > ExternalCommandWorkerTest > testProcessWithNormalExit() PASSED


> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareAssignmentWithUniformPartitionsNonEqualSubscription() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareAssignmentWithNonEqualSubscription() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerOneTopic(RackConfig) > rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerOneTopic(RackConfig) > rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerOneTopic(RackConfig) > rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig) > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig) > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig) > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testMultipleConsumersMixedTopics(RackConfig) > testMultipleConsumersMixedTopics(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testMultipleConsumersMixedTopics(RackConfig) > testMultipleConsumersMixedTopics(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testMultipleConsumersMixedTopics(RackConfig) > testMultipleConsumersMixedTopics(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicOnePartition(RackConfig) > testTwoConsumersOneTopicOnePartition(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicOnePartition(RackConfig) > testTwoConsumersOneTopicOnePartition(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicOnePartition(RackConfig) > testTwoConsumersOneTopicOnePartition(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig) > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig) > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig) > testTwoStaticConsumersTwoTopicsSixPartitions(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareAssignmentWithCoPartitioning() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerMultipleTopics(RackConfig) > testOneConsumerMultipleTopics(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerMultipleTopics(RackConfig) > testOneConsumerMultipleTopics(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerMultipleTopics(RackConfig) > testOneConsumerMultipleTopics(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig) > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig) > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig) > testOnlyAssignsPartitionsFromSubscribedTopics(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicTwoPartitions(RackConfig) > testTwoConsumersOneTopicTwoPartitions(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicTwoPartitions(RackConfig) > testTwoConsumersOneTopicTwoPartitions(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testTwoConsumersOneTopicTwoPartitions(RackConfig) > testTwoConsumersOneTopicTwoPartitions(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testRackAwareStaticMemberRangeAssignmentPersistentAfterMemberIdChanges() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig) > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig).rackConfig = NO_BROKER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig) > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig).rackConfig = NO_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig) > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions(RackConfig).rackConfig = BROKER_AND_CONSUMER_RACK PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerNonexistentTopic(boolean) > testOneConsumerNonexistentTopic(boolean).hasConsumerRack = true PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RangeAssignorTest > testOneConsumerNonexistentTopic(boolean) > testOneConsumerNonexistentTopic(boolean).hasConsumerRack = false PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConsumerInterceptorsTest > testOnCommitChain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConsumerInterceptorsTest > testOnConsumeChain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testJoinPrepareAndCommitWithUnknownMemberId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testSubscriptionChangeWithAuthorizationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testForceMetadataDeleteForPatternSubscriptionDuringRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetUnknownTopicOrPartition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testInvalidSessionTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testFetchCommittedOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorNotAvailableWithUserAssignedType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testExcludeInternalTopicsConfigOption() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnJoinPrepareWithOffsetCommitShouldKeepJoinAfterRebalanceTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPartitionAwaitingReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitAfterLeaveGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testGroupDescribeUnauthorized() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithNewGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseNoResponseForCommit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testThreadSafeAssignedPartitionsMetric() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetLoadInProgress() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetOnly() PASSED

> Task :connect:mirror-client:copyDependantLibs
> Task :connect:mirror-client:jar
> Task :connect:json:compileTestJava


> Task :connect:api:test

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testStructEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchMapValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchStructWrongSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchMapSomeValues() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchBoolean() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testFieldsOnStructSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchArray() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchFloat() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchInt16() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchInt32() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchInt64() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testMapEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testPrimitiveEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchTimestamp() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchStructWrongNestedSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchDecimal() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testArrayDefaultValueEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testEmptyStruct() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchMapSomeKeys() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchArraySomeMatch() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchDate() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchInt8() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchTime() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchDouble() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testEqualsAndHashCodeWithByteArrayValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchMapKey() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMismatchString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testValidateFieldWithInvalidValueType() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMatchingType() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testFlatStruct() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidStructFieldSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testArrayEquality() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testFieldsOnlyValidForStructs() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectSchemaTest > testValidateValueMatchingLogicalType() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testMissingFieldWithoutDefaultValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testMissingFieldWithDefaultValidation() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testFromLogicalInvalidSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testToLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testFromLogical() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testBuilder() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidFieldType() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testToLogicalInvalidSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > TimeTest > testFromLogicalInvalidHasDateComponents() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testValidateFieldWithInvalidValueMismatchTimestamp() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testMissingOptionalFieldValidation() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testValidateStructWithNullValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldRetainOriginalTopicPartition() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldDuplicateRecordAndCloneHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidPutIncludesFieldName() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldCreateSinkRecordWithEmptyHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testPutNullField() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldDuplicateRecordUsingNewHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testMissingFieldValidation() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testMissingFieldWithDefaultValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidStructFieldValue() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testComplexStruct() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testEquals() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidArrayFieldElements() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StructTest > testInvalidMapKeyElements() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > SinkConnectorTest > shouldStopAndStartWhenReconfigure() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > SinkConnectorTest > shouldInitializeContext() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > SinkConnectorTest > shouldInitializeContextWithTaskConfigs() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testBytesNullToString() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldModifyRecordHeader() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldCreateSinkRecordWithHeaders() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > SinkRecordTest > shouldRetainOriginalTopicPartitionWithOlderConstructor() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectorUtilsTest > testGroupPartitions() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 151 > ConnectorUtilsTest > testGroupPartitionsInvalidCount() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testToBytesNonUtf8Encoding() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testInheritedVersionRetrievedFromAppInfoParser() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testNonStringToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testBytesToStringNonUtf8Encoding() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testNullToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testNullHeaderValueToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testStringHeaderValueToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testToBytesIgnoresSchema() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testNonStringHeaderValueToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testStringToBytes() PASSED

Gradle Test Run :connect:api:test > Gradle Test Executor 152 > StringConverterTest > testBytesToString() PASSED


> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPerformAssignmentShouldValidateCooperativeAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAuthenticationFailureInEnsureActiveGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseCoordinatorNotKnownWithCommits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testMaybeLeaveGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithPatternSubscribe() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testJoinPrepareAndCommitCompleted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testHeartbeatThreadClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithSubscribe() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testMetadataChangeTriggersRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithNewReplicasOnSameRacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetAsyncCoordinatorNotAvailable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRebalanceWithMetadataChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPatternJoinGroupLeader() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnJoinPrepareWithOffsetCommitShouldSuccessAfterRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testThrowOnUnsupportedStableFlag() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseCoordinatorNotKnownManualAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUnknownMemberIdOnSyncGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUnexpectedErrorOnSyncGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testStaticLeaderRejoinsGroupAndCanTriggersRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUnknownMemberId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testTimeToNextUpdateRetryBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUpdateMetadataDuringRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPendingMemberShouldLeaveGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseCoordinatorUnavailableNoCommits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testSelectRebalanceProtocol() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testEpochUpdateAfterTopicDeletion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRevokeExceptionThrownFirstNonBlockingSubCallbacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testIllegalGenerationOnSyncGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testClusterCopy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testMetadataTopicErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testNodeIfOnlineNonExistentTopicPartition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithNewGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testJoinPrepareAndCommitWithCoordinatorNotAvailable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testPartialMetadataUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testInvalidTopicError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithResetGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitAsyncWithUserAssignedType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetSyncWithoutFutureGetsCompleted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testOutOfBandEpochUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testUpdateLastEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testUpdateMetadataAllowedImmediatelyAfterBootstrap() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testFailedUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testRequestUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUpdateLastHeartbeatPollWhenCoordinatorUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testTopicAuthorizationError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetSyncCallbackWithNonRetriableException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNoThrowWhenStableFlagIsSupported() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testTopicMetadataOnUpdatePartitionLeadership() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testClusterListenerGetsNotifiedOfUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testEpochUpdateOnChangedTopicIds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testStaleMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testMetadataMerge() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testLeaderMetadataInconsistentWithBrokerMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testMetadataUpdateAfterClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseNoWait() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testDisconnectInJoin() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testMetadataMergeOnIdDowngrade() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testRejectOldMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithNoMetadataChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testIgnoreLeaderEpochInOlderMetadataResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPositionsKnown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testRequestVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testTimeToNextUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testNoEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testGetGroupMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetIllegalGenerationShouldResetGenerationId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetWithPendingTransactions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorDisconnected() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRetryCommitUnknownTopicOrPartition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPrepareJoinAndRejoinAfterFailedRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithRebalancingGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetAsyncFailedWithDefaultCallback() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testTopicAuthorizationFailedInOffsetFetch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testJoinPrepareWithDisableAutoCommit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetWithValidation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetSyncNotCoordinator() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNonRackAwareConsumerRebalanceWithDifferentRacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testMetadataRefreshDuringRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetMetadataAsync() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetRebalanceInProgress() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseDynamicAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithResetGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseMaxWaitCoordinatorUnavailableForCommit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitAsyncWithUserAssignedType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testIllegalGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnRevokeExceptionShouldBeRenderedIfNotKafkaException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNormalHeartbeat() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetMetadataSync() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetsGroupNotAuthorized() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPerformAssignmentShouldSkipValidateCooperativeAssignmentForBuiltInCooperativeStickyAssignor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetRequestSyncWithFencedInstanceIdException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitDynamicAssignmentRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPerformAssignmentShouldUpdateGroupSubscriptionAfterAssignmentIfNeeded() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithNoRackChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNormalJoinGroupFollower() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorNotAvailable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetWithNoFetchableOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetShouldNotSetInstanceIdIfMemberIdIsUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithAdditionalRacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testIsPreparingConnection() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testNodeWithNewHostname() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testHostResolveChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testSkipLastAttemptedIp() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testAuthorizationFailed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testTimedOutConnections() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testThrottled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testExponentialReconnectBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testMultipleIPs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testRemoveNode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testExponentialConnectionSetupTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testMultipleNodeConnectionStates() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testSingleIP() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testClusterConnectionStateChanges() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ClusterConnectionStatesTest > testMaxReconnectBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MetadataSnapshotTest > testEmptyTopicNamesCacheBuiltFromTopicIds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean) > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean).hasConsumerRack = false PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseTimeoutCoordinatorUnavailableForCommit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testMetadataTopicsDuringSubscriptionChange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testMetrics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOutdatedCoordinatorAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetAsyncWithDefaultCallback() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitManualAssignmentCoordinatorUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MetadataSnapshotTest > testMergeWithThatPreExistingPartitionIsRetainedPostMerge() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MetadataSnapshotTest > testTopicNamesCacheBuiltFromTopicIds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MetadataSnapshotTest > testMissingLeaderEndpoint() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MetadataSnapshotTest > testLeaderEpochFor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > RemoveMembersFromConsumerGroupOptionsTest > testConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildOldLookupRequestRequiresAtLeastOneKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testSuccessfulCoordinatorLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testSuccessfulOldCoordinatorLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testFilterPreferredAddresses() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildOldLookupRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testResolveUnknownHostException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildOldLookupRequestRequiresOneKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testOnlyBadHostname() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testRetriableOldCoordinatorLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testFatalErrorLookupResponses() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildLookupRequestNonRepresentable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testInvalidConfig() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildLookupRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testResolveDnsLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildLookupRequestRequiresAtLeastOneKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testHandleOldResponseRequiresOneKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testBuildLookupRequestRequiresKeySameType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testParseAndValidateAddresses() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testFatalErrorOldLookupResponses() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > CoordinatorStrategyTest > testRetriableCoordinatorLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testBuildRequestBatchGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testUnmappedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testSuccessfulHandleResponseWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testRetriableHandleResponseWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testUnmappedHandleResponseWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testSuccessfulHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testBuildRequestDoesNotBatchGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testRetriableHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testFailedHandleResponseWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testSuccessfulHandleResponseWithOnePartitionError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testSuccessfulHandleResponseWithOnePartitionErrorWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testParseAndValidateAddressesWithReverseLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > ClientUtilsTest > testNoPort() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testBuildRequestWithMultipleGroups() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ListConsumerGroupOffsetsHandlerTest > testFailedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testCompleteNextThrowsIfNoInflights() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testCompleteLastSentThrowsIfNoInFlights() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testCompleteNext() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldInstantiateFromListOfClassTypes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldThrowKafkaExceptionOnAssignorNotFound() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldBeConfigurable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testCompleteLastSent() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldInstantiateAssignor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldInstantiateListOfAssignors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testClearAll() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldThrowKafkaExceptionOnNonAssignor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > InFlightRequestsTest > testTimedOutNodes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldThrowKafkaExceptionOnAssignorsWithSameName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldInstantiateFromClassType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ConsumerPartitionAssignorTest > shouldThrowKafkaExceptionOnListWithNonAssignorClassType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > testSimpleMock() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > testConsumerRecordsIsEmptyWhenReturningNoRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > shouldNotClearRecordsForPausedPartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > testRebalanceListener() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > endOffsetsShouldBeIdempotent() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > MockConsumerTest > testSimpleMockDeprecated() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > AbstractPartitionAssignorTest > testMergeSortManyMemberInfo() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > AbstractPartitionAssignorTest > testMemberInfoSortingSomeGroupInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > AbstractPartitionAssignorTest > testMemberInfoSortingWithAllGroupInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > AbstractPartitionAssignorTest > testUseRackAwareAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > AbstractPartitionAssignorTest > testMemberInfoSortingWithoutGroupInstanceId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testConstructionFromApiVersionsResponse(ListenerType) > "testConstructionFromApiVersionsResponse(ListenerType).ZK_BROKER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testConstructionFromApiVersionsResponse(ListenerType) > "testConstructionFromApiVersionsResponse(ListenerType).BROKER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testConstructionFromApiVersionsResponse(ListenerType) > "testConstructionFromApiVersionsResponse(ListenerType).CONTROLLER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testLatestUsableVersionOutOfRangeHigh() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testLatestUsableVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUsableVersionCalculationNoKnownVersions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testVersionsToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUnsupportedVersionsToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testLatestUsableVersionOutOfRangeLow() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testLatestUsableVersionOutOfRange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUnknownApiVersionsToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUsableVersionLatestVersions(ListenerType) > "testUsableVersionLatestVersions(ListenerType).ZK_BROKER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUsableVersionLatestVersions(ListenerType) > "testUsableVersionLatestVersions(ListenerType).BROKER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > NodeApiVersionsTest > testUsableVersionLatestVersions(ListenerType) > "testUsableVersionLatestVersions(ListenerType).CONTROLLER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > AlterConsumerGroupOffsetsHandlerTest > testHandleMultipleErrorsResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > AlterConsumerGroupOffsetsHandlerTest > testHandleRetriableResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > AlterConsumerGroupOffsetsHandlerTest > testHandleSuccessfulResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > AlterConsumerGroupOffsetsHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > AlterConsumerGroupOffsetsHandlerTest > testHandleErrorResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > FenceProducersHandlerTest > testHandleSuccessfulResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > FenceProducersHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > FenceProducersHandlerTest > testHandleErrorResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > shouldLoseAllOwnedPartitionsBeforeRejoiningAfterDroppingOutOfTheGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithCorruptMessage() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithUnknownLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testErrorInInitialize(int, RuntimeException) > "testErrorInInitialize(int, RuntimeException).10, java.lang.RuntimeException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testErrorInInitialize(int, RuntimeException) > "testErrorInInitialize(int, RuntimeException).0, java.lang.RuntimeException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testErrorInInitialize(int, RuntimeException) > "testErrorInInitialize(int, RuntimeException).10, org.apache.kafka.common.KafkaException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testErrorInInitialize(int, RuntimeException) > "testErrorInInitialize(int, RuntimeException).0, org.apache.kafka.common.KafkaException" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testUpdatePartitionLeadership() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithReadReplica() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithUnknownServerError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testNoResultsIfInitializing() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOffsetOutOfRange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testConcurrentUpdateAndFetchForSnapshotAndCluster() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testNodeIfOnlineWhenNotInReplicaSet() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).NOT_LEADER_OR_FOLLOWER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).REPLICA_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnLeaderElectedShouldSkipAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorDisconnectAfterNotCoordinatorError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MetadataTest > testNodeIfOffline() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).KAFKA_STORAGE_ERROR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testWakeupDuringJoin() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).FENCED_LEADER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testSubscriptionRackId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetAsyncNotCoordinator() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testPatternJoinGroupFollower() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).OFFSET_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testGroupReadUnauthorized() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).UNKNOWN_TOPIC_OR_PARTITION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).UNKNOWN_TOPIC_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithMetadataRefreshErrors(Errors) > "testFetchWithMetadataRefreshErrors(Errors).INCONSISTENT_TOPIC_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testIncludeInternalTopicsConfigOption() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUnsubscribeWithInvalidGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RemoveMembersFromConsumerGroupResultTest > testMemberLevelErrorInResponseConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RemoveMembersFromConsumerGroupResultTest > testTopLevelErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRebalanceInProgressOnSyncGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchNormal() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RemoveMembersFromConsumerGroupResultTest > testMemberMissingErrorInRequestConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetUnknownMemberId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RemoveMembersFromConsumerGroupResultTest > testMemberLevelErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOffsetOutOfRangeWithPreferredReadReplica() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RemoveMembersFromConsumerGroupResultTest > testNoErrorConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchingPausedPartitionsYieldsNoRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithTopicAuthorizationFailed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_FETCH_SIZE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testKeyLookupRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).LEADER_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testCoalescedStaticAndDynamicFulfillment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).REQUEST_TIMED_OUT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).BROKER_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testRecoalescedLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testStaticMapping() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).MESSAGE_TOO_LARGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).STALE_CONTROLLER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentRetriableUnsupportedVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).OFFSET_METADATA_TOO_LARGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NETWORK_EXCEPTION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).COORDINATOR_LOAD_IN_PROGRESS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testRetryLookupAndDisableBatchAfterNoBatchedFindCoordinatorsException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentUnmapping() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).COORDINATOR_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentRetryBookkeeping() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testRetryLookupAfterDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NOT_COORDINATOR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testCoalescedLookup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_TOPIC_EXCEPTION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testFulfillmentFailureUnsupportedVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testKeyLookupFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).RECORD_LIST_TOO_LARGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testLookupRetryBookkeeping() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NOT_ENOUGH_REPLICAS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AdminApiDriverTest > testCoalescedFulfillment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NOT_ENOUGH_REPLICAS_AFTER_APPEND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testUnmappedHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testFailedHandleResponseWithGroupError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_REQUIRED_ACKS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testFailedHandleResponseWithPartitionError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).ILLEGAL_GENERATION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testSuccessfulHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INCONSISTENT_GROUP_PROTOCOL" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testRetriableHandleResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_GROUP_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNKNOWN_MEMBER_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_SESSION_TIMEOUT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).REBALANCE_IN_PROGRESS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_COMMIT_OFFSET_SIZE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseNoResponseForLeaveGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetRequestAsyncAlwaysReceiveFencedException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > shouldUpdateConsumerGroupMetadataBeforeCallbacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DeleteConsumerGroupOffsetsHandlerTest > testBuildRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).GROUP_AUTHORIZATION_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testEnsureCompletingAsyncCommitsWhenSyncCommitWithoutOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).CLUSTER_AUTHORIZATION_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_TIMESTAMP" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleResponseSanityCheck() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_SASL_MECHANISM" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testBuildRequestMultipleTopicsWithReadCommitted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).ILLEGAL_SASL_STATE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testForceMetadataRefreshForPatternSubscriptionDuringRebalance() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_VERSION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleSuccessfulResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleLookupRetriablePartitionInvalidMetadataResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TOPIC_ALREADY_EXISTS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testBuildRequestSimple() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithDifferentRacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testUnsubscribeWithValidGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_PARTITIONS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testBuildRequestAllowedVersions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_REPLICATION_FACTOR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleUnexpectedPartitionErrorResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_REPLICA_ASSIGNMENT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_CONFIG" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testOnJoinPrepareWithOffsetCommitShouldKeepJoinAfterNonRetryableException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NOT_CONTROLLER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRefreshOffsetNotCoordinatorForConsumer() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleResponseUnsupportedVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ListOffsetsHandlerTest > testHandleRetriablePartitionTimeoutResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_REQUEST" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConsumerRecordTest > testConstructorsWithChecksum() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConsumerRecordTest > testShortConstructor() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_FOR_MESSAGE_FORMAT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithLessRacks() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseManualAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).POLICY_VIOLATION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).OUT_OF_ORDER_SEQUENCE_NUMBER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetAndMetadataTest > testSerializationRoundtrip() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetAndMetadataTest > testInvalidNegativeOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DUPLICATE_SEQUENCE_NUMBER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetAndMetadataTest > testDeserializationCompatibilityBeforeLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_PRODUCER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetAndMetadataTest > testDeserializationCompatibilityWithLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_TXN_STATE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_PRODUCER_ID_MAPPING" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_TRANSACTION_TIMEOUT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).CONCURRENT_TRANSACTIONS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TRANSACTION_COORDINATOR_FENCED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TRANSACTIONAL_ID_AUTHORIZATION_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).SECURITY_DISABLED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).OPERATION_NOT_ATTEMPTED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).LOG_DIR_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FetchConfigTest > testBasicFromConsumerConfig() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).SASL_AUTHENTICATION_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNKNOWN_PRODUCER_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).REASSIGNMENT_IN_PROGRESS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_AUTH_DISABLED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > KafkaConsumerMetricsTest > shouldRecordCommittedTime() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > KafkaConsumerMetricsTest > shouldRemoveMetricsOnClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_OWNER_MISMATCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > KafkaConsumerMetricsTest > shouldRecordCommitSyncTime() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_REQUEST_NOT_ALLOWED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_AUTHORIZATION_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DELEGATION_TOKEN_EXPIRED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_PRINCIPAL_TYPE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean) > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean).hasConsumerRack = true PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NON_EMPTY_GROUP" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).GROUP_ID_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).FETCH_SESSION_ID_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 140 > StickyAssignorTest > testMemberData() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetForLeaderEpochClientTest > testOkResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_FETCH_SESSION_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).LISTENER_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TOPIC_DELETION_DISABLED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetForLeaderEpochClientTest > testEmptyResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_COMPRESSION_TYPE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetForLeaderEpochClientTest > testUnauthorizedTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetForLeaderEpochClientTest > testUnexpectedEmptyResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).STALE_BROKER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).MEMBER_ID_REQUIRED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > OffsetForLeaderEpochClientTest > testRetriableError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).PREFERRED_LEADER_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).GROUP_MAX_SIZE_REACHED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).FENCED_INSTANCE_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetTopicMetadataOfflinePartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).ELIGIBLE_LEADERS_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).ELECTION_NOT_NEEDED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetTopicMetadataInvalidTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NO_REASSIGNMENT_IN_PROGRESS" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).GROUP_SUBSCRIBED_TO_TOPIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetAllTopicsTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_RECORD" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetAllTopicsUnauthorized() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSTABLE_OFFSET_COMMIT" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetAllTopics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).THROTTLING_QUOTA_EXCEEDED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetAllTopicsDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).PRODUCER_FENCED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetTopicMetadataLeaderNotAvailable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).RESOURCE_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DUPLICATE_RESOURCE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > TopicMetadataFetcherTest > testGetTopicMetadataUnknownTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerRecordTest > testInvalidRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNACCEPTABLE_CREDENTIAL" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerRecordTest > testEqualsAndHashCode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INCONSISTENT_VOTER_SET" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > BuiltInPartitionerTest > adaptivePartitionsTest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_UPDATE_VERSION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > BuiltInPartitionerTest > unavailablePartitionsTest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).FEATURE_UPDATE_FAILED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > BuiltInPartitionerTest > testStickyPartitioning() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).PRINCIPAL_DESERIALIZATION_FAILURE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > BuiltInPartitionerTest > testStickyBatchSizeMoreThatZero() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).SNAPSHOT_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testRequestUpdateForTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).POSITION_OUT_OF_RANGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).DUPLICATE_BROKER_REGISTRATION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).BROKER_ID_NOT_REGISTERED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INCONSISTENT_CLUSTER_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadataAwaitAfterClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testTopicExpiry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TRANSACTIONAL_ID_NOT_FOUND" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).FETCH_SESSION_TOPIC_ID_ERROR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INELIGIBLE_REPLICA" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).NEW_LEADER_ELECTED" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).OFFSET_MOVED_TO_TIERED_STORAGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).FENCED_MEMBER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNRELEASED_INSTANCE_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_ASSIGNOR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).STALE_MEMBER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).MISMATCHED_ENDPOINT_TYPE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNSUPPORTED_ENDPOINT_TYPE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNKNOWN_CONTROLLER_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).UNKNOWN_SUBSCRIPTION_ID" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).TELEMETRY_TOO_LARGE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > FetchCollectorTest > testFetchWithOtherErrors(Errors) > "testFetchWithOtherErrors(Errors).INVALID_REGISTRATION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testResetSession() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testResetTimeouts() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testShouldHeartbeat() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testTimeToNextHeartbeat() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testSessionTimeoutExpired() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testShouldNotHeartbeat() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > HeartbeatTest > testPollTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionResetToLatestOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsFencedLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testFetchingPendingPartitionsBeforeAndAfterSubscriptionReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testEndOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationSkippedForOldResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionOfPausedPartitionsWithAValidPosition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationresetPositionForUndefinedOffsetWithDefinedResetPolicy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetByTimeWithPartitionsRetryCouldTriggerMetadataUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testFetchOffsetErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationresetPositionForUndefinedEpochWithUndefinedResetPolicy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsUnknownLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testListOffsetUpdateEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testListOffsetNoUpdateMissingEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionNoOpWithPositionSet() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testAssignmentChangeWithInFlightReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testSeekWithInFlightReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testresetPositionsSkipsBlackedOutConnections() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionResetToDefaultOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testBeginningOffsetsMultipleTopicPartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testEndOffsetsMultipleTopicPartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testResetOffsetsAuthorizationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testListOffsetSendsReadUncommitted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testBeginningOffsetsDuplicateTopicPartition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testEndOffsetsDuplicateTopicPartition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationresetPositionForUndefinedOffsetWithUndefinedResetPolicy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationFencing() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testEndOffsetsEmpty() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsIncludesLeaderEpoch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationAwaitsNodeApiVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean) > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean).hasConsumerRack = false PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationRequestGrouping() PASSED

> Task :connect:runtime:checkstyleMain


> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testBatchedListOffsetsMetadataErrors() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsForTimes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionResetToEarliestOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionOfPausedPartitionsWithoutAValidPosition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testChangeResetWithInFlightReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testEarlierOffsetResetArrivesLate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsForTimesTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsForTimesWithUnknownOffsetV0() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testListOffsetsWithZeroTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testBeginningOffsets() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationSkippedForOldBroker() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationHandlesSeekWithInflightOffsetForLeaderRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > shouldLoseAllOwnedPartitionsBeforeRejoiningAfterResettingGenerationId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testListOffsetSendsReadCommitted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testresetPositionsMetadataRefresh() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetMetadataTooLarge() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithNewGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testWakeupFromAssignmentCallback() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationresetPositionForUndefinedEpochWithDefinedResetPolicy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testStaticLeaderRejoinsGroupAndCanDetectMetadataChangesForOtherMembers() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetAsyncDisconnected() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorDisconnectAfterCoordinatorNotAvailableError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testOffsetValidationTriggerLogTruncationForBadOffsetWithUndefinedResetPolicy() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitDynamicAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testLeaveGroupOnClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testIdempotentResetWithInFlightReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testBeginningOffsetsEmpty() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > OffsetFetcherTest > testUpdateFetchPositionOfPausedPartitionsRequiringOffsetReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > RebalanceCallbackMetricsManagerTest > testRebalanceCallbackMetrics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerConfigTest > testAppendSerializerToConfigWithException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerConfigTest > testAppendSerializerToConfig() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerConfigTest > testInvalidSecurityProtocol() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerConfigTest > testInvalidCompressionType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerConfigTest > testCaseInsensitiveSecurityProtocol() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testManyInFlightAsyncCommitsWithCoordinatorDisconnect() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRejoinGroup() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitManualAssignment() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNormalJoinGroupLeader() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetRequestAsyncWithFencedInstanceIdException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitAfterCoordinatorBackToService() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testJoinGroupInvalidGroupId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testRackAwareConsumerRebalanceWithNewPartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetIllegalGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCoordinatorNotAvailable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCommitOffsetUnknownMemberShouldResetToNoGeneration() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadataUpdateWaitTime() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadataWaitAbortedOnFatalException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testCloseCoordinatorNotKnownNoCommits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testNotCoordinator() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testStressfulSituation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCloseAllocations() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > CooperativeConsumerCoordinatorTest > testAutoCommitAwaitsInterval() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadataEquivalentResponsesBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testMetadataPartialUpdate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ProducerMetadataTest > testTimeToNextUpdateOverwriteBackoff() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionInfoTest > testToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AclPermissionTypeTest > testCode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AclPermissionTypeTest > testName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AclPermissionTypeTest > testExhaustive() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > AclPermissionTypeTest > testIsUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNiceTimeUnits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testBytesFetchedTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testBasicTypes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testBytesFetched() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNullDefault() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testRecordsFetchedTopic() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testParseForValidate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testLatency() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testInvalidDefaultRange() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testPartitionLead() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testPartitionLag() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testGroupInference() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringNestedClass() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringInt() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FetchMetricsManagerTest > testRecordsFetched() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testValidators() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testValidateCannotParse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testValidate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testInternalConfigDoesntShowUpInDocs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testInvalidDefaultString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testClassWithAlias() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testSslPasswords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testDynamicUpdateModeInDocs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testBaseConfigDefDependents() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringClass() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringShort() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testInvalidDefault() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testThrowsExceptionWhenListSizeExceedsLimit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > toRst() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testCanAddInternalConfig() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testMissingRequired() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testListSizeValidatorToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testParsingEmptyDefaultValueForStringFieldShouldSucceed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringPassword() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNiceMemoryUnits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringList() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringLong() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringBoolean() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNullDefaultWithValidator() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testMissingDependentConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringDouble() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > toEnrichedRst() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testDefinedTwice() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testConvertValueToStringString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNestedClass() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNoExceptionIsThrownWhenListSizeEqualsTheLimit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testNoExceptionIsThrownWhenListSizeIsBelowTheLimit() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testBadInputs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ConfigDefTest > testValidateMissingConfigKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testSet() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testClear() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testRemove() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testMoveToEnd() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testUpdateAndMoveToEnd() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > PartitionStatesTest > testPartitionValues() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RecordsSerdeTest > testSerdeRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RecordsSerdeTest > testSerdeEmptyRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > RecordsSerdeTest > testSerdeNullRecords() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyTaggedStruct() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyNullableString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldStoreField() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyStructUnsupportedVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldRoundTripFieldThroughBufferWithNullable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyStruct() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyUint16() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyUint32() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyTaggedIntArray() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldThrowIfCannotWriteNonIgnorableField() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldImplementEqualsAndHashCode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyBytes() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testMyInt16() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testCommonStruct() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldDefaultField() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > shouldRoundTripFieldThroughBuffer() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testTaggedFieldsShouldSupportFlexibleVersionSubset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testTaggedLong() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > SimpleExampleMessageTest > testTaggedUuid() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > IntGaugeSuiteTest > testCreateAndRemoveMetrics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > IntGaugeSuiteTest > testCreateAndClose() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > IntGaugeSuiteTest > testCreateMetrics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DataOutputStreamWritableTest > testWritingSlicedByteBuffer() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > DataOutputStreamWritableTest > testWritingSlicedByteBufferWithNonZeroPosition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > StructTest > testEquals() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ControlRecordTypeTest > testParseUnknownType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > ControlRecordTypeTest > testParseUnknownVersion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testTruncate() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testIterationOverPartialAndTruncation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testRead() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testBytesLengthOfWriteTo() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsRequestUnknownOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailedResponse_NonRetriableAuthError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnInterruption() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFails_AuthenticationException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsRequestEmpty() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testBlockTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testResetPositionsMissingLeader() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testLargeAvailableMemory() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testDownconversionAfterMessageFormatDowngrade() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestNotSupportedErrorReturnsNullOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsRequest_Success() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsWaitingForMetadataUpdate_Timeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testResetOffsetsAuthorizationFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).NOT_LEADER_OR_FOLLOWER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testCloseShouldBeIdempotent(GroupProtocol) > "testCloseShouldBeIdempotent(GroupProtocol).CLASSIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).REPLICA_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).KAFKA_STORAGE_ERROR" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).OFFSET_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).LEADER_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).FENCED_LEADER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).BROKER_NOT_AVAILABLE" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testOffsetIsValidAfterSeek(GroupProtocol) > "testOffsetIsValidAfterSeek(GroupProtocol).CLASSIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).INVALID_REQUEST" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).UNKNOWN_LEADER_EPOCH" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailsWithRetriableError_RetrySucceeds(Errors) > "testRequestFailsWithRetriableError_RetrySucceeds(Errors).UNKNOWN_TOPIC_OR_PARTITION" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testValidatePositionsMissingLeader() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testValidatePositionsSuccess() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsWaitingForMetadataUpdate_RetrySucceeds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testResetPositionsSuccess_NoLeaderEpochInResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestWithUnknownOffsetInResponseReturnsNullOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testListOffsetsRequestMultiplePartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testOffsetIsValidAfterSeek(GroupProtocol) > "testOffsetIsValidAfterSeek(GroupProtocol).CONSUMER" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testValidatePositionsAbortIfNoApiVersionsToCheckAgainstThenRecovers() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testValidatePositionsFailureWithUnrecoverableAuthException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestFailedResponse_NonRetriableErrorTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testRequestPartiallyFailsWithRetriableError_RetrySucceeds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testResetPositionsSendNoRequestIfNoPartitionsNeedingReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > OffsetsRequestManagerTest > testResetPositionsSuccess_LeaderEpochInResponse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean) > testLargeAssignmentAndGroupWithNonEqualSubscription(boolean).hasConsumerRack = true PASSED

Gradle Test Run :clients:test > Gradle Test Executor 142 > CooperativeStickyAssignorTest > testMemberData() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testHardFailures(Exception) > "testHardFailures(Exception).org.apache.kafka.common.errors.TimeoutException: timeout" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testHardFailures(Exception) > "testHardFailures(Exception).org.apache.kafka.common.KafkaException: non-retriable exception" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testHardFailures(Exception) > "testHardFailures(Exception).org.apache.kafka.common.errors.NetworkException: retriable-exception" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testPoll_SuccessfulRequestTopicMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testPoll_SuccessfulRequestAllTopicsMetadata() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testNetworkTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testTopicExceptionAndInflightRequests(Errors, boolean) > "testTopicExceptionAndInflightRequests(Errors, boolean).UNKNOWN_TOPIC_OR_PARTITION, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testGracefulClose(GroupProtocol) > "testGracefulClose(GroupProtocol).CLASSIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testTopicExceptionAndInflightRequests(Errors, boolean) > "testTopicExceptionAndInflightRequests(Errors, boolean).INVALID_TOPIC_EXCEPTION, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testTopicExceptionAndInflightRequests(Errors, boolean) > "testTopicExceptionAndInflightRequests(Errors, boolean).UNKNOWN_SERVER_ERROR, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testTopicExceptionAndInflightRequests(Errors, boolean) > "testTopicExceptionAndInflightRequests(Errors, boolean).NETWORK_EXCEPTION, true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testTopicExceptionAndInflightRequests(Errors, boolean) > "testTopicExceptionAndInflightRequests(Errors, boolean).NONE, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testBeginningOffsetsTimeout(GroupProtocol) > "testBeginningOffsetsTimeout(GroupProtocol).CLASSIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testAppendProtectsFromOverflow() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testAllTopicsExceptionAndInflightRequests(Errors, boolean) > "testAllTopicsExceptionAndInflightRequests(Errors, boolean).UNKNOWN_TOPIC_OR_PARTITION, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testAllTopicsExceptionAndInflightRequests(Errors, boolean) > "testAllTopicsExceptionAndInflightRequests(Errors, boolean).INVALID_TOPIC_EXCEPTION, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testAllTopicsExceptionAndInflightRequests(Errors, boolean) > "testAllTopicsExceptionAndInflightRequests(Errors, boolean).UNKNOWN_SERVER_ERROR, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testTruncateNotCalledIfSizeIsBiggerThanTargetSize() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 155 > KafkaConsumerTest > testMeasureCommitSyncDurationOnFailure(GroupProtocol) > "testMeasureCommitSyncDurationOnFailure(GroupProtocol).CLASSIC" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testAllTopicsExceptionAndInflightRequests(Errors, boolean) > "testAllTopicsExceptionAndInflightRequests(Errors, boolean).NETWORK_EXCEPTION, true" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testOutOfRangeSlice() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testAllTopicsExceptionAndInflightRequests(Errors, boolean) > "testAllTopicsExceptionAndInflightRequests(Errors, boolean).NONE, false" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testFileSize() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicMetadataRequestManagerTest > testExpiringRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testIteratorWithLimits() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testTruncateNotCalledIfSizeIsSameAsTargetSize() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RecordMetadataTest > testConstructionWithBatchIndexOffset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RecordMetadataTest > testConstructionWithChecksum() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > RecordMetadataTest > testConstructionWithMissingBatchIndex() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testFormatConversionWithNoMessages() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > DefaultPartitionerTest > testKeyPartitionIsStable() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testPreallocateTrue() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testOpenOversizeFile() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testTruncateIfSizeIsDifferentToTargetSize() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testFormatConversionWithPartialMessage() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testIterationDoesntChangePosition() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testPreallocateFalse() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testPreallocateClearShutdown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotenceWithMultipleInflightsWhereFirstFailsFatallyAndSequenceOfFutureBatchesIsAdjusted() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCancelInFlightRequestAfterFatalError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotentSplitBatchAndSend() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testRecordErrorPropagatedToApplication() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testUnknownProducerErrorShouldBeRetriedWhenLogStartOffsetIsUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotentUnknownProducerHandlingWhenRetentionLimitReached() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testEpochBumpOnOutOfOrderSequenceForNextBatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testMetadataTopicExpiry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testConversion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testTransactionalRequestsSentOnShutdown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiryOfFirstBatchShouldCauseEpochBumpIfFutureBatchesFail() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testTransactionAbortedExceptionOnAbortWithoutError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testMessageFormatDownConversion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testTransactionalUnknownProducerHandlingWhenRetentionLimitReached() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testWhenProduceResponseReturnsWithALeaderShipChangeErrorButNoNewLeaderInformation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiryOfAllSentBatchesShouldCauseUnresolvedSequences() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testEpochBumpOnOutOfOrderSequenceForNextBatchWhenBatchInFlightFails() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testSliceSizeLimitWithConcurrentWrite() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testSearchForTimestamp() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > FileRecordsTest > testSearch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testDoNotPollWhenNoRequestSent() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testNoDoubleDeallocation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testQuotaMetrics() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testEpochBumpOnOutOfOrderSequenceForNextBatchWhenThereIsNoBatchInFlight() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiryOfUnsentBatchesShouldNotCauseUnresolvedSequences() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testNodeLatencyStats() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testTransactionalSplitBatchAndSend() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testClusterAuthorizationExceptionInProduceRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCorrectHandlingOfDuplicateSequenceError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotentInitProducerIdWithMaxInFlightOne() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testRecordsFlushedImmediatelyOnTransactionCompletion() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testAppendInExpiryCallback() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiredBatchDoesNotSplitOnMessageTooLargeError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testDefaultErrorMessage() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testProducerBatchRetriesWhenPartitionLeaderChanges() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testBatchesDrainedWithOldProducerIdShouldSucceedOnSubsequentRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotenceWithMultipleInflights() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCloseWithProducerIdReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testShouldRaiseOutOfOrderSequenceExceptionToUserIfLogWasNotTruncated() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testSenderMetricsTemplates() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testInitProducerIdRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch(Args) > "testWriteEndTxnMarkerNonControlBatch(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testForceCloseWithProducerIdReset() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testTooLargeBatchesAreSafelyRemoved() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testWhenProduceResponseReturnsWithALeaderShipChangeErrorAndNewLeaderInformation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType) > "convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType).none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCorrectHandlingOfOutOfOrderResponses() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType) > "convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType).gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType) > "convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType).snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCanRetryWithoutIdempotence() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testAwaitPendingRecordsBeforeCommittingTransaction() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testRetryWhenProducerIdChanges() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType) > "convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType).lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testRetries() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType) > "convertV2ToV1UsingMixedCreateAndLogAppendTime(CompressionType).zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testInflightBatchesExpireOnDeliveryTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testResetOfProducerStateShouldAllowQueuedBatchesToDrain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testDownConversionForMismatchedMagicValues() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testSendInOrder() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testClusterAuthorizationExceptionInInitProducerIdRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testUnsupportedVersionInProduceRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnBuildWhenAborted(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testForceShutdownWithIncompleteTransaction() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testReceiveFailedBatchTwiceWithTransactions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testUnresolvedSequencesAreNotFatal() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCorrectHandlingOfOutOfOrderResponsesWhenSecondSucceeds() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testResetNextBatchExpiry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testCustomErrorMessage() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testUnsupportedForMessageFormatInProduceRequest() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testSenderShouldRetryWithBackoffOnRetriableError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIncompleteTransactionAbortOnShutdown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testSimple() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testInvalidTxnStateIsAnAbortableError() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testNodeNotReady() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testSequenceNumberIncrement() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiredBatchesInMultiplePartitions() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testInitProducerIdWithMaxInFlightOne() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingCreateTime(Args) > "buildUsingCreateTime(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testBumpEpochWhenOutOfOrderSequenceReceived() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testIdempotenceWithMultipleInflightsRetriedInOrder() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > SenderTest > testExpiredBatchDoesNotRetry() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicIdPartitionTest > testToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicIdPartitionTest > testHashCode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicIdPartitionTest > testEquals() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldBeUnknownIfResourceTypeUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchPrefixedIfExactMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfDifferentName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchWhereResourceTypeIsAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchWherePatternTypeIsAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchWhereResourceNameIsAny() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchWherePatternTypeIsMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchLiteralIfExactMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfDifferentResourceType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchLiteralWildcardAgainstOtherName() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldBeUnknownIfPatternTypeUnknown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfDifferentPatternType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchLiteralIfNamePrefixed() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchIfDifferentNameCase() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldNotMatchLiteralWildcardTheWayAround() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ResourcePatternFilterTest > shouldMatchLiteralWildcardIfExactMatch() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigResourceTest > shouldReturnUnknownForUnknownCode() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigResourceTest > shouldGetTypeFromId() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ConfigResourceTest > shouldRoundTripEveryType() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testLegacyCompressionRate(Args) > "testLegacyCompressionRate(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNoTraversal() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testAllowedFilePath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNotAllowedFilePath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testEmptyPathWithKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNullPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testEmptyPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNotAllowedDirPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNullPathWithKey() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testNonConfiguredProvider() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch(Args) > "testWriteIdempotentWithInvalidEpoch(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testGetOneKeyAtPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testMultipleAllowedPaths() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testServiceLoaderDiscovery() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testAllowedDirPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > FileConfigProviderTest > testGetAllKeysAtPath() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > shouldThrowOnInvalidTopicNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > testUnifyCollisionChars() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > shouldAcceptValidTopicNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > testTopicHasCollision() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > testTopicHasCollisionChars() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > TopicTest > shouldRecognizeInvalidCharactersInTopicNames() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > MetricsUtilsTest > testCreatingTags() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > MetricsUtilsTest > testCreatingTagsWithOddNumberOfTags() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ChannelBuildersTest > testChannelBuilderConfigs() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 146 > ChannelBuildersTest > testCreateConfigurableKafkaPrincipalBuilder() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch(Args) > "testWriteEndTxnMarkerNonTransactionalBatch(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testRecordTimestampsWithDeleteHorizon(Args) > "testRecordTimestampsWithDeleteHorizon(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > buildUsingLogAppendTime(Args) > "buildUsingLogAppendTime(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalRecordSet(Args) > "testWriteTransactionalRecordSet(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID(Args) > "testWriteTransactionalWithInvalidPID(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testAppendedChecksumConsistency(Args) > "testAppendedChecksumConsistency(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence(Args) > "testWriteIdempotentWithInvalidBaseSequence(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data(CompressionType) > "convertToV1WithMixedV0AndV2Data(CompressionType).none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data(CompressionType) > "convertToV1WithMixedV0AndV2Data(CompressionType).gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data(CompressionType) > "convertToV1WithMixedV0AndV2Data(CompressionType).snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data(CompressionType) > "convertToV1WithMixedV0AndV2Data(CompressionType).lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data(CompressionType) > "convertToV1WithMixedV0AndV2Data(CompressionType).zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteEmptyRecordSet(Args) > "testWriteEmptyRecordSet(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testUnsupportedCompress() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testEstimatedSizeInBytes(Args) > "testEstimatedSizeInBytes(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch(Args) > "testWriteLeaderChangeControlBatch(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnCloseWhenAborted(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=0, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=15, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=15, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=15, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=0, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=1, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=15, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args) > "shouldThrowIllegalStateExceptionOnAppendWhenAborted(Args).magic=2, bufferOffset=15, compressionType=zstd" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCleanupMemoryAvailabilityOnMetricsException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCantAllocateMoreMemoryThanWeHave() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnBlockTimeout() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testSimple() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testDelayedAllocation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testCloseNotifyWaiters() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=0, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > outOfMemoryOnAllocation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > BufferPoolTest > testBufferExhaustedExceptionIsThrown() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerInterceptorsTest > testOnAcknowledgementWithErrorChain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerInterceptorsTest > testOnAcknowledgementChain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > ProducerInterceptorsTest > testOnSendChain() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnFailedFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnSucceededFutureAndFunctionThrows() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnSucceededFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnSucceededFutureAndFunctionThrowsCompletionException() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompletingFutures() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testWhenCompleteOnFailedFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testToString() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnFailedFutureFunctionNotCalled() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompleteFuturesExceptionally() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnCancelledFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=1, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testAllOfFuturesWithFailure() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompletingFuturesExceptionally() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testWhenCompleteOnSucceededFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testWhenCompleteOnFailedFutureAndConsumerThrows() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnFailedFutureTricky2() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompleteFutures() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testAllOfFuturesHandlesZeroFutures() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testWhenCompleteOnSucceededFutureAndConsumerThrows() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testFutureTimeoutWithZeroWait() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompleteFuturesViaCancellation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testWhenCompleteOnCancelledFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testCompletingFuturesViaCancellation() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testThenApplyOnFailedFutureTricky() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=2, bufferOffset=0, compressionType=none" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testAllOfFutures() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaFutureTest > testLeakCompletableFuture() PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, 3…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=0, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, 3…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, 3…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, 3…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-115, 63, -35, 79, -48, -79, -29, -91, 69, 121, 76, -118, -15, -25, 3, -99, 67, -107, 29, -7, -112, -93, 34, 5, -79, 90, 23, -99, -49, 59, -51, 105, 17, -115, -12, 6, -19, 108, -62, -32, -81, 115, 99, -80, 73, 25, 78, -83, 104, -93, 90, -95, -85, 115, 1, 77, 71, -52, 93, -47, 42, 92, 79, -8, -122, -18, -71, -67, 41, 78, -101, 81, -11, 102, -91, -95, 60, -11, -48, 105, -41, -56, -100, 80, -7, 39…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -7…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -7…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -7…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -7…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[113, -111, 93, -121, 127, -95, 4, 63, 99, -6, -72, -125, 82, 15, -101, -49, 44, -71, 1, 52, -13, -106, 35, -46, 115, 39, 41, 114, 4, -16, -22, -106, 61, 31, 25, 123, 69, 107, -13, -113, 85, 34, -79, -82, -110, -45, 13, 44, 24, -60, 97, 91, 54, -72, 99, 35, 17, 23, -87, -108, -57, -23, -126, 90, -5, -127, 95, 9, 40, -120, 64, 72, 36, 108, -23, 40, 109, -73, -111, 64, 79, -73, 14, -22, -84, -70, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testHeaderPrematureEnd(Args) > "testHeaderPrematureEnd(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=1, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 5…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[71, -60, 90, 7, 6, 97, 96, -34, 17, 52, 115, -78, 100, -30, -53, 105, 8, 39, 40, 45, 8, -36, -100, -80, -106, -46, 90, 73, 84, 22, -81, 40, -128, -78, -21, -69, -56, 64, 90, -118, 78, 32, 52, 99, 0, -125, 38, -5, 33, -83, 11, 24, 7, -9, 17, 22, 65, -1, 23, -32, 51, -42, 66, 30, 41, -105, 50, -80, 39, -73, 40, -109, -23, -21, 52, 97, -73, -14, -74, -32, 3, -43, -121, -91, -71, -18, 84, 43, 59, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-30, 79, 36, 43, -115, 41, 96, 78, -93, 63, -112, 41, -83, 76, -107, 87, 40, -122, 96, -33, 104, -57, 126, -81, -127, -33, 38, 89, -50, 92, -115, -20, 87, -2, -60, 7, 27, -33, 63, 44, -86, 62, 28, -27, -128, -114, 100, 104, 43, 52, 53, -25, -33, -44, -120, -14, -6, -22, -124, -124, 11, -76, -18, -121, -117, 117, -73, 56, 67, 75, 49, 0, -10, 96, -117, 126, 3, -102, -126, -126, 14, 113, -5, 14, 9…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=2, bufferOffset=0, compressionType=gzip" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=0, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[120, 77, 31, 80, 7, 32, 22, -33, -61, 32, -62, -33, -23, 32, 80, 124, -30, 30, -71, -91, 54, 36, -94, 75, 101, -54, 76, 100, 126, 113, -90, 118, 118, 64, 23, -88, 125, 51, 16, -58, -110, -117, -58, -19, -29, -10, -102, -89, -19, -47, 39, 64, 20, -122, 37, -18, 38, 54, 9, 56, 98, 119, 23, -65, 49, 5, -126, 82, -115, -46, 66, -47, -90, -54, -108, -65, -113, -13, 115, 46, -40, -84, 16, -87, 1, -10…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testBadBlockSize(Args) > "testBadBlockSize(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

> Task :connect:mirror:checkstyleMain
> Task :connect:json:testClasses

> Task :clients:test

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=1, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[-38, 65, 120, -66, -68, 41, -118, 97, 116, 42, -50, -73, 65, 55, -3, 11, -6, -5, -83, 96, 105, -57, 83, -37, -69, 98, -94, -5, -124, 104, -42, 3, -93, 27, 10, -18, 14, -54, 118, 6, -18, 54, 118, 51, 120, 107, -60, 27, -111, -74, 10, -24, -28, 39, 8, -105, -23, 94, -53, -115, 101, -12, -47, -75, -86, 84, 32, 9, 122, 53, 54, 51, 46, 33, -94, -6, -33, -47, -40, 55, -121, 126, -114, -67, -19, -21, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -119…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -119…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -11…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -119…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -119…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[6, -123, 41, 92, -7, -104, 52, -75, -123, -59, -112, -1, -94, -15, -114, -60, 93, -75, 9, -29, 48, 124, 60, 82, -46, 15, -120, -10, 112, 8, 114, 110, -54, -72, 10, 80, -4, 117, 68, 6, 126, 30, 56, -126, 87, -81, -68, -33, 89, 28, 79, -88, -31, -84, 36, 78, -19, -60, 44, 5, 122, 83, -25, 6, 52, -17, 75, 4, -61, -37, 32, 113, 106, 99, 54, 24, 99, 10, -50, 17, 72, 30, 45, -112, -68, -82, 40, -119,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=2, bufferOffset=0, compressionType=snappy" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 2…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 153 > MemoryRecordsBuilderTest > testBuffersDereferencedOnClose(Args) > "testBuffersDereferencedOnClose(Args).magic=0, bufferOffset=0, compressionType=lz4" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[94, 116, 70, -103, 12, -53, 106, 38, 55, 99, -32, -1, 7, 60, -10, -95, -7, 89, -78, -105, 55, -12, 121, 65, 104, -82, -71, 61, -22, -117, 16, 17, -22, -94, -18, -112, 56, 31, -29, 120, 57, 104, -16, 127, 36, 105, -92, 52, 61, -96, -98, -122, -112, -26, 105, 44, 12, -56, -120, 65, -37, -44, 68, -64, 28, 101, -128, -50, 39, -71, 0, 5, 44, -46, 109, -104, -104, -72, 125, 69, 116, 34, 21, 111, 20, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testSkip(Args) > "testSkip(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[1]" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91,…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=[99, 19, -124, 92, 41, -18, -51, -25, -61, -57, -128, 49, -97, -61, 82, 75, -28, 8, 45, -22, 66, -128, 45, -8, 74, -108, 68, 64, 31, 105, -63, 45, 27, -70, -27, -76, 16, -11, -59, -5, -48, -50, -44, -100, -40, -105, -36, 110, 20, -98, -110, 52, 23, 21, 60, 60, -71, 68, 106, 14, -19, 46, 95, -69, -8, 77, 95, 78, 59, 93, -120, 98, 80, -16, 23, 6, -24, -43, -36, 35, -74, -32, -52, 59, -105, 91, -10…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…" PASSED

Gradle Test Run :clients:test > Gradle Test Executor 154 > KafkaLZ4Test > testArrayBackedBuffer(Args) > "testArrayBackedBuffer(Args).useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…" 