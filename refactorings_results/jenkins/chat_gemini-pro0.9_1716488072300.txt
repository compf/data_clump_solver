Based on the provided code snippets, there is a data clump that occurs with the parameters `Object feature`, `Object context`, `String correlationId`, and `User user`. These parameters are being used together in several methods across the `ScriptListener` interface and classes that implement this interface or utilize its methods, such as `DefaultScriptListener`, `GroovyCommand`, `GroovyshCommand`, `RemotingDiagnostics`, and `GroovyHookScript`. 

To refactor this data clump, I'll create a new class called `ScriptEventContext` that encapsulates these fields. Then I will update the methods to take a `ScriptEventContext` instance instead of the individual parameters.

Here is the content of the extracted class:

```java
import hudson.model.User;

public class ScriptEventContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventContext(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

Now, the methods in `ScriptListener` (and other related methods) would be refactored to use the `ScriptEventContext`:

For `ScriptListener`:
```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext context) {
    // Implementation goes here
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext context) {
    // Implementation goes here
}

// Update the method signatures for fireScriptExecution/fireScriptOutput and their usages to accept ScriptEventContext
```

For `DefaultScriptListener`:
```java
@Override
public void onScriptExecution(String script, Binding binding, @NonNull ScriptEventContext context) {
    // Updated implementation using ScriptEventContext
}

@Override
public void onScriptOutput(String output, @NonNull ScriptEventContext context) {
    // Updated implementation using ScriptEventContext
}
```

Do note that, for the other classes such as `GroovyCommand`, `GroovyshCommand`, `RemotingDiagnostics`, and `GroovyHookScript`, their calls to methods like `fireScriptExecution` and `fireScriptOutput` need to be refactored to create and pass `ScriptEventContext` instances instead of the individual parameters.

All occurrences where the original parameters (feature, context, correlationId, user) were passed together to methods will now be replaced with a `ScriptEventContext` object containing these values. This change must be applied consistently across all instances where they appear as a clump.