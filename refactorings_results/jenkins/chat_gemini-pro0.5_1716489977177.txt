Based on the provided Java files, we have multiple instances where we have common fields or parameters among methods and classes. We identify a data clump in the parameters `Object feature`, `Object context`, `String correlationId`, and `User user`, which are repeatedly used in `ScriptListener` methods and related calls (`fireScriptExecution`, `fireScriptOutput`, etc.).

Let's extract these parameters into a separate class to handle this data clump.

We will introduce a new class named `ScriptEventDetails`:

```java
import hudson.model.User;

public class ScriptEventDetails {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventDetails(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

Now, let's refactor the `ScriptListener` interface and related usages to accept an instance of `ScriptEventDetails` instead of individual parameters:

```java
import javax.annotation.CheckForNull;
import javax.annotation.NonNull;

public interface ScriptListener {
    default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
    }

    default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
    }

    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, details));
    }

    static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, details));
    }
    
    // ListenerWriter, OutputStream classes, and other usages need to be updated similarly.
}
```

Ensure that all the calls to `onScriptExecution`, `onScriptOutput`, `fireScriptExecution`, and `fireScriptOutput` are updated to use the new `ScriptEventDetails` class. For example, refactor calls like:

```java
ScriptListener.fireScriptExecution(script, binding, GroovyCommand.class, null, scriptListenerCorrelationId, User.current());
```

to:

```java
ScriptEventDetails details = new ScriptEventDetails(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());
ScriptListener.fireScriptExecution(script, binding, details);
```

Perform this refactoring throughout all the provided Java files where the `feature`, `context`, `correlationId`, and `user` parameters are used. 

This refactoring will simplify method signatures, improve code readability, and make it easier to extend or add new details in the future by modifying just the `ScriptEventDetails` class.