It appears that the `ScriptListener` interface methods `onScriptExecution` and `onScriptOutput`, and related static methods `fireScriptExecution` and `fireScriptOutput`, along with some classes that use them, have a data clump involving the following variables: `Object feature`, `Object context`, `String correlationId`, and `User user`.

Here's how to refactor this data clump:

### Extracted Class: ScriptEventDetails
```java
public class ScriptEventDetails {
    @NonNull
    private final Object feature;
    @CheckForNull
    private final Object context;
    @NonNull
    private final String correlationId;
    @CheckForNull
    private final User user;

    public ScriptEventDetails(@NonNull Object feature, @CheckForNull Object context,
                              @NonNull String correlationId, @CheckForNull User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    @NonNull
    public Object getFeature() {
        return feature;
    }

    @CheckForNull
    public Object getContext() {
        return context;
    }

    @NonNull
    public String getCorrelationId() {
        return correlationId;
    }

    @CheckForNull
    public User getUser() {
        return user;
    }
}
```

### Refactored Method Signatures in ScriptListener Interface:
```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, ScriptEventDetails details) { }
default void onScriptOutput(@CheckForNull String output, ScriptEventDetails details) { }
```

### Refactored Static Methods:
```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, ScriptEventDetails details) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, details));
}
static void fireScriptOutput(@CheckForNull String output, ScriptEventDetails details) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, details));
}
```

### Refactored Usage in DefaultScriptListener:
```java
@Override
public void onScriptExecution(String script, Binding binding, ScriptEventDetails details) {
    String userFragment = details.getUser() == null ? " (no user)" : " by user: '" + details.getUser() + "'";
    LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,
                () -> "Execution of script: '" + script + "' with binding: '" + stringifyBinding(binding) + "' in feature: '" + details.getFeature() + "' and context: '" + details.getContext() + "' with correlation: '" + details.getCorrelationId() + "'" + userFragment);
}

@Override
public void onScriptOutput(String output, ScriptEventDetails details) {
    String userFragment = details.getUser() == null ? " (no user)" : " for user: '" + details.getUser() + "'";
    LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,
                () -> "Script output: '" + output + "' in feature: '" + details.getFeature() + "' and context: '" + details.getContext() + "' with correlation: '" + details.getCorrelationId() + "'" + userFragment);
}
```

### Refactored Usages in Other Classes (just a few examples):
```java
// In GroovyCommand.java:
ScriptEventDetails details = new ScriptEventDetails(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());
ScriptListener.fireScriptExecution(script, binding, details);

// In RemotingDiagnostics.java:
ScriptEventDetails details = new ScriptEventDetails(RemotingDiagnostics.class, context, correlationId, User.current());
ScriptListener.fireScriptExecution(script, new Binding(), details);
```

The actual refactoring would involve updating all instances where the methods `onScriptExecution`, `onScriptOutput`, `fireScriptExecution`, and `fireScriptOutput` are called, replacing the separate parameters with instances of the new `ScriptEventDetails` class.