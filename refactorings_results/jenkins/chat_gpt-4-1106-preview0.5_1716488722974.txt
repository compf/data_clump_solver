It appears that the parameters `feature`, `context`, `correlationId`, and `user` are common in the methods `onScriptExecution` and `onScriptOutput` across multiple classes and constructors in the files provided. It is also evident that these same parameters are consistently being passed to the static methods `fireScriptExecution` and `fireScriptOutput`. These represent a data clump.

Here is the refactored code snippet that replaces the method parameters or fields of these data clump variables by an instance of the extracted class `ScriptContext`, and the content of the extracted class.

### Extracted `ScriptContext` class:

```java
public class ScriptContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptContext(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

### Updated methods and constructors using `ScriptContext`:

All methods and constructors that previously had `feature`, `context`, `correlationId`, `user` as parameters will be updated to accept a single `ScriptContext` parameter, and the code inside the methods will be adjusted accordingly to use the getter methods of `ScriptContext`.

For example, the `onScriptExecution` method in `ScriptListener.java` would be updated as follows:

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptContext scriptContext) {
    // Implementation code using scriptContext.getFeature(), scriptContext.getContext(), etc.
}
```

And any method call, like `fireScriptExecution` or `fireScriptOutput`, would pass an instance of `ScriptContext` instead of individual parameters, like so:

```java
ScriptContext scriptContext = new ScriptContext(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());
ScriptListener.fireScriptExecution(script, binding, scriptContext);
```

Please note that this refactoring would need to be performed for every occurrence of these parameters, not only in the provided methods and constructors but also throughout the entire codebase where this data clump appears to ensure consistency and maintainability of the code.