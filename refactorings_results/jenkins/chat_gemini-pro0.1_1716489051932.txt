The data clump identified in the provided Java files consists of the parameters `Object feature`, `Object context`, `String correlationId`, and `User user`, which are common across multiple methods. To refactor code according to this data clump, we'll create a new class called `ScriptEventDetails` and replace the parameters in the methods with an instance of this class.

### New Extracted Class: `ScriptEventDetails.java`
```java
public class ScriptEventDetails {
    @NonNull
    private final Object feature;
    @CheckForNull
    private final Object context;
    @NonNull
    private final String correlationId;
    @CheckForNull
    private final User user;

    public ScriptEventDetails(@NonNull Object feature, @CheckForNull Object context, 
                              @NonNull String correlationId, @CheckForNull User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    // Getters for each field
    @NonNull
    public Object getFeature() {
        return feature;
    }

    @CheckForNull
    public Object getContext() {
        return context;
    }

    @NonNull
    public String getCorrelationId() {
        return correlationId;
    }

    @CheckForNull
    public User getUser() {
        return user;
    }
}
```
### Updated Method Signatures and Usages
1. In `ScriptListener.java`, update the `onScriptExecution` and `onScriptOutput` methods to use `ScriptEventDetails`:
```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, 
                               @NonNull ScriptEventDetails details) {
    // Method implementation...
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
    // Method implementation...
}

// Update fireScriptExecution and fireScriptOutput methods as well
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, 
                               @NonNull ScriptEventDetails details) {
    // Implementation using details...
}

static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
    // Implementation using details...
}
```
2. Similarly, update `ListenerWriter` and other related classes where these methods are called by passing an instance of `ScriptEventDetails` instead of individual parameters.

3. Update `DefaultScriptListener.java` to match the new method signatures.

4. Update the rest of the files like `GroovyCommand.java`, `GroovyshCommand.java`, `RemotingDiagnostics.java`, and `GroovyHookScript.java` to create and pass `ScriptEventDetails` objects where needed.

For each method call that previously used the individual parameters, create a new `ScriptEventDetails` instance with the respective values and pass that to the method. Here's an example based on `GroovyCommand.java`:
```java
// Before refactoring
ScriptListener.fireScriptExecution(script, binding, GroovyCommand.class, null, 
                                   scriptListenerCorrelationId, User.current());

// After refactoring
ScriptEventDetails details = new ScriptEventDetails(GroovyCommand.class, null, 
                                                    scriptListenerCorrelationId, User.current());
ScriptListener.fireScriptExecution(script, binding, details);
```
Make similar changes to all usages in the codebase to complete the refactoring process.