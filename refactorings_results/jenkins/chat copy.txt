## JSON

{
  "refactorings": {
    "tool-testsuite/test/org/antlr/v4/test/tool/ToolTestUtils.java": [
      {
        "lineRange": "22-27",
        "oldContent": "public static ExecutedState execLexer(String grammarFileName, String grammarStr, String lexerName, String input) {\n\t\treturn execLexer(grammarFileName, grammarStr, lexerName, input, null, false);\n\t}",
        "newContent": "public static ExecutedState execLexer(String grammarFileName, String grammarStr, String lexerName, String input) {\n\t\tRunOptions options = new RunOptions(grammarFileName, grammarStr, lexerName, null, false, false, null, input, false, false, Stage.Execute);\n\t\treturn createAndRunJava(options);\n\t}"
      },
      {
        "lineRange": "29-34",
        "oldContent": "public static ExecutedState execParser(String grammarFileName, String grammarStr,\n\t\t\t   String parserName, String lexerName, String startRuleName,\n\t\t\t   String input, boolean showDiagnosticErrors\n\t\t\t   ) {\n\t\treturn execParser(grammarFileName, grammarStr, parserName, lexerName, startRuleName,\n\t\t\t   input, showDiagnosticErrors, null);\n\t}",
        "newContent": "public static ExecutedState execParser(String grammarFileName, String grammarStr,\n\t\t\t   String parserName, String lexerName, String startRuleName,\n\t\t\t   String input, boolean showDiagnosticErrors\n\t\t\t   ) {\n\t\tRunOptions options = new RunOptions(grammarFileName, grammarStr, parserName, lexerName, false, false, startRuleName, input, false, showDiagnosticErrors, Stage.Execute);\n\t\treturn createAndRunJava(options);\n\t}"
      },
      {
        "lineRange": "36-41",
        "oldContent": "private static ExecutedState execRecognizer(String grammarFileName, String grammarStr,\n\t\t\t String parserName, String lexerName, String startRuleName,\n\t\t\t String input, boolean showDiagnosticErrors,\n\t\t\t Path workingDir, boolean saveTestDir) {\n\t\tRunOptions runOptions = createOptionsForJavaToolTests(grammarFileName, grammarStr, parserName, lexerName,\n\t\t\t\tfalse, true, startRuleName, input,\n\t\t\t\tfalse, showDiagnosticErrors, Stage.Execute);\n\t\ttry (JavaRunner runner = new JavaRunner(workingDir, saveTestDir)) {\n\t\t\tState result = runner.run(runOptions);\n\t\t\tif (!(result instanceof ExecutedState)) {\n\t\t\t\tfail(result.getErrorMessage());\n\t\t\t}\n\t\t\treturn  (ExecutedState) result;\n\t\t}",
        "newContent": "private static ExecutedState execRecognizer(String grammarFileName, String grammarStr,\n\t\t\t String parserName, String lexerName, String startRuleName,\n\t\t\t String input, boolean showDiagnosticErrors,\n\t\t\t Path workingDir, boolean saveTestDir) {\n\t\tRunOptions options = createOptionsForJavaToolTests(grammarFileName, grammarStr, parserName, lexerName,\n\t\t\t\tfalse, true, startRuleName, input,\n\t\t\t\tfalse, showDiagnosticErrors, Stage.Execute);\n\t\treturn createAndRunJava(options);\n\t}"
      },
      {
        "lineRange": "43-58",
        "oldContent": "public static RunOptions createOptionsForJavaToolTests(\n\t\t\tString grammarFileName, String grammarStr, String parserName, String lexerName,\n\t\t\tboolean useListener, boolean useVisitor, String startRuleName,\n\t\t\tString input, boolean profile, boolean showDiagnosticErrors,\n\t\t\tStage endStage\n\t\t) {\n\t\treturn new RunOptions(grammarFileName, grammarStr, parserName, lexerName, useListener, useVisitor, startRuleName,\n\t\t\tinput, profile, showDiagnosticErrors, false, false, endStage, \"Java\",\n\t\t\tJavaRunner.runtimeTestParserName, PredictionMode.LL, true);\n\t}",
        "newContent": "public static RunOptions createOptionsForJavaToolTests(\n\t\t\tString grammarFileName, String grammarStr, String parserName, String lexerName,\n\t\t\tboolean useListener, boolean useVisitor, String startRuleName,\n\t\t\tString input, boolean profile, boolean showDiagnosticErrors,\n\t\t\tStage endStage\n\t\t) {\n\t\tRunOptions options = new RunOptions(grammarFileName, grammarStr, parserName, lexerName, useListener, useVisitor, startRuleName, input, profile, showDiagnosticErrors, false, false, endStage);\n\t\toptions.javaRunnerClassName = \"Java\";\n\t\toptions.javaRunnerStartRuleName = JavaRunner.runtimeTestParserName;\n\t\toptions.javaRunnerPredictionMode = PredictionMode.LL;\n\t\toptions.javaRunnerArgs = \"true\";\n\t\treturn options;\n\t}"
      }
    ]
  },
  "extractedClasses": {}
}