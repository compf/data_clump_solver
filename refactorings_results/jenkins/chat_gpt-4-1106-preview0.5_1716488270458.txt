The code snippets provided show that the `feature`, `context`, and `correlationId` parameters are common across different methods and classes, which would classify as a data clump according to the provided definition.

I'll introduce a new class called `ScriptEventContext` to encapsulate these fields and update the method signatures and usages accordingly.

```java
public class ScriptEventContext {
    private final Object feature;
    private final Object context; // Can be null
    private final String correlationId;

    public ScriptEventContext(@NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
    }

    @NonNull
    public Object getFeature() {
        return feature;
    }

    @CheckForNull
    public Object getContext() {
        return context;
    }

    @NonNull
    public String getCorrelationId() {
        return correlationId;
    }
}
```

Now, I will refactor the method signatures and usages to replace the `feature`, `context`, and `correlationId` parameters with an instance of the `ScriptEventContext` class.

For example, the `onScriptExecution` method in `ScriptListener` would change from:

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {}
```

to:

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext eventContext, @CheckForNull User user) {}
```

And its corresponding usage in `fireScriptExecution` would change from:

```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, feature, context, correlationId, user));
}
```

to:

```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext eventContext, @CheckForNull User user) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, eventContext, user));
}
```

All other methods and usages with the `feature`, `context`, and `correlationId` parameters should be updated similarly.

The same refactoring should be done for `onScriptOutput`, `fireScriptOutput`, `ListenerWriter` constructor, and other relevant places in the codebase that use these parameters.

Make sure to update all places where instances of `ScriptEventContext` need to be created based on the previously used parameters. When creating instances, it will typically look like this:

```java
ScriptEventContext eventContext = new ScriptEventContext(feature, context, correlationId);
```

Followed by a call to the refactored method that now takes `ScriptEventContext` as an argument.