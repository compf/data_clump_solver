After reviewing the provided Java files, it appears that there is a data clump involving the parameters `Object feature`, `Object context`, `String correlationId`, and `User user` across several methods in the `ScriptListener` class as well as its usage in other classes.

To refactor this data clump, we can introduce a new class named `ScriptEventDetails` that encapsulates these common fields. Here's how to refactor the classes:

**Newly Extracted Class:**

```java
public class ScriptEventDetails {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;
    
    public ScriptEventDetails(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }
    
    // Getters for each field
    public Object getFeature() {
        return feature;
    }
    
    public Object getContext() {
        return context;
    }
    
    public String getCorrelationId() {
        return correlationId;
    }
    
    public User getUser() {
        return user;
    }
}
```

**Refactored `ScriptListener` interface:**

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
}
default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
}
```

**Refactored static methods in `ScriptListener`**

- `fireScriptExecution(...)`
- `fireScriptOutput(...)`

```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, details));
}

static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, details));
}
```

**Refactored `ListenerWriter` constructor:**

```java
public ListenerWriter(Writer writer, ScriptEventDetails details) {
    this.writer = writer;
    this.details = details; // Replace individual fields with the ScriptEventDetails instance
}
```

**Refactored `GroovyCommand`:**

```java
ScriptListener.fireScriptExecution(script, binding, new ScriptEventDetails(GroovyCommand.class, null, scriptListenerCorrelationId, User.current()));
```

**Refactored `GroovyshCommand`:**

```java
ScriptListener.fireScriptExecution(null, null, new ScriptEventDetails(GroovyshCommand.class, null, scriptListenerCorrelationId, User.current()));
```

**Refactored `RemotingDiagnostics`:**

```java
ScriptEventDetails details = new ScriptEventDetails(RemotingDiagnostics.class, context, correlationId, User.current());
```

**Refactored `GroovyHookScript`:**

```java
ScriptListener.fireScriptExecution(s.getScriptText(), bindings, new ScriptEventDetails(this.getClass(), s.getFile(), this.getClass().getName() + ":" + hook, User.current()));
```

All refactored methods will now use the `ScriptEventDetails` object instead of individual `feature`, `context`, `correlationId`, and `user` parameters. This will improve code readability and maintainability by reducing the number of parameters and making the relationship between them explicit.