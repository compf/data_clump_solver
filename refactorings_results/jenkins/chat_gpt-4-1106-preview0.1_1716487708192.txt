We have multiple instances of data clumps in the methods `onScriptExecution`, `onScriptOutput`, `fireScriptExecution`, `fireScriptOutput`, and other related methods in different classes. They all share at least the following parameters: `Object feature`, `Object context`, and `String correlationId`. Additionally, the `User user` field is also common, although it is not always present.

To refactor this, we can create an extracted class named `ScriptEventContext` that encapsulates these fields.

**The new `ScriptEventContext` class:**
```java
public class ScriptEventContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventContext(@NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    @NonNull
    public Object getFeature() {
        return feature;
    }

    @CheckForNull
    public Object getContext() {
        return context;
    }

    @NonNull
    public String getCorrelationId() {
        return correlationId;
    }

    @CheckForNull
    public User getUser() {
        return user;
    }
}
```

**Refactored `onScriptExecution` method:**
```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext eventContext) {
}
```

**Refactored `onScriptOutput` method:**
```java
default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext eventContext) {
}
```

**Refactored `fireScriptExecution` method:**
```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext eventContext) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, eventContext));
}
```

**Refactored `fireScriptOutput` method:**
```java
static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext eventContext) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, eventContext));
}
```

The `ListenerWriter`, `OutputStream` wrapper, and all the other places in the code where the methods are called should now use `ScriptEventContext` instead of the individual fields.

For example, the constructor in `ListenerWriter` would be refactored to:
```java
public ListenerWriter(Writer writer, @NonNull ScriptEventContext eventContext) {
    this.writer = writer;
    this.eventContext = eventContext;
}
```
And the `write` method would use `eventContext` to call `fireScriptOutput`.

Remember to update all usages within the mentioned classes and any other class that interacts with these methods, replacing the set of parameters with the new `ScriptEventContext` class.