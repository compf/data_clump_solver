It seems that there is a data clump in the `ScriptListener` and related classes with the fields `feature`, `context`, `correlationId`, and `user`. These fields are being passed around through several methods. To refactor this, we can create a new class named `ScriptEventContext` that encapsulates these fields. Below is the content of the extracted class, followed by the refactored code snippets:

### Extracted Class: ScriptEventContext.java
```java
public class ScriptEventContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventContext(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

### Refactored Code Snippets:

#### ScriptListener.java
```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext context) {
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext context) {
}

static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext context) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, context));
}

static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext context) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, context));
}

public ListenerWriter(Writer writer, ScriptEventContext context) {
    this.writer = writer;
    this.context = context;
}

public void write(@NonNull char[] cbuf, int off, int len) throws IOException {
    ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), context);
    writer.write(cbuf, off, len);
}

public void write(int b) throws IOException {
    ScriptListener.fireScriptOutput(new String(new byte[] { (byte) b }, charset), context);
    os.write(b);
}

public void write(@NonNull byte[] b, int off, int len) throws IOException {
    final String writtenString = new String(b, charset).substring(off, len - off);
    ScriptListener.fireScriptOutput(writtenString, context);
    os.write(b, off, len);
}
```

#### DefaultScriptListener.java
```java
@Override
public void onScriptExecution(String script, Binding binding, @NonNull ScriptEventContext context) {
    String userFragment = context.getUser() == null ? " (no user)" : " by user: '" + context.getUser() + "'";
    LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,
            () -> "Execution of script: '" + script + "' with binding: '" + stringifyBinding(binding) + "' in feature: '" +
                    context.getFeature() + "' and context: '" + context.getContext() + "' with correlation: '" +
                    context.getCorrelationId() + "'" + userFragment);
}

@Override
public void onScriptOutput(String output, @NonNull ScriptEventContext context) {
    String userFragment = context.getUser() == null ? " (no user)" : " for user: '" + context.getUser() + "'";
    LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,
            () -> "Script output: '" + output + "' in feature: '" + context.getFeature() + "' and context: '" +
                    context.getContext() + "' with correlation: '" + context.getCorrelationId() + "'" + userFragment);
}
```

#### GroovyCommand.java, GroovyshCommand.java, RemotingDiagnostics.java, GroovyHookScript.java
In each of these files, replace the parameters `feature`, `context`, `correlationId`, `user` in the method calls to `fireScriptExecution` and `fireScriptOutput` with a single instance of `ScriptEventContext`.

For example, in `GroovyCommand.java`:
```java
ScriptListener.fireScriptExecution(script, binding, new ScriptEventContext(GroovyCommand.class, null, scriptListenerCorrelationId, User.current()));
```

In each occurrence, create a new `ScriptEventContext` object with the respective parameters and use it in the method call.

Make sure to replace each applicable method call in all mentioned Java files with the new `ScriptEventContext` parameter pattern.