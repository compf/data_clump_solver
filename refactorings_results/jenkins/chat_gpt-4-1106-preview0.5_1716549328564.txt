{
    "refactorings": {
        "core/src/main/java/jenkins/util/ScriptListener.java": [
            {
                "fromLine": 66,
                "toLine": 79,
                "oldContent": "    ...",
                "newContent": "    default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptContext context) {\n    }\n"
            },
            {
                "fromLine": 82,
                "toLine": 133,
                "oldContent": "    ...",
                "newContent": "    default void onScriptOutput(@CheckForNull String output, @NonNull ScriptContext context) {\n    }\n\n    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptContext context) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, context));\n    }\n\n    static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptContext context) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, context));\n    }\n"
            },
            {
                "fromLine": 136,
                "toLine": 156,
                "oldContent": "    ...",
                "newContent": "        private final Writer writer;\n        private final ScriptContext context;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")\n        public ListenerWriter(Writer writer, ScriptContext context) {\n            this.writer = writer;\n            this.context = context;\n        }\n\n        @Override\n        public void write(@NonNull char[] cbuf, int off, int len) throws IOException {\n            ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), context);\n            writer.write(cbuf, off, len);\n        }\n"
            },
            {
                "fromLine": 177,
                "toLine": 184,
                "oldContent": "    ...",
                "newContent": "        private final OutputStream os;\n        private final Charset charset;\n        private final ScriptContext context;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")"
            },
            {
                "fromLine": 186,
                "toLine": 193,
                "oldContent": "    ...",
                "newContent": "            this.os = os;\n            this.charset = charset;\n            this.context = context;\n        }\n"
            },
            {
                "fromLine": 195,
                "toLine": 199,
                "oldContent": "    ...",
                "newContent": "        public void write(int b) throws IOException {\n            ScriptListener.fireScriptOutput(new String(new byte[] { (byte) b }, charset), context);\n            os.write(b);\n        }"
            },
            {
                "fromLine": 202,
                "toLine": 206,
                "oldContent": "    ...",
                "newContent": "        public void write(@NonNull byte[] b, int off, int len) throws IOException {\n            final String writtenString = new String(b, charset).substring(off, len - off);\n            ScriptListener.fireScriptOutput(writtenString, context);\n            os.write(b, off, len);\n        }"
            }
        ],
        "core/src/main/java/jenkins/util/DefaultScriptListener.java": [
            {
                "fromLine": 45,
                "toLine": 59,
                "oldContent": "    ...",
                "newContent": "    @Override\n    public void onScriptExecution(String script, Binding binding, @NonNull ScriptContext context) {\n        String userFragment = context.getUser() == null ? \" (no user)\" : \" by user: '\" + context.getUser() + \"'\";\n        LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Execution of script: '\" + script + \"' with binding: '\" + stringifyBinding(binding) + \"' in feature: '\" + context.getFeature() + \"' and context: '\" + context.getContext() + \"' with correlation: '\" + context.getCorrelationId() + \"'\" + userFragment);\n    }\n\n    @Override\n    public void onScriptOutput(String output, @NonNull ScriptContext context) {\n        String userFragment = context.getUser() == null ? \" (no user)\" : \" for user: '\" + context.getUser() + \"'\";\n        LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Script output: '\" + output + \"' in feature: '\" + context.getFeature() + \"' and context: '\" + context.getContext() + \"' with correlation: '\" + context.getCorrelationId() + \"'\" + userFragment);\n    }\n"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyCommand.java": [
            {
                "fromLine": 75,
                "toLine": 79,
                "oldContent": "        ScriptListener.fireScriptExecution(script, binding, GroovyCommand.class, null, scriptListenerCorrelationId, User.current());",
                "newContent": "        ScriptContext context = new ScriptContext(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(script, binding, context);"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyshCommand.java": [
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "        ScriptListener.fireScriptExecution(null, null, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());",
                "newContent": "        ScriptContext context = new ScriptContext(GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(null, null, context);"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "            ScriptListener.fireScriptExecution(line, binding, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());",
                "newContent": "            ScriptContext context = new ScriptContext(GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n            ScriptListener.fireScriptExecution(line, binding, context);"
            }
        ],
        "core/src/main/java/hudson/util/RemotingDiagnostics.java": [
            {
                "fromLine": 121,
                "toLine": 127,
                "oldContent": "        ScriptListener.fireScriptExecution(script, new Binding(), RemotingDiagnostics.class, context, correlationId, User.current());\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(output, RemotingDiagnostics.class, context, correlationId, User.current());",
                "newContent": "        ScriptContext scriptContext = new ScriptContext(RemotingDiagnostics.class, context, correlationId, User.current());\n        ScriptListener.fireScriptExecution(script, new Binding(), scriptContext);\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(output, scriptContext);"
            }
        ],
        "core/src/main/java/jenkins/util/groovy/GroovyHookScript.java": [
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());",
                "newContent": "            ScriptContext context = new ScriptContext(this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());\n            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, context);"
            }
        ]
    },
    "extractedClasses": {
        "core/src/main/java/jenkins/util/ScriptContext.java": "package jenkins.util;\n\nimport hudson.model.User;\nimport javax.annotation.CheckForNull;\nimport javax.annotation.Nonnull;\n\npublic class ScriptContext {\n\n    private final Object feature;\n    private final Object context;\n    private final String correlationId;\n    private final User user;\n\n    public ScriptContext(@Nonnull Object feature, @CheckForNull Object context, @Nonnull String correlationId, @CheckForNull User user) {\n        this.feature = feature;\n        this.context = context;\n        this.correlationId = correlationId;\n        this.user = user;\n    }\n\n    public Object getFeature() {\n        return feature;\n    }\n\n    public Object getContext() {\n        return context;\n    }\n\n    public String getCorrelationId() {\n        return correlationId;\n    }\n\n    public User getUser() {\n        return user;\n    }\n}\n"
    }
}