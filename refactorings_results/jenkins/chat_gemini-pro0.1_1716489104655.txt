To refactor the data clumps in the provided Java files, first, I'll identify common parameters across the methods. From the provided snippets, it is apparent that `feature`, `context`, `correlationId`, and `user` are parameters that repeat across methods. These parameters can be grouped into a class, let's call it `ScriptEventDetails`.

Here's the content of the extracted `ScriptEventDetails` class:

```java
import hudson.model.User;

public class ScriptEventDetails {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventDetails(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

Next, I'll refactor the methods in the `ScriptListener` interface using the `ScriptEventDetails` class:

```java
public interface ScriptListener {
    // ...

    default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
    }

    default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
    }

    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details) {
        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, details));
    }

    static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details) {
        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, details));
    }
}
```

For the `ListenerWriter` and similar classes, I'll refactor their constructors and fields to use `ScriptEventDetails`:

```java
public class ListenerWriter extends Writer {
    private final Writer writer;
    private final ScriptEventDetails details;

    public ListenerWriter(Writer writer, ScriptEventDetails details) {
        this.writer = writer;
        this.details = details;
    }

    @Override
    public void write(@NonNull char[] cbuf, int off, int len) throws IOException {
        ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), details);
        writer.write(cbuf, off, len);
    }
}
```

And similarly for the `OutputStream` class:

```java
public class OutputStream extends OutputStream {
    private final OutputStream os;
    private final Charset charset;
    private final ScriptEventDetails details;

    public OutputStream(OutputStream os, Charset charset, ScriptEventDetails details) {
        this.os = os;
        this.charset = charset;
        this.details = details;
    }

    // Rest of the OutputStream methods...
}
```

I'd also refactor the `DefaultScriptListener` class and all places where `fireScriptExecution` and `fireScriptOutput` are called:

```java
// In DefaultScriptListener.java
@Override
public void onScriptExecution(String script, Binding binding, @NonNull ScriptEventDetails details) {
    // ...
}

@Override
public void onScriptOutput(String output, @NonNull ScriptEventDetails details) {
    // ...
}

// In usage within GroovyCommand.java and other classes
ScriptEventDetails details = new ScriptEventDetails(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());
ScriptListener.fireScriptExecution(script, binding, details);
// ...
```

By creating the `ScriptEventDetails` class and refactoring all methods and constructors to use this class instead of individual parameters, we successfully eliminate the data clumps and make the code cleaner and more maintainable.