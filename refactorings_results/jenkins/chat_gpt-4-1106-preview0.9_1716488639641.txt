It appears that the data clump we can identify is composed of the following fields/parameters: `Object feature`, `Object context`, `String correlationId`, and `User user`. These are shared across multiple methods and classes (`onScriptExecution`, `onScriptOutput`, `fireScriptExecution`, `fireScriptOutput`, `ListenerWriter`, `OutputStreamDecorator`, `DefaultScriptListener`, etc.).

We need to create a new class containing these fields and update the method signatures and field declarations to use instances of this new class.

Let's create a new class called `ScriptEventContext`:

```java
public class ScriptEventContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventContext(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

Now, we'll refactor the methods and constructors in `ScriptListener.java`, `DefaultScriptListener.java`, `ListenerWriter.java`, `OutputStreamDecorator.java`, and any other occurrences to take `ScriptEventContext` as a parameter instead of the individual fields.

For example, in `ScriptListener.java`, the methods would be refactored as follows:

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventContext context) {
    // implementation...
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext context) {
    // implementation...
}

// and so on for other methods where the data clump occurs...
```

Each call to these methods would require creating an instance of `ScriptEventContext` and passing it accordingly, like so:

```java
ScriptEventContext context = new ScriptEventContext(feature, scriptContext, correlationId, user);
ScriptListener.fireScriptExecution(script, binding, context);
ScriptListener.fireScriptOutput(output, context);
```

Also, ensure that all the locations where `feature`, `context`, `correlationId`, and `user` were used are now replaced with a single `ScriptEventContext` object and its respective getters, to maintain the same functionality with the refactored code.