{
    "refactorings": {
        "core/src/main/java/jenkins/util/ScriptListener.java": [
            {
                "fromLine": 66,
                "toLine": 79,
                "oldContent": "default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n    }\n",
                "newContent": "default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, ScriptContext context) {\n    }\n"
            },
            {
                "fromLine": 82,
                "toLine": 91,
                "oldContent": "default void onScriptOutput(@CheckForNull String output, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n    }\n\n    /**\n     * Fires the {@link #onScriptExecution(String, Binding, Object, Object, String, hudson.model.User)} event.\n     *\n     * @param script The script to be executed or {@code null} if no script is available yet (e.g. a shell has just been opened).\n     * @param binding The script binding, or {@code null} if unavailable/inapplicable.\n     * @param feature The feature that triggered this event. Usually a fixed string or even a {@link java.lang.Class}\n     *                if that's unambiguously describing the feature (e.g., {@link hudson.cli.GroovyshCommand#getClass()}).\n     * @param context Object representing the script definition context (e.g., {@link hudson.model.Run}).\n     *                Can be {@code null} if not applicable (e.g., CLI commands not acting on jobs/builds).\n     * @param correlationId This value is used to correlate this script event to other, related script events.\n     *                      Callers are expected to provide values that allow receivers to associate script execution\n     *                      and output. Related events should have identical values.\n     * @param user If available, the user who caused this event. Can be {@code null}.\n     */",
                "newContent": "default void onScriptOutput(@CheckForNull String output, ScriptContext context) {\n    }\n\n    /**\n     * Fires the {@link #onScriptExecution(String, Binding, Object, Object, String, hudson.model.User)} event.\n     *\n     * @param script The script to be executed or {@code null} if no script is available yet (e.g. a shell has just been opened).\n     * @param binding The script binding, or {@code null} if unavailable/inapplicable.\n     * @param context The explanatory context for script execution and output.\n     */"
            },
            {
                "fromLine": 95,
                "toLine": 102,
                "oldContent": "    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, feature, context, correlationId, user));\n    }\n",
                "newContent": "    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, ScriptContext context) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, context));\n    }\n"
            },
            {
                "fromLine": 110,
                "toLine": 117,
                "oldContent": "    static void fireScriptOutput(@CheckForNull String output, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, feature, context, correlationId, user));\n    }\n",
                "newContent": "    static void fireScriptOutput(@CheckForNull String output, ScriptContext context) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, context));\n    }\n"
            },
            {
                "fromLine": 136,
                "toLine": 156,
                "oldContent": "\n        private final Writer writer;\n        private final Object feature;\n        private final Object context;\n        private final String correlationId;\n        private final User user;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")\n        public ListenerWriter(Writer writer, Object feature, Object context, String correlationId, User user) {\n            this.writer = writer;\n            this.feature = feature;\n            this.context = context;\n            this.correlationId = correlationId;\n            this.user = user;\n        }\n\n        @Override\n        public void write(@NonNull char[] cbuf, int off, int len) throws IOException {\n            ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), feature, context, correlationId, user);\n            writer.write(cbuf, off, len);\n        }",
                "newContent": "\n        private final Writer writer;\n        private ScriptContext scriptContext;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")\n        public ListenerWriter(Writer writer, ScriptContext scriptContext) {\n            this.writer = writer;\n            this.scriptContext = scriptContext;\n        }\n\n        @Override\n        public void write(@NonNull char[] cbuf, int off, int len) throws IOException {\n            ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), scriptContext);\n            writer.write(cbuf, off, len);\n        }"
            },
            {
                "fromLine": 168,
                "toLine": 172,
                "oldContent": "    /**\n     * {@link java.io.OutputStream} that calls{@link #fireScriptOutput(String, Object, Object, String, hudson.model.User)} with\n     * the output it writes to the wrapped {@link java.io.OutputStream}, and otherwise just forwards {@link #flush()}\n     * and {@link #close()}.",
                "newContent": "/**\n     * {@link java.io.OutputStream} that calls{@link #fireScriptOutput(String, ScriptContext)} with\n     * the output it writes to the wrapped {@link java.io.OutputStream}, and otherwise just forwards {@link #flush()}\n     * and {@link #close()}."
            },
            {
                "fromLine": 177,
                "toLine": 184,
                "oldContent": "        private final OutputStream os;\n        private final Charset charset;\n        private final Object feature;\n        private final Object context;\n        private final String correlationId;\n        private final User user;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")",
                "newContent": "        private final OutputStream os;\n        private final Charset charset;\n        private ScriptContext scriptContext;\n\n        @SuppressFBWarnings(\"EI_EXPOSE_REP2\")"
            },
            {
                "fromLine": 186,
                "toLine": 193,
                "oldContent": "            this.os = os;\n            this.charset = charset;\n            this.feature = feature;\n            this.context = context;\n            this.correlationId = correlationId;\n            this.user = user;\n        }\n",
                "newContent": "            this.os = os;\n            this.charset = charset;\n            this.scriptContext = new ScriptContext(feature, context, correlationId, user);\n        }\n"
            },
            {
                "fromLine": 195,
                "toLine": 199,
                "oldContent": "        public void write(int b) throws IOException {\n            // Let's hope for verbosity's sake that nobody calls this directly, #write(byte[], int, int) should take care of regular calls.\n            ScriptListener.fireScriptOutput(new String(new byte[] { (byte) b }, charset), feature, context, correlationId, user);\n            os.write(b);\n        }",
                "newContent": "        public void write(int b) throws IOException {\n            // Let's hope for verbosity's sake that nobody calls this directly, #write(byte[], int, int) should take care of regular calls.\n            ScriptListener.fireScriptOutput(new String(new byte[] { (byte) b }, charset), scriptContext);\n            os.write(b);\n        }"
            },
            {
                "fromLine": 202,
                "toLine": 206,
                "oldContent": "        public void write(@NonNull byte[] b, int off, int len) throws IOException {\n            final String writtenString = new String(b, charset).substring(off, len - off);\n            ScriptListener.fireScriptOutput(writtenString, feature, context, correlationId, user);\n            os.write(b, off, len);\n        }",
                "newContent": "        public void write(@NonNull byte[] b, int off, int len) throws IOException {\n            final String writtenString = new String(b, charset).substring(off, len - off);\n            ScriptListener.fireScriptOutput(writtenString, scriptContext);\n            os.write(b, off, len);\n        }"
            }
        ],
        "core/src/main/java/jenkins/util/DefaultScriptListener.java": [
            {
                "fromLine": 45,
                "toLine": 59,
                "oldContent": "public void onScriptExecution(String script, Binding binding, @NonNull Object feature, Object context, @NonNull String correlationId, User user) {\n        String userFragment = user == null ? \" (no user)\" : \" by user: '\" + user + \"'\";\n        LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Execution of script: '\" + script + \"' with binding: '\" + stringifyBinding(binding) + \"' in feature: '\" + feature + \"' and context: '\" + context + \"' with correlation: '\" + correlationId + \"'\" + userFragment);\n    }\n\n    @Override\n    public void onScriptOutput(String output, @NonNull Object feature, Object context, @NonNull String correlationId, User user) {\n        String userFragment = user == null ? \" (no user)\" : \" for user: '\" + user + \"'\";\n        LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Script output: '\" + output + \"' in feature: '\" + feature + \"' and context: '\" + context + \"' with correlation: '\" + correlationId + \"'\" + userFragment);\n    }",
                "newContent": "public void onScriptExecution(String script, Binding binding, ScriptContext context) {\n        String userFragment = context.getUser() == null ? \" (no user)\" : \" by user: '\" + context.getUser() + \"'\";\n        LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Execution of script: '\" + script + \"' with binding: '\" + stringifyBinding(binding) + \"' in feature: '\" + context.getFeature() + \"' and context: '\" + context.getContext() + \"' with correlation: '\" + context.getCorrelationId() + \"'\" + userFragment);\n    }\n\n    @Override\n    public void onScriptOutput(String output, ScriptContext context) {\n        String userFragment = context.getUser() == null ? \" (no user)\" : \" for user: '\" + context.getUser() + \"'\";\n        LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Script output: '\" + output + \"' in feature: '\" + context.getFeature() + \"' and context: '\" + context.getContext() + \"' with correlation: '\" + context.getCorrelationId() + \"'\" + userFragment);\n    }"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyCommand.java": [
            {
                "fromLine": 75,
                "toLine": 79,
                "oldContent": "        ScriptListener.fireScriptExecution(script, binding, GroovyCommand.class, null, scriptListenerCorrelationId, User.current());\n        groovy.run(script, \"RemoteClass\", remaining.toArray(new String[0]));\n        return 0;",
                "newContent": "        ScriptContext context = new ScriptContext(GroovyCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(script, binding, context);\n        groovy.run(script, \"RemoteClass\", remaining.toArray(new String[0]));\n        return 0;"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyshCommand.java": [
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "        ScriptListener.fireScriptExecution(null, null, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n        Groovysh shell = createShell(stdin, stdout, stderr);\n        return shell.run(commandLine.toString());",
                "newContent": "        ScriptContext context = new ScriptContext(GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(null, null, context);\n        Groovysh shell = createShell(stdin, stdout, stderr);\n        return shell.run(commandLine.toString());"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "        protected void maybeRecordInput(String line) {\n            ScriptListener.fireScriptExecution(line, binding, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n            super.maybeRecordInput(line);\n        }",
                "newContent": "        protected void maybeRecordInput(String line) {\n            ScriptContext context = new ScriptContext(GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n            ScriptListener.fireScriptExecution(line, binding, context);\n            super.maybeRecordInput(line);\n        }"
            }
        ],
        "core/src/main/java/hudson/util/RemotingDiagnostics.java": [
            {
                "fromLine": 121,
                "toLine": 127,
                "oldContent": "        ScriptListener.fireScriptExecution(script, new Binding(), RemotingDiagnostics.class, context, correlationId, User.current());\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(output, RemotingDiagnostics.class, context, correlationId, User.current());\n        return output;",
                "newContent": "        ScriptContext scriptContext = new ScriptContext(RemotingDiagnostics.class, context, correlationId, User.current());\n        ScriptListener.fireScriptExecution(script, new Binding(), scriptContext);\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(output, scriptContext);\n        return output;"
            }
        ],
        "core/src/main/java/jenkins/util/groovy/GroovyHookScript.java": [
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());\n            createShell().evaluate(s);\n        } catch (RuntimeException x) {",
                "newContent": "            ScriptContext scriptContext = new ScriptContext(this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());\n            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, scriptContext);\n            createShell().evaluate(s);\n        } catch (RuntimeException x) {"
            }
        ]
    },
    "extractedClasses": {
        "core/src/main/java/jenkins/util/ScriptContext.java": "package jenkins.util;\n\nimport edu.umd.cs.findbugs.annotations.CheckForNull;\nimport hudson.model.User;\n\npublic class ScriptContext {\n\n    private final Object feature;\n    private final Object context;\n    private final String correlationId;\n    private final User user;\n\n    public ScriptContext(@NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n        this.feature = feature;\n        this.context = context;\n        this.correlationId = correlationId;\n        this.user = user;\n    }\n\n    public Object getFeature() {\n        return feature;\n    }\n\n    public Object getContext() {\n        return context;\n    }\n\n    public String getCorrelationId() {\n        return correlationId;\n    }\n\n    public User getUser() {\n        return user;\n    }\n}"
    }
}