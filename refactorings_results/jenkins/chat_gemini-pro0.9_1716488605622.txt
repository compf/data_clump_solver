It looks like we have a data clump consisting of the `Object feature`, `Object context`, `String correlationId`, and `User user` parameters which are used in multiple methods across different files, such as `onScriptExecution`, `onScriptOutput`, `fireScriptExecution`, `fireScriptOutput`, and in the constructor of `ListenerWriter`. These four parameters are used together in multiple places and qualify for extraction into a separate class.

I will refactor the code by creating a new class named `ScriptContext` which will encapsulate these four parameters. Then, I will replace the original parameters in all the mentioned methods and constructor with an instance of `ScriptContext`.

Here is the new `ScriptContext` class:

```java
public class ScriptContext {
    @NonNull
    private final Object feature;
    @CheckForNull
    private final Object context;
    @NonNull
    private final String correlationId;
    @CheckForNull
    private final User user;

    public ScriptContext(@NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    @NonNull
    public Object getFeature() {
        return feature;
    }

    @CheckForNull
    public Object getContext() {
        return context;
    }

    @NonNull
    public String getCorrelationId() {
        return correlationId;
    }

    @CheckForNull
    public User getUser() {
        return user;
    }
}
```

Now, I will refactor the methods to use the `ScriptContext` class:

`ScriptListener.java` (changes applied to all occurrences of the data clump):

```java
// onScriptExecution method signature change
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptContext context) {
}

// onScriptOutput method signature change
default void onScriptOutput(@CheckForNull String output, @NonNull ScriptContext context) {
}

// fireScriptExecution method signature change and update internal call
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptContext context) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, context));
}

// fireScriptOutput method signature change and update internal call
static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptContext context) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, context));
}
```

`ListenerWriter.java` (constructor change):

```java
public ListenerWriter(Writer writer, @NonNull ScriptContext context) {
    this.writer = writer;
    this.scriptContext = context;
}
```

Then you would refactor the methods to use `scriptContext.getFeature()`, `scriptContext.getContext()`, `scriptContext.getCorrelationId()`, and `scriptContext.getUser()` wherever the old parameters were used.

You would repeat the same process for all other occurrences of the data clump in different files such as `DefaultScriptListener.java`, `GroovyCommand.java`, `GroovyshCommand.java`, `RemotingDiagnostics.java`, and `GroovyHookScript.java`.

Please note that the code snippets provided are parts of larger Java files, and therefore it's not possible to provide comprehensive refactoring without seeing the complete context of the code. What was shown here is the general approach to refactoring the data clump based on the definitions and occurrences provided.