The data clump in question appears to involve the parameters `Object feature`, `Object context`, and `String correlationId`, which are common in methods of the `ScriptListener` class as well as in constructors of `ListenerWriter` and the anonymous class extending `OutputStream`. These parameters can be refactored into a new class named, for example, `ScriptEventDetails`.

Below is the refactored version of the `ScriptListener` methods and the content of the extracted `ScriptEventDetails` class.

## Extracted `ScriptEventDetails` Class:

```java
public class ScriptEventDetails {
    private final Object feature;
    private final Object context;
    private final String correlationId;

    public ScriptEventDetails(Object feature, Object context, String correlationId) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }
}
```

## Refactored `ScriptListener`:

```java
// ... other parts of the class remain unchanged ...

default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details, @CheckForNull User user) {
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details, @CheckForNull User user) {
}

static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull ScriptEventDetails details, @CheckForNull User user) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, details, user));
}

static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventDetails details, @CheckForNull User user) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, details, user));
}

// ... rest of the code that uses the parameters feature, context, and correlationId should be updated to use ScriptEventDetails instance instead ...
```

Update the constructors of the `ListenerWriter` and the anonymous class extending `OutputStream` to use the `ScriptEventDetails` class as well, and adjust their code to use the getters of the new class.

Please note that in practice, you would need to refactor all occurrences of these parameters throughout the entire codebase. This usually involves updating the method signatures and their usages across all the classes that are interacting with these methods. The provided snippet refactors a single class for illustration purposes, and additional changes may be necessary in other parts of the codebase to fully complete the refactoring process.