To refactor the data clumps identified in the provided Java files, we will first need to identify the common parameters that form a clump. From the given snippets, it's clear that the following parameters are repeated across multiple methods in the `ScriptListener` class:

- `Object feature`
- `Object context`
- `String correlationId`
- `User user`

These parameters form a data clump as defined above. We can extract these parameters into a new class called `ScriptEventContext`.

Here's the proposed `ScriptEventContext` class:

```java
public class ScriptEventContext {
    private final Object feature;
    private final Object context;
    private final String correlationId;
    private final User user;

    public ScriptEventContext(Object feature, Object context, String correlationId, User user) {
        this.feature = feature;
        this.context = context;
        this.correlationId = correlationId;
        this.user = user;
    }

    public Object getFeature() {
        return feature;
    }

    public Object getContext() {
        return context;
    }

    public String getCorrelationId() {
        return correlationId;
    }

    public User getUser() {
        return user;
    }
}
```

Now, let's refactor the `ScriptListener` interface methods to use `ScriptEventContext`:

```java
default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding,
                               @NonNull ScriptEventContext sec) {
}

default void onScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext sec) {
}
```

We'll also need to update the static methods in `ScriptListener` accordingly:

```java
static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding,
                                @NonNull ScriptEventContext sec) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, sec));
}

static void fireScriptOutput(@CheckForNull String output, @NonNull ScriptEventContext sec) {
    Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, sec));
}
```

The `ListenerWriter` and other classes with a data clump such as constructors or methods that repeated the clump will also need to use the new `ScriptEventContext`:

```java
private final Writer writer;
private final ScriptEventContext sec;

public ListenerWriter(Writer writer, ScriptEventContext sec) {
    this.writer = writer;
    this.sec = sec;
}

@Override
public void write(@NonNull char[] cbuf, int off, int len) throws IOException {
    ScriptListener.fireScriptOutput(String.copyValueOf(cbuf, off, len), sec);
    writer.write(cbuf, off, len);
}
```

This refactoring pattern should be applied to all methods and constructors throughout the given files that have the identified data clump of `feature`, `context`, `correlationId`, and `user`. This process will encapsulate the related data into a single object, making the code cleaner and more maintainable.