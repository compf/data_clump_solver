{
    "refactorings":{
        "core/src/main/java/jenkins/util/ScriptListener.java": [
            {
                "fromLine": 66,
                "toLine": 79,
                "oldContent": "    default void onScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n    }\n",
                "newContent": "    default void onScriptExecution(ScriptEventDetails scriptEventDetails) {\n    }\n"
            },
            {
                "fromLine": 82,
                "toLine": 133,
                "oldContent": "    default void onScriptOutput(@CheckForNull String output, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n    }\n\n    static void fireScriptExecution(@CheckForNull String script, @CheckForNull Binding binding, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(script, binding, feature, context, correlationId, user));\n    }\n\n    static void fireScriptOutput(@CheckForNull String output, @NonNull Object feature, @CheckForNull Object context, @NonNull String correlationId, @CheckForNull User user) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(output, feature, context, correlationId, user));\n    }\n",
                "newContent": "    default void onScriptOutput(ScriptEventDetails scriptEventDetails, @CheckForNull String output) {\n    }\n\n    static void fireScriptExecution(ScriptEventDetails scriptEventDetails) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptExecution(scriptEventDetails));\n    }\n\n    static void fireScriptOutput(ScriptEventDetails scriptEventDetails, @CheckForNull String output) {\n        Listeners.notify(ScriptListener.class, true, listener -> listener.onScriptOutput(scriptEventDetails, output));\n    }\n"
            },
            {
                "fromLine": 136,
                "toLine": 156,
                "oldContent": "        public ListenerWriter(Writer writer, Object feature, Object context, String correlationId, User user) {\n            this.writer = writer;\n            this.feature = feature;\n            this.context = context;\n            this.correlationId = correlationId;\n            this.user = user;\n        }\n",
                "newContent": "        public ListenerWriter(Writer writer, ScriptEventDetails scriptEventDetails) {\n            this.writer = writer;\n            this.scriptEventDetails = scriptEventDetails;\n        }\n"
            },
            {
                "fromLine": 168,
                "toLine": 172,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 177,
                "toLine": 184,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 186,
                "toLine": 193,
                "oldContent": "            this.os = os;\n            this.charset = charset;\n            this.feature = feature;\n            this.context = context;\n            this.correlationId = correlationId;\n            this.user = user;\n        }\n",
                "newContent": "            this.os = os;\n            this.charset = charset;\n            this.scriptEventDetails = scriptEventDetails;\n        }\n"
            },
            {
                "fromLine": 195,
                "toLine": 199,
                "oldContent": "            ScriptListener.fireScriptOutput(new String(new byte[] { (byte) b }, charset), feature, context, correlationId, user);\n            os.write(b);\n        }",
                "newContent": "            ScriptListener.fireScriptOutput(scriptEventDetails, new String(new byte[] { (byte) b }, charset));\n            os.write(b);\n        }"
            },
            {
                "fromLine": 202,
                "toLine": 206,
                "oldContent": "            ScriptListener.fireScriptOutput(writtenString, feature, context, correlationId, user);\n            os.write(b, off, len);\n        }",
                "newContent": "            ScriptListener.fireScriptOutput(scriptEventDetails, writtenString);\n            os.write(b, off, len);\n        }"
            }
        ],
        "core/src/main/java/jenkins/util/DefaultScriptListener.java": [
            {
                "fromLine": 45,
                "toLine": 59,
                "oldContent": "    public void onScriptExecution(String script, Binding binding, @NonNull Object feature, Object context, @NonNull String correlationId, User user) {\n        String userFragment = user == null ? \" (no user)\" : \" by user: '\" + user + \"'\";\n        LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Execution of script: '\" + script + \"' with binding: '\" + stringifyBinding(binding) + \"' in feature: '\" + feature + \"' and context: '\" + context + \"' with correlation: '\" + correlationId + \"'\" + userFragment);\n    }\n\n    public void onScriptOutput(String output, @NonNull Object feature, Object context, @NonNull String correlationId, User user) {\n        String userFragment = user == null ? \" (no user)\" : \" for user: '\" + user + \"'\";\n        LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Script output: '\" + output + \"' in feature: '\" + feature + \"' and context: '\" + context + \"' with correlation: '\" + correlationId + \"'\" + userFragment);\n    }",
                "newContent": "    public void onScriptExecution(ScriptEventDetails scriptEventDetails) {\n        String userFragment = scriptEventDetails.getUser() == null ? \" (no user)\" : \" by user: '\" + scriptEventDetails.getUser() + \"'\";\n        LOGGER.log(Level.FINE, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Execution of script: '\" + scriptEventDetails.getScript() + \"' with binding: '\" + stringifyBinding(scriptEventDetails.getBinding()) + \"' in feature: '\" + scriptEventDetails.getFeature() + \"' and context: '\" + scriptEventDetails.getContext() + \"' with correlation: '\" + scriptEventDetails.getCorrelationId() + \"'\" + userFragment);\n    }\n\n    public void onScriptOutput(ScriptEventDetails scriptEventDetails, String output) {\n        String userFragment = scriptEventDetails.getUser() == null ? \" (no user)\" : \" for user: '\" + scriptEventDetails.getUser() + \"'\";\n        LOGGER.log(Level.FINER, LOGGER.isLoggable(Level.FINEST) ? new Exception() : null,\n                () -> \"Script output: '\" + output + \"' in feature: '\" + scriptEventDetails.getFeature() + \"' and context: '\" + scriptEventDetails.getContext() + \"' with correlation: '\" + scriptEventDetails.getCorrelationId() + \"'\" + userFragment);\n    }"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyCommand.java": [
            {
                "fromLine": 75,
                "toLine": 79,
                "oldContent": "        ScriptListener.fireScriptExecution(script, binding, GroovyCommand.class, null, scriptListenerCorrelationId, User.current());\n        groovy.run(script, \"RemoteClass\", remaining.toArray(new String[0]));\n        return 0;",
                "newContent": "        ScriptEventDetails details = new ScriptEventDetails(script, binding, GroovyCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(details);\n        groovy.run(script, \"RemoteClass\", remaining.toArray(new String[0]));\n        return 0;"
            }
        ],
        "core/src/main/java/hudson/cli/GroovyshCommand.java": [
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "        ScriptListener.fireScriptExecution(null, null, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n        Groovysh shell = createShell(stdin, stdout, stderr);\n        return shell.run(commandLine.toString());",
                "newContent": "        ScriptEventDetails details = new ScriptEventDetails(null, null, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n        ScriptListener.fireScriptExecution(details);\n        Groovysh shell = createShell(stdin, stdout, stderr);\n        return shell.run(commandLine.toString());"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "            ScriptListener.fireScriptExecution(line, binding, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n            super.maybeRecordInput(line);",
                "newContent": "            ScriptEventDetails details = new ScriptEventDetails(line, binding, GroovyshCommand.class, null, scriptListenerCorrelationId, User.current());\n            ScriptListener.fireScriptExecution(details);\n            super.maybeRecordInput(line);"
            }
        ],
        "core/src/main/java/hudson/util/RemotingDiagnostics.java": [
            {
                "fromLine": 121,
                "toLine": 127,
                "oldContent": "        ScriptListener.fireScriptExecution(script, new Binding(), RemotingDiagnostics.class, context, correlationId, User.current());\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(output, RemotingDiagnostics.class, context, correlationId, User.current());\n        return output;",
                "newContent": "        ScriptEventDetails details = new ScriptEventDetails(script, new Binding(), RemotingDiagnostics.class, context, correlationId, User.current());\n        ScriptListener.fireScriptExecution(details);\n        final String output = channel.call(new Script(script));\n        ScriptListener.fireScriptOutput(details, output);\n        return output;"
            }
        ],
        "core/src/main/java/jenkins/util/groovy/GroovyHookScript.java": [
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "            ScriptListener.fireScriptExecution(s.getScriptText(), bindings, this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());\n            createShell().evaluate(s);",
                "newContent": "            ScriptEventDetails details = new ScriptEventDetails(s.getScriptText(), bindings, this.getClass(), s.getFile(), this.getClass().getName() + \":\" + hook, User.current());\n            ScriptListener.fireScriptExecution(details);\n            createShell().evaluate(s);"
            }
        ]
    },
    "extractedClasses":{
        "ScriptEventDetails.java": "import hudson.model.User;\nimport org.codehaus.groovy.runtime.Binding;\n\npublic class ScriptEventDetails {\n    private final String script;\n    private final Binding binding;\n    private final Object feature;\n    private final Object context;\n    private final String correlationId;\n    private final User user;\n\n    public ScriptEventDetails(String script, Binding binding, Object feature, Object context, String correlationId, User user) {\n        this.script = script;\n        this.binding = binding;\n        this.feature = feature;\n        this.context = context;\n        this.correlationId = correlationId;\n        this.user = user;\n    }\n\n    public String getScript() {\n        return script;\n    }\n\n    public Binding getBinding() {\n        return binding;\n    }\n\n    public Object getFeature() {\n        return feature;\n    }\n\n    public Object getContext() {\n        return context;\n    }\n\n    public String getCorrelationId() {\n        return correlationId;\n    }\n\n    public User getUser() {\n        return user;\n    }\n}"
    }
}