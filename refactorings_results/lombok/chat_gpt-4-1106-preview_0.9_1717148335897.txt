{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, EqualsAndHashCodeGenerationContext context) {"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, context, needsCanEqual, source);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, EqualsAndHashCodeGenerationContext context, boolean needsCanEqual, JavacNode source) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeGenerationContext.java": "package lombok.javac.handlers;\n\nimport lombok.javac.JavacNode;\nimport java.util.List;\nimport lombok.core.handlers.Included;\nimport lombok.EqualsAndHashCode;\nimport com.sun.tools.javac.tree.JCTree.JCAnnotation;\n\npublic class EqualsAndHashCodeGenerationContext {\n    private final List<Included<JavacNode, EqualsAndHashCode.Include>> members;\n    private final Boolean callSuper;\n    private final boolean whineIfExists;\n    private final boolean cacheHashCode;\n    private final FieldAccess fieldAccess;\n    private final List<JCAnnotation> onParam;\n\n    public EqualsAndHashCodeGenerationContext(List<Included<JavacNode, EqualsAndHashCode.Include>> members, Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n        this.members = members;\n        this.callSuper = callSuper;\n        this.whineIfExists = whineIfExists;\n        this.cacheHashCode = cacheHashCode;\n        this.fieldAccess = fieldAccess;\n        this.onParam = onParam;\n    }\n\n    public List<Included<JavacNode, EqualsAndHashCode.Include>> getMembers() {\n        return members;\n    }\n\n    public Boolean getCallSuper() {\n        return callSuper;\n    }\n\n    public boolean isWhineIfExists() {\n        return whineIfExists;\n    }\n\n    public boolean isCacheHashCode() {\n        return cacheHashCode;\n    }\n\n    public FieldAccess getFieldAccess() {\n        return fieldAccess;\n    }\n\n    public List<JCAnnotation> getOnParam() {\n        return onParam;\n    }\n}\n"
    }
}