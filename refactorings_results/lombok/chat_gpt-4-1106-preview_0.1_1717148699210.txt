{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tEqualsAndHashCodeConfig config) {"
            },
            {
                "fromLine": 162,
                "toLine": 171,
                "oldContent": "\t\tif (implicitCallSuper && !isDirectDescendantOfObject) {\n\t\t\tCallSuperType cst = typeNode.getAst().readConfiguration(ConfigurationKeys.EQUALS_AND_HASH_CODE_CALL_SUPER);\n\t\t\tif (cst == null) cst = CallSuperType.WARN;\n\t\t\t",
                "newContent": "\t\tif (config.getImplicitCallSuper() && !isDirectDescendantOfObject) {\n\t\t\tCallSuperType cst = typeNode.getAst().readConfiguration(ConfigurationKeys.EQUALS_AND_HASH_CODE_CALL_SUPER);\n\t\t\tif (cst == null) cst = CallSuperType.WARN;\n\t\t\t"
            },
            {
                "fromLine": 173,
                "toLine": 177,
                "oldContent": "\t\t\t\tsource.addWarning(\"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\");\n\t\t\t\tcallSuper = false;\n\t\t\t\tbreak;",
                "newContent": "\t\t\t\tsource.addWarning(\"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\");\n\t\t\t\tconfig.setCallSuper(false);\n\t\t\t\tbreak;"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeNode, source, copyAnnotations(onParam));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (cacheHashCode){",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, config.getCallSuper(), config.getFieldAccess(), needsCanEqual, source, config.getOnParam());\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeNode, source, copyAnnotations(config.getOnParam()));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (config.getCacheHashCode()){"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, EqualsAndHashCodeConfig config) {"
            },
            {
                "fromLine": 492,
                "toLine": 496,
                "oldContent": "\t\tif (callSuper) {",
                "newContent": "\t\tif (config.getCallSuper()) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeConfig.java": "package lombok.javac.handlers;\n\nimport lombok.javac.JavacNode;\nimport lombok.core.handlers.HandlerConstants.FieldAccess;\nimport com.sun.tools.javac.util.List;\n\npublic class EqualsAndHashCodeConfig {\n\n\tprivate final JavacNode typeNode;\n\tprivate final boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final FieldAccess fieldAccess;\n\tprivate final List<JCAnnotation> onParam;\n\t\n\tpublic EqualsAndHashCodeConfig(JavacNode typeNode, Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\tthis.typeNode = typeNode;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic JavacNode getTypeNode() {\n\t\treturn typeNode;\n\t}\n\n\tpublic boolean getCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean getWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean getCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic FieldAccess getFieldAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<JCAnnotation> getOnParam() {\n\t\treturn onParam;\n\t}\n\n\tpublic void setCallSuper(boolean callSuper) {\n\t\tthis.callSuper = callSuper;\n\t}\n}\n"
    }
}