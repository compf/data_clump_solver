{
    "refactorings":{
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tEqualsAndHashCodeContext context) {"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeNode, source, copyAnnotations(onParam));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (cacheHashCode){\n\t\t\tif (fieldExists(HASH_CODE_CACHE_NAME, typeNode) != MemberExistsResult.NOT_EXISTS) {\n\t\t\t\tString msg = String.format(\"Not caching the result of hashCode: A field named %s already exists.\", HASH_CODE_CACHE_NAME);\n\t\t\t\tsource.addWarning(msg);\n\t\t\t\tcacheHashCode = false;\n\t\t\t} else {\n\t\t\t\tcreateHashCodeCacheField(typeNode, source);\n\t\t\t}\n\t\t}\n\t\t\n\t\tJCMethodDecl hashCodeMethod = createHashCode(typeNode, members, callSuper, cacheHashCode, fieldAccess, source);\n\t\tinjectMethod(typeNode, hashCodeMethod);\n\t}",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, context.withCallSuper(callSuper).withFieldAccess(fieldAccess).withNeedsCanEqual(needsCanEqual).withSource(source).withOnParam(onParam));\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeNode, source, copyAnnotations(onParam));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (context.isCacheHashCode()){\n\t\t\tif (fieldExists(HASH_CODE_CACHE_NAME, typeNode) != MemberExistsResult.NOT_EXISTS) {\n\t\t\t\tString msg = String.format(\"Not caching the result of hashCode: A field named %s already exists.\", HASH_CODE_CACHE_NAME);\n\t\t\t\tsource.addWarning(msg);\n\t\t\t\tcontext.setCacheHashCode(false);\n\t\t\t} else {\n\t\t\t\tcreateHashCodeCacheField(typeNode, source);\n\t\t\t}\n\t\t}\n\t\t\n\t\tJCMethodDecl hashCodeMethod = createHashCode(typeNode, members, context);\n\t\tinjectMethod(typeNode, hashCodeMethod);\n\t}"
            },
        {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, EqualsAndHashCodeContext context) {"
            }
        ]
    },
    "extractedClasses":{
        "src/core/lombok/javac/handlers/EqualsAndHashCodeContext.java": "package lombok.javac.handlers;\n\nimport lombok.core.handlers.HandlerUtil.FieldAccess;\nimport com.sun.tools.javac.util.List;\nimport lombok.javac.JavacNode;\nimport com.sun.tools.javac.tree.JCTree.JCAnnotation;\n\npublic class EqualsAndHashCodeContext {\n\n\tprivate final JavacNode source;\n\tprivate final Boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final FieldAccess fieldAccess;\n\tprivate final List<JCAnnotation> onParam;\n\n\tpublic EqualsAndHashCodeContext(JavacNode source, Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\tthis.source = source;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic JavacNode getSource() {\n\t\treturn source;\n\t}\n\n\tpublic Boolean getCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean isWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean isCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic FieldAccess getFieldAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<JCAnnotation> getOnParam() {\n\t\treturn onParam;\n\t}\n\n\tpublic EqualsAndHashCodeContext withCallSuper(Boolean newCallSuper) {\n\t\treturn new EqualsAndHashCodeContext(source, newCallSuper, whineIfExists, cacheHashCode, fieldAccess, onParam);\n\t}\n\n\tpublic EqualsAndHashCodeContext withFieldAccess(FieldAccess newFieldAccess) {\n\t\treturn new EqualsAndHashCodeContext(source, callSuper, whineIfExists, cacheHashCode, newFieldAccess, onParam);\n\t}\n\n\tpublic EqualsAndHashCodeContext withWhineIfExists(boolean newWhineIfExists) {\n\t\treturn new EqualsAndHashCodeContext(source, callSuper, newWhineIfExists, cacheHashCode, fieldAccess, onParam);\n\t}\n\n\tpublic EqualsAndHashCodeContext withCacheHashCode(boolean newCacheHashCode) {\n\t\treturn new EqualsAndHashCodeContext(source, callSuper, whineIfExists, newCacheHashCode, fieldAccess, onParam);\n\t}\n\n\tpublic EqualsAndHashCodeContext withOnParam(List<JCAnnotation> newOnParam) {\n\t\treturn new EqualsAndHashCodeContext(source, callSuper, whineIfExists, cacheHashCode, fieldAccess, newOnParam);\n\t}\n\n\tpublic void setCacheHashCode(boolean newCacheHashCode) {\n\t\tthis.cacheHashCode = newCacheHashCode;\n\t}\n}\n"
    }
}