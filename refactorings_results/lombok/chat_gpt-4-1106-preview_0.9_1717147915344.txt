{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, GenerationContext context) {"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, GenerationContext context, boolean needsCanEqual) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/GenerationContext.java": "package lombok.javac.handlers;\n\nimport com.sun.tools.javac.code.Flags;\nimport com.sun.tools.javac.tree.JCTree.JCAnnotation;\nimport java.util.List;\nimport lombok.core.handlers.HandlerUtil.FieldAccess;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.Included;\nimport lombok.javac.JavacNode;\n\npublic class GenerationContext {\n\tJavacNode typeNode;\n\tList<Included<JavacNode, EqualsAndHashCode.Include>> members;\n\tBoolean callSuper;\n\tboolean whineIfExists;\n\tboolean cacheHashCode;\n\tFieldAccess fieldAccess;\n\tList<JCAnnotation> onParam;\n\n\tpublic GenerationContext(JavacNode typeNode, List<Included<JavacNode, EqualsAndHashCode.Include>> members, Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\tthis.typeNode = typeNode;\n\t\tthis.members = members;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAmazonParam;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic JavacNode getTypeNode() { return typeNode; }\n\tpublic List<Included<JavacNode, EqualsAndHashCode.Include>> getMembers() { return members; }\n\tpublic Boolean getCallSuper() { return callSuper; }\n\tpublic boolean isWhineIfExists() { return whineIfExists; }\n\tpublic boolean isCacheHashCode() { return cacheHashCode; }\n\tpublic FieldAccess getFieldAccess() { return fieldAccess; }\n\tpublic List<JCAnnotation> getOnParam() { return onParam; }\n}\n"
    }
}