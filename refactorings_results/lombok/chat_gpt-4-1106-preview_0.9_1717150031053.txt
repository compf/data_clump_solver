{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tEqualsAndHashCodeGenerationConfig config) {"
            },
            {
                "fromLine": 131,
                "toLine": 141,
                "oldContent": "\t\tboolean isDirectDescendantOfObject = isDirectDescendantOfObject(typeNode);\n\t\t\n\t\tboolean isFinal = (((JCClassDecl) typeNode.get()).mods.flags & Flags.FINAL) != 0;\n\t\tboolean needsCanEqual = !isFinal || !isDirectDescendantOfObject;\n\t\tMemberExistsResult equalsExists = methodExists(\"equals\", typeNode, 1);\n\t\tMemberExistsResult hashCodeExists = methodExists(\"hashCode\", typeNode, 0);\n\t\tMemberExistsResult canEqualExists = methodExists(\"canEqual\", typeNode, 1);\n\t\tswitch (Collections.max(Arrays.asList(equalsExists, hashCodeExists))) {",
                "newContent": "\t\tboolean isDirectDescendantOfObject = isDirectDescendantOfObject(typeNode);\n\n\t\tboolean isFinal = (((JCClassDecl) typeNode.get()).mods.flags & Flags.FINAL) != 0;\n\t\tboolean needsCanEqual = !isFinal || !isDirectDescendantOfObject;\n\t\tMemberExistsResult equalsExists = methodExists(\"equals\", typeNode, 1);\n\t\tMemberExistsResult hashCodeExists = methodExists(\"hashCode\", typeNode, 0);\n\t\tMemberExistsResult canEqualExists = methodExists(\"canEqual\", typeNode, 1);\n\t\tswitch (Collections.max(Arrays.asList(equalsExists, hashCodeExists))) {"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "\t\t\tif (whineIfExists) {",
                "newContent": "\t\t\tif (config.isWhineIfExists()) {"
            },
            {
                "fromLine": 162,
                "toLine": 171,
                "oldContent": "\t\tif (isDirectDescendantOfObject && callSuper) {",
                "newContent": "\t\tif (isDirectDescendantOfObject && config.getCallSuper()) {"
            },
            {
                "fromLine": 173,
                "toLine": 177,
                "oldContent": "\t\t\t\tcallSuper = false;",
                "newContent": "\t\t\t\tconfig.setCallSuper(false);"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, config, needsCanEqual, source);\n"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, EqualsAndHashCodeGenerationConfig config, boolean needsCanEqual, JavacNode source) {"
            },
            {
                "fromLine": 449,
                "toLine": 457,
                "oldContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, onParam), oName, objectType, null);",
                "newContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, config.getOnParam()), oName, objectType, null);"
            },
            {
                "fromLine": 492,
                "toLine": 496,
                "oldContent": "\t\tif (callSuper) {",
                "newContent": "\t\tif (config.getCallSuper()) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeGenerationConfig.java": "package lombok.javac.handlers;\n\nimport lombok.core.handlers.HandlerUtil.FieldAccess;\nimport com.sun.tools.javac.code.Symbol.VarSymbol;\nimport com.sun.tools.javac.tree.JCTree.JCAnnotation;\nimport java.util.List;\n\npublic class EqualsAndHashCodeGenerationConfig {\n    private Boolean callSuper;\n    private boolean whineIfExists;\n    private boolean cacheHashCode;\n    private FieldAccess fieldlAccess;\n    private List<JCAnnotation> onParam;\n\n    public EqualsAndHashCodeGenerationConfig(Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n        this.callSuper = callSuper;\n        this.whineIfExists = whineIfExists;\n        this.cacheHashCode = cacheHashCode;\n        this.fieldAccess = fieldAccess;\n        this.onParam = onParam;\n    }\n\n    public Boolean getCallSuper() {\n        return callSuper;\n    }\n\n    public void setCallSuper(Boolean callSuper) {\n        this.callSuper = callSuper;\n    }\n    public boolean isWhineIfExists() {\n        return whineIfExists;\n    }\n\n    public boolean isCacheHashCode() {\n        return cacheHashCode;\n    }\n\n    public FieldAccess getFieldAccess() {\n        return fieldAccess;\n    }\n\n    public List<JCAnnotation> getOnParam() {\n        return onParam;\n    }\n}\n"
    }
}