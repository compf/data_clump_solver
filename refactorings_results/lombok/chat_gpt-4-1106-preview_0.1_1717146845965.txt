{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, EqualsAndHashCodeGenerationContext context) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeGenerationContext.java": "package lombok.javac.handlers;\n\nimport java.util.List;\nimport com.sun.tools.javac.code.SymbolMetadata.AnnotationType;\nimport lombok.javac.JavacNode;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.Included;\n\npublic class EqualsAndHashCodeGenerationContext {\n\tprivate final List<Included<JavacNode, HandleEqualsAndHashCode.EqualsAndHashCode.Include>> members;\n\tprivate final Boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final HandleEqualsAndHashCode.FieldAccess fieldAccess;\n\tprivate final List<AnnotationType> onParam;\n\n\tpublic EqualsAndHashCodeGenerationContext(\n\t\tList<Included<JavacNode, HandleEqualsAndHashCode.EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper,\n\t\tboolean whineIfExists,\n\t\tboolean cacheHashCode,\n\t\tHandleEqualsAndHashCode.FieldAccess fieldAccess,\n\t\tList<AnnotationType> onParam\n\t) {\n\t\tthis.members = members;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic List<Included<JavacNode, HandleEqualsAndHashCode.EqualsAndHashCode.Include>> getMembers() {\n\t\treturn members;\n\t}\n\n\tpublic Boolean getCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean isWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean isCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic HandleEqualsAndHashCode.FieldAccess getFieldAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<AnnotationType> getOnParam() {\n\t\treturn onParam;\n\t}\n}\n"
    }
}