{
    "refactorings":{
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, GenerateMethodsParams params) {"
            },
            {
                "fromLine": 131,
                "toLine": 141,
                "oldContent": "\t\tboolean isDirectDescendantOfObject = isDirectDescendantOfObject(typeNode);\n\t\t\n\t\tboolean isFinal = (((JCClassDecl) typeNode.get()).mods.flags & Flags.FINAL) != 0;\n\t\tboolean needsCanEqual = !isFinal || !isDirectDescendantOfObject;",
                "newContent": "\t\tboolean isFinal = (((JCClassDecl) typeNode.get()).mods.flags & Flags.FINAL) != 0;\n\t\tboolean needsCanEqual = !isFinal || !params.isDirectDescendantOfObject;"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "\t\t\tif (whineIfExists) {",
                "newContent": "\t\t\tif (params.whineIfExists) {"
            },
            {
                "fromLine": 162,
                "toLine": 171,
                "oldContent": "\t\tif (isDirectDescendantOfObject && callSuper) {",
                "newContent": "\t\tif (params.isDirectDescendantOfObject && params.callSuper) {"
            },
            {
                "fromLine": 173,
                "toLine": 177,
                "oldContent": "\t\t\t\tcallSuper = false;",
                "newContent": "\t\t\t\tparams.callSuper = false;"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeNode, source, copyAnnotations(onParam));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (cacheHashCode){",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeAndSource, params.withNeedsCanEqual(needsCanEqual));\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {\n\t\t\tJCMethodDecl canEqualMethod = createCanEqual(typeAndSource, copyAnnotations(params.onParam));\n\t\t\tinjectMethod(typeNode, canEqualMethod);\n\t\t}\n\t\t\n\t\tif (params.cacheHashCode){"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, GenerateMethodsParams params, boolean needsCanEqual, JavacNode source) {"
            },
            {
                "fromLine": 449,
                "toLine": 457,
                "oldContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, onParam), oName, objectType, null);\n\t\tJavacHandlerUtil.createRelevantNullableAnnotation(typeNode, param);",
                "newContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, params.onParam), oName, objectType, null);\n\t\tJavacHandlerUtil.createRelevantNullableAnnotation(typeNode, param);"
            },
            {
                "fromLine": 492,
                "toLine": 496,
                "oldContent": "\t\tif (callSuper) {",
                "newContent": "\t\tif (params.callSuper) {"
            }
        ]
    },
    "extractedClasses":{
        "src/core/lombok/javac/handlers/GenerateMethodsParams.java": "class GenerateMethodsParams {\n\tjava.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members;\n\tBoolean callSuper;\n\tboolean whineIfExists;\n\tboolean cacheHashCode;\n\tFieldAccess fieldAccess;\n\tList<JCAnnotation> onParam;\n\tboolean isDirectDescendantOfObject;\n\n\tpublic GenerateMethodsParams(java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam, boolean isDirectDescendantOfObject) {\n\t\tthis.members = members;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t\tthis.isDirectDescendantOfObject = isDirectDescendantOfObject;\n\t}\n\n\tpublic GenerateMethodsParams withNeedsCanEqual(boolean needsCanEqual) {\n\t\treturn new GenerateMethodsParams(this.members, this.callSuper, this.whineIfExists, this.cacheHashCode, this.fieldAccess, this.onParam, needsCanEqual);\n\t}\n}"
    }
}