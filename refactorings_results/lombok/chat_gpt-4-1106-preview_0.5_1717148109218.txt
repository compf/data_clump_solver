{
    "refactorings":{
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldImports, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tEqualsAndHashCodeGenerationConfig config) {"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, EqualsAndHashCodeGenerationConfig config) {"
            }
        ]
    },
    "extractedClasses":{
        "src/core/lombok/javac/handlers/EqualsAndHashCodeGenerationConfig.java": "package lombok.javac.handlers;\n\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport com.sun.tools.javac.util.List;\nimport lombok.core.handlers.HandlerTypes.FieldAccess;\nimport com.sun.tools.javac.code.SymbolMetadata.AnnotationMetadata;\n\n@AllArgsConstructor(access = AccessLevel.PACKAGE)\n@Getter\npublic class EqualsAndHashCodeGenerationConfig {\n\n\tprivate final boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final FieldAccess fieldAccess;\n\tprivate final List<AnnotationMetadata> onParam;\n\n}\n"
    }
}