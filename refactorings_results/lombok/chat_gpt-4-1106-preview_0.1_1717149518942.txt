{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\t\n\t\tif (!isClass(typeNode)) {\n\t\t\tsource.addError(\"@EqualsAndHashCode is only supported on a class.\");\n\t\t\treturn;\n\t\t}",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, MethodGenerationParams genParams) {\n\t\tjava.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members = genParams.getMembers();\n\t\tBoolean callSuper = genParams.getCallSuper();\n\t\tboolean whineIfExists = genParams.isWhineIfExists();\n\t\tboolean cacheHashCode = genParams.isCacheHashCode();\n\t\tFieldAccess fieldAccess = genParams.getFieldAccess();\n\t\tList<JCAnnotation> onParam = genParams.getOnParam();\n\t\t\n\t\tif (!isClass(typeNode)) {\n\t\t\tsource.addError(\"@EqualsAndHashCode is only supported on a class.\");\n\t\t\treturn;\n\t\t}"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {\n\t\tJavacTreeMaker maker = typeNode.getTreeMaker();\n\t\t\n\t\tName oName = typeNode.toName(\"o\");\n\t\tName otherName = typeNode.toName(\"other\");\n\t\tName thisName = typeNode.toName(\"this\");",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, MethodGenerationParams genParams) {\n\t\tjava.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members = genParams.getMembers();\n\t\tboolean callSuper = genParams.getCallSuper();\n\t\tFieldAccess fieldAccess = genParams.getFieldAccess();\n\t\tboolean needsCanEqual = genParams.isNeedsCanEqual();\n\t\tJavacNode source = genParams.getSource();\n\t\tList<JCAnnotation> onParam = genParams.getOnParam();\n\t\t\n\t\tJavacTreeMaker maker = typeNode.getTreeMaker();\n\t\t\n\t\tName oName = typeNode.toName(\"o\");\n\t\tName otherName = typeNode.toName(\"other\");\n\t\tName thisName = typeNode.toName(\"this\");"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/MethodGenerationParams.java": "package lombok.javac.handlers;\n\nimport com.sun.tools.javac.util.List;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.Included;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.FieldAccess;\nimport lombok.core.AnnotationValues.AnnotationValue;\nimport lombok.EqualsAndHashCode;\nimport lombok.javac.JavacNode;\n\npublic class MethodGenerationParams {\n\tprivate List<Included<JavacNode, EqualsAndHashCode.Include>> members;\n\tprivate Boolean callSuper;\n\tprivate boolean whineIfExists;\n\tprivate boolean cacheHashCode;\n\tprivate FieldAccess fieldAccess;\n\tprivate List<JCAnnotation> onParam;\n\t\n\tpublic MethodGenerationParams(List<Included<JavacNode, EqualsAndHashCode.Include>> members, Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\tthis.members = members;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic List<Included<JavacNode, EqualsAndHashCode.Include>> getMembers() {\n\t\treturn members;\n\t}\n\n\tpublic Boolean getCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean isWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean isCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic FieldAccess getFieldAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<JCAnnotation> getOnParam() {\n\t\treturn onParam;\n\t}\n}\n"
    }
}