{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 119,
                "toLine": 120,
                "oldContent": "public void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "public void generateMethods(JavacNode typeNode, JavacNode source, EqualsAndHashCodeGenerationContext context) {"
            },
            {
                "fromLine": 187,
                "toLine": 187,
                "oldContent": "JCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);",
                "newContent": "JCMethodDecl equalsMethod = createEquals(typeNode, context.getMembers(), context.getCallSuper(), context.getFieldAccess(), needsCanEqual, source, context.getOnParam());"
            },
            {
                "fromLine": 202,
                "toLine": 202,
                "oldContent": "JCMethodDecl hashCodeMethod = createHashCode(typeNode, members, callSuper, cacheHashCode, fieldAccess, source);",
                "newContent": "JCMethodDecl hashCodeMethod = createHashCode(typeNode, context.getMembers(), context.getCallSuper(), context.isCacheHashCode(), context.getFieldAccess(), source);"
            },
            {
                "fromLine": 427,
                "toLine": 428,
                "oldContent": "public JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "public JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeGenerationContext.java": "package lombok.javac.handlers;\n\nimport lombok.core.configuration.FieldAccess;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.Included;\nimport lombok.javac.handlers.HandleEqualsAndHashCode.Include;\nimport com.sun.tools.javac.util.List;\nimport com.sun.tools.javac.code.Symbol.MetadataAnnotation;\n\npublic class EqualsAndHashCodeGenerationContext {\n\n\tprivate final List<Included<JavacNode, Include>> members;\n\tprivate final Boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final FieldAccess fieldAccess;\n\tprivate final List<JCAnnotation> onParam;\n\n\tpublic EqualsAndHashCodeGenerationContext(\n\t\tList<Included<JavacNode, Include>> members,\n\t\tBoolean callSuper,\n\t\tboolean whineIfExists,\n\t\tboolean cacheHashCode,\n\t\tFieldAccess fieldAccess,\n\t\tList<JCAnnotation> onParam) {\n\t\tthis.members = members;\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t}\n\n\tpublic List<Included<JavacNode, Include>> getMembers() {\n\t\treturn members;\n\t}\n\n\tpublic Boolean getCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean isWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean isCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic FieldAccess getFieldflAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<JCAnnotation> getOnParam() {\n\t\treturn onParam;\n\t}\n}"
    }
}