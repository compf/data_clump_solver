{
    "refactorings": {
        "src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java": [
            {
                "fromLine": 114,
                "toLine": 122,
                "oldContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tBoolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic void generateMethods(JavacNode typeNode, JavacNode source, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members,\n\t\tEqualsAndHashCodeConfig config) {"
            },
            {
                "fromLine": 131,
                "toLine": 141,
                "oldContent": "\t\tboolean isDirectDescendantOfObject = isDirectDescendantOfObject(typeNode);\n\t\t\n\t\tboolean isFinal = (((JCClassDecl) typeNode.get()).mods.flags & Flags.FINAL) != 0;\n\t\tboolean needsCanEqual = !isFinal || !isDirectDescendantOfObject;\n\t\tMemberExistsResult equalsExists = methodExists(\"equals\", typeNode, 1);\n\t\tMemberExistsResult hashCodeExists = methodExists(\"hashCode\", typeNode, 0);\n\t\tMemberExistsResult canEqualExists = methodExists(\"canEqual\", typeNode, 1);\n\t\tswitch (Collections.max(Arrays.asList(equalsExists, hashCodeExists))) {",
                "newContent": "\t\tMemberExistsResult equalsExists = methodExists(\"equals\", typeNode, 1);\n\t\tMemberExistsResult hashCodeExists = methodExists(\"hashCode\", typeNode, 0);\n\t\tMemberExistsResult canEqualExists = methodExists(\"canEqual\", typeNode, 1);\n\t\tswitch (Collections.max(Arrays.asList(equalsExists, hashCodeExists))) {"
            },
            {
                "fromLine": 144,
                "toLine": 148,
                "oldContent": "\t\t\tif (whineIfExists) {",
                "newContent": "\t\t\tif (config.isWhineIfExists()) {"
            },
            {
                "fromLine": 162,
                "toLine": 171,
                "oldContent": "\t\tif (isDirectDescendantOfObject && callSuper) {",
                "newContent": "\t\tif (config.isDirectDescendantOfObject() && config.isCallSuper()) {"
            },
            {
                "fromLine": 173,
                "toLine": 177,
                "oldContent": "\t\t\t\tcallSuper = false;",
                "newContent": "\t\t\t\tconfig.setCallSuper(false);"
            },
            {
                "fromLine": 185,
                "toLine": 209,
                "oldContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, callSuper, fieldAccess, needsCanEqual, source, onParam);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (needsCanEqual && canEqualExists == MemberExistsResult.NOT_EXISTS) {",
                "newContent": "\t\tJCMethodDecl equalsMethod = createEquals(typeNode, members, config, source);\n\t\t\n\t\tinjectMethod(typeNode, equalsMethod);\n\t\t\n\t\tif (config.needsCanEqual() && canEqualExists == MemberExistsResult.NOT_EXISTS) {"
            },
            {
                "fromLine": 423,
                "toLine": 447,
                "oldContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, boolean callSuper, FieldAccess fieldAccess, boolean needsCanEqual, JavacNode source, List<JCAnnotation> onParam) {",
                "newContent": "\tpublic JCMethodDecl createEquals(JavacNode typeNode, java.util.List<Included<JavacNode, EqualsAndHashCode.Include>> members, EqualsAndHashCodeConfig config, JavacNode source) {"
            },
            {
                "fromLine": 449,
                "toLine": 457,
                "oldContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, onParam), oName, objectType, null);",
                "newContent": "\t\tJCVariableDecl param = maker.VarDef(maker.Modifiers(finalFlag | Flags.PARAMETER, config.getOnParam()), oName, objectType, null);"
            },
            {
                "fromLine": 492,
                "toLine": 496,
                "oldContent": "\t\tif (callSuper) {",
                "newContent": "\t\tif (config.isCallSuper()) {"
            }
        ]
    },
    "extractedClasses": {
        "src/core/lombok/javac/handlers/EqualsAndHashCodeConfig.java": "package lombok.javac.handlers;\n\nimport lombok.javac.JavacNode;\nimport lombok.javac.JavacTreeMaker;\nimport com.sun.tools.javac.util.List;\nimport com.sun.tools.javac.code.Flags;\nimport com.sun.tools.javac.tree.JCTree.JCAnnotation;\n\npublic class EqualsAndHashCodeConfig {\n\tprivate final boolean callSuper;\n\tprivate final boolean whineIfExists;\n\tprivate final boolean cacheHashCode;\n\tprivate final FieldAccess fieldAccess;\n\tprivate final List<JCAnnotation> onParam;\n\tprivate boolean isDirectDescendantOfObject;\n\tprivate boolean needsCanEqual;\n\n\tpublic EqualsAndHashCodeConfig(boolean callSuper, boolean whineIfExists, boolean cacheHashCode, FieldAccess fieldAccess, List<JCAnnotation> onParam) {\n\t\tthis.callSuper = callSuper;\n\t\tthis.whineIfExists = whineIfExists;\n\t\tthis.cacheHashCode = cacheHashCode;\n\t\tthis.fieldAccess = fieldAccess;\n\t\tthis.onParam = onParam;\n\t\tthis.isDirectDescendantOfObject = isDirectDescendantOfObject();\n\t\tthis.needsCanEqual = !isFinal || !this.isDirectDescendantOfObject;\n\t}\n\n\tpublic boolean isCallSuper() {\n\t\treturn callSuper;\n\t}\n\n\tpublic boolean isWhineIfExists() {\n\t\treturn whineIfExists;\n\t}\n\n\tpublic boolean isCacheHashCode() {\n\t\treturn cacheHashCode;\n\t}\n\n\tpublic FieldAccess getFieldAccess() {\n\t\treturn fieldAccess;\n\t}\n\n\tpublic List<JCAnnotation> getOnParam() {\n\t\treturn onParam;\n\t}\n\n\tpublic boolean isDirectDescendantOfObject() {\n\t\treturn isDirectDescendantOfObject;\n\t}\n\n\tpublic boolean needsCanEqual() {\n\t\treturn needsCanEqual;\n\t}\n\n\tpublic void setCallSuper(boolean callSuper) {\n\t\tthis.callSuper = callSuper;\n\t}\n}"
    }
}