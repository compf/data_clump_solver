{
    "refactorings": {
        "spock-core/src/main/java/org/spockframework/mock/TooManyInvocationsError.java": [
            {
                "fromLine": 10,
                "toLine": 54,
                "oldContent": "import org.spockframework.util.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * Thrown to indicate that a mandatory interaction matched too many invocations.\n *\n * @author Peter Niederwieser\n */\npublic class TooManyInvocationsError extends InteractionNotSatisfiedError {\n  private static final long serialVersionUID = 1L;\n\n  private final transient IMockInteraction interaction;\n  private final transient List<IMockInvocation> acceptedInvocations;\n  private String message;\n\n  public TooManyInvocationsError(IMockInteraction interaction, List<IMockInvocation> acceptedInvocations) {\n    this.interaction = interaction;\n    this.acceptedInvocations = acceptedInvocations;\n  }\n\n  public IMockInteraction getInteraction() {\n    return interaction;\n  }\n\n  public List<IMockInvocation> getAcceptedInvocations() {\n    return acceptedInvocations;\n  }\n\n  @Override\n  public synchronized String getMessage() {\n    if (message != null) return message;\n\n    IMultiset<IMockInvocation> uniqueInvocations = new LinkedHashMultiset<>();\n    for (IMockInvocation invocation : CollectionUtil.reverse(acceptedInvocations)) {\n      uniqueInvocations.add(invocation);",
                "newContent": "import org.spockframework.util.*;\n\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * Thrown to indicate that a mandatory interaction matched too many invocations.\n *\n * @author Peter Niederwieser\n */\npublic class TooManyInvocationsError extends InteractionNotSatisfiedError {\n  private static final long serialVersionUID = 1L;\n\n  private final transient IMockInteraction interaction;\n  private final transient List<IMockInvocation> acceptedInvocations;\n  private String message;\n\n  public TooManyInvocationsError(IMockInteraction interaction, List<IMockInvocation> acceptedInvocations) {\n    this.interaction = interaction;\n    this.acceptedInvocations = acceptedInvocations;\n  }\n\n  public IMockInteraction getInteraction() {\n    return interaction;\n  }\n\n  public List<IMockInvocation> getAcceptedInvocations() {\n    return acceptedInvocations;\n  }\n\n  @Override\n  public synchronized String getMessage() {\n    if (message != null) return message;\n\n    IMultiset<IMockInvocation> uniqueInvocations = new LinkedHashMultiset<>();\n    for (IMockInvocation invocation : CollectionUtil.reverse(acceptedInvocations)) {\n      uniqueInvocations.add(invocation);"
            }
        ]
    },
    "extractedClasses": {
    }
}