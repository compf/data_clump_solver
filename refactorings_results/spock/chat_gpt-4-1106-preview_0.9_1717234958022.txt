{
    "refactorings": {},
    "extractedClasses": {
        "spock-core/src/main/java/org/spockframework/mock/MockConfiguration.java": "package org.spockframework.mock;\n\nimport org.spockframework.util.*;\nimport spock.mock.IMockMakerSettings;\n\nimport java.lang.reflect.Type;\nimport java.util.*;\n\nimport static java.util.Collections.emptyList;\nimport static java.util.Collections.singletonList;\n\n@Beta\npublic class MockConfiguration implements IMockConfiguration {\n  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final MockNature nature;\n  private final MockImplementation implementation;\n  private final List<Object> constructorArgs;\n  private final List<Class<?>> additionalInterfaces;\n  private final IDefaultResponse defaultResponse;\n  private final boolean global;\n  private final boolean verified;\n  private final boolean useObjenesis;\n  private final IMockMakerSettings mockMakerSettings;\n\n  public MockConfiguration(@Nullable String name, Type type, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n      this(name, type, null, nature, implementation, options);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public MockConfiguration(@Nullable String name, Type type, @Nullable Object instance, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n    this.name = getOption(options, \"name\", String.class, name);\n    this.type = getOption(options, \"type\", Type.class, type);\n    this.instance = getOption(options, \"instance\", Object.class, instance);\n    this.nature = getOption(options, \"nature\", MockNature.class, nature);\n    this.implementation = getOption(options, \"implementation\", MockImplementation.class, implementation);\n    this.constructorArgs = getOptionAsList(options, \"constructorArgs\");\n    this.additionalInterfaces = getOption(options, \"additionalInterfaces\", List.class, emptyList());\n    this.defaultResponse = getOption(options, \"defaultResponse\", IDefaultResponse.class, this.nature.getDefaultResponse());\n    this.global = getOption(options, \"global\", Boolean.class, false);\n    this.verified = getOption(options, \"verified\", Boolean.class, this.nature.isVerified());\n    this.useObjenesis = getOption(options, \"useObjenesis\", Boolean.class, this.nature.isUseObjenesis());\n    this.mockMakerSettings = getOption(options, \"mockMaker\", IMockMakerSettings.class, null);\n  }\n\n  private <T> T getOption(Map<String, Object> options, String key, Class<T> type, T defaultValue) {\n    return options != null && options.containsKey(key) && type.isInstance(options.get(key))\n      ? type.cast(options.get(key)) : defaultValue;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> List<T> getOptionAsList(Map<String, Object> options, String key) {\n    Object value = options != null ? options.get(key) : null;\n    if (value instanceof List) {\n      for (Object element : (List<?>) value) {\n        if (!type.isInstance(element)) {\n          return emptyList();\n        }\n      }\n      return (List<T>) value;\n    }\n    return value != null && type.isInstance(value) ? singletonList(type.cast(value)) : emptyList();\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public Type getType() {\n    return type;\n  }\n\n  @Override\n  public Object getInstance() {\n    return instance;\n  }\n\n  @Override\n  public boolean isVerified() {\n    return verified;\n  }\n\n  @Override\n  public List<Object> getConstructorArgs() {\n    return constructorArgs;\n  }\n\n  @Override\n  public List<Class<?>> getAdditionalInterfaces() {\n    return additionalInterfaces;\n  }\n\n  @Override\n  public boolean isGlobal() {\n    return global;\n  }\n\n  @Override\n  public IDefaultResponse getDefaultResponse() {\n    return defaultResponse;\n  }\n\n  @Override\n  public boolean isUseObjenesis() {\n    return useObjenesis;\n  }\n\n  @Override\n  public MockNature getNature() {\n    return nature;\n  }\n\n  @Override\n  public MockImplementation getImplementation() {\n    return implementation;\n  }\n\n  @Override\n  public IMockMakerSettings getMockMakerSettings() {\n    return mockMakerSettings;\n  }\n}\n"
    }
}