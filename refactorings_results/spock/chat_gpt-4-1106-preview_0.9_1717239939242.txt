{
  "refactorings": {
    "spock-core/src/main/java/org/spockframework/builder/PropertySlot.java": [
      {
        "fromLine": 5,
        "toLine": 46,
        "oldContent": " * You may obtain a copy of the License at\n *     https://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.spockframework.builder;\n\nimport org.spockframework.util.*;\n\nimport java.lang.reflect.*;\n\nimport groovy.lang.MetaProperty;\n\npublic class PropertySlot implements ISlot {\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;\n\n  PropertySlot(Object owner, Type ownerType, MetaProperty property) {\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;\n  }\n\n  @Override\n  public Type getType() {\n    // could possibly add fast path here, but be careful (inner classes etc.)\n\n    Method setter = MopUtil.setterFor(property);\n    if (setter != null) return GenericTypeReflectorUtil.getParameterTypes(setter, ownerType)[0];\n\n    Field field = MopUtil.fieldFor(property);\n    if (field != null) return GenericTypeReflectorUtil.getExactFieldType(field, ownerType);\n\n    throw new UnreachableCodeError();\n  }\n\n  @Override",
        "newContent": " * You may obtain a copy of the License at\n *     https://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.spockframework.builder;\n\nimport org.spockframework.util.*;\n\nimport java.lang.reflect.*;\n\nimport groovy.lang.MetaProperty;\n\npublic class PropertySlot implements ISlot {\n  private final Metadata metadata;\n\n  PropertySlot(Object owner, Type ownerType, MetaProperty property) {\n    this.metadata = new Metadata(owner, ownerType, property);\n  }\n\n  @Override\n  public Type getType() {\n    // could possibly add fast path here, but be careful (inner classes etc.)\n\n    Method setter = MopUtil.setterFor(metadata.getProperty());\n    if (setter != null) return GenericTypeReflectorUtil.getParameterTypes(setter, metadata.getOwnerType())[0];\n\n    Field field = MopUtil.fieldFor(metadata.getProperty());\n    if (field != null) return GenericTypeReflectorUtil.getExactFieldType(field, metadata.getOwnerType());\n\n    throw new UnreachableCodeError();\n  }\n\n  @Override"
      }
    ]
  },
  "extractedClasses": {
    "spock-core/src/main/java/org/spockframework/builder/Metadata.java": "package org.spockframework.builder;\n\nimport groovy.lang.MetaProperty;\n\nimport java.lang.reflect.Type;\n\npublic class Metadata {\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;\n\n  public Metadata(Object owner, Type ownerType, MetaProperty property) {\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;\n  }\n\n  public Object getOwner() {\n    return owner;\n  }\n\n  public Type getOwnerType() {\n    return ownerType;\n  }\n\n  public MetaProperty getProperty() {\n    return property;\n  }\n}\n"
  }
}