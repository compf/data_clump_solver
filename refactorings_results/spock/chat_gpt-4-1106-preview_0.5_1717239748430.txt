{
    "refactorings": {
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockConfiguration.java": [
            {
                "fromLine": 9,
                "toLine": 60,
                "oldContent": "public class MockConfiguration implements IMockConfiguration {\n  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final MockNature nature;\n  private final MockImplementation implementation;\n  private final List<Object> constructorArgs;\n  private final List<Class<?>> additionalInterfaces;\n  private final IDefaultResponse defaultResponse;\n  private final boolean global;\n  private final boolean verified;\n  private final boolean useObjenesis;\n  private final IMockMakerSettings mockMakerSettings;\n\n  public MockConfiguration(@Nullable String name, Type type, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n      this(name, type, null, nature, implementation, options);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public MockConfiguration(@Nullable String name, Type type, @Nullable Object instance, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n    this.name = getOption(options, \"name\", String.class, name);\n    this.type = getOption(options, \"type\", Type.class, type);\n    this.instance = getOption(options, \"instance\", Object.class, instance);\n    this.nature = getOption(options, \"nature\", MockNature.class, nature);\n    this.implementation = getOption(options, \"implementation\", MockImplementation.class, implementation);\n    this.constructorArgs = getOptionAsList(options, \"constructorArgs\");\n    this.additionalInterfaces = getOption(options, \"additionalInterfaces\", List.class, emptyList());\n    this.defaultResponse = getOption(options, \"defaultResponse\", IDefaultResponse.class, this.nature.getDefaultResponse());\n    this.global = getOption(options, \"global\", Boolean.class, false);\n    this.verified = getOption(options, \"verified\", Boolean.class, this.nature.isVerified());\n    this.useObjenesis = getOption(options, \"useObjenesis\", Boolean.class, this.nature.isUseObjenesis());\n    this.mockMakerSettings = getOption(options, \"mockMaker\", IMockMakerSettings.class, null);",
                "newContent": "public class MockConfiguration implements IMockConfiguration {\n  private final MockConfigurationData configurationData;\n\n  public MockConfiguration(@Nullable String name, Type type, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n      this(new MockConfigurationData(name, type, null, nature, implementation, options));\n  }\n\n  public MockConfiguration(MockConfigurationData configurationData) {\n    this.configurationData = configurationData;\n    resolveOptions(configurationData.getOptions());\n  }\n\n  private void resolveOptions(Map<String, Object> options) {\n    configurationData.setName(getOption(options, \"name\", String.class, configurationData.getName()));\n    configurationData.setType(getOption(options, \"type\", Type.class, configurationData.getType()));\n    configurationData.setInstance(getOption(options, \"instance\", Object.class, configurationData.getInstance()));\n    configurationData.setNature(getOption(options, \"nature\", MockNature.class, configurationData.getNature()));\n    configurationData.setImplementation(getOption(options, \"implementation\", MockImplementation.class, configurationData.getImplementation()));\n    configurationData.setConstructorArgs(getOptionAsList(options, \"constructorArgs\"));\n    configurationData.setAdditionalInterfaces(getOption(options, \"additionalInterfaces\", List.class, emptyList()));\n    configurationData.setDefaultResponse(getOption(options, \"defaultResponse\", IDefaultResponse.class, configurationData.getNature().getDefaultResponse()));\n    configurationData.setGlobal(getOption(options, \"global\", Boolean.class, false));\n    configurationData.setVerified(getOption(options, \"verified\", Boolean.class, configurationData.getNature().isVerified()));\n    configurationData.setUseObjenesis(getOption(options, \"useObjenesis\", Boolean.class, configurationData.getNature().isUseObjenesis()));\n    configurationData.setMockMakerSettings(getOption(options, \"mockMaker\", IMockMakerSettings.class, null));\n  }"
            }
        ]
    },
    "extractedClasses": {
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockConfigurationData.java": "package org.spockframework.mock.runtime;\n\nimport org.spockframework.mock.*;\nimport org.spockframework.util.*;\nimport spock.mock.IMockMakerSettings;\n\nimport java.lang.reflect.Type;\nimport java.util.*;\n\nimport static java.util.Collections.emptyList;\n\n@Beta\nclass MockConfigurationData {\n  private String name;\n  private Type type;\n  private Object instance;\n  private MockNature nature;\n  private MockImplementation implementation;\n  private List<Object> constructorArgs;\n  private List<Class<?>> additionalInterfaces;\n  private IDefaultResponse defaultResponse;\n  private boolean global;\n  private boolean verified;\n  private boolean useObjenesis;\n  private IMockMakerSettings mockMakerSettings;\n  private final Map<String, Object> options;\n\n  public MockConfigurationData(@Nullable String name, Type type, @Nullable Object instance, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n    this.name = name;\n    this.type = type;\n    this.instance = instance;\n    this.nature = nature;\n    this.implementation = implementation;\n    this.options = options;\n  }\n\n  /* Getters and setters omitted for brevity */\n}"
    }
}