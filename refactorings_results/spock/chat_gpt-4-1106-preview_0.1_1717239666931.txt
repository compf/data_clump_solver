{
    "refactorings":{
        "spock-core/src/main/java/org/spockframework/builder/PropertySlot.java": [
            {
                "fromLine": 9,
                "toLine": 20,
                "oldContent": "  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;",
                "newContent": "  private final SlotOwner slotOwner;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockConfiguration.java": [
            {
                "fromLine": 14,
                "toLine": 28,
                "oldContent": "  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final MockNature nature;\n  private final MockImplementation implementation;\n  private final List<Object> constructorArgs;\n  private final List<Class<?>> additionalInterfaces;\n  private final IDefaultResponse defaultResponse;\n  private final boolean global;\n  private final boolean verified;\n  private final boolean useObjenesis;\n  private final IMockMakerSettings mockMakerSettings;",
                "newContent": "  private final MockConfig config;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockObject.java": [
            {
                "fromLine": 11,
                "toLine": 22,
                "oldContent": "  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final boolean verified;\n  private final boolean global;\n  private final IDefaultResponse defaultResponse;\n  private final SpecificationAttachable mockInterceptor;",
                "newContent": "  private final MockObjectConfig mocConfig;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/runtime/model/FeatureInfo.java": [
            {
                "fromLine": 16,
                "toLine": 27,
                "oldContent": "  private final List<String> parameterNames = new ArrayList<>();\n  private final List<String> dataVariables = new ArrayList<>();\n  private final List<BlockInfo> blocks = new ArrayList<>();\n  private final List<IMethodInterceptor> iterationInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> setupInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> cleanupInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> initializerInterceptors = new ArrayList<>();\n  private final Map<MethodInfo, List<IMethodInterceptor>> scopedMethodInterceptors = new HashMap<>();",
                "newContent": "  private final FeatureInfoData fid;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/runtime/model/SpecInfo.java": [
            {
                "fromLine": 15,
                "toLine": 26,
                "oldContent": "  private final List<FieldInfo> fields = new ArrayList<>();\n  private final List<IMethodInterceptor> setupInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> cleanupInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> setupSpecInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> cleanupSpecInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> sharedInitializerInterceptors = new ArrayList<>();\n  private final List<IMethodInterceptor> initializerInterceptors = new ArrayList<>();",
                "newContent": "  private final SpecInterceptors specInterceptors;"
            }
        ],
        "spock-core/src/main/java/spock/config/ParallelConfiguration.java": [
            {
                "fromLine": 48,
                "toLine": 64,
                "oldContent": "  public void custom(int parallelism, int minimumRunnable, int maxPoolSize, int corePoolSize, int keepAliveSeconds) {\n    parallelExecutionConfiguration = new DefaultParallelExecutionConfiguration(parallelism, minimumRunnable,\n      maxPoolSize, corePoolSize, keepAliveSeconds);\n  }",
                "newContent": "  private ExecutionConfig execConfig;"
            }
        ],
        "spock-core/src/main/java/spock/mock/DetachedMockFactory.java": [
            {
                "fromLine": 140,
                "toLine": 157,
                "oldContent": "  @SuppressWarnings(\"unchecked\")\n  public <T> T createMock(@Nullable String name, Class<T> type, MockNature nature, Map<String, Object> options) {\n    ClassLoader classLoader = type.getClassLoader();\n    if (classLoader == null) {\n      classLoader = ClassLoader.getSystemClassLoader();\n    }\n    return (T) new MockUtil().createDetachedMock(name, type, nature, MockImplementation.JAVA, options, classLoader);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public <T> T createMock(@Nullable String name, T obj, MockNature nature, Map<String, Object> options) {\n    ClassLoader classLoader = obj.getClass().getClassLoader();\n    if (classLoader == null) {\n      classlineoader = ClassLoader.getSystemClassLoader();\n    }\n    return (T) new MockUtil().createDetachedMock(name, obj, nature, MockImplementation.JAVA, options, classLoader);\n  }",
                "newContent": "  private MockConfigurator mockConfigurator;"
            }
        ],
        "spock-core/src/main/java/spock/mock/MockingApi.java": [
            {
                "fromLine": 339,
                "toLine": 349,
                "oldContent": "      Map<String, Object> options,\n    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE_FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            },
            {
                "fromLine": 568,
                "toLine": 578,
                "oldContent": "      Map<String, Object> options,\n    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE_FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            },
            {
                "fromLine": 851,
                "toLine": 861,
                "oldContent": "      Map<String, Object> options,\n    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE_FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            },
            {
                "fromLine": 1082,
                "toLine": 1092,
                "oldContent": "      Map<String, Object> options,\n    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE-FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            },
            {
                "fromLine": 1313,
                "toLine": 1323,
                "oldContent": "      Map<String, Object> options,\n    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE_FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            },
            {
                "fromLine": 1599,
                "toLine": 1609,
                "oldContent": "    @DelegatesTo.Target\n      Class<T> type,\n    @DelegatesTo(strategy = Closure.DELEGATE_FIRST, genericTypeIndex = 0)\n    @ClosureParams(SecondParam.FirstGenericType.class)\n      Closure interactions) {\n    throw invalidMockCreation();\n  }",
                "newContent": "      MockCreationOptions options) {"
            }
        ]
    },
    "extractedClasses":{
        "spock-core/src/main/java/org/spockframework/builder/SlotOwner.java": "package org.spockframework.builder;\n\nimport java.lang.reflect.Type;\nimport groovy.lang.MetaProperty;\n\npublic class SlotOwner {\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;\n\n  public SlotOwner(Object owner, Type ownerType, MetaProperty property) {\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;\n  }\n\n  public Object getOwner() {\n    return owner;\n  }\n\n  public Type getOwnerType() {\n    return ownerType;\n  }\n\n  public MetaProperty getProperty() {\n    return property;\n  }\n}\n",
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockConfig.java": "package org.spockframework.mock.runtime;\n\nimport org.spockframework.mock.*;\n\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport spock.mock.IMockMakerSettings;\n\npublic class MockConfig {\n  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final MockNature nature;\n  private final MockImplementation implementation;\n  private final List<Object> constructorArgs;\n  private final List<Class<?>> additionalInterfaces;\n  private final IDefaultResponse defaultResponse;\n  private final boolean global;\n  private final boolean verified;\n  private final boolean useObjenesis;\n  private final IMockMakerSettings mockMakerSettings;\n\n  public MockConfig(String name, Type type, Object instance, MockNature nature,\n                    MockImplementation implementation, List<Object> constructorArgs,\n                    List<Class<?>> additionalInterfaces, IDefaultResponse defaultResponse,\n                    boolean global, boolean verified, boolean useObjenesis, IMockMakerSettings mockMakerSettings) {\n    this.name = name;\n    this.type = type;\n    this.instance = instance;\n    this.nature = nature;\n    this.implementation = implementation;\n    this.constructorArgs = constructorArgs;\n    this.additionalInterfaces = additionalInterfaces;\n    this.defaultResponse = defaultResponse;\n    this.global = global;\n    this.verified = verified;\n    this.useObjenesis = useObjenesis;\n    this.mockMakerSettings = mockMakerSettings;\n  }\n\n  // Getters omitted for brevity\n}\n",
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockObjectConfig.java": "package org.spockframework.mock.runtime;\n\nimport org.spockframework.mock.*;\nimport org.spockframework.util.Nullable;\nimport spock.lang.Specification;\n\nimport java.lang.reflect.Type;\n\npublic class MockObjectConfig {\n  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final boolean verified;\n  private final boolean global;\n  private final IDefaultResponse defaultResponse;\n  private final SpecificationAttachable mockInterceptor;\n\n  private Specification specification;\n\n  public MockObjectConfig(@Nullable String name, Type type, Object instance, boolean verified, boolean global,\n                         IDefaultResponse defaultResponse, Specification specification, SpecificationAttachable mockInterceptor) {\n    this.name = name;\n    this.type = type;\n    this.instance = instance;\n    this.verified = verified;\n    this.global = global;\n    this.defaultResponse = defaultResponse;\n    this.specification = specification;\n    this.mockInterceptor = mockInterceptor;\n  }\n\n  // Getters omitted for brevity\n}\n",
        "spock-core/src/main/java/org/spockframework/runtime/model/FeatureInfoData.java": "package org.spockframework.runtime.model;\n\nimport java.util.*;\n\npublic class FeatureInfoData {\n  private final List<String> parameterNames;\n  private final List<String> dataVariables;\n  private final List<BlockInfo> blocks;\n  private final Map<MethodInfo, List<IMethodInterceptor>> scopedMethodInterceptors;\n\n  public FeatureInfoData(List<String> parameterNames, List<String> dataVariables, List<BlockInfo> blocks,\n                         Map<MethodInfo, List<IMethodInterceptor>> scopedMethodInterceptors) {\n    this.parameterNames = parameterNames;\n    this.dataVariables = dataVariables;\n    this.blocks = blocks;\n    this.scopedMethodInterceptors = scopedMethodInterceptors;\n  }\n\n  // Getters omitted for brevity\n}\n",
        "spock-core/src/main/java/org/spockframework/runtime/model/SpecInterceptors.java": "package org.spockframework.runtime.model;\n\nimport java.util.*;\n\npublic class SpecInterceptors {\n  private final List<IMethodInterceptor> setupInterceptors;\n  private final List<IMethodInterceptor> cleanupInterceptors;\n  private final List<IMethodInterceptor> setupSpecInterceptors;\n  private final List<IMethodInterceptor> cleanupSpecInterceptors;\n  private final List<IMethodInterceptor> sharedInitializerInterceptors;\n  private final List<IMethodInterceptor> initializerInterceptors;\n\n  public SpecInterceptors(List<IMethodInterceptor> setupInterceptors, List<IMethodInterceptor> cleanupInterceptors,\n                          List<IMethodInterceptor> setupSpecInterceptors, List<IMethodInterceptor> cleanupSpecInterceptors,\n                          List<IMethodInterceptor> sharedInitializerInterceptors, List<IMethodInterceptor> initializerInterceptors) {\n    this.setupInterceptors = setupInterceptors;\n    this.cleanupInterceptors = cleanupInterceptors;\n    this.setupSpecInterceptors = setupSpecInterceptors;\n    this.cleanupSpecInterceptors = cleanupSpecInterceptors;\n    this.sharedInitializerInterceptors = sharedInitializerInterceptors;\n    this.initializerInterceptors = initializerInterceptors;\n  }\n\n  // Getters omitted for brevity\n}\n",
        "spock-core/src/main/java/spock/config/ExecutionConfig.java": "package spock.config;\n\nimport org.spockframework.runtime.DefaultParallelExecutionConfiguration;\n\npublic class ExecutionConfig {\n  private final int parallelism;\n  private final int minimumRunnable;\n  private final int maxPoolSize;\n  private final int corePoolSize;\n  private final int keepAliveSeconds;\n\n  public ExecutionConfig(int parallelism, int minimumRunnable, int maxPoolSize, int corePoolSize, int keepAliveSeconds) {\n    this.parallelism = parallelism;\n    this.minimumRunnable = minimumRunnable;\n    this.maxPoolSize = maxPoolSize;\n    this.corePoolSize = corePoolSize;\n    this.keepAliveSeconds = keepAliveSeconds;\n  }\n\n  public DefaultParallelExecutionConfiguration toDefaultParallelExecutionConfiguration() {\n    return new DefaultParallelExecutionConfiguration(parallelism, minimumRunnable, maxPoolSize, corePoolSize, keepAliveSeconds);\n  }\n\n  // Getters omitted for brevity\n}\n",
        "spock-core/src/main/java/spock/mock/MockCreationOptions.java": "package spock.mock;\n\nimport java.util.Map;\n\npublic class MockCreationOptions {\n\n  private final Map<String, Object> options;\n\n  public MockCreationOptions(Map<String, Object> options) {\n    this.options = options;\n  }\n\n  public Map<String, Object> getOptions() {\n    return options;\n  }\n}\n",
        "spock-core/src/main/java/spock/mock/MockConfigurator.java": "package spock.mock;\n\nimport java.util.*;\nimport org.spockframework.mock.*;\nimport org.spockframework.util.*;\n\npublic class MockConfigurator {\n  public <T> T createMock(@Nullable String name, Class<T> type, MockNature nature, Map<String, Object> options) {\n    return MockUtil.createDetachedMock(name, type, nature, MockImplementation.JAVA, options, getClassLoader(type));\n  }\n\n  public <T> T createMock(@Nullable String name, T obj, MockNature nature, Map<String, Object> options) {\n    return MockUtil.createDetachedMock(name, obj, nature, MockImplementation.JAVA, options, getClassLoader(obj));\n  }\n\n  private ClassLoader getClassLoader(Class<?> type) {\n    ClassLoader classLoader = type.getClassLoader();\n    return classLoader != null ? classLoader : ClassLoader.getSystemClassLoader();\n  }\n\n  private ClassLoader getClassLoader(Object obj) {\n    return getClassLoader(obj.getClass());\n  }\n}\n"
    }
}
