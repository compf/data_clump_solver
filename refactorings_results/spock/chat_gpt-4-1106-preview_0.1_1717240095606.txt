{
    "refactorings": {
        "spock-core/src/main/java/org/spockframework/builder/PropertySlot.java": [
            {
                "fromLine": 22,
                "toLine": 27,
                "oldContent": "  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;",
                "newContent": "  private final MetaPropertyOwner ownerInfo;"
            },
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "  PropertySlot(Object owner, Type ownerType, MetaProperty property) {",
                "newContent": "  PropertySlot(MetaPropertyOwner ownerInfo, MetaProperty property) {"
            },
            {
                "fromLine": 30,
                "toLine": 32,
                "oldContent": "    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;",
                "newContent": "    this.ownerInfo = ownerInfo;\n    this.property = property;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/builder/CollectionSlot.java": [
            {
                "fromLine": 24,
                "toLine": 27,
                "oldContent": "  private final String name;\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;",
                "newContent": "  private final String name;\n  private final MetaPropertyOwner ownerInfo;"
            },
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "  CollectionSlot(String name, Object owner, Type ownerType, MetaProperty property) {",
                "newContent": "  CollectionSlot(String name, MetaPropertyOwner ownerInfo, MetaProperty property) {"
            },
            {
                "fromLine": 30,
                "toLine": 33,
                "oldContent": "    this.name = name;\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;",
                "newContent": "    this.name = name;\n    this.ownerInfo = ownerInfo;\n    this.property = property;"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockObject.java": [
            {
                "fromLine": 27,
                "toLine": 32,
                "oldContent": "  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final boolean verified;\n  private final boolean global;\n  private final IDefaultResponse defaultResponse;",
                "newContent": "  private final MockObjectInfo mockInfo;"
            },
            {
                "fromLine": 34,
                "toLine": 44,
                "oldContent": "  public MockObject(@Nullable String name, Type type, Object instance, boolean verified, boolean global,\n      IDefaultResponse defaultResponse, Specification specification, SpecificationAttachable mockInterceptor) {\n    this.name = name;\n    this.type = type;\n    this.instance = instance;\n    this.verified = verified;\n    this.global = global;\n    this.defaultResponse = defaultResponse;\n    this.specification = specification;\n    this.mockInterceptor = mockInterceptor;\n  }",
                "newContent": "  public MockObject(MockObjectInfo mockInfo, Specification specification, SpecificationAttachable mockInterceptor) {\n    this.mockInfo = mockInfo;\n    this.specification = specification;\n    this.mockInterceptor = mockInterceptor;\n  }"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "  @Override\n  @Nullable\n  public String getName() {\n    return name;\n  }",
                "newContent": "  @Override\n  @Nullable\n  public String getName() {\n    return mockInfo.name;\n  }"
            },
            {
                "fromLine": 47,
                "toLine": 49,
                "oldContent": "  public Type getType() {\n    return type;\n  }",
                "newContent": "  public Type getType() {\n    return mockInfo.type;\n  }"
            },
            {
                "fromLine": 50,
                "toLine": 52,
                "oldContent": "  public Object getInstance() {\n    return instance;\n  }",
                "newContent": "  public Object getInstance() {\n    return mockInfo.instance;\n  }"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockConfiguration.java": [
            {
                "fromLine": 30,
                "toLine": 35,
                "oldContent": "  private final String name;\n  private final Type type;\n  private final Object instance;\n  private final MockNature nature;\n  private final MockImplementation implementation;",
                "newContent": "  private final MockObjectInfo mockInfo;"
            },
            {
                "fromLine": 37,
                "toLine": 37,
                "oldContent": "  public MockConfiguration(@Nullable String name, Type type, MockNature nature,",
                "newContent": "  public MockConfiguration(MockObjectInfo mockInfo, MockNature nature,"
            },
            {
                "fromLine": 38,
                "toLine": 40,
                "oldContent": "      MockImplementation implementation, Map<String, Object> options) {\n      this(name, type, null, nature, implementation, options);\n  }",
                "newContent": "      Map<String, Object> options) {\n    this(mockInfo, null, nature, implementation, options);\n  }"
            },
            {
                "fromLine": 42,
                "toLine": 55,
                "oldContent": "  @SuppressWarnings(\"unchecked\")\n  public MockConfiguration(@Nullable String name, Type type, @Nullable Object instance, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n    this.name = getOption(options, \"name\", String.class, name);\n    this.type = getOption(options, \"type\", Type.class, type);\n    this.instance = getOption(options, \"instance\", Object.class, instance);\n    this.nature = getOption(options, \"nature\", MockNature.class, nature);\n    this.implementation = getOption(options, \"implementation\", MockImplementation.class, implementation);\n    this.constructorArgs = getOptionAsList(options, \"constructorArgs\");\n    this.additionalInterfaces = getOption(options, \"additionalInterfaces\", List.class, emptyList());\n    this.defaultResponse = getOption(options, \"defaultResponse\", IDefaultResponse.class, this.nature.getDefaultResponse());\n    this.global = getOption(options, \"global\", Boolean.class, false);\n    this.verified = getOption(options, \"verified\", Boolean.class, this.nature.isVerified());\n    this.useObjenesis = getOption(options, \"useObjenesis\", Boolean.class, this.nature.isUseObjenesis());\n    this.mockMakerSettings = getOption(options, \"mockMaker\", IMockMakerSettings.class, null);",
                "newContent": "  @SuppressWarnings(\"unchecked\")\n  public MockConfiguration(MockObjectInfo mockInfo, @Nullable Object instance, MockNature nature,\n      MockImplementation implementation, Map<String, Object> options) {\n    this.mockInfo = mockInfo;\n    if (instance != null) {\n      this.mockInfo.instance = instance; // override instance if provided\n    }\n    this.mockInfo.nature = getOption(options, \"nature\", MockNature.class, nature);\n    this.mockInfo.implementation = getOption(options, \"implementation\", MockImplementation.class, implementation);\n    this.mockInfo.constructorArgs = getOptionAsList(options, \"constructorArgs\");\n    this.mockInfo.additionalInterfaces = getOption(options, \"additionalInterfaces\", List.class, emptyList());\n    this.mockInfo.defaultResponse = getOption(options, \"defaultResponse\", IDefaultResponse.class, this.mockInfo.nature.getDefaultResponse());\n    this.mockInfo.global = getOption(options, \"global\", Boolean.class, false);\n    this.mockInfo.verified = getOption(options, \"verified\", Boolean.class, this.mockInfo.nature.isVerified());\n    this.mockInfo.useObjenesis = getOption(options, \"useObjenesis\", Boolean.class, this.mockInfo.nature.isUseObjenesis());\n    this.mockMakerSettings = getOption(options, \"mockMaker\", IMockMakerSettings.class, null);"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/JavaMockInterceptor.java": [
            {
                "fromLine": 28,
                "toLine": 29,
                "oldContent": "  private final IMockConfiguration mockConfiguration;",
                "newContent": "  private final MockObjectInfo mockInfo;"
            },
            {
                "fromLine": 31,
                "toLine": 43,
                "oldContent": "  public JavaMockInterceptor(IMockConfiguration mockConfiguration, Specification specification, MetaClass mockMetaClass) {\n    super(mockMetaClass);\n    this.mockConfiguration = mockConfiguration;\n    this.specification = specification;\n  }\n\n  @Override\n  public Object intercept(Object target, Method method, Object[] arguments, IResponseGenerator realMethodInvoker) {\n    IMockObject mockObject = new MockObject(mockConfiguration.getName(), mockConfiguration.getExactType(),\n      target, mockConfiguration.isVerified(), false, mockConfiguration.getDefaultResponse(), specification, this);\n\n    if (method.getDeclaringClass() == ISpockMockObject.class) {\n      return mockObject;\n    }",
                "newContent": "  public JavaMockInterceptor(MockObjectInfo mockInfo, Specification specification, MetaClass mockMetaClass) {\n    super(mockMetaClass);\n    this.mockInfo = mockInfo;\n    this.specification = specification;\n  }\n\n  @Override\n  public Object intercept(Object target, Method method, Object[] arguments, IResponseGenerator realMethodInvoker) {\n    IMockObject mockObject = new MockObject(mockInfo, specification, this);\n\n    if (method.getDeclaringClass() == ISpockMockObject.class) {\n      return mockObject;\n    }"
            }
        ],
        "spock-core/src/main/java/org/spockframework/mock/runtime/GroovyMockInterceptor.java": [
            {
                "fromLine": 28,
                "toLine": 29,
                "oldContent": "  private final IMockConfiguration mockConfiguration;",
                "newContent": "  private final MockObjectInfo mockInfo;"
            },
            {
            "fromLine": 31,
                "toLine": 43,
                "oldContent": "  public GroovyMockInterceptor(IMockConfiguration mockConfiguration, Specification specification, MetaClass mockMetaClass) {\n    super(mockMetaClass);\n    this.mockConfiguration = mockConfiguration;\n    this.specification = specification;\n  }\n\n  @Override\n  public Object intercept(Object target, Method method, Object[] arguments, IResponseGenerator realMethodInvoker) {\n    IMockObject mockObject = new MockObject(mockConfiguration.getName(), mockConfiguration.getExactType(), target,\n      mockConfiguration.isVerified(), mockConfiguration.isGlobal(), mockConfiguration.getDefaultResponse(), specification, this);\n\n    if (method.getDeclaringClass() == ISpockMockObject.class) {\n      return mockObject;\n    }",
                "newContent": "  public GroovyMockInterceptor(MockObjectInfo mockInfo, Specification specification, MetaClass mockMetaClass) {\n    super(mockMetaClass);\n    this.mockInfo = mockInfo;\n    this.specification = specification;\n  }\n\n  @Override\n  public Object intercept(Object target, Method method, Object[] arguments, IResponseGenerator realMethodInvoker) {\n    IMockObject mockObject = new MockObject(mockInfo, specification, this);\n\n    if (method.getDeclaringClass() == ISpockMockObject.class) {\n      return mockObject;\n    }"
            }
        ]
    },
    "extractedClasses": {
        "spock-core/src/main/java/org/spockframework/builder/MetaPropertyOwner.java": "package org.spockframework.builder;\n\nimport java.lang.reflect.Type;\n\npublic class MetaPropertyOwner {\n  final Object owner;\n  final Type ownerType;\n\n  public MetaPropertyOwner(Object owner, Type ownerType) {\n    this.owner = owner;\n    this.ownerType = ownerType;\n  }\n}\n",
        "spock-core/src/main/java/org/spockframework/mock/runtime/MockObjectInfo.java": "package org.spockframework.mock.runtime;\n\nimport org.spockframework.mock.*;\nimport org.spockframework.util.Nullable;\n\nimport java.lang.reflect.Type;\n\npublic class MockObjectInfo {\n  final String name;\n  final Type type;\n  @Nullable\n  Object instance;\n  final MockNature nature;\n  final MockImplementation implementation;\n\n  public MockObjectInfo(@Nullable String name, Type type, MockNature nature, MockImplementation implementation) {\n    this.name = name;\n    this.type = type;\n    this.nature = nature;\n    this.implementation = implementation;\n  }\n}\n"
    }
}