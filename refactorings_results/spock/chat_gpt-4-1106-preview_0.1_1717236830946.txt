{
    "refactorings":{
        "spock-core/src/main/java/org/spockframework/builder/CollectionSlot.java": [
            {
                "fromLine": 5,
                "toLine": 48,
                "oldContent": " * You may obtain a copy of the License at\n *     https://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.spockframework.builder;\n\nimport org.spockframework.util.*;\n\nimport java.lang.reflect.*;\nimport java.util.*;\n\nimport groovy.lang.MetaProperty;\n\npublic class CollectionSlot implements ISlot {\n  private final String name;\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;\n\n  CollectionSlot(String name, Object owner, Type ownerType, MetaProperty property) {\n    this.name = name;\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;\n  }\n\n  @Override\n  public Type getType() {\n    Type type = getCollectionType();\n    if (type instanceof ParameterizedType) return ((ParameterizedType)type).getActualTypeArguments()[0];\n    if (type instanceof Class) return Object.class;\n    throw new UnreachableCodeError();\n  }\n\n  private Type getCollectionType() {\n     Method getter = MopUtil.getterFor(property);\n    if (getter != null) return GenericTypeReflectorUtil.getReturnType(getter, ownerType);\n\n    Field field = MopUtil.fieldFor(property);",
                "newContent": " * You may obtain a copy of the License at\n *     https://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.spockframework.builder;\n\nimport org.spockframework.util.*;\n\nimport java.lang.reflect.*;\nimport java.util.*;\n\nimport groovy.lang.MetaProperty;\n\npublic class CollectionSlot implements ISlot {\n  private final String name;\n  private final SlotOwner ownerInfo;\n\n  CollectionSlot(String name, Object owner, Type ownerType, MetaProperty property) {\n    this.name = name;\n    this.ownerInfo = new SlotOwner(owner, ownerType, property);\n  }\n\n  @Override\n  public Type getType() {\n    Type type = ownerInfo.getCollectionType();\n    if (type instanceof ParameterizedType) return ((ParameterizedType)type).getActualTypeArguments()[0];\n    if (type instanceof Class) return Object.class;\n    throw new UnreachableCodeError();\n  }\n\n  private Type getCollectionType() {\n     Method getter = MopUtil.getterFor(ownerInfo.getProperty());\n    if (getter != null) return GenericTypeReflectorUtil.getReturnType(getter, ownerInfo.getOwnerType());\n\n    Field field = MopUtil.fieldFor(ownerInfo.getProperty());"
            }
        ]
    },
    "extractedClasses":{
        "spock-core/src/main/java/org/spockframework/builder/SlotOwner.java": "package org.spockframework.builder;\n\nimport groovy.lang.MetaProperty;\n\nimport java.lang.reflect.*;\n\n/**\n * Extracted class representing the owner of a slot.\n */\npublic class SlotOwner {\n\n  private final Object owner;\n  private final Type ownerType;\n  private final MetaProperty property;\n\n  public SlotOwner(Object owner, Type ownerType, MetaProperty property) {\n    this.owner = owner;\n    this.ownerType = ownerType;\n    this.property = property;\n  }\n\n  public Object getOwner() {\n    return owner;\n  }\n\n  public Type getOwnerType() {\n    return ownerType;\n  }\n\n  public MetaProperty getProperty() {\n    return property;\n  }\n\n  public Type getCollectionType() {\n    Method getter = MopUtil.getterFor(property);\n    if (getter != null) return GenericTypeReflectorUtil.getReturnType(getter, ownerType);\n\n    Field field = MopUtil.fieldFor(property);\n    if (field != null) return GenericTypeReflectorUtil.getExactFieldType(field, ownerType);\n\n    throw new UnreachableCodeError();\n  }\n}\n"
    }
}