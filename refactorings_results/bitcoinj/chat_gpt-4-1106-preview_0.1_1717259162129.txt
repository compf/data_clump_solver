{
    "refactorings": {
        "core/src/main/java/org/bitcoinj/core/Transaction.java": [
            {
                "fromLine": 891,
                "toLine": 932,
                "oldContent": "    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (amount == null || amount.value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, prevOut, amount);\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, sigKey));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);",
                "newContent": "    public TransactionInput addSignedInput(TransactionInputParameters parameters) throws ScriptException {\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (parameters.getAmount() == null || parameters.getAmount().value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, parameters.getPrevOut(), parameters.getAmount());\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(parameters.getScriptPubKey())) {\n            TransactionSignature signature = calculateSignature(inputIndex, parameters.getSigKey(), parameters.getScriptPubKey(), parameters.getSigHash(),\n                    parameters.isAnyoneCanPay());\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(parameters.getScriptPubKey())) {\n            TransactionSignature signature = calculateSignature(inputIndex, parameters.getSigKey(), parameters.getScriptPubKey(), parameters.getSigHash(),\n                    parameters.isAnyoneCanPay());\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, parameters.getSigKey()));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(parameters.getScriptPubKey())) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(parameters.getSigKey());"
            },
            {
                "fromLine": 935,
                "toLine": 1029,
                "oldContent": "            input.setScriptSig(ScriptBuilder.createEmpty());\n            input.setWitness(TransactionWitness.redeemP2WPKH(signature, sigKey));\n        } else {\n            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, \"Don't know how to sign for this kind of scriptPubKey: \" + scriptPubKey);\n        }\n        return input;\n    }\n\n    /**\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey, SigHash, boolean)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, null, sigKey, sigHash, anyoneCanPay);\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization.\n     * Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param amount The amount of the output (which is part of the signature hash for segwit)\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, amount, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, null, sigKey);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key. Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey) {\n        return addSignedInput(output, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key.\n     * @see Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey, SigHash, boolean)\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey, SigHash sigHash, boolean anyoneCanPay) {\n        Objects.requireNonNull(output.getValue(), \"TransactionOutput.getValue() must not be null\");\n        checkState(output.getValue().value > 0, () ->\n                \"transactionOutput.getValue() must not be greater than zero\");\n        return addSignedInput(output.getOutpointFor(), output.getScriptPubKey(), output.getValue(), sigKey, sigHash, anyoneCanPay);\n    }\n\n    /**\n     * Removes all the outputs from this transaction.\n     * Note that this also invalidates the length attribute\n     */\n    public void clearOutputs() {\n        for (TransactionOutput output : outputs) {\n            output.setParent(null);\n        }\n        outputs.clear();\n    }\n\n    /**\n     * Adds the given output to this transaction. The output must be completely initialized. Returns the given output.\n     */\n    public TransactionOutput addOutput(TransactionOutput to) {",
                "newContent": "            input.setScriptSig(ScriptBuilder.createEmpty());\n            input.setWitness(TransactionWitness.redeemP2WPKH(signature, parameters.getSigKey()));\n        } else {\n            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, \"Don't know how to sign for this kind of scriptPubKey: \" + parameters.getScriptPubKey());\n        }\n        return input;\n    }\n\n    /**\n     * @param parameters Parameters required to add a new and fully signed input\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(TransactionInputParameters)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionInputParameters parameters) throws ScriptException {\n        return addSignedInput(parameters.getPrevOut(), parameters.getScriptPubKey(), parameters.getAmount(), parameters.getSigKey(), parameters.getSigHash(), parameters.isAnyoneCanPay());\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization.\n     * Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param parameters Parameters required to add a new and fully signed input\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionInputParameters parameters) throws ScriptException {\n        return addSignedInput(parameters.getPrevOut(), parameters.getScriptPubKey(), parameters.getAmount(), parameters.getSigKey());\n    }\n\n    /**\n     * @param parameters Parameters required to add a new and fully signed input\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubSarameters.getPrevOut(), parameters.getScriptPubKey(), parameters.getSigKey());\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key. Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey) {\n        return addSignedInput(output, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key.\n     * @see Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey, SigHash, boolean)\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey, SigHash sigHash, boolean anyoneCanPay) {\n        Objects.requireNonNull(output.getValue(), \"TransactionOutput.getValue() must not be null\");\n        checkState(output.getValue().value > 0, () ->\n                \"transactionOutput.getValue() must not be greater than zero\");\n        return addSignedInput(output.getOutpointFor(), output.getScriptPubKey(), output.getValue(), sigKey, sigHash, anyoneCanPay);\n    }\n\n    /**\n     * Removes all the outputs from this transaction.\n     * Note that this also invalidates the length attribute\n     */\n    public void clearOutputs() {\n        for (TransactionOutput output : outputs) {\n            output.setParent(null);\n        }\n        outputs.clear();\n    }\n\n    /**\n     * Adds the given output to this transaction. The output must be completely initialized. Returns the given output.\n     */\n    public TransactionOutput addOutput(TransactionOutput to) {"
            },
            {
                "fromLine": 1053,
                "toLine": 1197,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1255,
                "toLine": 1375,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/testing/FakeTxBuilder.java": [
            {
                "fromLine": 255,
                "toLine": 351,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/kits/WalletAppKit.java": [
            {
                "fromLine": 73,
                "toLine": 123,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 157,
                "toLine": 224,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/utils/BtcFormat.java": [
            {
                "fromLine": 949,
                "toLine": 989,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1043,
                "toLine": 1210,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/script/Script.java": [
            {
                "fromLine": 893,
                "toLine": 934,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1402,
                "toLine": 1480,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1512,
                "toLine": 1554,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1564,
                "toLine": 1606,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1657,
                "toLine": 1698,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1722,
                "toLine": 1763,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/core/AbstractBlockChain.java": [
            {
                "fromLine": 462,
                "toLine": 503,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 563,
                "toLine": 603,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/wallet/Wallet.java": [
            {
                "fromLine": 362,
                "toLine": 444,
                "oldContent": "",
                "newContent": ""
            },
            {
               "fromLine": 577,
                "toLine": 636,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 1939,
                "toLine": 1979,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 2051,
                "toLine": 2130,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 2364,
                "toLine": 2421,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 3646,
                "toLine": 3686,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/test/java/org/bitcoinj/base/Bech32Test.java": [
            {
                "fromLine": 117,
                "toLine": 168,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/base/Sha256Hash.java": [
            {
                "fromLine": 159,
                "toLine": 236,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/base/internal/ByteUtils.java": [
            {
                "fromLine": 162,
                "toLine": 202,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 222,
                "toLine": 262,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/test/java/org/bitcoinj/core/BlockChainTest.java": [
            {
                "fromLine": 123,
                "toLine": 177,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/core/CheckpointManager.java": [
            {
                "fromLine": 216,
                "toLine": 277,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/test/java/org/bitcoinj/core/FullBlockTestGenerator.java": [
            {
                "fromLine": 1744,
                "toLine": 1806,
                "oldContent": "",
                "newContent": ""
            }
        ],
        "core/src/main/java/org/bitcoinj/core/NetworkParameters.java": [
            {
                "fromLine": 35,
                "toLine": 86,
                "oldContent": "",
                "newContent