{
    "refactorings": {
        "core/src/main/java/org/bitcoinj/core/Transaction.java": [
            {
                "fromLine": 891,
                "toLine": 932,
                "oldContent": "    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (amount == null || amount.value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, prevOut, amount);\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, sigKey));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);",
                "newContent": "    public TransactionInput addSignedInput(TransactionInputSigningData signingData) throws ScriptException {\n        TransactionOutPoint prevOut = signingData.getPrevOut();\n        Script scriptPubKey = signingData.getScriptPubKey();\n        Coin amount = signingData.getAmount();\n        ECKey sigKey = signingData.getSigKey();\n        SigHash sigHash = signingData.getSigHash();\n        boolean anyoneCanPay = signingData.isAnyoneCanPay();\n\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (amount == null || amount.value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, prevOut, amount);\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, sigKey));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);"
            }
        ]
    },
    "extractedClasses": {
        "TransactionInputSigningData.java": "public class TransactionInputSigningData {\n    private final TransactionOutPoint prevOut;\n    private final Script scriptPubKey;\n    private final Coin amount;\n    private final ECKey sigKey;\n    private final SigHash sigHash;\n    private final boolean anyoneCanPay;\n\n    public TransactionInputSigningData(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey, SigHash sigHash, boolean anyoneCanPay) {\n        this.prevOut = prevOut;\n        this.scriptPubKey = scriptPubKey;\n        this.amount = amount;\n        this.sigKey = sigKey;\n        this.sigBoot = SigHash;\n        this.anyoneCanPay = anyoneCanPay;\n    }\n\n    public TransactionOutPoint getPrevOut() {\n        return prevOut;\n    }\n\n    public Script getScriptPubKey() {\n        return scriptPubKey;\n    }\n\n    public Coin getAmount() {\n        return amount;\n    }\n\n    public ECKey getSigKey() {\n        return sigKey;\n    }\n\n    public SigHash getSigHash() {\n        return sigHash;\n    }\n\n    public boolean isAnyoneCanPay() {\n        return anyoneCanPay;\n    }\n}"
    }
}