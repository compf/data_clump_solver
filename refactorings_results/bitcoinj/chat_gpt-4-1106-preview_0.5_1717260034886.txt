{
    "refactorings":{
        "core/src/main/java/org/bitcoinj/core/Transaction.java": [
            {
                "fromLine": 891,
                "toLine": 932,
                "oldContent": "    public TransactionInput addInput(Sha256Hash spendTxHash, long outputIndex, Script script) {\n        return addInput(new TransactionInput(this, script.program(), new TransactionOutPoint(outputIndex, spendTxHash)));\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization. Please refer to general documentation on Bitcoin scripting and contracts\n     * to understand the values of sigHash and anyoneCanPay: otherwise you can use the other form of this method\n     * that sets them to typical defaults.\n     *\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param amount The amount of the output (which is part of the signature hash for segwit)\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (amount == null || amount.value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, prevOut, amount);\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(scriptPubKey)) {\n            TransactionSignature signature = calculateSignature(inputIndex, sigKey, scriptPubKey, sigHash,\n                    anyoneCanPay);\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, sigKey));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);",
                "newContent": "    public TransactionInput addInput(TransactionInputParameters params) {\n        return addInput(new TransactionInput(this, params.getScript().program(), new TransactionOutPoint(params.getOutputIndex(), params.getSpendTxHash())));\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization. Please refer to general documentation on Bitcoin scripting and contracts\n     * to understand the values of sigHash and anyoneCanPay: otherwise you can use the other form of this method\n     * that sets them to typical defaults.\n     *\n     * @param params Input parameters containing a reference to the output being spent, the scriptPubKey of the output,\n     *               the amount of the output (which is part of the signature hash for segwit), the signing key,\n     *               and flags for how the transaction hash is calculated and anyone-can-pay hashing\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(SignedInputParameters params) throws ScriptException {\n        // Verify the API user didn't try to do operations out of order.\n        checkState(!outputs.isEmpty(), () ->\n                \"attempting to sign tx without outputs\");\n        if (params.getAmount() == null || params.getAmount().value <= 0) {\n            log.warn(\"Illegal amount value. Amount is required for SegWit transactions.\");\n        }\n        TransactionInput input = new TransactionInput(this, new byte[] {}, params.getPrevOut(), params.getAmount());\n        addInput(input);\n        int inputIndex = inputs.size() - 1;\n        if (ScriptPattern.isP2PK(params.getScriptPubKey())) {\n            TransactionSignature signature = calculateSignature(inputIndex, params.getSigKey(), params.getScriptPubKey(), params.getSigHash(),\n                    params.isAnyoneCanPay());\n            input.setScriptSig(ScriptBuilder.createInputScript(signature));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2PKH(params.getScriptPubKey())) {\n            TransactionSignature signature = calculateSignature(inputIndex, params.getSigKey(), params.getScriptPubKey(), params.getSigHash(),\n                    params.isAnyoneCanPay());\n            input.setScriptSig(ScriptBuilder.createInputScript(signature, params.getSigKey()));\n            input.setWitness(null);\n        } else if (ScriptPattern.isP2WPKH(params.getScriptPubKey())) {\n            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(params.getSigKey());"
            },
            {
                "fromLine": 935,
                "toLine": 1029,
                "oldContent": "            input.setScriptSig(ScriptBuilder.createEmpty());\n            input.setWitness(TransactionWitness.redeemP2WPKH(signature, sigKey));\n        } else {\n            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, \"Don't know how to sign for this kind of scriptPubKey: \" + scriptPubKey);\n        }\n        return input;\n    }\n\n    /**\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey, SigHash, boolean)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, null, sigKey, sigHash, anyoneCanPay);\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization.\n     * Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param amount The amount of the output (which is part of the signature hash for segwit)\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, amount, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey) throws ScriptException {\n        return addSignedInput(prevOut, scriptPubKey, null, sigKey);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key. Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey) {\n        return addSignedInput(output, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key.\n     * @see Transaction#addSignedInput(TransactionOutPoint, Script, Coin, ECKey, SigHash, boolean)\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey, SigHash sigHash, boolean anyoneCanPay) {\n        Objects.requireNonNull(output.getValue(), \"TransactionOutput.getValue() must not be null\");\n        checkState(output.getValue().value > 0, () ->\n                \"transactionOutput.getValue() must not be greater than zero\");\n        return addSignedInput(output.getOutPointFor(), output.getScriptPubKey(), output.getValue(), sigKey, sigHash, anyoneCanPay);\n    }\n\n    /**\n     * Removes all the outputs from this transaction.\n     * Note that this also invalidates the length attribute\n     */\n    public void clearOutputs() {\n        for (TransactionOutput output : outputs) {\n            output.setParent(null);\n        }\n        outputs.clear();\n    }\n\n    /**\n     * Adds the given output to this transaction. The output must be completely initialized. Returns the given output.\n     */\n    public TransactionOutput addOutput(TransactionOutput to) {",
                "newContent": "            input.setScriptSig(ScriptBuilder.createEmpty());\n            input.setWitness(TransactionWitness.redeemP2WPKH(signature, params.getSigKey()));\n        } else {\n            throw new ScriptException(ScriptError.SCRIPT_ERR_UNKNOWN_ERROR, \"Don't know how to sign for this kind of scriptPubKey: \" + params.getScriptPubKey());\n        }\n        return input;\n    }\n\n    /**\n     * @param params Input parameters containing a reference to the output being spent, the scriptPubKey of the output,\n     *               the amount of the output (which is part of the signature hash for segwit), the signing key,\n     *               and flags for how the transaction hash is calculated and anyone-can-pay hashing\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(SignedInputParameters)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey,\n                                           SigHash sigHash, boolean anyoneCanPay) throws ScriptException {\n        SignedInputParameters params = new SignedInputParameters(prevOut, scriptPubKey, null, sigKey, sigHash, anyoneCanPay);\n        return addSignedInput(params);\n    }\n\n    /**\n     * Adds a new and fully signed input for the given parameters. Note that this method is <b>not</b> thread safe\n     * and requires external synchronization.\n     * Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param amount The amount of the output (which is part of the signature hash for segwit)\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     */\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey) throws ScriptException {\n        SignedInputParameters params = new SignedInputParameters(prevOut, scriptPubKey, amount, sigKey, SigHash.ALL, false);\n        return addSignedInput(params);\n    }\n\n    /**\n     * @param prevOut A reference to the output being spent\n     * @param scriptPubKey The scriptPubKey of the output\n     * @param sigKey The signing key\n     * @return The newly created input\n     * @throws ScriptException if the scriptPubKey is something we don't know how to sign.\n     * @deprecated Use {@link Transaction#addSignedInput(SignedInputParameters)}\n     */\n    @Deprecated\n    public TransactionInput addSignedInput(TransactionOutPoint prevOut, Script scriptPubKey, ECKey sigKey) throws ScriptException {\n        SignedInputParameters params = new SignedInputParameters(prevOut, scriptPubKey, null, sigKey);\n        return addSignedInput(params);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key. Defaults to {@link SigHash#ALL} and \"false\" for the anyoneCanPay flag. This is normally what you want.\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey) {\n        return addSignedInput(output, sigKey, SigHash.ALL, false);\n    }\n\n    /**\n     * Adds an input that points to the given output and contains a valid signature for it, calculated using the\n     * signing key.\n     * @see Transaction#addSignedInput(SignedInputParameters)\n     * @param output output to sign and use as input\n     * @param sigKey The signing key\n     * @param sigHash enum specifying how the transaction hash is calculated\n     * @param anyoneCanPay anyone-can-pay hashing\n     * @return The newly created input\n     */\n    public TransactionInput addSignedInput(TransactionOutput output, ECKey sigKey, SigHash sigHash, boolean anyoneCanPay) {\n        Objects.requireNonNull(output.getValue(), \"TransactionOutput.getValue() must not be null\");\n        checkState(output.getValue().value > 0, () ->\n                \"transactionOutput.getValue() must not be greater than zero\");\n        SignedInputParameters params = new SignedInputParameters(output.getOutPointFor(), output.getScriptPubKey(), output.getValue(), sigKey, sigHash, anyoneCanPay);\n        return addSignedInput(params);\n    }\n\n    /**\n     * Removes all the outputs from this transaction.\n     * Note that this also invalidates the length attribute\n     */\n    public void clearOutputs() {\n        for (TransactionOutput output : outputs) {\n            output.setParent(null);\n        }\n        outputs.clear();\n    }\n\n    /**\n     * Adds the given output to this transaction. The output must be completely initialized. Returns the given output.\n     */\n    public TransactionOutput addOutput(TransactionOutput to) {"
            }
        ]
    },
    "extractedClasses":{
        "TransactionInputParameters.java": "public class TransactionInputParameters {\n    private final Sha256Hash spendTxHash;\n    private final long outputIndex;\n    private final Script script;\n\n    public TransactionInputParameters(Sha256Hash spendTxHash, long outputIndex, Script script) {\n        this.spendTxHash = spendTxHash;\n        this.outputIndex = outputIndex;\n        this.script = script;\n    }\n\n    public Sha256Hash getSpendTxHash() { return spendTxHash; }\n    public long getOutputIndex() { return outputIndex; }\n    public Script getScript() { return script; }\n}\n",
        "SignedInputParameters.java": "public class SignedInputParameters extends TransactionInputParameters {\n    private final TransactionOutPoint prevOut;\n    private final Coin amount;\n    private final ECKey sigKey;\n    private final SigHash sigHash;\n    private final boolean anyoneCanPay;\n\n    public SignedInputParameters(TransactionOutPoint prevOut, Script scriptPubKey, Coin amount, ECKey sigKey,\n                                 SigHash sigHash, boolean anyoneCanPay) {\n        super(prevOut.getHash(), prevOut.getIndex(), scriptPubKey);\n        this.prevOut = prevOut;\n        this.amount = amount;\n        this.sigKey = sigKey;\n        this.sigHash = sigHash;\n        this.anyoneCanPay = anyoneCanPay;\n    }\n\n    public TransactionOutPoint getPrevOut() { return prevOut; }\n    public Coin getAmount() { return amount; }\n    public ECKey getSigKey() { return sigKey; }\n    public SigHash getSigHash() { return sigHash; }\n    public boolean isAnyoneCanPay() { return anyoneCanPay; }\n}\n"
    }
}