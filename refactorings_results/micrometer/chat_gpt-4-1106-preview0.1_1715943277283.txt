The two Java files `GrpcClientObservationContext.java` and `GrpcServerObservationContext.java` both contain a data clump. The fields `serviceName`, `methodName`, `fullMethodName`, `methodType`, `statusCode`, `authority`, `headers`, and `trailers` are common across these classes. To refactor the data clump, we can introduce a new class to encapsulate these fields and their associated methods.

Let's create a class called `GrpcObservationContextInfo` to hold this common information.

I will provide the content of the new class along with refactored `GrpcClientObservationContext` and `GrpcServerObservationContext` classes.

## MARKDOWN
***new file: src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcObservationContextInfo.java***
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Encapsulates the common information used in {@link GrpcClientObservationContext} and {@link GrpcServerObservationContext}.
 */
public class GrpcObservationContextInfo {

    private String serviceName;
    private String methodName;
    private String fullMethodName;
    private MethodType methodType;
    @Nullable
    private Code statusCode;
    private String authority;
    private Metadata headers;
    private Metadata trailers;

    // Constructors, getters, and setters for the fields go here.
    // ...
}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java***
Java```
package io.micrometer.core.instrument.binder.grpc;

// ... Other imports remain unchanged ...

public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcObservationContextInfo grpcInfo; // Replace individual fields with a single reference to GrpcObservationContextInfo

    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.grpcInfo = new GrpcObservationContextInfo();
    }

    // Delegate methods to GrpcObservationContextInfo class
    // ...
}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java***
Java```
package io.micrometer.core.instrument.binder.grpc;

// ... Other imports remain unchanged ...

public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcObservationContextInfo grpcInfo; // Replace individual fields with a single reference to GrpcObservationContextInfo

    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.grpcInfo = new GrpcObservationContextInfo();
    }

    // Delegate methods to GrpcObservationContextInfo class
    // ...
}
```
##END MARKDOWN

In this refactoring, I introduced a new class `GrpcObservationContextInfo` to encapsulate the common fields and methods. In both `GrpcClientObservationContext` and `GrpcServerObservationContext`, I replaced the individual fields with a single reference to an instance of `GrpcObservationContextInfo` and omitted the delegation of methods for brevity. Each getter and setter in the client and server classes should now delegate to the corresponding method on the `grpcInfo` instance. This refactor allows better code reuse and adheres to the principle of encapsulation.