In both `GrpcClientObservationContext` and `GrpcServerObservationContext` classes, we observe that they share the following common fields:

- `private String serviceName;`
- `private String methodName;`
- `private String fullMethodName;`
- `private MethodType methodType;`
- `@Nullable private Code statusCode;`
- `@Nullable private String authority;`
- `private Metadata headers;`
- `private Metadata trailers;`

As these classes show a data clump based on the definition (3) "Two different classes have at least three common fields", we should introduce a new class that encapsulates these fields.

Let's create a new class `GrpcObservationContextInfo` which will contain these common fields and their getters and setters.

Here's the content of the new class:

```java
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Common class encapsulating gRPC observation context information.
 */
public class GrpcObservationContextInfo {
    private String serviceName;
    private String methodName;
    private String fullMethodName;
    private MethodType methodType;
    @Nullable
    private Code statusCode;
    @Nullable
    private String authority;
    private Metadata headers;
    private Metadata trailers;

    // Getters and setters for the fields
    // ...
}
```

We would then refactor the `GrpcClientObservationContext` and `GrpcServerObservationContext` classes to hold an instance of `GrpcObservationContextInfo` and delegate the access to the common fields through this instance.

Due to the length of the code and repetition, I will only show the refactored code for the `GrpcClientObservationContext` class, and similar changes would apply to the `GrpcServerObservationContext` class.

Refactored `GrpcClientObservationContext` class:

```java
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Setter;
import io.micrometer.observation.transport.RequestReplySenderContext;

/**
 * {@link Observation.Context} for gRPC client.
 */
public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {
    private GrpcObservationContextInfo grpcObservationContextInfo;
    
    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.grpcObservationContextInfo = new GrpcObservationContextInfo();
    }

    // Getters and setters will delegate to the `grpcObservationContextInfo` instance
    // ...
}
```

Applying these changes reduces code duplication and improves maintainability.

Now apply the same refactoring to the `GrpcServerObservationContext` class, and you will end up with two separate classes that are much cleaner and delegate their common functionality to the `GrpcObservationContextInfo` class.