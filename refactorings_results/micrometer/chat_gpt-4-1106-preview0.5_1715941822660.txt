It appears that `GrpcClientObservationContext` and `GrpcServerObservationContext` both contain the same fields: `serviceName`, `methodName`, `fullMethodName`, `methodType`, `statusCode`, `authority`, `headers`, and `trailers`. This represents a data clump as these fields are common across the two different classes. To refactor this, we can extract these fields into a new class and update the two original classes to use that new class instead. Let's call the new class `GrpcObservationContextDetails`.

We'll create the new class and modify both `GrpcClientObservationContext` and `GrpcServerObservationContext` to use it.

## MARKDOWN
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcObservationContextDetails.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Shared context details for gRPC client and server observations.
 *
 * @since 1.10.0
 */
public class GrpcObservationContextDetails {

    private String serviceName;
    private String methodName;
    private String fullMethodName;
    private MethodType methodType;
    @Nullable
    private Code statusCode;
    @Nullable
    private String authority;
    private Metadata headers;
    private Metadata trailers;

    // Getters and setters for all fields

    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public String getMethodName() {
        return methodName;
    }

    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public String getFullMethodName() {
        return fullMethodName;
    }

    public void setFullMethodName(String fullMethodName) {
        this.fullMethodName = fullMethodName;
    }

    public MethodType getMethodType() {
        return methodType;
    }

    public void setMethodType(MethodType methodType) {
        this.methodType = methodType;
    }

    @Nullable
    public Code getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(Code statusCode) {
        this.statusCode = statusCode;
    }

    @Nullable
    public String getAuthority() {
        return authority;
    }

    public void setAuthority(String authority) {
        this.authority = authority;
    }

    public Metadata getHeaders() {
        return headers;
    }

    public void setHeaders(Metadata headers) {
        this.headers = headers;
    }

    public Metadata getTrailers() {
        return trailers;
    }

    public void setTrailers(Metadata trailers) {
        this.trailers = trailers;
    }
}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

// ... (other imports remain unchanged)

public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcObservationContextDetails details;
    
    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.details = new GrpcObservationContextDetails();
    }

    // Delegate methods to GrpcObservationContextDetails
    
    public String getServiceName() {
        return this.details.getServiceName();
    }

    public void setServiceName(String serviceName) {
        this.details.setServiceName(serviceName);
    }

    // ... (other delegate methods for methodName, fullMethodName, etc., follow the same pattern)

    public Metadata getHeaders() {
        return this.details.getHeaders();
    }

    public void setHeaders(Metadata headers) {
        this.details.setHeaders(headers);
    }

    public Metadata getTrailers() {
        return this.details.getTrailers();
    }

    public void setTrailers(Metadata trailers) {
        this.details.setTrailers(trailers);
    }
    
}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

// ... (other imports remain unchanged)

public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcObservationContextDetails details;
    
    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.details = new GrpcObservationContextDetails();
    }

    // Delegate methods to GrpcObservationContextDetails
    
    public String getServiceName() {
        return this.details.getServiceName();
    }

    public void setServiceName(String serviceName) {
        this.details.setServiceName(serviceName);
    }

    // ... (other delegate methods for methodName, fullMethodName, etc., follow the same pattern)

    public Metadata getHeaders() {
        return this.details.getHeaders();
    }

    public void setHeaders(Metadata headers) {
        this.details.setHeaders(headers);
    }

    public Metadata getTrailers() {
        return this.details.getTrailers();
    }

    public void setTrailers(Metadata trailers) {
        this.details.setTrailers(trailers);
    }
    
}
```
##END MARKDOWN

In summary, I have created a new class `GrpcObservationContextDetails` that contains the common fields identified as a data clump. Both `GrpcClientObservationContext` and `GrpcServerObservationContext` now have an instance of `GrpcObservationContextDetails` and delegate the respective methods to this instance. This refactoring removes the duplication and makes the common context details explicit in their own class.