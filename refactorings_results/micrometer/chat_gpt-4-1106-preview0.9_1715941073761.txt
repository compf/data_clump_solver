Both `GrpcClientObservationContext.java` and `GrpcServerObservationContext.java` contain a data clump with at least three common fields: `serviceName`, `methodName`, `fullMethodName`, `methodType`, `statusCode`, `authority`, `headers`, and `trailers`. These fields can be refactored into a separate class to represent the gRPC method invocation context. Let's create a new class called `GrpcMethodInvocationContext`.

I will refactor the two files to use instances of `GrpcMethodInvocationContext` instead of the individual fields and update all usages accordingly. I'll also provide the content of the extracted class.

## MARKDOWN
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Setter;
import io.micrometer.observation.transport.RequestReplySenderContext;

public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcMethodInvocationContext methodInvocationContext;
    private Metadata headers;
    private Metadata trailers;

    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.methodInvocationContext = new GrpcMethodInvocationContext();
    }

    // Delegate getters and setters to the 'methodInvocationContext' instance
    public String getServiceName() { return methodInvocationContext.getServiceName(); }
    public void setServiceName(String serviceName) { methodInvocationContext.setServiceName(serviceName); }
    // Other getters and setters for 'methodName', 'fullMethodName', 'methodType', 'statusCode', 'authority'...

    public Metadata getHeaders() { return this.headers; }
    public void setHeaders(Metadata headers) { this.headers = headers; }
    public Metadata getTrailers() { return this.trailers; }
    public void setTrailers(Metadata trailers) { this.trailers = trailers; }

}
```
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Getter;
import io.micrometer.observation.transport.RequestReplyReceiverContext;

public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcMethodInvocationContext methodInvocationContext;
    private Metadata headers;
    private Metadata trailers;

    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.methodInvocationContext = new GrpcMethodInvocationContext();
    }

    // Delegate getters and setters to the 'methodInvocationContext' instance
    public String getServiceName() { return methodInvocationContext.getServiceName(); }
    public void setServiceName(String serviceName) { methodInvocationContext.setServiceName(serviceName); }
    // Other getters and setters for 'methodName', 'fullMethodName', 'methodType', 'statusCode', 'authority'...

    public Metadata getHeaders() { return this.headers; }
    public void setHeaders(Metadata headers) { this.headers = headers; }
    public Metadata getTrailers() { return this.trailers; }
    public void setTrailers(Metadata trailers) { this.trailers = trailers; }

}
```
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcMethodInvocationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

public class GrpcMethodInvocationContext {

    private String serviceName;
    private String methodName;
    private String fullMethodName;
    private MethodType methodType;
    @Nullable private Code statusCode;
    private String authority;

    // Getters and setters for all fields
    public String getServiceName() { return serviceName; }
    public void setServiceName(String serviceName) { this.serviceName = serviceName; }
    // Other getters and setters for 'methodName', 'fullMethodName', 'methodType', 'statusCode', 'authority'...

}
```
##END MARKDOWN

I created a new class `GrpcMethodInvocationContext` to encapsulate the common fields and included it in both `GrpcClientObservationContext` and `GrpcServerObservationContext`. I also provided the getters and setters for the encapsulated fields in the new class and updated the two context classes to delegate calls to the new `GrpcMethodInvocationContext` instance. The `headers` and `trailers` fields remain in the original contexts since they might have differing semantics in the client and server contexts.