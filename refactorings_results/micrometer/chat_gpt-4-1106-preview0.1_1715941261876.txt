Both `GrpcClientObservationContext.java` and `GrpcServerObservationContext.java` contain the following common fields:

1. `serviceName` (String)
2. `methodName` (String)
3. `fullMethodName` (String)
4. `methodType` (MethodType)
5. `statusCode` (Code) - Nullable
6. `authority` (String) - Nullable
7. `headers` (Metadata)
8. `trailers` (Metadata)

This indicates that there's a data clump within these classes which should be refactored. To address this, I will create a new class called `GrpcCallMetadata` that will encapsulate these fields and their associated getter and setter methods.

Below is the refactored code for both classes as well as the content of the extracted class `GrpcCallMetadata`.

## MARKDOWN
*** micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcCallMetadata.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Encapsulates gRPC call metadata.
 */
public class GrpcCallMetadata {

    private String serviceName;
    private String methodName;
    private String fullMethodName;
    private MethodType methodType;
    @Nullable
    private Code statusCode;
    @Nullable
    private String authority;
    private Metadata headers;
    private Metadata trailers;

    // Getters and setters for all fields
    // ...
}
```

*** micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Setter;
import io.micrometer.observation.transport.RequestReplySenderContext;

/**
 * {@link Observation.Context} for gRPC client.
 */
public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcCallMetadata grpcCallMetadata;

    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.grpcCallMetadata = new GrpcCallMetadata();
    }

    // Delegate methods to access fields through grpcCallMetadata
    // ...
}
```

*** micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Getter;
import io.micrometer.observation.transport.RequestReplyReceiverContext;

/**
 * {@link Observation.Context} for gRPC server.
 */
public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcCallMetadata grpcCallMetadata;

    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.grpcCallMetadata = new GrpcCallMetadata();
    }

    // Delegate methods to access fields through grpcCallMetadata
    // ...
}
```
##END MARKDOWN

In the `GrpcCallMetadata` class, all the common fields along with getters and setters would be defined. The delegate methods in `GrpcClientObservationContext` and `GrpcServerObservationContext` would simply forward the calls to the `grpcCallMetadata` instance. This refactoring replaces the data clump with a meaningful object that groups related data together, improving code organization and readability.