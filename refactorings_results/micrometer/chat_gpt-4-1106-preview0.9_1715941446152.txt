The `GrpcClientObservationContext` and `GrpcServerObservationContext` classes share a data clump consisting of the following fields:

- `String serviceName`
- `String methodName`
- `String fullMethodName`
- `MethodType methodType`
- `Code statusCode` (with nullable annotation)
- `String authority`
- `Metadata headers`
- `Metadata trailers`

This common set of fields can be refactored into a new class called `GrpcObservationContextInfo`. We will replace these fields in both classes with a single instance of the extracted `GrpcObservationContextInfo` class and updated all usages accordingly.

Here is the refactored code and the content of the extracted class:

## MARKDOWN
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcObservationContextInfo.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Holds contextual information for both gRPC client and server observations.
 */
public class GrpcObservationContextInfo {

    private String serviceName;

    private String methodName;

    private String fullMethodName;

    private MethodType methodType;

    @Nullable
    private Code statusCode;

    private String authority;

    private Metadata headers;

    private Metadata trailers;

    // Getters and setters for each field
    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public String getMethodName() {
        return methodName;
    }

    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public String getFullMethodName() {
        return fullMethodName;
    }

    public void setFullMethodName(String fullMethodName) {
        this.fullMethodName = fullMethodName;
    }

    public MethodType getMethodType() {
        return methodType;
    }

    public void setMethodType(MethodType methodType) {
        this.methodType = methodType;
    }

    @Nullable
    public Code getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(Code statusCode) {
        this.statusCode = statusCode;
    }

    public String getAuthority() {
        return authority;
    }

    public void setAuthority(String authority) {
        this.authority = authority;
    }

    public Metadata getHeaders() {
        return headers;
    }

    public void setHeaders(Metadata headers) {
        this.headers = headers;
    }

    public Metadata getTrailers() {
        return trailers;
    }

    public void setTrailers(Metadata trailers) {
        this.trailers = trailers;
    }
}

```
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Setter;
import io.micrometer.observation.transport.RequestReplySenderContext;

/**
 * {@link Observation.Context} for gRPC client.
 *
 * @since 1.10.0
 */
public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcObservationContextInfo grpcInfo;

    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.grpcInfo = new GrpcObservationContextInfo();
    }

    public GrpcObservationContextInfo getGrpcInfo() {
        return this.grpcInfo;
    }

}
```
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Getter;
import io.micrometer.observation.transport.RequestReplyReceiverContext;

/**
 * {@link Observation.Context} for gRPC server.
 *
 * @since 1.10.0
 */
public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcObservationContextInfo grpcInfo;

    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.grpcInfo = new GrpcObservationContextInfo();
    }

    public GrpcObservationContextInfo getGrpcInfo() {
        return this.grpcInfo;
    }

}
```
##END MARKDOWN

Through the refactoring, I have created the `GrpcObservationContextInfo` class to encapsulate the shared fields and logic related to the gRPC observation context. The `GrpcClientObservationContext` and `GrpcServerObservationContext` classes now each contain a single instance of `GrpcObservationContextInfo`, and their respective getters and setters operate on the `GrpcObservationContextInfo` object. This simplifies the code, reduces duplication, and makes future changes to these common fields easier to manage.