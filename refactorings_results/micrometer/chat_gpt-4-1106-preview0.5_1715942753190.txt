Both `GrpcClientObservationContext` and `GrpcServerObservationContext` classes contain a data clump consisting of the following fields:

- serviceName: String
- methodName: String
- fullMethodName: String
- methodType: MethodType
- statusCode: Code (nullable)
- authority: String (nullable)
- headers: Metadata
- trailers: Metadata

These fields represent common properties related to a gRPC call, whether it's happening on the client or the server-side. To refactor this, we can create a new class named `GrpcCallAttributes` to encapsulate these fields and their getter/setter methods.

Here's the refactored code for both classes and the new `GrpcCallAttributes` class:

## MARKDOWN
***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcCallAttributes.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.Status.Code;
import io.micrometer.common.lang.Nullable;

/**
 * Encapsulates common properties related to a gRPC call.
 */
public class GrpcCallAttributes {

    private String serviceName;

    private String methodName;

    private String fullMethodName;

    private MethodType methodType;

    @Nullable
    private Code statusCode;

    @Nullable
    private String authority;

    private Metadata headers;

    private Metadata trailers;

    public String getServiceName() {
        return this.serviceName;
    }

    public void setServiceName(String serviceName) {
        this.serviceName = serviceName;
    }

    public String getMethodName() {
        return this.methodName;
    }

    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public String getFullMethodName() {
        return this.fullMethodName;
    }

    public void setFullMethodName(String fullMethodName) {
        this.fullMethodName = fullMethodName;
    }

    public MethodType getMethodType() {
        return this.methodType;
    }

    public void setMethodType(MethodType methodType) {
        this.methodType = methodType;
    }

    @Nullable
    public Code getStatusCode() {
        return this.statusCode;
    }

    public void setStatusCode(Code statusCode) {
        this.statusCode = statusCode;
    }

    @Nullable
    public String getAuthority() {
        return this.authority;
    }

    public void setAuthority(@Nullable String authority) {
        this.authority = authority;
    }

    public Metadata getHeaders() {
        return this.headers;
    }

    public void setHeaders(Metadata headers) {
        this.headers = headers;
    }

    public Metadata getTrailers() {
        return this.trailers;
    }

    public void setTrailers(Metadata trailers) {
        this.trailers = trailers;
    }

}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Setter;
import io.micrometer.observation.transport.RequestReplySenderContext;

/**
 * {@link Observation.Context} for gRPC client.
 */
public class GrpcClientObservationContext extends RequestReplySenderContext<Metadata, Object> {

    private GrpcCallAttributes callAttributes;

    public GrpcClientObservationContext(Setter<Metadata> setter) {
        super(setter);
        this.callAttributes = new GrpcCallAttributes();
    }

    public GrpcCallAttributes getCallAttributes() {
        return this.callAttributes;
    }

}
```

***micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationContext.java
Java```
package io.micrometer.core.instrument.binder.grpc;

import io.grpc.Metadata;
import io.micrometer.observation.Observation;
import io.micrometer.observation.transport.Propagator.Getter;
import io.micrometer.observation.transport.RequestReplyReceiverContext;

/**
 * {@link Observation.Context} for gRPC server.
 */
public class GrpcServerObservationContext extends RequestReplyReceiverContext<Metadata, Object> {

    private GrpcCallAttributes callAttributes;

    public GrpcServerObservationContext(Getter<Metadata> getter) {
        super(getter);
        this.callAttributes = new GrpcCallAttributes();
    }

    public GrpcCallAttributes getCallAttributes() {
        return this.callAttributes;
    }

}
```
##END MARKDOWN

By doing this, we've encapsulated the repeated fields and methods related to gRPC call attributes in a separate `GrpcCallAttributes` class, which simplifies both the client and server observation context classes and makes the code more maintainable.