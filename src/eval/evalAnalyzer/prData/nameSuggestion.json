{
  "https://github.com/JabRef/jabref": {
    "url": "https://github.com/JabRef/jabref",
    "forkUrl": "https://github.com/compf/jabref",
    "occurence": 12,
    "prUrl": "https://github.com/JabRef/jabref/pull/11181",
    "state": "closed",
    "merged": true,
    "size": 4,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -13,
      -14,
      -8,
      -15
    ],
    "key": "parameters_to_parameters_data_clump-src/main/java/org/jabref/model/openoffice/uno/UnoBookmark.java-org.jabref.model.openoffice.uno.UnoBookmark/method/create(org.jabref.model.openoffice.uno.com.sun.star.text.XTextDocument doc, java.lang.String name, org.jabref.model.openoffice.uno.com.sun.star.text.XTextRange range, boolean absorb)-org.jabref.model.openoffice.uno.UnoNamed/method/insertNamedTextContent(org.jabref.model.openoffice.uno.com.sun.star.text.XTextDocument doc, java.lang.String service, java.lang.String name, org.jabref.model.openoffice.uno.com.sun.star.text.XTextRange range, boolean absorb)-docnamerangeabsorb",
    "affected_files": 4,
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "@compf please cite JabRef in your thesis",
        " Use the citation as provided at https://docs",
        "jabref",
        "org/faq"
      ],
      [
        "@compf We have guideline to setup IntelliJ so that checkstyle won't complain at https://devdocs",
        "jabref",
        "org/getting-into-the-code/guidelines-for-setting-up-a-local-workspace/intellij-13-code-style",
        "html",
        " - Sorry, that this is such an effort",
        " We did not dare to check in IntelliJ configs, because we fear that for each update of IntelliJ, the configs will change",
        " We do not want to force our dozens of student contributors to fiddle around with their IntelliJ",
        ""
      ],
      [
        "Thank you very much for the feedback",
        " I will certainly cite Jabref",
        "\r\n\r\nSomehow my Checkstyle was buggy so it didn't spot these formatting issues",
        " After reinstalling, it worked"
      ],
      [
        "> Some more comments :)\r\n> \r\n> I think, I should re-do the survey",
        " The LLM is very bad in keeping `@param` comments",
        " I, formyself, understood it now:\r\n> \r\n> * There are `@param` comments for interpretation of the given object at each method\r\n> * They explain how the method behaves\r\n> * Thus, the comment should be moved into a newly created `@param` annotation for the called method",
        "\r\n> * If the `@param` describes the parameter (and not the treatment of the parameter inside the method), it should be moved to the newly created class\r\n> \r\n> (I hope, this was somehow clear)\r\n\r\nI think your first survey was fine",
        " I have to admit that not everything was done by an LLM, in your case many things were performed by a tool I wrote, and which has still some strange bugs I need to fix, so I had to do a little manual refactoring (with associated mistakes), so you should not blame the LLM",
        " :)\r\nI can try to fix the other issues if I find time, but keep in mind that I do not have an insight in your project like you do, and the feedback to the first commit is what's important for my study",
        " Nevertheless, your projects is very interesting and I use Jabref often for managing  scientific sources, so maybe I will contribute in other ways :)"
      ],
      [
        "@compf Happy start into a new week",
        " May I ask if you'll find time to finish this PR? ðŸ˜…"
      ],
      [
        "Oh, I totally forgot",
        " I will finish the pull request by the end of this week if that's ok :) "
      ]
    ],
    "reviewCommentsRaw": [
      [
        "The comments should moved to the new class"
      ],
      [
        "This can be a record, cant it?"
      ],
      [
        "Check whether these comments can be moved to the new class, too",
        ""
      ],
      [
        "For a good refactoring `true` and `false` would be replaced by an `enum` containing `ABSORB` and (probably) `KEEP`",
        " This is out of scope of this project, just as hint",
        ""
      ],
      [
        "Ah, LOL, the LLM puts different variable name for same variable types (`docAnn` versus `annotation` versus `documentAnnotation` below)",
        " I would propose to use always the full class name ( `documentAnnotation`) consistently",
        "\r\n\r\nA good LLM could recognize which variable name style is used and apply that style"
      ],
      [
        "Can be removed, because the variable name also says that",
        "\r\n\r\n(Moreover, `@param` should have been put above `@return`",
        " Our checkstyle seems to miss that configuration :p)"
      ],
      [
        "Please move the comment \r\n\r\n    For the ReferenceMark, Bookmark, TextSection",
        " If the name is already in use, LibreOffice may change the name",
        "\r\n\r\nto here",
        ""
      ],
      [
        "Move the class one level up",
        " It just consists of classes residing in package `com",
        "sun",
        "star",
        "text` and therefore is not directly part of `uno`, is it?\r\n\r\nIf it is, add a small comment to the package to explain why the class resides here",
        "\r\n\r\n(Your survery asked about that and therefore I am thinking more about it than I should :p)"
      ],
      [
        "Some comments say: `If an XTextSection by that name already exists, LibreOffice (6",
        "4",
        "6",
        "2) creates a section with a name different from what we requested, in \"Section {number}\" format",
        "`",
        " Maybe, that should be put here, too? Or to the method getting this new object as parameter? - In all cases, the comment of the parameter should not get lost",
        ""
      ],
      [
        "https://devdocs",
        "jabref",
        "org/code-howtos/openoffice/code-reorganization",
        "html\r\nuno : helpers for various tasks via UNO",
        "\r\nThese are conceptually independent of JabRef code and logic",
        ""
      ]
    ],
    "likertData": [
      [
        {
          "scale": 3
        },
        {
          "scale": 3,
          "comments": "A developer needs to have the tool available in the IDE - or creating pull requests. Similar to OpenRewrite of Moderne. In contrast to OpenRewrite, code created by LLMs needs to have oversights.",
          "keywords": [
            -29
          ]
        },
        {
          "scale": 1,
          "comments": "- Good, because new class factored out\n- Neutral, because a comparison to IntelliJs feature \"Extract prameter object\" (https://www.jetbrains.com/help/idea/extract-into-class-refactorings.html#extract_parameter_object) is missing. I think, IntelliJ's algorithm might be better. Your thesis needs to include that as comparison! Maybe, an LLM can be used to identify places where to refactor and let IntelliJ do the work!\n- Bad, because Comments have not been moved\n- Bad, because basic checkstyle checks fail\n- Bad, because Java \"record\" data type not used",
          "keywords": [
            -14,
            -8,
            -13,
            30,
            -15
          ]
        },
        {
          "scale": 4
        },
        {
          "scale": 4
        },
        {
          "scale": 1
        }
      ]
    ],
    "experience": [
      {
        "project": ">20 years",
        "java": ">=10 years"
      }
    ]
  },
  "https://github.com/karatelabs/karate": {
    "url": "https://github.com/karatelabs/karate",
    "forkUrl": "https://github.com/compf/karate",
    "occurence": 2,
    "prUrl": "https://github.com/karatelabs/karate/pull/2547",
    "state": "closed",
    "merged": false,
    "size": 7,
    "key": "fields_to_fields_data_clump-karate-core/src/main/java/com/intuit/karate/core/Scenario.java-com.intuit.karate.core.Scenario-com.intuit.karate.core.ScenarioOutline-sectionnamedescriptiontagslinestepsfeature",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -1,
      -4,
      -2,
      -27,
      -31
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "@compf thanks for the details",
        " I do not find the changes helpful",
        " the original code is less verbose and more readable and maintainable (in my opinion)",
        " `Scenario` and `ScenarioOutline` are separate to mirror parts of a file format parsed by ANTLR",
        " they may be \"similar\" but they have subtle differences in how they are used, I will take a look at the survey if I can fill it"
      ],
      [
        "That's perfectly fine",
        " Thank you nevertheless for the feedback",
        " If would be great if you can fill out the survey :)"
      ],
      [
        "@compf yes I have filled out the survey"
      ]
    ],
    "reviewCommentsRaw": [],
    "likertData": [
      [
        {
          "scale": 1,
          "comments": "They may exist to represent real-word aspects, for example a) objects in the real world that may have similar properties - but need to be treated differently or that behave differently b) generated code that should not be edited by humans\n\nAlso code is structured to suit the convenience of the original author or maintainers - so I personally give that preference.",
          "keywords": [
            -4
          ]
        },
        {
          "scale": 3
        },
        {
          "scale": 1
        },
        {
          "scale": 1
        },
        {
          "scale": 0,
          "comments": "I did not like 'TestScenario' as a name."
        },
        {
          "scale": 3,
          "comments": "I most cases, side-by-side with original code is the right choice, which is what was observed."
        }
      ]
    ],
    "experience": [
      {
        "project": ">2 years",
        "java": ">10 years"
      }
    ]
  },
  "https://github.com/flyway/flyway": {
    "url": "https://github.com/flyway/flyway",
    "forkUrl": "https://github.com/compf/flyway",
    "occurence": 2,
    "prUrl": "https://github.com/flyway/flyway/pull/3870",
    "state": "open",
    "merged": false,
    "key": "fields_to_fields_data_clump-flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java-org.flywaydb.core.internal.command.DbValidate-org.flywaydb.core.internal.command.DbMigrate-configurationmigrationResolverschemadatabasecallbackExecutorschemaHistory",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "size": 5,
    "category": "nameSuggestion",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "[![CLA assistant check](https://cla-assistant",
        "io/pull/badge/signed)](https://cla-assistant",
        "io/flyway/flyway?pullRequest=3870) <br/>All committers have signed the CLA",
        ""
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/liquibase/liquibase": {
    "url": "https://github.com/liquibase/liquibase",
    "forkUrl": "https://github.com/compf/liquibase",
    "occurence": 3886,
    "prUrl": "https://github.com/liquibase/liquibase/pull/5802",
    "state": "closed",
    "merged": true,
    "size": 3,
    "key": "fields_to_fields_data_clump-liquibase-standard/src/main/java/liquibase/statement/core/UpdateStatement.java-liquibase.statement.core.UpdateStatement-liquibase.statement.core.AddAutoIncrementStatement-tableNamecatalogNameschemaName",
    "affected_files": 65,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      1
    ],
    "reviewComments": [
      -23
    ],
    "generalCommentsRaw": [
      [
        "@compf, thank you for your submission",
        " I'll pass this to engineering for review in the next sprint",
        ""
      ],
      [
        "Hi @compf,\r\n\r\nI think it's a nice readability enhancement, good job! I just left a small review comment in case you want to apply as well",
        " \r\n\r\nThanks,\r\nDaniel",
        "  "
      ],
      [
        "Thank you very much for the feedback",
        " I can apply your feedback by the end of this week if this is ok :)"
      ],
      [
        "@MalloD12 In have simplified the DataBaseTableIdentifier class as suggested",
        " According to the email notification, You have written more comments but they seem to be deleted or I can't find them anymore",
        " If they are still relevant, I can address them as well :)"
      ],
      [
        "> @MalloD12 In have simplified the DataBaseTableIdentifier class as suggested",
        " According to the email notification, You have written more comments but they seem to be deleted or I can't find them anymore",
        " If they are still relevant, I can address them as well :)\r\n\r\nThank you, @compf! I don't have any additional comments, I posted some other questions I thought some changes couldn't be needed but I realized afterward they were right",
        "\r\n\r\n "
      ]
    ],
    "reviewCommentsRaw": [
      [
        "Since we are using Lombok in some other classes, I think we can also applied to this class",
        " I think adding:\r\n```\r\n- @Getter\r\n- @Setter\r\n- @AllArgsConstructor\r\n```\r\nwould be fine",
        ""
      ]
    ]
  },
  "https://github.com/plantuml/plantuml": {
    "url": "https://github.com/plantuml/plantuml",
    "forkUrl": "https://github.com/compf/plantuml",
    "occurence": 1254,
    "prUrl": "https://github.com/plantuml/plantuml/pull/1760",
    "state": "closed",
    "merged": false,
    "category": "nameSuggestion",
    "generalComments": [
      -8,
      17,
      1,
      -18,
      -9
    ],
    "size": 4,
    "key": "parameters_to_parameters_data_clump-src/net/sourceforge/plantuml/activitydiagram3/ftile/Worm.java-net.sourceforge.plantuml.activitydiagram3.ftile.Worm/method/drawLine(net.sourceforge.plantuml.activitydiagram3.ftile.net.sourceforge.plantuml.klimt.drawing.UGraphic ug, double x1, double y1, double x2, double y2, net.sourceforge.plantuml.activitydiagram3.ftile.net.sourceforge.plantuml.utils.Direction direction)-net.sourceforge.plantuml.braille.BrailleGrid/method/line(double x1, double y1, double x2, double y2)-x1y1x2y2",
    "affected_files": 28,
    "type": "parameters_to_parameters_data_clump",
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thanks for your contribution! Use of LLM is indeed very useful",
        "\r\nThe creation of `RectangleCoordinates` is a good point",
        " However, I would probably set the class as immutable (that is, without any setter)",
        "\r\nWe are not going to integrate your change asis, however, we will probably go for your suggestion (that is, an `RectangleCoordinates` immutable class), maybe with a shorter name for the class",
        "\r\n\r\nYour MR will be very useful to see all impact of this change on your code",
        "\r\nThanks again!\r\n"
      ],
      [
        "> Thanks for your contribution! Use of LLM is indeed very useful",
        " The creation of `RectangleCoordinates` is a good point",
        " However, I would probably set the class as immutable (that is, without any setter)",
        " We are not going to integrate your change asis, however, we will probably go for your suggestion (that is, an `RectangleCoordinates` immutable class), maybe with a shorter name for the class",
        "\r\n> \r\n> Your MR will be very useful to see all impact of this change on your code",
        " Thanks again!\r\n\r\nThank you very much for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "Here is a minor remark:\r\n- Be careful with global imports `import xxx",
        "*;`\r\n\r\n[FYI @arnaudroques]"
      ],
      [
        "> Here is a minor remark:\r\n> \r\n>     * Be careful with global imports `import xxx",
        "*;`\r\n> \r\n> \r\n> [FYI @arnaudroques]\r\n\r\nThank you for the feedback :)"
      ]
    ]
  },
  "https://github.com/dtinit/data-transfer-project": {
    "url": "https://github.com/dtinit/data-transfer-project",
    "forkUrl": "https://github.com/compf/data-transfer-project",
    "occurence": 12,
    "prUrl": "https://github.com/dtinit/data-transfer-project/pull/1355",
    "state": "open",
    "merged": false,
    "size": 3,
    "key": "parameters_to_parameters_data_clump-portability-api-launcher/src/main/java/org/datatransferproject/api/launcher/DtpInternalMetricRecorder.java-org.datatransferproject.api.launcher.DtpInternalMetricRecorder/method/importPageFinished(org.datatransferproject.api.launcher.org.datatransferproject.types.common.models.DataVertical dataType, java.lang.String service, boolean success, java.time.Duration duration)-org.datatransferproject.api.launcher.DtpInternalMetricRecorder/method/importPageAttemptFinished(org.datatransferproject.api.launcher.org.datatransferproject.types.common.models.DataVertical dataType, java.lang.String service, boolean success, java.time.Duration duration)-dataTypeservicesuccessduration",
    "affected_files": 1,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "[![CLA assistant check](https://cla-assistant",
        "io/pull/badge/signed)](https://cla-assistant",
        "io/dtinit/data-transfer-project?pullRequest=1355) <br/>All committers have signed the CLA",
        ""
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/alibaba/Sentinel": {
    "url": "https://github.com/alibaba/Sentinel",
    "forkUrl": "https://github.com/compf/Sentinel",
    "occurence": 2,
    "prUrl": "https://github.com/alibaba/Sentinel/pull/3389",
    "state": "closed",
    "merged": false,
    "key": "fields_to_fields_data_clump-sentinel-transport/sentinel-transport-common/src/main/java/com/alibaba/csp/sentinel/command/vo/NodeVo.java-com.alibaba.csp.sentinel.command.vo.NodeVo-com.alibaba.csp.sentinel.dashboard.domain.ResourceTreeNode-resourceblockQpsidthreadNumparentIdsuccessQpsaverageRtoneMinuteBlockoneMinuteExceptiontotalQpspassQpsoneMinuteTotalexceptionQpsoneMinutePass",
    "affected_files": 2,
    "category": "nameSuggestion",
    "size": 14,
    "type": "fields_to_fields_data_clump",
    "generalComments": [
      2,
      -1
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Very useful research project, thanks for including Sentinel as one of the experimental subjects, but in my opinion, the extraction of public fields does reduce complexity, but is not necessarily good for readability",
        ""
      ],
      [
        "Thank you for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/Netflix/zuul": {
    "url": "https://github.com/Netflix/zuul",
    "forkUrl": "https://github.com/compf/zuul",
    "occurence": 8,
    "prUrl": "https://github.com/Netflix/zuul/pull/1770",
    "state": "open",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-zuul-core/src/main/java/com/netflix/netty/common/throttle/RejectionUtils.java-com.netflix.netty.common.throttle.RejectionUtils/method/notifyHandlers(com.netflix.netty.common.throttle.io.netty.channel.ChannelHandlerContext ctx, com.netflix.netty.common.throttle.com.netflix.zuul.stats.status.StatusCategory nfStatus, com.netflix.netty.common.throttle.io.netty.handler.codec.http.HttpResponseStatus status, java.lang.String reason, com.netflix.netty.common.throttle.io.netty.handler.codec.http.HttpRequest request)-com.netflix.netty.common.throttle.RejectionUtils/method/rejectByClosingConnection(com.netflix.netty.common.throttle.io.netty.channel.ChannelHandlerContext ctx, com.netflix.netty.common.throttle.com.netflix.zuul.stats.status.StatusCategory nfStatus, java.lang.String reason, com.netflix.netty.common.throttle.io.netty.handler.codec.http.HttpRequest request, java.lang.Integer injectedLatencyMillis)-ctxnfStatusreasonrequest",
    "affected_files": 1,
    "size": 5,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "This PR is stale because it has been open 60 days with no activity",
        " Remove stale label or comment or this will be closed in 7 days",
        ""
      ],
      [
        "Small push to prevent closing",
        " I still appreciate any feedback even if you do not want to merge these changes :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/traccar/traccar": {
    "url": "https://github.com/traccar/traccar",
    "forkUrl": "https://github.com/compf/traccar",
    "occurence": 86,
    "prUrl": "https://github.com/traccar/traccar/pull/5318",
    "state": "closed",
    "merged": false,
    "size": 5,
    "key": "parameters_to_parameters_data_clump-src/main/java/org/traccar/reports/TripsReportProvider.java-org.traccar.reports.TripsReportProvider/method/getObjects(long userId, java.util.Collection<java.lang.Long> deviceIds, java.util.Collection<java.lang.Long> groupIds, java.util.Date from, java.util.Date to)-org.traccar.reports.TripsReportProvider/method/getExcel(java.io.OutputStream outputStream, long userId, java.util.Collection<java.lang.Long> deviceIds, java.util.Collection<java.lang.Long> groupIds, java.util.Date from, java.util.Date to)-userIddeviceIdsgroupIdsfromto",
    "affected_files": 6,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -2,
      -6
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "I think this just adds more complexity",
        " It doesn't really improve anything",
        ""
      ],
      [
        "Thank you for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/uber/NullAway": {
    "url": "https://github.com/uber/NullAway",
    "forkUrl": "https://github.com/compf/NullAway",
    "occurence": 124,
    "prUrl": "https://github.com/uber/NullAway/pull/960",
    "state": "closed",
    "merged": true,
    "size": 3,
    "key": "parameters_to_parameters_data_clump-nullaway/src/main/java/com/uber/nullaway/handlers/Handler.java-com.uber.nullaway.handlers.Handler/method/castToNonNullArgumentPositionsForMethod(com.uber.nullaway.handlers.com.uber.nullaway.NullAway analysis, com.uber.nullaway.handlers.com.google.errorprone.VisitorState state, com.sun.tools.javac.code.Symbol$MethodSymbol methodSymbol, java.util.List<? extends com.sun.source.tree.ExpressionTree> actualParams, java.lang.Integer previousArgumentPosition)-com.uber.nullaway.handlers.StreamNullabilityPropagator/method/onMatchMethodInvocation(com.uber.nullaway.handlers.com.uber.nullaway.NullAway analysis, com.sun.source.tree.MethodInvocationTree tree, com.uber.nullaway.handlers.com.google.errorprone.VisitorState state, com.sun.tools.javac.code.Symbol$MethodSymbol methodSymbol)-analysisstatemethodSymbol",
    "affected_files": 6,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [],
    "likertData": [
      [
        {
          "scale": 2
        },
        {
          "scale": 3
        },
        {
          "scale": 1
        },
        {
          "scale": 3
        },
        {
          "scale": 3
        },
        {
          "scale": 3
        }
      ]
    ],
    "experience": [
      {
        "project": ">2 years",
        "java": ">10 years"
      }
    ],
    "reviewComments": [
      -14,
      -5,
      -23,
      -8,
      -13,
      -9,
      -1
    ],
    "generalCommentsRaw": [
      [
        "[![CLA assistant check](https://cla-assistant",
        "io/pull/badge/signed)](https://cla-assistant",
        "io/uber/NullAway?pullRequest=960) <br/>All committers have signed the CLA",
        ""
      ],
      [
        "Also note that I merged in the latest main branch so best to pull before making further changes"
      ],
      [
        "## [Codecov](https://app",
        "codecov",
        "io/gh/uber/NullAway/pull/960?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber) Report\nAttention: Patch coverage is `83",
        "05085%` with `10 lines` in your changes missing coverage",
        " Please review",
        "\n> Project coverage is 85",
        "88%",
        " Comparing base [(`c4aed81`)](https://app",
        "codecov",
        "io/gh/uber/NullAway/commit/c4aed81aa6663e1b96182fca980420c807fcfdab?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber) to head [(`bbedf7b`)](https://app",
        "codecov",
        "io/gh/uber/NullAway/commit/bbedf7b4b728bb01c9d23e71a15272e321871647?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber)",
        "\n\n| [Files](https://app",
        "codecov",
        "io/gh/uber/NullAway/pull/960?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber) | Patch % | Lines |\n|---|---|---|\n| [",
        "",
        "",
        "/uber/nullaway/handlers/MethodAnalysisContext",
        "java](https://app",
        "codecov",
        "io/gh/uber/NullAway/pull/960?src=pr&el=tree&filepath=nullaway%2Fsrc%2Fmain%2Fjava%2Fcom%2Fuber%2Fnullaway%2Fhandlers%2FMethodAnalysisContext",
        "java&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber#diff-bnVsbGF3YXkvc3JjL21haW4vamF2YS9jb20vdWJlci9udWxsYXdheS9oYW5kbGVycy9NZXRob2RBbmFseXNpc0NvbnRleHQuamF2YQ==) | 44",
        "44% | [10 Missing :warning: ](https://app",
        "codecov",
        "io/gh/uber/NullAway/pull/960?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber) |\n\n<details><summary>Additional details and impacted files</summary>\n\n\n```diff\n@@             Coverage Diff              @@\n##             master     #960      +/-   ##\n============================================\n- Coverage     85",
        "94%   85",
        "88%   -0",
        "07%     \n- Complexity     2047     2051       +4     \n============================================\n  Files            81       82       +1     \n  Lines          6765     6806      +41     \n  Branches       1305     1312       +7     \n============================================\n+ Hits           5814     5845      +31     \n- Misses          537      547      +10     \n  Partials        414      414              \n```\n\n\n\n</details>\n\n[:umbrella: View full report in Codecov by Sentry](https://app",
        "codecov",
        "io/gh/uber/NullAway/pull/960?dropdown=coverage&src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber)",
        "   \n:loudspeaker: Have feedback on the report? [Share it here](https://about",
        "codecov",
        "io/codecov-pr-comment-feedback/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=uber)",
        "\n"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "`getMethodSymbol()` used multiple times in this method and should be stored in a local variable"
      ],
      [
        "Similarly `getState()` is used multiple times"
      ],
      [
        "`getState()` and `getAnalysis()` used multiple times here"
      ],
      [
        "If we were able to use Java 17 features, I think a record would be perfect for this use case",
        "  Since we cannot use records, I think several changes would help here:\r\n\r\n* This type should be immutable (`final` fields and no setters)",
        "\r\n* It should implement equals, hashCode, and toString",
        " \r\n* Like records, I would avoid the `get` prefix on getter methods; so just have them be `analysis()`, `state()`, and `methodSymbol()`",
        "  \r\n* The type also needs top-level Javadoc",
        ""
      ],
      [
        "Thank you very much for the feedback",
        " I can implement your suggestions in the coming days :)"
      ],
      [
        "done"
      ],
      [
        "Our convention is to name the `VisitorState` local variables / parameters `state`",
        "  Could we stick to that?  That will actually significantly reduce the size of this PR and make it more readable",
        ""
      ],
      [
        "We can just do `analysis",
        "equals(that",
        "analysis)`, etc",
        " rather than using `Objects",
        "equals` here as none of the fields in this class should ever be null (and we run NullAway on itself to check this)"
      ]
    ]
  },
  "https://github.com/spockframework/spock": {
    "url": "https://github.com/spockframework/spock",
    "forkUrl": "https://github.com/compf/spock",
    "occurence": 2,
    "prUrl": "https://github.com/spockframework/spock/pull/1962",
    "state": "closed",
    "merged": false,
    "size": 6,
    "key": "fields_to_fields_data_clump-spock-core/src/main/java/org/spockframework/mock/runtime/MockObject.java-org.spockframework.mock.runtime.MockObject-org.spockframework.mock.runtime.MockConfiguration-globaltypeinstancenamedefaultResponseverified",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [],
    "reviewComments": [
      -20,
      -23,
      -8,
      -1,
      -27
    ],
    "generalCommentsRaw": [
      [
        "Thank you very much for the feedback",
        " It is absolutely fine if you do not want these changes to be merged",
        " You feedback is still very valuable and I appreciate your time"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "This makes the object mutable due the non immutable object and non final field",
        ""
      ],
      [
        "This makes the object mutable due the non immutable object and non final field",
        ""
      ],
      [
        "Also the code change is not better readable then the other one, also the removed \"code duplication\" increases the overall code size => This does not make the code more maintainable",
        ""
      ],
      [
        "This class does not adhere the formatting rule, code positions e",
        "g",
        " fields before constructor, qualified names  instead of imports etc",
        "\r\nNor is it Immutable, nor has a toString (for debugging purpose) + equal+ hashcode for POJO, etc",
        "\r\n\r\nSo this new class does not make the original code more readable nor is this class maintainable",
        "\r\n"
      ],
      [
        "Nullable annotations are missing, or null checks in the constructor/setter missing",
        ""
      ]
    ]
  },
  "https://github.com/apache/logging-log4j2": {
    "url": "https://github.com/apache/logging-log4j2",
    "forkUrl": "https://github.com/compf/logging-log4j2",
    "occurence": 10,
    "prUrl": "https://github.com/apache/logging-log4j2/pull/2688",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-log4j-1.2-api/src/main/java/org/apache/log4j/builders/appender/SyslogAppenderBuilder.java-org.apache.log4j.builders.appender.SyslogAppenderBuilder/method/createAppender(java.lang.String name, org.apache.log4j.builders.appender.org.apache.log4j.config.Log4j1Configuration configuration, org.apache.log4j.builders.appender.org.apache.log4j.Layout layout, java.lang.String facility, org.apache.log4j.builders.appender.org.apache.log4j.spi.Filter filter, java.lang.String syslogHost, java.lang.String level, org.apache.log4j.builders.appender.org.apache.logging.log4j.core.net.Protocol protocol, boolean header, boolean facilityPrinting)-org.apache.log4j.builders.appender.SocketAppenderBuilder/method/createAppender(java.lang.String name, java.lang.String host, int port, org.apache.log4j.builders.appender.org.apache.log4j.Layout layout, org.apache.log4j.builders.appender.org.apache.log4j.spi.Filter filter, java.lang.String level, boolean immediateFlush, int reconnectDelayMillis, T configuration)-namelayoutfilterlevel",
    "affected_files": 6,
    "size": 4,
    "likertData": [
      [
        {
          "scale": 2
        },
        {
          "scale": 3
        },
        {
          "scale": 0
        },
        {
          "scale": 3
        },
        {
          "scale": 1,
          "comments": "`BasicAppenderConfiguration` or `CommonAppenderElements` would be a better choice IMHO.",
          "keywords": [
            -18
          ]
        },
        {
          "scale": 3
        }
      ],
      [
        {
          "scale": 3
        },
        {
          "scale": 3
        },
        {
          "scale": 2
        },
        {
          "scale": 3
        },
        {
          "scale": 3
        },
        {
          "scale": 3
        }
      ]
    ],
    "experience": [
      {
        "project": ">2 years",
        "java": "<=10 years"
      },
      {
        "project": ">2 years",
        "java": ">10 years"
      }
    ],
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -6,
      -25
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thank you very much the feedback :)"
      ],
      [
        "@compf,\r\n\r\nI agree with Gary: the refactoring itself doesn't have much value",
        "\r\n\r\nIt would be however interesting to know:\r\n\r\n- why your LLM specifically found this data clump",
        " The group of parameters `Level, Marker, Throwable, String` that starts from `Logger` seems easier to spot",
        "\r\n- did you architecture your model to take into account breaking API changes? I noticed that your refactoring only refactors `private` methods",
        "\r\n- did you publish your model somewhere on Github?"
      ],
      [
        "> @compf,\r\n> \r\n> I agree with Gary: the refactoring itself doesn't have much value",
        "\r\n> \r\n> It would be however interesting to know:\r\n> \r\n>     * why your LLM specifically found this data clump",
        " The group of parameters `Level, Marker, Throwable, String` that starts from `Logger` seems easier to spot",
        "\r\n> \r\n>     * did you architecture your model to take into account breaking API changes? I noticed that your refactoring only refactors `private` methods",
        "\r\n> \r\n>     * did you publish your model somewhere on Github?\r\n\r\nThank you also for the feedback: About your questions\r\n\r\n1 and 2) The LLM chooses the data clumps based on many information",
        " Particularly how many method parameters/ fields are part of the data clump, how often it is repeated in a single file or  in how in many files",
        " Also as you noted the fact that the public interface should not be refactored is important",
        " Since LLMs are blackboxes I cannot say why it has chosen this data clump",
        " However, all this information is  considered, and then there is some manual review by me whether the refactoring would be difficult to achieve",
        " So your Logger example is an important part of the Core API and would never be refactored unless someone really wants to do this :)\r\n\r\n3) I am not training my own LLM",
        " I am using GPT4-1106 from OpenAI",
        " If you mean my source code, you can find it in my GitHub repo (data_clump_solver), but it still in a WIP state and I am continuously using your feedback to improve it if the chosen architecture allows it easily :)"
      ],
      [
        "> I am not training my own LLM",
        " I am using GPT4-1106 from OpenAI\r\n\r\nThat's the basic problem here: You do not know if the end result contains a copy of code under a license that is not allowed in Apache projects",
        "\r\n\r\nUsing a model that trains on open source code would solve that issue for you",
        "\r\n"
      ],
      [
        "> > I am not training my own LLM",
        " I am using GPT4-1106 from OpenAI\r\n> \r\n> That's the basic problem here: You do not know if the end result contains a copy of code under a license that is not allowed in Apache projects",
        "\r\n> \r\n> Using a model that trains on open source code would solve that issue for you",
        "\r\n\r\nThat's a fair point, but I think this would be more relevant if the LLM improved an algorithm or otherwise improve the functionality of software",
        " Such simple refactoring, as was done here, is not very creative and could have been performed by a human or an automated tool",
        "\r\n Nevertheless, I fully agree that one should be absolutely transparent about the use of LLMs and I can understand that this can be a reason to reject such pull requests"
      ],
      [
        "@compf, I am closing this issue due to shared concerns by maintainers",
        " Feel free to re-submit it with requested changes",
        ""
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/apache/iceberg": {
    "url": "https://github.com/apache/iceberg",
    "forkUrl": "https://github.com/compf/iceberg",
    "occurence": 2,
    "prUrl": "https://github.com/apache/iceberg/pull/10558",
    "state": "closed",
    "merged": false,
    "size": 6,
    "key": "fields_to_fields_data_clump-core/src/main/java/org/apache/iceberg/FileMetadata.java-org.apache.iceberg.FileMetadata.Builder-org.apache.iceberg.DataFiles.Builder-isPartitionedspecIdspecvalueCountspartitionDatasplitOffsetsupperBoundssortOrderIdkeyMetadatacolumnSizesrecordCountlowerBoundsfilePathformatnullValueCountsfileSizeInBytesnanValueCounts",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -1,
      -6,
      -23,
      -11
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "I'm also reluctant to do this refactoring",
        " The stats that it pulls are are actual properties on the DataFile: https://iceberg",
        "apache",
        "org/spec/#manifests So I would expect them inside of that class",
        " I don't think this really improves readability or has a major advantage in terms of readability since it adds another layer",
        ""
      ],
      [
        "Thank you very much for this valuable feedback",
        " As I said initially, it is perfectly fine if you reject this pull request",
        " You input is nevertheless appreciated :)"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "Iceberg follows its own naming conventions which is agreed by the community\r\nhttps://iceberg",
        "apache",
        "org/contribute/?h=contribute#method-naming\r\n\r\nCan LLM learn this? :D "
      ],
      [
        "on what basis `fileSizeInBytes` was not included for the `fileStatistics`?"
      ]
    ]
  },
  "https://github.com/google/error-prone": {
    "url": "https://github.com/google/error-prone",
    "forkUrl": "https://github.com/compf/error-prone",
    "occurence": 6,
    "prUrl": "https://github.com/google/error-prone/pull/4447",
    "state": "open",
    "merged": false,
    "size": 3,
    "key": "parameters_to_parameters_data_clump-core/src/main/java/com/google/errorprone/bugpatterns/DefaultCharset.java-com.google.errorprone.bugpatterns.DefaultCharset/method/guavaFileWriterFix(com.google.errorprone.bugpatterns.com.google.errorprone.VisitorState state, com.sun.source.tree.Tree fileArg, com.sun.source.tree.Tree toReplace, com.google.errorprone.bugpatterns.DefaultCharset$CharsetFix charset)-com.google.errorprone.bugpatterns.DefaultCharset/method/nioFileReaderFix(com.google.errorprone.bugpatterns.com.google.errorprone.VisitorState state, com.sun.source.tree.Tree arg, com.sun.source.tree.Tree toReplace, com.google.errorprone.bugpatterns.DefaultCharset$CharsetFix charset)-statetoReplacecharset",
    "affected_files": 1,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [],
    "reviewCommentsRaw": []
  },
  "https://github.com/apache/gravitino": {
    "url": "https://github.com/apache/gravitino",
    "forkUrl": "https://github.com/compf/gravitino",
    "occurence": 1838,
    "prUrl": "https://github.com/apache/gravitino/pull/3958",
    "state": "open",
    "merged": false,
    "size": 4,
    "key": "fields_to_fields_data_clump-core/src/main/java/com/datastrato/gravitino/meta/FilesetEntity.java-com.datastrato.gravitino.meta.FilesetEntity-com.datastrato.gravitino.listener.api.info.CatalogInfo-namecommentproperties",
    "affected_files": 39,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -6,
      -1
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thanks for your contribution, but I'm not entirely sure these changes add a lot of value",
        " In some cases, I think WET is better than DRY for understandability, but others on the project may have a different view",
        " Perhaps you can explain some more about how the changes might help?"
      ],
      [
        "> Thanks for your contribution, but I'm not entirely sure these changes add a lot of value",
        " In some cases, I think WET is better than DRY for understandability, but others on the project may have a different view",
        " Perhaps you can explain some more about how the changes might help?\r\n\r\nThank you for the feedback",
        " You are right that this refactoring might not always improve readability/usability",
        " In many cases it does however",
        "   Nevertheless, it would be absolutely fine if you decide not to integrate these changes",
        "\r\n I would appreciate  any other feedback on this proposed refactoring or in which cases a similar refactoring might be useful :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/eclipse-vertx/vert.x": {
    "url": "https://github.com/eclipse-vertx/vert.x",
    "forkUrl": "https://github.com/compf/vert.x",
    "occurence": 13,
    "prUrl": "https://github.com/eclipse-vertx/vert.x/pull/5243",
    "state": "closed",
    "merged": false,
    "size": 5,
    "key": "parameters_to_parameters_data_clump-src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java-io.vertx.core.http.impl.Http1xClientConnection/method/createRequest(io.vertx.core.http.impl.io.vertx.core.http.HttpMethod method, java.lang.String uri, io.vertx.core.http.impl.MultiMap headerMap, java.lang.String authority, boolean chunked, io.vertx.core.http.impl.io.netty.buffer.ByteBuf buf, boolean end)-io.vertx.core.http.impl.Http1xClientConnection/method/beginRequest(io.vertx.core.http.impl.Http1xClientConnection$Stream stream, io.vertx.core.http.impl.HttpRequestHead request, boolean chunked, io.vertx.core.http.impl.io.netty.buffer.ByteBuf buf, boolean end, boolean connect, io.vertx.core.http.impl.io.vertx.core.internal.PromiseInternal<java.lang.Void> promise)-chunkedbufend",
    "affected_files": 5,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -26
    ],
    "reviewComments": [],
    "generalCommentsRaw": [],
    "reviewCommentsRaw": []
  },
  "https://github.com/spring-io/initializr": {
    "url": "https://github.com/spring-io/initializr",
    "forkUrl": "https://github.com/compf/initializr",
    "occurence": 2,
    "prUrl": "https://github.com/spring-io/initializr/pull/1553",
    "state": "closed",
    "key": "fields_to_fields_data_clump-initializr-actuator/src/main/java/io/spring/initializr/actuate/stat/ProjectRequestDocument.java-io.spring.initializr.actuate.stat.ProjectRequestDocument-io.spring.initializr.web.project.ProjectRequest-groupIdartifactIdjavaVersiontypelanguagepackageNamepackaging",
    "affected_files": 2,
    "merged": false,
    "size": 7,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -25,
      -1,
      -31
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thanks for the PR and for the disclosure that the code was generated by an LLM",
        " Unfortunately, the copyright situation around LLM-generated code is sufficiently unclear that the risks of accepting this contribution outweigh the potential benefits",
        "\r\n\r\nFWIW, I'm not sure that this change is for the better, irrespective of how it was written",
        " Perhaps if the project data was exposed directly rather than through numerous delegate methods, it would have been an improvement",
        " As things stand, it's really only reduced the number of field declarations while making the code that accesses those fields more verbose due to the additional indirection",
        ""
      ],
      [
        "Thank you very much for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/thingsboard/thingsboard": {
    "url": "https://github.com/thingsboard/thingsboard",
    "forkUrl": "https://github.com/compf/thingsboard",
    "occurence": 2,
    "prUrl": "https://github.com/thingsboard/thingsboard/pull/11312",
    "state": "closed",
    "key": "fields_to_fields_data_clump-common/queue/src/main/java/org/thingsboard/server/queue/provider/KafkaTbCoreQueueFactory.java-org.thingsboard.server.queue.provider.KafkaTbCoreQueueFactory-org.thingsboard.server.queue.provider.KafkaMonolithQueueFactory-transportApiSettingskafkaSettingsconsumerStatsServicetransportApiResponseAdminconsumerCountjsInvokeSettingsvcSettingsjsExecutorRequestAdminhousekeeperAdminvcAdmintransportNotificationSettingshousekeeperReprocessingAdmincoreAdminserviceInfoProviderjsExecutorResponseAdmintransportApiRequestAdmincoreSettingstopicServiceruleEngineSettingsnotificationAdminfwUpdatesAdmin",
    "affected_files": 2,
    "merged": false,
    "size": 21,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -6
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "I don't like the proposed changes and have no idea why to change this part of the code",
        " so I am declining the PR",
        " "
      ],
      [
        "Thank you nevertheless for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/mybatis/mybatis-3": {
    "url": "https://github.com/mybatis/mybatis-3",
    "forkUrl": "https://github.com/compf/mybatis-3",
    "occurence": 2,
    "prUrl": "https://github.com/mybatis/mybatis-3/pull/3210",
    "state": "closed",
    "merged": false,
    "size": 6,
    "key": "parameters_to_parameters_data_clump-src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java-org.apache.ibatis.executor.resultset.DefaultResultSetHandler/method/applyConstructorAutomapping(org.apache.ibatis.executor.resultset.ResultSetWrapper rsw, org.apache.ibatis.executor.resultset.org.apache.ibatis.mapping.ResultMap resultMap, java.lang.String columnPrefix, java.lang.Class<?> resultType, java.util.List<java.lang.Class<?>> constructorArgTypes, java.util.List<java.lang.Object> constructorArgs, java.lang.reflect.Constructor<?> constructor)-org.apache.ibatis.executor.resultset.DefaultResultSetHandler/method/applyArgNameBasedConstructorAutoMapping(org.apache.ibatis.executor.resultset.ResultSetWrapper rsw, org.apache.ibatis.executor.resultset.org.apache.ibatis.mapping.ResultMap resultMap, java.lang.String columnPrefix, java.util.List<java.lang.Class<?>> constructorArgTypes, java.util.List<java.lang.Object> constructorArgs, java.lang.reflect.Constructor<?> constructor, boolean foundValues)-rswresultMapcolumnPrefixconstructorArgTypesconstructorArgsconstructor",
    "affected_files": 1,
    "type": "parameters_to_parameters_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -5,
      2,
      1
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Hello @compf ,\r\n\r\nWe currently do not accept auto-generated PRs",
        "\r\nWe simply don't have enough resources to review them",
        "\r\nWe'll let you know if we reconsider it in the future",
        "\r\n\r\nThank you and good luck with your project!"
      ],
      [
        "Thank you nevertheless for the quick feedback",
        " I tried to minimize the number of affected files  and this would be my only PR, but I totally understand your policy",
        " If you find still time to give a short feedback (without necessarily merging the PR), it would be greatly appreciated but of course I do not want to be a burden on you :)"
      ],
      [
        "Mapping is the most demanding part in terms of performance",
        "\r\nI obviously didn't do proper profiling etc",
        " to evaluate, but the change seems to be less efficient as it introduces a new class to create",
        "\r\nReducing complexity/improving readability is great, but it does not have the highest priority in this part",
        "\r\n"
      ],
      [
        "Thank you very much for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/OpenFeign/feign": {
    "url": "https://github.com/OpenFeign/feign",
    "forkUrl": "https://github.com/compf/feign",
    "occurence": 2,
    "prUrl": "https://github.com/OpenFeign/feign/pull/2497",
    "state": "closed",
    "merged": true,
    "size": 9,
    "key": "fields_to_fields_data_clump-core/src/main/java/feign/SynchronousMethodHandler.java-feign.SynchronousMethodHandler-feign.AsynchronousMethodHandler-loggerrequestInterceptorsbuildTemplateFromArgstargetpropagationPolicymetadataretryerlogLeveloptions",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "category": "nameSuggestion",
    "generalComments": [
      -8
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "I would love to see this on https://github",
        "com/OpenFeign/querydsl"
      ],
      [
        "> I would love to see this on https://github",
        "com/OpenFeign/querydsl\r\n\r\nI could not compile this project (e",
        "g class QEntityTest_Entity1 cannot be found), but when this is solved I am happy to make a separate PR for this project :)"
      ],
      [
        "This pull request sets up GitHub code scanning for this repository",
        " Once the scans have completed and the checks have passed, the analysis results for this pull request branch will appear on [this overview](/OpenFeign/feign/security/code-scanning?query=pr%3A2497+is%3Aopen)",
        " Once you merge this pull request, the 'Security' tab will show more code scanning analysis results (for example, for the default branch)",
        " Depending on your configuration and choice of analysis tool, future pull requests will be annotated with code scanning analysis results",
        " For more information about GitHub code scanning, check out [the documentation](https://docs",
        "github",
        "com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)",
        " "
      ],
      [
        "> > I would love to see this on https://github",
        "com/OpenFeign/querydsl\r\n> \r\n> I could not compile this project (e",
        "g class QEntityTest_Entity1 cannot be found), but when this is solved I am happy to make a separate PR for this project :)\r\n\r\nYou need java 21 and can run a quick build by running:\r\n\r\n```\r\n",
        "/mvnw -Dtoolchain",
        "skip=true  -P examples,quickbuild,dev clean install\r\n```\r\n\r\nThis will skip tests, code formatter and other checks"
      ]
    ],
    "reviewCommentsRaw": []
  }
}