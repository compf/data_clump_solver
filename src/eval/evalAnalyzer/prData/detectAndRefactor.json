{
  "https://github.com/junit-pioneer/junit-pioneer": {
    "url": "https://github.com/junit-pioneer/junit-pioneer",
    "occurence": 6,
    "prUrl": "https://github.com/junit-pioneer/junit-pioneer/pull/811",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-src/test/java/org/junitpioneer/testkit/PioneerTestKit.java-org.junitpioneer.testkit.PioneerTestKit/method/executeTestMethodWithParameterTypesAndConfigurationParameters(java.util.Map<java.lang.String, java.lang.String> configurationParameters, java.lang.Class<?> testClass, java.lang.String testMethodName, java.lang.Class<?>[] methodParameterTypes)-org.junitpioneer.testkit.PioneerTestKit/method/executeTestMethodWithParameterTypes(java.lang.Class<?> testClass, java.lang.String testMethodName, java.lang.Class<?>[] methodParameterTypes)-testClasstestMethodNamemethodParameterTypes",
    "affected_files": 1,
    "size": 4,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -4
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Hey @compf ! Thank you for your interest in Pioneer (even if only as a research subject)",
        "\r\n\r\nUnfortunately, I don't think we will integrate your changes",
        " `ExecutionResults` and `PioneerTestKit` intentionally share parameter values as `PioneerTestKit` is a utility class, meant to make creating `ExecutionResults` easier",
        "\r\n\r\nAs the methods in `ExecutionResults` are package-private, the only way to create them is through `PioneerTestKit`",
        "\r\n\r\nHowever, this is mostly personal opinion - I will leave this PR open",
        "\r\nMaybe the other maintainers also want to express their opinion",
        ""
      ],
      [
        "Thank you very much",
        " As I said, it is absolutely fine not to integrate these changes",
        " It would also be great if more feedback is given",
        "\r\n\r\nYour project looks nevertheless very interesting and I will follow it",
        " Maybe I will  contribute in other ways :)"
      ],
      [
        "Hey @compf ,\r\nI've read you PR quite interested to get a glimpse about what AI is captable of nowadays and I positely noticed that you (r LLM ;) ) included an explanation what your ideas are behind your change",
        " Switching to my point of view as a maintainer I'm with @Michael1993  who already pointed out why we have done things the way we did",
        " And therefore I also vote against a merge (aside the formal aspect of not having an issue as a base for this PR)",
        "\r\n\r\nFurther I'll close the PR as a third maintainer (@beatngu13 ) has also reacted via an emoji to this PR and therefore there can't be a majority of maintainers to vote for a merge",
        " But free to grab an open issue if you want to contribute (now or in the future)!\r\n\r\nLast but not least I wish you all the best for your master thesis and feel free to reach out to me when you are done - would be happy to read it! "
      ]
    ],
    "likertData": [
      [
        {
          "scale": 2,
          "comments": "Data clumps can be a code smell, but only if it breaks principles - sometimes you can have data clumps that actually do not break any. Just because similar or the same data exists in different objects does not inherently constitute a problem - I asked ChatGPT for an example here (paraphrasing):\nConsider the classes WeatherReport and FinancialStatement: both could have the following fields: LocalDate date, String location, double value (and any additional fields). These fields could be considered a 'data clump' by your definition but have vastly different applications and contexts. Can you extract these values in a meaningful way? Sure! Should you? Probably not - sharing these fields (even if it's through composition and not inheritence) would limit or hinder maintenance if any of these objects evolve in the future.\nI believe it would be straightforward to come up with a counter-example where extracting fields from two rather similar objects that have the same (or almost the same) context is beneficial, so I'm not going to do that.",
          "keywords": [
            -6,
            -4,
            -27
          ]
        },
        {
          "scale": 4,
          "comments": "Yes, LLMs can speed up (and already speed up!) work by helping search for documentation, explain things with examples, collating large data chunks, etc. I believe GitHub co-pilot is an LLM",
          "keywords": [
            17
          ]
        },
        {
          "scale": 0,
          "comments": "Our project is very small and most parts are very isolated. This initiative is probably better suited for projects with lots of moving/interacting parts.\nWhile the LLM did identify a 'data clump', extracting it did not improve readability or maintainability - in fact, it did the opposite. It added unnecessary boilerplate to code that was already very readable and straightforward to use.",
          "keywords": [
            -27,
            -1
          ]
        },
        {
          "scale": 3,
          "comments": "It's rather clear that the exercise did not break any code or functionality - however it often adds unnecessary 'null' values and creates wrapper objects.",
          "keywords": [
            -4
          ]
        },
        {
          "scale": 4,
          "comments": "Sure. If we needed the wrapper around the parameters, TestSelector is a good name for them.",
          "keywords": [
            18,
            -13
          ]
        },
        {
          "scale": 4,
          "comments": "Sure",
          "keywords": []
        }
      ]
    ],
    "reviewCommentsRaw": [],
    "experience": [
      {
        "java": "<=5 years>",
        "project": ">2 years"
      }
    ]
  },
  "https://github.com/grpc/grpc-java": {
    "url": "https://github.com/grpc/grpc-java",
    "occurence": 2,
    "prUrl": "https://github.com/grpc/grpc-java/pull/11100",
    "state": "closed",
    "merged": false,
    "size": 4,
    "key": "parameters_to_parameters_data_clump-api/src/main/java/io/grpc/InternalServiceProviders.java-io.grpc.InternalServiceProviders/method/load(java.lang.Class<T> klass, java.lang.Iterable<java.lang.Class<?>> hardcoded, java.lang.ClassLoader classLoader, io.grpc.InternalServiceProviders$PriorityAccessor<T> priorityAccessor)-io.grpc.InternalServiceProviders/method/loadAll(java.lang.Class<T> klass, java.lang.Iterable<java.lang.Class<?>> hardCodedClasses, java.lang.ClassLoader classLoader, io.grpc.InternalServiceProviders$PriorityAccessor<T> priorityAccessor)-klassclassLoaderpriorityAccessor",
    "affected_files": 1,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -2,
      -6,
      -5
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        " <a href=\"https://api",
        "easycla",
        "lfx",
        "linuxfoundation",
        "org/v2/repository-provider/github/sign/1656153/27729926/11100/#/?version=2\"><img src=\"https://s3",
        "amazonaws",
        "com/cla-project-logo-prod/cla-missing-id",
        "svg\" alt=\"CLA Missing ID\" align=\"left\" height=\"28\" width=\"328\"></a> <a href=\"https://api",
        "easycla",
        "lfx",
        "linuxfoundation",
        "org/v2/repository-provider/github/sign/1656153/27729926/11100/#/?version=2\"><img src=\"https://s3",
        "amazonaws",
        "com/cla-project-logo-prod/cla-not-signed",
        "svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"></a><br/><br /><ul><li>:white_check_mark: login: compf  (b70ae8780fa76ddcefdafc3ddf96b95f5e87c9e0, 74b0b6f32f7f4daa2e728f620c791c105d9625d3)</li><li> :x: The email address for the commit (fd10722b8c6e79c04a6d443f41b8c3e657db7463) is not linked to the GitHub account, preventing the EasyCLA check",
        " Consult <a href='https://confluence",
        "linuxfoundation",
        "org/pages/viewpage",
        "action?pageId=86641302' target='_blank'>this Help Article</a> and <a href='https://help",
        "github",
        "com/en/github/committing-changes-to-your-project/why-are-my-commits-linked-to-the-wrong-user' target='_blank'>GitHub Help</a> to resolve",
        " (To view the commit's email address, add ",
        "patch at the end of this PR page's URL",
        ") For further assistance with EasyCLA, <a href='https://jira",
        "linuxfoundation",
        "org/servicedesk/customer/portal/4' target='_blank'>please submit a support request ticket</a>",
        "</li></ul>"
      ],
      [
        "I don't think this refactoring is meaningful, but this method only has 4 parameters",
        " We added a class to wrap the parameters, introduced more class constructions, and increased understanding complexity",
        ""
      ],
      [
        "\r\n\r\n\r\n\r\n> I don't think this refactoring is meaningful, but this method only has 4 parameters",
        " We added a class to wrap the parameters, introduced more class constructions, and increased understanding complexity",
        "\r\n\r\nThank you for the feedback :)"
      ],
      [
        "I don't think we are interested in this particular change",
        " It doesn't help the callers or implementation to swap from 4 arguments to a constructor with 4 arguments",
        " This is also an internal API, so we can add another argument and update callers simultaneously",
        ""
      ],
      [
        "Thank you very much",
        " This is absolutely fine",
        " I would appreciate if you fill out the feedback survey under https://campus",
        "lamapoll",
        "de/Data-clump-refactoring/en"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/LibrePDF/OpenPDF": {
    "url": "https://github.com/LibrePDF/OpenPDF",
    "prUrl": "https://github.com/LibrePDF/OpenPDF/pull/1140",
    "state": "closed",
    "merged": true,
    "size": 4,
    "type": "fields_to_fields_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      1
    ],
    "reviewComments": [
      -7,
      -8,
      -10
    ],
    "generalCommentsRaw": [
      [
        "Changes seem ok, but there are some findings",
        " And some thoughts from me",
        "\r\nCan you fix them? You may ignore the \"complexity\" findings from CodeFactor",
        "\r\n"
      ],
      [
        "## [![Quality Gate Passed](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px",
        "png 'Quality Gate Passed')](https://sonarcloud",
        "io/dashboard?id=LibrePDF_OpenPDF&pullRequest=1140) **Quality Gate passed**  \nIssues  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [1 New issue](https://sonarcloud",
        "io/project/issues?id=LibrePDF_OpenPDF&pullRequest=1140&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/accepted-16px",
        "png '') [0 Accepted issues](https://sonarcloud",
        "io/component_measures?id=LibrePDF_OpenPDF&pullRequest=1140&metric=new_accepted_issues&view=list)\n\nMeasures  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [0 Security Hotspots](https://sonarcloud",
        "io/project/security_hotspots?id=LibrePDF_OpenPDF&pullRequest=1140&resolved=false&inNewCodePeriod=true)  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/no-data-16px",
        "png '') No data about Coverage  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [0",
        "0% Duplication on New Code](https://sonarcloud",
        "io/component_measures?id=LibrePDF_OpenPDF&pullRequest=1140&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud",
        "io/dashboard?id=LibrePDF_OpenPDF&pullRequest=1140)\n\n"
      ],
      [
        "I looks much better now",
        " And I have the impression it is really more readable, after your changes",
        ""
      ]
    ],
    "likertData": [
      [
        {
          "scale": 3
        },
        {
          "scale": 3,
          "comments": "It's important too keep the semantic and don't invent some crazy class with very mixed fields.",
          "keywords": [
            -10
          ]
        },
        {
          "scale": 3
        },
        {
          "scale": 3,
          "comments": "The new Object was not initialized.",
          "keywords": [
            -20
          ]
        },
        {
          "scale": 3
        },
        {
          "scale": 3
        }
      ]
    ],
    "experience": [
      {
        "project": ">2 years",
        "java": ">10 years"
      }
    ],
    "reviewCommentsRaw": [
      [
        "These lines got really long, exploding the 180 chars limit",
        " Maybe calling the variable only \"dimensions\" could do the trick",
        "\r\nAnd as the class alone is called `BarcodeDatamatrix`, having a field named `BarcodeDatamatrix#barcodeDimensions` is a little bit reduntant",
        ""
      ],
      [
        "ws could have been asigned just before line 589",
        ""
      ],
      [
        "the ws fiel in BarcodeDimensions could be called \"border\", or \"whitespaceBorder\"?"
      ],
      [
        "height, width and ws (or border, or whitespaceBorder) are semantically part of a Dimension, but I don't see why options is also in this class",
        ""
      ],
      [
        "Thank you for the feedback",
        " I will try to solve these issues later",
        " As explained above, a LLM has generated most of the source code and I tried to avoid human intervention as much as possible, so some refactorings may look \"strange\", but to improve this, is one focus of my master thesis",
        " \r\n\r\nIf you find time, you can complete the survey linked in the original post",
        " It should take not more than 5-10 minutes to complete",
        "\r\n\r\nAgain, thank you very much"
      ],
      [
        "Here is important, that public methods are not simply renamed, as some users may  be using it",
        " I'll merge anyway and add the getWs() and setWs() methods back, which will call the get/setBorder() methods",
        ""
      ]
    ]
  },
  "https://github.com/opensearch-project/data-prepper": {
    "url": "https://github.com/opensearch-project/data-prepper",
    "occurence": 6,
    "prUrl": "https://github.com/opensearch-project/data-prepper/pull/4445",
    "state": "open",
    "merged": false,
    "size": 3,
    "key": "fields_to_fields_data_clump-data-prepper-expression/src/main/java/org/opensearch/dataprepper/expression/AddBinaryOperator.java-org.opensearch.dataprepper.expression.AddBinaryOperator-org.opensearch.dataprepper.expression.ArithmeticBinaryOperator-operandsToOperationMapdisplayNamesymbol",
    "affected_files": 3,
    "type": "fields_to_fields_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -8,
      -22
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "@compf Thanks a lot for your contribution",
        " It is an interesting innovation project and idea to apply LLM to improve our project code quality",
        " I have the following questions:\r\n\r\n1",
        " What is the LLM you have applied? any reference or links?\r\n2",
        " For long term (not necessary in this PR), is it possible to integrate it into GitHub automated CI/CD workflow?"
      ],
      [
        "@compf Excellent! Thank you very much for your contribution",
        " Will take a look at the diff and provide the feedback",
        ""
      ],
      [
        "> @compf Thanks a lot for your contribution",
        " It is an interesting innovation project and idea to apply LLM to improve our project code quality",
        " I have the following questions:\r\n> \r\n> 1",
        " What is the LLM you have applied? any reference or links?\r\n> 2",
        " For long term (not necessary in this PR), is it possible to integrate it into GitHub automated CI/CD workflow?\r\n\r\nThank you for the questions\r\n1) For your project I used GPT-4-1106 from OpenAI\r\n2) This is not the main part of my master thesis",
        " However, the general idea of my project should be integrable to Github Action or similar CI/CD processes",
        " The issue is that using LLM very often leads to uncompileable code that must be fixed by a human in a loop",
        " Currently, The only reliable integration would be to only suggest the name of the extracted class by an LLM and perform the refactoring by another tool",
        " But I am hopeful that in the future, LLMs will be improved to better handle the refactoring"
      ],
      [
        "> Thanks for the contribution",
        " I am a little doubtful on this refactoring",
        " It creates a new very abstract class `OperationParameters`, that is just a container of two abstract maps",
        " I outlined, what functions would introduce some more meaning for me",
        "\r\n> \r\n> A possible extension would be, to wrap `BiFunction<Object, Object, Number>` and similar into functional interfaces:\r\n> \r\n> ```java\r\n> @FunctionalInterface\r\n> interface Operation extends BiFunction<Object, Object, Number> {\r\n> ```\r\n> \r\n> These kind of extensions would make the new class `OperationParameters` more readable aiding the understanding of the code",
        " Just the extraction of the class falls a little short in my opinion",
        "\r\n\r\nThank you very much for the feedback :)"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "```suggestion\r\n```"
      ],
      [
        "Would be nice, if `getStrategy` would directly take `args[0]",
        "getClass()` as an argument",
        ""
      ],
      [
        "Would be nice, if `operatorParameters` had a direct method `containsOperand`",
        ""
      ],
      [
        "Would be nice, if `operatorParameters` had a direct method `getOperation`",
        ""
      ],
      [
        "Would be nice, if there was at least an overloaded version of the constructor, that did not require the explicit `null` parameter",
        ""
      ],
      [
        "This class was extracted as an implementation detail of the binary operators in this package",
        " I think, it should be package private and not public",
        "\r\n```suggestion\r\nclass OperatorParameters {\r\n```"
      ]
    ]
  },
  "https://github.com/elastic/logstash": {
    "url": "https://github.com/elastic/logstash",
    "prUrl": "https://github.com/elastic/logstash/pull/16097",
    "state": "closed",
    "merged": false,
    "category": "detectAndRefactor",
    "generalComments": [
      -6
    ],
    "reviewComments": [],
    "size": 6,
    "type": "fields_to_fields_data_clump",
    "generalCommentsRaw": [
      [
        "<!-- CLA-CHECK:16097 -->\n&#10060; Author of the following commits did not sign a [Contributor Agreement](https://www",
        "elastic",
        "co/contributor-agreement):\n   2ac79061126de7a239422709d96bd282446743ed\n\n   Please, read and sign the above mentioned agreement if you want to contribute to this project"
      ],
      [
        "I'm not sure what value/improvements this PR adds"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/kestra-io/kestra": {
    "url": "https://github.com/kestra-io/kestra",
    "occurence": 14,
    "prUrl": "https://github.com/kestra-io/kestra/pull/3588",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-core/src/main/java/io/kestra/core/runners/FlowableUtils.java-io.kestra.core.runners.FlowableUtils/method/resolveState(io.kestra.core.runners.io.kestra.core.models.executions.Execution execution, java.util.List<io.kestra.core.runners.io.kestra.core.models.tasks.ResolvedTask> tasks, java.util.List<io.kestra.core.runners.io.kestra.core.models.tasks.ResolvedTask> errors, io.kestra.core.runners.io.kestra.core.models.executions.TaskRun parentTaskRun, io.kestra.core.runners.RunContext runContext, boolean allowFailure)-io.kestra.core.runners.FlowableUtils/method/resolveParallelNexts(io.kestra.core.runners.io.kestra.core.models.executions.Execution execution, java.util.List<io.kestra.core.runners.io.kestra.core.models.tasks.ResolvedTask> tasks, java.util.List<io.kestra.core.runners.io.kestra.core.models.tasks.ResolvedTask> errors, io.kestra.core.runners.io.kestra.core.models.executions.TaskRun parentTaskRun, java.lang.Integer concurrency, java.util.function.BiFunction<java.util.stream.Stream<io.kestra.core.runners.io.kestra.core.models.executions.NextTaskRun>, java.util.List<io.kestra.core.runners.io.kestra.core.models.executions.TaskRun>, java.util.stream.Stream<io.kestra.core.runners.io.kestra.core.models.executions.NextTaskRun>> nextTaskRunFunction)-executiontaskserrorsparentTaskRun",
    "affected_files": 1,
    "category": "detectAndRefactor",
    "size": 6,
    "type": "parameters_to_parameters_data_clump",
    "generalComments": [
      -16
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Hey, we appreciate your contribution",
        " Currently, we cannot merge this",
        " If you want to become a contributor, feel free to join our Slack community and we can next time discuss what would be the best way to pursue such projects",
        " "
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/skylot/jadx": {
    "url": "https://github.com/skylot/jadx",
    "occurence": 20,
    "prUrl": "https://github.com/skylot/jadx/pull/2164",
    "state": "closed",
    "key": "parameters_to_parameters_data_clump-jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeUpdate.java-jadx.core.dex.visitors.typeinference.TypeUpdate/method/applyWithWiderIgnSame(jadx.core.dex.visitors.typeinference.jadx.core.dex.nodes.MethodNode mth, jadx.core.dex.visitors.typeinference.jadx.core.dex.instructions.args.SSAVar ssaVar, jadx.core.dex.visitors.typeinference.jadx.core.dex.instructions.args.ArgType candidateType)-jadx.core.dex.visitors.typeinference.TypeUpdate/method/apply(jadx.core.dex.visitors.typeinference.jadx.core.dex.nodes.MethodNode mth, jadx.core.dex.visitors.typeinference.jadx.core.dex.instructions.args.SSAVar ssaVar, jadx.core.dex.visitors.typeinference.jadx.core.dex.instructions.args.ArgType candidateType, jadx.core.dex.visitors.typeinference.TypeUpdateFlags flags)-mthssaVarcandidateType",
    "affected_files": 1,
    "merged": false,
    "category": "detectAndRefactor",
    "size": 3,
    "type": "parameters_to_parameters_data_clump",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [],
    "reviewCommentsRaw": []
  },
  "https://github.com/dbeaver/dbeaver": {
    "url": "https://github.com/dbeaver/dbeaver",
    "prUrl": "https://github.com/dbeaver/dbeaver/pull/26790",
    "state": "closed",
    "merged": false,
    "type": "parameters_to_parameters_data_clump",
    "size": 4,
    "category": "detectAndRefactor",
    "generalComments": [
      -14,
      -8
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thanks for the contribution.Unfortunately, all I see is formatted code and questionable code extraction that doesn't even use the newest Java features, such as records. Moreover, the code added doesn't include the copyright header or uses nullability annotations as in the rest of the codebase.",
        "You still can help us make DBeaver better by:\r\n- Fixing a bug https://github",
        "com/dbeaver/dbeaver/issues?q=is%3Aissue+is%3Aopen+label%3Abug\r\n- Localizing it to your native language or improving existing localization https://github",
        "com/dbeaver/dbeaver/wiki/Localization"
      ],
      [
        "Thank you for the feedback"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/pmd/pmd": {
    "url": "https://github.com/pmd/pmd",
    "occurence": 2,
    "prUrl": "https://github.com/pmd/pmd/pull/5001",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-pmd-core/src/main/java/net/sourceforge/pmd/cache/internal/CachedRuleMapper.java-net.sourceforge.pmd.cache.internal.CachedRuleMapper/method/getRuleForClass(java.lang.String className, java.lang.String ruleName, java.lang.String languageName)-net.sourceforge.pmd.cache.internal.CachedRuleMapper/method/getRuleKey(java.lang.String className, java.lang.String ruleName, java.lang.String languageName)-classNameruleNamelanguageName",
    "affected_files": 1,
    "category": "detectAndRefactor",
    "size": 3,
    "type": "parameters_to_parameters_data_clump",
    "generalComments": [
      -20,
      -5,
      -2,
      -1,
      18,
      15
    ],
    "reviewComments": [],
    "likertData": [
      [
        {
          "scale": 3
        },
        {
          "scale": 2
        },
        {
          "scale": 0,
          "comments": "It adds object instantiations without adding additional value, as we are replacing a getter to create a key with a constructor of an object + toString to obtain the same thing. It's not even type-enforced, as the key of the map remains a String rather than trying to leverage the newly introduced type.\n\nOverall, this is 100% overhead",
          "keywords": [
            -5,
            -8,
            -6
          ]
        },
        {
          "scale": 4
        },
        {
          "scale": 4
        },
        {
          "scale": 4
        }
      ]
    ],
    "experience": [
      {
        "project": ">2 years",
        "java": ">10 years"
      }
    ],
    "generalCommentsRaw": [
      [
        "Thanks for the PR",
        "\r\n\r\nI've completed the form, but would like to give some feedback and context here",
        "\r\n\r\n**Pros:**\r\n* appropriate names and class location\r\n* no breaking public APIs, as all changes are on internal classes\r\n* logic is not broken\r\n\r\n**Cons:**\r\n* This change doesn't really improve the code… We have ~30 more lines of code, we are constantly creating and destroying new objects only to replace a method that created a String key with a class that is used as key through `toString()`",
        "\r\n* The usage of `toString()` is poor, as it implies the String should be unique AND consistent based on ALL attributes, which is not the standard behavior of this method in Java",
        " A more appropriate (semantic) change would have been to change the type of `cachedRulesInstances` to `Map<RuleKey, Rule>`, and implement `hashCode` and `equals`, where the behavior of such methods are better defined AND the type system would enforce the usage of `RuleKey`",
        " Notice that this would still not prevent the previous item regarding added complexity / object creation/destruction overhead",
        "\r\n\r\nOverall, considering the extra complexity, and that `cachedRulesInstances` is a local field whose existence is hidden from the outside world, it's only used twice within the class, and through a single helper method to get the key, I don't feel this changeset actually makes the code better / easier to understand and maintain",
        ""
      ],
      [
        "<!--\n  0 Errors\n  0 Warnings\n  1 Message: Compared to master:<br />\nThis",
        "",
        "",
        "\n  0 Markdowns\n-->\n<table>\n  <thead>\n    <tr>\n      <th width=\"50\"></th>\n      <th width=\"100%\" data-danger-table=\"true\" data-kind=\"Message\">\n          1 Message\n      </th>\n     </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>:book:</td>\n      <td data-sticky=\"true\">Compared to master:<br />\nThis changeset changes 0 violations,<br />\nintroduces 0 new violations, 0 new errors and 0 new configuration errors,<br />\nremoves 0 violations, 0 errors and 0 configuration errors",
        "<br />\n<a href=\"https://github",
        "com/pmd/pmd/actions/runs/9017023675?pr=5001\">Download full report as build artifact</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<p align=\"right\" data-meta=\"generated_by_danger\">\n  Generated by :no_entry_sign: <a href=\"https://danger",
        "systems/\">Danger</a>\n</p>\n"
      ],
      [
        "Thank you very much for the feedback",
        " Your input  is appreciated :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/apache/linkis": {
    "url": "https://github.com/apache/linkis",
    "occurence": 2,
    "prUrl": "https://github.com/apache/linkis/pull/5119",
    "state": "closed",
    "merged": true,
    "size": 17,
    "key": "fields_to_fields_data_clump-linkis-extensions/linkis-et-monitor/src/main/java/org/apache/linkis/monitor/jobhistory/entity/JobHistory.java-org.apache.linkis.monitor.jobhistory.entity.JobHistory-org.apache.linkis.jobhistory.entity.JobHistory-logPatherrorDescmetricsengineTypeobserveInfoparamserrorCodesubmitUserupdatedTimestatusupdateTimeMillsexecutionCodejobReqIdcreatedTimelabelsprogressidinstancesexecuteUsersource",
    "affected_files": 2,
    "type": "fields_to_fields_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thank you for your refactoring PR, we will review it and give feedback",
        ""
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/micrometer-metrics/micrometer": {
    "url": "https://github.com/micrometer-metrics/micrometer",
    "occurence": 2,
    "prUrl": "https://github.com/micrometer-metrics/micrometer/pull/5110",
    "state": "closed",
    "merged": false,
    "key": "fields_to_fields_data_clump-micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationContext.java-io.micrometer.core.instrument.binder.grpc.GrpcClientObservationContext-io.micrometer.core.instrument.binder.grpc.GrpcServerObservationContext-fullMethodNameserviceNamemethodNameauthoritymethodTypetrailersheadersstatusCode",
    "affected_files": 2,
    "category": "detectAndRefactor",
    "size": 8,
    "type": "fields_to_fields_data_clump",
    "generalComments": [],
    "reviewComments": [
      -1,
      -2,
      -5,
      -13,
      -21,
      -22
    ],
    "generalCommentsRaw": [
      [
        "Thank you very much for the constructive feedback",
        " The wrong header year is my fault",
        " the LLM didn't generate it and I had to copy",
        " On the other points you are absolutely right and it is also true that not every data clump should be refactored like the LLM suggested :)\r\n"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "I think in this particular case having a common `GrpcObservationContext` might be a better solution",
        "\r\n\r\nAlso, I don't think the automated refactoring tool does what you claim:\r\n>reducing complexity and enhancing readability of your source code",
        "\r\n\r\nI think this code is more complex and less readable than it was before",
        " _In some cases_, if we need to change things, this could be an improvement though (in some other cases I thin it is a drawback)",
        "\r\n\r\nAlso now that there is an extra object inside of this class that is heavily used for very short-lived object, introducing this could also mean worse performance (didn't measure)",
        "\r\n\r\n"
      ],
      [
        "Was this really reviewed by a human before opening the PR?\r\nThese mistakes are easy to make even for humans (or miss them during reviews) but it does not help me trusting the PR more",
        ""
      ],
      [
        "I guess this is a completely internal detail and it should not be public",
        ""
      ],
      [
        "Reordering the methods makes this PR hard to review and also, it is not what the PR claims as its goal",
        " If you want to increase readability by reordering the methods, I think that should be a separate PR or it should not do such thing",
        "\r\n\r\nAlso, removing javadoc is something that the automation should not do, it is removing valuable information",
        ""
      ]
    ]
  },
  "https://github.com/projectlombok/lombok": {
    "url": "https://github.com/projectlombok/lombok",
    "occurence": 2,
    "prUrl": "https://github.com/projectlombok/lombok/pull/3680",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java-lombok.javac.handlers.HandleEqualsAndHashCode/method/generateMethods(lombok.javac.handlers.lombok.javac.JavacNode typeNode, lombok.javac.handlers.lombok.javac.JavacNode source, java.util.List<lombok.javac.handlers.lombok.core.handlers.InclusionExclusionUtils.Included<lombok.javac.handlers.lombok.javac.JavacNode, lombok.javac.handlers.lombok.EqualsAndHashCode#lombok.javac.handlers.Include>> members, java.lang.Boolean callSuper, boolean whineIfExists, boolean cacheHashCode, lombok.javac.handlers.lombok.core.handlers.HandlerUtil.FieldAccess fieldAccess, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation> onParam)-lombok.javac.handlers.HandleEqualsAndHashCode/method/createEquals(lombok.javac.handlers.lombok.javac.JavacNode typeNode, java.util.List<lombok.javac.handlers.lombok.core.handlers.InclusionExclusionUtils.Included<lombok.javac.handlers.lombok.javac.JavacNode, lombok.javac.handlers.lombok.EqualsAndHashCode#lombok.javac.handlers.Include>> members, boolean callSuper, lombok.javac.handlers.lombok.core.handlers.HandlerUtil.FieldAccess fieldAccess, boolean needsCanEqual, lombok.javac.handlers.lombok.javac.JavacNode source, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation> onParam)-typeNodesourcemembersfieldAccessonParam",
    "affected_files": 1,
    "type": "parameters_to_parameters_data_clump",
    "size": 8,
    "category": "detectAndRefactor",
    "generalComments": [
      -17
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "> on enhancing code quality through automated refactoring of data clumps, assisted by Large Language Models (LLMs)",
        "\r\n\r\nThe official position of team lombok: That is a masterful sentence that strikes me idiotic",
        "\r\n\r\nNo",
        " Please no",
        " LLMs can, at best, tell you where human eyeballs might wanna have a look",
        " Blanket blasting a boatload of github projects with automated tooling like this is not a good idea",
        "\r\n\r\nPR summarily rejected",
        "\r\n\r\n> Even if you decide not to integrate my changes to your codebase (which is perfectly fine), I ask you to fill out a feedback survey\r\n\r\nWow, so, you write one script and blast a boatload of projects, but all the maintainers are asked to contribute their time to your research project? Oof",
        "\r\n\r\nDid you run your research past an ethics committee? Please provide the contact details for them so I can contact them and explain where they went wrong in allowing this",
        " Thanks!\r\n\r\nNB: Not replying to this is going to help make my case over at your uni's ethics committee",
        ""
      ],
      [
        "Aw, man",
        " Sucky day",
        " I reported you to your uni's ethics committee - see your email",
        " This is",
        "",
        " so not okay",
        " PR, of course, denied",
        ""
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/bitcoinj/bitcoinj": {
    "url": "https://github.com/bitcoinj/bitcoinj",
    "occurence": 4,
    "prUrl": "https://github.com/bitcoinj/bitcoinj/pull/3408",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-core/src/main/java/org/bitcoinj/core/Transaction.java-org.bitcoinj.core.Transaction/method/addSignedInput(org.bitcoinj.core.TransactionOutput output, org.bitcoinj.core.org.bitcoinj.crypto.ECKey sigKey, org.bitcoinj.core.Transaction$SigHash sigHash, boolean anyoneCanPay)-org.bitcoinj.core.Transaction/method/addSignedInput(org.bitcoinj.core.TransactionOutPoint prevOut, org.bitcoinj.core.org.bitcoinj.script.Script scriptPubKey, org.bitcoinj.core.org.bitcoinj.base.Coin amount, org.bitcoinj.core.org.bitcoinj.crypto.ECKey sigKey, org.bitcoinj.core.Transaction$SigHash sigHash, boolean anyoneCanPay)-sigKeysigHashanyoneCanPay",
    "affected_files": 1,
    "size": 5,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [],
    "reviewCommentsRaw": []
  },
  "https://github.com/jenkinsci/jenkins": {
    "url": "https://github.com/jenkinsci/jenkins",
    "occurence": 18,
    "prUrl": "https://github.com/jenkinsci/jenkins/pull/9352",
    "state": "open",
    "merged": false,
    "size": 3,
    "key": "fields_to_fields_data_clump-core/src/main/java/hudson/util/ProcessTree.java-hudson.util.ProcessTree.FreeBSD.FreeBSDProcess-hudson.util.ProcessTree.Linux.LinuxProcess-ppidargumentsenvVars",
    "affected_files": 1,
    "type": "fields_to_fields_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -21
    ],
    "reviewComments": [
      -22,
      -8,
      -24
    ],
    "generalCommentsRaw": [
      [
        "Yay, your first pull request towards Jenkins core was created successfully! Thank you so much! <br> <br> A contributor will provide feedback soon",
        " Meanwhile, you can join the [chats](https://app",
        "gitter",
        "im/#/room/#jenkins-ci:matrix",
        "org) and [community forums](https://community",
        "jenkins",
        "io/) to connect with other Jenkins users, developers, and maintainers",
        "\n"
      ],
      [
        "> What is common to all classes were you added the ProcessProperties is that they inherit from UnixProcess",
        " So instead adding a new class just for the properties wouldn't it be better to just define the things in UnixProcess?\r\n\r\nThank you for the feedback",
        " In your particular case, that might be a better solution",
        " But the LLM chooses the approach that always works, But I agree that pulling up those fields can also be a solution to solve data clumps :)"
      ],
      [
        "Thank you very much for the feedback",
        " @daniel-beck  You are correct that your proposal is better",
        " I haven't encountered this corner case where fields are shared in derived classes before so it is interesting that the LLM did not spot this",
        " I can update this PR to use your \"pulling fields up proposal\" when I find time :)"
      ]
    ],
    "reviewCommentsRaw": [
      [
        "Just wondering, in all other places the ProcessProperties are defined transient, why not here?"
      ],
      [
        "Thats seems to be a oversight by me",
        " Spotbug complained that I should add transient everywhere and when it stopped complaining I didn't look more",
        " Strange :)"
      ],
      [
        "Why is this a public class?"
      ],
      [
        "It's unclear to me why the fields are being made transient",
        " If it's `SE_BAD_FIELD`, wouldn't making `ProcessProperties` `Serializable` address this without potentially causing serialization trouble?\r\n\r\n(FWIW removing the `transient` doesn't fail Spotbugs for me locally",
        ")"
      ],
      [
        "Please add license header",
        ""
      ],
      [
        "`OSProcess` is already `Serializable`",
        "\r\n```suggestion\r\n    public abstract class UnixProcess extends OSProcess {\r\n```"
      ],
      [
        "```suggestion\r\n        protected List<String> arguments;\r\n```"
      ],
      [
        "Oh sorry, that should not have happened"
      ]
    ]
  },
  "https://github.com/real-logic/aeron": {
    "url": "https://github.com/real-logic/aeron",
    "occurence": 6,
    "prUrl": "https://github.com/real-logic/aeron/pull/1609",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-aeron-cluster/src/main/java/io/aeron/cluster/service/SnapshotTaker.java-io.aeron.cluster.service.SnapshotTaker/method/markEnd(long snapshotTypeId, long logPosition, long leadershipTermId, int snapshotIndex, java.util.concurrent.TimeUnit timeUnit, int appVersion)-io.aeron.cluster.service.SnapshotTaker/method/markBegin(long snapshotTypeId, long logPosition, long leadershipTermId, int snapshotIndex, java.util.concurrent.TimeUnit timeUnit, int appVersion)-snapshotTypeIdlogPositionleadershipTermIdsnapshotIndextimeUnitappVersion",
    "affected_files": 1,
    "size": 6,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -17,
      -6
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "We've decided that we will not be taking this PR forward",
        "  The refactoring included does not bring any particular value and at this time we think that LLM and not yet mature enough to be using on projects with the uniqueness and complexity of Aeron",
        ""
      ],
      [
        "Thank you nevertheless for the feedback",
        " If you find time to fill out the survey, it would be really appreciated :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/Stirling-Tools/Stirling-PDF": {
    "url": "https://github.com/Stirling-Tools/Stirling-PDF",
    "occurence": 2,
    "prUrl": "https://github.com/Stirling-Tools/Stirling-PDF/pull/1395",
    "state": "closed",
    "merged": false,
    "key": "parameters_to_parameters_data_clump-src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java-stirling.software.SPDF.controller.api.PdfOverlayController/method/sequentialOverlay(java.util.Map<java.lang.Integer, java.lang.String> overlayGuide, java.io.File[] overlayFiles, int basePageCount, java.util.List<java.io.File> tempFiles)-stirling.software.SPDF.controller.api.PdfOverlayController/method/prepareOverlayGuide(int basePageCount, java.io.File[] overlayFiles, java.lang.String mode, int[] counts, java.util.List<java.io.File> tempFiles)-overlayFilesbasePageCounttempFiles",
    "affected_files": 1,
    "size": 5,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -14
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "## [![Quality Gate Passed](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/checks/QualityGateBadge/qg-passed-20px",
        "png 'Quality Gate Passed')](https://sonarcloud",
        "io/dashboard?id=Stirling-Tools_Stirling-PDF&pullRequest=1395) **Quality Gate passed**  \nIssues  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [1 New issue](https://sonarcloud",
        "io/project/issues?id=Stirling-Tools_Stirling-PDF&pullRequest=1395&resolved=false&sinceLeakPeriod=true)  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/accepted-16px",
        "png '') [0 Accepted issues](https://sonarcloud",
        "io/project/issues?id=Stirling-Tools_Stirling-PDF&pullRequest=1395&resolutions=WONTFIX)\n\nMeasures  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [0 Security Hotspots](https://sonarcloud",
        "io/project/security_hotspots?id=Stirling-Tools_Stirling-PDF&pullRequest=1395&resolved=false&sinceLeakPeriod=true)  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/no-data-16px",
        "png '') No data about Coverage  \n![](https://sonarsource",
        "github",
        "io/sonarcloud-github-static-resources/v2/common/passed-16px",
        "png '') [0",
        "0% Duplication on New Code](https://sonarcloud",
        "io/component_measures?id=Stirling-Tools_Stirling-PDF&pullRequest=1395&metric=new_duplicated_lines_density&view=list)  \n  \n[See analysis details on SonarCloud](https://sonarcloud",
        "io/dashboard?id=Stirling-Tools_Stirling-PDF&pullRequest=1395)\n\n"
      ],
      [
        "@compf  id suggest using\r\nhttps://www",
        "baeldung",
        "com/java-record-keyword\r\nfor this"
      ],
      [
        "Thank you for the feedback",
        " Are there other reasons why you have not merged this PR",
        " As I said this i perfectly fine but to improve my tool and further research I need constructive feedback :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/jOOQ/jOOQ": {
    "url": "https://github.com/jOOQ/jOOQ",
    "occurence": 2,
    "prUrl": "https://github.com/jOOQ/jOOQ/pull/16790",
    "state": "closed",
    "merged": false,
    "size": 6,
    "type": "parameters_to_parameters_data_clump",
    "key": "parameters_to_parameters_data_clump-jOOQ-codegen/src/main/java/org/jooq/codegen/JavaGenerator.java-org.jooq.codegen.JavaGenerator/method/getType(org.jooq.codegen.org.jooq.meta.Database db, org.jooq.codegen.org.jooq.meta.SchemaDefinition schema, org.jooq.codegen.JavaWriter out, java.lang.String t, int p, int s, org.jooq.codegen.org.jooq.Name u, java.lang.String javaType, java.lang.String defaultType, org.jooq.codegen.org.jooq.codegen.GeneratorStrategy.Mode udtMode)-org.jooq.codegen.JavaGenerator/method/getType(org.jooq.codegen.org.jooq.meta.Database db, org.jooq.codegen.org.jooq.meta.SchemaDefinition schema, org.jooq.codegen.JavaWriter out, java.lang.String t, int p, int s, org.jooq.codegen.org.jooq.Name u, java.lang.String javaType, java.lang.String defaultType, org.jooq.codegen.org.jooq.codegen.GeneratorStrategy.Mode udtMode, org.jooq.codegen.org.jooq.meta.XMLTypeDefinition xmlType)-dbschemaouttpsujavaTypedefaultTypeudtMode",
    "affected_files": 1,
    "category": "detectAndRefactor",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "> I ask you to fill out a feedback survey\r\n\r\nI can give you my hourly rate?"
      ],
      [
        "> > I ask you to fill out a feedback survey\r\n> \r\n> I can give you my hourly rate?\r\n\r\nOf course this is voluntary and I don't want to waste anybody's time, if they do not want to participate",
        " My hope is that these refactorings can be the first step to improve the codebase",
        " Giving feedback via GitHub would also be okay :)"
      ],
      [
        "> Giving feedback via GitHub would also be okay :)\r\n\r\nSure I can give it here",
        " What's your budget for my consultancy services?"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/junit-team/junit5": {
    "url": "https://github.com/junit-team/junit5",
    "occurence": 20,
    "prUrl": "https://github.com/junit-team/junit5/pull/3867",
    "state": "closed",
    "merged": true,
    "key": "fields_to_fields_data_clump-junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/LifecycleMethodExecutionExceptionHandlerTests.java-org.junit.jupiter.engine.extension.LifecycleMethodExecutionExceptionHandlerTests.RethrowExceptionHandler-org.junit.jupiter.engine.extension.LifecycleMethodExecutionExceptionHandlerTests.UnrecoverableExceptionHandler-beforeEachCallsbeforeAllCallsafterEachCallsafterAllCalls",
    "affected_files": 1,
    "size": 4,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [],
    "reviewComments": [
      -15,
      -22,
      -8,
      -12,
      -31
    ],
    "generalCommentsRaw": [
      [
        "Thank you very much for the feedback",
        "  @marcphilipp I have just applied the suggested changes",
        "\r\n\r\n@mpkorstanje While I like your reasoning, I think this  should  be part of a larger redesign of the test classes",
        " I haven't implement your proposal  for now but I would be happy to do so if others concur"
      ],
      [
        "@compf Thanks! :+1: "
      ]
    ],
    "reviewCommentsRaw": [
      [
        "Please make this a nested class of `LifecycleMethodExecutionExceptionHandlerTests` since it's only used there",
        ""
      ],
      [
        "Since this class is only a local test helper, I don't think we need to encapsulate the fields",
        " Therefore, I think these methods should be inlined",
        ""
      ],
      [
        "As this class isn't used outside of `LifecycleMethodExecutionExceptionHandlerTests` it can be an inner class",
        " This keeps the test contained to its own file, removing the need to consider the counter outside of the context in which it is used",
        ""
      ],
      [
        "With the introduction of the `HandlerCallCounter` there is no need to store the counts as a field in the handler",
        " You could now declare a `HandlerCallCounter rethrowCounter` as a static field on `LifecycleMethodExecutionExceptionHandlerTests` and reference that everywhere",
        " I",
        "e",
        "\r\n\r\n```\r\nassertEquals(1, rethrowCounter",
        "getBeforeAllCalls(), \"Exception should handled in @BeforeAll\");\r\n```\r\n\r\nWith some thoughtfully chosen method and field names this would reduce the verbosity of the code a bit and keep the whole assertion on a single line",
        ""
      ]
    ]
  },
  "https://github.com/AutoMQ/automq": {
    "url": "https://github.com/AutoMQ/automq",
    "occurence": 2,
    "prUrl": "https://github.com/AutoMQ/automq/pull/1663",
    "state": "closed",
    "key": "parameters_to_parameters_data_clump-core/src/main/java/kafka/autobalancer/goals/AbstractGoal.java-kafka.autobalancer.goals.AbstractGoal/method/trySwapPartitionOut(kafka.autobalancer.goals.kafka.autobalancer.model.ClusterModelSnapshot cluster, kafka.autobalancer.goals.kafka.autobalancer.model.TopicPartitionReplicaUpdater#kafka.autobalancer.goals.TopicPartitionReplica srcReplica, kafka.autobalancer.goals.kafka.autobalancer.model.BrokerUpdater#kafka.autobalancer.goals.Broker srcBroker, java.util.List<kafka.autobalancer.goals.kafka.autobalancer.model.BrokerUpdater#kafka.autobalancer.goals.Broker> candidates, java.util.Collection<kafka.autobalancer.goals.Goal> goalsByPriority, java.util.Collection<kafka.autobalancer.goals.Goal> optimizedGoals, java.util.Map<java.lang.String, java.util.Set<java.lang.String>> goalsByGroup, java.util.Comparator<kafka.autobalancer.goals.kafka.autobalancer.model.TopicPartitionReplicaUpdater#kafka.autobalancer.goals.TopicPartitionReplica> replicaComparator, java.util.function.BiPredicate<kafka.autobalancer.goals.kafka.autobalancer.model.TopicPartitionReplicaUpdater#kafka.autobalancer.goals.TopicPartitionReplica, kafka.autobalancer.goals.kafka.autobalancer.model.TopicPartitionReplicaUpdater#kafka.autobalancer.goals.TopicPartitionReplica> replicaBiPredicate)-kafka.autobalancer.goals.AbstractGoal/method/tryMovePartitionOut(kafka.autobalancer.goals.kafka.autobalancer.model.ClusterModelSnapshot cluster, kafka.autobalancer.goals.kafka.autobalancer.model.TopicPartitionReplicaUpdater#kafka.autobalancer.goals.TopicPartitionReplica replica, kafka.autobalancer.goals.kafka.autobalancer.model.BrokerUpdater#kafka.autobalancer.goals.Broker srcBroker, java.util.List<kafka.autobalancer.goals.kafka.autobalancer.model.BrokerUpdater#kafka.autobalancer.goals.Broker> candidates, java.util.Collection<kafka.autobalancer.goals.Goal> goalsByPriority, java.util.Collection<kafka.autobalancer.goals.Goal> optimizedGoals, java.util.Map<java.lang.String, java.util.Set<java.lang.String>> goalsByGroup)-clustersrcBrokercandidatesgoalsByPriorityoptimizedGoalsgoalsByGroup",
    "affected_files": 1,
    "merged": true,
    "size": 7,
    "type": "parameters_to_parameters_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "[![CLA assistant check](https://cla-assistant",
        "io/pull/badge/signed)](https://cla-assistant",
        "io/AutoMQ/automq?pullRequest=1663) <br/>All committers have signed the CLA",
        ""
      ],
      [
        "@compf Hi, thanks for your commit, could you please look at the failed check and fix the pr title as per specified in https://www",
        "conventionalcommits",
        "org/en/v1",
        "0",
        "0/#summary"
      ],
      [
        "The check seems not to trigger again, but I amended the commit as requested :)"
      ]
    ],
    "reviewCommentsRaw": []
  },
  "https://github.com/OpenRefine/OpenRefine": {
    "url": "https://github.com/OpenRefine/OpenRefine",
    "occurence": 2,
    "prUrl": "https://github.com/OpenRefine/OpenRefine/pull/6741",
    "state": "closed",
    "merged": false,
    "key": "fields_to_fields_data_clump-main/src/com/google/refine/browsing/facets/RangeFacet.java-com.google.refine.browsing.facets.RangeFacet-com.google.refine.browsing.facets.TimeRangeFacet-_blankCount_cellIndex_step_baseBlankCount_max_binsMINTO_baseErrorCountFROM_errorCountMAX_errorMessage_min_eval_baseBins",
    "affected_files": 2,
    "size": 3,
    "type": "fields_to_fields_data_clump",
    "category": "detectAndRefactor",
    "generalComments": [
      -26
    ],
    "reviewComments": [],
    "generalCommentsRaw": [
      [
        "Thanks for the contribution! It's always interesting to see what types of refactorings are proposed, so we'll definitely review this",
        " \r\n\r\nIn the mean time, can you please address the lint failures? Running `",
        "/refine lint` and committing the result should do the trick",
        ""
      ],
      [
        "It looks like there are a couple of tests failing",
        " You can run the unit tests locally with `",
        "/refine test`"
      ],
      [
        "Ok, it seems that the refactoring as suggested by the LLM does not work as nicely as hoped",
        " I will note that and close this PR because it is not the purpose of the master thesis to make many manual correction in order for all unit tests to pass",
        " Thank you again for your feedback :)"
      ],
      [
        "@compf may I suggest that you could already check on your side whether the test suite still succeeds after your changes, before opening your pull request?\r\nFor most projects, you'll find that running the test suite is reasonably well documented",
        " That would spare a lot of time from project maintainers",
        ""
      ],
      [
        "> @compf may I suggest that you could already check on your side whether the test suite still succeeds after your changes, before opening your pull request? For most projects, you'll find that running the test suite is reasonably well documented",
        " That would spare a lot of time from project maintainers",
        "\r\n\r\nI am already doing this and I am very sure that I did not spot a failing test or linting problem before I opened the PR",
        " I don't know what went wrong in this case (maybe a cache issue)  but it should not have happened",
        " This is the first instance in about 40 projects where my carefulness seems to be not enough",
        " So I am very sorry for wasting anybody's time "
      ]
    ],
    "reviewCommentsRaw": []
  }
}