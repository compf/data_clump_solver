{
    "messages": [
        {
            "content": "\nI will provide you one or more Java code files .\nFind all data clumps in the respective files.\n\n\n\n## OUTPUT FORMAT\nUse the following JSON format for the output:\n\n{\n   \"data_clumps\":{\n        \"unique_key\":{\n            \"key\": \"a unique key that should be created. It must be same as the key 'unique_key' in the 'data_clumps' object\",\n            \"from_file_path\":\"The path of the file where one part of the data clump is found\",\n            \"from_class_or_interface_key\":\"The fully qualified name of the class or interface where one part of the data clump is found\",\n            \"from_class_or_interface_name\":\"The name of the class or interface where one part of the data clump is found\",\n            \n            \"from_method_key\":\"The fully qualified name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",\n            \"from_method_name\":\"The name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",\n\n            \"to_file_path\":\"The path of the file where the  other part of the data clump is found\",\n            \"to_class_or_interface_key\":\"The fully qualified name of the class or interface where the  other part part of the data clump is found\",\n            \"to_class_or_interface_name\":\"The name of the class or interface where the  other  part of the data clump is found\",\n            \n            \"to_method_key\":\"The fully qualified name of the method where the  other part part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",\n            \"to_method_name\":\"The name of the method where the  other  part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",\n            \"data_clump_data\":{\n                // for each data clump variable\n                \"other_unique_key\":{\n                    \"key\":\"a unique key that should be created. It must be same as the key 'other_unique_key' in the 'data_clump_data' object\",\n                    \"name\": \"The name of the data clump variable that exists on the one part of the data clump\",\n                    \"type\": \"The type of the data clump variable that exists on the one part of the data clump\",\n                    \"displayedType\": \"The  type of the data clump variable, as it appears in the source code, that exists on the one part of the data clump\",\n                    \n                    \"position\": {\n                        \"startLine\": \"The line number of the  data clump variable on the one part of the data clump.This must be relative to the file\",\n                        \"startColumn\": \"The column number of the data clump variable on the one part of the data clump\"\n                    },\n                    \"to_variable\":{\n                        \"key\":\"a unique key that should be created.\",\n                        \"name\": \"The name of the data clump variable that exists on the other part of the data clump\",\n                        \"type\": \"The type of the data clump variable, as it appears in the source code, that exists on the other part of the data clump\",\n                        \"position\": {\n                            \"startLine\": \"The line number of the  data clump variable on the other part of the data clump. This must be relative to the file\",\n                            \"startColumn\": \"The column number of the data clump variable on the other part of the data clump\",\n                        }\n                    }\n                }\n            }\n        }\n   }\n}\n\n## END OUTPUT FORMAT\n",
            "role": "system"
        },
        {
            "content": "{\"src/argouml-core-model/src/org/argouml/model/CoreFactory.java\":[{\"fromLine\":39,\"toLine\":44,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.util.List;\\n\\n\"},{\"fromLine\":68,\"toLine\":78,\"content\":\"     * @param name The name.\\n     * @return an initialized UML Abstraction instance.\\n     * @param supplier the supplier of the abstraction\\n     * @param client the client of the abstraction\\n     */\\n    Object buildAbstraction(String name, Object supplier, Object client);\\n\\n    /**\\n     * Create an empty but initialized instance of an Artifact\\n     * \\n     * @since UML 1.4\"},{\"fromLine\":348,\"toLine\":360,\"content\":\"     * @return the newly build binary associationrole\\n     * @deprecated for 0.27.3 by tfmorris.  Use \\n     * {@link #buildAssociation(Object, Object, Object, Object, boolean)}.\\n     */\\n    @Deprecated\\n    Object buildAssociation(Object fromClassifier, Object aggregationKind1,\\n            Object toClassifier, Object aggregationKind2,\\n            Boolean unidirectional);\\n\\n\\n    /**\\n     * Builds a binary associationrole on basis of two classifierroles,\\n     * navigation and aggregation.\"},{\"fromLine\":364,\"toLine\":376,\"content\":\"     * @param toClassifier     the second given classifier\\n     * @param aggregationKind2 the second aggregationkind\\n     * @param unidirectional true if unidirectional\\n     * @return the newly build binary associationrole\\n     */\\n    Object buildAssociation(Object fromClassifier, Object aggregationKind1,\\n            Object toClassifier, Object aggregationKind2,\\n            boolean unidirectional);\\n\\n    /**\\n     * Builds a binary associations between two classifiers with\\n     * default values for the association ends and the association\\n     * itself.<p>\"},{\"fromLine\":390,\"toLine\":401,\"content\":\"     * @param c2 The second classifier to connect to\\n     * @param nav2 The navigability of the second Associaton end\\n     * @param name the given name\\n     * @return association\\n     */\\n    Object buildAssociation(Object c1, boolean nav1, Object c2, boolean nav2,\\n            String name);\\n\\n    /**\\n     * Builds an associationClass between classifier end1 and end2 with a\\n     * default class.<p>\\n     *\"},{\"fromLine\":423,\"toLine\":443,\"content\":\"     * @param visibility the visibilitykind\\n     * @return AssociationEnd\\n     */\\n    @Deprecated\\n    Object buildAssociationEnd(\\n        Object assoc,\\n        String name,\\n        Object type,\\n        Object multi,\\n        Object stereo,\\n        boolean navigable,\\n        Object order,\\n        Object aggregation,\\n        Object scope,\\n        Object changeable,\\n        Object visibility);\\n\\n    /**\\n     * Builds a fully configurable association end. All variables for\\n     * an associationend can be given as parameter.\\n     * @param assoc The associaton this end will be part of\"},{\"fromLine\":454,\"toLine\":474,\"content\":\"     * @param changeable the changeablekind\\n     * @param visibility the visibilitykind\\n     * @return AssociationEnd\\n     */\\n    Object buildAssociationEnd(\\n        Object assoc,\\n        String name,\\n        Object type,\\n        Integer[] multiplicity,\\n        Object stereo,\\n        boolean navigable,\\n        Object order,\\n        Object aggregation,\\n        Object scope,\\n        Object changeable,\\n        Object visibility);\\n    \\n    /**\\n     * Builds a simply configured association end.\\n     *\\n     * @param type the given classifier\"},{\"fromLine\":717,\"toLine\":727,\"content\":\"     *            the type of the return parameter\\n     * @param name\\n     *            the given name for the operation\\n     * @return the operation\\n     */\\n    Object buildOperation2(Object cls, Object returnType, String name);\\n\\n\\n    /**\\n     * Adds a parameter initialized to default values to a given event\\n     * or behavioral feature or objectFlowState.\"},{\"fromLine\":740,\"toLine\":750,\"content\":\"     * @param supplier is the supplier\\n     * @param namespace the namespace to use if client and\\n     * supplier are of different namespace\\n     * @return Object the created abstraction\\n     */\\n    Object buildRealization(Object client, Object supplier, Object namespace);\\n\\n    /**\\n     * Build a TemplateArgument which has the given element as its modelElement.\\n     * <p>\\n     * <em>NOTE:</em> Although it's not shown in the UML 1.4 spec, a\"},{\"fromLine\":783,\"toLine\":794,\"content\":\"     *            used if not value is given in a Binding. Null if not used.\\n     * \\n     * @param element ModelElement to be used as argument\\n     * @return newly created TemplateParameter\\n     */\\n    Object buildTemplateParameter(Object template, Object parameter, \\n            Object defaultElement);\\n    \\n    /**\\n     * Builds a usage between some client and a supplier. If client\\n     * and supplier do not have the same model, an\\n     * {@link IllegalArgumentException} is thrown.\"},{\"fromLine\":844,\"toLine\":854,\"content\":\"     *            and type must match those of the TemplateParameters for the\\n     *            supplier. A null may be passed to not create arguments at\\n     *            build time.\\n     * @return the newly created Binding\\n     */\\n    Object buildBinding(Object client, Object supplier, List arguments);\\n\\n    /**\\n     * Copies a class, and it's features. This may also require other\\n     * classifiers to be copied.\\n     *\"}],\"src/argouml-core-model-euml/src/org/argouml/model/euml/CoreFactoryEUMLImpl.java\":[{\"fromLine\":15,\"toLine\":67,\"content\":\"\\npackage org.argouml.model.euml;\\n\\nimport java.util.List;\\n\\nimport org.argouml.model.AbstractModelFactory;\\nimport org.argouml.model.CoreFactory;\\nimport org.argouml.model.NotImplementedException;\\nimport org.eclipse.emf.edit.domain.EditingDomain;\\nimport org.eclipse.uml2.uml.Abstraction;\\nimport org.eclipse.uml2.uml.AggregationKind;\\nimport org.eclipse.uml2.uml.Artifact;\\nimport org.eclipse.uml2.uml.Association;\\nimport org.eclipse.uml2.uml.AssociationClass;\\nimport org.eclipse.uml2.uml.BehavioralFeature;\\nimport org.eclipse.uml2.uml.BehavioredClassifier;\\nimport org.eclipse.uml2.uml.Classifier;\\nimport org.eclipse.uml2.uml.Comment;\\nimport org.eclipse.uml2.uml.Component;\\nimport org.eclipse.uml2.uml.ComponentRealization;\\nimport org.eclipse.uml2.uml.Constraint;\\nimport org.eclipse.uml2.uml.DataType;\\nimport org.eclipse.uml2.uml.Dependency;\\nimport org.eclipse.uml2.uml.Element;\\nimport org.eclipse.uml2.uml.Enumeration;\\nimport org.eclipse.uml2.uml.EnumerationLiteral;\\nimport org.eclipse.uml2.uml.Generalization;\\nimport org.eclipse.uml2.uml.Interface;\\nimport org.eclipse.uml2.uml.InterfaceRealization;\\nimport org.eclipse.uml2.uml.Manifestation;\\nimport org.eclipse.uml2.uml.MultiplicityElement;\\nimport org.eclipse.uml2.uml.NamedElement;\\nimport org.eclipse.uml2.uml.Namespace;\\nimport org.eclipse.uml2.uml.Node;\\nimport org.eclipse.uml2.uml.OpaqueBehavior;\\nimport org.eclipse.uml2.uml.Operation;\\nimport org.eclipse.uml2.uml.PackageImport;\\nimport org.eclipse.uml2.uml.PackageableElement;\\nimport org.eclipse.uml2.uml.Parameter;\\nimport org.eclipse.uml2.uml.PrimitiveType;\\nimport org.eclipse.uml2.uml.Property;\\nimport org.eclipse.uml2.uml.Stereotype;\\nimport org.eclipse.uml2.uml.TemplateBinding;\\nimport org.eclipse.uml2.uml.TemplateParameter;\\nimport org.eclipse.uml2.uml.TemplateParameterSubstitution;\\nimport org.eclipse.uml2.uml.TemplateSignature;\\nimport org.eclipse.uml2.uml.TemplateableElement;\\nimport org.eclipse.uml2.uml.Type;\\nimport org.eclipse.uml2.uml.UMLFactory;\\nimport org.eclipse.uml2.uml.Usage;\\nimport org.eclipse.uml2.uml.ValueSpecification;\\nimport org.eclipse.uml2.uml.VisibilityKind;\\n\"},{\"fromLine\":86,\"toLine\":97,\"content\":\"    public CoreFactoryEUMLImpl(EUMLModelImplementation implementation) {\\n        modelImpl = implementation;\\n        editingDomain = implementation.getEditingDomain();\\n    }\\n\\n    public Abstraction buildAbstraction(final String name,\\n            final Object supplier, final Object client) {\\n        if (!(client instanceof NamedElement)\\n                || !(supplier instanceof NamedElement)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The client and the supplier \\\" + //$NON-NLS-1$\\n                    \\\"must be NamedElements.\\\"); //$NON-NLS-1$\"},{\"fromLine\":122,\"toLine\":135,\"content\":\"        cmd.setObjects(run.getParams().get(0), client, supplier);\\n\\n        return (Abstraction) run.getParams().get(0);\\n    }\\n\\n    private Association buildAssociation(final Object type1,\\n            final Boolean navigability1, final Object aggregationKind1,\\n            final Object type2, final Boolean navigability2,\\n            final Object aggregationKind2, final String associationName) {\\n        if (!(type1 instanceof Type) || !(type2 instanceof Type)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The types must be instances of Type.\\\"); //$NON-NLS-1$\\n        }\\n        if ((aggregationKind1 != null \"},{\"fromLine\":191,\"toLine\":203,\"content\":\"\\n        return (Association) run.getParams().get(0);\\n    }\\n\\n    @Deprecated\\n    public Association buildAssociation(Object fromClassifier,\\n            Object aggregationKind1, Object toClassifier,\\n            Object aggregationKind2, Boolean unidirectional) {\\n        if (unidirectional != null) {\\n            return buildAssociation(\\n                    fromClassifier, !unidirectional, \\n                    aggregationKind1, toClassifier,\\n                    true, aggregationKind2, null);\"},{\"fromLine\":207,\"toLine\":219,\"content\":\"                    aggregationKind2, null);\\n        }\\n    }\\n    \\n\\n    public Object buildAssociation(Object fromClassifier,\\n            Object aggregationKind1, Object toClassifier,\\n            Object aggregationKind2, boolean unidirectional) {\\n        return buildAssociation(\\n                fromClassifier, true, aggregationKind1, toClassifier,\\n                !unidirectional, aggregationKind2, null); \\n    }\\n\"},{\"fromLine\":222,\"toLine\":233,\"content\":\"            Object classifier2) {\\n        return buildAssociation(\\n                classifier1, null, null, classifier2, null, null, null);\\n    }\\n\\n    public Association buildAssociation(Object c1, boolean nav1, Object c2,\\n            boolean nav2, String name) {\\n        return buildAssociation(c1, nav1, null, c2, nav2, null, name);\\n    }\\n\\n    public AssociationClass buildAssociationClass(final Object end1,\\n            final Object end2) {\"},{\"fromLine\":271,\"toLine\":285,\"content\":\"        cmd.setObjects(run.getParams().get(0), end1, end2);\\n\\n        return (AssociationClass) run.getParams().get(0);\\n    }\\n\\n    private Property buildAssociationEnd(final Object assoc, final String name,\\n            final Object type, final Object multi, final Object stereo,\\n            final Boolean navigable, final Object order,\\n            final Object aggregation, final Object scope,\\n            final Object changeable, final Object visibility) {\\n        // The attribute 'targetScope' of an AssociationEnd in UML1.x is no\\n        // longer supported in UML2.x\\n        if (!(assoc instanceof Association)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The assoc must be instance of Association.\\\"); //$NON-NLS-1$\"},{\"fromLine\":347,\"toLine\":362,\"content\":\"        modelImpl.getModelEventPump().getRootContainer().setHoldEvents(false);\\n\\n        return (Property) run.getParams().get(0);\\n    }\\n\\n    private Property buildAssociationEndInternal(final Association assoc,\\n            final String name, final Type type,\\n            final Integer[] multi, final Stereotype stereo,\\n            final Boolean navigable, final Boolean order,\\n            final AggregationKind aggregation, // final Object scope,\\n            final Object changeable, final VisibilityKind visibility) {\\n        // The attribute 'targetScope' of an AssociationEnd in UML1.x is no\\n        // longer supported in UML2.x\\n\\n        Property property = createAssociationEnd();\\n        property.setType((Type) type);\"},{\"fromLine\":397,\"toLine\":417,\"content\":\"        }\\n        return property;\\n    }\\n    \\n    @Deprecated\\n    public Property buildAssociationEnd(Object assoc, String name, Object type,\\n            Object multi, Object stereo, boolean navigable, Object order,\\n            Object aggregation, Object scope, Object changeable,\\n            Object visibility) {\\n        throw new NotImplementedException();\\n    }\\n\\n    public Property buildAssociationEnd(Object assoc, String name, Object type,\\n            Integer[] multi, Object stereo, boolean navigable, Object order,\\n            Object aggregation, Object scope, Object changeable,\\n            Object visibility) {\\n        return buildAssociationEndInternal((Association) assoc, name,\\n                (Type) type, multi, (Stereotype) stereo, (Boolean) navigable,\\n                (Boolean) order, (AggregationKind) aggregation,\\n                changeable, (VisibilityKind) visibility);\\n    }\"},{\"fromLine\":473,\"toLine\":488,\"content\":\"\\n    /**\\n     * Removed from UML2.x, use buildTemplateBinding instead.\\n     */\\n    @Deprecated\\n    public Object buildBinding(Object client, Object supplier, List arguments) {\\n        return buildTemplateBinding(client, supplier, arguments);\\n    }\\n\\n    public TemplateBinding buildTemplateBinding(final Object client,\\n            final Object supplier, final List arguments) {\\n        // TODO: Is it appropriate the TemplateableElement as the client and a\\n        // list of TemplateParameterSubstitution as the list of parameters?\\n        if (!(client instanceof TemplateableElement)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The supplier must be instance of \\\" + //$NON-NLS-1$\"},{\"fromLine\":909,\"toLine\":920,\"content\":\"    public Operation buildOperation(Object classifier, Object returnType) {\\n        return buildOperation2(classifier, returnType, null);\\n    }\\n\\n\\n    public Operation buildOperation2(final Object cls, final Object returnType,\\n            final String name) {\\n        if ((returnType != null && !(returnType instanceof Type))\\n                || !(cls instanceof Type)) {\\n            throw new IllegalArgumentException(\\n                    \\\"cls and returnType must be instances of Type.\\\"); //$NON-NLS-1$\\n        }\"},{\"fromLine\":985,\"toLine\":996,\"content\":\"\\n    public PackageImport buildPackageImport(Object client, Object supplier) {\\n        return buildPackageImport(client, supplier, null);\\n    }\\n\\n    private PackageImport buildPackageImport(final Object client,\\n            final Object supplier, final VisibilityKind visibility) {\\n        if (!(client instanceof Namespace)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The client must be instance of Namespace.\\\"); //$NON-NLS-1$\\n        }\\n        if (!(supplier instanceof org.eclipse.uml2.uml.Package)) {\"},{\"fromLine\":1015,\"toLine\":1026,\"content\":\"        cmd.setObjects(run.getParams().get(0), client, supplier);\\n\\n        return (PackageImport) run.getParams().get(0);\\n    }\\n\\n    public InterfaceRealization buildRealization(final Object client,\\n            final Object supplier, Object namespace) {\\n        // The interface realization will be created in the client namespace\\n        // (client is a namespace)\\n        if (!(client instanceof BehavioredClassifier)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The client must be instance of BehavioredClassifier\\\"); //$NON-NLS-1$\"},{\"fromLine\":1258,\"toLine\":1269,\"content\":\"        // TODO: Auto-generated method stub\\n        throw new NotYetImplementedException();\\n        \\n    }\\n\\n    public Object buildTemplateParameter(Object template, Object parameter,\\n            Object defaultElement) {\\n        // TODO: Auto-generated method stub\\n        throw new NotYetImplementedException();\\n        \\n    }\\n\"}],\"src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java\":[{\"fromLine\":38,\"toLine\":75,\"content\":\"\\npackage org.argouml.ui;\\n\\nimport java.awt.Font;\\nimport javax.swing.plaf.ColorUIResource;\\nimport javax.swing.plaf.FontUIResource;\\nimport javax.swing.plaf.metal.MetalTheme;\\n\\n/**\\n * This class defines a variation on the default Metal Theme.\\n */\\npublic class JasonsBigTheme extends MetalTheme {\\n\\n    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\\n\\n    private final ColorUIResource secondary1 =\\n\\tnew ColorUIResource(102, 102, 102);\\n    private final ColorUIResource secondary2 =\\n\\tnew ColorUIResource(153, 153, 153);\\n    private final ColorUIResource secondary3 =\\n\\tnew ColorUIResource(204, 204, 204);\\n\\n    private final FontUIResource controlFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.PLAIN, 14);\\n    private final FontUIResource systemFont =\\n\\tnew FontUIResource(\\\"Dialog\\\", Font.PLAIN, 14);\\n    private final FontUIResource windowTitleFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.BOLD, 14);\\n    private final FontUIResource userFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.PLAIN, 14);\\n    private final FontUIResource smallFont =\\n\\tnew FontUIResource(\\\"Dialog\\\", Font.PLAIN, 12);\\n\\n    /*\\n     * @see javax.swing.plaf.metal.MetalTheme#getName()\\n     */\"}],\"src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java\":[{\"fromLine\":38,\"toLine\":75,\"content\":\"\\npackage org.argouml.ui;\\n\\nimport java.awt.Font;\\nimport javax.swing.plaf.ColorUIResource;\\nimport javax.swing.plaf.FontUIResource;\\nimport javax.swing.plaf.metal.MetalTheme;\\n\\n/**\\n * This class defines a variation on the default Metal Theme.\\n */\\npublic class JasonsHugeTheme extends MetalTheme {\\n\\n    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\\n\\n    private final ColorUIResource secondary1 =\\n\\tnew ColorUIResource(102, 102, 102);\\n    private final ColorUIResource secondary2 =\\n\\tnew ColorUIResource(153, 153, 153);\\n    private final ColorUIResource secondary3 =\\n\\tnew ColorUIResource(204, 204, 204);\\n\\n    private final FontUIResource controlFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.BOLD, 16);\\n    private final FontUIResource systemFont =\\n\\tnew FontUIResource(\\\"Dialog\\\", Font.PLAIN, 16);\\n    private final FontUIResource windowTitleFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.BOLD, 16);\\n    private final FontUIResource userFont =\\n\\tnew FontUIResource(\\\"SansSerif\\\", Font.PLAIN, 16);\\n    private final FontUIResource smallFont =\\n\\tnew FontUIResource(\\\"Dialog\\\", Font.PLAIN, 14);\\n\\n    /*\\n     * @see javax.swing.plaf.metal.MetalTheme#getName()\\n     */\"}],\"src/argouml-core-model-mdr/src/org/argouml/model/mdr/CoreFactoryMDRImpl.java\":[{\"fromLine\":40,\"toLine\":121,\"content\":\"\\npackage org.argouml.model.mdr;\\n\\nimport java.util.ArrayList;\\nimport java.util.Collection;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\n\\nimport javax.jmi.reflect.InvalidObjectException;\\nimport javax.jmi.reflect.RefObject;\\n\\nimport org.argouml.model.CoreFactory;\\nimport org.argouml.model.Model;\\nimport org.argouml.model.ModelCommand;\\nimport org.argouml.model.ModelManagementHelper;\\nimport org.argouml.model.NotImplementedException;\\nimport org.omg.uml.behavioralelements.activitygraphs.ObjectFlowState;\\nimport org.omg.uml.behavioralelements.commonbehavior.Reception;\\nimport org.omg.uml.behavioralelements.commonbehavior.Signal;\\nimport org.omg.uml.behavioralelements.statemachines.Event;\\nimport org.omg.uml.foundation.core.Abstraction;\\nimport org.omg.uml.foundation.core.Artifact;\\nimport org.omg.uml.foundation.core.AssociationClass;\\nimport org.omg.uml.foundation.core.AssociationEnd;\\nimport org.omg.uml.foundation.core.Attribute;\\nimport org.omg.uml.foundation.core.BehavioralFeature;\\nimport org.omg.uml.foundation.core.Binding;\\nimport org.omg.uml.foundation.core.Classifier;\\nimport org.omg.uml.foundation.core.Comment;\\nimport org.omg.uml.foundation.core.Component;\\nimport org.omg.uml.foundation.core.Constraint;\\nimport org.omg.uml.foundation.core.CorePackage;\\nimport org.omg.uml.foundation.core.DataType;\\nimport org.omg.uml.foundation.core.Dependency;\\nimport org.omg.uml.foundation.core.Element;\\nimport org.omg.uml.foundation.core.ElementResidence;\\nimport org.omg.uml.foundation.core.Enumeration;\\nimport org.omg.uml.foundation.core.EnumerationLiteral;\\nimport org.omg.uml.foundation.core.Feature;\\nimport org.omg.uml.foundation.core.Flow;\\nimport org.omg.uml.foundation.core.GeneralizableElement;\\nimport org.omg.uml.foundation.core.Generalization;\\nimport org.omg.uml.foundation.core.Interface;\\nimport org.omg.uml.foundation.core.Method;\\nimport org.omg.uml.foundation.core.ModelElement;\\nimport org.omg.uml.foundation.core.Namespace;\\nimport org.omg.uml.foundation.core.Node;\\nimport org.omg.uml.foundation.core.Operation;\\nimport org.omg.uml.foundation.core.Parameter;\\nimport org.omg.uml.foundation.core.Permission;\\nimport org.omg.uml.foundation.core.PresentationElement;\\nimport org.omg.uml.foundation.core.Primitive;\\nimport org.omg.uml.foundation.core.ProgrammingLanguageDataType;\\nimport org.omg.uml.foundation.core.Relationship;\\nimport org.omg.uml.foundation.core.Stereotype;\\nimport org.omg.uml.foundation.core.StructuralFeature;\\nimport org.omg.uml.foundation.core.TemplateArgument;\\nimport org.omg.uml.foundation.core.TemplateParameter;\\nimport org.omg.uml.foundation.core.UmlAssociation;\\nimport org.omg.uml.foundation.core.UmlClass;\\nimport org.omg.uml.foundation.core.Usage;\\nimport org.omg.uml.foundation.datatypes.AggregationKind;\\nimport org.omg.uml.foundation.datatypes.AggregationKindEnum;\\nimport org.omg.uml.foundation.datatypes.BooleanExpression;\\nimport org.omg.uml.foundation.datatypes.CallConcurrencyKindEnum;\\nimport org.omg.uml.foundation.datatypes.ChangeableKind;\\nimport org.omg.uml.foundation.datatypes.ChangeableKindEnum;\\nimport org.omg.uml.foundation.datatypes.Expression;\\nimport org.omg.uml.foundation.datatypes.Multiplicity;\\nimport org.omg.uml.foundation.datatypes.MultiplicityRange;\\nimport org.omg.uml.foundation.datatypes.OrderingKind;\\nimport org.omg.uml.foundation.datatypes.OrderingKindEnum;\\nimport org.omg.uml.foundation.datatypes.ParameterDirectionKindEnum;\\nimport org.omg.uml.foundation.datatypes.ProcedureExpression;\\nimport org.omg.uml.foundation.datatypes.ScopeKind;\\nimport org.omg.uml.foundation.datatypes.ScopeKindEnum;\\nimport org.omg.uml.foundation.datatypes.VisibilityKind;\\nimport org.omg.uml.foundation.datatypes.VisibilityKindEnum;\\nimport org.omg.uml.modelmanagement.UmlPackage;\\n\"},{\"fromLine\":135,\"toLine\":151,\"content\":\" * @author Jaap Branderhorst\\n */\\nclass CoreFactoryMDRImpl extends AbstractUmlModelFactoryMDR implements\\n        CoreFactory {\\n\\n    private static final Logger LOG =\\n        Logger.getLogger(CoreFactoryMDRImpl.class.getName());\\n\\n    /**\\n     * The model implementation.\\n     */\\n    private MDRModelImplementation modelImpl;\\n\\n    /**\\n     * Constructor.\\n     *\\n     * @param implementation\"},{\"fromLine\":165,\"toLine\":176,\"content\":\"        super.initialize(myAbstraction);\\n        return myAbstraction;\\n    }\\n\\n\\n    public Abstraction buildAbstraction(String name, Object supplier,\\n            Object client) {\\n        if (!(client instanceof Classifier)\\n                || !(supplier instanceof Classifier)) {\\n            throw new IllegalArgumentException(\\n                    \\\"The supplier and client of an abstraction\\\"\\n                            + \\\"should be classifiers\\\");\"},{\"fromLine\":454,\"toLine\":466,\"content\":\"     *            The aggregation type of the second Associaton end\\n     * @return a newly created Association\\n     * @throws IllegalArgumentException\\n     *             if either Classifier is null\\n     */\\n    private UmlAssociation buildAssociation(Classifier c1, boolean nav1,\\n            AggregationKind agg1, Classifier c2, boolean nav2,\\n            AggregationKind agg2) {\\n        if (c1 == null || c2 == null) {\\n            throw new IllegalArgumentException(\\\"one of \\\"\\n                    + \\\"the classifiers to be \\\" + \\\"connected is null\\\");\\n        }\\n        Namespace ns1 = c1.getNamespace();\"},{\"fromLine\":492,\"toLine\":504,\"content\":\"                nav2, null, agg2, null, null, null);\\n        return assoc;\\n    }\\n\\n    @Deprecated\\n    public UmlAssociation buildAssociation(Object fromClassifier,\\n            Object aggregationKind1, Object toClassifier,\\n            Object aggregationKind2, Boolean unidirectional) {\\n\\n        if (unidirectional == null) {\\n            return buildAssociation(fromClassifier, aggregationKind1,\\n                    toClassifier, aggregationKind2, false);\\n        } else {\"},{\"fromLine\":506,\"toLine\":518,\"content\":\"                    toClassifier, aggregationKind2, unidirectional\\n                            .booleanValue());\\n        }\\n    }\\n\\n    public UmlAssociation buildAssociation(Object fromClassifier,\\n            Object aggregationKind1, Object toClassifier,\\n            Object aggregationKind2, boolean unidirectional) {\\n        if (fromClassifier == null || toClassifier == null) {\\n            throw new IllegalArgumentException(\\\"one of \\\"\\n                    + \\\"the classifiers to be \\\" + \\\"connected is null\\\");\\n        }\\n        Classifier from = (Classifier) fromClassifier;\"},{\"fromLine\":552,\"toLine\":563,\"content\":\"        return buildAssociation(c1, true, AggregationKindEnum.AK_NONE, c2,\\n                true, AggregationKindEnum.AK_NONE);\\n    }\\n\\n\\n    public UmlAssociation buildAssociation(Object c1, boolean nav1, Object c2,\\n            boolean nav2, String name) {\\n        UmlAssociation assoc = buildAssociation((Classifier) c1, nav1,\\n                AggregationKindEnum.AK_NONE, (Classifier) c2, nav2,\\n                AggregationKindEnum.AK_NONE);\\n        if (assoc != null) {\\n            assoc.setName(name);\"},{\"fromLine\":593,\"toLine\":606,\"content\":\"                null, null, null);\\n        return assocClass;\\n    }\\n\\n\\n    public AssociationEnd buildAssociationEnd(Object assoc, String name,\\n            Object type, Integer[] multiplicity, Object stereo, boolean navigable,\\n            Object order, Object aggregation, Object scope, Object changeable,\\n            Object visibility) {\\n        if (aggregation != null\\n                && aggregation.equals(AggregationKindEnum.AK_COMPOSITE)\\n                && multiplicity != null\\n                && (multiplicity[1] > 1 || multiplicity[1] == -1) ) {\\n            throw new IllegalArgumentException(\\\"aggregation is composite \\\"\"},{\"fromLine\":617,\"toLine\":630,\"content\":\"        }\\n        return ae;\\n    }\\n\\n    @Deprecated\\n    public AssociationEnd buildAssociationEnd(Object assoc, String name,\\n            Object type, Object multi, Object stereo, boolean navigable,\\n            Object order, Object aggregation, Object scope, Object changeable,\\n            Object visibility) {\\n        if (multi != null && !(multi instanceof Multiplicity)) {\\n            throw new IllegalArgumentException(\\\"Multiplicity\\\");\\n        }\\n        if (aggregation != null\\n                && aggregation.equals(AggregationKindEnum.AK_COMPOSITE)\"},{\"fromLine\":647,\"toLine\":660,\"content\":\"            ae.setMultiplicity(m);\\n        }\\n        return ae;\\n    }\\n\\n    private AssociationEnd buildAssociationEndInternal (Object assoc, String name,\\n            Object type, Object stereo, boolean navigable,\\n            Object order, Object aggregation, Object scope, Object changeable,\\n            Object visibility) {\\n        // wellformednessrules and preconditions\\n        if (assoc == null || !(assoc instanceof UmlAssociation) || type == null\\n                || !(type instanceof Classifier)) {\\n            throw new IllegalArgumentException(\\\"either type or association \\\"\\n                    + \\\"are null\\\");\"},{\"fromLine\":720,\"toLine\":730,\"content\":\"            end.setVisibility(VisibilityKindEnum.VK_PUBLIC);\\n        }\\n        return end;\\n    }\\n\\n    private static final int MULT_UNLIMITED = -1;\\n\\n    /**\\n     * Get the maximum value of a multiplicity\\n     *\\n     * @param m\"},{\"fromLine\":1110,\"toLine\":1121,\"content\":\"        returnParameter.setName(\\\"return\\\");\\n        return oper;\\n    }\\n\\n\\n    public Operation buildOperation2(Object cls, Object returnType,\\n            String name) {\\n        Operation oper = buildOperation(cls, returnType);\\n        if (oper != null) {\\n            oper.setName(name);\\n        }\\n        return oper;\"},{\"fromLine\":1166,\"toLine\":1177,\"content\":\"                    + o.getClass().getName());\\n        }\\n    }\\n\\n\\n    public Abstraction buildRealization(Object clnt, Object spplr,\\n            Object model) {\\n        ModelElement client = (ModelElement) clnt;\\n        ModelElement supplier = (ModelElement) spplr;\\n        if (client == null || supplier == null || client.getNamespace() == null\\n                || supplier.getNamespace() == null || client.equals(supplier)) {\\n            throw new IllegalArgumentException(\\\"faulty arguments.\\\");\"},{\"fromLine\":1209,\"toLine\":1220,\"content\":\"        ta.setModelElement((ModelElement) element);\\n        ta.setBinding((Binding) binding);\\n        return ta;\\n    }\\n\\n    public Object buildTemplateParameter(Object template, Object parameter,\\n            Object defaultElement) {\\n        if (!(template instanceof ModelElement)) {\\n            throw new IllegalArgumentException(\\n                    \\\"Template must be a model element\\\");\\n        }\\n        if (!(parameter instanceof ModelElement)) {\"},{\"fromLine\":1312,\"toLine\":1323,\"content\":\"        con.setBody((BooleanExpression) bexpr);\\n        return con;\\n    }\\n\\n\\n    public Binding buildBinding(Object client, Object supplier,\\n            List arguments) {\\n        Collection<Dependency> clientDeps = ((ModelElement) client)\\n                .getClientDependency();\\n        for (Dependency dep : clientDeps) {\\n            if (dep instanceof Binding) {\\n                throw new IllegalArgumentException(\"}],\"src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java\":[{\"fromLine\":40,\"toLine\":53,\"content\":\"\\npackage org.argouml.sequence2.diagram;\\n\\nimport java.awt.Rectangle;\\nimport java.util.Collections;\\nimport java.util.LinkedList;\\nimport java.util.List;\\n\\nimport org.argouml.uml.diagram.DiagramSettings;\\nimport org.argouml.uml.diagram.ui.ArgoFigGroup;\\nimport org.tigris.gef.presentation.FigLine;\\nimport org.tigris.gef.presentation.FigRect;\\n\\n\"},{\"fromLine\":55,\"toLine\":74,\"content\":\" * This fig is the LifeLine of a ClassifierRole.\\n * @author penyaskito\\n */\\nclass FigLifeLine extends ArgoFigGroup {\\n\\n    private static final long serialVersionUID = 466925040550356L;\\n\\n    private FigLine lineFig;\\n    private FigRect rectFig;\\n    \\n    private List<FigActivation> activations;\\n    private List<FigActivation> stackedActivations;\\n    \\n    static final int WIDTH = 150;\\n    static final int HEIGHT = 500;\\n\\n    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {\\n        super(owner, settings);\\n        initialize(bounds.x, bounds.y);\\n    }\"},{\"fromLine\":248,\"toLine\":264,\"content\":\"    private boolean isOutgoing(FigMessage messageFig) {\\n        return (messageFig.getSourceFigNode().getOwner() == getOwner());\\n    }\\n    \\n    private FigActivation createActivationFig(\\n            final Object owner, \\n            final int x, \\n            final int y, \\n            final int w, \\n            final int h,\\n            final DiagramSettings settings,\\n            final FigMessage messageFig) {\\n        return new FigActivation(\\n                owner,\\n                new Rectangle(x, y, w, h),\\n                settings,\\n                messageFig);\"},{\"fromLine\":331,\"toLine\":341,\"content\":\"    @Override\\n    // TODO: synchronized is required here as there can be some \\n    // concurrent modification problems when drawing a call message and\\n    // having that automatically draw the reply. Maybe fixing the TODO\\n    // below will resolve this and the synch can go.\\n    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {\\n        final Rectangle oldBounds = getBounds();\\n        \\n        rectFig.setBounds(x, y, w, h);\\n        lineFig.setBounds(x + w / 2, y, w, h);\\n        \"}],\"src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java\":[{\"fromLine\":13,\"toLine\":22,\"content\":\"\\npackage org.argouml.activity2.diagram;\\n\\nimport java.awt.Dimension;\\nimport java.awt.Rectangle;\\n\\nimport org.argouml.uml.diagram.DiagramSettings;\\nimport org.tigris.gef.presentation.FigGroup;\\nimport org.tigris.gef.presentation.FigNode;\\n\"},{\"fromLine\":25,\"toLine\":37,\"content\":\" * decorate this to get specialist behaviour \\n * @author Bob Tarling\\n */\\nclass FigBaseNode extends FigNode implements DiagramNode {\\n\\n    private FigBasePresentation displayState;\\n    private final DiagramSettings settings;\\n    private DiagramElement nameDiagramElement;\\n    \\n    /**\\n     * Constructor a new FigBaseNode\\n     * \\n     * @param owner the owning UML element\"},{\"fromLine\":74,\"toLine\":87,\"content\":\"        updateEdges();\\n    }\\n    \\n    @Override\\n    protected void setBoundsImpl(\\n            final int x,\\n            final int y,\\n            final int w,\\n            final int h) {\\n\\n        _x = x;\\n        _y = y;\\n        _w = w;\\n        _h = h;\"}],\"src/argouml-core-model/src/org/argouml/model/CoreHelper.java\":[{\"fromLine\":40,\"toLine\":45,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.util.Collection;\\nimport java.util.List;\\n\"},{\"fromLine\":670,\"toLine\":680,\"content\":\"     * @param handle Association or Link\\n     * @param position the 0-based position at which\\n     *          to insert the AssociationEnd or LinkEnd\\n     * @param connection AssociationEnd or LinkEnd\\n     */\\n    void addConnection(Object handle, int position, Object connection);\\n\\n    /**\\n     * Add a constraint to a ModelElement.\\n     *\\n     * @param handle model element\"},{\"fromLine\":693,\"toLine\":712,\"content\":\"     *\\n     * @param handle classifier\\n     * @param index position\\n     * @param f feature\\n     */\\n    void addFeature(Object handle, int index, Object f);\\n\\n    /**\\n     * Add an EnumerationLiteral to an Enumeration at the specified position.\\n     * \\n     * @param handle the enumeration\\n     * @param index the position\\n     * @param literal the EnumerationLiteral to be added\\n     */\\n    void addLiteral(Object handle, int index, Object literal);\\n\\n    /**\\n     * Add a feature to a Classifier.\\n     *\\n     * @param handle classifier\"},{\"fromLine\":753,\"toLine\":763,\"content\":\"     * @param handle The object that will get the Parameter:\\n     *               Event, BehavioralFeature.\\n     * @param index the location\\n     * @param parameter Object that will be added\\n     */\\n    void addParameter(Object handle, int index, Object parameter);\\n\\n    /**\\n     * Add a Parameter to the given object.\\n     *\\n     * @param handle The object that will get the Parameter:\"},{\"fromLine\":770,\"toLine\":780,\"content\":\"     * @param handle the Association End\\n     * @param position the 0-based position at which\\n     *          to insert the Qualifier\\n     * @param qualifier the Qualifier attribute\\n     */\\n    void addQualifier(Object handle, int position, Object qualifier);\\n\\n    /**\\n     * Add a raised Signal to a Message.\\n     *\\n     * @param handle the Message or Operation\"},{\"fromLine\":828,\"toLine\":838,\"content\":\"     *\\n     * @param handle The object that will get the TemplateParameter\\n     * @param index the location\\n     * @param argument Object that will be added\\n     */\\n    void addTemplateArgument(Object handle, int index, Object argument);\\n\\n    /**\\n     * Add a TemplateArgument to the given object.\\n     *\\n     * @param handle The object that will get the TemplateArgument\"},{\"fromLine\":845,\"toLine\":855,\"content\":\"     *\\n     * @param handle The object that will get the TemplateParameter\\n     * @param index the location\\n     * @param parameter Object that will be added\\n     */\\n    void addTemplateParameter(Object handle, int index, Object parameter);\\n\\n    /**\\n     * Add a TemplateTParameter to the given object.\\n     *\\n     * @param handle The object that will get the TemplateParameter\"},{\"fromLine\":1040,\"toLine\":1050,\"content\":\"     *\\n     * @param classifier The classifier to set.\\n     * @param index The position. Start with 0.\\n     * @param feature The feature to set.\\n     */\\n    void setFeature(Object classifier, int index, Object feature);\\n\\n    /**\\n     * Sets the features of a Classifier.\\n     * \\n     * @param classifier\"},{\"fromLine\":1131,\"toLine\":1141,\"content\":\"     *\\n     * @param handle model element\\n     * @param lower the lower range of the multiplicity\\n     * @param upper the upper range of the multiplicity\\n     */\\n    void setMultiplicity(Object handle, int lower, int upper);\\n\\n    /**\\n     * Set the name of a ModelElement.\\n     *\\n     * @param handle is the model element\"},{\"fromLine\":1368,\"toLine\":1378,\"content\":\"     * @deprecated by tfmorris for 0.23.3. Use\\n     *             {@link ExtensionMechanismsHelper#setType(Object, Object)} and\\n     *          {@link ExtensionMechanismsHelper#setValueOfTag(Object, String)}.\\n     */\\n    @Deprecated\\n    void setTaggedValue(Object handle, String tag, String value);\\n\\n\\n    /**\\n     * Set the targetScope of an AssociationEnd or StructuralFeature.\\n     * \"}],\"src/argouml-core-model/src/org/argouml/model/AbstractCoreHelperDecorator.java\":[{\"fromLine\":40,\"toLine\":45,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.util.Collection;\\nimport java.util.List;\\n\"},{\"fromLine\":347,\"toLine\":357,\"content\":\"\\n    public void addConnection(Object handle, Object connection) {\\n        impl.addConnection(handle, connection);\\n    }\\n\\n    public void addConnection(Object handle, int position, Object connection) {\\n        impl.addConnection(handle, position, connection);\\n    }\\n\\n    public void addConstraint(Object handle, Object mc) {\\n        impl.addConstraint(handle, mc);\"},{\"fromLine\":359,\"toLine\":377,\"content\":\"\\n    public void addDeploymentLocation(Object handle, Object node) {\\n        impl.addDeploymentLocation(handle, node);\\n    }\\n\\n    public void addFeature(Object handle, int index, Object f) {\\n        impl.addFeature(handle, index, f);\\n    }\\n\\n    public void addFeature(Object handle, Object f) {\\n        impl.addFeature(handle, f);\\n    }\\n\\n    public void addLiteral(Object handle, int index, Object literal) {\\n        impl.addLiteral(handle, index, literal);\\n    }\\n\\n    public void addLink(Object handle, Object link) {\\n        impl.addLink(handle, link);\"},{\"fromLine\":387,\"toLine\":405,\"content\":\"\\n    public void addOwnedElement(Object handle, Object me) {\\n        impl.addOwnedElement(handle, me);\\n    }\\n\\n    public void addParameter(Object handle, int index, Object parameter) {\\n        impl.addParameter(handle, index, parameter);\\n    }\\n\\n    public void addParameter(Object handle, Object parameter) {\\n        impl.addParameter(handle, parameter);\\n    }\\n\\n    public void addQualifier(Object handle, int index, Object qualifier) {\\n        impl.addQualifier(handle, index, qualifier);\\n    }\\n\\n    public void addRaisedSignal(Object handle, Object sig) {\\n        impl.addRaisedSignal(handle, sig);\"},{\"fromLine\":427,\"toLine\":446,\"content\":\"\\n    public void addTargetFlow(Object handle, Object flow) {\\n        impl.addTargetFlow(handle, flow);\\n    }\\n\\n    public void addTemplateArgument(Object handle, int index, Object argument) {\\n        impl.addTemplateArgument(handle, index, argument);\\n    }\\n\\n    public void addTemplateArgument(Object handle, Object argument) {\\n        impl.addTemplateArgument(handle, argument);\\n    }\\n\\n    public void addTemplateParameter(Object handle, int index, \\n            Object parameter) {\\n        impl.addTemplateParameter(handle, index, parameter);\\n    }\\n\\n    public void addTemplateParameter(Object handle, Object parameter) {\\n        impl.addTemplateParameter(handle, parameter);\"},{\"fromLine\":480,\"toLine\":490,\"content\":\"\\n    public void setDiscriminator(Object handle, String discriminator) {\\n        impl.setDiscriminator(handle, discriminator);\\n    }\\n\\n    public void setFeature(Object elem, int i, Object feature) {\\n        impl.setFeature(elem, i, feature);\\n    }\\n\\n    public void setFeatures(Object handle, Collection features) {\\n        impl.setFeatures(handle, features);\"},{\"fromLine\":545,\"toLine\":555,\"content\":\"    public void setSpecifications(Object handle, Collection specifications) {\\n        impl.setSpecifications(handle, specifications);\\n    }\\n\\n    @Deprecated\\n    public void setTaggedValue(Object handle, String tag, String value) {\\n        impl.setTaggedValue(handle, tag, value);\\n    }\\n\\n    public void setType(Object handle, Object type) {\\n        impl.setType(handle, type);\"},{\"fromLine\":599,\"toLine\":609,\"content\":\"\\n    public void setMultiplicity(Object handle, String arg) {\\n        impl.setMultiplicity(handle, arg);\\n    }\\n\\n    public void setMultiplicity(Object handle, int lower, int upper) {\\n        impl.setMultiplicity(handle, lower, upper);\\n    }\\n    \\n    public void setName(Object handle, String name) {\\n        impl.setName(handle, name);\"}],\"src/argouml-core-umlpropertypanels/src/org/argouml/core/propertypanels/ui/SwingUIFactory.java\":[{\"fromLine\":39,\"toLine\":68,\"content\":\"\\npackage org.argouml.core.propertypanels.ui;\\n\\nimport java.util.Collection;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\n\\nimport javax.swing.BoxLayout;\\nimport javax.swing.JComboBox;\\nimport javax.swing.JComponent;\\nimport javax.swing.JLabel;\\nimport javax.swing.JPanel;\\nimport javax.swing.JScrollPane;\\nimport javax.swing.JTextArea;\\nimport javax.swing.JTextField;\\nimport javax.swing.JToolBar;\\nimport javax.swing.border.TitledBorder;\\n\\nimport org.argouml.application.helpers.ResourceLoaderWrapper;\\nimport org.argouml.core.propertypanels.model.CheckBoxData;\\nimport org.argouml.core.propertypanels.model.ControlData;\\nimport org.argouml.core.propertypanels.model.GetterSetterManager;\\nimport org.argouml.core.propertypanels.model.PanelData;\\nimport org.argouml.i18n.Translator;\\nimport org.argouml.model.Model;\\nimport org.argouml.ui.ActionCreateContainedModelElement;\\nimport org.argouml.uml.ui.ActionDeleteModelElements;\\nimport org.argouml.uml.ui.foundation.extension_mechanisms.ActionNewStereotype;\\nimport org.tigris.toolbar.ToolBarFactory;\\n\"},{\"fromLine\":123,\"toLine\":135,\"content\":\"     * @param panel\\n     * @param prop\\n     * @throws Exception\\n     */\\n    private void createControl(\\n            final Object target,\\n            final JPanel panel,\\n            final ControlData prop) throws Exception {\\n        if (\\\"text\\\".equals(prop.getControlType())) {\\n            buildTextboxPanel(panel, target, prop);\\n        } else if (\\\"combo\\\".equals(prop.getControlType())) {\\n            buildComboPanel(panel, target, prop);\\n        } else if (\\\"checkgroup\\\".equals(prop.getControlType())) {\"},{\"fromLine\":151,\"toLine\":163,\"content\":\"     * Create the label with icon and description for the panel.\\n     * @param target\\n     * @param panel\\n     */\\n    private void createLabel(\\n            final Object target,\\n            final PanelData panelData,\\n            final JPanel panel) {\\n        final String metaTypeName = Model.getMetaTypes().getName(target);\\n        final ToolBarFactory tbf = new ToolBarFactory(new Object[0]);\\n        tbf.setRollover(true);\\n        final JToolBar tb = tbf.createToolBar();\\n        final String label;\"},{\"fromLine\":200,\"toLine\":212,\"content\":\"     * @param tb The toolbar to contain the buttons.\\n     * @param metaTypes The list of model element types for which\\n     * actions/buttons are required\\n     */\\n    private void addCreateButtons(\\n\\t    final Object container,\\n\\t    final JToolBar tb,\\n\\t    final Collection<Class<?>> metaTypes) {\\n        if (container != null) {\\n            for (Class<?> metaType : metaTypes) {\\n                if (Model.getUmlFactory().isContainmentValid(\\n            \\t    metaType, container)) {\\n                    tb.add(new ActionCreateContainedModelElement(\"},{\"fromLine\":215,\"toLine\":227,\"content\":\"            }\\n        }\\n    }\\n\\n    private void buildTextArea(\\n            final JPanel panel,\\n            final Object target,\\n            final ControlData prop) {\\n\\n        // TODO: Why do we need this as well as control? Why is it\\n        // instantiated when its not always needed.\\n        JPanel p = new JPanel();\\n\"},{\"fromLine\":319,\"toLine\":330,\"content\":\"                addControl(panel, null, control, target);\\n            }\\n        }\\n    }\\n\\n    private void buildSingleRow(JPanel panel, Object target,\\n            ControlData prop) {\\n\\n        final SingleListFactory factory = new SingleListFactory();\\n        final JComponent pane =\\n            factory.createComponent(target, prop.getPropertyName(), prop.getTypes());\\n\"},{\"fromLine\":332,\"toLine\":343,\"content\":\"            addControl(panel, Translator.localize(prop.getLabel()), pane, target);\\n        }\\n    }\\n\\n    private void buildList(\\n            final JPanel panel, Object target,\\n            final ControlData prop) {\\n\\n        final ListFactory factory = new ListFactory();\\n        final JComponent list =\\n            factory.createComponent(target, prop.getPropertyName(), prop.getTypes());\\n\"},{\"fromLine\":350,\"toLine\":361,\"content\":\"     * @param target The target of the panel\\n     * @param prop The XML data that contains the information\\n     *        of the options.\\n     * @return a radio button panel with the options\\n     */\\n    private void buildOptionBox(JPanel panel, Object target,\\n            ControlData prop) {\\n\\n        final String propertyName = prop.getPropertyName();\\n\\n        // TODO: consider a conditional feature in the xml panel def for this:\\n        if (Model.getFacade().getUmlVersion().charAt(0) != '1') {\"},{\"fromLine\":383,\"toLine\":395,\"content\":\"     * @param prop The XML data that contains the information\\n     *        of the checkboxes.\\n     * @return a panel that contains the checkboxes\\n     */\\n    private void buildCheckGroup(\\n\\t    final JPanel panel,\\n\\t    final Object target,\\n            final ControlData prop) {\\n        JPanel p = new JPanel();\\n        p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));\\n        TitledBorder border = new TitledBorder(prop.getPropertyName());\\n        p.setBorder(border);\\n\"},{\"fromLine\":400,\"toLine\":412,\"content\":\"        }\\n        addControl(panel, null, p, target);\\n    }\\n\\n    private void buildCheckBox(\\n            final JPanel panel,\\n            final Object target,\\n            final CheckBoxData prop) {\\n\\n        final String propertyName = prop.getPropertyName();\\n\\n        final GetterSetterManager getterSetter =\\n            GetterSetterManager.getGetterSetter(prop.getType());\"},{\"fromLine\":430,\"toLine\":442,\"content\":\"     * @param prop The XML data that contains the information\\n     *        of the combo.\\n     * @return a combo panel\\n     */\\n    private void buildComboPanel(\\n            final JPanel panel,\\n            final Object target,\\n            final ControlData prop) {\\n\\n        JComponent comp = null;\\n\\n        final String propertyName = prop.getPropertyName();\\n        if (\\\"namespace\\\".equals(prop.getPropertyName())) {\"},{\"fromLine\":621,\"toLine\":632,\"content\":\"     * @param panel a panel with a labelled text field\\n     * @param target The target of the panel\\n     * @param prop The XML data that contains the information\\n     *        of the options.\\n     */\\n    private void buildTextboxPanel(JPanel panel, Object target,\\n            ControlData prop) {\\n\\n        UMLPlainTextDocument document = null;\\n        if (\\\"name\\\".equals(prop.getPropertyName())) {\\n            if (Model.getFacade().isATemplateParameter(target)) {\\n                target = Model.getFacade().getParameter(target);\"},{\"fromLine\":650,\"toLine\":663,\"content\":\"            \\t\\ttfield, target);\\n        }\\n    }\\n\\n    private void addControl(\\n    \\t\\tfinal JPanel panel,\\n    \\t\\tfinal String text,\\n    \\t\\tfinal JComponent component,\\n    \\t\\tfinal Object target) {\\n    \\tif (Model.getModelManagementHelper().isReadOnly(target)) {\\n    \\t\\tcomponent.setEnabled(false);\\n    \\t}\\n\\n        LabelledComponent lc = new LabelledComponent(text, component);\"}],\"src/argouml-core-model/src/org/argouml/model/ModelEventPump.java\":[{\"fromLine\":38,\"toLine\":44,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.beans.PropertyChangeListener;\\nimport java.util.List;\\n\\n\"},{\"fromLine\":88,\"toLine\":139,\"content\":\"     * @param listener The listener to add\\n     * @param modelelement The modelelement the listener should be added too\\n     * @param propertyNames The array of property names the listener wishes to\\n     * receive events for\\n     */\\n    void addModelEventListener(UmlChangeListener listener,\\n                               Object modelelement,\\n                               String[] propertyNames);\\n\\n    /**\\n     * Adds a listener to modelevents that are fired by some given modelelement\\n     * and that have the name in eventName.<p>\\n     *\\n     * @param listener The listener to add\\n     * @param modelelement The modelelement the listener should be added too\\n     * @param propertyName The property name the listener wishes to\\n     * receive events for\\n     */\\n    void addModelEventListener(UmlChangeListener listener,\\n                               Object modelelement,\\n                               String propertyName);\\n\\n    /**\\n     * Adds a listener to modelevents that are fired by some given modelelement\\n     * and that have any of the names in eventNames.<p>\\n     *\\n     * @param listener The listener to add\\n     * @param modelelement The modelelement the listener should be added too\\n     * @param propertyNames The array of property names the listener wishes to\\n     * receive events for\\n     */\\n    void addModelEventListener(PropertyChangeListener listener,\\n            \\t\\t       Object modelelement,\\n\\t\\t\\t       String[] propertyNames);\\n\\n    /**\\n     * Adds a listener to modelevents that are fired by some given modelelement\\n     * and that have the name in eventName.<p>\\n     *\\n     * @param listener The listener to add\\n     * @param modelelement The modelelement the listener should be added too\\n     * @param propertyName The property name the listener wishes to\\n     * receive events for\\n     */\\n    void addModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t       Object modelelement,\\n\\t\\t\\t       String propertyName);\\n\\n    /**\\n     * Adds a listener to all events fired by some modelelement.\\n     *\\n     * @param listener is the listener to add\"},{\"fromLine\":150,\"toLine\":162,\"content\":\"     * @param modelelement The modelelement that fires the events the\\n     * listener is listening to.\\n     * @param propertyNames The property names the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeModelEventListener(UmlChangeListener listener,\\n                                  Object modelelement,\\n                                  String[] propertyNames);\\n\\n    /**\\n     * Removes a listener that listens to modelevents with name\\n     * eventName that are fired by the given modelelement.<p>\\n     *\"},{\"fromLine\":164,\"toLine\":176,\"content\":\"     * @param modelelement The modelelement that fires the events the\\n     * listener is listening to.\\n     * @param propertyName The property name the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeModelEventListener(UmlChangeListener listener,\\n                                  Object modelelement,\\n                                  String propertyName);\\n\\n    /**\\n     * Removes a listener that listens to modelevents with name\\n     * eventNames that are fired by the given modelelement.<p>\\n     *\"},{\"fromLine\":178,\"toLine\":190,\"content\":\"     * @param modelelement The modelelement that fires the events the\\n     * listener is listening to.\\n     * @param propertyNames The property names the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t  Object modelelement,\\n\\t\\t\\t\\t  String[] propertyNames);\\n\\n    /**\\n     * Removes a listener that listens to modelevents with name\\n     * eventName that are fired by the given modelelement.<p>\\n     *\"},{\"fromLine\":192,\"toLine\":204,\"content\":\"     * @param modelelement The modelelement that fires the events the\\n     * listener is listening to.\\n     * @param propertyName The property name the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t  Object modelelement,\\n\\t\\t\\t\\t  String propertyName);\\n\\n    /**\\n     * Removes a listener that listens to all events fired by the\\n     * given modelelement.<p>\\n     *\"},{\"fromLine\":226,\"toLine\":238,\"content\":\"     *             if one of the arguments is null or if the modelClass is not a\\n     *             valid metamodel class.\\n     * @throws IllegalStateException\\n     *             if the listener is already registred.\\n     */\\n    void addClassModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t    Object modelClass,\\n\\t\\t\\t\\t    String[] propertyNames);\\n\\n    /**\\n     * Adds a listener that listens to the event that is named eventName and\\n     * that occur to instances of the given modelClass.  If you want to be \\n     * notified of changes on all properties, use \"},{\"fromLine\":250,\"toLine\":262,\"content\":\"     *             if one of the arguments is null or if the modelClass is not a\\n     *             valid metamodel class.\\n     * @throws IllegalStateException\\n     *             if the listener is already registered.\\n     */\\n    void addClassModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t    Object modelClass,\\n\\t\\t\\t\\t    String propertyName);\\n\\n    /**\\n     * Removes a listener that listens to all modelevents fired by instances of\\n     * modelClass and that have the original name eventNames.\\n     *\"},{\"fromLine\":264,\"toLine\":276,\"content\":\"     * @param modelClass The class the listener does not want to listen to\\n     * instances anymore\\n     * @param propertyNames The property names the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeClassModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t       Object modelClass,\\n\\t\\t\\t\\t       String[] propertyNames);\\n\\n    /**\\n     * Removes a listener that listens to all modelevents fired by instances of\\n     * modelClass and that have the name eventName.\\n     *\"},{\"fromLine\":278,\"toLine\":290,\"content\":\"     * @param modelClass The class the listener does not want to listen to\\n     * instances anymore.\\n     * @param propertyName The property name the listener no longer wishes to\\n     * receive events for\\n     */\\n    void removeClassModelEventListener(PropertyChangeListener listener,\\n\\t\\t\\t\\t       Object modelClass,\\n\\t\\t\\t\\t       String propertyName);\\n\\n    /**\\n     * Start the ModelEventPump firing events.\\n     */\\n    void startPumpingEvents();\"}],\"src/argouml-core-model/src/org/argouml/model/ExtensionMechanismsHelper.java\":[{\"fromLine\":38,\"toLine\":43,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.util.Collection;\\n\\n\"},{\"fromLine\":169,\"toLine\":179,\"content\":\"     * @param object is the stereotype.\\n     * @param name is the name of the stereotype.\\n     * @param base is a string representing the base class of the stereotype.\\n     * @return true if object is a stereotype with the desired characteristics.\\n     */\\n    boolean isStereotype(Object object, String name, String base);\\n\\n    /**\\n     * Tests if a stereotype is or inherits from a stereotype with some\\n     * name and base class.\\n     *\"},{\"fromLine\":181,\"toLine\":191,\"content\":\"     * @param name is the name of the stereotype.\\n     * @param base is the base class of the stereotype.\\n     * @return true if object is a (descendant of a) stereotype with the\\n     *\\tdesired characteristics.\\n     */\\n    boolean isStereotypeInh(Object object, String name, String base);\\n\\n    /**\\n     * Add an extended element to a stereotype.\\n     *\\n     * @param handle Stereotype\"},{\"fromLine\":303,\"toLine\":313,\"content\":\"     *\\n     * @param handle The model element to set for.\\n     * @param property The property of the applied stereotype.\\n     * @param value Single value or a List value to set to.\\n     */\\n    void setTaggedValue(Object handle, Object property, Object value);\\n\\n    /**\\n     * Unapply a profile to a model or another profile.\\n     * \\n     * @param handle The model or profile.\"}],\"src/argouml-core-model/src/org/argouml/model/AbstractExtensionMechanismsHelperDecorator.java\":[{\"fromLine\":38,\"toLine\":42,\"content\":\"\\npackage org.argouml.model;\\n\\nimport java.util.Collection;\\n\"},{\"fromLine\":110,\"toLine\":124,\"content\":\"\\n    public void addCopyStereotype(Object modelElement, Object stereotype) {\\n        impl.addCopyStereotype(modelElement, stereotype);\\n    }\\n\\n    public boolean isStereotype(Object object, String name, String base) {\\n        return impl.isStereotype(object, name, base);\\n    }\\n\\n    public boolean isStereotypeInh(Object object, String name, String base) {\\n        return impl.isStereotypeInh(object, name, base);\\n    }\\n\\n    public void addExtendedElement(Object handle, Object extendedElement) {\\n        impl.addExtendedElement(handle, extendedElement);\"},{\"fromLine\":163,\"toLine\":173,\"content\":\"\\n    public void setTaggedValue(Object handle, Collection taggedValues) {\\n        impl.setTaggedValue(handle, taggedValues);\\n    }\\n\\n    public void setTaggedValue(Object handle, Object property, Object value) {\\n        impl.setTaggedValue(handle, property, value);\\n    }\\n\\n    public boolean hasStereotype(Object handle, String name) {\\n        return impl.hasStereotype(handle, name);\"}]}",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.1
}