messages:
[
	content:"
	
	I will provide you one or more Java code files .
	Find all data clumps in the respective files.
	
	A data clump exists if
	1) two methods (in the same or in different classes) have at least 3 common parameters
	    and one of those methods does not override the other,
	
	or  
	2) At least three fields in a class are common with the parameters of a method (in the same or in a different class),
	
	or
	3) Two different classes have at least three common fields
	
	## OUTPUT FORMAT
	Use the following JSON format for the output:
	
	{
	   "data_clumps":{
	        "unique_key":{
	            "key": "a unique key that should be created. It must be same as the key 'unique_key' in the 'data_clumps' object",
	            "from_file_path":"The path of the file where one part of the data clump is found",
	            "from_class_or_interface_key":"The fully qualified name of the class or interface where one part of the data clump is found",
	            "from_class_or_interface_name":"The name of the class or interface where one part of the data clump is found",
	            
	            "from_method_key":"The fully qualified name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "from_method_name":"The name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	
	            "to_file_path":"The path of the file where the  other part of the data clump is found",
	            "to_class_or_interface_key":"The fully qualified name of the class or interface where the  other part part of the data clump is found",
	            "to_class_or_interface_name":"The name of the class or interface where the  other  part of the data clump is found",
	            
	            "to_method_key":"The fully qualified name of the method where the  other part part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "to_method_name":"The name of the method where the  other  part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "data_clump_data":{
	                // for each data clump variable
	                "other_unique_key":{
	                    "key":"a unique key that should be created. It must be same as the key 'other_unique_key' in the 'data_clump_data' object",
	                    "name": "The name of the data clump variable that exists on the one part of the data clump",
	                    "type": "The type of the data clump variable that exists on the one part of the data clump",
	                    "displayedType": "The  type of the data clump variable, as it appears in the source code, that exists on the one part of the data clump",
	                    
	                    "position": {
	                        "startLine": "The line number of the  data clump variable on the one part of the data clump.This must be relative to the file",
	                        "startColumn": "The column number of the data clump variable on the one part of the data clump"
	                    },
	                    "to_variable":{
	                        "key":"a unique key that should be created.",
	                        "name": "The name of the data clump variable that exists on the other part of the data clump",
	                        "type": "The type of the data clump variable, as it appears in the source code, that exists on the other part of the data clump",
	                        "position": {
	                            "startLine": "The line number of the  data clump variable on the other part of the data clump. This must be relative to the file",
	                            "startColumn": "The column number of the data clump variable on the other part of the data clump",
	                        }
	                    }
	                }
	            }
	        }
	   }
	}
	
	## END OUTPUT FORMAT
		
",
	role:"
	system	
",
,
	content:
{
			common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.common.stats;
						
",
,
			fromLine:"			21",
			toLine:"			42",
			content:"
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.store.stats;
			
			import java.util.HashMap;
			import java.util.concurrent.ScheduledExecutorService;
			import org.apache.commons.lang3.tuple.Pair;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.statistics.StatisticsItem;
			import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
			import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
			import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
			import org.apache.rocketmq.common.statistics.StatisticsManager;
			import org.apache.rocketmq.common.stats.MomentStatsItemSet;
			import org.apache.rocketmq.common.stats.Stats;
			import org.apache.rocketmq.common.stats.StatsItem;
			import org.apache.rocketmq.common.stats.StatsItemSet;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			45",
			toLine:"			50",
			content:"
			    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
			    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
			    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
			    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
			    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
			    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
			    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;			
",
,
			fromLine:"			55",
			toLine:"			61",
			content:"
			    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
			    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
			    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
			    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
			    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
			    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
			    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;			
",
,
			fromLine:"			63",
			toLine:"			69",
			content:"
			    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
			    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
			    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
			    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
			    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
			    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
			    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;			
",
,
			fromLine:"			72",
			toLine:"			80",
			content:"
			    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
			    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
			    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
			    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
			    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
			    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
			    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
			    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
			    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public static final String COMMERCIAL_OWNER = "Owner";			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
			    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
			    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";			
",
,
			fromLine:"			90",
			toLine:"			96",
			content:"
			    public static final String ACCOUNT_SEND = "SEND";
			    public static final String ACCOUNT_RCV = "RCV";
			    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
			    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
			    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
			    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
			    public static final String ACCOUNT_REV_REJ = "RCV_REJ";			
",
,
			fromLine:"			98",
			toLine:"			108",
			content:"
			    public static final String MSG_NUM = "MSG_NUM";
			    public static final String MSG_SIZE = "MSG_SIZE";
			    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
			    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
			    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
			    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
			    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
			    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
			    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
			    public static final String RT = "RT";
			    public static final String INNER_RT = "INNER_RT";			
",
,
			fromLine:"			110",
			toLine:"			111",
			content:"
			    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
			    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";			
",
,
			fromLine:"			118",
			toLine:"			123",
			content:"
			    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
			    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
			    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
			    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
			    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
			    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";			
",
,
			fromLine:"			128",
			toLine:"			129",
			content:"
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
			    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(			
",
,
			fromLine:"			131",
			toLine:"			132",
			content:"
			    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
			    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(			
",
,
			fromLine:"			134",
			toLine:"			136",
			content:"
			    private ScheduledExecutorService scheduledExecutorService;
			    private ScheduledExecutorService commercialExecutor;
			    private ScheduledExecutorService accountExecutor;			
",
,
			fromLine:"			138",
			toLine:"			142",
			content:"
			    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
			    private final String clusterName;
			    private final boolean enableQueueStat;
			    private MomentStatsItemSet momentStatsItemSetFallSize;
			    private MomentStatsItemSet momentStatsItemSetFallTime;			
",
,
			fromLine:"			144",
			toLine:"			146",
			content:"
			    private final StatisticsManager accountStatManager = new StatisticsManager();
			    private StateGetter producerStateGetter;
			    private StateGetter consumerStateGetter;			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    private BrokerConfig brokerConfig;			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
			    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {			
",
,
			fromLine:"			374",
			toLine:"			374",
			content:"
			    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {			
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			    public void incTopicPutNums(final String topic, int num, int times) {			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			    public void incGroupGetNums(final String group, final String topic, final int incValue) {			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			    public void incGroupCkNums(final String group, final String topic, final int incValue) {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			    public void incGroupAckNums(final String group, final String topic, final int incValue) {			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
			    public String buildStatsKey(String topic, int queueId, String group) {			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
			    public String buildStatsKey(int queueId, String topic, String group) {			
",
,
			fromLine:"			489",
			toLine:"			489",
			content:"
			    public void incGroupGetSize(final String group, final String topic, final int incValue) {			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
			    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {			
",
,
			fromLine:"			585",
			toLine:"			586",
			content:"
			    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
			        final long fallBehind) {			
",
,
			fromLine:"			591",
			toLine:"			592",
			content:"
			    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
			        final long fallBehind) {			
",
,
			fromLine:"			597",
			toLine:"			598",
			content:"
			    public void incDLQStatValue(final String key, final String owner, final String group,
			        final String topic, final String type, final int incValue) {			
",
,
			fromLine:"			603",
			toLine:"			604",
			content:"
			    public void incCommercialValue(final String key, final String owner, final String group,
			        final String topic, final String type, final int incValue) {			
",
,
			fromLine:"			609",
			toLine:"			611",
			content:"
			    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
			        final String instanceId, final String group, final String topic,
			        final String msgType, final int incValue) {			
",
,
			fromLine:"			617",
			toLine:"			619",
			content:"
			    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
			        final String instanceId, final String group, final String topic,
			        final String msgType, final String flowlimitThreshold, final int incValue) {			
",
,
			fromLine:"			625",
			toLine:"			627",
			content:"
			    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
			        final String group, final String msgType,
			        final long... incValues) {			
",
,
			fromLine:"			632",
			toLine:"			634",
			content:"
			    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
			        final String group, final String msgType, final String flowlimitThreshold,
			        final long... incValues) {			
",
,
			fromLine:"			639",
			toLine:"			639",
			content:"
			    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {			
",
,
			fromLine:"			651",
			toLine:"			652",
			content:"
			    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
			        String topic, String group, String msgType) {			
",
,
			fromLine:"			668",
			toLine:"			669",
			content:"
			    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
			        String topic, String group, String msgType, String flowlimitThreshold) {			
",
,
			fromLine:"			687",
			toLine:"			689",
			content:"
			    public String buildAccountStatKey(final String owner, final String instanceId,
			        final String topic, final String group,
			        final String msgType) {			
",
,
			fromLine:"			700",
			toLine:"			702",
			content:"
			    public String buildAccountStatKey(final String owner, final String instanceId,
			        final String topic, final String group,
			        final String msgType, String flowlimitThreshold) {			
",
,
			fromLine:"			719",
			toLine:"			724",
			content:"
			    private StatisticsKindMeta createStatisticsKindMeta(String name,
			        String[] itemNames,
			        ScheduledExecutorService executorService,
			        StatisticsItemFormatter formatter,
			        Logger log,
			        long interval) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			78",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.TopicMessageQueueChangeListener;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumerImpl.class);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    private final long consumerStartTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    private final RPCHook rpcHook;			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    protected MQClientInstance mQClientFactory;			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    private PullAPIWrapper pullAPIWrapper;			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    private OffsetStore offsetStore;			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    private RebalanceImpl rebalanceImpl = new RebalanceLitePullImpl(this);			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    private static final String NOT_RUNNING_EXCEPTION_MESSAGE = "The consumer not running, please start it first.";			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    private static final String SUBSCRIPTION_CONFLICT_EXCEPTION_MESSAGE = "Subscribe and assign are mutually exclusive.";			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    private SubscriptionType subscriptionType = SubscriptionType.NONE;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    private long pullTimeDelayMillsWhenException = 1000;			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL = 50;			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL = 20;			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_PAUSE = 1000;			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_ON_EXCEPTION = 3 * 1000;			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    private ConcurrentHashMap<String/* topic */, String/* subExpression */> topicToSubExpression = new ConcurrentHashMap<>();			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    private DefaultLitePullConsumer defaultLitePullConsumer;			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    private AssignedMessageQueue assignedMessageQueue = new AssignedMessageQueue();			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    private final BlockingQueue<ConsumeRequest> consumeRequestCache = new LinkedBlockingQueue<>();			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    private Map<String, TopicMessageQueueChangeListener> topicMessageQueueChangeListenerMap = new HashMap<>();			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    private Map<String, Set<MessageQueue>> messageQueuesForTopic = new HashMap<>();			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    private long consumeRequestFlowControlTimes = 0L;			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			    private long queueFlowControlTimes = 0L;			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			    private long queueMaxSpanFlowControlTimes = 0L;			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    private long nextAutoCommitDeadline = -1L;			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			    private final MessageQueueLock messageQueueLock = new MessageQueueLock();			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			    private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			    public void updateAssignQueueAndStartPullTask(String topic, Set<MessageQueue> mqAll, Set<MessageQueue> mqDivided) {			
",
,
			fromLine:"			489",
			toLine:"			490",
			content:"
			    public synchronized void subscribe(String topic, String subExpression,
			        MessageQueueListener messageQueueListener) throws MQClientException {			
",
,
			fromLine:"			797",
			toLine:"			797",
			content:"
			    private void updatePullOffset(MessageQueue messageQueue, long nextPullOffset, ProcessQueue processQueue) {			
",
,
			fromLine:"			1021",
			toLine:"			1021",
			content:"
			    private PullResult pull(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums)			
",
,
			fromLine:"			1026",
			toLine:"			1026",
			content:"
			    private PullResult pull(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums, long timeout)			
",
,
			fromLine:"			1031",
			toLine:"			1033",
			content:"
			    private PullResult pullSyncImpl(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums,
			        boolean block,
			        long timeout)			
",
,
			fromLine:"			1200",
			toLine:"			1200",
			content:"
			    private void updateConsumeOffsetToBroker(MessageQueue mq, long offset, boolean isOneway) throws RemotingException,			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			96",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.listener.MessageListener;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.hook.FilterMessageContext;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.PopProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    private long pullTimeDelayMillsWhenException = 3000;			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL = 50;			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL = 20;			
",
,
			fromLine:"			113",
			toLine:"			133",
			content:"
			    private static final long PULL_TIME_DELAY_MILLS_WHEN_SUSPEND = 1000;
			    private static final long BROKER_SUSPEND_MAX_TIME_MILLIS = 1000 * 15;
			    private static final long CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND = 1000 * 30;
			    private static final Logger log = LoggerFactory.getLogger(DefaultMQPushConsumerImpl.class);
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final RebalanceImpl rebalanceImpl = new RebalancePushImpl(this);
			    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();
			    private final long consumerStartTimestamp = System.currentTimeMillis();
			    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
			    private final RPCHook rpcHook;
			    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;
			    private MQClientInstance mQClientFactory;
			    private PullAPIWrapper pullAPIWrapper;
			    private volatile boolean pause = false;
			    private boolean consumeOrderly = false;
			    private MessageListener messageListenerInner;
			    private OffsetStore offsetStore;
			    private ConsumeMessageService consumeMessageService;
			    private ConsumeMessageService consumeMessagePopService;
			    private long queueFlowControlTimes = 0;
			    private long queueMaxSpanFlowControlTimes = 0;			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    private final int[] popDelayLevel = new int[] {10, 30, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 1200, 1800, 3600, 7200};			
",
,
			fromLine:"			138",
			toLine:"			140",
			content:"
			    private static final int MAX_POP_INVISIBLE_TIME = 300000;
			    private static final int MIN_POP_INVISIBLE_TIME = 5000;
			    private static final int ASYNC_TIMEOUT = 3000;			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {			
",
,
			fromLine:"			719",
			toLine:"			719",
			content:"
			    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end)			
",
,
			fromLine:"			740",
			toLine:"			740",
			content:"
			    public void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName)			
",
,
			fromLine:"			745",
			toLine:"			745",
			content:"
			    public void sendMessageBack(MessageExt msg, int delayLevel, final MessageQueue mq)			
",
,
			fromLine:"			751",
			toLine:"			751",
			content:"
			    private void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName, final MessageQueue mq)			
",
,
			fromLine:"			846",
			toLine:"			846",
			content:"
			    void changePopInvisibleTimeAsync(String topic, String consumerGroup, String extraInfo, long invisibleTime, AckCallback callback)			
",
,
			fromLine:"			1260",
			toLine:"			1260",
			content:"
			    public void subscribe(String topic, String fullClassName, String filterClassSource) throws MQClientException {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import org.apache.rocketmq.common.annotation.ImportantField;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			
			import java.util.concurrent.TimeUnit;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    private String brokerConfigPath = null;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    private String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    private int listenPort = 6888;			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			    private String brokerIP1 = NetworkUtil.getLocalAddress();
			    private String brokerIP2 = NetworkUtil.getLocalAddress();			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    private boolean recoverConcurrently = false;			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    private int brokerPermission = PermName.PERM_READ | PermName.PERM_WRITE;
			    private int defaultTopicQueueNums = 8;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    private boolean autoCreateTopicEnable = true;			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    private boolean clusterTopicEnable = true;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    private boolean brokerTopicEnable = true;			
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			    private boolean autoCreateSubscriptionGroup = true;
			    private String messageStorePlugIn = "";			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    private static final int PROCESSOR_NUMBER = Runtime.getRuntime().availableProcessors();			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    private String msgTraceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    private boolean traceTopicEnable = false;			
",
,
			fromLine:"			69",
			toLine:"			75",
			content:"
			    private int sendMessageThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
			    private int putMessageFutureThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
			    private int pullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
			    private int litePullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
			    private int ackMessageThreadPoolNums = 3;
			    private int processReplyMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
			    private int queryMessageThreadPoolNums = 8 + PROCESSOR_NUMBER;			
",
,
			fromLine:"			77",
			toLine:"			82",
			content:"
			    private int adminBrokerThreadPoolNums = 16;
			    private int clientManageThreadPoolNums = 32;
			    private int consumerManageThreadPoolNums = 32;
			    private int loadBalanceProcessorThreadPoolNums = 32;
			    private int heartbeatThreadPoolNums = Math.min(32, PROCESSOR_NUMBER);
			    private int recoverThreadPoolNums = 32;			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    private int endTransactionThreadPoolNums = Math.max(8 + PROCESSOR_NUMBER * 2,			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    private int flushConsumerOffsetInterval = 1000 * 5;			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    private int flushConsumerOffsetHistoryInterval = 1000 * 60;			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    private boolean rejectTransactionMessage = false;			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    private boolean fetchNameSrvAddrByDnsLookup = false;			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    private boolean fetchNamesrvAddrByAddressServer = false;			
",
,
			fromLine:"			103",
			toLine:"			115",
			content:"
			    private int sendThreadPoolQueueCapacity = 10000;
			    private int putThreadPoolQueueCapacity = 10000;
			    private int pullThreadPoolQueueCapacity = 100000;
			    private int litePullThreadPoolQueueCapacity = 100000;
			    private int ackThreadPoolQueueCapacity = 100000;
			    private int replyThreadPoolQueueCapacity = 10000;
			    private int queryThreadPoolQueueCapacity = 20000;
			    private int clientManagerThreadPoolQueueCapacity = 1000000;
			    private int consumerManagerThreadPoolQueueCapacity = 1000000;
			    private int heartbeatThreadPoolQueueCapacity = 50000;
			    private int endTransactionPoolQueueCapacity = 100000;
			    private int adminBrokerThreadPoolQueueCapacity = 10000;
			    private int loadBalanceThreadPoolQueueCapacity = 100000;			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    private boolean longPollingEnable = true;			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    private long shortPollingTimeMills = 1000;			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    private boolean notifyConsumerIdsChangedEnable = true;			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    private boolean highSpeedMode = false;			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    private int commercialBaseCount = 1;			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    private int commercialSizePerMsg = 4 * 1024;			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			    private boolean accountStatsEnable = true;
			    private boolean accountStatsPrintZeroValues = true;			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    private boolean transferMsgByHeap = true;			
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;
			    private int registerBrokerTimeoutMills = 24000;			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			    private int sendHeartbeatTimeoutMillis = 1000;			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    private boolean slaveReadEnable = false;			
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			    private boolean disableConsumeIfConsumerReadSlowly = false;
			    private long consumerFallbehindThreshold = 1024L * 1024 * 1024 * 16;			
",
,
			fromLine:"			144",
			toLine:"			150",
			content:"
			    private boolean brokerFastFailureEnable = true;
			    private long waitTimeMillsInSendQueue = 200;
			    private long waitTimeMillsInPullQueue = 5 * 1000;
			    private long waitTimeMillsInLitePullQueue = 5 * 1000;
			    private long waitTimeMillsInHeartbeatQueue = 31 * 1000;
			    private long waitTimeMillsInTransactionQueue = 3 * 1000;
			    private long waitTimeMillsInAckQueue = 3000;			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			    private long startAcceptSendRequestTimeStamp = 0L;			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    private boolean traceOn = true;			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			    private boolean enableCalcFilterBitMap = false;			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    private boolean rejectPullConsumerEnable = false;			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    private int expectConsumerNumUseFilter = 32;			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    private int maxErrorRateOfBloomFilter = 20;			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			    private long filterDataCleanTimeSpan = 24 * 3600 * 1000;			
",
,
			fromLine:"			175",
			toLine:"			176",
			content:"
			    private boolean filterSupportRetry = false;
			    private boolean enablePropertyFilter = false;			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			    private boolean compressedRegister = false;			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			    private boolean forceRegister = true;			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			    private int registerNameServerPeriod = 1000 * 30;			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			    private int brokerHeartbeatInterval = 1000;			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			    private long brokerNotActiveTimeoutMillis = 10 * 1000;			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			    private boolean enableNetWorkFlowControl = false;			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			    private boolean enableBroadcastOffsetStore = true;			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			    private long broadcastOffsetExpireSecond = 2 * 60;			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			    private long broadcastOffsetExpireMaxSecond = 5 * 60;			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			    private int popPollingSize = 1024;
			    private int popPollingMapSize = 100000;			
",
,
			fromLine:"			210",
			toLine:"			225",
			content:"
			    private long maxPopPollingSize = 100000;
			    private int reviveQueueNum = 8;
			    private long reviveInterval = 1000;
			    private long reviveMaxSlow = 3;
			    private long reviveScanTime = 10000;
			    private boolean enableSkipLongAwaitingAck = false;
			    private long reviveAckWaitMs = TimeUnit.MINUTES.toMillis(3);
			    private boolean enablePopLog = false;
			    private boolean enablePopBufferMerge = false;
			    private int popCkStayBufferTime = 10 * 1000;
			    private int popCkStayBufferTimeOut = 3 * 1000;
			    private int popCkMaxBufferSize = 200000;
			    private int popCkOffsetMaxQueueSize = 20000;
			    private boolean enablePopBatchAck = false;
			    private boolean enableNotifyAfterPopOrderLockRelease = true;
			    private boolean initPopOffsetByCheckMsgInMem = true;			
",
,
			fromLine:"			227",
			toLine:"			228",
			content:"
			    private boolean retrieveMessageFromPopRetryTopicV1 = true;
			    private boolean enableRetryTopicV2 = false;			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			    private boolean realTimeNotifyConsumerChange = true;			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    private boolean litePullMessageEnable = true;			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			    private int syncBrokerMemberGroupPeriod = 1000;			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    private long loadBalancePollNameServerInterval = 1000 * 30;			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			    private int cleanOfflineBrokerInterval = 1000 * 30;			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			    private boolean serverLoadBalancerEnable = true;			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			    private MessageRequestMode defaultMessageRequestMode = MessageRequestMode.PULL;			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			    private int defaultPopShareQueueNum = -1;			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			    private long transactionTimeOut = 6 * 1000;			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			    private int transactionCheckMax = 15;			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			    private long transactionCheckInterval = 30 * 1000;			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			    private long transactionMetricFlushInterval = 3 * 1000;			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			    private int transactionOpMsgMaxSize = 4096;			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			    private int transactionOpBatchInterval = 3000;			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			    private boolean aclEnable = false;			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			    private boolean storeReplyMessageEnable = true;			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			    private boolean enableDetailStat = true;			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			    private boolean autoDeleteUnusedStats = false;			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			    private boolean isolateLogEnable = false;			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			    private long forwardTimeout = 3 * 1000;			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			    private boolean enableSlaveActingMaster = false;			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			    private boolean enableRemoteEscape = false;			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			    private boolean skipPreOnline = false;			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			    private boolean asyncSendEnable = true;			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
			    private boolean useServerSideResetOffset = true;			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			    private long consumerOffsetUpdateVersionStep = 500;			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			    private long delayOffsetUpdateVersionStep = 200;			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			    private boolean lockInStrictMode = false;			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			    private boolean compatibleWithOldNameSrv = true;			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			    private boolean enableControllerMode = false;			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			    private String controllerAddr = "";			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
			    private boolean fetchControllerAddrByDnsLookup = false;			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			    private long syncBrokerMetadataPeriod = 5 * 1000;			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			    private long checkSyncStateSetPeriod = 5 * 1000;			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			    private long syncControllerMetadataPeriod = 10 * 1000;			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			    private long controllerHeartBeatTimeoutMills = 10 * 1000;			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			    private boolean validateSystemTopicWhenUpdateTopic = true;			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			    private int brokerElectionPriority = Integer.MAX_VALUE;			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			    private boolean useStaticSubscription = false;			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;			
",
,
			fromLine:"			358",
			toLine:"			363",
			content:"
			    private int metricsOtelCardinalityLimit = 50 * 1000;
			    private String metricsGrpcExporterTarget = "";
			    private String metricsGrpcExporterHeader = "";
			    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
			    private long metricGrpcExporterIntervalInMills = 60 * 1000;
			    private long metricLoggingExporterIntervalInMills = 10 * 1000;			
",
,
			fromLine:"			365",
			toLine:"			366",
			content:"
			    private int metricsPromExporterPort = 5557;
			    private String metricsPromExporterHost = "";			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			    private String metricsLabel = "";			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			    private boolean metricsInDelta = false;			
",
,
			fromLine:"			373",
			toLine:"			374",
			content:"
			    private long channelExpiredTimeout = 1000 * 120;
			    private long subscriptionExpiredTimeout = 1000 * 60 * 10;			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			    private boolean estimateAccumulation = true;			
",
,
			fromLine:"			381",
			toLine:"			384",
			content:"
			    private boolean coldCtrStrategyEnable = false;
			    private boolean usePIDColdCtrStrategy = true;
			    private long cgColdReadThreshold = 3 * 1024 * 1024;
			    private long globalColdReadThreshold = 100 * 1024 * 1024;			
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
			    private long fetchNamesrvAddrInterval = 10 * 1000;			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			    private boolean popResponseReturnActualRetryTopic = false;			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			    private boolean enableSingleTopicRegister = false;			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
			    private boolean enableMixedMessageType = false;			
",
,
			fromLine:"			408",
			toLine:"			408",
			content:"
			    private boolean enableSplitRegistration = false;			
",
,
			fromLine:"			410",
			toLine:"			411",
			content:"
			    private long popInflightMessageThreshold = 10000;
			    private boolean enablePopMessageThreshold = false;			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			    private int splitRegistrationSize = 800;			
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			    private String configBlackList = "configBlackList;brokerConfigPath";			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.proxy.config;
			
			import java.net.InetAddress;
			import java.net.UnknownHostException;
			import java.time.Duration;
			import java.util.Comparator;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.TimeUnit;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.ProxyMode;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
						
",
,
			fromLine:"			42",
			toLine:"			45",
			content:"
			    private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
			    public final static String DEFAULT_CONFIG_FILE_NAME = "rmq-proxy.json";
			    private static final int PROCESSOR_NUMBER = Runtime.getRuntime().availableProcessors();
			    private static final String DEFAULT_CLUSTER_NAME = "DefaultCluster";			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    private static String localHostName;			
",
,
			fromLine:"			57",
			toLine:"			59",
			content:"
			    private String rocketMQClusterName = DEFAULT_CLUSTER_NAME;
			    private String proxyClusterName = DEFAULT_CLUSTER_NAME;
			    private String proxyName = StringUtils.isEmpty(localHostName) ? "DEFAULT_PROXY" : localHostName;			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    private String localServeAddr = "";			
",
,
			fromLine:"			63",
			toLine:"			65",
			content:"
			    private String heartbeatSyncerTopicClusterName = "";
			    private int heartbeatSyncerThreadPoolNums = 4;
			    private int heartbeatSyncerThreadPoolQueueCapacity = 100;			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    private String heartbeatSyncerTopicName = "DefaultHeartBeatSyncerTopic";			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			    private boolean enablePrintJstack = true;
			    private long printJstackInMillis = Duration.ofSeconds(60).toMillis();
			    private long printThreadPoolStatusInMillis = Duration.ofSeconds(3).toMillis();			
",
,
			fromLine:"			76",
			toLine:"			78",
			content:"
			    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));
			    private String namesrvDomain = "";
			    private String namesrvDomainSubgroup = "";			
",
,
			fromLine:"			82",
			toLine:"			84",
			content:"
			    private boolean tlsTestModeEnable = true;
			    private String tlsKeyPath = ConfigurationManager.getProxyHome() + "/conf/tls/rocketmq.key";
			    private String tlsCertPath = ConfigurationManager.getProxyHome() + "/conf/tls/rocketmq.crt";			
",
,
			fromLine:"			88",
			toLine:"			96",
			content:"
			    private String proxyMode = ProxyMode.CLUSTER.name();
			    private Integer grpcServerPort = 8081;
			    private long grpcShutdownTimeSeconds = 30;
			    private int grpcBossLoopNum = 1;
			    private int grpcWorkerLoopNum = PROCESSOR_NUMBER * 2;
			    private boolean enableGrpcEpoll = false;
			    private int grpcThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
			    private int grpcThreadPoolQueueCapacity = 100000;
			    private String brokerConfigPath = ConfigurationManager.getProxyHome() + "/conf/broker.conf";			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    private int grpcMaxInboundMessageSize = 130 * 1024 * 1024;			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    private int maxMessageSize = 4 * 1024 * 1024;			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			    private int maxUserPropertySize = 16 * 1024;
			    private int userPropertyMaxNum = 128;			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    private int maxMessageGroupSize = 64;			
",
,
			fromLine:"			120",
			toLine:"			125",
			content:"
			    private long defaultInvisibleTimeMills = Duration.ofSeconds(60).toMillis();
			    private long minInvisibleTimeMillsForRecv = Duration.ofSeconds(10).toMillis();
			    private long maxInvisibleTimeMills = Duration.ofHours(12).toMillis();
			    private long maxDelayTimeMills = Duration.ofDays(1).toMillis();
			    private long maxTransactionRecoverySecond = Duration.ofHours(1).getSeconds();
			    private boolean enableTopicMessageTypeCheck = true;			
",
,
			fromLine:"			127",
			toLine:"			134",
			content:"
			    private int grpcClientProducerMaxAttempts = 3;
			    private long grpcClientProducerBackoffInitialMillis = 10;
			    private long grpcClientProducerBackoffMaxMillis = 1000;
			    private int grpcClientProducerBackoffMultiplier = 2;
			    private long grpcClientConsumerMinLongPollingTimeoutMillis = Duration.ofSeconds(5).toMillis();
			    private long grpcClientConsumerMaxLongPollingTimeoutMillis = Duration.ofSeconds(20).toMillis();
			    private int grpcClientConsumerLongPollingBatchSize = 32;
			    private long grpcClientIdleTimeMills = Duration.ofSeconds(120).toMillis();			
",
,
			fromLine:"			136",
			toLine:"			137",
			content:"
			    private int channelExpiredInSeconds = 60;
			    private int contextExpiredInSeconds = 30;			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    private int rocketmqMQClientNum = 6;			
",
,
			fromLine:"			141",
			toLine:"			151",
			content:"
			    private long grpcProxyRelayRequestTimeoutInSeconds = 5;
			    private int grpcProducerThreadPoolNums = PROCESSOR_NUMBER;
			    private int grpcProducerThreadQueueCapacity = 10000;
			    private int grpcConsumerThreadPoolNums = PROCESSOR_NUMBER;
			    private int grpcConsumerThreadQueueCapacity = 10000;
			    private int grpcRouteThreadPoolNums = PROCESSOR_NUMBER;
			    private int grpcRouteThreadQueueCapacity = 10000;
			    private int grpcClientManagerThreadPoolNums = PROCESSOR_NUMBER;
			    private int grpcClientManagerThreadQueueCapacity = 10000;
			    private int grpcTransactionThreadPoolNums = PROCESSOR_NUMBER;
			    private int grpcTransactionThreadQueueCapacity = 10000;			
",
,
			fromLine:"			153",
			toLine:"			156",
			content:"
			    private int producerProcessorThreadPoolNums = PROCESSOR_NUMBER;
			    private int producerProcessorThreadPoolQueueCapacity = 10000;
			    private int consumerProcessorThreadPoolNums = PROCESSOR_NUMBER;
			    private int consumerProcessorThreadPoolQueueCapacity = 10000;			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    private boolean useEndpointPortFromRequest = false;			
",
,
			fromLine:"			160",
			toLine:"			178",
			content:"
			    private int topicRouteServiceCacheExpiredSeconds = 300;
			    private int topicRouteServiceCacheRefreshSeconds = 20;
			    private int topicRouteServiceCacheMaxNum = 20000;
			    private int topicRouteServiceThreadPoolNums = PROCESSOR_NUMBER;
			    private int topicRouteServiceThreadPoolQueueCapacity = 5000;
			    private int topicConfigCacheExpiredSeconds = 300;
			    private int topicConfigCacheRefreshSeconds = 20;
			    private int topicConfigCacheMaxNum = 20000;
			    private int subscriptionGroupConfigCacheExpiredSeconds = 300;
			    private int subscriptionGroupConfigCacheRefreshSeconds = 20;
			    private int subscriptionGroupConfigCacheMaxNum = 20000;
			    private int userCacheExpiredSeconds = 300;
			    private int userCacheRefreshSeconds = 20;
			    private int userCacheMaxNum = 20000;
			    private int aclCacheExpiredSeconds = 300;
			    private int aclCacheRefreshSeconds = 20;
			    private int aclCacheMaxNum = 20000;
			    private int metadataThreadPoolNums = 3;
			    private int metadataThreadPoolQueueCapacity = 100000;			
",
,
			fromLine:"			180",
			toLine:"			187",
			content:"
			    private int transactionHeartbeatThreadPoolNums = 20;
			    private int transactionHeartbeatThreadPoolQueueCapacity = 200;
			    private int transactionHeartbeatPeriodSecond = 20;
			    private int transactionHeartbeatBatchNum = 100;
			    private long transactionDataExpireScanPeriodMillis = Duration.ofSeconds(10).toMillis();
			    private long transactionDataMaxWaitClearMillis = Duration.ofSeconds(30).toMillis();
			    private long transactionDataExpireMillis = Duration.ofSeconds(30).toMillis();
			    private int transactionDataMaxNum = 15;			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			    private long longPollingReserveTimeInMillis = 100;			
",
,
			fromLine:"			191",
			toLine:"			200",
			content:"
			    private long invisibleTimeMillisWhenClear = 1000L;
			    private boolean enableProxyAutoRenew = true;
			    private int maxRenewRetryTimes = 3;
			    private int renewThreadPoolNums = 2;
			    private int renewMaxThreadPoolNums = 4;
			    private int renewThreadPoolQueueCapacity = 300;
			    private long lockTimeoutMsInHandleGroup = TimeUnit.SECONDS.toMillis(3);
			    private long renewAheadTimeMillis = TimeUnit.SECONDS.toMillis(10);
			    private long renewMaxTimeMillis = TimeUnit.HOURS.toMillis(3);
			    private long renewSchedulePeriodMillis = TimeUnit.SECONDS.toMillis(5);			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			    private boolean enableACL = false;			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    private boolean enableAclRpcHookForClusterMode = false;			
",
,
			fromLine:"			206",
			toLine:"			208",
			content:"
			    private boolean useDelayLevel = false;
			    private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
			    private transient ConcurrentSkipListMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable = new ConcurrentSkipListMap<>();			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			    private String metricCollectorMode = MetricCollectorMode.OFF.getModeString();			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			    private String metricCollectorAddress = "";			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    private String regionId = "";			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    private boolean traceOn = false;			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;			
",
,
			fromLine:"			220",
			toLine:"			224",
			content:"
			    private String metricsGrpcExporterTarget = "";
			    private String metricsGrpcExporterHeader = "";
			    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
			    private long metricGrpcExporterIntervalInMills = 60 * 1000;
			    private long metricLoggingExporterIntervalInMills = 10 * 1000;			
",
,
			fromLine:"			226",
			toLine:"			227",
			content:"
			    private int metricsPromExporterPort = 5557;
			    private String metricsPromExporterHost = "";			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			    private String metricsLabel = "";			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    private boolean metricsInDelta = false;			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    private long channelExpiredTimeout = 1000 * 120;			
",
,
			fromLine:"			237",
			toLine:"			240",
			content:"
			    private boolean enableRemotingLocalProxyGrpc = true;
			    private int localProxyConnectTimeoutMs = 3000;
			    private String remotingAccessAddr = "";
			    private int remotingListenPort = 8080;			
",
,
			fromLine:"			243",
			toLine:"			246",
			content:"
			    private boolean sendLatencyEnable = false;
			    private boolean startDetectorEnable = false;
			    private int detectTimeout = 200;
			    private int detectInterval = 2 * 1000;			
",
,
			fromLine:"			248",
			toLine:"			253",
			content:"
			    private int remotingHeartbeatThreadPoolNums = 2 * PROCESSOR_NUMBER;
			    private int remotingTopicRouteThreadPoolNums = 2 * PROCESSOR_NUMBER;
			    private int remotingSendMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
			    private int remotingPullMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
			    private int remotingUpdateOffsetThreadPoolNums = 4 * PROCESSOR_NUMBER;
			    private int remotingDefaultThreadPoolNums = 4 * PROCESSOR_NUMBER;			
",
,
			fromLine:"			255",
			toLine:"			260",
			content:"
			    private int remotingHeartbeatThreadPoolQueueCapacity = 50000;
			    private int remotingTopicRouteThreadPoolQueueCapacity = 50000;
			    private int remotingSendThreadPoolQueueCapacity = 10000;
			    private int remotingPullThreadPoolQueueCapacity = 50000;
			    private int remotingUpdateOffsetThreadPoolQueueCapacity = 10000;
			    private int remotingDefaultThreadPoolQueueCapacity = 50000;			
",
,
			fromLine:"			262",
			toLine:"			267",
			content:"
			    private long remotingWaitTimeMillsInSendQueue = 3 * 1000;
			    private long remotingWaitTimeMillsInPullQueue = 5 * 1000;
			    private long remotingWaitTimeMillsInHeartbeatQueue = 31 * 1000;
			    private long remotingWaitTimeMillsInUpdateOffsetQueue = 3 * 1000;
			    private long remotingWaitTimeMillsInTopicRouteQueue = 3 * 1000;
			    private long remotingWaitTimeMillsInDefaultQueue = 3 * 1000;			
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			    private boolean enableBatchAck = false;			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
		[
			fromLine:"			16",
			toLine:"			51",
			content:"
			 */
			package org.apache.rocketmq.broker.metrics;
			
			import java.util.Map;
			import java.util.Set;
			import java.util.function.Consumer;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.broker.processor.PopBufferMergeService;
			import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.DefaultMessageFilter;
			import org.apache.rocketmq.store.MessageStore;
						
",
,
			fromLine:"			53",
			toLine:"			61",
			content:"
			    private final BrokerConfig brokerConfig;
			    private final TopicConfigManager topicConfigManager;
			    private final ConsumerManager consumerManager;
			    private final ConsumerOffsetManager offsetManager;
			    private final ConsumerFilterManager consumerFilterManager;
			    private final SubscriptionGroupManager subscriptionGroupManager;
			    private final MessageStore messageStore;
			    private final PopBufferMergeService popBufferMergeService;
			    private final PopInflightMessageCounter popInflightMessageCounter;			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			    public long getAvailableMsgCount(String group, String topic, boolean isPop) {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {			
",
,
			fromLine:"			431",
			toLine:"			431",
			content:"
			    public long getStoreTimeStamp(String topic, int queueId, long offset) {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java:
		[
			fromLine:"			16",
			toLine:"			150",
			content:"
			 */
			package org.apache.rocketmq.broker.out;
			
			import com.alibaba.fastjson2.JSON;
			import java.io.UnsupportedEncodingException;
			import java.net.InetAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclClientRPCHook;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.LockCallback;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UnlockCallback;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.namesrv.DefaultTopAddressing;
			import org.apache.rocketmq.common.namesrv.TopAddressing;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			import org.apache.rocketmq.remoting.rpc.RpcClient;
			import org.apache.rocketmq.remoting.rpc.RpcClientImpl;
			import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
			import org.apache.rocketmq.store.timer.TimerCheckpoint;
			import org.apache.rocketmq.store.timer.TimerMetrics;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
			import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_MASTER_STILL_EXIST;
						
",
,
			fromLine:"			152",
			toLine:"			155",
			content:"
			    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
			    private final RemotingClient remotingClient;
			    private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());
			    private final ExecutorService brokerOuterExecutor = ThreadUtils.newThreadPoolExecutor(4, 10, 1, TimeUnit.MINUTES,			
",
,
			fromLine:"			157",
			toLine:"			159",
			content:"
			    private final ClientMetadata clientMetadata;
			    private final RpcClient rpcClient;
			    private String nameSrvAddr = null;			
",
,
			fromLine:"			253",
			toLine:"			254",
			content:"
			    public BrokerMemberGroup syncBrokerMemberGroup(String clusterName, String brokerName,
			        boolean isCompatibleWithOldNameSrv)			
",
,
			fromLine:"			331",
			toLine:"			337",
			content:"
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final Long brokerId,
			        final int timeoutMillis,
			        final DataVersion dataVersion,
			        final boolean isInBrokerContainer) {			
",
,
			fromLine:"			365",
			toLine:"			370",
			content:"
			    public void sendHeartbeat(final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final Long brokerId,
			        final int timeoutMills,
			        final boolean isInBrokerContainer) {			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			    public void sendBrokerHaInfo(String brokerAddr, String masterHaAddr, long brokerInitMaxOffset, String masterAddr)			
",
,
			fromLine:"			442",
			toLine:"			453",
			content:"
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final long brokerId,
			        final String haServerAddr,
			        final TopicConfigSerializeWrapper topicConfigWrapper,
			        final List<String> filterServerList,
			        final boolean oneway,
			        final int timeoutMills,
			        final boolean enableActingMaster,
			        final boolean compressed,
			        final BrokerIdentity brokerIdentity) {			
",
,
			fromLine:"			485",
			toLine:"			497",
			content:"
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final long brokerId,
			        final String haServerAddr,
			        final TopicConfigSerializeWrapper topicConfigWrapper,
			        final List<String> filterServerList,
			        final boolean oneway,
			        final int timeoutMills,
			        final boolean enableActingMaster,
			        final boolean compressed,
			        final Long heartbeatTimeoutMillis,
			        final BrokerIdentity brokerIdentity) {			
",
,
			fromLine:"			554",
			toLine:"			558",
			content:"
			        final String namesrvAddr,
			        final boolean oneway,
			        final int timeoutMills,
			        final RegisterBrokerRequestHeader requestHeader,
			        final byte[] body			
",
,
			fromLine:"			595",
			toLine:"			598",
			content:"
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final long brokerId			
",
,
			fromLine:"			614",
			toLine:"			618",
			content:"
			        final String namesrvAddr,
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final long brokerId			
",
,
			fromLine:"			645",
			toLine:"			647",
			content:"
			        final String brokerName,
			        final TopicConfig topicConfig,
			        final int timeoutMills) {			
",
,
			fromLine:"			699",
			toLine:"			705",
			content:"
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final long brokerId,
			        final TopicConfigSerializeWrapper topicConfigWrapper,
			        final int timeoutMills,
			        final boolean isInBrokerContainer) {			
",
,
			fromLine:"			877",
			toLine:"			878",
			content:"
			    public long getMaxOffset(final String addr, final String topic, final int queueId, final boolean committed,
			        final boolean isOnlyThisBroker)			
",
,
			fromLine:"			901",
			toLine:"			901",
			content:"
			    public long getMinOffset(final String addr, final String topic, final int queueId, final boolean isOnlyThisBroker)			
",
,
			fromLine:"			924",
			toLine:"			927",
			content:"
			        final String addr,
			        final LockBatchRequestBody requestBody,
			        final long timeoutMillis,
			        final LockCallback callback) throws RemotingException, InterruptedException {			
",
,
			fromLine:"			963",
			toLine:"			966",
			content:"
			        final String addr,
			        final UnlockBatchRequestBody requestBody,
			        final long timeoutMillis,
			        final UnlockCallback callback) throws RemotingException, InterruptedException {			
",
,
			fromLine:"			1003",
			toLine:"			1005",
			content:"
			    public SendResult sendMessageToSpecificBroker(String brokerAddr, final String brokerName,
			        final MessageExt msg, String group,
			        long timeoutMillis) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1012",
			toLine:"			1014",
			content:"
			    public CompletableFuture<SendResult> sendMessageToSpecificBrokerAsync(String brokerAddr, final String brokerName,
			        final MessageExt msg, String group,
			        long timeoutMillis) {			
",
,
			fromLine:"			1076",
			toLine:"			1078",
			content:"
			        final String brokerName,
			        final Message msg,
			        final RemotingCommand response			
",
,
			fromLine:"			1145",
			toLine:"			1146",
			content:"
			    public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final long timeoutMillis,
			        boolean allowTopicNotExist) throws MQBrokerException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {			
",
,
			fromLine:"			1190",
			toLine:"			1191",
			content:"
			    public void forwardRequest(String brokerAddr, RemotingCommand request, long timeoutMillis,
			        InvokeCallback invokeCallback) throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException, RemotingTooMuchRequestException, RemotingConnectException {			
",
,
			fromLine:"			1239",
			toLine:"			1242",
			content:"
			        final String controllerAddress,
			        final String brokerName,
			        final Long masterBrokerId, final int masterEpoch,
			        final Set<Long> newSyncStateSet, final int syncStateSetEpoch) throws Exception {			
",
,
			fromLine:"			1261",
			toLine:"			1263",
			content:"
			    public Pair<ElectMasterResponseHeader, Set<Long>> brokerElect(String controllerAddress, String clusterName,
			        String brokerName,
			        Long brokerId) throws Exception {			
",
,
			fromLine:"			1281",
			toLine:"			1282",
			content:"
			    public GetNextBrokerIdResponseHeader getNextBrokerId(final String clusterName, final String brokerName,
			        final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1293",
			toLine:"			1294",
			content:"
			    public ApplyBrokerIdResponseHeader applyBrokerId(final String clusterName, final String brokerName,
			        final Long brokerId, final String registerCheckCode, final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1306",
			toLine:"			1307",
			content:"
			        final String clusterName, final String brokerName, final Long brokerId, final String brokerAddress,
			        final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1343",
			toLine:"			1354",
			content:"
			    public void sendHeartbeatToController(final String controllerAddress,
			        final String clusterName,
			        final String brokerAddr,
			        final String brokerName,
			        final Long brokerId,
			        final int sendHeartBeatTimeoutMills,
			        final boolean isInBrokerContainer,
			        final int epoch,
			        final long maxOffset,
			        final long confirmOffset,
			        final long controllerHeartBeatTimeoutMills,
			        final int electionPriority) {			
",
,
			fromLine:"			1383",
			toLine:"			1385",
			content:"
			    public CompletableFuture<PullResult> pullMessageFromSpecificBrokerAsync(String brokerName, String brokerAddr,
			        String consumerGroup, String topic, int queueId, long offset,
			        int maxNums, long timeoutMillis) throws RemotingException, InterruptedException {			
",
,
			fromLine:"			1458",
			toLine:"			1458",
			content:"
			    private PullResult processPullResult(final PullResultExt pullResult, String brokerName, int queueId) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.rocketmq.broker.failover;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
						
",
,
			fromLine:"			56",
			toLine:"			60",
			content:"
			    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
			    private static final long SEND_TIMEOUT = 3000L;
			    private static final long DEFAULT_PULL_TIMEOUT_MILLIS = 1000 * 10L;
			    private final String innerProducerGroupName;
			    private final String innerConsumerGroupName;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    private final BrokerController brokerController;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    private ExecutorService defaultAsyncSenderExecutor;			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			    public Pair<GetMessageStatus, MessageExt> getMessage(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			    public CompletableFuture<Pair<GetMessageStatus, MessageExt>> getMessageAsync(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			    protected MessageExt getMessageFromRemote(String topic, long offset, int queueId, String brokerName) {			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			    protected CompletableFuture<MessageExt> getMessageFromRemoteAsync(String topic, long offset, int queueId, String brokerName) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/filter/FilterAPI.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.filter;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			
			import java.util.Arrays;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public static SubscriptionData buildSubscriptionData(String topic, String subString, String expressionType) throws Exception {			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			    public static SubscriptionData build(final String topic, final String subString,
			        final String type) throws Exception {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/heartbeat/SubscriptionData.java:
		[
			fromLine:"			20",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.heartbeat;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.common.filter.ExpressionType;
						
",
,
			fromLine:"			29",
			toLine:"			36",
			content:"
			    public final static String SUB_ALL = "*";
			    private boolean classFilterMode = false;
			    private String topic;
			    private String subString;
			    private Set<String> tagsSet = new HashSet<>();
			    private Set<Integer> codeSet = new HashSet<>();
			    private long subVersion = System.currentTimeMillis();
			    private String expressionType = ExpressionType.TAG;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    private String filterClassSource;			
",
,

		],
	
}
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.9",
