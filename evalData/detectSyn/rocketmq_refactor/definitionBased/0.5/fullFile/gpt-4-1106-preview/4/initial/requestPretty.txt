messages:
[
	content:"
	
	I will provide you one or more Java code files .
	Find all data clumps in the respective files.
	
	A data clump exists if
	1) two methods (in the same or in different classes) have at least 3 common parameters
	    and one of those methods does not override the other,
	
	or  
	2) At least three fields in a class are common with the parameters of a method (in the same or in a different class),
	
	or
	3) Two different classes have at least three common fields
	
	## OUTPUT FORMAT
	Use the following JSON format for the output:
	
	{
	   "data_clumps":{
	        "unique_key":{
	            "key": "a unique key that should be created. It must be same as the key 'unique_key' in the 'data_clumps' object",
	            "from_file_path":"The path of the file where one part of the data clump is found",
	            "from_class_or_interface_key":"The fully qualified name of the class or interface where one part of the data clump is found",
	            "from_class_or_interface_name":"The name of the class or interface where one part of the data clump is found",
	            
	            "from_method_key":"The fully qualified name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "from_method_name":"The name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	
	            "to_file_path":"The path of the file where the  other part of the data clump is found",
	            "to_class_or_interface_key":"The fully qualified name of the class or interface where the  other part part of the data clump is found",
	            "to_class_or_interface_name":"The name of the class or interface where the  other  part of the data clump is found",
	            
	            "to_method_key":"The fully qualified name of the method where the  other part part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "to_method_name":"The name of the method where the  other  part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method",
	            "data_clump_data":{
	                // for each data clump variable
	                "other_unique_key":{
	                    "key":"a unique key that should be created. It must be same as the key 'other_unique_key' in the 'data_clump_data' object",
	                    "name": "The name of the data clump variable that exists on the one part of the data clump",
	                    "type": "The type of the data clump variable that exists on the one part of the data clump",
	                    "displayedType": "The  type of the data clump variable, as it appears in the source code, that exists on the one part of the data clump",
	                    
	                    "position": {
	                        "startLine": "The line number of the  data clump variable on the one part of the data clump.This must be relative to the file",
	                        "startColumn": "The column number of the data clump variable on the one part of the data clump"
	                    },
	                    "to_variable":{
	                        "key":"a unique key that should be created.",
	                        "name": "The name of the data clump variable that exists on the other part of the data clump",
	                        "type": "The type of the data clump variable, as it appears in the source code, that exists on the other part of the data clump",
	                        "position": {
	                            "startLine": "The line number of the  data clump variable on the other part of the data clump. This must be relative to the file",
	                            "startColumn": "The column number of the data clump variable on the other part of the data clump",
	                        }
	                    }
	                }
	            }
	        }
	   }
	}
	
	## END OUTPUT FORMAT
		
",
	role:"
	system	
",
,
	content:"
	//remoting/src/main/java/org/apache/rocketmq/remoting/RemotingServer.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.remoting;
	
	import io.netty.channel.Channel;
	import java.util.concurrent.ExecutorService;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
	import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
	import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
	import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
	import org.apache.rocketmq.remoting.protocol.RemotingCommand;
	
	public interface RemotingServer extends RemotingService {
	
	    void registerProcessor(final int requestCode, final NettyRequestProcessor procesor,
	        final ExecutorService executor);
	
	    void registerDefaultProcessor(final NettyRequestProcessor processor, final ExecutorService executor);
	
	    int localListenPort();
	
	    Pair<NettyRequestProcessor, ExecutorService> getProcessorPair(final int requestCode);
	
	    Pair<NettyRequestProcessor, ExecutorService> getDefaultProcessorPair();
	
	    RemotingServer newRemotingServer(int port);
	
	    void removeRemotingServer(int port);
	
	    RemotingCommand invokeSync(final Channel channel, final RemotingCommand requst,
	        final long timeoutMillis) throws InterruptedException, RemotingSendRequestException,
	        RemotingTimeoutException;
	
	    void invokeAsync(final Channel channel, final RemotingCommand request, final long timeoutMillis,
	        final InvokeCallback invokeCallback) throws InterruptedException,
	        RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException;
	
	    void invokeOneway(final Channel channel, final RemotingCommand request, final long timeoutMillis)
	        throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException,
	        RemotingSendRequestException;
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//remoting/src/main/java/org/apache/rocketmq/remoting/RemotingClient.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.remoting;
	
	import java.util.List;
	import java.util.concurrent.CompletableFuture;
	import java.util.concurrent.ExecutorService;
	import org.apache.rocketmq.remoting.exception.RemotingConnectException;
	import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
	import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
	import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
	import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
	import org.apache.rocketmq.remoting.netty.ResponseFuture;
	import org.apache.rocketmq.remoting.protocol.RemotingCommand;
	
	public interface RemotingClient extends RemotingService {
	
	    void updateNameServerAddressList(final List<String> addrs);
	
	    List<String> getNameServerAddressList();
	
	    List<String> getAvailableNameSrvList();
	
	    RemotingCommand invokeSync(final String addr, final RemotingCommand request,
	        final long timeoutMillis) throws InterruptedException, RemotingConnectException,
	        RemotingSendRequestException, RemotingTimeoutException;
	
	    void invokeAsync(final String addr, final RemotingCommand request, final long timeoutMillis,
	        final InvokeCallback invokeCallback) throws InterruptedException, RemotingConnectException,
	        RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException;
	
	    void invokeOneway(final String addr, final RemotingCommand request, final int timeoutMillis)
	        throws InterruptedException, RemotingConnectException, RemotingTooMuchRequestException,
	        RemotingTimeoutException, RemotingSendRequestException;
	
	    default CompletableFuture<RemotingCommand> invoke(final String addr, final RemotingCommand request,
	        final long timeoutMillis) {
	        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();
	        try {
	            invokeAsync(addr, request, timeoutMillis, new InvokeCallback() {
	
	                @Override
	                public void operationComplete(ResponseFuture responseFuture) {
	
	                }
	
	                @Override
	                public void operationSucceed(RemotingCommand response) {
	                    future.complete(response);
	                }
	
	                @Override
	                public void operationFail(Throwable throwable) {
	                    future.completeExceptionally(throwable);
	                }
	            });
	        } catch (Throwable t) {
	            future.completeExceptionally(t);
	        }
	        return future;
	    }
	
	    void registerProcessor(final int requestCode, final NettyRequestProcessor processor,
	        final ExecutorService executor);
	
	    void setCallbackExecutor(final ExecutorService callbackExecutor);
	
	    boolean isChannelWritable(final String addr);
	
	    boolean isAddressReachable(final String addr);
	
	    void closeChannels(final List<String> addrList);
	}
		
",
	role:"
	user	
",
,
	content:"
	//common/src/main/java/org/apache/rocketmq/common/stats/StatsSnapshot.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.rocketmq.common.stats;
	
	public class StatsSnapshot {
	    private long sum;
	    private double tps;
	
	    private long times;
	    private double avgpt;
	
	    public long getSum() {
	        return sum;
	    }
	
	    public void setSum(long sum) {
	        this.sum = sum;
	    }
	
	    public double getTps() {
	        return tps;
	    }
	
	    public void setTps(double tps) {
	        this.tps = tps;
	    }
	
	    public double getAvgpt() {
	        return avgpt;
	    }
	
	    public void setAvgpt(double avgpt) {
	        this.avgpt = avgpt;
	    }
	
	    public long getTimes() {
	        return times;
	    }
	
	    public void setTimes(long times) {
	        this.times = times;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerStatsItem.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.rocketmq.remoting.protocol.body;
	
	public class BrokerStatsItem {
	    private long total;
	    private double tps;
	    private double avgpt;
	
	    public long getSum() {
	        return total;
	    }
	
	    public void setSum(long sum) {
	        this.total = total;
	    }
	
	    public double getTps() {
	        return tps;
	    }
	
	    public void setTps(double tps) {
	        this.tps = tps;
	    }
	
	    public double getAvgpt() {
	        return avgpt;
	    }
	
	    public void setAvgpt(double avgpt) {
	        this.avgpt = avgpt;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.broker.metrics;
	
	import java.util.Map;
	import java.util.Set;
	import java.util.function.Consumer;
	import java.util.stream.Collectors;
	import org.apache.rocketmq.broker.BrokerController;
	import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
	import org.apache.rocketmq.broker.client.ConsumerManager;
	import org.apache.rocketmq.broker.filter.ConsumerFilterData;
	import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
	import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
	import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
	import org.apache.rocketmq.broker.processor.PopBufferMergeService;
	import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
	import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
	import org.apache.rocketmq.broker.topic.TopicConfigManager;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.KeyBuilder;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.common.TopicConfig;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.constant.PermName;
	import org.apache.rocketmq.common.filter.ExpressionType;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
	import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
	import org.apache.rocketmq.store.DefaultMessageFilter;
	import org.apache.rocketmq.store.MessageStore;
	
	public class ConsumerLagCalculator {
	    private final BrokerConfig brokerConfig;
	    private final TopicConfigManager topicConfigManager;
	    private final ConsumerManager consumerManager;
	    private final ConsumerOffsetManager offsetManager;
	    private final ConsumerFilterManager consumerFilterManager;
	    private final SubscriptionGroupManager subscriptionGroupManager;
	    private final MessageStore messageStore;
	    private final PopBufferMergeService popBufferMergeService;
	    private final PopInflightMessageCounter popInflightMessageCounter;
	
	    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
	
	    public ConsumerLagCalculator(BrokerController brokerController) {
	        this.brokerConfig = brokerController.getBrokerConfig();
	        this.topicConfigManager = brokerController.getTopicConfigManager();
	        this.consumerManager = brokerController.getConsumerManager();
	        this.offsetManager = brokerController.getConsumerOffsetManager();
	        this.consumerFilterManager = brokerController.getConsumerFilterManager();
	        this.subscriptionGroupManager = brokerController.getSubscriptionGroupManager();
	        this.messageStore = brokerController.getMessageStore();
	        this.popBufferMergeService = brokerController.getPopMessageProcessor().getPopBufferMergeService();
	        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();
	    }
	
	    private static class ProcessGroupInfo {
	        public String group;
	        public String subject;
	        public boolean isPop;
	        public String retryTopic;
	
	        public ProcessGroupInfo(String group, String topic, boolean isPop,
	            String retryTopic) {
	            this.group = group;
	            this.subject = subject;
	            this.isPop = isPop;
	            this.retryTopic = retryTopic;
	        }
	    }
	
	    public static class BaseCalculateResult {
	        public String group;
	        public String topic;
	        public boolean isRetry;
	
	        public BaseCalculateResult(String group, String topic, boolean isRetry) {
	            this.group = group;
	            this.topic = topic;
	            this.isRetry = isRetry;
	        }
	    }
	
	    public static class CalculateLagResult extends BaseCalculateResult {
	        public long lag;
	        public long earliestUnconsumedTimestamp;
	
	        public CalculateLagResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateInflightResult extends BaseCalculateResult {
	        public long inFlight;
	        public long earliestUnPulledTimestamp;
	
	        public CalculateInflightResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateAvailableResult extends BaseCalculateResult {
	        public long available;
	
	        public CalculateAvailableResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {
	        for (Map.Entry<String, SubscriptionGroupConfig> subscriptionEntry :
	            subscriptionGroupManager.getSubscriptionGroupTable().entrySet()) {
	
	            String group = subscriptionEntry.getKey();
	            ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	            boolean isPop = false;
	            if (consumerGroupInfo != null) {
	                isPop = consumerGroupInfo.getConsumeType() == ConsumeType.CONSUME_POP;
	            }
	            Set<String> topics;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionEntry.getValue();
	                if (subscriptionGroupConfig.getSubscriptionDataSet() == null ||
	                    subscriptionGroupConfig.getSubscriptionDataSet().isEmpty()) {
	                    continue;
	                }
	                topics = subscriptionGroupConfig.getSubscriptionDataSet()
	                    .stream()
	                    .map(SimpleSubscriptionData::getTopic)
	                    .collect(Collectors.toSet());
	            } else {
	                if (consumerGroupInfo == null) {
	                    continue;
	                }
	                topics = consumerGroupInfo.getSubscribeTopics();
	            }
	
	            if (null == topics || topics.isEmpty()) {
	                continue;
	            }
	            for (String topic : topics) {
	                // skip retry topic
	                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
	                    continue;
	                }
	
	                TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	                if (topicConfig == null) {
	                    continue;
	                }
	
	                // skip no perm topic
	                int topicPerm = topicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                if (!PermName.isReadable(topicPerm) && !PermName.isWriteable(topicPerm)) {
	                    continue;
	                }
	
	                if (isPop) {
	                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group, brokerConfig.isEnableRetryTopicV2());
	                    TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig(retryTopic);
	                    if (retryTopicConfig != null) {
	                        int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                        if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                            consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopic));
	                            continue;
	                        }
	                    }
	                    if (brokerConfig.isEnableRetryTopicV2() && brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
	                        String retryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
	                        TopicConfig retryTopicConfigV1 = topicConfigManager.selectTopicConfig(retryTopicV1);
	                        if (retryTopicConfigV1 != null) {
	                            int retryTopicPerm = retryTopicConfigV1.getPerm() & brokerConfig.getBrokerPermission();
	                            if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                                consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopicV1));
	                                continue;
	                            }
	                        }
	                    }
	                    consumer.accept(new ProcessGroupInfo(group, topic, true, null));
	                } else {
	                    consumer.accept(new ProcessGroupInfo(group, topic, false, null));
	                }
	            }
	        }
	    }
	
	    public void calculateLag(Consumer<CalculateLagResult> lagRecorder) {
	        processAllGroup(info -> {
	            if (info.group == null || info.subject == null) {
	                return;
	            }
	
	            CalculateLagResult result = new CalculateLagResult(info.group, info.subject, false);
	
	            Pair<Long, Long> lag = getConsumerLagStats(info.group, info.subject, info.isPop);
	            if (lag != null) {
	                result.lag = lag.getObject1();
	                result.earliestUnconsumedTimestamp = lag.getObject2();
	            }
	            lagRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryLag = getConsumerLagStats(info.group, info.retryTopic, true);
	
	                result = new CalculateLagResult(info.group, info.subject, true);
	                if (retryLag != null) {
	                    result.lag = retryLag.getObject1();
	                    result.earliestUnconsumedTimestamp = retryLag.getObject2();
	                }
	                lagRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateInflight(Consumer<CalculateInflightResult> inflightRecorder) {
	        processAllGroup(info -> {
	            CalculateInflightResult result = new CalculateInflightResult(info.group, info.subject, false);
	            Pair<Long, Long> inFlight = getInFlightMsgStats(info.group, info.subject, info.isPop);
	            if (inFlight != null) {
	                result.inFlight = inFlight.getObject1();
	                result.earliestUnPulledTimestamp = inFlight.getObject2();
	            }
	            inflightRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryInFlight = getInFlightMsgStats(info.group, info.retryTopic, true);
	
	                result = new CalculateInflightResult(info.group, info.subject, true);
	                if (retryInFlight != null) {
	                    result.inFlight = retryInFlight.getObject1();
	                    result.earliestUnPulledTimestamp = retryInFlight.getObject2();
	                }
	                inflightRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateAvailable(Consumer<CalculateAvailableResult> availableRecorder) {
	        processAllGroup(info -> {
	            CalculateAvailableResult result = new CalculateAvailableResult(info.group, info.subject, false);
	
	            result.available = getAvailableMsgCount(info.group, info.subject, info.isPop);
	            availableRecorder.accept(result);
	
	            if (info.isPop) {
	                long retryAvailable = getAvailableMsgCount(info.group, info.retryTopic, true);
	
	                result = new CalculateAvailableResult(info.group, info.subject, true);
	                result.available = retryAvailable;
	                availableRecorder.accept(result);
	            }
	        });
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnconsumedTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnconsumedTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getConsumerLagStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnconsumedTimestamp = Math.min(earliestUnconsumedTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnconsumedTimestamp < 0 || earliestUnconsumedTimestamp == Long.MAX_VALUE) {
	            earliestUnconsumedTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnconsumedTimestamp);
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        if (isPop) {
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	            long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long lag = calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset) + inFlightNum;
	            long consumerOffset = pullOffset - inFlightNum;
	            long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	            return new Pair<>(lag, consumerStoreTimeStamp);
	        }
	
	        long consumerOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (consumerOffset < 0) {
	            consumerOffset = brokerOffset;
	        }
	
	        long lag = calculateMessageCount(group, topic, queueId, consumerOffset, brokerOffset);
	        long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	        return new Pair<>(lag, consumerStoreTimeStamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnPulledTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnPulledTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getInFlightMsgStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnPulledTimestamp = Math.min(earliestUnPulledTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnPulledTimestamp < 0 || earliestUnPulledTimestamp == Long.MAX_VALUE) {
	            earliestUnPulledTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnPulledTimestamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {
	        if (isPop) {
	            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	            }
	            long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	            return new Pair<>(inflight, pullStoreTimeStamp);
	        }
	
	        long pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        if (pullOffset < 0) {
	            pullOffset = 0;
	        }
	
	        long commitOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (commitOffset < 0) {
	            commitOffset = pullOffset;
	        }
	
	        long inflight = calculateMessageCount(group, topic, queueId, commitOffset, pullOffset);
	        long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	        return new Pair<>(inflight, pullStoreTimeStamp);
	    }
	
	    public long getAvailableMsgCount(String group, String topic, boolean isPop) {
	        long total = 0L;
	
	        if (group == null || topic == null) {
	            return total;
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                total += getAvailableMsgCount(group, topic, queueId, isPop);
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        return total;
	    }
	
	    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        long pullOffset;
	        if (isPop) {
	            pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	        } else {
	            pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        }
	        if (pullOffset < 0) {
	            pullOffset = brokerOffset;
	        }
	
	        return calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset);
	    }
	
	    public long getStoreTimeStamp(String topic, int queueId, long offset) {
	        long storeTimeStamp = Long.MAX_VALUE;
	        if (offset >= 0) {
	            storeTimeStamp = messageStore.getMessageStoreTimeStamp(topic, queueId, offset);
	            storeTimeStamp = storeTimeStamp > 0 ? storeTimeStamp : Long.MAX_VALUE;
	        }
	        return storeTimeStamp;
	    }
	
	    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
	        long count = to - from;
	
	        if (brokerConfig.isEstimateAccumulation() && to > from) {
	            SubscriptionData subscriptionData = null;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(group);
	                if (subscriptionGroupConfig != null) {
	                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
	                        if (topic.equals(simpleSubscriptionData.getTopic())) {
	                            try {
	                                subscriptionData = FilterAPI.buildSubscriptionData(simpleSubscriptionData.getTopic(),
	                                    simpleSubscriptionData.getExpression(), simpleSubscriptionData.getExpressionType());
	                            } catch (Exception e) {
	                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", group, topic, e);
	                            }
	                            break;
	                        }
	                    }
	                }
	            } else {
	                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	                if (consumerGroupInfo != null) {
	                    subscriptionData = consumerGroupInfo.findSubscriptionData(topic);
	                }
	            }
	
	            if (null != subscriptionData) {
	                if (ExpressionType.TAG.equalsIgnoreCase(subscriptionData.getExpressionType())
	                    && !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new DefaultMessageFilter(subscriptionData));
	                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
	                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new ExpressionMessageFilter(subscriptionData,
	                            consumerFilterData,
	                            consumerFilterManager));
	                }
	            }
	
	        }
	        return count < 0 ? 0 : count;
	    }
	}
		
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.5",
