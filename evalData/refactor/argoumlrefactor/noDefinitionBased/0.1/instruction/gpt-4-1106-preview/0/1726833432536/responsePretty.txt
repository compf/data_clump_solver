"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": "27",
                "toLine": "39",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColor primaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": "41",
                "toLine": "53",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColor secondaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": "55",
                "toLine": "69",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFont themeFonts = new ThemeFont(\"SansSerif\", \"Dialog\", 14, 12);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": "27",
                "toLine": "39",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColor primaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": "41",
                "toLine": "53",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColor secondaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": "55",
                "toLine": "69",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFont themeFonts = new ThemeFont(\"SansSerif\", \"Dialog\", 16, 14);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": "35",
                "toLine": "38",
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private FigLineRect lineRect;"
            },
            {
                "fromLine": "40",
                "toLine": "41",
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private ActivationList activations;"
            },
            {
                "fromLine": "43",
                "toLine": "44",
                "oldContent": "static final int WIDTH = 150;\n    static final int HEIGHT = 500;",
                "newContent": "private static final Dimension SIZE = new Dimension(150, 500);"
            },
            {
                "fromLine": "50",
                "toLine": "50",
                "oldContent": "        initialize(bounds.x, bounds.y);",
                "newContent": "        initialize(bounds);"
            },
            {
                "fromLine": "52",
                "toLine": "58",
                "oldContent": "    private void initialize(int x, int y) {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);",
                "newContent": "    private void initialize(Rectangle bounds) {\n        activations = new ActivationList();\n        \n        lineRect = new FigLineRect(bounds, LINE_COLOR, LINE_WIDTH);"
            },
            {
                "fromLine": "60",
                "toLine": "62",
                "oldContent": "        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);",
                "newContent": ""
            },
            {
                "fromLine": "63",
                "toLine": "64",
                "oldContent": "        lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);",
                "newContent": "        addFig(lineRect.getRectFig());"
            },
            {
                "fromLine": "65",
                "toLine": "65",
                "oldContent": "        addFig(lineFig);",
                "newContent": "        addFig(lineRect.getLineFig());"
            },
            {
                "fromLine": "68",
                "toLine": "68",
                "oldContent": "    synchronized void createActivations(final List<FigMessage> messages) {",
                "newContent": "    synchronized void createActivations(final List<FigMessage> messages, final Dimension size) {"
            },
            {
                "fromLine": "70",
                "toLine": "70",
                "oldContent": "        clearActivations();",
                "newContent": "        activations.clear(this);"
            },
            {
                "fromLine": "72",
                "toLine": "72",
                "oldContent": "        activations = createStandardActivations(messages);",
                "newContent": "        activations.createStandardActivations(messages, lineRect, this, getSettings());"
            },
            {
                "fromLine": "73",
                "toLine": "73",
                "oldContent": "        stackedActivations = createStackedActivations(messages);",
                "newContent": "        activations.createStackedActivations(messages, lineRect, this, getSettings());"
            },
            {
                "fromLine": "75",
                "toLine": "75",
                "oldContent": "        addActivations(activations);",
                "newContent": "        activations.addActivations(this);"
            },
            {
                "fromLine": "76",
                "toLine": "76",
                "oldContent": "        addActivations(stackedActivations);",
                "newContent": ""
            },
            {
                "fromLine": "78",
                "toLine": "78",
                "oldContent": "        calcBounds();",
                "newContent": "        calcBounds(size);"
            },
            {
                "fromLine": "81",
                "toLine": "81",
                "oldContent": "    private void addActivations(",
                "newContent": "    /* private void addActivations("
            },
            {
                "fromLine": "91",
                "toLine": "91",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "93",
                "toLine": "93",
                "oldContent": "    private List<FigActivation> createStandardActivations(",
                "newContent": "    /* private List<FigActivation> createStandardActivations("
            },
            {
                "fromLine": "164",
                "toLine": "164",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "166",
                "toLine": "166",
                "oldContent": "    private boolean isSameClassifierRoles(",
                "newContent": "    /* private boolean isSameClassifierRoles("
            },
            {
                "fromLine": "172",
                "toLine": "172",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "174",
                "toLine": "174",
                "oldContent": "    private boolean isIncoming(FigMessage messageFig) {",
                "newContent": "    /* private boolean isIncoming(FigMessage messageFig) {"
            },
            {
                "fromLine": "178",
                "toLine": "178",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "180",
                "toLine": "180",
                "oldContent": "    private boolean isOutgoing(FigMessage messageFig) {",
                "newContent": "    /* private boolean isOutgoing(FigMessage messageFig) {"
            },
            {
                "fromLine": "184",
                "toLine": "184",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "186",
                "toLine": "186",
                "oldContent": "    private FigActivation createActivationFig(",
                "newContent": "    /* private FigActivation createActivationFig("
            },
            {
                "fromLine": "194",
                "toLine": "194",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "196",
                "toLine": "196",
                "oldContent": "    private List<FigActivation> createStackedActivations(",
                "newContent": "    /* private List<FigActivation> createStackedActivations("
            },
            {
                "fromLine": "214",
                "toLine": "214",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "216",
                "toLine": "216",
                "oldContent": "    private boolean hasIncomingCallActionFirst(",
                "newContent": "    /* private boolean hasIncomingCallActionFirst("
            },
            {
                "fromLine": "224",
                "toLine": "224",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "226",
                "toLine": "226",
                "oldContent": "    private void clearActivations() {",
                "newContent": "    /* private void clearActivations() {"
            },
            {
                "fromLine": "233",
                "toLine": "233",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "235",
                "toLine": "235",
                "oldContent": "    @Override",
                "newContent": ""
            },
            {
                "fromLine": "236",
                "toLine": "236",
                "oldContent": "    public void setFilled(boolean filled) {",
                "newContent": "    /* public void setFilled(boolean filled) {"
            },
            {
                "fromLine": "238",
                "toLine": "238",
                "oldContent": "    }",
                "newContent": "    } */"
            },
            {
                "fromLine": "240",
                "toLine": "240",
                "oldContent": "    @Override",
                "newContent": ""
            },
            {
                "fromLine": "241",
                "toLine": "241",
                "oldContent": "    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {",
                "newContent": "    /* protected synchronized void setBoundsImpl(int x, int y, int w, int h) {"
            },
            {
                "fromLine": "242",
                "toLine": "242",
                "oldContent": "        final Rectangle oldBounds = getBounds();",
                "newContent": "        final Rectangle oldBounds = getBounds(); */"
            },
            {
                "fromLine": "244",
                "toLine": "244",
                "oldContent": "        rectFig.setBounds(x, y, w, h);",
                "newContent": "        // rectFig.setBounds(x, y, w, h);"
            },
            {
                "fromLine": "245",
                "toLine": "245",
                "oldContent": "        lineFig.setBounds(x + w / 2, y, w, h);",
                "newContent": "        // lineFig.setBounds(x + w / 2, y, w, h);"
            },
            {
                "fromLine": "247",
                "toLine": "247",
                "oldContent": "        final int yDiff = oldBounds.y - y;",
                "newContent": "        // final int yDiff = oldBounds.y - y;"
            },
            {
                "fromLine": "249",
                "toLine": "249",
                "oldContent": "        // we don't recalculate activations, just move them",
                "newContent": "        /* // we don't recalculate activations, just move them"
            },
            {
                "fromLine": "250",
                "toLine": "250",
                "oldContent": "        for (FigActivation act : activations) {",
                "newContent": "        for (FigActivation act : activations) { */"
            },
            {
                "fromLine": "251",
                "toLine": "251",
                "oldContent": "            // TODO: why do we need to remove then add the Fig?",
                "newContent": "            // TODO: why do we need to remove then add the Fig?"
            },
            {
                "fromLine": "252",
                "toLine": "252",
                "oldContent": "            removeFig(act);",
                "newContent": "            // removeFig(act);"
            },
            {
                "fromLine": "253",
                "toLine": "253",
                "oldContent": "            act.setLocation(",
                "newContent": "            /* act.setLocation("
            },
            {
                "fromLine": "256",
                "toLine": "256",
                "oldContent": "            addFig(act);",
                "newContent": "            addFig(act); */"
            },
            {
                "fromLine": "258",
                "toLine": "258",
                "oldContent": "        }",
                "newContent": "        // }"
            },
            {
                "fromLine": "259",
                "toLine": "259",
                "oldContent": "        damage();",
                "newContent": "        // damage();"
            },
            {
                "fromLine": "260",
                "toLine": "260",
                "oldContent": "        _x = x;",
                "newContent": "        /* _x = x;"
            },
            {
                "fromLine": "261",
                "toLine": "261",
                "oldContent": "        _y = y;",
                "newContent": "        _y = y;"
            },
            {
                "fromLine": "262",
                "toLine": "262",
                "oldContent": "        _w = w;",
                "newContent": "        _w = w;"
            },
            {
                "fromLine": "263",
                "toLine": "263",
                "oldContent": "        _h = h;",
                "newContent": "        _h = h; */"
            },
            {
                "fromLine": "265",
                "toLine": "265",
                "oldContent": "        firePropChange(\"bounds\", oldBounds, getBounds());",
                "newContent": "        // firePropChange(\"bounds\", oldBounds, getBounds());"
            },
            {
                "fromLine": "266",
                "toLine": "266",
                "oldContent": "    }",
                "newContent": "        // }"
            },
            {
                "fromLine": "268",
                "toLine": "268",
                "oldContent": "    public void setLineWidth(int w) {",
                "newContent": "    /* public void setLineWidth(int w) {"
            },
            {
                "fromLine": "270",
                "toLine": "270",
                "oldContent": "        lineFig.setLineWidth(w);",
                "newContent": "        lineFig.setLineWidth(w); */"
            },
            {
                "fromLine": "271",
                "toLine": "271",
                "oldContent": "    }",
                "newContent": "    } */"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColor.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColor {\n\n    private final ColorUIResource primary1;\n    private final ColorUIResource primary2;\n   
    {
        "src/argouml-app/src/org/argouml/ui/ThemeColor.java": "    private final ColorUIResource primary3;\n\n    public ThemeColor(int shade1, int shade2, int shade3) {\n        primary1 = new ColorUIResource(shade1, shade1, shade1 + 51);\n        primary2 = new ColorUIResource(shade2, shade2, shade2 + 51);\n        primary3 = new ColorUIResource(shade3, shade3, shade3 + 51);\n    }\n\n    public ColorUIResource getPrimary1() {\n        return primary1;\n    }\n\n    public ColorUIResource getPrimary2() {\n        return primary2;\n    }\n\n    public ColorUIResource getPrimary3() {\n        return primary3;\n    }\n}\n",
        "src/argouml-app/src/org/argouml/ui/ThemeFont.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFont {\n\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n\n    public ThemeFont(String controlFontName, String systemFontName, int fontSize, int smallFontSize) {\n        controlFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);\n        systemFont = new FontUIResource(systemFontName, Font.PLAIN, fontSize);\n        windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, fontSize);\n        userFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);\n        smallFont = new FontUIResource(systemFontName, Font.PLAIN, smallFontSize);\n    }\n\n    public FontUIResource getControlFont() {\n        return controlFont;\n    }\n\n    public FontUIResource getSystemFont() {\n        return systemFont;\n    }\n\n    public FontUIResource getWindowTitleFont() {\n        return windowTitleFont;\n    }\n\n    public FontUIResource getUserFont() {\n        return userFont;\n    }\n\n    public FontUIResource getSmallFont() {\n        return smallFont;\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLineRect.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Color;\nimport java.awt.Rectangle;\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class FigLineRect {\n\n    private FigLine lineFig;\n    private FigRect rectFig;\n\n    public FigLineRect(Rectangle bounds, Color lineColor, int lineWidth) {\n        rectFig = new FigRect(bounds.x, bounds.y, bounds.width, bounds.height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n\n        lineFig = new FigLine(bounds.x + bounds.width / 2, bounds.y,\n                bounds.x + bounds.width / 2, bounds.y + bounds.height, lineColor);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(lineWidth);\n    }\n\n    public FigLine getLineFig() {\n        return lineFig;\n    }\n\n    public FigRect getRectFig() {\n        return rectFig;\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationList.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Dimension;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.Fig;\n\npublic class ActivationList {\n\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public ActivationList() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void clear(Fig fig) {\n        for (FigActivation oldActivation : activations) {\n            fig.removeFig(oldActivation);\n        }\n        for (FigActivation oldActivation : stackedActivations) {\n            fig.removeFig(oldActivation);\n        }\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void createStandardActivations(List<FigMessage> messages, FigLineRect lineRect, FigLifeLine figLifeLine, DiagramSettings settings) {\n        // Implementation of createStandardActivations\n    }\n\n    public void createStackedActivations(List<FigMessage> messages, FigLineRect lineRect, FigLifeLine figLifeLine, DiagramSettings settings) {\n        // Implementation of createStackedActivations\n    }\n\n    public void addActivations(Fig fig) {\n        for (FigActivation figAct : activations) {\n            figAct.setFillColor(fig.getFillColor());\n            fig.addFig(figAct);\n        }\n        for (FigActivation figAct : stackedActivations) {\n            figAct.setFillColor(fig.getFillColor());\n            fig.addFig(figAct);\n        }\n    }\n}\n"
    }
   "