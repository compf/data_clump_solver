
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": "29",
                "toLine": "37",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": "39",
                "toLine": "47",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": "49",
                "toLine": "63",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(new Font(\"SansSerif\", Font.PLAIN, 14), new Font(\"Dialog\", Font.PLAIN, 14), new Font(\"SansSerif\", Font.BOLD, 14), new Font(\"SansSerif\", Font.PLAIN, 14), new Font(\"Dialog\", Font.PLAIN, 12));"
            },
            {
                "fromLine": "74",
                "toLine": "74",
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }"
            },
            {
                "fromLine": "78",
                "toLine": "78",
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }"
            },
            {
                "fromLine": "82",
                "toLine": "82",
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }"
            },
            {
                "fromLine": "86",
                "toLine": "86",
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }"
            },
            {
                "fromLine": "90",
                "toLine": "90",
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }"
            },
            {
                "fromLine": "94",
                "toLine": "94",
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }"
            },
            {
                "fromLine": "98",
                "toLine": "98",
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "102",
                "toLine": "102",
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": "106",
                "toLine": "106",
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": "110",
                "toLine": "110",
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "114",
                "toLine": "114",
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": "118",
                "toLine": "118",
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": "29",
                "toLine": "37",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": "39",
                "toLine": "47",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": "49",
                "toLine": "63",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(new Font(\"SansSerif\", Font.BOLD, 16), new Font(\"Dialog\", Font.PLAIN, 16), new Font(\"SansSerif\", Font.BOLD, 16), new Font(\"SansSerif\", Font.PLAIN, 16), new Font(\"Dialog\", Font.PLAIN, 14));"
            },
            {
                "fromLine": "74",
                "toLine": "74",
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }"
            },
            {
                "fromLine": "78",
                "toLine": "78",
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }"
            },
            {
                "fromLine": "82",
                "toLine": "82",
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }"
            },
            {
                "fromLine": "86",
                "toLine": "86",
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }"
            },
            {
                "fromLine": "90",
                "toLine": "90",
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }"
            },
            {
                "fromLine": "94",
                "toLine": "94",
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }"
            },
            {
                "fromLine": "98",
                "toLine": "98",
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "102",
                "toLine": "102",
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": "106",
                "toLine": "106",
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": "110",
                "toLine": "110",
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "114",
                "toLine": "114",
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": "118",
                "toLine": "118",
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": "35",
                "toLine": "36",
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private LifeLineFigures lifeLineFigures;"
            },
            {
                "fromLine": "38",
                "toLine": "39",
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private ActivationManager activationManager;"
            },
            {
                "fromLine": "57",
                "toLine": "61",
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);",
                "newContent": "activationManager = new ActivationManager();\n        \n        lifeLineFigures = new LifeLineFigures(x, y, WIDTH, HEIGHT);"
            },
            {
                "fromLine": "62",
                "toLine": "65",
                "oldContent": "rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);",
                "newContent": "lifeLineFigures.getLineFig().setDashed(true);"
            },
            {
                "fromLine": "66",
                "toLine": "68",
                "oldContent": "lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);",
                "newContent": "lifeLineFigures.getLineFig().setLineWidth(LINE_WIDTH);\n        \n        addFig(lifeLineFigures.getRectFig());"
            },
            {
                "fromLine": "69",
                "toLine": "69",
                "oldContent": "addFig(lineFig);",
                "newContent": "addFig(lifeLineFigures.getLineFig());"
            },
            {
                "fromLine": "72",
                "toLine": "72",
                "oldContent": "synchronized void createActivations(final List<FigMessage> messages) {",
                "newContent": "synchronized void createActivations(final List<FigMessage> messages) {"
            },
            {
                "fromLine": "73",
                "toLine": "73",
                "oldContent": "clearActivations();",
                "newContent": "activationManager.clearActivations(this);"
            },
            {
                "fromLine": "74",
                "toLine": "74",
                "oldContent": "Collections.sort(messages, new FigMessageComparator());",
                "newContent": "Collections.sort(messages, new FigMessageComparator());"
            },
            {
                "fromLine": "76",
                "toLine": "76",
                "oldContent": "activations = createStandardActivations(messages);",
                "newContent": "activationManager.setActivations(createStandardActivations(messages));"
            },
            {
                "fromLine": "77",
                "toLine": "77",
                "oldContent": "stackedActivations = createStackedActivations(messages);",
                "newContent": "activationManager.setStackedActivations(createStackedActivations(messages));"
            },
            {
                "fromLine": "79",
                "toLine": "79",
                "oldContent": "addActivations(activations);",
                "newContent": "activationManager.addActivations(this, getFillColor());"
            },
            {
                "fromLine": "80",
                "toLine": "80",
                "oldContent": "addActivations(stackedActivations);",
                "newContent": "activationManager.addActivations(this, getFillColor());"
            },
            {
                "fromLine": "82",
                "toLine": "82",
                "oldContent": "calcBounds();",
                "newContent": "calcBounds();"
            },
            {
                "fromLine": "85",
                "toLine": "85",
                "oldContent": "private void addActivations(",
                "newContent": "// Refactored into ActivationManager"
            },
            {
                "fromLine": "86",
                "toLine": "86",
                "oldContent": "final List<FigActivation> activationFigs) {",
                "newContent": "// Refactored into ActivationManager"
            },
            {
                "fromLine": "87",
                "toLine": "93",
                "oldContent": "for (final FigActivation figAct : activationFigs) {\n            figAct.setFillColor(getFillColor());\n            addFig(figAct);\n        }\n    }\n    \n    private List<FigActivation> createStandardActivations(",
                "newContent": "// Refactored into ActivationManager"
            },
            {
                "fromLine": "94",
                "toLine": "94",
                "oldContent": "final List<FigMessage> figMessages) {        ",
                "newContent": "final List<FigMessage> figMessages) {        "
            },
            {
                "fromLine": "95",
                "toLine": "95",
                "oldContent": "final List<FigActivation> newActivations =",
                "newContent": "final List<FigActivation> newActivations ="
            },
            {
                "fromLine": "96",
                "toLine": "96",
                "oldContent": "new LinkedList<FigActivation>();",
                "newContent": "new LinkedList<FigActivation>();"
            },
            {
                "fromLine": "98",
                "toLine": "98",
                "oldContent": "FigActivation currentActivation = null;",
                "newContent": "FigActivation currentActivation = null;"
            },
            {
                "fromLine": "99",
                "toLine": "99",
                "oldContent": "if (!hasIncomingCallActionFirst(figMessages)) {",
                "newContent": "if (!hasIncomingCallActionFirst(figMessages)) {"
            },
            {
                "fromLine": "100",
                "toLine": "100",
                "oldContent": "currentActivation = createActivationFig(",
                "newContent": "currentActivation = createActivationFig("
            },
            {
                "fromLine": "101",
                "toLine": "101",
                "oldContent": "getOwner(),",
                "newContent": "getOwner(),"
            },
            {
                "fromLine": "102",
                "toLine": "102",
                "oldContent": "lineFig.getX(),",
                "newContent": "lifeLineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": "103",
                "to
{
    "fromLine": "103",
    "toLine": "103",
    "oldContent": "lineFig.getY(), ",
    "newContent": "lifeLineFigures.getLineFig().getY(), "
  }
 			