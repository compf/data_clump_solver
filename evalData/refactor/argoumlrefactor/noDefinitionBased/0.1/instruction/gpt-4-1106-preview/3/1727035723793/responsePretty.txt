"
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": "31",
                "toLine": "39",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": "41",
                "toLine": "49",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": "51",
                "toLine": "59",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 14, 12);"
            },
            {
                "fromLine": "81",
                "toLine": "81",
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": "85",
                "toLine": "85",
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": "89",
                "toLine": "89",
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": "93",
                "toLine": "93",
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": "97",
                "toLine": "97",
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": "101",
                "toLine": "101",
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": "105",
                "toLine": "105",
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "109",
                "toLine": "109",
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": "113",
                "toLine": "113",
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": "117",
                "toLine": "117",
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "121",
                "toLine": "121",
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": "125",
                "toLine": "125",
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": "31",
                "toLine": "39",
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": "41",
                "toLine": "49",
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": "51",
                "toLine": "59",
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 16, 14);"
            },
            {
                "fromLine": "81",
                "toLine": "81",
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": "85",
                "toLine": "85",
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": "89",
                "toLine": "89",
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": "93",
                "toLine": "93",
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": "97",
                "toLine": "97",
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": "101",
                "toLine": "101",
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": "105",
                "toLine": "105",
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "109",
                "toLine": "109",
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": "113",
                "toLine": "113",
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": "117",
                "toLine": "117",
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": "121",
                "toLine": "121",
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": "125",
                "toLine": "125",
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": "38",
                "toLine": "39",
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private LifeLineFigures lifeLineFigures;"
            },
            {
                "fromLine": "41",
                "toLine": "42",
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private ActivationList activationList;"
            },
            {
                "fromLine": "55",
                "toLine": "55",
                "oldContent": "        rectFig = new FigRect(x, y, WIDTH, HEIGHT); ",
                "newContent": "        lifeLineFigures = new LifeLineFigures(x, y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);"
            },
            {
                "fromLine": "56",
                "toLine": "56",
                "oldContent": "        rectFig.setFilled(false);",
                "newContent": ""
            },
            {
                "fromLine": "57",
                "toLine": "57",
                "oldContent": "        rectFig.setLineWidth(0);",
                "newContent": ""
            },
            {
                "fromLine": "58",
                "toLine": "58",
                "oldContent": "        lineFig = new FigLine(x + WIDTH / 2, y, ",
                "newContent": ""
            },
            {
                "fromLine": "59",
                "toLine": "59",
                "oldContent": "                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);",
                "newContent": ""
            },
            {
                "fromLine": "60",
                "toLine": "60",
                "oldContent": "        lineFig.setDashed(true);",
                "newContent": ""
            },
            {
                "fromLine": "61",
                "toLine": "61",
                "oldContent": "        lineFig.setLineWidth(LINE_WIDTH);",
                "newContent": ""
            },
            {
                "fromLine": "63",
                "toLine": "63",
                "oldContent": "        addFig(rectFig);",
                "newContent": "        addFig(lifeLineFigures.getRectFig());"
            },
            {
                "fromLine": "64",
                "toLine": "64",
                "oldContent": "        addFig(lineFig);",
                "newContent": "        addFig(lifeLineFigures.getLineFig());"
            },
            {
                "fromLine": "68",
                "toLine": "68",
                "oldContent": "        activations = new LinkedList<FigActivation>();",
                "newContent": "        activationList = new ActivationList();"
            },
            {
                "fromLine": "69",
                "toLine": "69",
                "oldContent": "        stackedActivations = new LinkedList<FigActivation>();",
                "newContent": ""
            },
            {
                "fromLine": "78",
                "toLine": "78",
                "oldContent": "        clearActivations();",
                "newContent": "        activationList.clearActivations(this);"
            },
            {
                "fromLine": "80",
                "toLine": "80",
                "oldContent": "        activations = createStandardActivations(messages);",
                "newContent": "        activationList.setActivations(createStandardActivations(messages));"
            },
            {
                "fromLine": "81",
                "toLine": "81",
                "oldContent": "        stackedActivations = createStackedActivations(messages);",
                "newContent": "        activationList.setStackedActivations(createStackedActivations(messages));"
            },
            {
                "fromLine": "83",
                "toLine": "83",
                "oldContent": "        addActivations(activations);",
                "newContent": "        activationList.addActivations(this);"
            },
            {
                "fromLine": "84",
                "toLine": "84",
                "oldContent": "        addActivations(stackedActivations);",
                "newContent": ""
            },
            {
                "fromLine": "88",
                "toLine": "88",
                "oldContent": "        for (final FigActivation figAct : activationFigs) {",
                "newContent": "        for (final FigActivation figAct : activationList.getAllActivations()) {"
            },
            {
                "fromLine": "100",
                "toLine": "100",
                "oldContent": "        for (FigActivation oldActivation : activations) {",
                "newContent": "        for (FigActivation oldActivation : activationList.getActivations()) {"
            },
            {
                "fromLine": "103",
                "toLine": "103",
                "oldContent": "        for (FigActivation oldActivation : stackedActivations) {",
                "newContent": "        for (FigActivation oldActivation : activationList.getStackedActivations()) {"
            },
            {
                "fromLine": "106",
                "toLine": "106",
                "oldContent": "        activations.clear();",
                "newContent": "        activationList.clear();"
            },
            {
                "fromLine": "107",
                "toLine": "107",
                "oldContent": "        stackedActivations.clear();",
                "newContent": ""
            },
            {
                "fromLine": "152",
                "toLine": "152",
                "oldContent": "        rectFig.setBounds(x, y, w, h);",
                "newContent": "        lifeLineFigures.setBounds(x, y, w, h);"
            },
            {
                "fromLine": "153",
                "toLine": "153",
                "oldContent": "        lineFig.setBounds(x + w / 2, y, w, h);",
                "newContent": ""
            },
            {
                "fromLine": "157",
                "toLine": "157",
                "oldContent": "        for (FigActivation act : activations) {",
                "newContent": "        for (FigActivation act : activationList.getActivations()) {"
            },
            {
                "fromLine": "159",
                "toLine": "159",
                "oldContent": "            removeFig(act);",
                "newContent": "            activationList.removeFig(this, act);"
            },
            {
                "fromLine": "163",
                "toLine": "163",
                "oldContent": "            addFig(act);",
                "newContent": "            activationList.addFig(this, act);"
            },
            {
                "fromLine": "166",
                "toLine": "166",
                "oldContent": "        if (activations.size() == 1 ",
                "newContent": "        if (activationList.getActivations().size() == 1 "
            },
            {
                "fromLine": "170",
                "toLine": "170",
                "oldContent": "            act.getHeight() == oldBounds.height) {",
                "newContent": "            act.getHeight() == oldBounds
{
    "refactorings": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": "170",
                "toLine": "170",
                "oldContent": "            act.getHeight() == oldBounds.height) {",
                "newContent": "            act.getHeight() == oldBounds.height) {"
            },
            {
                "fromLine": "174",
                "toLine": "174",
                "oldContent": "        lineFig.setLineWidth(w);",
                "newContent": "        lifeLineFigures.getLineFig().setLineWidth(w);"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": "28",
                "toLine": "29",
                "oldContent": "    private FigBasePresentation displayState;\n    private final DiagramSettings settings;",
                "newContent": "    private NodePresentation nodePresentation;"
            },
            {
                "fromLine": "31",
                "toLine": "31",
                "oldContent": "    private DiagramElement nameDiagramElement;",
                "newContent": ""
            },
            {
                "fromLine": "37",
                "toLine": "37",
                "oldContent": "        this.settings = settings;",
                "newContent": "        nodePresentation = new NodePresentation(owner, bounds, settings);"
            },
            {
                "fromLine": "41",
                "toLine": "41",
                "oldContent": "        displayState.setOwner(getOwner());",
                "newContent": "        nodePresentation.setDisplayState(displayState);"
            },
            {
                "fromLine": "42",
                "toLine": "42",
                "oldContent": "        addFig(displayState);",
                "newContent": "        addFig(nodePresentation.getDisplayState());"
            },
            {
                "fromLine": "50",
                "toLine": "50",
                "oldContent": "        return displayState.getMinimumSize();",
                "newContent": "        return nodePresentation.getMinimumSize();"
            },
            {
                "fromLine": "52",
                "toLine": "52",
                "oldContent": "    public void setNameDiagramElement(DiagramElement name) {",
                "newContent": ""
            },
            {
                "fromLine": "53",
                "toLine": "53",
                "oldContent": "    }",
                "newContent": ""
            },
            {
                "fromLine": "56",
                "toLine": "56",
                "oldContent": "        if (displayState != null) {",
                "newContent": "        nodePresentation.positionChildren(getBounds());"
            },
            {
                "fromLine": "57",
                "toLine": "57",
                "oldContent": "            displayState.setBounds(myBounds);",
                "newContent": ""
            },
            {
                "fromLine": "58",
                "toLine": "58",
                "oldContent": "        }",
                "newContent": ""
            },
            {
                "fromLine": "59",
                "toLine": "59",
                "oldContent": "//      calcBounds();",
                "newContent": ""
            },
            {
                "fromLine": "60",
                "toLine": "60",
                "oldContent": "        updateEdges();",
                "newContent": ""
            },
            {
                "fromLine": "64",
                "toLine": "64",
                "oldContent": "        positionChildren();",
                "newContent": "        nodePresentation.positionChildren(new Rectangle(x, y, w, h));"
            },
            {
                "fromLine": "78",
                "toLine": "78",
                "oldContent": "            final Dimension min = getMinimumSize();",
                "newContent": "            nodePresentation.calcBounds(this);"
            },
            {
                "fromLine": "79",
                "toLine": "79",
                "oldContent": "            int maxw = Math.max(getWidth(), min.width);",
                "newContent": ""
            },
            {
                "fromLine": "80",
                "toLine": "80",
                "oldContent": "            int maxh = Math.max(getHeight(), min.height);",
                "newContent": ""
            },
            {
                "fromLine": "81",
                "toLine": "81",
                "oldContent": "            setBounds(_x, _y, maxw, maxh);",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n\n    private final ColorUIResource primary1;\n    private final ColorUIResource primary2;\n    private final ColorUIResource primary3;\n    private final ColorUIResource secondary1;\n    private final ColorUIResource secondary2;\n    private final ColorUIResource secondary3;\n\n    public ThemeColors(int p1r, int p1g, int p1b, int p2r, int p2g, int p2b, int p3r, int p3g, int p3b) {\n        primary1 = new ColorUIResource(p1r, p1g, p1b);\n        primary2 = new ColorUIResource(p2r, p2g, p2b);\n        primary3 = new ColorUIResource(p3r, p3g, p3b);\n        secondary1 = new ColorUIResource(p1r, p1g, p1b);\n        secondary2 = new ColorUIResource(p2r, p2g, p2b);\n        secondary3 = new ColorUIResource(p3r, p3g, p3b);\n    }\n\n    public ColorUIResource getPrimary1() {\n        return primary1;\n    }\n\n    public ColorUIResource getPrimary2() {\n        return primary2;\n    }\n\n    public ColorUIResource getPrimary3() {\n        return primary3;\n    }\n\n    public ColorUIResource getSecondary1() {\n        return secondary1;\n    }\n\n    public ColorUIResource getSecondary2() {\n        return secondary2;\n    }\n\n    public ColorUIResource getSecondary3() {\n        return secondary3;\n    }\n}\n",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFonts {\n\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n\n    public ThemeFonts(String controlFamily, String systemFamily, int plainStyle, int boldStyle, int largeSize, int smallSize) {\n        controlFont = new FontUIResource(controlFamily, plainStyle, largeSize);\n        systemFont = new FontUIResource(systemFamily, plainStyle, largeSize);\n        windowTitleFont = new FontUIResource(controlFamily, boldStyle, largeSize);\n        userFont = new FontUIResource(controlFamily, plainStyle, largeSize);\n        smallFont = new FontUIResource(systemFamily, plainStyle, smallSize);\n    }\n\n    public FontUIResource getControlFont() {\n        return controlFont;\n    }\n\n    public FontUIResource getSystemFont() {\n        return systemFont;\n    }\n\n    public FontUIResource getUserFont() {\n        return userFont;\n    }\n\n    public FontUIResource getWindowTitleFont() {\n        return windowTitleFont;\n    }\n\n    public FontUIResource getSmallFont() {\n        return smallFont;\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineFigures.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\nimport java.awt.Color;\n\npublic class LifeLineFigures {\n\n    private FigRect rectFig;\n    private FigLine lineFig;\n\n    public LifeLineFigures(int x, int y, int width, int height, Color lineColor, int lineWidth) {\n        rectFig = new FigRect(x, y, width, height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(lineWidth);\n    }\n\n    public FigRect getRectFig() {\n        return rectFig;\n    }\n\n    public FigLine getLineFig() {\n        return lineFig;\n    }\n\n    public void setBounds(int x, int y, int w, int h) {\n        rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationList.java": "package org.argouml.sequence2.diagram;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class ActivationList {\n\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public ActivationList() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void clearActivations(FigLifeLine figLifeLine) {\n        for (FigActivation oldActivation : activations) {\n            figLifeLine.removeFig(oldActivation);\n        }\n        for (FigActivation oldActivation : stackedActivations) {\n            figLifeLine.removeFig(oldActivation);\n        }\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void setActivations(List<FigActivation> newActivations) {\n        activations = newActivations;\n    }\n\n    public void setStackedActivations(List<FigActivation> newStackedActivations) {\n        stackedActivations = newStackedActivations;\n    }\n\n    public void addActivations(FigLifeLine figLifeLine) {\n        for (final FigActivation figAct : activations) {\n            figAct.setFillColor(figLifeLine.getFillColor());\n            figLifeLine.addFig(figAct);\n        }\n        for (final FigActivation figAct : stackedActivations) {\n            figAct.setFillColor(figLifeLine.getFillColor());\n            figLifeLine.addFig(figAct);\n        }\n    }\n\n    public List<FigActivation> getActivations() {\n        return activations;\n    }\n\n    public List<FigActivation> getStackedActivations() {\n        return stackedActivations;\n    }\n\n    public List<FigActivation> getAllActivations() {\n        List<FigActivation> allActivations = new LinkedList<FigActivation>(activations);\n        allActivations.addAll(stackedActivations);\n        return allActivations;\n    }\n\n    public void clear() {\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void removeFig(FigLifeLine figLifeLine, FigActivation act) {\n        figLifeLine.removeFig(act);\n    }\n\n    public void addFig(FigLifeLine figLifeLine, FigActivation act) {\n        figLifeLine.addFig(act);\n    }\n}\n",
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentation.java": "package org.argouml.activity2.diagram;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigGroup;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\n\npublic class NodePresentation {\n\n    private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n\n    public NodePresentation(Object owner, Rectangle bounds, DiagramSettings settings) {\n        this.settings = settings;\n        setBounds(bounds);\n    }\n\n    public void setDisplayState(FigBasePresentation newDisplayState) {\n        this.displayState = newDisplayState;\n        displayState.setOwner(getOwner());\n    }\n\n    public FigBasePresentation getDisplayState() {\n        return displayState;\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void positionChildren(Rectangle bounds) {\n        if (displayState != null) {\n            displayState.setBounds(bounds);\n        }\n    }\n\n    public void calcBounds(FigGroup figGroup) {\n        final Dimension min = getMinimumSize();\n        int maxw = Math.max(figGroup.getWidth(), min.width);\n        int maxh = Math.max(figGroup.getHeight(), min.height);\n        figGroup.setBounds(figGroup.getX(), figGroup.getY(), maxw, maxh);\n    }\n}\n"
    }
}

"