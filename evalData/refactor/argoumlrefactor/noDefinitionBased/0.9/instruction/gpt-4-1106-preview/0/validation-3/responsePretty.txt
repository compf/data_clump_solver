refactorings:
{
	src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodeFigParts.java:
	[
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		public class NodeFigParts {		
",
		newContent:"
		package org.argouml.activity2.diagram;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigBasePresentation;
		import org.argouml.uml.diagram.ui.DiagramElement;
		
		public class NodeFigParts {		
",
,

	],
	src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		private NodeFigParts nodeFigParts;
		    
		    
		    
				
",
		newContent:"
				
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds);
		        this.settings = settings;
		    }		
",
		newContent:"
		FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds);
		        nodeFigParts = new NodeFigParts(new FigBasePresentation(owner, settings), settings, null);
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		void setDisplayState(FigBasePresentation displayState) {
		        this.displayState = displayState;
		        displayState.setOwner(getOwner());
		        addFig(displayState);
		    }		
",
		newContent:"
		void setDisplayState(FigBasePresentation displayState) {
		        nodeFigParts.setDisplayState(displayState);
		        displayState.setOwner(getOwner());
		        addFig(displayState);
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		public Dimension getMinimumSize() {
		        return displayState.getMinimumSize();
		    }		
",
		newContent:"
		public Dimension getMinimumSize() {
		        return nodeFigParts.getDisplayState().getMinimumSize();
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		public void setNameDiagramElement(DiagramElement name) {		
",
		newContent:"
		public void setNameDiagramElement(DiagramElement nameDiagramElement) {
		        nodeFigParts.setNameDiagramElement(nameDiagramElement);
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }		
",
		newContent:"
		protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        FigBasePresentation displayState = nodeFigParts.getDisplayState();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		        updateEdges();
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		protected void setBoundsImpl(
		            final int x,
		            final int y,
		            final int w,
		            final int h) {		
",
		newContent:"
		protected void setBoundsImpl(
		            final int x,
		            final int y,
		            final int w,
		            final int h) {
		        Rectangle bounds = new Rectangle(x, y, w, h);
		        nodeFigParts.setBounds(bounds);
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;
		        positionChildren();
		    }		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		public void calcBounds() {
		        if (getGroup() != null) {
		            ((FigGroup) getGroup()).calcBounds();
		        } else {
		            final Dimension min = getMinimumSize();
		            int maxw = Math.max(getWidth(), min.width);
		            int maxh = Math.max(getHeight(), min.height);
		            setBounds(_x, _y, maxw, maxh);
		        }
		    }		
",
		newContent:"
		public void calcBounds() {
		        Rectangle bounds = nodeFigParts.getBoundsAfterCalculation();
		        if (bounds != null) {
		            setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
		        }
		    }		
",
,

	],

}
