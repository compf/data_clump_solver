"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 32,
                "toLine": 41,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;\n    \n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n    \n    static final int WIDTH = 150;\n    static final int HEIGHT = 500;",
                "newContent": "private LifeLineDimensions dimensions;\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;"
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "        initialize(bounds.x, bounds.y);",
                "newContent": "        dimensions = new LifeLineDimensions(bounds, WIDTH, HEIGHT);\n        initialize();"
            },
            {
                "fromLine": 50,
                "toLine": 50,
                "oldContent": "    private void initialize(int x, int y) {",
                "newContent": "    private void initialize() {"
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "        rectFig = new FigRect(x, y, WIDTH, HEIGHT); ",
                "newContent": "        dimensions.createFigures();\n        rectFig = dimensions.getRectFig();"
            },
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);",
                "newContent": "        lineFig = dimensions.getLineFig();"
            },
            {
                "fromLine": 132,
                "toLine": 132,
                "oldContent": "                                    lineFig.getX(),",
                "newContent": "                                    dimensions.getLineX(),"
            },
            {
                "fromLine": 133,
                "toLine": 133,
                "oldContent": "                                    lineFig.getY(),",
                "newContent": "                                    dimensions.getLineY(),"
            },
            {
                "fromLine": 134,
                "toLine": 134,
                "oldContent": "                                    lineFig.getWidth(),",
                "newContent": "                                    dimensions.getLineWidth(),"
            },
            {
                "fromLine": 135,
                "toLine": 135,
                "oldContent": "                                    lineFig.getHeight(),",
                "newContent": "                                    dimensions.getLineHeight(),"
            },
            {
                "fromLine": 207,
                "toLine": 207,
                "oldContent": "                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                    dimensions.getLineX() - FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 208,
                "toLine": 208,
                "oldContent": "                    0, 0), getSettings(), figMessage, false);",
                "newContent": "                    dimensions.getInitialActivationWidth(), dimensions.getInitialActivationHeight()), getSettings(), figMessage, false);"
            },
            {
                "fromLine": 225,
                "toLine": 225,
                "oldContent": "                            new Rectangle(lineFig.getX()",
                "newContent": "                            new Rectangle(dimensions.getLineX()"
            },
            {
                "fromLine": 225,
                "toLine": 225,
                "oldContent": "                            new Rectangle(lineFig.getX()",
                "newContent": "                            new Rectangle(dimensions.getLineX()"
            },
            {
                "fromLine": 226,
                "toLine": 226,
                "oldContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 227,
                "toLine": 227,
                "oldContent": "                                    0, 0), getSettings(), figMessage, false);",
                "newContent": "                                    dimensions.getInitialActivationWidth(), dimensions.getInitialActivationHeight()), getSettings(), figMessage, false);"
            },
            {
                "fromLine": 239,
                "toLine": 239,
                "oldContent": "            lineFig.setHeight(ySender - getY());",
                "newContent": "            dimensions.setLineHeight(ySender - getY());"
            },
            {
                "fromLine": 303,
                "toLine": 303,
                "oldContent": "        rectFig.setBounds(x, y, w, h);",
                "newContent": "        dimensions.setBounds(x, y, w, h);"
            },
            {
                "fromLine": 304,
                "toLine": 304,
                "oldContent": "        lineFig.setBounds(x + w / 2, y, w, h);",
                "newContent": "        dimensions.updateLineFig();"
            },
            {
                "fromLine": 307,
                "toLine": 307,
                "oldContent": "            removeFig(act);",
                "newContent": "            removeFig(act);"
            },
            {
                "fromLine": 309,
                "toLine": 309,
                "oldContent": "                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2,",
                "newContent": "                    dimensions.getLineX() - FigActivation.DEFAULT_WIDTH / 2,"
            },
            {
                "fromLine": 311,
                "toLine": 311,
                "oldContent": "                    act.getY() - yDiff);",
                "newContent": "                    act.getY() - yDiff);"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": []
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineDimensions.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\n/**\n * This class encapsulates the dimensions and figures for a lifeline.\n */\nclass LifeLineDimensions {\n\n    private FigLine lineFig;\n    private FigRect rectFig;\n    private int x, y, width, height;\n\n    LifeLineDimensions(Rectangle bounds, int width, int height) {\n        this.x = bounds.x;\n        this.y = bounds.y;\n        this.width = width;\n        this.height = height;\n    }\n\n    void createFigures() {\n        rectFig = new FigRect(x, y, width, height);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, FigLifeLine.LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(FigLifeLine.LINE_WIDTH);\n    }\n\n    FigRect getRectFig() {\n        return rectFig;\n    }\n\n    FigLine getLineFig() {\n        return lineFig;\n    }\n\n    int getLineX() {\n        return lineFig.getX();\n    }\n\n    int getLineY() {\n        return lineFig.getY();\n    }\n\n    int getLineWidth() {\n        return lineFig.getWidth();\n    }\n\n    int getLineHeight() {\n        return lineFig.getHeight();\n    }\n\n    int getInitialActivationWidth() {\n        return 0;\n    }\n\n    int getInitialActivationHeight() {\n        return 0;\n    }\n\n    void setLineHeight(int newHeight) {\n        lineFig.setHeight(newHeight);\n    }\n\n    void setBounds(int x, int y, int w, int h) {\n        rectFig.setBounds(x, y, w, h);\n        updateLineFig();\n    }\n\n    void updateLineFig() {\n        lineFig.setBounds(x + width / 2, y, width, height);\n    }\n}\n"
    }
}"