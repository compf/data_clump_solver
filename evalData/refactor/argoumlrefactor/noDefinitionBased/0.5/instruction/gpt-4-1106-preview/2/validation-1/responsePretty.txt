refactorings:
{
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		activations = new LinkedList<FigActivation>();		
",
		newContent:"
		lifeLineFigures.setActivations(new LinkedList<FigActivation>());		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		stackedActivations = new LinkedList<FigActivation>();		
",
		newContent:"
		lifeLineFigures.setStackedActivations(new LinkedList<FigActivation>());		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		rectFig = new FigRect(x, y, WIDTH, HEIGHT);		
",
		newContent:"
		lifeLineFigures.setRectFig(new FigRect(x, y, LifeLineFigures.WIDTH, LifeLineFigures.HEIGHT));		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		rectFig.setFilled(false);		
",
		newContent:"
		lifeLineFigures.getRectFig().setFilled(false);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		rectFig.setLineWidth(0);		
",
		newContent:"
		lifeLineFigures.getRectFig().setLineWidth(0);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig = new FigLine(x + WIDTH / 2, y,		
",
		newContent:"
		lifeLineFigures.setLineFig(new FigLine(x + LifeLineFigures.WIDTH / 2, y,		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		x + WIDTH / 2, y + HEIGHT, LINE_COLOR);		
",
		newContent:"
		x + LifeLineFigures.WIDTH / 2, y + LifeLineFigures.HEIGHT, LINE_COLOR));		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.setDashed(true);		
",
		newContent:"
		lifeLineFigures.getLineFig().setDashed(true);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.setLineWidth(LINE_WIDTH);		
",
		newContent:"
		lifeLineFigures.getLineFig().setLineWidth(LINE_WIDTH);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		addFig(rectFig);		
",
		newContent:"
		addFig(lifeLineFigures.getRectFig());		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		addFig(lineFig);		
",
		newContent:"
		addFig(lifeLineFigures.getLineFig());		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		clearActivations();		
",
		newContent:"
		lifeLineFigures.clearActivations();		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		Collections.sort(messages, new FigMessageComparator());		
",
		newContent:"
		// Collections.sort(messages, new FigMessageComparator());		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		activations = createStandardActivations(messages);		
",
		newContent:"
		lifeLineFigures.setActivations(createStandardActivations(messages));		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		stackedActivations = createStackedActivations(messages);		
",
		newContent:"
		lifeLineFigures.setStackedActivations(createStackedActivations(messages));		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getX()		
",
		newContent:"
		lifeLineFigures.getLineFig().getX()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getY()		
",
		newContent:"
		lifeLineFigures.getLineFig().getY()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getWidth()		
",
		newContent:"
		lifeLineFigures.getLineFig().getWidth()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getHeight()		
",
		newContent:"
		lifeLineFigures.getLineFig().getHeight()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getX()		
",
		newContent:"
		lifeLineFigures.getLineFig().getX()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getX()		
",
		newContent:"
		lifeLineFigures.getLineFig().getX()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getY()		
",
		newContent:"
		lifeLineFigures.getLineFig().getY()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2		
",
		newContent:"
		lifeLineFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getHeight()		
",
		newContent:"
		lifeLineFigures.getLineFig().getHeight()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		activations.size()		
",
		newContent:"
		lifeLineFigures.getActivations().size()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		stackedActivations.size()		
",
		newContent:"
		lifeLineFigures.getStackedActivations().size()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		activations.clear();		
",
		newContent:"
		lifeLineFigures.getActivations().clear();		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		stackedActivations.clear();		
",
		newContent:"
		lifeLineFigures.getStackedActivations().clear();		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		rectFig.setBounds(x, y, w, h);		
",
		newContent:"
		lifeLineFigures.getRectFig().setBounds(x, y, w, h);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.setBounds(x + w / 2, y, w, h);		
",
		newContent:"
		lifeLineFigures.getLineFig().setBounds(x + w / 2, y, w, h);		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		for (FigActivation act : activations) {		
",
		newContent:"
		for (FigActivation act : lifeLineFigures.getActivations()) {		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2		
",
		newContent:"
		lifeLineFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		act.getHeight() == oldBounds.height		
",
		newContent:"
		act.getHeight() == lifeLineFigures.getLineFig().getHeight()		
",
,
		fromLine:
{
				
}
		toLine:
{
				
}
		oldContent:"
		lineFig.setLineWidth(w);		
",
		newContent:"
		lifeLineFigures.getLineFig().setLineWidth(w);		
",
,

	],

}
extractedClasses:
{
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineFigures.java:"
	package org.argouml.sequence2.diagram;
	
	import org.tigris.gef.presentation.FigLine;
	import org.tigris.gef.presentation.FigRect;
	
	import java.util.LinkedList;
	import java.util.List;
	
	public class LifeLineFigures {
	    private FigLine lineFig;
	    private FigRect rectFig;
	    private List<FigActivation> activations;
	    private List<FigActivation> stackedActivations;
	    public static final int WIDTH = 150;
	    public static final int HEIGHT = 500;
	
	    public LifeLineFigures() {
	        activations = new LinkedList<FigActivation>();
	        stackedActivations = new LinkedList<FigActivation>();
	    }
	
	    // Accessor methods for lineFig, rectFig, activations, and stackedActivations
	    // Additional methods to manipulate the activations and stackedActivations
	}	
",

}
