refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		120",
		toLine:"		140",
		oldContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),
		                    getSettings(),
		                    null);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
		newContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            ActivationFigBounds bounds = new ActivationFigBounds(
		                lineFig.getX(),
		                lineFig.getY(), 
		                lineFig.getWidth(), 
		                lineFig.getHeight());
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    bounds,
		                    getSettings(),
		                    null);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
,
		fromLine:"		147",
		toLine:"		179",
		oldContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        }
		                    } else {		
",
		newContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            ActivationFigBounds bounds = new ActivationFigBounds(
		                                lineFig.getX(), 
		                                ySender, 
		                                0, 
		                                0);
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    bounds,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            ActivationFigBounds bounds = new ActivationFigBounds(
		                                lineFig.getX(),
		                                lineFig.getY(),
		                                0,
		                                0);
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    bounds,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        }
		                    } else {		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationFigBounds.java:"
	package org.argouml.sequence2.diagram;
	
	import java.awt.Rectangle;
	
	public class ActivationFigBounds {
	    private final int x;
	    private final int y;
	    private final int width;
	    private final int height;
	
	    public ActivationFigBounds(int x, int y, int width, int height) {
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	    }
	
	    public Rectangle asRectangle() {
	        return new Rectangle(x, y, width, height);
	    }
	
	    // Additional methods related to bounds can be added here
	}
		
",

}
