refactorings:
{
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		41",
		toLine:"		60",
		oldContent:"
		private FigBoundary boundaryFigures;
		
		    private List<FigActivation> activations;
		    private List<FigActivation> stackedActivations;
		    
		    static final int WIDTH = 150;
		    static final int HEIGHT = 500;
		
		    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {
		        super(owner, settings);
		        initialize(bounds.x, bounds.y);
		    }
		    
		    private void initialize(int x, int y) {
		        activations = new LinkedList<FigActivation>();
		        stackedActivations = new LinkedList<FigActivation>();
		        
		        rectFig = new FigRect(x, y, WIDTH, HEIGHT); 
		        rectFig.setFilled(false);
		        rectFig.setLineWidth(0);
		        lineFig = new FigLine(x + WIDTH / 2, y, 
		                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);
		        lineFig.setDashed(true);
		        lineFig.setLineWidth(LINE_WIDTH);		
",
		newContent:"
		private FigBoundary boundaryFigures;
		
		    private List<FigActivation> activations;
		    private List<FigActivation> stackedActivations;
		    
		    static final int WIDTH = 150;
		    static final int HEIGHT = 500;
		
		    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {
		        super(owner, settings);
		        initialize(bounds.x, bounds.y);
		    }
		    
		    private void initialize(int x, int y) {
		        activations = new LinkedList<FigActivation>();
		        stackedActivations = new LinkedList<FigActivation>();
		        
		        FigRect rectFig = new FigRect(x, y, WIDTH, HEIGHT);
		        rectFig.setFilled(false);
		        rectFig.setLineWidth(0);
		        FigLine lineFig = new FigLine(x + WIDTH / 2, y,
		                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);
		        lineFig.setDashed(true);
		        lineFig.setLineWidth(LINE_WIDTH);
		        boundaryFigures = new FigBoundary(rectFig, lineFig);		
",
,
		fromLine:"		338",
		toLine:"		365",
		oldContent:"
		    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {
		        final Rectangle oldBounds = getBounds();
		        
		        rectFig.setBounds(x, y, w, h);
		        lineFig.setBounds(x + w / 2, y, w, h);
		        
		        final int yDiff = oldBounds.y - y;
		    
		        // we don't recalculate activations, just move them
		        for (FigActivation act : activations) {
		            // TODO: why do we need to remove then add the Fig?
		            removeFig(act);
		            act.setLocation(
		                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2,
		                    act.getY() - yDiff);
		            if (activations.size() == 1 
		                    && act.getHeight() == oldBounds.height) {
		                act.setHeight(getHeight());
		            }
		            addFig(act);
		        }
		        damage();
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;
		        firePropChange("bounds", oldBounds, getBounds());
		    }
		    
		    public void setLineWidth(int w) {
		        lineFig.setLineWidth(w);
		    }
		}		
",
		newContent:"
		    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {
		        final Rectangle oldBounds = getBounds();
		        
		        boundaryFigures.getRectFig().setBounds(x, y, w, h);
		        boundaryFigures.getLineFig().setBounds(x + w / 2, y, w, h);
		        
		        final int yDiff = oldBounds.y - y;
		    
		        // we don't recalculate activations, just move them
		        for (FigActivation act : activations) {
		            // TODO: why do we need to remove then add the Fig?
		            removeFig(act);
		            act.setLocation(
		                    boundaryFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2,
		                    act.getY() - yDiff);
		            if (activations.size() == 1 
		                    && act.getHeight() == oldBounds.height) {
		                act.setHeight(getHeight());
		            }
		            addFig(act);
		        }
		        damage();
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;
		        firePropChange("bounds", oldBounds, getBounds());
		    }
		    
		    public void setLineWidth(int w) {
		        boundaryFigures.getLineFig().setLineWidth(w);
		    }
		}		
",
,

	],

}
extractedClasses:
{
	FigBoundary.java:"
	class FigBoundary {
	    private FigLine lineFig;
	    private FigRect rectFig;
	    
	    public FigBoundary(FigRect rect, FigLine line) {
	        this.rectFig = rect;
	        this.lineFig = line;
	    }
	    
	    public FigLine getLineFig() { return lineFig; }
	    public FigRect getRectFig() { return rectFig; }
	}
		
",
	ThemeColor.java:"
	class ThemeColor {
	    private final ColorUIResource color1;
	    private final ColorUIResource color2;
	    private final ColorUIResource color3;
	
	    public ThemeColor(int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3) {
	        color1 = new ColorUIResource(r1, g1, b1);
	        color2 = new ColorUIResource(r2, g2, b2);
	        color3 = new ColorUIResource(r3, g3, b3);
	    }
	
	    public ColorUIResource getColor1() { return color1; }
	    public ColorUIResource getColor2() { return color2; }
	    public ColorUIResource getColor3() { return color3; }
	}
		
",

}
