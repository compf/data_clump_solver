"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 46,
                "toLine": 64,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private ThemeColors primaryColors = new ThemeColors(102, 153, 204);\n    private ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 66,
                "toLine": 74,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private ThemeFonts fonts = new ThemeFonts(14, 14, 14, 14, 12);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 46,
                "toLine": 64,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private ThemeColors primaryColors = new ThemeColors(102, 153, 204);\n    private ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 66,
                "toLine": 74,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private ThemeFonts fonts = new ThemeFonts(16, 16, 16, 16, 14);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 35,
                "toLine": 38,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;\n    \n    private List<FigActivation> activations;",
                "newContent": "private FigLifeLineComponents components;"
            },
            {
                "fromLine": 48,
                "toLine": 52,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);",
                "newContent": "components = new FigLifeLineComponents(x, y);"
            },
            {
                "fromLine": 53,
                "toLine": 57,
                "oldContent": "rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);",
                "newContent": ""
            },
            {
                "fromLine": 58,
                "toLine": 60,
                "oldContent": "addFig(rectFig);\n        addFig(lineFig);",
                "newContent": "addFig(components.getRectFig());\n        addFig(components.getLineFig());"
            },
            {
                "fromLine": 65,
                "toLine": 65,
                "oldContent": "synchronized void createActivations(final List<FigMessage> messages) {",
                "newContent": "void createActivations(final List<FigMessage> messages) {"
            },
            {
                "fromLine": 69,
                "toLine": 70,
                "oldContent": "clearActivations();\n        Collections.sort(messages, new FigMessageComparator());",
                "newContent": "components.clearActivations();\n        Collections.sort(messages, new FigMessageComparator());"
            },
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "activations = createStandardActivations(messages);",
                "newContent": ""
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "stackedActivations = createStackedActivations(messages);",
                "newContent": ""
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "addActivations(activations);",
                "newContent": "components.addActivations(createStandardActivations(messages));"
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "addActivations(stackedActivations);",
                "newContent": "components.addActivations(createStackedActivations(messages));"
            },
            {
                "fromLine": 110,
                "toLine": 110,
                "oldContent": "private void addActivations(",
                "newContent": "void addActivations("
            },
            {
                "fromLine": 122,
                "toLine": 122,
                "oldContent": "private List<FigActivation> createStandardActivations(",
                "newContent": "List<FigActivation> createStandardActivations("
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "private boolean isSameClassifierRoles(",
                "newContent": "boolean isSameClassifierRoles("
            },
            {
                "fromLine": 138,
                "toLine": 138,
                "oldContent": "private boolean isIncoming(FigMessage messageFig) {",
                "newContent": "boolean isIncoming(FigMessage messageFig) {"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "private boolean isOutgoing(FigMessage messageFig) {",
                "newContent": "boolean isOutgoing(FigMessage messageFig) {"
            },
            {
                "fromLine": 151,
                "toLine": 151,
                "oldContent": "private FigActivation createActivationFig(",
                "newContent": "FigActivation createActivationFig("
            },
            {
                "fromLine": 177,
                "toLine": 177,
                "oldContent": "private List<FigActivation> createStackedActivations(",
                "newContent": "List<FigActivation> createStackedActivations("
            },
            {
                "fromLine": 199,
                "toLine": 199,
                "oldContent": "private boolean hasIncomingCallActionFirst(",
                "newContent": "boolean hasIncomingCallActionFirst("
            },
            {
                "fromLine": 207,
                "toLine": 207,
                "oldContent": "private void clearActivations() {",
                "newContent": "void clearActivations() {"
            },
            {
                "fromLine": 217,
                "toLine": 217,
                "oldContent": "protected synchronized void setBoundsImpl(int x, int y, int w, int h) {",
                "newContent": "protected void setBoundsImpl(int x, int y, int w, int h) {"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLineComponents.java": "class FigLifeLineComponents {\n\n    private FigLine lineFig;\n    private FigRect rectFig;\n\n    /* Constructors and methods same as previously available in FigLifeLine, but refactored to use the\n       components' properties instead of external parameters */\n\n}",
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "class ThemeColors {\n\n    private ColorUIResource color1;\n    private ColorUIResource color2;\n    private ColorUIResource color3;\n\n    public ThemeColors(int factor1, int factor2, int factor3) {\n        color1 = new ColorUIResource(factor1, factor1, factor1 + 51);\n        color2 = new ColorUIResource(factor2, factor2, factor2 + 51);\n        color3 = new ColorUIResource(factor3, factor3, factor3 + 51);\n    }\n\n    // Getters for each color\n}",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "class ThemeFonts {\n\n    private FontUIResource controlFont;\n    private FontUIResource systemFont;\n    private FontUIResource windowTitleFont;\n    private FontUIResource userFont;\n    private FontUIResource smallFont;\n\n    public ThemeFonts(int controlSize, int systemSize, int titleSize, int userSize, int smallSize) {\n        controlFont = new FontUIResource(\"SansSerif\", Font.PLAIN, controlSize);\n        systemFont = new FontUIResource(\"Dialog\", Font.PLAIN, systemSize);\n        windowTitleFont = new FontUIResource(\"SansSerif\", Font.BOLD, titleSize);\n        userFont = new FontUIResource(\"SansSerif\", Font.PLAIN, userSize);\n        smallFont = new FontUIResource(\"Dialog\", Font.PLAIN, smallSize);\n    }\n\n    // Getters and setters for fonts\n}"
    }
}"