"{
    "refactorings":{
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 34,
                "toLine": 44,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 46,
                "toLine": 56,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 58,
                "toLine": 68,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 14, 12);"
            },
            {
                "fromLine": 71,
                "toLine": 74,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 77,
                "toLine": 80,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 83,
                "toLine": 86,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }\n\n    // these are gray in Metal Default Theme\n    /*",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 89,
                "toLine": 92,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 95,
                "toLine": 98,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 101,
                "toLine": 104,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 107,
                "toLine": 110,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 113,
                "toLine": 116,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 119,
                "toLine": 122,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 125,
                "toLine": 128,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 131,
                "toLine": 134,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 34,
                "toLine": 44,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 46,
                "toLine": 56,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 58,
                "toLine": 68,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 16, 14);"
            },
            {
                "fromLine": 71,
                "toLine": 74,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 77,
                "toLine": 80,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 83,
                "toLine": 86,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }\n\n    // these are gray in Metal Default Theme\n    /*",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 89,
                "toLine": 92,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 95,
                "toLine": 98,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 101,
                "toLine": 104,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 107,
                "toLine": 110,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 113,
                "toLine": 116,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 119,
                "toLine": 122,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 125,
                "toLine": 128,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 131,
                "toLine": 134,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 37,
                "toLine": 42,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;\n    \n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private LifeLineFigures lifeLineFigures;"
            },
            {
                "fromLine": 76,
                "toLine": 82,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, ",
                "newContent": "lifeLineFigures = new LifeLineFigures(x, y, WIDTH, HEIGHT);\n\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);"
            }
        ]
    },
    "extractedClasses":{
        "src/org/argouml/ui/ThemeColors.java": 
        "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n\n    private final ColorUIResource primary1;\n    private final ColorUIResource primary2;\n    private final ColorUIResource primary3;\n    private final ColorUIResource secondary1;\n    private final ColorUIResource secondary2;\n\n    public ThemeColors(int r1, int g1, int b1,\n                       int r2, int g2, int b2,\n                       int r3, int g3, int b3) {\n        primary1 = new ColorUIResource(r1, g1, b1);\n        primary2 = new ColorUIResource(r2, g2, b2);\n        primary3 = new ColorUIResource(r3, g3, b3);\n        secondary1 = new ColorUIResource(r1, g1, g1);\n        secondary2 = new ColorUIResource(r2, g2, g2);\n    }\n\n    public ColorUIResource getPrimary1() { return primary1; }\n    public ColorUIResource getPrimary2() { return primary2; }\n    public ColorUIResource getPrimary3() { return primary3; }\n    public ColorUIResource getSecondary1() { return secondary1; }\n    public ColorUIResource getSecondary2() { return secondary2; }\n}",
        "src/org/argouml/ui/ThemeFonts.java": 
        "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFonts {\n\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n    private final FontUIResource windowTitleFont;\n\n    public ThemeFonts(String controlFontName,\n                      String systemFontName,\n                      int plainStyle,\n                      int boldStyle,\n                      int controlAndSystemFontSize,\n                      int smallFontSize) {\n        controlFont = new FontUIResource(controlFontName, plainStyle, controlAndSystemFontSize);\n        systemFont = new FontUIResource(systemFontName, plainStyle, controlAndSystemFontSize);\n        userFont = new FontUIResource(controlFontName, plainStyle, controlAndSystemFontSize);\n        smallFont = new FontUIResource(systemFontName, plainStyle, smallFontSize);\n        windowTitleFont = new FontUIResource(controlFontName, boldStyle, controlAndSystemFontSize);\n    }\n\n    public FontUIResource getControlFont() { return controlFont; }\n    public FontUIResource getSystemFont() { return systemFont; }\n    public FontUIResource getUserFont() { return userFont; }\n    public FontUIResource getSmallFont() { return smallFont; }\n    public FontUIResource getWindowTitleFont() { return windowTitleFont; }\n}",
        "src/org/argouml/sequence2/diagram/LifeLineFigures.java": 
        "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class LifeLineFigures {\n\n    private FigLine lineFig;\n    private FigRect rectFig;\n    \n    public LifeLineFigures(int x, int y, int width, int height) {\n        rectFig = new FigRect(x, y, width, height); \n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, FigLife
{
    "refactorings":{
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java":[
            {
                "fromLine": 29,
                "toLine": 33,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private NodeFigData nodeFigData;"
            },
            {
                "fromLine": 37,
                "toLine": 38,
                "oldContent": "setBounds(bounds);",
                "newContent": "this.nodeFigData = new NodeFigData(bounds, settings);"
            },
            {
                "fromLine": 40,
                "toLine": 40,
                "oldContent": "this.settings = settings;",
                "newContent": ""
            },
            {
                "fromLine": 43,
                "toLine": 44,
                "oldContent": "displayState.setOwner(getOwner());\n        addFig(displayState);",
                "newContent": "nodeFigData.setDisplayState(displayState);\n        addFig(displayState);"
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "return displayState.getMinimumSize();",
                "newContent": "return nodeFigData.getMinimumSize();"
            },
            {
                "fromLine": 56,
                "toLine": 56,
                "oldContent": "this.nameDiagramElement = name;",
                "newContent": "nodeFigData.setNameDiagramElement(name);"
            },
            {
                "fromLine": 59,
                "toLine": 59,
                "oldContent": "Rectangle myBounds = getBounds();",
                "newContent": "Rectangle myBounds = nodeFigData.getBounds();"
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "if (displayState != null) {",
                "newContent": "if (nodeFigData.getDisplayState() != null) {"
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "displayState.setBounds(myBounds);",
                "newContent": "nodeFigData.getDisplayState().setBounds(myBounds);"
            },
            {
                "fromLine": 69,
                "toLine": 72,
                "oldContent": "_x = x;\n        _y = y;\n        _w = w;\n        _h = h;",
                "newContent": "nodeFigData.setBounds(x, y, w, h);"
            },
            {
                "fromLine": 74,
                "toLine": 79,
                "oldContent": "positionChildren();\n    }\n\n    /**\n     * This is called to rearrange the contents of the Fig when a childs",
                "newContent": "nodeFigData.positionChildren();\n    }\n\n    /**\n     * This is called to rearrange the contents of the Fig when a childs"
            },
            {
                "fromLine": 89,
                "toLine": 89,
                "oldContent": "final Dimension min = getMinimumSize();",
                "newContent": "final Dimension min = nodeFigData.getMinimumSize();"
            },
            {
                "fromLine": 90,
                "toLine": 90,
                "oldContent": "int maxw = Math.max(getWidth(), min.width);",
                "newContent": "int maxw = Math.max(nodeFigData.getWidth(), min.width);"
            },
            {
                "fromLine": 91,
                "toLine": 91,
                "oldContent": "int maxh = Math.max(getHeight(), min.height);",
                "newContent": "int maxh = Math.max(nodeFigData.getHeight(), min.height);"
            },
            {
                "fromLine": 92,
                "toLine": 92,
                "oldContent": "setBounds(_x, _y, maxw, maxh);",
                "newContent": "nodeFigData.setBounds(nodeFigData.getX(), nodeFigData.getY(), maxw, maxh);"
            }
        ]
    },
    "extractedClasses":{
        "src/org/argouml/activity2/diagram/NodeFigData.java": 
        "package org.argouml.activity2.diagram;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class NodeFigData {\n\n    private final DiagramSettings settings;\n    private FigBasePresentation displayState;\n    private DiagramElement nameDiagramElement;\n    private int x;\n    private int y;\n    private int w;\n    private int h;\n\n    public NodeFigData(Rectangle bounds, DiagramSettings settings) {\n        this.settings = settings;\n        setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n\n    public void setDisplayState(FigBasePresentation displayState) {\n        this.displayState = displayState;\n        displayState.setOwner(settings.getOwner());\n    }\n\n    public FigBasePresentation getDisplayState() {\n        return displayState;\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n        this.nameDiagramElement = name;\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void positionChildren() {\n        Rectangle myBounds = getBounds();\n        if (displayState != null) {\n            displayState.setBounds(myBounds);\n        }\n    }\n\n    public void setBounds(int x, int y, int w, int h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n\n    public Rectangle getBounds() {\n        return new Rectangle(x, y, w, h);\n    }\n\n    public int getX() { return x; }\n    public int getY() { return y; }\n    public int getWidth() { return w; }\n    public int getHeight() { return h; }\n}\n"
    }
}"