{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 54,
                "toLine": 56,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", 14);"
            },
            {
                "fromLine": 62,
                "toLine": 69,
                "oldContent": "private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "/* Fonts are managed by the themeFonts object */"
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 91,
                "toLine": 91,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getMenuTextFont(); }"
            },
            {
                "fromLine": 97,
                "toLine": 97,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 100,
                "toLine": 100,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 54,
                "toLine": 56,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", 16);"
            },
            {
                "fromLine": 62,
                "toLine": 69,
                "oldContent": "private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "/* Fonts are managed by the themeFonts object */"
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 91,
                "toLine": 91,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getMenuTextFont(); }"
            },
            {
                "fromLine": 97,
                "toLine": 97,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 100,
                "toLine": 100,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 32,
                "toLine": 40,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;\n    \n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n    \n    static final int WIDTH = 150;\n    static final int HEIGHT = 500;",
                "newContent": "private LifeLineDrawingData drawingData;\n    \n    static final int WIDTH = 150;\n    static final int HEIGHT = 500;"
            },
            {
                "fromLine": 71,
                "toLine": 73,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        ",
                "newContent": "drawingData = new LifeLineDrawingData();"
            },
            {
                "fromLine": 75,
                "toLine": 77,
                "oldContent": "rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);",
                "newContent": "drawingData.setShapeData(new FigRect(x, y, WIDTH, HEIGHT));"
            },
            {
                "fromLine": 78,
                "toLine": 80,
                "oldContent": "lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);",
                "newContent": "drawingData.setLineData(new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR));"
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "lineFig.setLineWidth(LINE_WIDTH);",
                "newContent": "drawingData.getLineData().setDashed(true);"
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "addFig(rectFig);",
                "newContent": "addFig(drawingData.getShapeData());"
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "addFig(lineFig);",
                "newContent": "addFig(drawingData.getLineData());"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 28,
                "toLine": 32,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private FigBasePresentation displayState;\n    private NodePresentationData presentationData;"
            },
            {
                "fromLine": 36,
                "toLine": 40,
                "oldContent": "setBounds(bounds);\n        this.settings = settings;",
                "newContent": "this.presentationData = new NodePresentationData(settings);\n        setBounds(bounds);"
            }
        ]
    },
    "extractedClasses": {
        "org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\n/**\n * This class encapsulates fonts configuration for themes.\n */\npublic class ThemeFonts {\n\n    private FontUIResource controlFont;\n    private FontUIResource systemFont;\n    private FontUIResource windowTitleFont;\n    private FontUIResource userFont;\n    private FontUIResource smallFont;\n\n    public ThemeFonts(String fontName, int fontSize) {\n        controlFont = new FontUIResource(fontName, Font.PLAIN, fontSize);\n        systemFont = new FontUIResource(\"Dialog\", Font.PLAIN, fontSize);\n        windowTitleFont = new FontUIResource(fontName, Font.BOLD, fontSize);\n        userFont = new FontUIResource(fontName, Font.PLAIN, fontSize);\n        smallFont = new FontUIResource(\"Dialog\", Font.PLAIN, fontSize - 2);\n    }\n\n    public FontUIResource getControlFont() {\n        return controlFont;\n    }\n\n    public FontUIResource getSystemFont() {\n        return systemFont;\n    }\n\n    public FontUIResource getWindowTitleFont() {\n        return windowTitleFont;\n    }\n\n    public FontUIResource getUserFont() {\n        return userFont;\n    }\n\n    public FontUIResource getSmallFont() {\n        return smallFont;\n    }\n\n    public FontUIResource getMenuTextFont() {\n        return controlFont;\n    }\n}",
        "org/argouml/sequence2/diagram/LifeLineDrawingData.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\n/**\n * This class encapsulates the drawing data for LifeLine.\n */\npublic class LifeLineDrawingData {\n\n    private FigLine lineFig;\n    private FigRect rectFig;\n\n    public void setLineData(FigLine line) {\n        this.lineFig = line;\n    }\n\n    public FigLine getLineData() {\n        return lineFig;\n    }\n\n    public void setShapeData(FigRect rect) {\n        this.rectFig = rect;\n    }\n\n    public FigRect getShapeData() {\n        return rectFig;\n    }\n}",
        "org/argouml/activity2/diagram/NodePresentationData.java": "package org.argouml.activity2.diagram;\n\nimport org.argouml.uml.diagram.DiagramSettings;\n\n/**\n * This class encapsulates node presentation data.\n */\npublic class NodePresentationData {\n\n    private DiagramSettings settings;\n\n    public NodePresentationData(DiagramSettings settings) {\n        this.settings = settings;\n    }\n\n    public DiagramSettings getSettings() {\n        return settings;\n    }\n}"
    }
}