refactorings:
{
	src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java:
	[
		fromLine:"		74",
		toLine:"		96",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);
		
		    private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);
		    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);		
",
,
		fromLine:"		122",
		toLine:"		142",
		oldContent:"
		protected ColorUIResource getPrimary1() { return primary1; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()
		     */
		    protected ColorUIResource getPrimary2() { return primary2; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()
		     */
		    protected ColorUIResource getPrimary3() { return primary3; }
		
		    // these are gray in Metal Default Theme
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()
		     */
		    protected ColorUIResource getSecondary1() { return secondary1; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()
		     */
		    protected ColorUIResource getSecondary2() { return secondary2; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()
		     */
		    protected ColorUIResource getSecondary3() { return secondary3; }		
",
		newContent:"
		protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }
		
		    protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }
		
		    protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }
		
		    protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }
		
		    protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }
		
		    protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }		
",
,

	],
	src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java:
	[
		fromLine:"		74",
		toLine:"		96",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);
		
		    private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);
		    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);		
",
,
		fromLine:"		122",
		toLine:"		142",
		oldContent:"
		protected ColorUIResource getPrimary1() { return primary1; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()
		     */
		    protected ColorUIResource getPrimary2() { return primary2; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()
		     */
		    protected ColorUIResource getPrimary3() { return primary3; }
		
		    // these are gray in Metal Default Theme
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()
		     */
		    protected ColorUIResource getSecondary1() { return secondary1; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()
		     */
		    protected ColorUIResource getSecondary2() { return secondary2; }
		
		    /*
		     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()
		     */
		    protected ColorUIResource getSecondary3() { return secondary3; }		
",
		newContent:"
		protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }
		
		    protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }
		
		    protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }
		
		    protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }
		
		    protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }
		
		    protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }		
",
,

	],
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		58",
		toLine:"		60",
		oldContent:"
		    private List<FigActivation> activations;
		    private List<FigActivation> stackedActivations;		
",
		newContent:"
		    private ActivationList activationList;		
",
,
		fromLine:"		76",
		toLine:"		80",
		oldContent:"
		        activations = new LinkedList<FigActivation>();
		        stackedActivations = new LinkedList<FigActivation>();		
",
		newContent:"
		        activationList = new ActivationList();		
",
,
		fromLine:"		88",
		toLine:"		101",
		oldContent:"
		        activations = createStandardActivations(messages);
		        stackedActivations = createStackedActivations(messages);
		        
		        addActivations(activations);
		        addActivations(stackedActivations);		
",
		newContent:"
		        activationList.createStandardActivations(messages);
		        activationList.createStackedActivations(messages);
		        
		        addActivations(activationList.getStandardActivations());
		        addActivations(activationList.getStackedActivations());		
",
,
		fromLine:"		147",
		toLine:"		205",
		oldContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),
		                    getSettings(),
		                    null);
		        }
		        
		        // This counts the number of repeated call/returns that take place
		        // after the first activation. This shouldn't be required once
		        // we handle stacked activations better and once issue 5692 and 5693
		        // are sorted.
		        int activationsCount = 0;
		        //
		        
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        }
		                    } else {
		                        if (figMessage.isSynchCallMessage()
		                                && isSameClassifierRoles(
		                                        currentActivation.getActivatingMessage(),
		                                        figMessage)) {
		                            activationsCount++;
		                        } else if (figMessage.isDeleteMessage()) {
		                            // if we are the target of a destroy action
		                            // the figlifeline ends here and we add the activation
		                            ySender = figMessage.getFinalY();
		                            currentActivation.setHeight(
		                                    ySender - currentActivation.getY());
		                            currentActivation.setDestroy(true);
		                            lineFig.setHeight(ySender - getY());
		                            newActivations.add(currentActivation);
		                            currentActivation = null;
		                        }
		                    }
		                }
		                
		                if (isOutgoing(figMessage) && currentActivation != null
		                    && currentActivation.isActivatorEnd(figMessage)
		                            && --activationsCount == 0) {
		                        // if we are the source of a return action
		                        // the activation ends here.
		                        ySender = figMessage.getStartY();
		                        currentActivation.setHeight(
		                                ySender - currentActivation.getY());
		                        newActivations.add(currentActivation);
		                        currentActivation = null;
		                }
		            }
		        }
		        
		        // If we have a currentAct object that means have reached the end
		        // of the lifeline with a call or a create not returned.
		        // Add the activation to the list after setting its height to end
		        // at the end of the lifeline.
		        if (currentActivation != null) {
		            currentActivation.setHeight(
		                    getHeight() - (currentActivation.getY() - getY()));
		            newActivations.add(currentActivation);
		        }
		        
		        return newActivations;
		    }		
",
		newContent:"
				
",
,
		fromLine:"		208",
		toLine:"		215",
		oldContent:"
		    private boolean isSameClassifierRoles(
		            final FigMessage mess1,
		            final FigMessage mess2) {
		        return mess1 != null
		                && mess1.getDestFigNode() == mess2.getDestFigNode()
		                && mess1.getSourceFigNode() == mess2.getSourceFigNode();
		    }		
",
		newContent:"
				
",
,
		fromLine:"		218",
		toLine:"		234",
		oldContent:"
		    /**
		     * Return true if the given message fig is pointing in to this lifeline.
		     * @param messageFig
		     * @return true if the message is incoming
		     */
		    private boolean isIncoming(FigMessage messageFig) {
		        return (messageFig.getDestFigNode().getOwner() == getOwner());
		    }
		    
		    /**
		     * Return true if the given message fig is pointing out from this lifeline.
		     * @param messageFig
		     * @return true if the message is outgoing
		     */
		    private boolean isOutgoing(FigMessage messageFig) {
		        return (messageFig.getSourceFigNode().getOwner() == getOwner());
		    }		
",
		newContent:"
				
",
,
		fromLine:"		237",
		toLine:"		253",
		oldContent:"
		    private FigActivation createActivationFig(
		            final Object owner, 
		            final int x, 
		            final int y, 
		            final int w, 
		            final int h,
		            final DiagramSettings settings,
		            final FigMessage messageFig) {
		        return new FigActivation(
		                owner,
		                new Rectangle(x, y, w, h),
		                settings,
		                messageFig);
		    }		
",
		newContent:"
				
",
,
		fromLine:"		256",
		toLine:"		285",
		oldContent:"
		    private List<FigActivation> createStackedActivations(
		            final List<FigMessage> figMessages) {
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        FigActivation currentAct = null;
		        
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            // if we are the dest and is a call action, create the 
		            // activation, but don't add it until the height is set.
		            if (figMessage.isSelfMessage()) {
		                if (figMessage.isSynchCallMessage()) {
		                    ySender = figMessage.getFinalY();
		                    currentAct = new FigActivation(figMessage.getOwner(),
		                            new Rectangle(lineFig.getX()
		                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,
		                                    0, 0), getSettings(), figMessage, false);
		                } else if (currentAct != null
		                        && figMessage.isReplyMessage()) {
		                    ySender = figMessage.getStartY();
		                    currentAct.setHeight(ySender - currentAct.getY());
		                    newActivations.add(currentAct);
		                    currentAct = null;
		                }
		            }
		        }
		        return newActivations;
		    }		
",
		newContent:"
				
",
,
		fromLine:"		288",
		toLine:"		300",
		oldContent:"
		    private boolean hasIncomingCallActionFirst(
		                final List<FigMessage> figMessages) {
		        final FigClassifierRole cr =
		            (FigClassifierRole) getGroup();
		        if (figMessages.isEmpty()) {
		            return false;
		        }
		        FigMessage figMessage = figMessages.get(0);
		        if (cr.equals(figMessage.getDestFigNode())
		                && !cr.equals(figMessage.getSourceFigNode())
		                && figMessage.isSynchCallMessage()) {
		            return true;
		        }
		        return false;
		    }		
",
		newContent:"
				
",
,
		fromLine:"		303",
		toLine:"		315",
		oldContent:"
		    private void clearActivations() {
		        for (FigActivation oldActivation : activations) {
		            removeFig(oldActivation);    
		        }
		        for (FigActivation oldActivation : stackedActivations) {
		            removeFig(oldActivation);    
		        }
		        activations.clear();
		        stackedActivations.clear();
		    }		
",
		newContent:"
		    private void clearActivations() {
		        for (FigActivation oldActivation : activationList.getStandardActivations()) {
		            removeFig(oldActivation);    
		        }
		        for (FigActivation oldActivation : activationList.getStackedActivations()) {
		            removeFig(oldActivation);    
		        }
		        activationList.clear();
		    }		
",
,

	],

}
extractedClasses:
{
	src/argouml-ui/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	    private final ColorUIResource color1;
	    private final ColorUIResource color2;
	    private final ColorUIResource color3;
	
	    public ThemeColors(int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3) {
	        color1 = new ColorUIResource(r1, g1, b1);
	        color2 = new ColorUIResource(r2, g2, b2);
	        color3 = new ColorUIResource(r3, g3, b3);
	    }
	
	    public ColorUIResource getColor1() {
	        return color1;
	    }
	
	    public ColorUIResource getColor2() {
	        return color2;
	    }
	
	    public ColorUIResource getColor3() {
	        return color3;
	    }
	}
		
",

}
