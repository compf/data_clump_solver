"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 74,
                "toLine": 96,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);\n    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);"
            },
            {
                "fromLine": 122,
                "toLine": 142,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()\n     */\n    protected ColorUIResource getPrimary2() { return primary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()\n     */\n    protected ColorUIResource getPrimary3() { return primary3; }\n\n    // these are gray in Metal Default Theme\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()\n     */\n    protected ColorUIResource getSecondary1() { return secondary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()\n     */\n    protected ColorUIResource getSecondary2() { return secondary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()\n     */\n    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }\n\n    protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }\n\n    protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }\n\n    protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }\n\n    protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }\n\n    protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 74,
                "toLine": 96,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);\n    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);"
            },
            {
                "fromLine": 122,
                "toLine": 142,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()\n     */\n    protected ColorUIResource getPrimary2() { return primary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()\n     */\n    protected ColorUIResource getPrimary3() { return primary3; }\n\n    // these are gray in Metal Default Theme\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()\n     */\n    protected ColorUIResource getSecondary1() { return secondary1; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()\n     */\n    protected ColorUIResource getSecondary2() { return secondary2; }\n\n    /*\n     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()\n     */\n    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getColor1(); }\n\n    protected ColorUIResource getPrimary2() { return primaryColors.getColor2(); }\n\n    protected ColorUIResource getPrimary3() { return primaryColors.getColor3(); }\n\n    protected ColorUIResource getSecondary1() { return secondaryColors.getColor1(); }\n\n    protected ColorUIResource getSecondary2() { return secondaryColors.getColor2(); }\n\n    protected ColorUIResource getSecondary3() { return secondaryColors.getColor3(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 58,
                "toLine": 60,
                "oldContent": "    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "    private ActivationList activationList;"
            },
            {
                "fromLine": 76,
                "toLine": 80,
                "oldContent": "        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();",
                "newContent": "        activationList = new ActivationList();"
            },
            {
                "fromLine": 88,
                "toLine": 101,
                "oldContent": "        activations = createStandardActivations(messages);\n        stackedActivations = createStackedActivations(messages);\n        \n        addActivations(activations);\n        addActivations(stackedActivations);",
                "newContent": "        activationList.createStandardActivations(messages);\n        activationList.createStackedActivations(messages);\n        \n        addActivations(activationList.getStandardActivations());\n        addActivations(activationList.getStackedActivations());"
            },
            {
                "fromLine": 147,
                "toLine": 205,
                "oldContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns that take place\n        // after the first activation. This shouldn't be required once\n        // we handle stacked activations better and once issue 5692 and 5693\n        // are sorted.\n        int activationsCount = 0;\n        //\n        \n        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        }\n                    } else {\n                        if (figMessage.isSynchCallMessage()\n                                && isSameClassifierRoles(\n                                        currentActivation.getActivatingMessage(),\n                                        figMessage)) {\n                            activationsCount++;\n                        } else if (figMessage.isDeleteMessage()) {\n                            // if we are the target of a destroy action\n                            // the figlifeline ends here and we add the activation\n                            ySender = figMessage.getFinalY();\n                            currentActivation.setHeight(\n                                    ySender - currentActivation.getY());\n                            currentActivation.setDestroy(true);\n                            lineFig.setHeight(ySender - getY());\n                            newActivations.add(currentActivation);\n                            currentActivation = null;\n                        }\n                    }\n                }\n                \n                if (isOutgoing(figMessage) && currentActivation != null\n                    && currentActivation.isActivatorEnd(figMessage)\n                            && --activationsCount == 0) {\n                        // if we are the source of a return action\n                        // the activation ends here.\n                        ySender = figMessage.getStartY();\n                        currentActivation.setHeight(\n                                ySender - currentActivation.getY());\n                        newActivations.add(currentActivation);\n                        currentActivation = null;\n                }\n            }\n        }\n        \n        // If we have a currentAct object that means have reached the end\n        // of the lifeline with a call or a create not returned.\n        // Add the activation to the list after setting its height to end\n        // at the end of the lifeline.\n        if (currentActivation != null) {\n            currentActivation.setHeight(\n                    getHeight() - (currentActivation.getY() - getY()));\n            newActivations.add(currentActivation);\n        }\n        \n        return newActivations;\n    }",
                "newContent": ""
            },
            {
                "fromLine": 208,
                "toLine": 215,
                "oldContent": "    private boolean isSameClassifierRoles(\n            final FigMessage mess1,\n            final FigMessage mess2) {\n        return mess1 != null\n                && mess1.getDestFigNode() == mess2.getDestFigNode()\n                && mess1.getSourceFigNode() == mess2.getSourceFigNode();\n    }",
                "newContent": ""
            },
            {
                "fromLine": 218,
                "toLine": 234,
                "oldContent": "    /**\n     * Return true if the given message fig is pointing in to this lifeline.\n     * @param messageFig\n     * @return true if the message is incoming\n     */\n    private boolean isIncoming(FigMessage messageFig) {\n        return (messageFig.getDestFigNode().getOwner() == getOwner());\n    }\n    \n    /**\n     * Return true if the given message fig is pointing out from this lifeline.\n     * @param messageFig\n     * @return true if the message is outgoing\n     */\n    private boolean isOutgoing(FigMessage messageFig) {\n        return (messageFig.getSourceFigNode().getOwner() == getOwner());\n    }",
                "newContent": ""
            },
            {
                "fromLine": 237,
                "toLine": 253,
                "oldContent": "    private FigActivation createActivationFig(\n            final Object owner, \n            final int x, \n            final int y, \n            final int w, \n            final int h,\n            final DiagramSettings settings,\n            final FigMessage messageFig) {\n        return new FigActivation(\n                owner,\n                new Rectangle(x, y, w, h),\n                settings,\n                messageFig);\n    }",
                "newContent": ""
            },
            {
                "fromLine": 256,
                "toLine": 285,
                "oldContent": "    private List<FigActivation> createStackedActivations(\n            final List<FigMessage> figMessages) {\n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        FigActivation currentAct = null;\n        \n        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            // if we are the dest and is a call action, create the \n            // activation, but don't add it until the height is set.\n            if (figMessage.isSelfMessage()) {\n                if (figMessage.isSynchCallMessage()) {\n                    ySender = figMessage.getFinalY();\n                    currentAct = new FigActivation(figMessage.getOwner(),\n                            new Rectangle(lineFig.getX()\n                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,\n                                    0, 0), getSettings(), figMessage, false);\n                } else if (currentAct != null\n                        && figMessage.isReplyMessage()) {\n                    ySender = figMessage.getStartY();\n                    currentAct.setHeight(ySender - currentAct.getY());\n                    newActivations.add(currentAct);\n                    currentAct = null;\n                }\n            }\n        }\n        return newActivations;\n    }",
                "newContent": ""
            },
            {
                "fromLine": 288,
                "toLine": 300,
                "oldContent": "    private boolean hasIncomingCallActionFirst(\n                final List<FigMessage> figMessages) {\n        final FigClassifierRole cr =\n            (FigClassifierRole) getGroup();\n        if (figMessages.isEmpty()) {\n            return false;\n        }\n        FigMessage figMessage = figMessages.get(0);\n        if (cr.equals(figMessage.getDestFigNode())\n                && !cr.equals(figMessage.getSourceFigNode())\n                && figMessage.isSynchCallMessage()) {\n            return true;\n        }\n        return false;\n    }",
                "newContent": ""
            },
            {
                "fromLine": 303,
                "toLine": 315,
                "oldContent": "    private void clearActivations() {\n        for (FigActivation oldActivation : activations) {\n            removeFig(oldActivation);    \n        }\n        for (FigActivation oldActivation : stackedActivations) {\n            removeFig(oldActivation);    \n        }\n        activations.clear();\n        stackedActivations.clear();\n    }",
                "newContent": "    private void clearActivations() {\n        for (FigActivation oldActivation : activationList.getStandardActivations()) {\n            removeFig(oldActivation);    \n        }\n        for (FigActivation oldActivation : activationList.getStackedActivations()) {\n            removeFig(oldActivation);    \n        }\n        activationList.clear();\n    }"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-ui/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n    private final ColorUIResource color1;\n    private final ColorUIResource color2;\n    private final ColorUIResource color3;\n\n    public ThemeColors(int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3) {\n        color1 = new ColorUIResource(r1, g1, b1);\n        color2 = new ColorUIResource(r2, g2, b2);\n        color3 = new ColorUIResource(r3, g3, b3);\n    }\n\n    public ColorUIResource getColor1() {\n        return color1;\n    }\n\n    public ColorUIResource getColor2() {\n        return color2;\n    }\n\n    public ColorUIResource getColor3() {\n        return color3;\n    }\n}\n",
        "src/argouml-sequence2/org/argouml/sequence2/diagram/ActivationList.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class ActivationList {\n\n    private List<FigActivation> standardActivations;\n    private List<FigActivation> stackedActivations;\n\n    public ActivationList() {\n        standardActivations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void createStandardActivations(final List<FigMessage> messages) {\n        // Implementation of createStandardActivations from FigLifeLine\n    }\n\n    public void createStackedActivations(final List<FigMessage> messages) {\n        // Implementation of createStackedActivations from FigLifeLine\n    }\n\n    public List<
{
    "refactorings": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 82,
                "toLine": 85,
                "oldContent": "        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);",
                "newContent": "        lineFig = new FigLifeLineShape(x, y, WIDTH, HEIGHT, getLineColor());"
            },
            {
                "fromLine": 105,
                "toLine": 105,
                "oldContent": "        addFig(rectFig);",
                "newContent": ""
            },
            {
                "fromLine": 106,
                "toLine": 106,
                "oldContent": "        addFig(lineFig);",
                "newContent": "        addFig(lifeLineShape.getRect());\n        addFig(lifeLineShape.getLine());"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLineShape.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class FigLifeLineShape {\n\n    private FigRect rectFig;\n    private FigLine lineFig;\n\n    public FigLifeLineShape(int x, int y, int width, int height, Color lineColor) {\n        rectFig = new FigRect(x, y, width, height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);\n    }\n\n    public FigRect getRect() {\n        return rectFig;\n    }\n\n    public FigLine getLine() {\n        return lineFig;\n    }\n}\n"
    }
}"