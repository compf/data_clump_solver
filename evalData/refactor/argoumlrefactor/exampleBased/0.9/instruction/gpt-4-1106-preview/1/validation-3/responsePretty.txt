"{
    "refactorings": {
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/UMLActivityDiagram.java": [
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "            figNode = new FigBaseNode(modelElement, bounds, settings);",
                "newContent": "            figNode = (DiagramElement)new FigBaseNode(modelElement, bounds, settings);"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/UMLActivityDiagram.java": "/* $Id$\n *****************************************************************************\n * Copyright (c) 2010-2011 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n */\n\npackage org.argouml.activity2.diagram;\n\nimport java.awt.Rectangle;\n\nimport org.argouml.i18n.Translator;\nimport org.argouml.model.ActivityDiagram;\nimport org.argouml.model.Model;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.UMLMutableGraphSupport;\nimport org.argouml.uml.diagram.UmlDiagramRenderer;\nimport org.tigris.gef.presentation.FigNode;\n\n/**\n * Diagram class for UML2 Activity Diagram\n * @author Bob Tarling\n */\npublic class UMLActivityDiagram extends BaseDiagram implements ActivityDiagram {\n    \n    /**\n     * A UML2 activity diagram is owned by an activity\n     * @param activity\n     */\n    UMLActivityDiagram(Object activity) {\n        super(activity);\n    }\n    \n    @Override\n    UmlDiagramRenderer createDiagramRenderer() {\n        return new ActivityDiagramRenderer();\n    }\n\n    @Override\n    UMLMutableGraphSupport createGraphModel() {\n        return new ActivityDiagramGraphModel(); \n    }\n\n    @Override\n    public String getLabelName() {\n        return Translator.localize(\"label.activity-diagram\");\n    }\n    \n    @Override\n    public boolean doesAccept(Object objectToAccept) {\n        if (Model.getFacade().isAComment(objectToAccept)\n                || Model.getFacade().isAActivityEdge(objectToAccept) \n                || Model.getFacade().isAActivityNode(objectToAccept) ) {\n            return true;\n        }\n        return false;\n    }\n    \n    protected String getDiagramXmlFile() {\n        return \"org/argouml/activity2/diagram/diagram.xml\";\n    }\n    \n    public DiagramElement createDiagramElement(\n            final Object modelElement,\n            final Rectangle bounds) {\n        \n        DiagramElement figNode = null;\n        \n        DiagramSettings settings = getDiagramSettings();\n        \n        if (Model.getFacade().isAActivityNode(modelElement)) {\n            figNode = (DiagramElement)new FigBaseNode(modelElement, bounds, settings);\n            final String style;\n            if (Model.getFacade().isAObjectNode(modelElement)) {\n                style = \"rect\";\n            } else if (Model.getFacade().isASendSignalAction(modelElement)) {\n                style = \"pentagon\";\n            } else if (Model.getFacade().isAAcceptEventAction(modelElement)) {\n                style = \"concave-pentagon\";\n            } else {\n                style = \"rrect\";\n            }\n            DiagramElementBuilder.buildDiagramElement(\n                    (FigBaseNode) figNode, style, modelElement, settings);\n        }\n        \n        return figNode;\n    }\n\n    @Override\n    public void encloserChanged(FigNode enclosed, FigNode oldEncloser,\n            FigNode newEncloser) {\n        // TODO Auto-generated method stub\n        \n    }\n}\n"
    }
}"