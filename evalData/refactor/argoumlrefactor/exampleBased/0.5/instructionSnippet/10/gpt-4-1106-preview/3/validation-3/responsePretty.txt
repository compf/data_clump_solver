refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:"		13",
		toLine:"		22",
		oldContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
		import org.argouml.activity2.diagram.NodeBounds;
				
",
		newContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		import java.awt.Rectangle;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
,
		fromLine:"		31",
		toLine:"		51",
		oldContent:"
		    private final DiagramSettings settings;
		    private DiagramElement nameDiagramElement;
		    
		    /**
		     * Constructor a new FigBaseNode
		     * 
		     * @param owner the owning UML element
		     * @param bounds rectangle describing bounds
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds);
		        this.settings = settings;
		    }
		    
		    void setDisplayState(FigBasePresentation displayState) {
		        this.displayState = displayState;
		        displayState.setOwner(getOwner());
		        addFig(displayState);		
",
		newContent:"
		    private final DiagramSettings settings;
		    private DiagramElement nameDiagramElement;
		    
		    /**
		     * Constructor a new FigBaseNode
		     * 
		     * @param owner the owning UML element
		     * @param bounds rectangle describing bounds
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final NodeBounds bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds.toRectangle());
		        this.settings = settings;
		    }
		    
		    void setDisplayState(FigBasePresentation displayState) {
		        this.displayState = displayState;
		        displayState.setOwner(getOwner());
		        addFig(displayState);		
",
,
		fromLine:"		59",
		toLine:"		93",
		oldContent:"
		    @Override
		    public Dimension getMinimumSize() {
		        return displayState.getMinimumSize();
		    }
		
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        NodeBounds myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds.toRectangle());
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(NodeBounds bounds) {
		
		        _x = bounds.getX();
		        _y = bounds.getY();
		        _w = bounds.getWidth();
		        _h = bounds.getHeight();
		        
		        positionChildren();
		    }
		
		    /**
		     * This is called to rearrange the contents of the Fig when a childs
		     * minimum size means it will no longer fit. If this group also has
		     * a parent and it will no longer fit that parent then control is
		     * delegated to that parent.
		     */		
",
		newContent:"
		    @Override
		    public Dimension getMinimumSize() {
		        return displayState.getMinimumSize();
		    }
		
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(int x, int y, int w, int h) {
		
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;
		        
		        positionChildren();
		    }
		
		    /**
		     * This is called to rearrange the contents of the Fig when a childs
		     * minimum size means it will no longer fit. If this group also has
		     * a parent and it will no longer fit that parent then control is
		     * delegated to that parent.
		     */		
",
,

	],

}
extractedClasses:
{

}
