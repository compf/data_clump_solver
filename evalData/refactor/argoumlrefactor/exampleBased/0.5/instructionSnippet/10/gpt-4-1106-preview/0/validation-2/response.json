{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 120,
                "toLine": 140,
                "oldContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns that take place",
                "newContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            ActivationDimensions dimensions = new ActivationDimensions(\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight());\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    dimensions,\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns that take place"
            },
            {
                "fromLine": 147,
                "toLine": 179,
                "oldContent": "        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        }\n                    } else {",
                "newContent": "        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            ActivationDimensions dimensions = new ActivationDimensions(\n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0);\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    dimensions,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            ActivationDimensions dimensions = new ActivationDimensions(\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0);\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    dimensions,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        }\n                    } else {"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationDimensions.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\n\npublic class ActivationDimensions {\n    private final int x;\n    private final int y;\n    private final int width;\n    private final int height;\n\n    public ActivationDimensions(int x, int y, int width, int height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    public Rectangle toRectangle() {\n        return new Rectangle(x, y, width, height);\n    }\n\n    // Getters and additional functionality can be added here\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n}"
    }
}