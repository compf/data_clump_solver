refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		40",
		toLine:"		52",
		oldContent:"
		
		package org.argouml.sequence2.diagram;
		
		import java.util.Collections;
		import java.util.LinkedList;
		import java.util.List;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.argouml.uml.diagram.ui.ArgoFigGroup;
		import org.tigris.gef.presentation.FigLine;
		import org.tigris.gef.presentation.FigRect;
		
				
",
		newContent:"
		
		package org.argouml.sequence2.diagram;
		
		import java.awt.Rectangle;
		import java.util.Collections;
		import java.util.LinkedList;
		import java.util.List;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.argouml.uml.diagram.ui.ArgoFigGroup;
		import org.tigris.gef.presentation.FigLine;
		import org.tigris.gef.presentation.FigRect;
		
				
",
,
		fromLine:"		124",
		toLine:"		134",
		oldContent:"
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),		
",
		newContent:"
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    new Rectangle(lineFig.getX(),
		                                  lineFig.getY(), 
		                                  lineFig.getWidth(), 
		                                  lineFig.getHeight()),		
",
,
		fromLine:"		151",
		toLine:"		161",
		oldContent:"
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,		
",
		newContent:"
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    new Rectangle(lineFig.getX(), 
		                                                  ySender, 
		                                                  0, 
		                                                  0),		
",
,
		fromLine:"		163",
		toLine:"		173",
		oldContent:"
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,		
",
		newContent:"
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    new Rectangle(lineFig.getX(),
		                                                  lineFig.getY(),
		                                                  0,
		                                                  0),		
",
,

	],

}
extractedClasses:
{
	src/argouml-app/src/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	
	    private final ColorUIResource primary1, primary2, primary3;
	    private final ColorUIResource secondary1, secondary2, secondary3;
	
	    public ThemeColors(int primaryComponent, int secondaryComponent, int tertiaryComponent) {
	        primary1 = new ColorUIResource(primaryComponent, primaryComponent, tertiaryComponent);
	        primary2 = new ColorUIResource(secondaryComponent, secondaryComponent, tertiaryComponent);
	        primary3 = new ColorUIResource(tertiaryComponent, tertiaryComponent, tertiaryComponent);
	
	        secondary1 = new ColorUIResource(primaryComponent, primaryComponent, primaryComponent);
	        secondary2 = new ColorUIResource(secondaryComponent, secondaryComponent, secondaryComponent);
	        secondary3 = new ColorUIResource(tertiaryComponent, tertiaryComponent, tertiaryComponent);
	    }
	
	    public ColorUIResource getPrimary1() { return primary1; }
	    public ColorUIResource getPrimary2() { return primary2; }
	    public ColorUIResource getPrimary3() { return primary3; }
	    public ColorUIResource getSecondary1() { return secondary1; }
	    public ColorUIResource getSecondary2() { return secondary2; }
	    public ColorUIResource getSecondary3() { return secondary3; }
	}
		
",
	src/argouml-app/src/org/argouml/ui/ThemeFonts.java:"
	package org.argouml.ui;
	
	import java.awt.Font;
	import javax.swing.plaf.FontUIResource;
	
	public class ThemeFonts {
	
	    private final FontUIResource controlFont, systemFont, windowTitleFont, userFont, smallFont;
	
	    public ThemeFonts(String controlFontName, String systemFontName, int fontSize, int smallFontSize) {
	        controlFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        systemFont = new FontUIResource(systemFontName, Font.PLAIN, fontSize);
	        windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, fontSize);
	        userFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        smallFont = new FontUIResource(systemFontName, Font.PLAIN, smallFontSize);
	    }
	
	    public FontUIResource getControlFont() { return controlFont; }
	    public FontUIResource getSystemFont() { return systemFont; }
	    public FontUIResource getUserFont() { return userFont; }
	    public FontUIResource getSmallFont() { return smallFont; }
	    public FontUIResource getWindowTitleFont() { return windowTitleFont; }
	}
		
",

}
