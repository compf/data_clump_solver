refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:"		13",
		toLine:"		21",
		oldContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
		newContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		import java.awt.Rectangle;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
,
		fromLine:"		63",
		toLine:"		82",
		oldContent:"
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(final Rectangle bounds) {
		            
		            _x = bounds.x;
		            _y = bounds.y;
		            _w = bounds.width;
		        _h = bounds.height;		
",
		newContent:"
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(int x, int y, int w, int h) {
		            
		            _x = x;
		            _y = y;
		            _w = w;
		        _h = h;		
",
,

	],

}
extractedClasses:
{
	src/argouml-app/src/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	
	    private final ColorUIResource primary1, primary2, primary3;
	    private final ColorUIResource secondary1, secondary2, secondary3;
	
	    public ThemeColors(int primaryComponent, int secondaryComponent, int tertiaryComponent) {
	        primary1 = new ColorUIResource(primaryComponent, primaryComponent, tertiaryComponent);
	        primary2 = new ColorUIResource(secondaryComponent, secondaryComponent, tertiaryComponent);
	        primary3 = new ColorUIResource(tertiaryComponent, tertiaryComponent, tertiaryComponent);
	
	        secondary1 = new ColorUIResource(primaryComponent, primaryComponent, primaryComponent);
	        secondary2 = new ColorUIResource(secondaryComponent, secondaryComponent, secondaryComponent);
	        secondary3 = new ColorUIResource(tertiaryComponent, tertiaryComponent, tertiaryComponent);
	    }
	
	    public ColorUIResource getPrimary1() { return primary1; }
	    public ColorUIResource getPrimary2() { return primary2; }
	    public ColorUIResource getPrimary3() { return primary3; }
	    public ColorUIResource getSecondary1() { return secondary1; }
	    public ColorUIResource getSecondary2() { return secondary2; }
	    public ColorUIResource getSecondary3() { return secondary3; }
	}
		
",
	src/argouml-app/src/org/argouml/ui/ThemeFonts.java:"
	package org.argouml.ui;
	
	import java.awt.Font;
	import javax.swing.plaf.FontUIResource;
	
	public class ThemeFonts {
	
	    private final FontUIResource controlFont, systemFont, windowTitleFont, userFont, smallFont;
	
	    public ThemeFonts(String controlFontName, String systemFontName, int fontSize, int smallFontSize) {
	        controlFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        systemFont = new FontUIResource(systemFontName, Font.PLAIN, fontSize);
	        windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, fontSize);
	        userFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        smallFont = new FontUIResource(systemFontName, Font.PLAIN, smallFontSize);
	    }
	
	    public FontUIResource getControlFont() { return controlFont; }
	    public FontUIResource getSystemFont() { return systemFont; }
	    public FontUIResource getUserFont() { return userFont; }
	    public FontUIResource getSmallFont() { return smallFont; }
	    public FontUIResource getWindowTitleFont() { return windowTitleFont; }
	}
		
",

}
