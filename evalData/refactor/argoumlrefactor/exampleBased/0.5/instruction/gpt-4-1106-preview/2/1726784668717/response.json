{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 44,
                "toLine": 58,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 60,
                "toLine": 74,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 76,
                "toLine": 90,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 14, 12);"
            },
            {
                "fromLine": 94,
                "toLine": 96,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 99,
                "toLine": 101,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 104,
                "toLine": 106,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 109,
                "toLine": 111,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 114,
                "toLine": 116,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 119,
                "toLine": 121,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 124,
                "toLine": 126,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 129,
                "toLine": 131,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 134,
                "toLine": 136,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 139,
                "toLine": 141,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 144,
                "toLine": 146,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 149,
                "toLine": 151,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 44,
                "toLine": 58,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 60,
                "toLine": 74,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 76,
                "toLine": 90,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", Font.PLAIN, Font.BOLD, 16, 14);"
            },
            {
                "fromLine": 94,
                "toLine": 96,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 99,
                "toLine": 101,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 104,
                "toLine": 106,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 109,
                "toLine": 111,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 114,
                "toLine": 116,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 119,
                "toLine": 121,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 124,
                "toLine": 126,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 129,
                "toLine": 131,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 134,
                "toLine": 136,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 139,
                "toLine": 141,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 144,
                "toLine": 146,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 149,
                "toLine": 151,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 33,
                "toLine": 37,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private FigLifeLineShape lifeLineShape;"
            },
            {
                "fromLine": 39,
                "toLine": 41,
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private FigActivationsManager activationsManager;"
            },
            {
                "fromLine": 67,
                "toLine": 73,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, ",
                "newContent": "activationsManager = new FigActivationsManager();\n\n        lifeLineShape = new FigLifeLineShape(x, y, WIDTH, HEIGHT);"
            },
            {
                "fromLine": 75,
                "toLine": 81,
                "oldContent": "x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);\n        addFig(lineFig);",
                "newContent": "addFig(lifeLineShape.getRect());\n        addFig(lifeLineShape.getLine());"
            },
            {
                "fromLine": 84,
                "toLine": 101,
                "oldContent": "synchronized void createActivations(final List<FigMessage> messages) {\n        clearActivations();\n        Collections.sort(messages, new FigMessageComparator());\n        \n        activations = createStandardActivations(messages);\n        stackedActivations = createStackedActivations(messages);\n        \n        addActivations(activations);\n        addActivations(stackedActivations);\n\n        // TODO: Do we need this?\n        calcBounds();\n    }",
                "newContent": "synchronized void createActivations(final List<FigMessage> messages) {\n        activationsManager.clearActivations();\n        activationsManager.createActivations(messages, lifeLineShape.getLine(), getOwner(), getSettings());\n        addActivations(activationsManager.getActivations());\n        addActivations(activationsManager.getStackedActivations());\n        calcBounds();\n    }"
            },
            {
                "fromLine": 106,
                "toLine": 117,
                "oldContent": "private void addActivations(\n            final List<FigActivation> activationFigs) {\n        for (final FigActivation figAct : activationFigs) {\n            figAct.setFillColor(getFillColor());\n            addFig(figAct);\n        }\n    }",
                "newContent": "private void addActivations(\n            final List<FigActivation> activationFigs) {\n        for (final FigActivation figAct : activationFigs) {\n            figAct.setFillColor(getFillColor());\n            addFig(figAct);\n        }\n    }"
            },
            {
                "fromLine": 119,
                "toLine": 184,
                "oldContent": "private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns that take place\n        // after the first activation. This shouldn't be required once\n        // we handle stacked activations better and once issue 5692 and 5693\n        // are sorted.\n        int activationsCount = 0;\n        //\n        \n        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        }\n                    } else {\n                        if (figMessage.isSynchCallMessage()\n                                && isSameClassifierRoles(\n                                        currentActivation.getActivatingMessage(),\n                                        figMessage)) {\n                            activationsCount++;\n                        } else if (figMessage.isDeleteMessage()) {\n                            // if we are the target of a destroy action\n                            // the figlifeline ends here and we add the activation\n                            ySender = figMessage.getFinalY();\n                            currentActivation.setHeight(\n                                    ySender - currentActivation.getY());\n                            currentActivation.setDestroy(true);\n                            lineFig.setHeight(ySender - getY());\n                            newActivations.add(currentActivation);\n                            currentActivation = null;\n                        }\n                    }\n                }\n                \n                if (isOutgoing(figMessage) && currentActivation != null\n                    && currentActivation.isActivatorEnd(figMessage)\n                            && --activationsCount == 0) {\n                        // if we are the source of a return action\n                        // the activation ends here.\n                        ySender = figMessage.getStartY();\n                        currentActivation.setHeight(\n                                ySender - currentActivation.getY());\n                        newActivations.add(currentActivation);\n                        currentActivation = null;\n                }\n            }\n        }\n        \n        // If we have a currentAct object that means have reached the end\n        // of the
    {
        "refactorings": {
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
                {
                    "fromLine": 186,
                    "toLine": 208,
                    "oldContent": "        // lifeline with a call or a create not returned.\n        // Add the activation to the list after setting its height to end\n        // at the end of the lifeline.\n        if (currentActivation != null) {\n            currentActivation.setHeight(\n                    getHeight() - (currentActivation.getY() - getY()));\n            newActivations.add(currentActivation);\n        }\n        \n        return newActivations;\n    }\n    \n    private boolean isSameClassifierRoles(\n            final FigMessage mess1,\n            final FigMessage mess2) {\n        return mess1 != null\n                && mess1.getDestFigNode() == mess2.getDestFigNode()\n                && mess1.getSourceFigNode() == mess2.getSourceFigNode();\n    }",
                    "newContent": ""
                },
                {
                    "fromLine": 210,
                    "toLine": 212,
                    "oldContent": "    private boolean isIncoming(FigMessage messageFig) {\n        return (messageFig.getDestFigNode().getOwner() == getOwner());",
                    "newContent": ""
                },
                {
                    "fromLine": 214,
                    "toLine": 216,
                    "oldContent": "    private boolean isOutgoing(FigMessage messageFig) {\n        return (messageFig.getSourceFigNode().getOwner() == getOwner());",
                    "newContent": ""
                },
                {
                    "fromLine": 218,
                    "toLine": 226,
                    "oldContent": "    private FigActivation createActivationFig(\n            final Object owner, \n            final int x, \n            final int y, \n            final int w, \n            final int h,\n            final DiagramSettings settings,\n            final FigMessage messageFig) {\n        return new FigActivation(",
                    "newContent": ""
                },
                {
                    "fromLine": 228,
                    "toLine": 242,
                    "oldContent": "                owner,\n                new Rectangle(x, y, w, h),\n                settings,\n                messageFig);\n    }\n    \n    private List<FigActivation> createStackedActivations(\n            final List<FigMessage> figMessages) {\n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        FigActivation currentAct = null;",
                    "newContent": ""
                },
                {
                    "fromLine": 244,
                    "toLine": 276,
                    "oldContent": "        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            // if we are the dest and is a call action, create the \n            // activation, but don't add it until the height is set.\n            if (figMessage.isSelfMessage()) {\n                if (figMessage.isSynchCallMessage()) {\n                    ySender = figMessage.getFinalY();\n                    currentAct = new FigActivation(figMessage.getOwner(),\n                            new Rectangle(lineFig.getX()\n                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,\n                                    0, 0), getSettings(), figMessage, false);\n                } else if (currentAct != null\n                        && figMessage.isReplyMessage()) {\n                    ySender = figMessage.getStartY();\n                    currentAct.setHeight(ySender - currentAct.getY());\n                    newActivations.add(currentAct);\n                    currentAct = null;\n                }\n            }\n        }\n        return newActivations;\n    }",
                    "newContent": ""
                },
                {
                    "fromLine": 278,
                    "toLine": 282,
                    "oldContent": "    private boolean hasIncomingCallActionFirst(\n                final List<FigMessage> figMessages) {\n        final FigClassifierRole cr =\n            (FigClassifierRole) getGroup();",
                    "newContent": ""
                },
                {
                    "fromLine": 284,
                    "toLine": 292,
                    "oldContent": "        if (figMessages.isEmpty()) {\n            return false;\n        }\n        FigMessage figMessage = figMessages.get(0);\n        if (cr.equals(figMessage.getDestFigNode())\n                && !cr.equals(figMessage.getSourceFigNode())\n                && figMessage.isSynchCallMessage()) {\n            return true;\n        }",
                    "newContent": ""
                },
                {
                    "fromLine": 294,
                    "toLine": 296,
                    "oldContent": "        return false;\n    }",
                    "newContent": ""
                },
                {
                    "fromLine": 298,
                    "toLine": 313,
                    "oldContent": "    private void clearActivations() {\n        for (FigActivation oldActivation : activations) {\n            removeFig(oldActivation);    \n        }\n        for (FigActivation oldActivation : stackedActivations) {\n            removeFig(oldActivation);    \n        }\n        activations.clear();\n        stackedActivations.clear();\n    }",
                    "newContent": ""
                },
                {
                    "fromLine": 315,
                    "toLine": 317,
                    "oldContent": "    @Override\n    public void setFilled(boolean filled) {",
                    "newContent": "    @Override\n    public void setFilled(boolean filled) {"
                },
                {
                    "fromLine": 319,
                    "toLine": 321,
                    "oldContent": "        // we do nothing. No call to the parent\n    }",
                    "newContent": "        // we do nothing. No call to the parent\n    }"
                },
                {
                    "fromLine": 323,
                    "toLine": 328,
                    "oldContent": "    @Override\n    // TODO: synchronized is required here as there can be some \n    // concurrent modification problems when drawing a call message and\n    // having that automatically draw the reply. Maybe fixing the TODO\n    // below will resolve this and the synch can go.",
                    "newContent": "    @Override\n    // TODO: synchronized is required here as there can be some \n    // concurrent modification problems when drawing a call message and\n    // having that automatically draw the reply. Maybe fixing the TODO\n    // below will resolve this and the synch can go."
                },
                {
                    "fromLine": 330,
                    "toLine": 365,
                    "oldContent": "    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {\n        final Rectangle oldBounds = getBounds();\n        \n        rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);\n        \n        final int yDiff = oldBounds.y - y;\n    \n        // we don't recalculate activations, just move them\n        for (FigActivation act : activations) {\n            // TODO: why do we need to remove then add the Fig?\n            removeFig(act);\n            act.setLocation(\n                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2,\n                    act.getY() - yDiff);\n            if (activations.size() == 1 \n                    && act.getHeight() == oldBounds.height) {\n                act.setHeight(getHeight());\n            }\n            addFig(act);\n        }\n        damage();\n        _x = x;\n        _y = y;\n        _w = w;\n        _h = h;\n        firePropChange(\"bounds\", oldBounds, getBounds());\n    }",
                    "newContent": "    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {\n        final Rectangle oldBounds = getBounds();\n        \n        lifeLineShape.setBounds(x, y, w, h);\n        \n        final int yDiff = oldBounds.y - y;\n    \n        // we don't recalculate activations, just move them\n        activationsManager.moveActivations(lifeLineShape.getLine(), yDiff, oldBounds, getHeight());\n        damage();\n        _x = x;\n        _y = y;\n        _w = w;\n        _h = h;\n        firePropChange(\"bounds\", oldBounds, getBounds());\n    }"
                },
                {
                    "fromLine": 367,
                    "toLine": 369,
                    "oldContent": "    public void setLineWidth(int w) {\n        lineFig.setLineWidth(w);",
                    "newContent": "    public void setLineWidth(int w) {\n        lifeLineShape.getLine().setLineWidth(w);"
                }
            ]
        },
        "extractedClasses": {
            "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "public class ThemeColors {\n    private ColorUIResource primary1, primary2, primary3;\n    private ColorUIResource secondary1, secondary2, secondary3;\n\n    public ThemeColors(int p1r, int p1g, int p1b, int p2r, int p2g, int p2b, int p3r, int p3g, int p3b) {\n        primary1 = new ColorUIResource(p1r, p1g, p1b);\n        primary2 = new ColorUIResource(p2r, p2g, p2b);\n        primary3 = new ColorUIResource(p3r, p3g, p3b);\n        secondary1 = new ColorUIResource(p1r, p1g, p1b);\n        secondary2 = new ColorUIResource(p2r, p2g, p2b);\n        secondary3 = new ColorUIResource(p3r, p3g, p3b);\n    }\n\n    public ColorUIResource getPrimary1() { return primary1; }\n    public ColorUIResource getPrimary2() { return primary2; }\n    public ColorUIResource getPrimary3() { return primary3; }\n    public ColorUIResource getSecondary1() { return secondary1; }\n    public ColorUIResource getSecondary2() { return secondary2; }\n    public ColorUIResource getSecondary3() { return secondary3; }\n}",
            "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "public class ThemeFonts {\n    private FontUIResource controlFont, systemFont, windowTitleFont, userFont, smallFont;\n\n    public ThemeFonts(String controlName, String systemName, int plainStyle, int boldStyle, int controlSize, int smallSize) {\n        controlFont = new FontUIResource(controlName, plainStyle, controlSize);\n        systemFont = new FontUIResource(systemName, plainStyle, controlSize);\n        windowTitleFont = new FontUIResource(controlName, boldStyle, controlSize);\n        userFont = new FontUIResource(controlName, plainStyle, controlSize);\n        smallFont = new FontUIResource(systemName, plainStyle, smallSize);\n    }\n\n    public FontUIResource getControlFont() { return controlFont; }\n    public FontUIResource getSystemFont() { return systemFont; }\n    public FontUIResource getWindowTitleFont() { return windowTitleFont; }\n    public FontUIResource getUserFont() { return userFont; }\n    public FontUIResource getSmallFont() { return smallFont; }\n}",
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLineShape.java": "public class FigLifeLineShape {\n    private FigRect rect;\n    private FigLine line;\n\n    public FigLifeLineShape(int x, int y, int width, int height) {\n        rect = new FigRect(x, y, width, height);\n        rect.setFilled(false);\n        rect.setLineWidth(0);\n        line = new FigLine(x + width / 2, y, x + width / 2, y + height, LINE_COLOR);\n        line.setDashed(true);\n        line.setLineWidth(LINE_WIDTH);\n    }\n\n    public FigRect getRect() { return rect; }\n    public FigLine getLine() { return line; }\n\n    public void setBounds(int x, int y, int w, int h) {\n        rect.setBounds(x, y, w, h);\n        line.setBounds(x + w / 2, y, w, h);\n    }\n}",
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigActivationsManager.java": "public class FigActivationsManager {\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public FigActivationsManager() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void clearActivations() {\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void createActivations(List<FigMessage> messages, FigLine line, Object owner, DiagramSettings settings) {\n        // Implementation of creating standard and stacked activations\n    }\n\n    public void moveActivations(FigLine line, int yDiff, Rectangle oldBounds, int newHeight) {\n        // Implementation of moving activations\n    }\n\n    public List<FigActivation> getActivations() { return activations; }\n    public List<FigActivation> getStackedActivations() { return stackedActivations; }\n}"
        }
    }
   