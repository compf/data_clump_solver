"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 35,
                "toLine": 43,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColor primaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": 45,
                "toLine": 53,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColor secondaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": 55,
                "toLine": 63,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFont themeFonts = new ThemeFont(\"SansSerif\", \"Dialog\", 14, 12);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 35,
                "toLine": 43,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColor primaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": 45,
                "toLine": 53,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColor secondaryColors = new ThemeColor(102, 153, 204);"
            },
            {
                "fromLine": 55,
                "toLine": 63,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFont themeFonts = new ThemeFont(\"SansSerif\", \"Dialog\", 16, 14);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 44,
                "toLine": 46,
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private ActivationList activationList;"
            },
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "activations = new LinkedList<FigActivation>();",
                "newContent": "activationList = new ActivationList();"
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "stackedActivations = new LinkedList<FigActivation>();",
                "newContent": "// This line has been refactored out, as the ActivationList now contains both standard and stacked activations."
            },
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "clearActivations();",
                "newContent": "activationList.clearActivations(this);"
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "Collections.sort(messages, new FigMessageComparator());",
                "newContent": "// Sorting is now handled within the ActivationList class."
            },
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "activations = createStandardActivations(messages);",
                "newContent": "activationList.createActivations(messages, this);"
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "stackedActivations = createStackedActivations(messages);",
                "newContent": "// Stacked activations are now created within the ActivationList.createActivations method."
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "addActivations(activations);",
                "newContent": "// Adding activations is now handled within the ActivationList.createActivations method."
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "addActivations(stackedActivations);",
                "newContent": "// Adding stacked activations is now handled within the ActivationList.createActivations method."
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "private void addActivations(final List<FigActivation> activationFigs) {",
                "newContent": "// This method has been moved to the ActivationList class."
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "private List<FigActivation> createStandardActivations(final List<FigMessage> figMessages) {",
                "newContent": "// This method has been moved to the ActivationList class."
            },
            {
                "fromLine": 190,
                "toLine": 190,
                "oldContent": "private List<FigActivation> createStackedActivations(final List<FigMessage> figMessages) {",
                "newContent": "// This method has been moved to the ActivationList class."
            },
            {
                "fromLine": 227,
                "toLine": 227,
                "oldContent": "private boolean hasIncomingCallActionFirst(final List<FigMessage> figMessages) {",
                "newContent": "// This method has been moved to the ActivationList class."
            },
            {
                "fromLine": 238,
                "toLine": 238,
                "oldContent": "private void clearActivations() {",
                "newContent": "// This method has been moved to the ActivationList class."
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 26,
                "toLine": 28,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private FigNodeState nodeState;"
            },
            {
                "fromLine": 36,
                "toLine": 36,
                "oldContent": "setBounds(bounds);",
                "newContent": "// The setBounds call is now part of the FigNodeState constructor."
            },
            {
                "fromLine": 37,
                "toLine": 37,
                "oldContent": "this.settings = settings;",
                "newContent": "// The settings are now passed directly to the FigNodeState constructor."
            },
            {
                "fromLine": 42,
                "toLine": 42,
                "oldContent": "this.displayState = displayState;",
                "newContent": "this.nodeState = new FigNodeState(displayState, getOwner(), bounds, settings);"
            },
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "displayState.setOwner(getOwner());",
                "newContent": "// The owner is now set within the FigNodeState constructor."
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "addFig(displayState);",
                "newContent": "// The displayState fig is now added within the FigNodeState class."
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "return displayState.getMinimumSize();",
                "newContent": "return nodeState.getMinimumSize();"
            },
            {
                "fromLine": 57,
                "toLine": 57,
                "oldContent": "public void setNameDiagramElement(DiagramElement name) {",
                "newContent": "public void setNameDiagramElement(DiagramElement name) {\n        nodeState.setNameDiagramElement(name);"
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "protected void positionChildren() {",
                "newContent": "// This method has been moved to the FigNodeState class."
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "public void calcBounds() {",
                "newContent": "// This method has been moved to the FigNodeState class."
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColor.java": "public class ThemeColor {\n\n    private ColorUIResource primary1, primary2, primary3;\n\n    public ThemeColor(int shade1, int shade2, int shade3) {\n        primary1 = new ColorUIResource(shade1, shade1, shade1 + 51);\n        primary2 = new ColorUIResource(shade2, shade2, shade2 + 51);\n        primary3 = new ColorUIResource(shade3, shade3, shade3 + 51);\n    }\n\n    public ColorUIResource getPrimary1() { return primary1; }\n    public ColorUIResource getPrimary2() { return primary2; }\n    public ColorUIResource getPrimary3() { return primary3; }\n}",
        "src/argouml-app/src/org/argouml/ui/ThemeFont.java": "public class ThemeFont {\n\n    private FontUIResource controlFont, systemFont, windowTitleFont, userFont, smallFont;\n\n    public ThemeFont(String controlAndUserFontFamily, String systemAndSmallFontFamily, int normalSize, int smallSize) {\n        controlFont = new FontUIResource(controlAndUserFontFamily, Font.PLAIN, normalSize);\n        systemFont = new FontUIResource(systemAndSmallFontFamily, Font.PLAIN, normalSize);\n        windowTitleFont = new FontUIResource(controlAndUserFontFamily, Font.BOLD, normalSize);\n        userFont = new FontUIResource(controlAndUserFontFamily, Font.PLAIN, normalSize);\n        smallFont = new FontUIResource(systemAndSmallFontFamily, Font.PLAIN, smallSize);\n    }\n\n    public FontUIResource getControlFont() { return controlFont; }\n    public FontUIResource getSystemFont() { return systemFont; }\n    public FontUIResource getWindowTitleFont() { return windowTitleFont; }\n    public FontUIResource getUserFont() { return userFont; }\n    public FontUIResource getSmallFont() { return smallFont; }\n}",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationList.java": "public class ActivationList {\n\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public ActivationList() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void createActivations(List<FigMessage> messages, FigLifeLine lifeLine) {\n        // Implementation of activation creation logic\n    }\n\n    public void clearActivations(FigLifeLine lifeLine) {\n        // Implementation of activation clearing logic\n    }\n\n    // Other methods related to activations\n}",
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigNodeState.java": "public class FigNodeState {\n\n    private FigBasePresentation displayState;\n    private DiagramSettings settings;\n    private DiagramElement nameDiagramElement;\n\n    public FigNodeState(FigBasePresentation displayState, Object owner, Rectangle bounds, DiagramSettings settings) {\n        this.displayState = displayState;\n        this.settings = settings;\n        displayState.setOwner(owner);\n        displayState.setBounds(bounds);\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n        this.nameDiagramElement = name;\n    }\n\n    // Other methods related to the state of the FigNode\n}"
    }
}"