"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 40,
                "toLine": 52,
                "oldContent": "\npackage org.argouml.sequence2.diagram;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.ui.ArgoFigGroup;\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\n",
                "newContent": "\npackage org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.ui.ArgoFigGroup;\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\n"
            },
            {
                "fromLine": 65,
                "toLine": 75,
                "oldContent": "    private List<FigActivation> stackedActivations;\n    \n    static final int WIDTH = 150;\n    static final int HEIGHT = 500;\n\n    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {\n        super(owner, settings);\n        initialize(bounds.x, bounds.y);\n    }\n    \n    private void initialize(int x, int y) {",
                "newContent": "    private List<FigActivation> stackedActivations;\n    \n    static final int WIDTH = 150;\n    static final int HEIGHT = 500;\n\n    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {\n        super(owner, settings);\n        initialize(bounds.x, bounds.y);\n        setBounds(bounds);\n    }\n    \n    private void initialize(int x, int y) {"
            },
            {
                "fromLine": 124,
                "toLine": 134,
                "oldContent": "        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),",
                "newContent": "        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    new Rectangle(lineFig.getX(),\n                                  lineFig.getY(), \n                                  lineFig.getWidth(), \n                                  lineFig.getHeight()),"
            },
            {
                "fromLine": 151,
                "toLine": 161,
                "oldContent": "                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0,",
                "newContent": "                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    new Rectangle(lineFig.getX(), \n                                                  ySender, \n                                                  0, \n                                                  0),"
            },
            {
                "fromLine": 163,
                "toLine": 173,
                "oldContent": "                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0,",
                "newContent": "                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    new Rectangle(lineFig.getX(),\n                                                  lineFig.getY(),\n                                                  0,\n                                                  0),"
            },
            {
                "fromLine": 274,
                "toLine": 284,
                "oldContent": "            // activation, but don't add it until the height is set.\n            if (figMessage.isSelfMessage()) {\n                if (figMessage.isSynchCallMessage()) {\n                    ySender = figMessage.getFinalY();\n                    currentAct = new FigActivation(figMessage.getOwner(),\n                            new Rectangle(lineFig.getX()\n                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,\n                                    0, 0), getSettings(), figMessage, false);\n                } else if (currentAct != null\n                        && figMessage.isReplyMessage()) {\n                    ySender = figMessage.getStartY();",
                "newContent": "            // activation, but don't add it until the height is set.\n            if (figMessage.isSelfMessage()) {\n                if (figMessage.isSynchCallMessage()) {\n                    ySender = figMessage.getFinalY();\n                    currentAct = createActivationFig(figMessage.getOwner(),\n                            new Rectangle(lineFig.getX()\n                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,\n                                    0, 0), getSettings(), figMessage);\n                } else if (currentAct != null\n                        && figMessage.isReplyMessage()) {\n                    ySender = figMessage.getStartY();"
            },
            {
                "fromLine": 328,
                "toLine": 338,
                "oldContent": "    // TODO: synchronized is required here as there can be some \n    // concurrent modification problems when drawing a call message and\n    // having that automatically draw the reply. Maybe fixing the TODO\n    // below will resolve this and the synch can go.\n    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {\n        final Rectangle oldBounds = getBounds();\n        \n        rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);\n        \n        final int yDiff = oldBounds.y - y;",
                "newContent": "    // TODO: synchronized is required here as there can be some \n    // concurrent modification problems when drawing a call message and\n    // having that automatically draw the reply. Maybe fixing the TODO\n    // below will resolve this and the synch can go.\n    protected synchronized void setBoundsImpl(int x, int y, int w, int h) {\n        final Rectangle oldBounds = new Rectangle(_x, _y, _w, _h);\n        \n        rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);\n        \n        final int yDiff = oldBounds.y - y;"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n    private final ColorUIResource primary1;\n    private final ColorUIResource primary2;\n    private final ColorUIResource primary3;\n\n    public ThemeColors(int color1, int color2, int color3) {\n        this.primary1 = new ColorUIResource(color1, color1, color1 + 51);\n        this.primary2 = new ColorUIResource(color2, color2, color2 + 51);\n        this.primary3 = new ColorUIResource(color3, color3, color3 + 51);\n    }\n\n    public ColorUIResource getPrimary1() { return primary1; }\n    public ColorUIResource getPrimary2() { return primary2; }\n    public ColorUIResource getPrimary3() { return primary3; }\n}\n",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFonts {\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n\n    public ThemeFonts(String controlFontName, String systemFontName, int fontSize, int smallFontSize) {\n        this.controlFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);\n        this.systemFont = new FontUIResource(systemFontName, Font.PLAIN, fontSize);\n        this.windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, fontSize);\n        this.userFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);\n        this.smallFont = new FontUIResource(systemFontName, Font.PLAIN, smallFontSize);\n    }\n\n    public FontUIResource getControlTextFont() { return controlFont; }\n    public FontUIResource getSystemTextFont() { return systemFont; }\n    public FontUIResource getUserTextFont() { return userFont; }\n    public FontUIResource getSmallFont() { return smallFont; }\n    public FontUIResource getWindowTitleFont() { return windowTitleFont; }\n}\n"
    }
}"