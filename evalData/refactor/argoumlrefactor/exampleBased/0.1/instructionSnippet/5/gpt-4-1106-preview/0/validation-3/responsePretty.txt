refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:"		13",
		toLine:"		21",
		oldContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
		newContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		import java.awt.Rectangle;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
,
		fromLine:"		35",
		toLine:"		45",
		oldContent:"
		     * 
		     * @param owner the owning UML element
		     * @param bounds rectangle describing bounds
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds);
		        this.settings = settings;
		    }		
",
		newContent:"
		     * 
		     * @param owner the owning UML element
		     * @param bounds rectangle describing bounds
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
		        this.settings = settings;
		    }		
",
,
		fromLine:"		63",
		toLine:"		83",
		oldContent:"
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(
		            final Rectangle bounds) {
		
		        _x = bounds.x;
		        _y = bounds.y;
		        _w = bounds.width;
		        _h = bounds.height;		
",
		newContent:"
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds.x, myBounds.y, myBounds.width, myBounds.height);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(int x, int y, int w, int h) {
		
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;		
",
,

	],

}
extractedClasses:
{
	src/argouml-app/src/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	    private final ColorUIResource primary1;
	    private final ColorUIResource primary2;
	    private final ColorUIResource primary3;
	
	    public ThemeColors(int color1, int color2, int color3) {
	        this.primary1 = new ColorUIResource(color1, color1, color1 + 51);
	        this.primary2 = new ColorUIResource(color2, color2, color2 + 51);
	        this.primary3 = new ColorUIResource(color3, color3, color3 + 51);
	    }
	
	    public ColorUIResource getPrimary1() { return primary1; }
	    public ColorUIResource getPrimary2() { return primary2; }
	    public ColorUIResource getPrimary3() { return primary3; }
	}
		
",
	src/argouml-app/src/org/argouml/ui/ThemeFonts.java:"
	package org.argouml.ui;
	
	import java.awt.Font;
	import javax.swing.plaf.FontUIResource;
	
	public class ThemeFonts {
	    private final FontUIResource controlFont;
	    private final FontUIResource systemFont;
	    private final FontUIResource windowTitleFont;
	    private final FontUIResource userFont;
	    private final FontUIResource smallFont;
	
	    public ThemeFonts(String controlFontName, String systemFontName, int fontSize, int smallFontSize) {
	        this.controlFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        this.systemFont = new FontUIResource(systemFontName, Font.PLAIN, fontSize);
	        this.windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, fontSize);
	        this.userFont = new FontUIResource(controlFontName, Font.PLAIN, fontSize);
	        this.smallFont = new FontUIResource(systemFontName, Font.PLAIN, smallFontSize);
	    }
	
	    public FontUIResource getControlTextFont() { return controlFont; }
	    public FontUIResource getSystemTextFont() { return systemFont; }
	    public FontUIResource getUserTextFont() { return userFont; }
	    public FontUIResource getSmallFont() { return smallFont; }
	    public FontUIResource getWindowTitleFont() { return windowTitleFont; }
	}
		
",

}
