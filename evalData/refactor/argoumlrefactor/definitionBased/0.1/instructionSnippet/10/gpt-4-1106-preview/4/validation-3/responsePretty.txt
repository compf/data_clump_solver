refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		120",
		toLine:"		140",
		oldContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),
		                    getSettings(),
		                    null);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
		newContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            ActivationParams params = new ActivationParams(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),
		                    getSettings());
		            currentActivation = createActivationFig(params, null);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
,
		fromLine:"		147",
		toLine:"		179",
		oldContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        }
		                    } else {		
",
		newContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            ActivationParams params = new ActivationParams(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,
		                                    getSettings());
		                            currentActivation = createActivationFig(params, figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            ActivationParams params = new ActivationParams(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,
		                                    getSettings());
		                            currentActivation = createActivationFig(params, figMessage);
		                            activationsCount++;
		                        }
		                    } else {		
",
,
		fromLine:"		246",
		toLine:"		268",
		oldContent:"
		     * @return true if the message is outgoing
		     */
		    private boolean isOutgoing(FigMessage messageFig) {
		        return (messageFig.getSourceFigNode().getOwner() == getOwner());
		    }
		    
		    private FigActivation createActivationFig(
		            ActivationParams params,
		            final FigMessage messageFig) {
		            return new FigActivation(
		                params.getOwner(),
		                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),
		                params.getSettings(),
		                messageFig);
		        }
		                
		                private List<FigActivation> createStackedActivations(
		            final List<FigMessage> figMessages) {
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        FigActivation currentAct = null;		
",
		newContent:"
		     * @return true if the message is outgoing
		     */
		    private boolean isOutgoing(FigMessage messageFig) {
		        return (messageFig.getSourceFigNode().getOwner() == getOwner());
		    }
		    
		    private FigActivation createActivationFig(
		            ActivationParams params,
		            final FigMessage messageFig) {
		            return new FigActivation(
		                params.getOwner(),
		                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),
		                params.getDiagramSettings(),
		                messageFig);
		        }
		                
		                private List<FigActivation> createStackedActivations(
		            final List<FigMessage> figMessages) {
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        FigActivation currentAct = null;		
",
,

	],

}
extractedClasses:
{
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationParams.java:"
	package org.argouml.sequence2.diagram;
	
	import org.argouml.uml.diagram.DiagramSettings;
	
	public class ActivationParams {
	
	    private final Object owner;
	    private final int x;
	    private final int y;
	    private final int width;
	    private final int height;
	    private final DiagramSettings diagramSettings;
	
	    public ActivationParams(Object owner, int x, int y, int width, int height, DiagramSettings diagramSettings) {
	        this.owner = owner;
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	        this.diagramSettings = diagramSettings;
	    }
	
	    public Object getOwner() {
	        return owner;
	    }
	
	    public int getX() {
	        return x;
	    }
	
	    public int getY() {
	        return y;
	    }
	
	    public int getWidth() {
	        return width;
	    }
	
	    public int getHeight() {
	        return height;
	    }
	
	    public DiagramSettings getDiagramSettings() {
	        return diagramSettings;
	    }
	}	
",

}
