"
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 31,
                "toLine": 39,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 41,
                "toLine": 49,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 31,
                "toLine": 39,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 41,
                "toLine": 49,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 36,
                "toLine": 38,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private FigLineRect lineRect;"
            },
            {
                "fromLine": 52,
                "toLine": 54,
                "oldContent": "rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);",
                "newContent": "lineRect = new FigLineRect(x, y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);"
            },
            {
                "fromLine": 55,
                "toLine": 58,
                "oldContent": "lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);",
                "newContent": "lineRect.setDashed(true);"
            },
            {
                "fromLine": 60,
                "toLine": 61,
                "oldContent": "addFig(rectFig);\n        addFig(lineFig);",
                "newContent": "addFig(lineRect);"
            },
            {
                "fromLine": 168,
                "toLine": 168,
                "oldContent": "removeFig(act);",
                "newContent": "// removeFig(act);"
            },
            {
                "fromLine": 171,
                "toLine": 171,
                "oldContent": "addFig(act);",
                "newContent": "// addFig(act);"
            },
            {
                "fromLine": 175,
                "toLine": 175,
                "oldContent": "lineFig.setLineWidth(w);",
                "newContent": "lineRect.setLineWidth(w);"
            },
            {
                "fromLine": 186,
                "toLine": 188,
                "oldContent": "rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);",
                "newContent": "lineRect.setBounds(x, y, w, h);"
            },
            {
                "fromLine": 196,
                "toLine": 196,
                "oldContent": "lineFig.setHeight(ySender - getY());",
                "newContent": "lineRect.setLineHeight(ySender - getY());"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 25,
                "toLine": 27,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private NodePresentationElement presentationElement;"
            },
            {
                "fromLine": 33,
                "toLine": 35,
                "oldContent": "setBounds(bounds);\n        this.settings = settings;",
                "newContent": "this.presentationElement = new NodePresentationElement(bounds, settings);"
            },
            {
                "fromLine": 37,
                "toLine": 39,
                "oldContent": "this.displayState = displayState;\n        displayState.setOwner(getOwner());\n        addFig(displayState);",
                "newContent": "this.presentationElement.setDisplayState(displayState, getOwner());"
            },
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "return displayState.getMinimumSize();",
                "newContent": "return presentationElement.getMinimumSize();"
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "this.nameDiagramElement = name;",
                "newContent": "presentationElement.setNameDiagramElement(name);"
            },
            {
                "fromLine": 50,
                "toLine": 52,
                "oldContent": "Rectangle myBounds = getBounds();\n        if (displayState != null) {\n            displayState.setBounds(myBounds);",
                "newContent": "presentationElement.setBounds(getBounds());"
            },
            {
                "fromLine": 61,
                "toLine": 64,
                "oldContent": "positionChildren();",
                "newContent": "presentationElement.positionChildren();"
            },
            {
                "fromLine": 71,
                "toLine": 74,
                "oldContent": "final Dimension min = getMinimumSize();\n            int maxw = Math.max(getWidth(), min.width);\n            int maxh = Math.max(getHeight(), min.height);\n            setBounds(_x, _y, maxw, maxh);",
                "newContent": "presentationElement.updateBounds(_x, _y, getWidth(), getHeight());"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n\n    private final ColorUIResource color1;\n    private final ColorUIResource color2;\n    private final ColorUIResource color3;\n\n    public ThemeColors(int shade1, int shade2, int shade3) {\n        color1 = new ColorUIResource(shade1, shade1, shade1 + 51);\n        color2 = new ColorUIResource(shade2, shade2, shade2 + 51);\n        color3 = new ColorUIResource(shade3, shade3, shade3 + 51);\n    }\n\n    public ColorUIResource getColor1() {\n        return color1;\n    }\n\n    public ColorUIResource getColor2() {\n        return color2;\n    }\n\n    public ColorUIResource getColor3() {\n        return color3;\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLineRect.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class FigLineRect {\n\n    private FigRect rectFig;\n    private FigLine lineFig;\n\n    public FigLineRect(int x, int y, int width, int height, Color lineColor, int lineWidth) {\n        rectFig = new FigRect(x, y, width, height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);\n        lineFig.setLineWidth(lineWidth);\n    }\n\n    public void setDashed(boolean dashed) {\n        lineFig.setDashed(dashed);\n    }\n\n    public void setLineWidth(int w) {\n        lineFig.setLineWidth(w);\n    }\n\n    public void setBounds(int x, int y, int w, int h) {\n        rectFig.setBounds(x, y, w, h);\n        lineFig.setBounds(x + w / 2, y, w, h);\n    }\n\n    public void setLineHeight(int height) {\n        lineFig.setHeight(height);\n    }\n}\n",
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentationElement.java": "package org.argouml.activity2.diagram;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class NodePresentationElement {\n\n    private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;\n    private Rectangle bounds;\n\n    public NodePresentationElement(Rectangle bounds, DiagramSettings settings) {\n        this.bounds = bounds;\n        this.settings = settings;\n    }\n\n    public void setDisplayState(FigBasePresentation displayState, Object owner) {\n        this.displayState = displayState;\n        displayState.setOwner(owner);\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n        this.nameDiagramElement = name;\n    }\n\n    public void setBounds(Rectangle bounds) {\n        this.bounds = bounds;\n        if (displayState != null) {\n            displayState.setBounds(bounds);\n        }\n    }\n\n    public void positionChildren() {\n        // TODO: Implement child positioning logic\n    }\n\n    public void updateBounds(int x, int y, int width, int height) {\n        final Dimension min = getMinimumSize();\n        int maxw = Math.max(width, min.width);\n        int maxh = Math.max(height, min.height);\n        // TODO: Implement bounds update logic\n    }\n}\n"
    }
}"