refactorings:
{
	src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java:
	[
		fromLine:"		31",
		toLine:"		39",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);		
",
,
		fromLine:"		41",
		toLine:"		49",
		oldContent:"
		private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);		
",
,

	],
	src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java:
	[
		fromLine:"		31",
		toLine:"		39",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);		
",
,
		fromLine:"		41",
		toLine:"		49",
		oldContent:"
		private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);		
",
,

	],
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		36",
		toLine:"		38",
		oldContent:"
		private FigLine lineFig;
		    private FigRect rectFig;		
",
		newContent:"
		private FigLineRect lineRect;		
",
,
		fromLine:"		52",
		toLine:"		54",
		oldContent:"
		rectFig = new FigRect(x, y, WIDTH, HEIGHT); 
		        rectFig.setFilled(false);
		        rectFig.setLineWidth(0);		
",
		newContent:"
		lineRect = new FigLineRect(x, y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);		
",
,
		fromLine:"		55",
		toLine:"		58",
		oldContent:"
		lineFig = new FigLine(x + WIDTH / 2, y, 
		                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);
		        lineFig.setDashed(true);
		        lineFig.setLineWidth(LINE_WIDTH);		
",
		newContent:"
		lineRect.setDashed(true);		
",
,
		fromLine:"		60",
		toLine:"		61",
		oldContent:"
		addFig(rectFig);
		        addFig(lineFig);		
",
		newContent:"
		addFig(lineRect);		
",
,
		fromLine:"		168",
		toLine:"		168",
		oldContent:"
		removeFig(act);		
",
		newContent:"
		// removeFig(act);		
",
,
		fromLine:"		171",
		toLine:"		171",
		oldContent:"
		addFig(act);		
",
		newContent:"
		// addFig(act);		
",
,
		fromLine:"		175",
		toLine:"		175",
		oldContent:"
		lineFig.setLineWidth(w);		
",
		newContent:"
		lineRect.setLineWidth(w);		
",
,
		fromLine:"		186",
		toLine:"		188",
		oldContent:"
		rectFig.setBounds(x, y, w, h);
		        lineFig.setBounds(x + w / 2, y, w, h);		
",
		newContent:"
		lineRect.setBounds(x, y, w, h);		
",
,
		fromLine:"		196",
		toLine:"		196",
		oldContent:"
		lineFig.setHeight(ySender - getY());		
",
		newContent:"
		lineRect.setLineHeight(ySender - getY());		
",
,

	],
	src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:"		25",
		toLine:"		27",
		oldContent:"
		private FigBasePresentation displayState;
		    private final DiagramSettings settings;
		    private DiagramElement nameDiagramElement;		
",
		newContent:"
		private NodePresentationElement presentationElement;		
",
,
		fromLine:"		33",
		toLine:"		35",
		oldContent:"
		setBounds(bounds);
		        this.settings = settings;		
",
		newContent:"
		this.presentationElement = new NodePresentationElement(bounds, settings);		
",
,
		fromLine:"		37",
		toLine:"		39",
		oldContent:"
		this.displayState = displayState;
		        displayState.setOwner(getOwner());
		        addFig(displayState);		
",
		newContent:"
		this.presentationElement.setDisplayState(displayState, getOwner());		
",
,
		fromLine:"		43",
		toLine:"		43",
		oldContent:"
		return displayState.getMinimumSize();		
",
		newContent:"
		return presentationElement.getMinimumSize();		
",
,
		fromLine:"		47",
		toLine:"		47",
		oldContent:"
		this.nameDiagramElement = name;		
",
		newContent:"
		presentationElement.setNameDiagramElement(name);		
",
,
		fromLine:"		50",
		toLine:"		52",
		oldContent:"
		Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);		
",
		newContent:"
		presentationElement.setBounds(getBounds());		
",
,
		fromLine:"		61",
		toLine:"		64",
		oldContent:"
		positionChildren();		
",
		newContent:"
		presentationElement.positionChildren();		
",
,
		fromLine:"		71",
		toLine:"		74",
		oldContent:"
		final Dimension min = getMinimumSize();
		            int maxw = Math.max(getWidth(), min.width);
		            int maxh = Math.max(getHeight(), min.height);
		            setBounds(_x, _y, maxw, maxh);		
",
		newContent:"
		presentationElement.updateBounds(_x, _y, getWidth(), getHeight());		
",
,

	],

}
extractedClasses:
{
	src/argouml-app/src/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	
	    private final ColorUIResource color1;
	    private final ColorUIResource color2;
	    private final ColorUIResource color3;
	
	    public ThemeColors(int shade1, int shade2, int shade3) {
	        color1 = new ColorUIResource(shade1, shade1, shade1 + 51);
	        color2 = new ColorUIResource(shade2, shade2, shade2 + 51);
	        color3 = new ColorUIResource(shade3, shade3, shade3 + 51);
	    }
	
	    public ColorUIResource getColor1() {
	        return color1;
	    }
	
	    public ColorUIResource getColor2() {
	        return color2;
	    }
	
	    public ColorUIResource getColor3() {
	        return color3;
	    }
	}
		
",
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLineRect.java:"
	package org.argouml.sequence2.diagram;
	
	import org.tigris.gef.presentation.FigLine;
	import org.tigris.gef.presentation.FigRect;
	
	public class FigLineRect {
	
	    private FigRect rectFig;
	    private FigLine lineFig;
	
	    public FigLineRect(int x, int y, int width, int height, Color lineColor, int lineWidth) {
	        rectFig = new FigRect(x, y, width, height);
	        rectFig.setFilled(false);
	        rectFig.setLineWidth(0);
	        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);
	        lineFig.setLineWidth(lineWidth);
	    }
	
	    public void setDashed(boolean dashed) {
	        lineFig.setDashed(dashed);
	    }
	
	    public void setLineWidth(int w) {
	        lineFig.setLineWidth(w);
	    }
	
	    public void setBounds(int x, int y, int w, int h) {
	        rectFig.setBounds(x, y, w, h);
	        lineFig.setBounds(x + w / 2, y, w, h);
	    }
	
	    public void setLineHeight(int height) {
	        lineFig.setHeight(height);
	    }
	}
		
",
	src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentationElement.java:"
	package org.argouml.activity2.diagram;
	
	import java.awt.Dimension;
	import java.awt.Rectangle;
	import org.argouml.uml.diagram.DiagramSettings;
	
	public class NodePresentationElement {
	
	    private FigBasePresentation displayState;
	    private final DiagramSettings settings;
	    private DiagramElement nameDiagramElement;
	    private Rectangle bounds;
	
	    public NodePresentationElement(Rectangle bounds, DiagramSettings settings) {
	        this.bounds = bounds;
	        this.settings = settings;
	    }
	
	    public void setDisplayState(FigBasePresentation displayState, Object owner) {
	        this.displayState = displayState;
	        displayState.setOwner(owner);
	    }
	
	    public Dimension getMinimumSize() {
	        return displayState.getMinimumSize();
	    }
	
	    public void setNameDiagramElement(DiagramElement name) {
	        this.nameDiagramElement = name;
	    }
	
	    public void setBounds(Rectangle bounds) {
	        this.bounds = bounds;
	        if (displayState != null) {
	            displayState.setBounds(bounds);
	        }
	    }
	
	    public void positionChildren() {
	        // TODO: Implement child positioning logic
	    }
	
	    public void updateBounds(int x, int y, int width, int height) {
	        final Dimension min = getMinimumSize();
	        int maxw = Math.max(width, min.width);
	        int maxh = Math.max(height, min.height);
	        // TODO: Implement bounds update logic
	    }
	}
		
",

}
