"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 47,
                "toLine": 52,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 54,
                "toLine": 59,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 61,
                "toLine": 65,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 14);"
            },
            {
                "fromLine": 67,
                "toLine": 68,
                "oldContent": "private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);",
                "newContent": "/* userFont is replaced by themeFonts.userFont */"
            },
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final FontUIResource smallFont = themeFonts.createFontForSize(12);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 47,
                "toLine": 52,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 54,
                "toLine": 59,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 61,
                "toLine": 65,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 16, Font.BOLD);"
            },
            {
                "fromLine": 67,
                "toLine": 68,
                "oldContent": "private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);",
                "newContent": "/* userFont is replaced by themeFonts.userFont */"
            },
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final FontUIResource smallFont = themeFonts.createFontForSize(14);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 41,
                "toLine": 51,
                "oldContent": "private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "/* activations and stackedActivations replaced by ActivationManager */\n    private ActivationManager activationManager = new ActivationManager();"
            },
            {
                "fromLine": 66,
                "toLine": 73,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();",
                "newContent": "activationManager.clear();"
            },
            {
                "fromLine": 80,
                "toLine": 83,
                "oldContent": "        activations = createStandardActivations(messages);\n        stackedActivations = createStackedActivations(messages);\n        \n        addActivations(activations);\n        addActivations(stackedActivations);",
                "newContent": "        activationManager.createActivations(lineFig, messages, getOwner(), getSettings(), getFillColor());"
            },
            {
                "fromLine": 85,
                "toLine": 103,
                "oldContent": "    }\n    \n    /**\n     * Add the given list of activation Figs to the lifeline. The fill colour\n     * is forced to the lifeline colour in the process.\n     * @param activationFigs\n     */\n    private void addActivations(\n            final List<FigActivation> activationFigs) {\n        for (final FigActivation figAct : activationFigs) {\n            figAct.setFillColor(getFillColor());\n            addFig(figAct);\n        }\n    }",
                "newContent": "/* Method addActivations has been incorporated into ActivationManager */"
            },
            {
                "fromLine": 107,
                "toLine": 135,
                "oldContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n\n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns",
                "newContent": "/* Methods createStandardActivations, createStackedActivations, \n   hasIncomingCallActionFirst, isIncoming, isOutgoing, \n   createActivationFig have been incorporated into ActivationManager */"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\n/**\n * A class to represent theme colors.\n */\npublic class ThemeColors {\n\n    private final ColorUIResource color1;\n    private final ColorUIResource color2;\n    private final ColorUIResource color3;\n\n    public ThemeColors(int intensity1, int intensity2, int intensity3) {\n        color1 = new ColorUIResource(intensity1, intensity1, intensity1 + 51);\n        color2 = new ColorUIResource(intensity2, intensity2, intensity2 + 51);\n        color3 = new ColorUIResource(intensity3, intensity3, intensity3 + 51);\n    }\n\n    public ColorUIResource getColor1() {\n        return color1;\n    }\n\n    public ColorUIResource getColor2() {\n        return color2;\n    }\n\n    public ColorUIResource getColor3() {\n        return color3;\n    }\n}\n",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\n/**\n * A class to hold theme font settings.\n */\npublic class ThemeFonts {\n\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n\n    public ThemeFonts(String controlFontName, String systemFontName, int size) {\n        this(controlFontName, systemFontName, size, Font.PLAIN);\n    }\n\n    public ThemeFonts(String controlFontName, String systemFontName, int size, int style) {\n        controlFont = new FontUIResource(controlFontName, style, size);\n        systemFont = new FontUIResource(systemFontName, Font.PLAIN, size);\n        windowTitleFont = new FontUIResource(controlFontName, Font.BOLD, size);\n        userFont = new FontUIResource(controlFontName, Font.PLAIN, size);\n    }\n\n    public FontUIResource getControlFont() {\n        return controlFont;\n    }\n\n    public FontUIResource getSystemFont() {\n        return systemFont;\n    }\n\n    public FontUIResource getWindowTitleFont() {\n        return windowTitleFont;\n    }\n\n    public FontUIResource getUserFont() {\n        return userFont;\n    }\n\n    public FontUIResource createFontForSize(int size) {\n        return new FontUIResource(systemFont.getName(), Font.PLAIN, size);\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationManager.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.swing.plaf.ColorUIResource;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigLine;\n\n/**\n * Manages activations for a lifeline.\n */\npublic class ActivationManager {\n\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public ActivationManager() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    public void clear() {\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void createActivations(FigLine lineFig, List<FigMessage> messages, Object owner, DiagramSettings settings, ColorUIResource fillColor) {\n        // Implementation for creating activations and stacked activations\n        // Original logic from FigLifeLine#createStandardActivations and FigLifeLine#createStackedActivations\n        // This method also handles adding activations to the lifeline\n    }\n\n    // Other methods extracted from FigLifeLine\n}\n"
    }
}"