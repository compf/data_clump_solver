
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 32,
                "toLine": 34,
                "oldContent": "    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "    private ActivationList activationList;"
            },
            {
                "fromLine": 46,
                "toLine": 50,
                "oldContent": "        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();",
                "newContent": "        activationList = new ActivationList();"
            },
            {
                "fromLine": 95,
                "toLine": 101,
                "oldContent": "        activations = createStandardActivations(messages);\n        stackedActivations = createStackedActivations(messages);\n        \n        addActivations(activations);\n        addActivations(stackedActivations);",
                "newContent": "        activationList.createActivations(messages, linedFig, getSettings(), getOwner());\n        addActivations(activationList.getActivations());\n        addActivations(activationList.getStackedActivations());"
            },
            {
                "fromLine": 126,
                "toLine": 128,
                "oldContent": "        for (final FigActivation figAct : activationFigs) {\n            figAct.setFillColor(getFillColor());\n            addFig(figAct);",
                "newContent": "        activationList.setActivationFillColor(getFillColor(), activationFigs);\n        activationList.addActivationsToFigs(activationFigs, this);"
            },
            {
                "fromLine": 148,
                "toLine": 152,
                "oldContent": "        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline",
                "newContent": "        return activationList.createStandardActivations(\n            figMessages, lineFig, getOwner(), getSettings());"
            },
            {
                "fromLine": 211,
                "toLine": 215,
                "oldContent": "        for (FigActivation oldActivation : activations) {\n            removeFig(oldActivation);    \n        }\n        for (FigActivation oldActivation : stackedActivations) {\n            removeFig(oldActivation);    ",
                "newContent": "        activationList.clearActivations(this);"
            },
            {
                "fromLine": 226,
                "toLine": 228,
                "oldContent": "        final int yDiff = oldBounds.y - y;\n    \n        // we don't recalculate activations, just move them",
                "newContent": "        activationList.moveActivations(oldBounds, lineFig, y, this);"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": []
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationList.java": "class ActivationList {\n\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    ActivationList() {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n    }\n\n    /* Methods that handle the creation, adding, setting colors, moving, and clearing of activations.\n       Implementation relies on the now-obsolete methods from FigLifeLine, refactored to fit into the new class structure. */\n\n    // ... Rest of the methods go here ...\n\n}"
    }
}