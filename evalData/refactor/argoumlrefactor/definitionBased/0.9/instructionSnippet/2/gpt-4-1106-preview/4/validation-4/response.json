{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 13,
                "toLine": 19,
                "oldContent": "\npackage org.argouml.activity2.diagram;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigGroup;\nimport org.tigris.gef.presentation.FigNode;\n",
                "newContent": "\npackage org.argouml.activity2.diagram;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigGroup;\nimport org.tigris.gef.presentation.FigNode;\n"
            },
            {
                "fromLine": 36,
                "toLine": 40,
                "oldContent": "     * @param settings rendering settings\n     */\n    FigBaseNode(final Object owner, final Rectangle bounds,\n            final DiagramSettings settings) {\n        super(owner);",
                "newContent": "     * @param settings rendering settings\n     */\n    FigBaseNode(final Object owner, final Rectangle bounds,\n            final DiagramSettings settings) {\n        super(owner, bounds, settings);\n"
            },
            {
                "fromLine": 55,
                "toLine": 59,
                "oldContent": "    \n    @Override\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }",
                "newContent": "    \n    @Override\n    public Dimension getMinimumSize() {\n        // Ensure displayState is not null before accessing its method\n        if (displayState != null) { return displayState.getMinimumSize(); }\n        return new Dimension(0, 0);\n    }"
            },
            {
                "fromLine": 64,
                "toLine": 68,
                "oldContent": "    // TODO: Move an empty implementation to FigGroup in GEF\n    protected void positionChildren() {\n        Rectangle myBounds = getBounds();\n        if (displayState != null) {\n            displayState.setBounds(myBounds);",
                "newContent": "    // TODO: Move an empty implementation to FigGroup in GEF\n    protected void positionChildren() {\n        Rectangle myBounds = getBounds();\n        // Ensure displayState is not null before setting bounds\n        if (displayState != null) {\n            displayState.setBounds(myBounds);\n        }"
            },
            {
                "fromLine": 96,
                "toLine": 100,
                "oldContent": "            ((FigGroup) getGroup()).calcBounds();\n        } else {\n            final Dimension min = getMinimumSize();\n            int maxw = Math.max(getWidth(), min.width);\n            int maxh = Math.max(getHeight(), min.height);",
                "newContent": "            ((FigGroup) getGroup()).calcBounds();\n        } else {\n            final Dimension min = getMinimumSize();\n            int maxw = Math.max(getWidth(), min.width);\n            int maxh = Math.max(getHeight(), min.height);\n            setBounds(_x, _y, maxw, maxh);\n        }\n        damage();"
            }
        ]
    }
}