"
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 39,
                "toLine": 51,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 53,
                "toLine": 65,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 39,
                "toLine": 51,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 53,
                "toLine": 65,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 66,
                "toLine": 68,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;",
                "newContent": "private LifeLineFigures lifeLineFigures;"
            },
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "    FigLifeLine(Object owner, Rectangle bounds, DiagramSettings settings) {",
                "newContent": "    FigLifeLine(Object owner, LifeLineDimensions dimensions, DiagramSettings settings) {"
            },
            {
                "fromLine": 74,
                "toLine": 76,
                "oldContent": "        initialize(bounds.x, bounds.y);\n    }\n    ",
                "newContent": "        lifeLineFigures = new LifeLineFigures(bounds.x, bounds.y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);\n        addFig(lifeLineFigures.getRectFig());\n        addFig(lifeLineFigures.getLineFig());\n    }"
            },
            {
                "fromLine": 78,
                "toLine": 91,
                "oldContent": "    private void initialize(int x, int y) {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);\n        addFig(lineFig);\n    }",
                "newContent": ""
            },
            {
                "fromLine": 101,
                "toLine": 101,
                "oldContent": "                    lineFig.getX(),",
                "newContent": "                    lifeLineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 102,
                "toLine": 102,
                "oldContent": "                    lineFig.getY(), ",
                "newContent": "                    lifeLineFigures.getLineFig().getY(), "
            },
            {
                "fromLine": 104,
                "toLine": 104,
                "oldContent": "                    lineFig.getWidth(), ",
                "newContent": "                    lifeLineFigures.getLineFig().getWidth(), "
            },
            {
                "fromLine": 105,
                "toLine": 105,
                "oldContent": "                    lineFig.getHeight(),",
                "newContent": "                    lifeLineFigures.getLineFig().getHeight(),"
            },
            {
                "fromLine": 120,
                "toLine": 120,
                "oldContent": "                    lineFig.getX(),",
                "newContent": "                    lifeLineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 121,
                "toLine": 121,
                "oldContent": "                    lineFig.getY(),",
                "newContent": "                    lifeLineFigures.getLineFig().getY(),"
            },
            {
                "fromLine": 123,
                "toLine": 123,
                "oldContent": "                    lineFig.getWidth(),",
                "newContent": "                    lifeLineFigures.getLineFig().getWidth(),"
            },
            {
                "fromLine": 124,
                "toLine": 124,
                "oldContent": "                    lineFig.getHeight(),",
                "newContent": "                    lifeLineFigures.getLineFig().getHeight(),"
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "                            new Rectangle(lineFig.getX()",
                "newContent": "                            new Rectangle(lifeLineFigures.getLineFig().getX()"
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 134,
                "toLine": 134,
                "oldContent": "                            getSettings(), figMessage, false);",
                "newContent": "                            getSettings(), figMessage, false);"
            },
            {
                "fromLine": 174,
                "toLine": 174,
                "oldContent": "                            lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2,",
                "newContent": "                            lifeLineFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2,"
            },
            {
                "fromLine": 179,
                "toLine": 179,
                "oldContent": "                            lineFig.getHeight() - (currentActivation.getY() - getY()));",
                "newContent": "                            lifeLineFigures.getLineFig().getHeight() - (currentActivation.getY() - getY()));"
            },
            {
                "fromLine": 182,
                "toLine": 182,
                "oldContent": "                            lineFig.setHeight(ySender - getY());",
                "newContent": "                            lifeLineFigures.getLineFig().setHeight(ySender - getY());"
            },
            {
                "fromLine": 227,
                "toLine": 227,
                "oldContent": "        lineFig.setLineWidth(w);",
                "newContent": "        lifeLineFigures.getLineFig().setLineWidth(w);"
            },
            {
                "fromLine": 230,
                "toLine": 230,
                "oldContent": "        rectFig.setBounds(x, y, w, h);",
                "newContent": "        lifeLineFigures.getRectFig().setBounds(x, y, w, h);"
            },
            {
                "fromLine": 231,
                "toLine": 231,
                "oldContent": "        lineFig.setBounds(x + w / 2, y, w, h);",
                "newContent": "        lifeLineFigures.getLineFig().setBounds(x + w / 2, y, w, h);"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 31,
                "toLine": 33,
                "oldContent": "    private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "    private FigBaseNodeComponents nodeComponents;"
            },
            {
                "fromLine": 38,
                "toLine": 40,
                "oldContent": "        setBounds(bounds);\n        this.settings = settings;\n    }",
                "newContent": "        nodeComponents = new FigBaseNodeComponents(bounds, settings);\n    }"
            },
            {
                "fromLine": 42,
                "toLine": 44,
                "oldContent": "    void setDisplayState(FigBasePresentation displayState) {\n        this.displayState = displayState;\n        displayState.setOwner(getOwner());",
                "newContent": "    void setDisplayState(FigBasePresentation displayState) {\n        nodeComponents.setDisplayState(displayState, getOwner());"
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "        addFig(displayState);",
                "newContent": "        addFig(nodeComponents.getDisplayState());"
            },
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "        return displayState.getMinimumSize();",
                "newContent": "        return nodeComponents.getDisplayState().getMinimumSize();"
            },
            {
                "fromLine": 57,
                "toLine": 57,
                "oldContent": "    public void setNameDiagramElement(DiagramElement name) {",
                "newContent": "    public void setNameDiagramElement(DiagramElement nameDiagramElement) {"
            },
            {
                "fromLine": 58,
                "toLine": 58,
                "oldContent": "    }",
                "newContent": "        nodeComponents.setNameDiagramElement(nameDiagramElement);\n    }"
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "        if (displayState != null) {",
                "newContent": "        if (nodeComponents.getDisplayState() != null) {"
            },
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "            displayState.setBounds(myBounds);",
                "newContent": "            nodeComponents.getDisplayState().setBounds(myBounds);"
            },
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "            final Dimension min = getMinimumSize();",
                "newContent": "            final Dimension min = nodeComponents.getMinimumSize();"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-ui/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n    private final ColorUIResource color1;\n    private final ColorUIResource color2;\n    private final ColorUIResource color3;\n\n    public ThemeColors(int shade1, int shade2, int shade3) {\n        color1 = new ColorUIResource(shade1, shade1, shade1 + 51);\n        color2 = new ColorUIResource(shade2, shade2, shade2 + 51);\n        color3 = new ColorUIResource(shade3, shade3, shade3 + 51);\n    }\n\n    public ColorUIResource getColor1() {\n        return color1;\n    }\n\n    public ColorUIResource getColor2() {\n        return color2;\n    }\n\n    public ColorUIResource getColor3() {\n        return color3;\n    }\n}",
        "src/argouml-sequence2/org/argouml/sequence2/diagram/LifeLineFigures.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\nimport java.awt.Color;\n\npublic class LifeLineFigures {\n    private FigLine lineFig;\n    private FigRect rectFig;\n\n    public LifeLineFigures(int x, int y, int width, int height, Color lineColor, int lineWidth) {\n        rectFig = new FigRect(x, y, width, height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(lineWidth);\n    }\n\n    public FigLine getLineFig() {\n        return lineFig;\n    }\n\n    public FigRect getRectFig() {\n        return rectFig;\n    }\n}",
        "src/argouml-activity2/org/argouml/activity2/diagram/FigBaseNodeComponents.java": "package org.argouml.activity2.diagram;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class FigBaseNodeComponents {\n    private FigBasePresentation displayState;\n    private DiagramElement nameDiagramElement;\n\n    public FigBaseNodeComponents(Rectangle bounds, DiagramSettings settings) {\n        // Initialize components\n    }\n\n    public void setDisplayState(FigBasePresentation displayState, Object owner) {\n        this.displayState = displayState;\n        this.displayState.setOwner(owner);\n    }\n\n    public FigBasePresentation getDisplayState() {\n        return displayState;\n    }\n\n    public void setNameDiagramElement(DiagramElement nameDiagramElement) {\n        this.nameDiagramElement = nameDiagramElement;\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n}"
    }
}
"