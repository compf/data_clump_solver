"{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);",
                "newContent": "    private ThemeColors primaryColors;"
            },
            {
                "fromLine": 71,
                "toLine": 71,
                "oldContent": "    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);",
                "newContent": ""
            },
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": ""
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "    private final ColorUIResource secondary1 =\r",
                "newContent": "    private ThemeColors secondaryColors;"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "    \tnew ColorUIResource(102, 102, 102);",
                "newContent": ""
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "    private final ColorUIResource secondary2 =\r",
                "newContent": ""
            },
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "    \tnew ColorUIResource(153, 153, 153);",
                "newContent": ""
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "    private final ColorUIResource secondary3 =",
                "newContent": ""
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "    \tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "    private final FontUIResource controlFont =",
                "newContent": "    private ThemeFonts fonts;"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);",
                "newContent": ""
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "    private final FontUIResource systemFont =",
                "newContent": ""
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "    \tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": ""
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "    private final FontUIResource windowTitleFont =",
                "newContent": ""
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);",
                "newContent": ""
            },
            {
                "fromLine": 87,
                "toLine": 87,
                "oldContent": "    private final FontUIResource userFont =",
                "newContent": ""
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);",
                "newContent": ""
            },
            {
                "fromLine": 89,
                "toLine": 89,
                "oldContent": "    private final FontUIResource smallFont =",
                "newContent": ""
            },
            {
                "fromLine": 90,
                "toLine": 90,
                "oldContent": "    \tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": ""
            },
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "    public String getName() { return \"Large Fonts\"; }",
                "newContent": "    public String getName() { return \"Large Fonts\"; }\r\n\r\n    public JasonsBigTheme() {\r\n        primaryColors = new ThemeColors(102, 153, 204);\r\n        secondaryColors = new ThemeColors(102, 153, 204);\r\n        fonts = new ThemeFonts(\"SansSerif\", \"Dialog\");\r\n    }"
            },
            {
                "fromLine": 104,
                "toLine": 104,
                "oldContent": "    protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "    protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "    protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "    protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 112,
                "toLine": 112,
                "oldContent": "    protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "    protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "    protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "    protected ColorUIResource getSecondary1() { return secondaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 121,
                "toLine": 121,
                "oldContent": "    protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "    protected ColorUIResource getSecondary2() { return secondaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 125,
                "toLine": 125,
                "oldContent": "    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "    protected ColorUIResource getSecondary3() { return secondaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 129,
                "toLine": 129,
                "oldContent": "    public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getControlTextFont() { return fonts.getControlFont(); }"
            },
            {
                "fromLine": 133,
                "toLine": 133,
                "oldContent": "    public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "    public FontUIResource getSystemTextFont() { return fonts.getSystemFont(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "    public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "    public FontUIResource getUserTextFont() { return fonts.getUserFont(); }"
            },
            {
                "fromLine": 141,
                "toLine": 141,
                "oldContent": "    public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getMenuTextFont() { return fonts.getControlFont(); }"
            },
            {
                "fromLine": 145,
                "toLine": 145,
                "oldContent": "    public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "    public FontUIResource getSubTextFont() { return fonts.getSmallFont(); }"
            },
            {
                "fromLine": 149,
                "toLine": 149,
                "oldContent": "    public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "    public FontUIResource getWindowTitleFont() { return fonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);",
                "newContent": "    private ThemeColors primaryColors;"
            },
            {
                "fromLine": 71,
                "toLine": 71,
                "oldContent": "    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);",
                "newContent": ""
            },
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": ""
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "    private final ColorUIResource secondary1 =",
                "newContent": "    private ThemeColors secondaryColors;"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "    \tnew ColorUIResource(102, 102, 102);",
                "newContent": ""
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "    private final ColorUIResource secondary2 =",
                "newContent": ""
            },
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "    \tnew ColorUIResource(153, 153, 153);",
                "newContent": ""
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "    private final ColorUIResource secondary3 =",
                "newContent": ""
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "    \tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "    private final FontUIResource controlFont =",
                "newContent": "    private ThemeFonts fonts;"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);",
                "newContent": ""
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "    private final FontUIResource systemFont =",
                "newContent": ""
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "    \tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);",
                "newContent": ""
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "    private final FontUIResource windowTitleFont =",
                "newContent": ""
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);",
                "newContent": ""
            },
            {
                "fromLine": 87,
                "toLine": 87,
                "oldContent": "    private final FontUIResource userFont =",
                "newContent": ""
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "    \tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);",
                "newContent": ""
            },
            {
                "fromLine": 89,
                "toLine": 89,
                "oldContent": "    private final FontUIResource smallFont =",
                "newContent": ""
            },
            {
                "fromLine": 90,
                "toLine": 90,
                "oldContent": "    \tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": ""
            },
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "    public String getName() { return \"Very Large Fonts\"; }",
                "newContent": "    public String getName() { return \"Very Large Fonts\"; }\r\n\r\n    public JasonsHugeTheme() {\r\n        primaryColors = new ThemeColors(102, 153, 204);\r\n        secondaryColors = new ThemeColors(102, 153, 204);\r\n        fonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 16, 14, true);\r\n    }"
            },
            {
                "fromLine": 104,
                "toLine": 104,
                "oldContent": "    protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "    protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "    protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "    protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 112,
                "toLine": 112,
                "oldContent": "    protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "    protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "    protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "    protected ColorUIResource getSecondary1() { return secondaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 121,
                "toLine": 121,
                "oldContent": "    protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "    protected ColorUIResource getSecondary2() { return secondaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 125,
                "toLine": 125,
                "oldContent": "    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "    protected ColorUIResource getSecondary3() { return secondaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 129,
                "toLine": 129,
                "oldContent": "    public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getControlTextFont() { return fonts.getControlFont(); }"
            },
            {
                "fromLine": 133,
                "toLine": 133,
                "oldContent": "    public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "    public FontUIResource getSystemTextFont() { return fonts.getSystemFont(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "    public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "    public FontUIResource getUserTextFont() { return fonts.getUserFont(); }"
            },
            {
                "fromLine": 141,
                "toLine": 141,
                "oldContent": "    public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getMenuTextFont() { return fonts.getControlFont(); }"
            },
            {
                "fromLine": 145,
                "toLine": 145,
                "oldContent": "    public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "    public FontUIResource getSubTextFont() { return fonts.getSmallFont(); }"
            },
            {
                "fromLine": 149,
                "toLine": 149,
                "oldContent": "    public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "    public FontUIResource getWindowTitleFont() { return fonts.getWindowTitleFont(); }"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\r\n\r\nimport javax.swing.plaf.ColorUIResource;\r\n\r\n/**\r\n * ThemeColors groups color definitions for UI themes.\r\n */\r\npublic class ThemeColors {\r\n\r\n    private final ColorUIResource primary1;\r\n    private final ColorUIResource primary2;\r\n    private final ColorUIResource primary3;\r\n\r\n    public ThemeColors(int shade, int tint, int tone) {\r\n        primary1 = new ColorUIResource(shade, shade, tint);\r\n        primary2 = new ColorUIResource(tint, tint, tone);\r\n        primary3 = new ColorUIResource(tone, tone, 255);\r\n    }\r\n\r\n    public ColorUIResource getPrimary1() {\r\n        return primary1;\r\n    }\r\n\r\n    public ColorUIResource getPrimary2() {\r\n        return primary2;\r\n    }\r\n\r\n    public ColorUIResource getPrimary3() {\r\n        return primary3;\r\n    }\r\n\r\n    public ColorUIResource getSecondary1() {\r\n        return primary1;\r\n    }\r\n\r\n    public ColorUIResource getSecondary2() {\r\n        return primary2;\r\n    }\r\n\r\n   
    {
        "refactorings": {
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
                {
                    "fromLine": 53,
                    "toLine": 53,
                    "oldContent": "    private FigLine lineFig;",
                    "newContent": "    private LifeLineFigures lifeLineFigures;"
                },
                {
                    "fromLine": 54,
                    "toLine": 54,
                    "oldContent": "    private FigRect rectFig;",
                    "newContent": ""
                },
                {
                    "fromLine": 56,
                    "toLine": 56,
                    "oldContent": "    private List<FigActivation> activations;",
                    "newContent": "    private ActivationsManager activationsManager;"
                },
                {
                    "fromLine": 57,
                    "toLine": 57,
                    "oldContent": "    private List<FigActivation> stackedActivations;",
                    "newContent": ""
                },
                {
                    "fromLine": 77,
                    "toLine": 77,
                    "oldContent": "        rectFig = new FigRect(x, y, WIDTH, HEIGHT);",
                    "newContent": "        lifeLineFigures = new LifeLineFigures(x, y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);"
                },
                {
                    "fromLine": 78,
                    "toLine": 78,
                    "oldContent": "        rectFig.setFilled(false);",
                    "newContent": ""
                },
                {
                    "fromLine": 79,
                    "toLine": 79,
                    "oldContent": "        rectFig.setLineWidth(0);",
                    "newContent": ""
                },
                {
                    "fromLine": 80,
                    "toLine": 80,
                    "oldContent": "        lineFig = new FigLine(x + WIDTH / 2, y,",
                    "newContent": ""
                },
                {
                    "fromLine": 81,
                    "toLine": 81,
                    "oldContent": "                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);",
                    "newContent": ""
                },
                {
                    "fromLine": 82,
                    "toLine": 82,
                    "oldContent": "        lineFig.setDashed(true);",
                    "newContent": ""
                },
                {
                    "fromLine": 83,
                    "toLine": 83,
                    "oldContent": "        lineFig.setLineWidth(LINE_WIDTH);",
                    "newContent": ""
                },
                {
                    "fromLine": 85,
                    "toLine": 85,
                    "oldContent": "        addFig(rectFig);",
                    "newContent": "        addFig(lifeLineFigures.getRectFig());"
                },
                {
                    "fromLine": 86,
                    "toLine": 86,
                    "oldContent": "        addFig(lineFig);",
                    "newContent": "        addFig(lifeLineFigures.getLineFig());"
                },
                {
                    "fromLine": 107,
                    "toLine": 107,
                    "oldContent": "        activations = new LinkedList<FigActivation>();",
                    "newContent": "        activationsManager = new ActivationsManager();"
                },
                {
                    "fromLine": 108,
                    "toLine": 108,
                    "oldContent": "        stackedActivations = new LinkedList<FigActivation>();",
                    "newContent": ""
                },
                {
                    "fromLine": 109,
                    "toLine": 109,
                    "oldContent": "        ",
                    "newContent": "        activationsManager.initializeActivations(messages, getOwner(), getSettings(), lifeLineFigures);"
                },
                {
                    "fromLine": 111,
                    "toLine": 111,
                    "oldContent": "        activations = createStandardActivations(messages);",
                    "newContent": ""
                },
                {
                    "fromLine": 112,
                    "toLine": 112,
                    "oldContent": "        stackedActivations = createStackedActivations(messages);",
                    "newContent": ""
                },
                {
                    "fromLine": 114,
                    "toLine": 114,
                    "oldContent": "        addActivations(activations);",
                    "newContent": "        activationsManager.addActivations(this);"
                },
                {
                    "fromLine": 115,
                    "toLine": 115,
                    "oldContent": "        addActivations(stackedActivations);",
                    "newContent": ""
                },
                {
                    "fromLine": 117,
                    "toLine": 117,
                    "oldContent": "        calcBounds();",
                    "newContent": ""
                },
                {
                    "fromLine": 120,
                    "toLine": 120,
                    "oldContent": "    private void addActivations(",
                    "newContent": "    void addActivations("
                },
                {
                    "fromLine": 180,
                    "toLine": 180,
                    "oldContent": "                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2,",
                    "newContent": "                    lifeLineFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2,"
                },
                {
                    "fromLine": 183,
                    "toLine": 183,
                    "oldContent": "                            && act.getHeight() == oldBounds.height) {",
                    "newContent": "                            && act.getHeight() == lifeLineFigures.getRectFig().getHeight()) {"
                },
                {
                    "fromLine": 184,
                    "toLine": 184,
                    "oldContent": "                act.setHeight(getHeight());",
                    "newContent": "                act.setHeight(lifeLineFigures.getRectFig().getHeight());"
                },
                {
                    "fromLine": 187,
                    "toLine": 187,
                    "oldContent": "        for (FigActivation oldActivation : activations) {",
                    "newContent": "        activationsManager.clearActivations(this);"
                },
                {
                    "fromLine": 188,
                    "toLine": 188,
                    "oldContent": "            removeFig(oldActivation);    ",
                    "newContent": ""
                },
                {
                    "fromLine": 189,
                    "toLine": 189,
                    "oldContent": "        }",
                    "newContent": ""
                },
                {
                    "fromLine": 190,
                    "toLine": 190,
                    "oldContent": "        for (FigActivation oldActivation : stackedActivations) {",
                    "newContent": ""
                },
                {
                    "fromLine": 191,
                    "toLine": 191,
                    "oldContent": "            removeFig(oldActivation);    ",
                    "newContent": ""
                },
                {
                    "fromLine": 192,
                    "toLine": 192,
                    "oldContent": "        }",
                    "newContent": ""
                },
                {
                    "fromLine": 193,
                    "toLine": 193,
                    "oldContent": "        activations.clear();",
                    "newContent": ""
                },
                {
                    "fromLine": 194,
                    "toLine": 194,
                    "oldContent": "        stackedActivations.clear();",
                    "newContent": ""
                },
                {
                    "fromLine": 263,
                    "toLine": 263,
                    "oldContent": "        lineFig.setLineWidth(w);",
                    "newContent": "        lifeLineFigures.getLineFig().setLineWidth(w);"
                }
            ],
            "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
                {
                    "fromLine": 32,
                    "toLine": 32,
                    "oldContent": "    private FigBasePresentation displayState;",
                    "newContent": "    private NodePresentationFigures nodePresentationFigures;"
                },
                {
                    "fromLine": 35,
                    "toLine": 35,
                    "oldContent": "    private DiagramElement nameDiagramElement;",
                    "newContent": ""
                },
                {
                    "fromLine": 44,
                    "toLine": 44,
                    "oldContent": "        displayState = displayState;",
                    "newContent": "        nodePresentationFigures = new NodePresentationFigures(displayState);"
                },
                {
                    "fromLine": 45,
                    "toLine": 45,
                    "oldContent": "        displayState.setOwner(getOwner());",
                    "newContent": "        nodePresentationFigures.getDisplayState().setOwner(getOwner());"
                },
                {
                    "fromLine": 46,
                    "toLine": 46,
                    "oldContent": "        addFig(displayState);",
                    "newContent": "        addFig(nodePresentationFigures.getDisplayState());"
                },
                {
                    "fromLine": 56,
                    "toLine": 56,
                    "oldContent": "        return displayState.getMinimumSize();",
                    "newContent": "        return nodePresentationFigures.getDisplayState().getMinimumSize();"
                },
                {
                    "fromLine": 60,
                    "toLine": 60,
                    "oldContent": "    public void setNameDiagramElement(DiagramElement name) {",
                    "newContent": "    // Removed setNameDiagramElement method"
                },
                {
                    "fromLine": 61,
                    "toLine": 61,
                    "oldContent": "    }",
                    "newContent": ""
                },
                {
                    "fromLine": 64,
                    "toLine": 64,
                    "oldContent": "        if (displayState != null) {",
                    "newContent": "        if (nodePresentationFigures.getDisplayState() != null) {"
                },
                {
                    "fromLine": 65,
                    "toLine": 65,
                    "oldContent": "            displayState.setBounds(myBounds);",
                    "newContent": "            nodePresentationFigures.getDisplayState().setBounds(myBounds);"
                },
                {
                    "fromLine": 72,
                    "toLine": 72,
                    "oldContent": "            final Dimension min = getMinimumSize();",
                    "newContent": "            final Dimension min = nodePresentationFigures.getDisplayState().getMinimumSize();"
                },
                {
                    "fromLine": 73,
                    "toLine": 73,
                    "oldContent": "            int maxw = Math.max(getWidth(), min.width);",
                    "newContent": "            int maxw = Math.max(nodePresentationFigures.getDisplayState().getWidth(), min.width);"
                },
                {
                    "fromLine": 74,
                    "toLine": 74,
                    "oldContent": "            int maxh = Math.max(getHeight(), min.height);",
                    "newContent": "            int maxh = Math.max(nodePresentationFigures.getDisplayState().getHeight(), min.height);"
                },
                {
                    "fromLine": 75,
                    "toLine": 75,
                    "oldContent": "            setBounds(_x, _y, maxw, maxh);",
                    "newContent": "            nodePresentationFigures.getDisplayState().setBounds(_x, _y, maxw, maxh);"
                }
            ]
        },
        "extractedClasses": {
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineFigures.java": "package org.argouml.sequence2.diagram;\r\n\r\nimport org.tigris.gef.presentation.FigLine;\r\nimport org.tigris.gef.presentation.FigRect;\r\n\r\nimport java.awt.*;\r\n\r\n/**\r\n * LifeLineFigures groups figures representing the lifeline.\r\n */\r\npublic class LifeLineFigures {\r\n\r\n    private FigLine lineFig;\r\n    private FigRect rectFig;\r\n\r\n    public LifeLineFigures(int x, int y, int width, int height, Color lineColor, int lineWidth) {\r\n        rectFig = new FigRect(x, y, width, height);\r\n        rectFig.setFilled(false);\r\n        rectFig.setLineWidth(0);\r\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, lineColor);\r\n        lineFig.setDashed(true);\r\n        lineFig.setLineWidth(lineWidth);\r\n    }\r\n\r\n    public FigLine getLineFig() {\r\n        return lineFig;\r\n    }\r\n\r\n    public FigRect getRectFig() {\r\n        return rectFig;\r\n    }\r\n}\r\n",
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationsManager.java": "package org.argouml.sequence2.diagram;\r\n\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\n/**\r\n * ActivationsManager handles activations for a lifeline.\r\n */\r\npublic class ActivationsManager {\r\n\r\n    private List<FigActivation> activations;\r\n    private List<FigActivation> stackedActivations;\r\n\r\n    public ActivationsManager() {\r\n        activations = new LinkedList<FigActivation>();\r\n        stackedActivations = new LinkedList<FigActivation>();\r\n    }\r\n\r\n    public void initializeActivations(List<FigMessage> messages, Object owner, DiagramSettings settings, LifeLineFigures lifeLineFigures) {\r\n        // Implementation of activations initialization\r\n    }\r\n\r\n    public void addActivations(FigLifeLine figLifeLine) {\r\n        // Implementation of adding activations to the lifeline\r\n    }\r\n\r\n    public void clearActivations(FigLifeLine figLifeLine) {\r\n        // Implementation of clearing activations from the lifeline\r\n    }\r\n}\r\n",
            "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentationFigures.java": "package org.argouml.activity2.diagram;\r\n\r\nimport org.tigris.gef.presentation.Fig;\r\n\r\n/**\r\n * NodePresentationFigures groups figures representing the node presentation.\r\n */\r\npublic class NodePresentationFigures {\r\n\r\n    private Fig displayState;\r\n\r\n    public NodePresentationFigures(Fig displayState) {\r\n        this.displayState = displayState;\r\n    }\r\n\r\n    public Fig getDisplayState() {\r\n        return displayState;\r\n    }\r\n}\r\n"
        }
    }
   "