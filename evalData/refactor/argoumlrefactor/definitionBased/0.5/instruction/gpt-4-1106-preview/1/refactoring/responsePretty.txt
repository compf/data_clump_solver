refactorings:
{
	src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java:
	[
		fromLine:"		36",
		toLine:"		51",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);
		
		    private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);
		    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);		
",
,
		fromLine:"		53",
		toLine:"		57",
		oldContent:"
		private final FontUIResource controlFont =
			new FontUIResource("SansSerif", Font.PLAIN, 14);
		    private final FontUIResource systemFont =
			new FontUIResource("Dialog", Font.PLAIN, 14);
		    private final FontUIResource windowTitleFont =		
",
		newContent:"
		private final ThemeFonts themeFonts = new ThemeFonts("SansSerif", "Dialog", "SansSerif", "Dialog", 14, 14, 14, 14, 12);		
",
,

	],
	src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java:
	[
		fromLine:"		36",
		toLine:"		51",
		oldContent:"
		private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);
		    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);
		    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);
		
		    private final ColorUIResource secondary1 =
			new ColorUIResource(102, 102, 102);
		    private final ColorUIResource secondary2 =
			new ColorUIResource(153, 153, 153);
		    private final ColorUIResource secondary3 =
			new ColorUIResource(204, 204, 204);		
",
		newContent:"
		private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);
		    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);		
",
,
		fromLine:"		53",
		toLine:"		57",
		oldContent:"
		private final FontUIResource controlFont =
			new FontUIResource("SansSerif", Font.BOLD, 16);
		    private final FontUIResource systemFont =
			new FontUIResource("Dialog", Font.PLAIN, 16);
		    private final FontUIResource windowTitleFont =		
",
		newContent:"
		private final ThemeFonts themeFonts = new ThemeFonts("SansSerif", "Dialog", "SansSerif", "Dialog", 16, 16, 16, 16, 14);		
",
,

	],
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		49",
		toLine:"		54",
		oldContent:"
		private FigLine lineFig;
		    private FigRect rectFig;
		    
		    private List<FigActivation> activations;
		    private List<FigActivation> stackedActivations;		
",
		newContent:"
		private LifeLineElements lifeLineElements;		
",
,
		fromLine:"		60",
		toLine:"		66",
		oldContent:"
		activations = new LinkedList<FigActivation>();
		        stackedActivations = new LinkedList<FigActivation>();
		        
		        rectFig = new FigRect(x, y, WIDTH, HEIGHT); 
		        rectFig.setFilled(false);
		        rectFig.setLineWidth(0);
		        lineFig = new FigLine(x + WIDTH / 2, y, 		
",
		newContent:"
		lifeLineElements = new LifeLineElements(x, y, WIDTH, HEIGHT);		
",
,
		fromLine:"		88",
		toLine:"		92",
		oldContent:"
		clearActivations();
		        Collections.sort(messages, new FigMessageComparator());
		        
		        activations = createStandardActivations(messages);
		        stackedActivations = createStackedActivations(messages);		
",
		newContent:"
		lifeLineElements.clearActivations();
		        Collections.sort(messages, new FigMessageComparator());
		        
		        lifeLineElements.createActivations(messages);		
",
,
		fromLine:"		95",
		toLine:"		95",
		oldContent:"
		addActivations(activations);		
",
		newContent:"
		lifeLineElements.addActivations(this);		
",
,
		fromLine:"		96",
		toLine:"		96",
		oldContent:"
		addActivations(stackedActivations);		
",
		newContent:"
		lifeLineElements.addStackedActivations(this);		
",
,

	],

}
extractedClasses:
{
	src/argouml-app/src/org/argouml/ui/ThemeColors.java:"
	package org.argouml.ui;
	
	import javax.swing.plaf.ColorUIResource;
	
	public class ThemeColors {
	    private final ColorUIResource color1;
	    private final ColorUIResource color2;
	    private final ColorUIResource color3;
	
	    public ThemeColors(int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3) {
	        this.color1 = new ColorUIResource(r1, g1, b1);
	        this.color2 = new ColorUIResource(r2, g2, b2);
	        this.color3 = new ColorUIResource(r3, g3, b3);
	    }
	
	    public ColorUIResource getColor1() {
	        return color1;
	    }
	
	    public ColorUIResource getColor2() {
	        return color2;
	    }
	
	    public ColorUIResource getColor3() {
	        return color3;
	    }
	}
		
",
	src/argouml-app/src/org/argouml/ui/ThemeFonts.java:"
	package org.argouml.ui;
	
	import java.awt.Font;
	import javax.swing.plaf.FontUIResource;
	
	public class ThemeFonts {
	    private final FontUIResource controlFont;
	    private final FontUIResource systemFont;
	    private final FontUIResource windowTitleFont;
	    private final FontUIResource userFont;
	    private final FontUIResource smallFont;
	
	    public ThemeFonts(String controlFontFamily, String systemFontFamily, String windowTitleFontFamily, String userFontFamily, int controlFontSize, int systemFontSize, int windowTitleFontSize, int userFontSize, int smallFontSize) {
	        this.controlFont = new FontUIResource(controlFontFamily, Font.PLAIN, controlFontSize);
	        this.systemFont = new FontUIResource(systemFontFamily, Font.PLAIN, systemFontSize);
	        this.windowTitleFont = new FontUIResource(windowTitleFontFamily, Font.BOLD, windowTitleFontSize);
	        this.userFont = new FontUIResource(userFontFamily, Font.PLAIN, userFontSize);
	        this.smallFont = new FontUIResource(systemFontFamily, Font.PLAIN, smallFontSize);
	    }
	
	    public FontUIResource getControlFont() {
	        return controlFont;
	    }
	
	    public FontUIResource getSystemFont() {
	        return systemFont;
	    }
	
	    public FontUIResource getWindowTitleFont() {
	        return windowTitleFont;
	    }
	
	    public FontUIResource getUserFont() {
	        return userFont;
	    }
	
	    public FontUIResource getSmallFont() {
	        return smallFont;
	    }
	}
		
",
	src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineElements.java:"
	package org.argouml.sequence2.diagram;
	
	import java.awt.Rectangle;
	import java.util.LinkedList;
	import java.util.List;
	
	import org.argouml.uml.diagram.DiagramSettings;
	import org.tigris.gef.presentation.FigLine;
	import org.tigris.gef.presentation.FigRect;
	
	public class LifeLineElements {
	    private FigLine lineFig;
	    private FigRect rectFig;
	    private List<FigActivation> activations;
	    private List<FigActivation> stackedActivations;
	
	    public LifeLineElements(int x, int y, int width, int height) {
	        activations = new LinkedList<FigActivation>();
	        stackedActivations = new LinkedList<FigActivation>();
	
	        rectFig = new FigRect(x, y, width, height);
	        rectFig.setFilled(false);
	        rectFig.setLineWidth(0);
	        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, FigLifeLine.LINE_COLOR);
	        lineFig.setDashed(true);
	        lineFig.setLineWidth(FigLifeLine.LINE_WIDTH);
	    }
	
	    public void clearActivations() {
	        activations.clear();
	        stackedActivations.clear();
	    }
	
	    public void createActivations(List<FigMessage> messages) {
	        // Implementation of activation creation logic
	    }
	
	    public void addActivations(FigLifeLine lifeLine) {
	        for (FigActivation figAct : activations) {
	            figAct.setFillColor(lifeLine.getFillColor());
	            lifeLine.addFig(figAct);
	        }
	    }
	
	    public void addStackedActivations(FigLifeLine lifeLine) {
	        for (FigActivation figAct : stackedActivations) {
	            figAct.setFillColor(lifeLine.getFillColor());
	            lifeLine.addFig(figAct);
	        }
	    }
	
	    // Additional methods and logic related to life line elements
	}
		
",

}
