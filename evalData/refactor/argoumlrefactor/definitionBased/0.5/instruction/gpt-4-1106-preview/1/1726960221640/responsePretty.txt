"
{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 36,
                "toLine": 51,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);\n    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);"
            },
            {
                "fromLine": 53,
                "toLine": 57,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", \"SansSerif\", \"Dialog\", 14, 14, 14, 14, 12);"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 36,
                "toLine": 51,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);\n\n    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);\n    private final ThemeColors secondaryColors = new ThemeColors(102, 102, 102, 153, 153, 153, 204, 204, 204);"
            },
            {
                "fromLine": 53,
                "toLine": 57,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", \"SansSerif\", \"Dialog\", 16, 16, 16, 16, 14);"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 49,
                "toLine": 54,
                "oldContent": "private FigLine lineFig;\n    private FigRect rectFig;\n    \n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;",
                "newContent": "private LifeLineElements lifeLineElements;"
            },
            {
                "fromLine": 60,
                "toLine": 66,
                "oldContent": "activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, ",
                "newContent": "lifeLineElements = new LifeLineElements(x, y, WIDTH, HEIGHT);"
            },
            {
                "fromLine": 88,
                "toLine": 92,
                "oldContent": "clearActivations();\n        Collections.sort(messages, new FigMessageComparator());\n        \n        activations = createStandardActivations(messages);\n        stackedActivations = createStackedActivations(messages);",
                "newContent": "lifeLineElements.clearActivations();\n        Collections.sort(messages, new FigMessageComparator());\n        \n        lifeLineElements.createActivations(messages);"
            },
            {
                "fromLine": 95,
                "toLine": 95,
                "oldContent": "addActivations(activations);",
                "newContent": "lifeLineElements.addActivations(this);"
            },
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "addActivations(stackedActivations);",
                "newContent": "lifeLineElements.addStackedActivations(this);"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n    private final ColorUIResource color1;\n    private final ColorUIResource color2;\n    private final ColorUIResource color3;\n\n    public ThemeColors(int r1, int g1, int b1, int r2, int g2, int b2, int r3, int g3, int b3) {\n        this.color1 = new ColorUIResource(r1, g1, b1);\n        this.color2 = new ColorUIResource(r2, g2, b2);\n        this.color3 = new ColorUIResource(r3, g3, b3);\n    }\n\n    public ColorUIResource getColor1() {\n        return color1;\n    }\n\n    public ColorUIResource getColor2() {\n        return color2;\n    }\n\n    public ColorUIResource getColor3() {\n        return color3;\n    }\n}\n",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFonts {\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n\n    public ThemeFonts(String controlFontFamily, String systemFontFamily, String windowTitleFontFamily, String userFontFamily, int controlFontSize, int systemFontSize, int windowTitleFontSize, int userFontSize, int smallFontSize) {\n        this.controlFont = new FontUIResource(controlFontFamily, Font.PLAIN, controlFontSize);\n        this.systemFont = new FontUIResource(systemFontFamily, Font.PLAIN, systemFontSize);\n        this.windowTitleFont = new FontUIResource(windowTitleFontFamily, Font.BOLD, windowTitleFontSize);\n        this.userFont = new FontUIResource(userFontFamily, Font.PLAIN, userFontSize);\n        this.smallFont = new FontUIResource(systemFontFamily, Font.PLAIN, smallFontSize);\n    }\n\n    public FontUIResource getControlFont() {\n        return controlFont;\n    }\n\n    public FontUIResource getSystemFont() {\n        return systemFont;\n    }\n\n    public FontUIResource getWindowTitleFont() {\n        return windowTitleFont;\n    }\n\n    public FontUIResource getUserFont() {\n        return userFont;\n    }\n\n    public FontUIResource getSmallFont() {\n        return smallFont;\n    }\n}\n",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLineElements.java": "package org.argouml.sequence2.diagram;\n\nimport java.awt.Rectangle;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class LifeLineElements {\n    private FigLine lineFig;\n    private FigRect rectFig;\n    private List<FigActivation> activations;\n    private List<FigActivation> stackedActivations;\n\n    public LifeLineElements(int x, int y, int width, int height) {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n\n        rectFig = new FigRect(x, y, width, height);\n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + width / 2, y, x + width / 2, y + height, FigLifeLine.LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(FigLifeLine.LINE_WIDTH);\n    }\n\n    public void clearActivations() {\n        activations.clear();\n        stackedActivations.clear();\n    }\n\n    public void createActivations(List<FigMessage> messages) {\n        // Implementation of activation creation logic\n    }\n\n    public void addActivations(FigLifeLine lifeLine) {\n        for (FigActivation figAct : activations) {\n            figAct.setFillColor(lifeLine.getFillColor());\n            lifeLine.addFig(figAct);\n        }\n    }\n\n    public void addStackedActivations(FigLifeLine lifeLine) {\n        for (FigActivation figAct : stackedActivations) {\n            figAct.setFillColor(lifeLine.getFillColor());\n            lifeLine.addFig(figAct);\n        }\n    }\n\n    // Additional methods and logic related to life line elements\n}\n"
    }
}"