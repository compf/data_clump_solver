{
    "refactorings": {
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 25,
                "toLine": 33,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private NodePresentation nodePresentation;"
            },
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "nodePresentation = new NodePresentation(owner, bounds, settings);",
                "newContent": "this.settings = settings;\n        nodePresentation = new NodePresentation(owner, bounds, settings);"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "setDisplayState(displayState);",
                "newContent": "this.displayState = displayState;\n        displayState.setOwner(getOwner());\n        addFig(displayState);"
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "return displayState.getMinimumSize();",
                "newContent": "return nodePresentation.getMinimumSize();"
            },
            {
                "fromLine": 55,
                "toLine": 55,
                "oldContent": "public void setNameDiagramElement(DiagramElement name) {\n    }",
                "newContent": "public void setNameDiagramElement(DiagramElement name) {\n        nodePresentation.setNameDiagramElement(name);\n    }"
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "Rectangle myBounds = getBounds();",
                "newContent": "Rectangle myBounds = nodePresentation.getBounds();"
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "if (displayState != null) {",
                "newContent": "if (nodePresentation.hasDisplayState()) {"
            },
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "displayState.setBounds(myBounds);",
                "newContent": "nodePresentation.setDisplayStateBounds(myBounds);"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "updateEdges();",
                "newContent": "nodePresentation.updateEdges();"
            },
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "positionChildren();",
                "newContent": "nodePresentation.positionChildren();"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentation.java": "package org.argouml.activity2.diagram;\n\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class NodePresentation {\n\n    private FigBasePresentation displayState;\n    private DiagramSettings settings;\n\n    public NodePresentation(Object owner, Rectangle bounds, DiagramSettings settings) {\n        this.settings = settings;\n        // Initialize displayState and other properties here\n    }\n\n    public void setDisplayState(FigBasePresentation displayState) {\n        this.displayState = displayState;\n        // Additional setup for displayState if needed\n    }\n\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n        // Set the name diagram element\n    }\n\n    public Rectangle getBounds() {\n        // Return the bounds of the node\n        return null;\n    }\n\n    public boolean hasDisplayState() {\n        return displayState != null;\n    }\n\n    public void setDisplayStateBounds(Rectangle bounds) {\n        displayState.setBounds(bounds);\n    }\n\n    public void updateEdges() {\n        // Update the edges if necessary\n    }\n\n    public void positionChildren() {\n        // Position the children elements\n    }\n}"
    }
}