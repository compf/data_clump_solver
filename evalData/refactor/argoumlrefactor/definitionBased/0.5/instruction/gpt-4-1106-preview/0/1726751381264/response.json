{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 39,
                "toLine": 53,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 55,
                "toLine": 69,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 71,
                "toLine": 89,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 14, 12);"
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 121,
                "toLine": 121,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 125,
                "toLine": 125,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 133,
                "toLine": 133,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return secondaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return secondaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 141,
                "toLine": 141,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return secondaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 149,
                "toLine": 149,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 153,
                "toLine": 153,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 157,
                "toLine": 157,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 161,
                "toLine": 161,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 165,
                "toLine": 165,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 169,
                "toLine": 169,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 39,
                "toLine": 53,
                "oldContent": "private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "private final ThemeColors primaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 55,
                "toLine": 69,
                "oldContent": "private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": "private final ThemeColors secondaryColors = new ThemeColors(102, 153, 204);"
            },
            {
                "fromLine": 71,
                "toLine": 89,
                "oldContent": "private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);\n    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": "private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 16, 14);"
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 121,
                "toLine": 121,
                "oldContent": "protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 125,
                "toLine": 125,
                "oldContent": "protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 133,
                "toLine": 133,
                "oldContent": "protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "protected ColorUIResource getSecondary1() { return secondaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "protected ColorUIResource getSecondary2() { return secondaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 141,
                "toLine": 141,
                "oldContent": "protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "protected ColorUIResource getSecondary3() { return secondaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 149,
                "toLine": 149,
                "oldContent": "public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 153,
                "toLine": 153,
                "oldContent": "public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 157,
                "toLine": 157,
                "oldContent": "public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 161,
                "toLine": 161,
                "oldContent": "public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 165,
                "toLine": 165,
                "oldContent": "public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 169,
                "toLine": 169,
                "oldContent": "public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "initialize(bounds.x, bounds.y);",
                "newContent": "initialize(new LifeLinePosition(bounds.x, bounds.y));"
            },
            {
                "fromLine": 88,
                "toLine": 100,
                "oldContent": "private void initialize(int x, int y) {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);\n        addFig(lineFig);\n    }",
                "newContent": "private void initialize(LifeLinePosition position) {\n        activations = new LinkedList<FigActivation>();\n        stackedActivations = new LinkedList<FigActivation>();\n        \n        rectFig = position.createLifeLineRect();\n        lineFig = position.createLifeLine();\n        \n        addFig(rectFig);\n        addFig(lineFig);\n    }"
            }
        ],
        "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 25,
                "toLine": 33,
                "oldContent": "private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;",
                "newContent": "private NodePresentation nodePresentation;"
            },
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "this.settings = settings;",
                "newContent": "nodePresentation = new NodePresentation(owner, bounds, settings);"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "setDisplayState(displayState);",
                "newContent": "nodePresentation.setDisplayState(displayState);"
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "return displayState.getMinimumSize();",
                "newContent": "return nodePresentation.getMinimumSize();"
            },
            {
                "fromLine": 55,
                "toLine": 55,
                "oldContent": "public void setNameDiagramElement(DiagramElement name) {",
                "newContent": "public void setNameDiagramElement(DiagramElement name) {\n        nodePresentation.setNameDiagramElement(name);"
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "Rectangle myBounds = getBounds();",
                "newContent": "Rectangle myBounds = nodePresentation.getBounds();"
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "if (displayState != null) {",
                "newContent": "if (nodePresentation.hasDisplayState()) {"
            },
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "displayState.setBounds(myBounds);",
                "newContent": "nodePresentation.setDisplayStateBounds(myBounds);"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "updateEdges();",
                "newContent": "nodePresentation.updateEdges();"
            },
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "positionChildren();",
                "newContent": "nodePresentation.positionChildren();"
            }
        ]
    },
    "extractedClasses": {
        "src/argouml-app/src/org/argouml/ui/ThemeColors.java": "package org.argouml.ui;\n\nimport javax.swing.plaf.ColorUIResource;\n\npublic class ThemeColors {\n    private final ColorUIResource primary1;\n    private final ColorUIResource primary2;\n    private final ColorUIResource primary3;\n\n    public ThemeColors(int p1, int p2, int p3) {\n        primary1 = new ColorUIResource(p1, p1, p1);\n        primary2 = new ColorUIResource(p2, p2, p2);\n        primary3 = new ColorUIResource(p3, p3, p3);\n    }\n\n    public ColorUIResource getPrimary1() { return primary1; }\n    public ColorUIResource getPrimary2() { return primary2; }\n    public ColorUIResource getPrimary3() { return primary3; }\n}",
        "src/argouml-app/src/org/argouml/ui/ThemeFonts.java": "package org.argouml.ui;\n\nimport java.awt.Font;\nimport javax.swing.plaf.FontUIResource;\n\npublic class ThemeFonts {\n    private final FontUIResource controlFont;\n    private final FontUIResource systemFont;\n    private final FontUIResource windowTitleFont;\n    private final FontUIResource userFont;\n    private final FontUIResource smallFont;\n\n    public ThemeFonts(String control, String system, int size, int smallSize) {\n        controlFont = new FontUIResource(control, Font.PLAIN, size);\n        systemFont = new FontUIResource(system, Font.PLAIN, size);\n        windowTitleFont = new FontUIResource(control, Font.BOLD, size);\n        userFont = new FontUIResource(control, Font.PLAIN, size);\n        smallFont = new FontUIResource(system, Font.PLAIN, smallSize);\n    }\n\n    public FontUIResource getControlFont() { return controlFont; }\n    public FontUIResource getSystemFont() { return systemFont; }\n    public FontUIResource getWindowTitleFont() { return windowTitleFont; }\n    public FontUIResource getUserFont() { return userFont; }\n    public FontUIResource getSmallFont() { return smallFont; }\n}",
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLinePosition.java": "package org.argouml.sequence2.diagram;\n\nimport org.tigris.gef.presentation.FigLine;\nimport org.tigris.gef.presentation.FigRect;\n\npublic class LifeLinePosition {\n    private final int x;\n    private final int y;\n\n    public LifeLinePosition(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public FigRect createLifeLineRect() {\n        return new FigRect(x, y, FigLifeLine.WIDTH, FigLifeLine.HEIGHT, false, 0);\n    }\n\n    public FigLine createLifeLine() {\n        return new FigLine(x + FigLifeLine.WIDTH / 2, y, x +

    {
        "refactorings": {
            "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/LifeLinePosition.java": [
                {
                    "fromLine": 13,
                    "toLine": 19,
                    "oldContent": "public FigRect createLifeLineRect() {\n        return new FigRect(x, y, FigLifeLine.WIDTH, FigLifeLine.HEIGHT, false, 0);\n    }\n\n    public FigLine createLifeLine() {\n        return new FigLine(x + FigLifeLine.WIDTH / 2, y, x +",
                    "newContent": "public FigRect createLifeLineRect() {\n        FigRect rect = new FigRect(x, y, FigLifeLine.WIDTH, FigLifeLine.HEIGHT);\n        rect.setFilled(false);\n        rect.setLineWidth(0);\n        return rect;\n    }\n\n    public FigLine createLifeLine() {\n        FigLine line = new FigLine(x + FigLifeLine.WIDTH / 2, y, x + FigLifeLine.WIDTH / 2, y + FigLifeLine.HEIGHT, FigLifeLine.LINE_COLOR);\n        line.setDashed(true);\n        line.setLineWidth(FigLifeLine.LINE_WIDTH);\n        return line;\n    }"
                }
            ]
        },
        "extractedClasses": {
            "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/NodePresentation.java": "package org.argouml.activity2.diagram;\n\nimport java.awt.Rectangle;\nimport org.argouml.uml.diagram.DiagramSettings;\n\npublic class NodePresentation {\n    private FigBasePresentation displayState;\n    private final DiagramSettings settings;\n    private DiagramElement nameDiagramElement;\n\n    public NodePresentation(Object owner, Rectangle bounds, DiagramSettings settings) {\n        this.settings = settings;\n        // Other initializations here\n    }\n\n    public void setDisplayState(FigBasePresentation displayState) {\n        this.displayState = displayState;\n        displayState.setOwner(getOwner());\n        // Add displayState to the main Fig\n    }\n\n    public boolean hasDisplayState() {\n        return displayState != null;\n    }\n\n    public void setDisplayStateBounds(Rectangle bounds) {\n        displayState.setBounds(bounds);\n    }\n\n    public void updateEdges() {\n        // Update the edges if necessary\n    }\n\n    public void positionChildren() {\n        // Position the children Figs\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n        this.nameDiagramElement = name;\n    }\n\n    // Other necessary methods here\n}"
        }
    }
