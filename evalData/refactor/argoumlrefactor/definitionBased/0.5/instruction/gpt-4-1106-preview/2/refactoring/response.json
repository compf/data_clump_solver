{
    "refactorings": {
        "src/argouml-app/src/org/argouml/ui/JasonsBigTheme.java": [
            {
                "fromLine": 39,
                "toLine": 47,
                "oldContent": "    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "    private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 49,
                "toLine": 57,
                "oldContent": "    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 59,
                "toLine": 67,
                "oldContent": "    private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 14);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 14);",
                "newContent": "    private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 14, Font.PLAIN, Font.BOLD);"
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 12);",
                "newContent": ""
            },
            {
                "fromLine": 103,
                "toLine": 103,
                "oldContent": "    protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "    protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "    protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "    protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 111,
                "toLine": 111,
                "oldContent": "    protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "    protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 115,
                "toLine": 115,
                "oldContent": "    protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "    protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 119,
                "toLine": 119,
                "oldContent": "    protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "    protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 123,
                "toLine": 123,
                "oldContent": "    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "    protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 127,
                "toLine": 127,
                "oldContent": "    public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "    public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "    public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 135,
                "toLine": 135,
                "oldContent": "    public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "    public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 139,
                "toLine": 139,
                "oldContent": "    public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 143,
                "toLine": 143,
                "oldContent": "    public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "    public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 147,
                "toLine": 147,
                "oldContent": "    public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "    public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-app/src/org/argouml/ui/JasonsHugeTheme.java": [
            {
                "fromLine": 39,
                "toLine": 47,
                "oldContent": "    private final ColorUIResource primary1 = new ColorUIResource(102, 102, 153);\n    private final ColorUIResource primary2 = new ColorUIResource(153, 153, 204);\n    private final ColorUIResource primary3 = new ColorUIResource(204, 204, 255);",
                "newContent": "    private final ThemeColors primaryColors = new ThemeColors(102, 102, 153, 153, 153, 204, 204, 204, 255);"
            },
            {
                "fromLine": 49,
                "toLine": 57,
                "oldContent": "    private final ColorUIResource secondary1 =\n\tnew ColorUIResource(102, 102, 102);\n    private final ColorUIResource secondary2 =\n\tnew ColorUIResource(153, 153, 153);\n    private final ColorUIResource secondary3 =\n\tnew ColorUIResource(204, 204, 204);",
                "newContent": ""
            },
            {
                "fromLine": 59,
                "toLine": 67,
                "oldContent": "    private final FontUIResource controlFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource systemFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 16);\n    private final FontUIResource windowTitleFont =\n\tnew FontUIResource(\"SansSerif\", Font.BOLD, 16);\n    private final FontUIResource userFont =\n\tnew FontUIResource(\"SansSerif\", Font.PLAIN, 16);",
                "newContent": "    private final ThemeFonts themeFonts = new ThemeFonts(\"SansSerif\", \"Dialog\", 16, Font.PLAIN, Font.BOLD);"
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "    private final FontUIResource smallFont =\n\tnew FontUIResource(\"Dialog\", Font.PLAIN, 14);",
                "newContent": ""
            },
            {
                "fromLine": 103,
                "toLine": 103,
                "oldContent": "    protected ColorUIResource getPrimary1() { return primary1; }",
                "newContent": "    protected ColorUIResource getPrimary1() { return primaryColors.getPrimary1(); }"
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "    protected ColorUIResource getPrimary2() { return primary2; }",
                "newContent": "    protected ColorUIResource getPrimary2() { return primaryColors.getPrimary2(); }"
            },
            {
                "fromLine": 111,
                "toLine": 111,
                "oldContent": "    protected ColorUIResource getPrimary3() { return primary3; }",
                "newContent": "    protected ColorUIResource getPrimary3() { return primaryColors.getPrimary3(); }"
            },
            {
                "fromLine": 115,
                "toLine": 115,
                "oldContent": "    protected ColorUIResource getSecondary1() { return secondary1; }",
                "newContent": "    protected ColorUIResource getSecondary1() { return primaryColors.getSecondary1(); }"
            },
            {
                "fromLine": 119,
                "toLine": 119,
                "oldContent": "    protected ColorUIResource getSecondary2() { return secondary2; }",
                "newContent": "    protected ColorUIResource getSecondary2() { return primaryColors.getSecondary2(); }"
            },
            {
                "fromLine": 123,
                "toLine": 123,
                "oldContent": "    protected ColorUIResource getSecondary3() { return secondary3; }",
                "newContent": "    protected ColorUIResource getSecondary3() { return primaryColors.getSecondary3(); }"
            },
            {
                "fromLine": 127,
                "toLine": 127,
                "oldContent": "    public FontUIResource getControlTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getControlTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "    public FontUIResource getSystemTextFont() { return systemFont; }",
                "newContent": "    public FontUIResource getSystemTextFont() { return themeFonts.getSystemFont(); }"
            },
            {
                "fromLine": 135,
                "toLine": 135,
                "oldContent": "    public FontUIResource getUserTextFont() { return userFont; }",
                "newContent": "    public FontUIResource getUserTextFont() { return themeFonts.getUserFont(); }"
            },
            {
                "fromLine": 139,
                "toLine": 139,
                "oldContent": "    public FontUIResource getMenuTextFont() { return controlFont; }",
                "newContent": "    public FontUIResource getMenuTextFont() { return themeFonts.getControlFont(); }"
            },
            {
                "fromLine": 143,
                "toLine": 143,
                "oldContent": "    public FontUIResource getSubTextFont() { return smallFont; }",
                "newContent": "    public FontUIResource getSubTextFont() { return themeFonts.getSmallFont(); }"
            },
            {
                "fromLine": 147,
                "toLine": 147,
                "oldContent": "    public FontUIResource getWindowTitleFont() { return windowTitleFont; }",
                "newContent": "    public FontUIResource getWindowTitleFont() { return themeFonts.getWindowTitleFont(); }"
            }
        ],
        "src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 45,
                "toLine": 47,
                "oldContent": "    private FigLine lineFig;\n    private FigRect rectFig;\n    ",
                "newContent": "    private LifeLineFigures lineFigures;"
            },
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "    static final int WIDTH = 150;",
                "newContent": ""
            },
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "    static final int HEIGHT = 500;",
                "newContent": ""
            },
            {
                "fromLine": 57,
                "toLine": 60,
                "oldContent": "        initialize(bounds.x, bounds.y);\n    }\n    \n    private void initialize(int x, int y) {",
                "newContent": "        lineFigures = new LifeLineFigures(bounds.x, bounds.y, WIDTH, HEIGHT, LINE_COLOR, LINE_WIDTH);\n        addFig(lineFigures.getRectFig());\n        addFig(lineFigures.getLineFig());"
            },
            {
                "fromLine": 62,
                "toLine": 74,
                "oldContent": "        rectFig = new FigRect(x, y, WIDTH, HEIGHT); \n        rectFig.setFilled(false);\n        rectFig.setLineWidth(0);\n        lineFig = new FigLine(x + WIDTH / 2, y, \n                x + WIDTH / 2, y + HEIGHT, LINE_COLOR);\n        lineFig.setDashed(true);\n        lineFig.setLineWidth(LINE_WIDTH);\n        \n        addFig(rectFig);\n        addFig(lineFig);\n    }",
                "newContent": ""
            },
            {
                "fromLine": 169,
                "toLine": 169,
                "oldContent": "                    lineFig.getX(),",
                "newContent": "                    lineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 170,
                "toLine": 170,
                "oldContent": "                    lineFig.getY(), ",
                "newContent": "                    lineFigures.getLineFig().getY(), "
            },
            {
                "fromLine": 171,
                "toLine": 171,
                "oldContent": "                    lineFig.getWidth(), ",
                "newContent": "                    lineFigures.getLineFig().getWidth(), "
            },
            {
                "fromLine": 172,
                "toLine": 172,
                "oldContent": "                    lineFig.getHeight(),",
                "newContent": "                    lineFigures.getLineFig().getHeight(),"
            },
            {
                "fromLine": 182,
                "toLine": 182,
                "oldContent": "                                    lineFig.getX(),",
                "newContent": "                                    lineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 183,
                "toLine": 183,
                "oldContent": "                                    lineFig.getY(),",
                "newContent": "                                    lineFigures.getLineFig().getY(),"
            },
            {
                "fromLine": 189,
                "toLine": 189,
                "oldContent": "                            lineFig.getX(),",
                "newContent": "                            lineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 190,
                "toLine": 190,
                "oldContent": "                            lineFig.getY(),",
                "newContent": "                            lineFigures.getLineFig().getY(),"
            },
            {
                "fromLine": 196,
                "toLine": 196,
                "oldContent": "                            lineFig.getHeight(),",
                "newContent": "                            lineFigures.getLineFig().getHeight(),"
            },
            {
                "fromLine": 205,
                "toLine": 205,
                "oldContent": "                            lineFig.getX(),",
                "newContent": "                            lineFigures.getLineFig().getX(),"
            },
            {
                "fromLine": 206,
                "toLine": 206,
                "oldContent": "                            lineFig.getY(),",
                "newContent": "                            lineFigures.getLineFig().getY(),"
            },
            {
                "fromLine": 207,
                "toLine": 207,
                "oldContent": "                            lineFig.getWidth(),",
                "newContent": "                            lineFigures.getLineFig().getWidth(),"
            },
            {
                "fromLine": 208,
                "toLine": 208,
                "oldContent": "                            lineFig.getHeight(),",
                "newContent": "                            lineFigures.getLineFig().getHeight(),"
            },
            {
                "fromLine": 217,
                "toLine": 217,
                "oldContent": "                    lineFig.getX() - FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                    lineFigures.getLineFig().getX() - FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 225,
                "toLine": 225,
                "oldContent": "                            lineFig.getX()",
                "newContent": "                            lineFigures.getLineFig().getX()"
            },
            {
                "fromLine": 226,
                "toLine": 226,
                "oldContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 234,
                "toLine": 234,
                "oldContent": "                            lineFig.getX()",
                "newContent": "                            lineFigures.getLineFig().getX()"
            },
            {
                "fromLine": 235,
                "toLine": 235,
                "oldContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,",
                "newContent": "                                    + FigActivation.DEFAULT_WIDTH / 2, ySender,"
            },
            {
                "fromLine": 243,
                "toLine": 243,
                "oldContent": "            lineFig.setHeight(ySender - getY());",
                "newContent": "            lineFigures.getLineFig().setHeight(ySender - getY());"
            },
            {
                "fromLine": 249,
                "toLine": 249,
                "oldContent": "            lineFig.setHeight(getHeight() - (currentActivation.getY() - getY()));",
                "newContent": "            lineFigures.getLineFig().setHeight(getHeight() - (currentActivation.getY() - getY()));"
            },
            {
               
                {
                    "fromLine": 249,
                    "toLine": 249,
                    "oldContent": "            lineFig.setHeight(getHeight() - (currentActivation.getY() - getY()));",
                    "newContent": "            lineFigures.getLineFig().setHeight(getHeight() - (currentActivation.getY() - getY()));"
                }
            