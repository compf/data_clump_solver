refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationParams.java:
	[
		fromLine:"		0",
		toLine:"		14",
		oldContent:"
				
",
		newContent:"
		package org.argouml.sequence2.diagram;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.Fig;
		
		public class ActivationParams {
		    private Object owner;
		    private int x;
		    private int y;
		    private int width;
		    private int height;
		    private DiagramSettings settings;
		    private Fig messageFig;
		
		    // Constructor and getters/setters
		}
				
",
,

	],
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java:
	[
		fromLine:"		120",
		toLine:"		140",
		oldContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            currentActivation = createActivationFig(
		                    getOwner(),
		                    lineFig.getX(),
		                    lineFig.getY(), 
		                    lineFig.getWidth(), 
		                    lineFig.getHeight(),
		                    getSettings(),
		                    null);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
		newContent:"
		    private List<FigActivation> createStandardActivations(
		                final List<FigMessage> figMessages) {        
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        // Check here if there are no incoming call actions
		        // if not then create an activation at the top of the lifeline
		        FigActivation currentActivation = null;
		        if (!hasIncomingCallActionFirst(figMessages)) {
		            ActivationParams params = new ActivationParams();
		            params.setOwner(getOwner());
		            params.setX(lineFig.getX());
		            params.setY(lineFig.getY());
		            params.setWidth(lineFig.getWidth());
		            params.setHeight(lineFig.getHeight());
		            params.setSettings(getSettings());
		            params.setMessageFig(null);
		            currentActivation = createActivationFig(params);
		        }
		        
		        // This counts the number of repeated call/returns that take place		
",
,
		fromLine:"		147",
		toLine:"		179",
		oldContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            currentActivation = createActivationFig(
		                                    getOwner(), 
		                                    lineFig.getX(), 
		                                    ySender, 
		                                    0, 
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            currentActivation = createActivationFig(
		                                    getOwner(),
		                                    lineFig.getX(),
		                                    lineFig.getY(),
		                                    0,
		                                    0,
		                                    getSettings(),
		                                    figMessage);
		                            activationsCount++;
		                        }
		                    } else {		
",
		newContent:"
		        for (FigMessage figMessage : figMessages) {
		            int ySender = 0;
		            
		            if (!figMessage.isSelfMessage()) {
		                if (isIncoming(figMessage)) {
		                    if (currentActivation == null) {
		                        if (figMessage.isSynchCallMessage()) {
		                            // if we are the dest and is a call action, create the 
		                            // activation, but don't add it until the height is set.
		                            ySender = figMessage.getFinalY();
		                            ActivationParams params = new ActivationParams();
		                            params.setOwner(getOwner());
		                            params.setX(lineFig.getX());
		                            params.setY(ySender);
		                            params.setWidth(0);
		                            params.setHeight(0);
		                            params.setSettings(getSettings());
		                            params.setMessageFig(figMessage);
		                            currentActivation = createActivationFig(params);
		                            activationsCount++;
		                        } else if (figMessage.isCreateMessage()) {
		                            // if we are the destination of a create action,
		                            // create the entire activation
		                            ActivationParams params = new ActivationParams();
		                            params.setOwner(getOwner());
		                            params.setX(lineFig.getX());
		                            params.setY(lineFig.getY());
		                            params.setWidth(0);
		                            params.setHeight(0);
		                            params.setSettings(getSettings());
		                            params.setMessageFig(figMessage);
		                            currentActivation = createActivationFig(params);
		                            activationsCount++;
		                        }
		                    } else {		
",
,
		fromLine:"		244",
		toLine:"		267",
		oldContent:"
		     * Return true if the given message fig is pointing out from this lifeline.
		     * @param messageFig
		     * @return true if the message is outgoing
		     */
		    private boolean isOutgoing(FigMessage messageFig) {
		        return (messageFig.getSourceFigNode().getOwner() == getOwner());
		    }
		    
		    private FigActivation createActivationFig(ActivationParams params) {
		            return new FigActivation(
		                params.getOwner(),
		                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),
		                params.getSettings(),
		                params.getMessageFig());
		            }
		            
		        private List<FigActivation> createStackedActivations(
		            final List<FigMessage> figMessages) {
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        FigActivation currentAct = null;
		        }		
",
		newContent:"
		     * Return true if the given message fig is pointing out from this lifeline.
		     * @param messageFig
		     * @return true if the message is outgoing
		     */
		    private boolean isOutgoing(FigMessage messageFig) {
		        return (messageFig.getSourceFigNode().getOwner() == getOwner());
		    }
		    
		    private FigActivation createActivationFig(ActivationParams params) {
		            return new FigActivation(
		                params.getOwner(),
		                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),
		                params.getSettings(),
		                (FigMessage) params.getMessageFig());
		            }
		            
		        private List<FigActivation> createStackedActivations(
		            final List<FigMessage> figMessages) {
		        
		        final List<FigActivation> newActivations =
		            new LinkedList<FigActivation>();
		        
		        FigActivation currentAct = null;
		        }		
",
,

	],

}
extractedClasses:
{

}
