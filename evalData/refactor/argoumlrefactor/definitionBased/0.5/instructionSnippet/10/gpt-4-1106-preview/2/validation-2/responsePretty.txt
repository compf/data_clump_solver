"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/ActivationParams.java": [
            {
                "fromLine": 0,
                "toLine": 14,
                "oldContent": "",
                "newContent": "package org.argouml.sequence2.diagram;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.Fig;\n\npublic class ActivationParams {\n    private Object owner;\n    private int x;\n    private int y;\n    private int width;\n    private int height;\n    private DiagramSettings settings;\n    private Fig messageFig;\n\n    // Constructor and getters/setters\n}\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/FigLifeLine.java": [
            {
                "fromLine": 120,
                "toLine": 140,
                "oldContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            currentActivation = createActivationFig(\n                    getOwner(),\n                    lineFig.getX(),\n                    lineFig.getY(), \n                    lineFig.getWidth(), \n                    lineFig.getHeight(),\n                    getSettings(),\n                    null);\n        }\n        \n        // This counts the number of repeated call/returns that take place",
                "newContent": "    private List<FigActivation> createStandardActivations(\n                final List<FigMessage> figMessages) {        \n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        // Check here if there are no incoming call actions\n        // if not then create an activation at the top of the lifeline\n        FigActivation currentActivation = null;\n        if (!hasIncomingCallActionFirst(figMessages)) {\n            ActivationParams params = new ActivationParams();\n            params.setOwner(getOwner());\n            params.setX(lineFig.getX());\n            params.setY(lineFig.getY());\n            params.setWidth(lineFig.getWidth());\n            params.setHeight(lineFig.getHeight());\n            params.setSettings(getSettings());\n            params.setMessageFig(null);\n            currentActivation = createActivationFig(params);\n        }\n        \n        // This counts the number of repeated call/returns that take place"
            },
            {
                "fromLine": 147,
                "toLine": 179,
                "oldContent": "        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            currentActivation = createActivationFig(\n                                    getOwner(), \n                                    lineFig.getX(), \n                                    ySender, \n                                    0, \n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            currentActivation = createActivationFig(\n                                    getOwner(),\n                                    lineFig.getX(),\n                                    lineFig.getY(),\n                                    0,\n                                    0,\n                                    getSettings(),\n                                    figMessage);\n                            activationsCount++;\n                        }\n                    } else {",
                "newContent": "        for (FigMessage figMessage : figMessages) {\n            int ySender = 0;\n            \n            if (!figMessage.isSelfMessage()) {\n                if (isIncoming(figMessage)) {\n                    if (currentActivation == null) {\n                        if (figMessage.isSynchCallMessage()) {\n                            // if we are the dest and is a call action, create the \n                            // activation, but don't add it until the height is set.\n                            ySender = figMessage.getFinalY();\n                            ActivationParams params = new ActivationParams();\n                            params.setOwner(getOwner());\n                            params.setX(lineFig.getX());\n                            params.setY(ySender);\n                            params.setWidth(0);\n                            params.setHeight(0);\n                            params.setSettings(getSettings());\n                            params.setMessageFig(figMessage);\n                            currentActivation = createActivationFig(params);\n                            activationsCount++;\n                        } else if (figMessage.isCreateMessage()) {\n                            // if we are the destination of a create action,\n                            // create the entire activation\n                            ActivationParams params = new ActivationParams();\n                            params.setOwner(getOwner());\n                            params.setX(lineFig.getX());\n                            params.setY(lineFig.getY());\n                            params.setWidth(0);\n                            params.setHeight(0);\n                            params.setSettings(getSettings());\n                            params.setMessageFig(figMessage);\n                            currentActivation = createActivationFig(params);\n                            activationsCount++;\n                        }\n                    } else {"
            },
            {
                "fromLine": 244,
                "toLine": 267,
                "oldContent": "     * Return true if the given message fig is pointing out from this lifeline.\n     * @param messageFig\n     * @return true if the message is outgoing\n     */\n    private boolean isOutgoing(FigMessage messageFig) {\n        return (messageFig.getSourceFigNode().getOwner() == getOwner());\n    }\n    \n    private FigActivation createActivationFig(ActivationParams params) {\n            return new FigActivation(\n                params.getOwner(),\n                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),\n                params.getSettings(),\n                params.getMessageFig());\n            }\n            \n        private List<FigActivation> createStackedActivations(\n            final List<FigMessage> figMessages) {\n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        FigActivation currentAct = null;\n        }",
                "newContent": "     * Return true if the given message fig is pointing out from this lifeline.\n     * @param messageFig\n     * @return true if the message is outgoing\n     */\n    private boolean isOutgoing(FigMessage messageFig) {\n        return (messageFig.getSourceFigNode().getOwner() == getOwner());\n    }\n    \n    private FigActivation createActivationFig(ActivationParams params) {\n            return new FigActivation(\n                params.getOwner(),\n                new Rectangle(params.getX(), params.getY(), params.getWidth(), params.getHeight()),\n                params.getSettings(),\n                (FigMessage) params.getMessageFig());\n            }\n            \n        private List<FigActivation> createStackedActivations(\n            final List<FigMessage> figMessages) {\n        \n        final List<FigActivation> newActivations =\n            new LinkedList<FigActivation>();\n        \n        FigActivation currentAct = null;\n        }"
            }
        ]
    },
    "extractedClasses": {}
}"