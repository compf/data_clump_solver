refactorings:
{
	/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java:
	[
		fromLine:"		13",
		toLine:"		21",
		oldContent:"
		
		package org.argouml.activity2.diagram;
		
		import org.argouml.activity2.diagram.settings.FigDimensions;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
		newContent:"
		
		package org.argouml.activity2.diagram;
		
		import java.awt.Dimension;
		import java.awt.Rectangle;
		import org.argouml.activity2.diagram.settings.FigDimensions;
		
		import org.argouml.uml.diagram.DiagramSettings;
		import org.tigris.gef.presentation.FigGroup;
		import org.tigris.gef.presentation.FigNode;
				
",
,
		fromLine:"		35",
		toLine:"		45",
		oldContent:"
		     * 
		     * @param owner the owning UML element
		     * @param bounds rectangle describing bounds
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final Rectangle bounds,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(bounds);
		        this.settings = settings;
		    }		
",
		newContent:"
		     * 
		     * @param owner the owning UML element
		     * @param dimensions object containing dimensions
		     * @param settings rendering settings
		     */
		    FigBaseNode(final Object owner, final FigDimensions dimensions,
		            final DiagramSettings settings) {
		        super(owner);
		        setBounds(dimensions.toRectangle());
		        this.settings = settings;
		    }		
",
,
		fromLine:"		54",
		toLine:"		81",
		oldContent:"
		    public boolean isDragConnectable() {
		        return false;
		    }
		    
		    @Override
		    public Dimension getMinimumSize() {
		        return displayState.getMinimumSize();
		    }
		
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(final FigDimensions dimensions) {
		
		        _x = dimensions.getX();
		        _y = dimensions.getY();
		        _w = dimensions.getWidth();		
",
		newContent:"
		    public boolean isDragConnectable() {
		        return false;
		    }
		    
		    @Override
		    public Dimension getMinimumSize() {
		        return displayState.getMinimumSize();
		    }
		
		    public void setNameDiagramElement(DiagramElement name) {
		    }
		
		    // TODO: Move an empty implementation to FigGroup in GEF
		    protected void positionChildren() {
		        Rectangle myBounds = getBounds();
		        if (displayState != null) {
		            displayState.setBounds(myBounds);
		        }
		//      calcBounds();
		        updateEdges();
		    }
		    
		    @Override
		    protected void setBoundsImpl(int x, int y, int w, int h) {
		        _x = x;
		        _y = y;
		        _w = w;
		        _h = h;
		        firePropChange(		
",
		newContentPost:"
		, _x, x, _y, y);
		        calcBounds();
		    }
				
",
,
		fromLine:"		92",
		toLine:"		102",
		oldContent:"
		     */
		    public void calcBounds() {
		        if (getGroup() != null) {
		            ((FigGroup) getGroup()).calcBounds();
		        } else {
		            final Dimension min = getMinimumSize();
		            int maxw = Math.max(getWidth(), min.width);
		            int maxh = Math.max(getHeight(), min.height);
		            setBounds(_x, _y, maxw, maxh);
		        }
		    }		
",
		newContent:"
		     */
		    public void calcBounds() {
		        if (getGroup() != null) {
		            ((FigGroup) getGroup()).calcBounds();
		        } else {
		            final Dimension min = getMinimumSize();
		            int maxw = Math.max(_w, min.width);
		            int maxh = Math.max(_h, min.height);
		            setBounds(_x, _y, maxw, maxh);
		        }
		    }		
",
,

	],

}
