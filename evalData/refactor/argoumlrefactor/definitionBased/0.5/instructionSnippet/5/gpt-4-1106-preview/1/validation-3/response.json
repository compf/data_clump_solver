{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/argoumlrefactor/src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigBaseNode.java": [
            {
                "fromLine": 13,
                "toLine": 21,
                "oldContent": "\npackage org.argouml.activity2.diagram;\n\nimport org.argouml.activity2.diagram.settings.FigDimensions;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigGroup;\nimport org.tigris.gef.presentation.FigNode;\n",
                "newContent": "\npackage org.argouml.activity2.diagram;\n\nimport java.awt.Dimension;\nimport java.awt.Rectangle;\nimport org.argouml.activity2.diagram.settings.FigDimensions;\n\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.presentation.FigGroup;\nimport org.tigris.gef.presentation.FigNode;\n"
            },
            {
                "fromLine": 35,
                "toLine": 45,
                "oldContent": "     * \n     * @param owner the owning UML element\n     * @param bounds rectangle describing bounds\n     * @param settings rendering settings\n     */\n    FigBaseNode(final Object owner, final Rectangle bounds,\n            final DiagramSettings settings) {\n        super(owner);\n        setBounds(bounds);\n        this.settings = settings;\n    }",
                "newContent": "     * \n     * @param owner the owning UML element\n     * @param dimensions object containing dimensions\n     * @param settings rendering settings\n     */\n    FigBaseNode(final Object owner, final FigDimensions dimensions,\n            final DiagramSettings settings) {\n        super(owner);\n        setBounds(dimensions.toRectangle());\n        this.settings = settings;\n    }"
            },
            {
                "fromLine": 54,
                "toLine": 81,
                "oldContent": "    public boolean isDragConnectable() {\n        return false;\n    }\n    \n    @Override\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n    }\n\n    // TODO: Move an empty implementation to FigGroup in GEF\n    protected void positionChildren() {\n        Rectangle myBounds = getBounds();\n        if (displayState != null) {\n            displayState.setBounds(myBounds);\n        }\n//      calcBounds();\n        updateEdges();\n    }\n    \n    @Override\n    protected void setBoundsImpl(final FigDimensions dimensions) {\n\n        _x = dimensions.getX();\n        _y = dimensions.getY();\n        _w = dimensions.getWidth();",
                "newContent": "    public boolean isDragConnectable() {\n        return false;\n    }\n    \n    @Override\n    public Dimension getMinimumSize() {\n        return displayState.getMinimumSize();\n    }\n\n    public void setNameDiagramElement(DiagramElement name) {\n    }\n\n    // TODO: Move an empty implementation to FigGroup in GEF\n    protected void positionChildren() {\n        Rectangle myBounds = getBounds();\n        if (displayState != null) {\n            displayState.setBounds(myBounds);\n        }\n//      calcBounds();\n        updateEdges();\n    }\n    \n    @Override\n    protected void setBoundsImpl(int x, int y, int w, int h) {\n        _x = x;\n        _y = y;\n        _w = w;\n        _h = h;\n        firePropChange(",
                "newContentPost": ", _x, x, _y, y);\n        calcBounds();\n    }\n"
            },
            {
                "fromLine": 92,
                "toLine": 102,
                "oldContent": "     */\n    public void calcBounds() {\n        if (getGroup() != null) {\n            ((FigGroup) getGroup()).calcBounds();\n        } else {\n            final Dimension min = getMinimumSize();\n            int maxw = Math.max(getWidth(), min.width);\n            int maxh = Math.max(getHeight(), min.height);\n            setBounds(_x, _y, maxw, maxh);\n        }\n    }",
                "newContent": "     */\n    public void calcBounds() {\n        if (getGroup() != null) {\n            ((FigGroup) getGroup()).calcBounds();\n        } else {\n            final Dimension min = getMinimumSize();\n            int maxw = Math.max(_w, min.width);\n            int maxh = Math.max(_h, min.height);\n            setBounds(_x, _y, maxw, maxh);\n        }\n    }"
            }
        ]
    }
}