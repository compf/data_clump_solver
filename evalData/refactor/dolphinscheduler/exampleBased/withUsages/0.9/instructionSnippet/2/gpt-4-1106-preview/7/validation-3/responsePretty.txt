"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 51,
                "toLine": 55,
                "oldContent": "@TableField(value = \"title\")\n\n    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n",
                "newContent": "@TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n"
            },
            {
                "fromLine": 60,
                "toLine": 64,
                "oldContent": "private String log;\n\n    private AlertData alertData;\n\n    @TableField(\"create_time\")",
                "newContent": "private String log;\n\n    private String content;\n    private Integer alertGroupId;\n\n    @TableField(\"create_time\")"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 141,
                "toLine": 145,
                "oldContent": "public void init(TaskInstanceInitializationParameters initParameters) {\n        this.host = initParameters.getHost();\n        this.startTime = initParameters.getStartTime();",
                "newContent": "public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 276,
                "toLine": 280,
                "oldContent": "WorkflowInstanceQueryParameters queryParameters,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,",
                "newContent": "@Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"host\") String host,\n                                                              @Param(\"startTime\") Date startTime,\n                                                              @Param(\"endTime\") Date endTime,"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 170,
                "toLine": 175,
                "oldContent": "this.name = String.join(\"-\",\n                workflowDefinition.getName(),\n                String.valueOf(workflowDefinition.getVersion()),\n                DateUtils.getCurrentTimeStamp());\n    }",
                "newContent": "this.name = String.join(\"-\",\n                workflowDefinition.getName(),\n                String.valueOf(workflowDefinition.getVersion()),\n                DateUtils.getCurrentTimeStamp());\n    }"
            },
            {
                "fromLine": 219,
                "toLine": 230,
                "oldContent": "this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.setStateHistory(JSONUtils.toJsonString(stateDescList));\n    }\n",
                "newContent": "this.state = state;\n        if (StringUtils.isEmpty(this.stateHistory)) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.stateHistory, StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.stateHistory = JSONUtils.toJsonString(stateDescList);\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 99,
                "toLine": 114,
                "oldContent": "this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();\n        this.conditionParams = processTaskRelationLog.getConditionParams();\n\n        this.createTime = processTaskRelationLog.getCreateTime();\n        this.updateTime = new Date();\n    }",
                "newContent": "this.name = processTaskRelationLog.name;\n        this.workflowDefinitionVersion = processTaskRelationLog.workflowDefinitionVersion;\n        this.projectCode = processTaskRelationLog.projectCode;\n        this.workflowDefinitionCode = processTaskRelationLog.workflowDefinitionCode;\n        this.preTaskCode = processTaskRelationLog.preTaskCode;\n        this.preTaskVersion = processTaskRelationLog.preTaskVersion;\n        this.postTaskCode = processTaskRelationLog.postTaskCode;\n        this.postTaskVersion = processTaskRelationLog.postTaskVersion;\n        this.conditionType = processTaskRelationLog.conditionType;\n        this.conditionParams = processTaskRelationLog.conditionParams;\n\n        this.createTime = processTaskRelationLog.createTime;\n        this.updateTime = new Date();\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 33,
                "toLine": 53,
                "oldContent": "this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());\n        this.setConditionType(workflowTaskRelation.getConditionType());\n        this.setConditionParams(workflowTaskRelation.getConditionParams());\n        this.setCreateTime(workflowTaskRelation.getCreateTime());\n        this.setUpdateTime(workflowTaskRelation.getUpdateTime());\n    }\n",
                "newContent": "this.name = workflowTaskRelation.name;\n        this.workflowDefinitionCode = workflowTaskRelation.workflowDefinitionCode;\n        this.workflowDefinitionVersion = workflowTaskRelation.workflowDefinitionVersion;\n        this.projectCode = workflowTaskRelation.projectCode;\n        this.preTaskCode = workflowTaskRelation.preTaskCode;\n        this.preTaskVersion = workflowTaskRelation.preTaskVersion;\n        this.postTaskCode = workflowTaskRelation.postTaskCode;\n        this.postTaskVersion = workflowTaskRelation.postTaskVersion;\n        this.conditionType = workflowTaskRelation.conditionType;\n        this.conditionParams = workflowTaskRelation.conditionParams;\n        this.createTime = workflowTaskRelation.createTime;\n        this.updateTime = workflowTaskRelation.updateTime;\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 39,
                "toLine": 78,
                "oldContent": "this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n    }\n",
                "newContent": "this.code = taskDefinition.code;\n        this.version = taskDefinition.version;\n        this.name = taskDefinition.name;\n        this.description = taskDefinition.description;\n        this.userId = taskDefinition.userId;\n        this.userName = taskDefinition.userName;\n        this.workerGroup = taskDefinition.workerGroup;\n        this.environmentCode = taskDefinition.environmentCode;\n        this.projectCode = taskDefinition.projectCode;\n        this.projectName = taskDefinition.projectName;\n        this.resourceIds = taskDefinition.resourceIds;\n        this.taskParams = taskDefinition.taskParams;\n        this.taskParamList = JSONUtils.toList(taskDefinition.taskParams, Property.class);\n        this.taskParamMap = JSONUtils.toMap(taskDefinition.taskParams);\n        this.taskPriority = taskDefinition.taskPriority;\n        this.taskExecuteType = taskDefinition.taskExecuteType;\n        this.timeoutNotifyStrategy = taskDefinition.timeoutNotifyStrategy;\n        this.taskType = taskDefinition.taskType;\n        this.timeout = taskDefinition.timeout;\n        this.delayTime = taskDefinition.delayTime;\n        this.timeoutFlag = taskDefinition.timeoutFlag;\n        this.updateTime = taskDefinition.updateTime;\n        this.createTime = taskDefinition.createTime;\n        this.failRetryInterval = taskDefinition.failRetryInterval;\n        this.failRetryTimes = taskDefinition.failRetryTimes;\n        this.flag = taskDefinition.flag;\n        this.isCache = taskDefinition.isCache;\n        this.modifyBy = taskDefinition.modifyBy;\n        this.cpuQuota = taskDefinition.cpuQuota;\n        this.memoryMax = taskDefinition.memoryMax;\n        this.taskExecuteType = taskDefinition.taskExecuteType;\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 51,
                "toLine": 55,
                "oldContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.getAddrList();\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();",
                "newContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.addrList;\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 39,
                "toLine": 48,
                "oldContent": "public void deleteByUserId(Integer userId) {\n        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));\n    }\n\n    @Override\n    public List<Session> queryByUserId(Integer userId) {\n        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));\n    }\n",
                "newContent": "public void deleteByUserId(Integer userId) {\n        mybatisMapper.delete(new QueryWrapper<>().lambda().eq(Session::getUserId, userId));\n    }\n\n    @Override\n    public List<Session> queryByUserId(Integer userId) {\n        return mybatisMapper.selectList(new QueryWrapper<>().lambda().eq(Session::getUserId, userId));\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {\n                    return pluginDefine.getId();\n                }\n                throw new TaskPluginException(\n                        String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));\n            } catch (TaskPluginException ex) {\n                throw ex;\n            } catch (Exception ex) {\n                log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),\n                        pluginDefine.getPluginType());\n                if (currPluginDefine == null) {\n                    throw new TaskPluginException(\n                            String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));\n                }\n            }\n        }\n        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {\n            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());\n            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());\n            pluginDefineMapper.updateById(currPluginDefine);\n        }\n        return currPluginDefine.getId();\n    }\n",
                "newContent": "if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.id != null) {\n                    return pluginDefine.id;\n                }\n                throw new TaskPluginException(\n                        String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                pluginDefine.pluginName, pluginDefine.pluginType));\n            } catch (TaskPluginException ex) {\n                throw ex;\n            } catch (Exception ex) {\n                log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.pluginName,\n                        pluginDefine.pluginType);\n                if (currPluginDefine == null) {\n                    throw new TaskPluginException(\n                            String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                    pluginDefine.pluginName, pluginDefine.pluginType));\n                }\n            }\n        }\n        if (!Objects.equals(currPluginDefine.pluginParams, pluginDefine.pluginParams)) {\n            currPluginDefine.updateTime = pluginDefine.updateTime;\n            currPluginDefine.pluginParams = pluginDefine.pluginParams;\n            pluginDefineMapper.updateById(currPluginDefine);\n        }\n        return currPluginDefine.id;\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 33,
                "toLine": 48,
                "oldContent": "public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());\n        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());\n        this.setCreateTime(workflowDefinition.getCreateTime());",
                "newContent": "public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.code = workflowDefinition.code;\n        this.name = workflowDefinition.name;\n        this.version = workflowDefinition.version;\n        this.releaseState = workflowDefinition.releaseState;\n        this.projectCode = workflowDefinition.projectCode;\n        this.description = workflowDefinition.description;\n        this.globalParams = workflowDefinition.globalParams;\n        this.globalParamList = workflowDefinition.globalParamList;\n        this.globalParamMap = workflowDefinition.globalParamMap;\n        this.createTime = workflowDefinition.createTime;"
            }
        ]
    },
    "extractedClasses": {}
}"