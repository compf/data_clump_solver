{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 84,
                "toLine": 92,
                "oldContent": "public Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n}\n    }",
                "newContent": "public Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }"
            },
            {
                "fromLine": 99,
                "toLine": 107,
                "oldContent": "public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                @RequestParam(\"code\") long code) {\n        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);\n    }\n    @Parameters({\n            @Parameter(name = \"codes\", description = \"PROJECT_PARAMETER_CODE\", required = true, schema = @Schema(implementation = String.class))",
                "newContent": "public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                @RequestParam(\"code\") long code) {\n        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);\n    }"
            },
            {
                "fromLine": 110,
                "toLine": 118,
                "oldContent": "public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      @RequestParam(\"codes\") String codes) {\n        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);\n    }\n    @Parameters({\n            @Parameter(name = \"searchVal\", description = \"SEARCH_VAL\", required = false, schema = @Schema(implementation = String.class))",
                "newContent": "public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      @RequestParam(\"codes\") String codes) {\n        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);\n    }"
            },
            {
                "fromLine": 123,
                "toLine": 138,
                "oldContent": "public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                                  @RequestParam(value = \"projectParameterDataType\", required = false) String projectParameterDataType,\n                                                  @RequestParam(\"pageNo\") Integer pageNo,\n                                                  @RequestParam(\"pageSize\") Integer pageSize) {\n        checkPageParams(pageNo, pageSize);\n        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);\n    }\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", schema = @Schema(implementation = long.class, example = \"123456\"))",
                "newContent": "public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                                  @RequestParam(value = \"projectParameterDataType\", required = false) String projectParameterDataType,\n                                                  @RequestParam(\"pageNo\") Integer pageNo,\n                                                  @RequestParam(\"pageSize\") Integer pageSize) {\n        checkPageParams(pageNo, pageSize);\n        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);\n    }"
            },
            {
                "fromLine": 141,
                "toLine": 149,
                "oldContent": "public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              @PathVariable(\"code\") long code) {\n        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);\n    }\n",
                "newContent": "public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              @PathVariable(\"code\") long code) {\n        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 111,
                "toLine": 129,
                "oldContent": "WarningType warningType, int warningGroupId, FailureStrategy failureStrategy,\n                                 Priority workflowInstancePriority, String workerGroup, String tenantCode, Long environmentCode) {\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workerGroup,\n                tenantCode,\n                environmentCode,\n                workflowInstancePriority);\n\n        return returnDataList(result);",
                "newContent": "Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workerGroup,\n                tenantCode,\n                environmentCode,\n                workflowInstancePriority);\n\n        return returnDataList(result);"
            },
            {
                "fromLine": 203,
                "toLine": 215,
                "oldContent": "return Result.success(true);\n    }\n     * query schedule list paging\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param pageNo page number\n     * @param pageSize page size\n     * @param searchVal search value\n     * @return schedule list page\n     */\n    @Operation(summary = \"queryScheduleListPaging\", description = \"QUERY_SCHEDULE_LIST_PAGING_NOTES\")",
                "newContent": "return Result.success(true);\n    }\n    @Operation(summary = \"queryScheduleListPaging\", description = \"QUERY_SCHEDULE_LIST_PAGING_NOTES\")"
            },
            {
                "fromLine": 337,
                "toLine": 344,
                "oldContent": "        // Implementation here\n}\n                warningType, warningGroupId, failureStrategy, workerGroup, tenantCode, environmentCode, workflowInstancePriority);\n        return returnDataList(result);\n    }\n}",
                "newContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workerGroup, tenantCode, environmentCode, workflowInstancePriority);\n        return returnDataList(result);\n    }"
            }
        ]
    },
    "extractedClasses": {}
}