{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 70,
                "toLine": 74,
                "oldContent": "    }\n\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);",
                "newContent": "    }\n\n    public HttpResponse execute(ExecutionRequest executionRequest) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", executionRequest.getLoginUser());"
            },
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "    }\n\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "    }\n\n    public HttpResponse executeTask(TaskExecutionRequest taskExecutionRequest) {\n        Map<String, Object> params = new HashMap<>();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 269,
                "toLine": 286,
                "oldContent": "     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);\n\n    /**",
                "newContent": "     * @param page                  page\n     * @param instanceQuery          workflow instance query parameters\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"instanceQuery\") WorkflowInstanceQuery instanceQuery);\n\n    /**"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;",
                "newContent": "\n    public void init(ExecutionEnvironment executionEnvironment) {\n        this.host = executionEnvironment.getHost();\n        this.startTime = executionEnvironment.getStartTime();\n        this.executePath = executionEnvironment.getExecutePath();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 31,
                "oldContent": "\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.api.dto.ProjectParameterRequest;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(ProjectParameterRequest projectParameterRequest);\n\n    Result updateProjectParameter(ProjectParameterRequest projectParameterRequest);\n\n    Result deleteProjectParametersByCode(ProjectParameterRequest projectParameterRequest);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 68,
                "toLine": 78,
                "oldContent": "    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @Parameter(name = \"code\", description = \"CODE\", required = true) @PathVariable long code,\n                                         @RequestParam(value = \"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(projectParameterRequest);\n    }\n"
            },
            {
                "fromLine": 87,
                "toLine": 98,
                "oldContent": "    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(projectParameterRequest);\n    }\n"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 49,
                "toLine": 55,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        User loginUser = getGeneralUser();\n        long projectCode = 1L;\n        long code = 1L;\n        String parameterName = \"key\";\n        String parameterValue = \"value\";\n        String parameterDataType = DataType.VARCHAR.name();\n\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, parameterName, parameterValue, parameterDataType);\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, projectCode, code, parameterName, parameterValue, parameterDataType);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 60,
                "toLine": 66,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        User loginUser = getGeneralUser();\n        long projectCode = 1L;\n        long code = 1L;\n        String parameterName = \"key\";\n        String parameterValue = \"value\";\n        String parameterDataType = DataType.LONG.name();\n\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, parameterName, parameterValue, parameterDataType);\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, projectCode, code, parameterName, parameterValue, parameterDataType);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 78,
                "toLine": 82,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 0, \"key\", \"value\", DataType.VARCHAR.name());\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(projectParameterRequest);\n        assertNull(result.getData());"
            },
            {
                "fromLine": 91,
                "toLine": 95,
                "oldContent": "            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "            ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 0, \"key\", \"value\", DataType.VARCHAR.name());\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(projectParameterRequest);\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 99,
                "toLine": 103,
                "oldContent": "        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 0, \"key\", \"value\", DataType.VARCHAR.name());\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(projectParameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 106,
                "toLine": 110,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 0, \"key1\", \"value\", DataType.VARCHAR.name());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(projectParameterRequest);\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 112,
                "toLine": 116,
                "oldContent": "        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        // SUCCESS\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 0, \"key1\", \"value\", DataType.VARCHAR.name());\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(projectParameterRequest);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 124,
                "toLine": 128,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(projectParameterRequest);\n        assertNull(result.getData());"
            },
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());",
                "newContent": "                .thenReturn(true);\n        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(projectParameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(projectParameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 149,
                "toLine": 153,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\", DataType.VARCHAR.name());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = project
    {
        "refactorings": {
            "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
                {
                    "fromLine": 17,
                    "toLine": 31,
                    "oldContent": "\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                    "newContent": "\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(ProjectParameterCreation projectParameterCreation);\n\n    Result updateProjectParameter(ProjectParameterUpdate projectParameterUpdate);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);"
                }
            ],
            "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
                {
                    "fromLine": 68,
                    "toLine": 78,
                    "oldContent": "    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                    "newContent": "    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         ProjectParameterCreation projectParameterCreation) {\n        return projectParameterService.createProjectParameter(projectParameterCreation);\n    }\n"
                },
                {
                    "fromLine": 87,
                    "toLine": 98,
                    "oldContent": "    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                    "newContent": "    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         ProjectParameterUpdate projectParameterUpdate) {\n        return projectParameterService.updateProjectParameter(projectParameterUpdate);\n    }\n"
                }
            ],
            "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
                {
                    "fromLine": 108,
                    "toLine": 133,
                    "oldContent": "    @ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n",
                    "newContent": "    @ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(ScheduleCreation scheduleCreation) {\n        return schedulerService.insertSchedule(scheduleCreation);\n"
                }
            ],
            "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
                {
                    "fromLine": 17,
                    "toLine": 51,
                    "oldContent": "\npackage org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;\n    }\n}",
                    "newContent": "\npackage org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private final String title;\n\n    private final String content;\n\n    private final Integer alertGroupId;\n\n    public TaskAlertInfo(String title, String content, Integer alertGroupId) {\n        this.title = title;\n        this.content = content;\n        this.alertGroupId = alertGroupId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n}"
                }
            ],
            "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
                {
                    "fromLine": 50,
                    "toLine": 57,
                    "oldContent": "\n    @TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(value = \"alert_status\")",
                    "newContent": "\n    @TableField(value = \"title\")\n    private final String title;\n\n    @TableField(value = \"content\")\n    private final String content;\n\n    @TableField(value = \"alert_status\")"
                },
                {
                    "fromLine": 65,
                    "toLine": 69,
                    "oldContent": "\n    @TableField(\"alertgroup_id\")\n    private Integer alertGroupId;\n\n    @TableField(\"create_time\")",
                    "newContent": "\n    @TableField(\"alertgroup_id\")\n    private final Integer alertGroupId;\n\n    @TableField(\"create_time\")"
                }
            ]
        },
        "extractedClasses": {
            "org/apache/dolphinscheduler/api/dto/ProjectParameterRequest.java": "package org.apache.dolphinscheduler.api.dto;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterRequest {\n\n    private User loginUser;\n    private long projectCode;\n    private long code;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, Getters, and Setters\n}\n",
            "org/apache/dolphinscheduler/api/dto/ProjectParameterCreation.java": "package org.apache.dolphinscheduler.api.dto;\n\npublic class ProjectParameterCreation {\n    private final User loginUser;\n    private final long projectCode;\n    private final String projectParameterName;\n    private final String projectParameterValue;\n    private final String projectParameterDataType;\n\n    // Constructor, Getters, and possibly relevant methods\n}\n",
            "org/apache/dolphinscheduler/api/dto/ProjectParameterUpdate.java": "package org.apache.dolphinscheduler.api.dto;\n\npublic class ProjectParameterUpdate {\n    private final User loginUser;\n    private final long projectCode;\n    private final long code;\n    private final String projectParameterName;\n    private final String projectParameterValue;\n    private final String projectParameterDataType;\n\n    // Constructor, Getters, and possibly relevant methods\n}\n",
            "org/apache/dolphinscheduler/api/dto/ScheduleCreation.java": "package org.apache.dolphinscheduler.api.dto;\n\nimport org.apache.dolphinscheduler.common.enums.*;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ScheduleCreation {\n    private final User loginUser;\n    private final long projectCode;\n    private final long workflowDefinitionCode;\n    private final String schedule;\n    private final WarningType warningType;\n    private final int warningGroupId;\n    private final FailureStrategy failureStrategy;\n    private final Priority workflowInstancePriority;\n    private final String workerGroup;\n    private final String tenantCode;\n    private final Long environmentCode;\n\n    // Constructor, Getters, and possibly relevant methods\n}\n",
            "org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private final String title;\n\n    private final String content;\n\n    private final Integer alertGroupId;\n\n    public TaskAlertInfo(String title, String content, Integer alertGroupId) {\n        this.title = title;\n        this.content = content;\n        this.alertGroupId = alertGroupId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n}\n",
            "org/apache/dolphinscheduler/dao/entity/Alert.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\nimport org.apache.dolphinscheduler.common.enums.AlertType;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_ds_alert\")\npublic class Alert {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private int id;\n\n    // Other fields...\n\n    @TableField(value = \"title\")\n    private final String title;\n\n    @TableField(value = \"content\")\n    private final String content;\n\n    @TableField(\"alertgroup_id\")\n    private final Integer alertGroupId;\n\n    // Other fields...\n}\n"
        }
    }
   