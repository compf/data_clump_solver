{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 70,
                "toLine": 74,
                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);",
                "newContent": "    public HttpResponse execute(ExecutionRequest executionRequest) {\n        Map<String, Object> params = executionRequest.toMap();"
            },
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "    public HttpResponse executeTask(ExecutionTaskRequest executionTaskRequest) {\n        Map<String, Object> params = executionTaskRequest.toMap();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 269,
                "toLine": 286,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(WorkflowInstanceQuery workflowInstanceQuery);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 41,
                "toLine": 75,
                "oldContent": "    private Integer id;\n\n    private String name;\n\n    private String taskType;\n    private String workflowInstanceName;\n\n    private Long projectCode;\n\n    private long taskCode;\n    private Date endTime;\n\n    private String host;\n\n    private String executePath;",
                "newContent": "    private TaskInstanceKey taskInstanceKey;"
            },
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;",
                "newContent": "\n    public void init(ExecutionEnvironmentPayload environmentPayload) {\n        this.taskInstanceKey.setHost(environmentPayload.getHost());\n        this.startTime = environmentPayload.getStartTime();\n        this.executePath = environmentPayload.getExecutePath();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 31,
                "oldContent": "public interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "public interface ProjectParameterService {\n\n    Result createProjectParameter(ProjectParameterRequest parameterRequest);\n\n    Result updateProjectParameter(ProjectParameterRequest parameterRequest);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 68,
                "toLine": 78,
                "oldContent": "@ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "@ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(ProjectParameterRequest parameterRequest) {\n        return projectParameterService.createProjectParameter(parameterRequest);\n    }\n"
            },
            {
                "fromLine": 87,
                "toLine": 98,
                "oldContent": "@ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "@ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(ProjectParameterRequest parameterRequest) {\n        return projectParameterService.updateProjectParameter(parameterRequest);\n    }\n"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 49,
                "toLine": 55,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, \"key\", \"value\", DataType.VARCHAR.name());\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(parameterRequest);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 60,
                "toLine": 66,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, 1L, \"key\", \"value\", DataType.LONG.name());\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(parameterRequest);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 78,
                "toLine": 82,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(parameterRequest);\n        assertNull(result.getData());"
            },
            {
                "fromLine": 91,
                "toLine": 95,
                "oldContent": "            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name());\n            result = projectParameterService.createProjectParameter(parameterRequest);\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 99,
                "toLine": 103,
                "oldContent": "        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 106,
                "toLine": 110,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterRequest);\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 112,
                "toLine": 116,
                "oldContent": "        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterRequest);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 124,
                "toLine": 128,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(parameterRequest);\n        assertNull(result.getData());"
            },
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());",
                "newContent": "                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(parameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(parameterRequest);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 149,
                "toLine": 153,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(parameterRequest);\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 155,
                "toLine": 159,
                "oldContent": "        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\", DataType.LONG.name());\n        result = projectParameterService.updateProjectParameter(parameterRequest);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 108,
                "toLine": 133,
                "oldContent": "@ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy
        {
                "oldContent": "                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n",
                "newContent": "                scheduleRequest);\n"
            }
        








   






       









       


       



















   






       









       












       



























   






       









       













       















































   






       









       












       



























   






       









       













       

























































       



       



















   











       


















       


















       




























       




























       





























       













       



















   











       


















       


















       




























       




























       





























       













       



















   











       


















       


















       




























       
























   












       




























       





























       













       


















   











       


















       


















       




























       




























       





























       













       


















   











       


















       


















       




























       
























   












       




























       





























       













       


















   











       


















       


















       




























       
























   



















































































       











       
















































       



























       
















































       



























       
















































       



























       
















































       



























       
















































       



























       
















































       



























       
















































       
























       

























       
















































       
























       






































       








       















































































































































































































       












       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































       































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































                                                                          













       









































































































































































































































































































































































































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       















































































































































































































       











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































       































































































































































































































































































































































































































































































































































































































































































































































































































