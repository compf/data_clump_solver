{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 69,
                "toLine": 73,
                "oldContent": "public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "public HttpResponse execute(ExecutionParameters executionParameters) {"
            },
            {
                "fromLine": 83,
                "toLine": 87,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {",
                "newContent": "public HttpResponse executeTask(ExecutionTaskParameters executionTaskParameters) {"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 268,
                "toLine": 278,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(WorkflowInstanceQueryParameters queryParameters,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 141,
                "toLine": 145,
                "oldContent": "private int testFlag;\n\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;",
                "newContent": "private int testFlag;\n\n    public void init(TaskInstanceInitialization taskInstanceInitialization) {"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 29,
                "oldContent": "public interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "public interface ProjectParameterService {\n\n    Result createProjectParameter(ProjectParameterCreation projectParameterCreation);"
            },
            {
                "fromLine": 86,
                "toLine": 90,
                "oldContent": "    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,",
                "newContent": "    Result updateProjectParameter(ProjectParameterUpdate projectParameterUpdate);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 67,
                "toLine": 77,
                "oldContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {",
                "newContent": "    public Result createProjectParameter(ProjectParameterCreation projectParameterCreation) {"
            },
            {
                "fromLine": 86,
                "toLine": 90,
                "oldContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,",
                "newContent": "    public Result updateProjectParameter(ProjectParameterUpdate projectParameterUpdate) {"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 48,
                "toLine": 54,
                "oldContent": "    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "    public void testCreateProjectParameter() {\n        ProjectParameterCreation projectParameterCreation = getProjectParameterCreation();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(projectParameterCreation);"
            },
            {
                "fromLine": 59,
                "toLine": 65,
                "oldContent": "    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());",
                "newContent": "    public void testUpdateProjectParameter() {\n        ProjectParameterUpdate projectParameterUpdate = getProjectParameterUpdate();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(projectParameterUpdate);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 77,
                "toLine": 81,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        Result result = projectParameterService.createProjectParameter(projectParameterCreation);"
            },
            {
                "fromLine": 90,
                "toLine": 94,
                "oldContent": "            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());",
                "newContent": "            result = projectParameterService.createProjectParameter(projectParameterCreation);"
            },
            {
                "fromLine": 98,
                "toLine": 102,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.createProjectParameter(projectParameterCreation);"
            },
            {
                "fromLine": 105,
                "toLine": 109,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.createProjectParameter(newProjectParameterCreation);"
            },
            {
                "fromLine": 111,
                "toLine": 115,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.createProjectParameter(newProjectParameterCreation);"
            },
            {
                "fromLine": 123,
                "toLine": 127,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        Result result = projectParameterService.updateProjectParameter(projectParameterUpdate);"
            },
            {
                "fromLine": 134,
                "toLine": 138,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.updateProjectParameter(projectParameterUpdate);"
            },
            {
                "fromLine": 141,
                "toLine": 145,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.updateProjectParameter(existingProjectParameterUpdate);"
            },
            {
                "fromLine": 148,
                "toLine": 152,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        result = projectParameterService.updateProjectParameter(newProjectParameterUpdate);"
            },
            {
                "fromLine": 154,
                "toLine": 158,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        result = projectParameterService.updateProjectParameter(newProjectParameterUpdate);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 107,
                "toLine": 111,
                "oldContent": "    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,",
                "newContent": "    public Result createSchedule(ScheduleCreation scheduleCreation) {"
            },
            {
                "fromLine": 333,
                "toLine": 337,
                "oldContent": "    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,",
                "newContent": "    public Result updateScheduleByWorkflowDefinitionCode(ScheduleUpdate scheduleUpdate) {"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\n\npublic class ExecutionParameters {\n    private final User loginUser;\n    private final long projectCode;\n    private final int workflowInstanceId;\n    private final ExecuteType executeType;\n\n    public ExecutionParameters(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowInstanceId = workflowInstanceId;\n        this.executeType = executeType;\n    }\n\n    // Getters and potential additional logic related to these parameters\n}",
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionTaskParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\n\npublic class ExecutionTaskParameters {\n    private final User loginUser;\n    private final long projectCode;\n    private final int workflowInstanceId;\n    private final String startNodeList;\n    private final TaskDependType taskDependType;\n\n    public ExecutionTaskParameters(User loginUser, long projectCode, int workflowInstanceId, String startNodeList, TaskDependType taskDependType) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowInstanceId = workflowInstanceId;\n        this.startNodeList = startNodeList;\n        this.taskDependType = taskDependType;\n    }\n\n    // Getters and potential additional logic related to these parameters\n}",
        "org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceQueryParameters.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.dao.model.WorkflowInstance;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.Date;\n\npublic class WorkflowInstanceQueryParameters {\n    private final Page<WorkflowInstance> page;\n    private final Long projectCode;\n    // Other fields\n\n    public WorkflowInstanceQueryParameters(Page<WorkflowInstance> page, Long projectCode) {\n        this.page = page;\n        this.projectCode = projectCode;\n        // Initialize other fields\n    }\n\n    // Getters and potential additional logic related to these parameters\n}",
        "org/apache/dolphinscheduler/dao/entity/TaskInstanceInitialization.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class TaskInstanceInitialization {\n    private final String host;\n    private final Date startTime;\n    private final String executePath;\n\n    public TaskInstanceInitialization(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;\n    }\n\n    // Getters and potential additional logic related to these parameters\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterCreation.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterCreation {\n    private final User loginUser;\n    private final long projectCode;\n    private final String projectParameterName;\n    private final String projectParameterValue;\n    private final String projectParameterDataType;\n\n    public ProjectParameterCreation(User loginUser, long projectCode, String projectParameterName, String projectParameterValue, String projectParameterDataType) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.projectParameterName = projectParameterName;\n        this.projectParameterValue = projectParameterValue;\n        this.projectParameterDataType = projectParameterDataType;\n    }\n\n    // Getters and potential additional logic related to these parameters\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterUpdate.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterUpdate extends ProjectParameterCreation {\n    private final long code;\n\n    public ProjectParameterUpdate(User loginUser, long projectCode, long code, String projectParameterName, String projectParameterValue, String projectParameterDataType) {\n        super(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);\n        this.code = code;\n    }\n\n    public long getCode() {\n        return code;\n    }\n\n    // Potential additional logic related to updating parameters\n}",
        "org/apache/dolphinscheduler/api/controller/ScheduleCreation.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.common.enums.*;\nimport java.util.Map;\n\npublic class ScheduleCreation {\n    private final User loginUser;\n    // Other fields\n\n    public ScheduleCreation(User loginUser, long projectCode, long workflowDefinitionCode, String schedule, WarningType warningType, int warningGroupId, FailureStrategy failureStrategy, Priority workflowInstancePriority, String workerGroup, String tenantCode, Long environmentCode) {\n        this.loginUser = loginUser;\n        // Initialize other fields\n    }\n\n    // Getters and potential additional logic related to schedule creation\n}",
        "org/apache/dolphinscheduler/api/controller/ScheduleUpdate.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.common.enums.*;\nimport java.util.Map;\n\npublic class ScheduleUpdate extends ScheduleCreation {\n    // Constructor and additional fields or methods specific to updating a schedule\n}"
    }
}