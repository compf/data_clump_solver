{
    "refactorings": {},
    "extractedClasses": {
        "Example1A.java": "package example;\n\nimport org.apache.commons.lang3.StringUtils;\n\nclass KeyData {\n    private String path;\n    private String group;\n    private String version;\n\n    KeyData(String path, String group, String version) {\n        this.path = path;\n        this.group = group;\n        this.version = version;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public int getLength() {\n        return (path == null ? 0 : path.length()) + (group == null ? 0 : group.length()) + (version == null ? 0 : version.length()) + 2;\n    }\n\n    public String buildServiceKey() {\n        StringBuilder buf = new StringBuilder(getLength());\n        if (StringUtils.isNotEmpty(group)) {\n            buf.append(group).append('/');\n        }\n        buf.append(path);\n        if (StringUtils.isNotEmpty(version)) {\n            buf.append(':').append(version);\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(KeyData keyData, String prefix) {\n        return prefix + keyData.buildServiceKey();\n    }\n}\n",
        "StateGraphData.java": "package example;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Label {}\n\nclass StateGraphData {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n\n    StateGraphData() {\n        this.states = new ArrayList<>();\n        this.successors = new HashMap<>();\n        this.labels = new HashMap<>();\n    }\n\n    public List<Integer> getStates() {\n        return states;\n    }\n\n    public List<Integer> getSuccessors(int state) {\n        return successors.getOrDefault(state, new ArrayList<>());\n    }\n\n    public List<Label> getLabels(int state) {\n        return labels.getOrDefault(state, new ArrayList<>());\n    }\n\n    public void addState(int state) {\n        states.add(state);\n        successors.put(state, new ArrayList<>());\n        labels.put(state, new ArrayList<>());\n    }\n}\n",
        "MethodCallData.java": "package example;\n\nclass MethodCallData {\n    private String methodName;\n    private Class<?>[] parameterTypes;\n    private Object[] arguments;\n\n    public MethodCallData(String methodName, Class<?>[] parameterTypes, Object[] arguments) {\n        this.methodName = methodName;\n        this.parameterTypes = parameterTypes;\n        this.arguments = arguments;\n    }\n\n    public boolean isValid() {\n        return parameterTypes.length == arguments.length;\n    }\n\n    // Additional methods can be added here if necessary\n}\n",
        "SchedulerData.java": "package org.apache.dolphinscheduler.api.utils;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\n\npublic class SchedulerData {\n    private String schedule;\n    private WarningType warningType;\n    private Integer warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    public SchedulerData(String schedule, WarningType warningType, Integer warningGroupId, FailureStrategy failureStrategy, Priority workflowInstancePriority, String workerGroup, String tenantCode, Long environmentCode) {\n        this.schedule = schedule;\n        this.warningType = warningType;\n        this.warningGroupId = warningGroupId;\n        this.failureStrategy = failureStrategy;\n        this.workflowInstancePriority = workflowInstancePriority;\n        this.workerGroup = workerGroup;\n        this.tenantCode = tenantCode;\n        this.environmentCode = environmentCode;\n    }\n\n    // Getters and setters\n\n    // Additional logic can be added here if necessary\n}\n",
        "TaskAlertInfo.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    public TaskAlertInfo(String title, String content, Integer alertGroupId) {\n        this.title = title;\n        this.content = content;\n        this.alertGroupId = alertGroupId;\n    }\n\n    // Getters and setters\n\n    // Additional logic can be added here if necessary\n}\n",
        "AlertInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\nimport org.apache.dolphinscheduler.common.enums.AlertType;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\n\nimport java.util.Date;\n\npublic class AlertInfo {\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n    private AlertStatus alertStatus;\n    private WarningType warningType;\n    private String log;\n    private Date createTime;\n    private Date updateTime;\n\n    public AlertInfo(String title, String content, Integer alertGroupId, AlertStatus alertStatus, WarningType warningType, String log, Date createTime, Date updateTime) {\n        this.title = title;\n        this.content = content;\n        this.alertGroupId = alertGroupId;\n        this.alertStatus = alertStatus;\n        this.warningType = warningType;\n        this.log = log;\n        this.createTime = createTime;\n        this.updateTime = updateTime;\n    }\n\n    // Getters and setters\n\n    // Additional logic can be added here if necessary\n}\n"
    }
}