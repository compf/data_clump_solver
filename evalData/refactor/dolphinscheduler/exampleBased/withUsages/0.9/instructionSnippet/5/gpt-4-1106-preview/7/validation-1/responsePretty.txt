"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 136,
                "toLine": 146,
                "oldContent": "public void init(TaskInstanceInitParam taskInstanceInitParam) {\n        this.host = taskInstanceInitParam.getHost();\n        this.startTime = taskInstanceInitParam.getStartTime();\n        this.executePath = taskInstanceInitParam.getExecutePath();",
                "newContent": "public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstanceInitParam.java": [
            {
                "fromLine": 0,
                "toLine": 9,
                "oldContent": "",
                "newContent": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class TaskInstanceInitParam {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // Constructors, getters, and setters\n}"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 167,
                "toLine": 178,
                "oldContent": "public WorkflowInstance(WorkflowDefinition workflowDefinition) {\n        this.workflowDefinition = workflowDefinition;\n        // todo: the name is not unique\n        this.name = String.join(\"-\",\n                workflowDefinition.getName(),\n                String.valueOf(workflowDefinition.getVersion()),\n                DateUtils.getCurrentTimeStamp());",
                "newContent": "public WorkflowInstance(WorkflowDefinition workflowDefinition, String name) {\n        this.workflowDefinition = workflowDefinition;\n        this.name = name;"
            },
            {
                "fromLine": 216,
                "toLine": 233,
                "oldContent": "public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.setStateHistory(JSONUtils.toJsonString(stateDescList));",
                "newContent": "public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.state = state;\n        if (StringUtils.isEmpty(this.stateHistory)) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.stateHistory, StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.stateHistory = JSONUtils.toJsonString(stateDescList);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 96,
                "toLine": 117,
                "oldContent": "public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();\n        this.conditionParams = processTaskRelationLog.getConditionParams();\n\n        this.createTime = processTaskRelationLog.getCreateTime();",
                "newContent": "public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.name;\n        this.workflowDefinitionVersion = processTaskRelationLog.workflowDefinitionVersion;\n        this.projectCode = processTaskRelationLog.projectCode;\n        this.workflowDefinitionCode = processTaskRelationLog.workflowDefinitionCode;\n        this.preTaskCode = processTaskRelationLog.preTaskCode;\n        this.preTaskVersion = processTaskRelationLog.preTaskVersion;\n        this.postTaskCode = processTaskRelationLog.postTaskCode;\n        this.postTaskVersion = processTaskRelationLog.postTaskVersion;\n        this.conditionType = processTaskRelationLog.conditionType;\n        this.conditionParams = processTaskRelationLog.conditionParams;\n\n        this.createTime = processTaskRelationLog.createTime;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 48,
                "toLine": 58,
                "oldContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.getAddrList();\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();\n        }",
                "newContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.addrList;\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();\n        }"
            }
        ]
    },
    "extractedClasses": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstanceInitParam.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class TaskInstanceInitParam {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // Constructors, getters, and setters\n}"
    }
}"