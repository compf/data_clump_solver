"{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 70,
                "toLine": 72,
                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "    public HttpResponse execute(User loginUser, ExecutorData executorData) {"
            },
            {
                "fromLine": 84,
                "toLine": 86,
                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
                "newContent": "    public HttpResponse executeTask(User loginUser, ExecutorData executorData,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 269,
                "toLine": 277,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(InstanceQueryV2PagingData instanceQueryV2PagingData,\n"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 142,
                "toLine": 144,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {\n",
                "newContent": "    public void init(TaskInitializationData initializationData) {\n"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 28,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
                "newContent": "    Result createProjectParameter(User loginUser, ProjectParameterData projectParameterData);\n\n    Result updateProjectParameter(User loginUser, ProjectParameterUpdateData projectParameterUpdateData);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 73,
                "toLine": 76,
                "oldContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 93,
                "toLine": 96,
                "oldContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, code, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 49,
                "toLine": 53,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterData projectParameterData = new ProjectParameterData(1, \"key\", \"value\", DataType.VARCHAR);\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.eq(projectParameterData))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 60,
                "toLine": 64,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(1, 1L, \"key\", \"value\", DataType.VARCHAR);\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.eq(projectParameterUpdateData))).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, projectParameterUpdateData);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 78,
                "toLine": 80,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, \"key\", \"value\", DataType.VARCHAR);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 91,
                "toLine": 93,
                "oldContent": "            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "            ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, \"key\", \"value\", DataType.VARCHAR);\n            result = projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 99,
                "toLine": 101,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 106,
                "toLine": 108,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 112,
                "toLine": 114,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        ProjectParameterData projectParameterData = new ProjectParameterData(projectCode, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(loginUser, projectParameterData);"
            },
            {
                "fromLine": 124,
                "toLine": 126,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            },
            {
                "fromLine": 135,
                "toLine": 137,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            },
            {
                "fromLine": 142,
                "toLine": 144,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            },
            {
                "fromLine": 149,
                "toLine": 151,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, 1, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            },
            {
                "fromLine": 155,
                "toLine": 157,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        ProjectParameterUpdateData projectParameterUpdateData = new ProjectParameterUpdateData(projectCode, 1, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(loginUser, projectParameterUpdateData);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 108,
                "toLine": 131,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,",
                "newContent": "        SchedulerData schedulerData = new SchedulerData(\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode);\n        Map<String, Object> result = schedulerService.insertSchedule(loginUser, schedulerData);"
            },
            {
                "fromLine": 345,
                "toLine": 349,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "        SchedulerData schedulerData = new SchedulerData(\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode);\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, schedulerData);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 17,
                "toLine": 49,
                "oldContent": "public class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;",
                "newContent": "public class TaskAlertInfo {\n\n    private AlertInfo alertInfo;\n\n    public String getTitle() {\n        return alertInfo.getTitle();\n    }\n\n    public String getContent() {\n        return alertInfo.getContent();\n    }\n\n    public Integer getAlertGroupId() {\n        return alertInfo.getAlertGroupId();\n    }"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 50,
                "toLine": 67,
                "oldContent": "\n    @TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(\"alertgroup_id\")\n    private Integer alertGroupId;",
                "newContent": "\n    @TableField(exist = false)\n    private AlertInfo alertInfo;"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorData.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\n\npublic class ExecutorData {\n\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/dao/mapper/InstanceQueryV2PagingData.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\npublic class InstanceQueryV2PagingData {\n\n    private Page<WorkflowInstance> page;\n    private long workflowDefinitionCode;\n    private String name;\n    private String host;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/dao/entity/TaskInitializationData.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class TaskInitializationData {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterData.java": "package org.apache.dolphinscheduler.api.service;\n\npublic class ProjectParameterData {\n\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterUpdateData.java": "package org.apache.dolphinscheduler.api.service;\n\npublic class ProjectParameterUpdateData extends ProjectParameterData {\n\n    private long code;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/api/controller/SchedulerData.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.common.enums.*;\n\npublic class SchedulerData {\n\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n\n    // Constructor, getters, and additional methods for functionality\n}",
        "org/apache/dolphinscheduler/plugin/task/api/model/AlertInfo.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class AlertInfo {\n\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    // Constructor, getters, and setters\n}"
    }
}"