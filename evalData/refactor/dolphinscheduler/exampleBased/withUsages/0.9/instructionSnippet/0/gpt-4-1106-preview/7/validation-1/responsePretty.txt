"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "    private AlertGroupingInfo alertGroupingInfo;",
                "newContent": "    private String title;\n    private String content;\n    private Integer alertGroupId;"
            },
            {
                "fromLine": 56,
                "toLine": 56,
                "oldContent": "@TableField(value = \"alert_status\")",
                "newContent": "@TableField(value = \"alert_status\", updateStrategy = FieldStrategy.IGNORED)"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "    private TaskHostInformation taskHostInformation;",
                "newContent": "    private String name;\n    private Long projectCode;\n    private String host;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 278,
                "toLine": 278,
                "oldContent": "@Param(\"searchRequest\") WorkflowSearchRequest searchRequest,",
                "newContent": "@Param(\"name\") String name,\n                                                              @Param(\"host\") String host"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 172,
                "toLine": 173,
                "oldContent": "        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {",
                "newContent": "        this.state = state;\n        if (StringUtils.isEmpty(this.stateHistory)) {"
            },
            {
                "fromLine": 225,
                "toLine": 225,
                "oldContent": "            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);",
                "newContent": "            stateDescList = JSONUtils.toList(this.stateHistory, StateDesc.class);"
            },
            {
                "fromLine": 227,
                "toLine": 228,
                "oldContent": "        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.setStateHistory(JSONUtils.toJsonString(stateDescList));",
                "newContent": "        stateDescList.add(new StateDesc(new Date(), state));\n        this.stateHistory = JSONUtils.toJsonString(stateDescList);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 101,
                "toLine": 112,
                "oldContent": "        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();\n        this.conditionParams = processTaskRelationLog.getConditionParams();\n        this.createTime = processTaskRelationLog.getCreateTime();",
                "newContent": "this.name = workflowTaskRelationLog.getName();\n        this.workflowDefinitionVersion = workflowTaskRelationLog.getVersion();\n        this.projectCode = workflowTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = workflowTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = workflowTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = workflowTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = workflowTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = workflowTaskRelationLog.getPostTaskVersion();\n        this.conditionType = workflowTaskRelationLog.getConditionType();\n        this.conditionParams = workflowTaskRelationLog.getConditionParams();\n        this.createTime = workflowTaskRelationLog.getCreateTime();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 35,
                "toLine": 51,
                "oldContent": "        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());\n        this.setConditionType(workflowTaskRelation.getConditionType());\n        this.setConditionParams(workflowTaskRelation.getConditionParams());\n        this.setCreateTime(workflowTaskRelation.getCreateTime());\n        this.setUpdateTime(workflowTaskRelation.getUpdateTime());",
                "newContent": "        this.name = workflowTaskRelation.getName();\n        this.workflowDefinitionCode = workflowTaskRelation.getWorkflowDefinitionCode();\n        this.workflowDefinitionVersion = workflowTaskRelation.getWorkflowDefinitionVersion();\n        this.projectCode = workflowTaskRelation.getProjectCode();\n        this.preTaskCode = workflowTaskRelation.getPreTaskCode();\n        this.preTaskVersion = workflowTaskRelation.getPreTaskVersion();\n        this.postTaskCode = workflowTaskRelation.getPostTaskCode();\n        this.postTaskVersion = workflowTaskRelation.getPostTaskVersion();\n        this.conditionType = workflowTaskRelation.getConditionType();\n        this.conditionParams = workflowTaskRelation.getConditionParams();\n        this.createTime = workflowTaskRelation.getCreateTime();\n        this.updateTime = workflowTaskRelation.getUpdateTime();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 41,
                "toLine": 76,
                "oldContent": "        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());",
                "newContent": "        this.code = taskDefinition.getCode();\n        this.version = taskDefinition.getVersion();\n        this.name = taskDefinition.getName();\n        this.description = taskDefinition.getDescription();\n        this.userId = taskDefinition.getUserId();\n        this.userName = taskDefinition.getUserName();\n        this.workerGroup = taskDefinition.getWorkerGroup();\n        this.environmentCode = taskDefinition.getEnvironmentCode();\n        this.projectCode = taskDefinition.getProjectCode();\n        this.projectName = taskDefinition.getProjectName();\n        this.resourceIds = taskDefinition.getResourceIds();\n        this.taskParams = taskDefinition.getTaskParams();\n        // Conversion from string to list/map might be necessary\n        // this.taskPriority = taskDefinition.getTaskPriority();\n        // this.taskExecuteType = taskDefinition.getTaskExecuteType();\n        // this.timeoutNotifyStrategy = taskDefinition.getTimeoutNotifyStrategy();\n        this.taskType = taskDefinition.getTaskType();\n        this.timeout = taskDefinition.getTimeout();\n        this.delayTime = taskDefinition.getDelayTime();\n        this.timeoutFlag = taskDefinition.getTimeoutFlag();\n        this.updateTime = taskDefinition.getUpdateTime();\n        this.createTime = taskDefinition.getCreateTime();\n        this.failRetryInterval = taskDefinition.getFailRetryInterval();\n        this.failRetryTimes = taskDefinition.getFailRetryTimes();\n        this.flag = taskDefinition.getFlag();\n        this.isCache = taskDefinition.getIsCache();\n        this.modifyBy = taskDefinition.getModifyBy();\n        // Additional fields might be missing"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "        String addrList = workerGroup.getAddrList();",
                "newContent": "        List<String> addrList = workerGroup.getAddrList() != null ? JSONUtils.toList(workerGroup.getAddrList(), String.class) : Collections.emptyList();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "        mybatisMapper.delete(new QueryWrapper<Session>().lambda().eq(Session::getUserId, userId));"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "        return mybatisMapper.selectList(new QueryWrapper<Session>().lambda().eq(Session::getUserId, userId));"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 57,
                "toLine": 88,
                "oldContent": "                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),\n                        pluginDefine.getPluginType());\n        return currPluginDefine.getId();",
                "newContent": "        PluginDefine currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());\n        if (currPluginDefine != null) {\n            return currPluginDefine.getId();\n        }\n        // Insert or update logic goes here\n        return null;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 35,
                "toLine": 46,
                "oldContent": "    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());",
                "newContent": "    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.code = workflowDefinition.getCode();\n        this.name = workflowDefinition.getName();\n        this.version = workflowDefinition.getVersion();\n        this.releaseState = workflowDefinition.getReleaseState();\n        this.projectCode = workflowDefinition.getProjectCode();\n        this.description = workflowDefinition.getDescription();\n        this.globalParams = workflowDefinition.getGlobalParams();\n        // Conversion from string to list might be necessary\n        // this.globalParamList = workflowDefinition.getGlobalParamList();"
            }
        ]
    },
    "extractedClasses": {}
}"