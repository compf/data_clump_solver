"{
  "refactorings": {
    "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
      {
        "fromLine": 72,
        "toLine": 72,
        "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
        "newContent": "    public HttpResponse execute(ExecutionRequest executionRequest) {"
      },
      {
        "fromLine": 86,
        "toLine": 86,
        "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
        "newContent": "    public HttpResponse executeTask(ExecutionTaskRequest executionTaskRequest,"
      }
    ],
    "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
      {
        "fromLine": 271,
        "toLine": 272,
        "oldContent": "     * @param name                  name\n     * @param host                  host",
        "newContent": "     * @param searchWorkflowInstance SearchWorkflowInstance object containing name, host, and other search parameters"
      },
      {
        "fromLine": 277,
        "toLine": 284,
        "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"host\") String host);",
        "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"searchWorkflowInstance\") SearchWorkflowInstance searchWorkflowInstance);"
      }
    ],
    "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
      {
        "fromLine": 43,
        "toLine": 73,
        "oldContent": "    private String name;\n    private Long projectCode;\n    private String host;",
        "newContent": "    private TaskIdentifier taskIdentifier;"
      }
    ],
    "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
      {
        "fromLine": 25,
        "toLine": 26,
        "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
        "newContent": "    Result createProjectParameter(ProjectParameterRequest projectParameterRequest);"
      },
      {
        "fromLine": 28,
        "toLine": 29,
        "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
        "newContent": "    Result updateProjectParameter(ProjectParameterRequest projectParameterRequest);"
      }
    ],
    "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
      {
        "fromLine": 70,
        "toLine": 76,
        "oldContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
        "newContent": "    public Result createProjectParameter(ProjectParameterRequest projectParameterRequest) {\n        return projectParameterService.createProjectParameter(projectParameterRequest);"
      },
      {
        "fromLine": 89,
        "toLine": 96,
        "oldContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
        "newContent": "    public Result updateProjectParameter(ProjectParameterRequest projectParameterRequest) {\n        return projectParameterService.updateProjectParameter(projectParameterRequest);"
      }
    ],
    "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
      {
        "fromLine": 53,
        "toLine": 53,
        "oldContent": "        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",",
        "newContent": "        Result result = projectParameterController.createProjectParameter(new ProjectParameterRequest(loginUser, 1, \"key\", \"value\","
      },
      {
        "fromLine": 64,
        "toLine": 64,
        "oldContent": "        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",",
        "newContent": "        Result result = projectParameterController.updateProjectParameter(new ProjectParameterRequest(loginUser, 1, 1L, \"key\", \"value\","
      }
    ],
    "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
      {
        "fromLine": 80,
        "toLine": 108,
        "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());",
        "newContent": "        Result result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key\", \"\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key1\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR, result.getCode());"
      },
      {
        "fromLine": 126,
        "toLine": 157,
        "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n            DataType.VARCHAR);\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());",
        "newContent": "        Result result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());\n\n        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\",\n            DataType.VARCHAR));\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR, result.getCode());"
      }
    ],
    "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
      {
        "fromLine": 110,
        "toLine": 120,
        "oldContent": "    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
        "newContent": "    public Result createSchedule(ScheduleCreateRequest scheduleCreateRequest) {"
      },
      {
        "fromLine": 122,
        "toLine": 131,
        "oldContent": "                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,",
        "newContent": "              scheduleCreateRequest"
      },
      {
        "fromLine": 336,
        "toLine": 346,
        "oldContent": "    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         @RequestParam(value = \"schedule\") String schedule,\n                                                         @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                                         @RequestParam(value = \"warningGroupId\", required = false) int warningGroupId,\n                                                         @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                                         @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                                         @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,",
        "newContent": "    public Result updateScheduleByWorkflowDefinitionCode(ScheduleUpdateRequest scheduleUpdateRequest) {"
      },
      {
        "fromLine": 349,
        "toLine": 349,
        "oldContent": "                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
        "newContent": "                scheduleUpdateRequest,"
      }
    ],
    "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
      {
        "fromLine": 22,
        "toLine": 26,
        "oldContent": "    private String title;\n    private String content;\n    private Integer alertGroupId;",
        "newContent": "    private AlertInformation alertInformation;"
      }
    ],
    "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
      {
        "fromLine": 52,
        "toLine": 67,
        "oldContent": "    private String title;\n    private String content;\n    private Integer alertGroupId;",
        "newContent": "    private AlertInformation alertInformation;"
      }
    ]
  },
  "extractedClasses": {
    "ExecutionRequest.java": "public class ExecutionRequest {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructor, Getters, and Setters\n}",
    "ExecutionTaskRequest.java": "public class ExecutionTaskRequest {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private String startNodeList;\n    // Additional parameters if needed\n\n    // Constructor, Getters, and Setters\n}",
    "SearchWorkflowInstance.java": "public class SearchWorkflowInstance {\n    private Long projectCode;\n    private String name;\n    private String host;\n\n    // Additional search parameters if required\n\n    // Constructor, Getters, and Setters\n}",
    "TaskIdentifier.java": "public class TaskIdentifier {\n    private String name;\n    private Long projectCode;\n    private String host;\n\n    // Additional task identifying attributes if required\n\n    // Constructor, Getters, and Setters\n}",
    "ProjectParameterRequest.java": "public class ProjectParameterRequest {\n    private User loginUser;\n    private long projectCode;\n    private long code; // Optional, for update\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, Getters, and Setters\n}",
    "ScheduleCreateRequest.java": "public class ScheduleCreateRequest {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n\n    // Constructor, Getters, and Setters\n}",
    "ScheduleUpdateRequest.java": "public class ScheduleUpdateRequest extends ScheduleCreateRequest {\n    private long code; // Additional field specific for update\n\n    // Constructor, Getters, and Setters\n}",
    "AlertInformation.java": "public class AlertInformation {\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    // Constructor, Getters, and Setters\n}"
  }
}"