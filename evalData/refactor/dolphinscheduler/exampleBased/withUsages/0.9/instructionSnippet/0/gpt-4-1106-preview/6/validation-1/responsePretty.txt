"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "    private Long projectCode;",
                "newContent": ""
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "    private String host;",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 172,
                "toLine": 173,
                "oldContent": "                workflowDefinition.getName(),\n                String.valueOf(workflowDefinition.getVersion()),",
                "newContent": ""
            },
            {
                "fromLine": 221,
                "toLine": 222,
                "oldContent": "        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {",
                "newContent": ""
            },
            {
                "fromLine": 225,
                "toLine": 225,
                "oldContent": "            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);",
                "newContent": ""
            },
            {
                "fromLine": 227,
                "toLine": 228,
                "oldContent": "        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.setStateHistory(JSONUtils.toJsonString(stateDescList));",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 101,
                "toLine": 112,
                "oldContent": "        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();\n        this.conditionParams = processTaskRelationLog.getConditionParams();\n        this.createTime = processTaskRelationLog.getCreateTime();",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 35,
                "toLine": 51,
                "oldContent": "        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());\n        this.setConditionType(workflowTaskRelation.getConditionType());\n        this.setConditionParams(workflowTaskRelation.getConditionParams());\n        this.setCreateTime(workflowTaskRelation.getCreateTime());\n        this.setUpdateTime(workflowTaskRelation.getUpdateTime());",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 45,
                "toLine": 76,
                "oldContent": "        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "        String addrList = workerGroup.getAddrList();",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": ""
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 57,
                "toLine": 61,
                "oldContent": "        requireNonNull(pluginDefine.getPluginName(), \"pluginName is null\");\n        requireNonNull(pluginDefine.getPluginType(), \"pluginType is null\");\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());",
                "newContent": "        requireNonNull(pluginDefine.getName(), \"pluginName is null\");\n        requireNonNull(pluginDefine.getType(), \"pluginType is null\");\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getName(), pluginDefine.getType());"
            },
            {
                "fromLine": 64,
                "toLine": 65,
                "oldContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {\n                    return pluginDefine.getId();",
                "newContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getCode() != null) {\n                    return pluginDefine.getCode();"
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));",
                "newContent": "                                pluginDefine.getName(), pluginDefine.getType()));"
            },
            {
                "fromLine": 73,
                "toLine": 75,
                "oldContent": "                log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),\n                        pluginDefine.getPluginType());",
                "newContent": "                log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getName(),\n                        pluginDefine.getType());"
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));",
                "newContent": "                                    pluginDefine.getName(), pluginDefine.getType()));"
            },
            {
                "fromLine": 83,
                "toLine": 85,
                "oldContent": "        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {\n            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());\n            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());",
                "newContent": "        if (!Objects.equals(currPluginDefine.getParams(), pluginDefine.getParams())) {\n            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());\n            currPluginDefine.setParams(pluginDefine.getParams());"
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "        return currPluginDefine.getId();",
                "newContent": "        return currPluginDefine.getCode();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 38,
                "toLine": 48,
                "oldContent": "    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());\n        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());\n        this.setCreateTime(workflowDefinition.getCreateTime());",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {}
}"