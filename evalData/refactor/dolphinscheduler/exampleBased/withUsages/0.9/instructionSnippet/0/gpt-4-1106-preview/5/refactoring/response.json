{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "    public HttpResponse execute(ExecutionRequestContext context) {"
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
                "newContent": "    public HttpResponse executeTask(ExecutionRequestContext context, String startNodeList,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 271,
                "toLine": 272,
                "oldContent": "     * @param name                  name\n     * @param host                  host",
                "newContent": "     * @param query                 the query criteria"
            },
            {
                "fromLine": 277,
                "toLine": 284,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"host\") String host);",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"query\") WorkflowInstanceQuery query);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 43,
                "toLine": 73,
                "oldContent": "    private String name;\n    private Long projectCode;\n    private String host;",
                "newContent": "    private TaskInstanceIdentifier identifier;"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "        this.host = host;",
                "newContent": "        this.identifier = new TaskInstanceIdentifier(projectCode, name, host);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 25,
                "toLine": 29,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result createProjectParameter(ProjectParameterInfo info);"
            },
            {
                "fromLine": 28,
                "toLine": 29,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result updateProjectParameter(ProjectParameterInfo info);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 70,
                "toLine": 76,
                "oldContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @RequestParam(\"projectCode\") long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        ProjectParameterInfo info = new ProjectParameterInfo(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(info);"
            },
            {
                "fromLine": 89,
                "toLine": 96,
                "oldContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @RequestParam(\"projectCode\") long projectCode,\n                                         @RequestParam(\"code\") long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        ProjectParameterInfo info = new ProjectParameterInfo(loginUser, projectCode, code, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(info);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 51,
                "toLine": 53,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(result);\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",",
                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterInfo.class))).thenReturn(result);\n        Result result = projectParameterController.createProjectParameter(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name());"
            },
            {
                "fromLine": 62,
                "toLine": 64,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(result);\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",",
                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterInfo.class))).thenReturn(result);\n        Result result = projectParameterController.updateProjectParameter(loginUser, projectCode, 1L, \"key\", \"value\", DataType.VARCHAR.name());"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 80,
                "toLine": 101,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test without data type\n        when(projectParameterMapper.insert(any())).thenReturn(1, 0);\n\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                null);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test error\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR);",
                "newContent": "        ProjectParameterInfo createInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(createInfo);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test without data type\n        when(projectParameterMapper.insert(any())).thenReturn(1, 0);\n        createInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", null);\n        result = projectParameterService.createProjectParameter(createInfo);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test error\n        result = projectParameterService.createProjectParameter(createInfo);"
            },
            {
                "fromLine": 108,
                "toLine": 114,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR);\n\n        AssertionsHelper.assertResponse(result, Status.PROJECT_PARAMETER_EXIST);\n\n        // test response is null\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR);",
                "newContent": "        createInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(createInfo);\n\n        AssertionsHelper.assertResponse(result, Status.PROJECT_PARAMETER_EXIST);\n\n        // test response is null\n        result = projectParameterService.createProjectParameter(createInfo);"
            },
            {
                "fromLine": 126,
                "toLine": 137,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test error\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR);",
                "newContent": "        ProjectParameterInfo updateInfo = new ProjectParameterInfo(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(updateInfo);\n\n        Assertions.assertNotNull(result);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), ((Status) result.getData()).getCode());\n\n        // test error\n        result = projectParameterService.updateProjectParameter(updateInfo);"
            },
            {
                "fromLine": 144,
                "toLine": 157,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR);\n\n        AssertionsHelper.assertResponse(result, Status.PROJECT_PARAMETER_NOT_EXIST);\n\n        // test response is null\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR);",
                "newContent": "        updateInfo = new ProjectParameterInfo(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(updateInfo);\n\n        AssertionsHelper.assertResponse(result, Status.PROJECT_PARAMETER_NOT_EXIST);\n\n        // test response is null\n        updateInfo = new ProjectParameterInfo(loginUser, projectCode, 1, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(updateInfo);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 110,
                "toLine": 120,
                "oldContent": "    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
                "newContent": "    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 ScheduleCreationInfo creationInfo) {"
            },
            {
                "fromLine": 122,
                "toLine": 131,
                "oldContent": "                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,",
                "newContent": "                creationInfo,"
            },
            {
                "fromLine": 336,
                "toLine": 346,
                "oldContent": "    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         @RequestParam(value = \"schedule\") String schedule,\n                                                         @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                                         @RequestParam(value = \"warningGroupId\", required = false) int warningGroupId,\n                                                         @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                                         @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                                         @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {",
                "newContent": "    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         ScheduleCreationInfo updateInfo) {"
            },
            {
                "fromLine": 346,
                "toLine": 349,
                "oldContent": "                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(updateInfo,"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 22,
                "toLine": 26,
                "oldContent": "    private String title;\n    private String content;\n    private Integer alertGroupId;",
                "newContent": "    private AlertInfo alertInfo;"
            },
            {
                "fromLine": 29,
                "toLine": 49,
                "oldContent": "        return title;\n        this.title = title;\n        return content;\n        this.content = content;\n        return alertGroupId;\n        this.alertGroupId = alertGroupId;",
                "newContent": "        return alertInfo.getTitle();\n        this.alertInfo.setTitle(title);\n        return alertInfo.getContent();\n        this.alertInfo.setContent(content);\n        return alertInfo.getAlertGroupId();\n        this.alertInfo.setAlertGroupId(alertGroupId);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 52,
                "toLine": 67,
                "oldContent": "    private String title;\n    private String content;\n    private Integer alertGroupId;",
                "newContent": "    private AlertInfo alertInfo;"
            }
        ]
    },
    "extractedClasses": {
        "org.apache.dolphinscheduler.api.test.pages.workflow.ExecutionRequestContext": "public class ExecutionRequestContext {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructors, getters, and setters\n}",
        "org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceQuery": "public class WorkflowInstanceQuery {\n    private Long projectCode;\n    private String name;\n    private String host;\n\n    // Constructors, getters, and setters\n}",
        "org.apache.dolphinscheduler.dao.entity.TaskInstanceIdentifier": "public class TaskInstanceIdentifier {\n    private Long projectCode;\n    private String name;\n    private String host;\n\n    // Constructors, getters, and setters\n}",
        "org.apache.dolphinscheduler.api.service.ProjectParameterInfo": "public class ProjectParameterInfo {\n    private User loginUser;\n    private long projectCode;\n    private long code; // used for updates\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructors, getters, and setters\n}",
        "org.apache.dolphinscheduler.api.controller.ScheduleCreationInfo": "public class ScheduleCreationInfo {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\
    {
                "fromLine": 82,
                "toLine": 91,
                "oldContent": "     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workerGroup worker group\n     * @param tenantCode tenant code\n     * @param workflowInstancePriority workflow instance priority",
                "newContent": "     * @param creationInfo encapsulates all information needed to create a schedule"
            }
       			
       																																																																																																																													
       		
       		
       									
       		
       		
       		
       		
       												
       		
       		
       																																																			
       		
       		
       														
       		
       																																			
       		
       																																								
       		
       		
       																																											
       		
       																																					
       		
       											
       		
       		
       																								
       		
       																																		
       																																								
       									
       												
       		
       		
       																	       		
       													
       		
       		
       																																										       		
       																	       		
       																																						       		
       													       		
       											
       		
       		
       								