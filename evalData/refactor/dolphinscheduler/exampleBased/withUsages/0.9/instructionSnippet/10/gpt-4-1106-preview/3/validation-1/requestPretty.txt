messages:
[
	content:"
	
	I will provide you code snippets of one or more Java  files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	user	
",
,
	content:
{
			dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.dolphinscheduler.api.test.pages.workflow;
			
			import org.apache.dolphinscheduler.api.enums.ExecuteType;
			import org.apache.dolphinscheduler.api.test.core.Constants;
			import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
			import org.apache.dolphinscheduler.api.test.utils.RequestClient;
			import org.apache.dolphinscheduler.common.enums.FailureStrategy;
			import org.apache.dolphinscheduler.common.enums.TaskDependType;
			import org.apache.dolphinscheduler.common.enums.WarningType;
			import org.apache.dolphinscheduler.dao.entity.User;
			
			import java.util.HashMap;
			import java.util.Map;
			
			import lombok.AllArgsConstructor;
			import lombok.extern.slf4j.Slf4j;
						
",
,
			fromLine:"			62",
			toLine:"			96",
			content:"
			        Map<String, Object> params = new HashMap<>();
			        params.put("loginUser", loginUser);
			        params.put("id", workflowInstanceCode);
			        Map<String, String> headers = new HashMap<>();
			        headers.put(Constants.SESSION_ID_KEY, sessionId);
			        RequestClient requestClient = new RequestClient();
			        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
			        return requestClient.get(url, headers, params);
			    }
			
			    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
			        Map<String, Object> params = new HashMap<>();
			        params.put("loginUser", loginUser);
			        params.put("projectCode", projectCode);
			        params.put("workflowInstanceId", workflowInstanceId);
			        params.put("executeType", executeType);
			        Map<String, String> headers = new HashMap<>();
			        headers.put(Constants.SESSION_ID_KEY, sessionId);
			
			        RequestClient requestClient = new RequestClient();
			        String url = String.format("/projects/%s/executors/execute", projectCode);
			        return requestClient.post(url, headers, params);
			    }
			
			    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
			                                    TaskDependType taskDependType) {
			        Map<String, Object> params = new HashMap<>();
			        params.put("loginUser", loginUser);
			        params.put("workflowInstanceId", workflowInstanceId);
			        params.put("startNodeList", startNodeList);
			        params.put("taskDependType", taskDependType);
			        Map<String, String> headers = new HashMap<>();
			        headers.put(Constants.SESSION_ID_KEY, sessionId);
			
			        RequestClient requestClient = new RequestClient();			
",
,

		],
		dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.mapper;
			
			import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
			import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
			import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
			import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
			
			import org.apache.ibatis.annotations.Param;
			
			import java.util.Collection;
			import java.util.Date;
			import java.util.List;
			import java.util.Set;
			
			import com.baomidou.mybatisplus.core.mapper.BaseMapper;
			import com.baomidou.mybatisplus.core.metadata.IPage;
			import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
						
",
,
			fromLine:"			261",
			toLine:"			294",
			content:"
			
			    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
			                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
			                                                            @Param("states") int[] states);
			
			    /**
			     * Filter workflow instance
			     *
			     * @param page                  page
			     * @param workflowDefinitionCode workflowDefinitionCode
			     * @param name                  name
			     * @param host                  host
			     * @param startTime             startTime
			     * @param endTime               endTime
			     * @return workflow instance IPage
			     */
			    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
			                                                              @Param("projectCode") Long projectCode,
			                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
			                                                              @Param("name") String name,
			                                                              @Param("startTime") String startTime,
			                                                              @Param("endTime") String endTime,
			                                                              @Param("state") Integer state,
			                                                              @Param("host") String host);
			
			    /**
			     * Statistics workflow instance state v2
			     * <p>
			     * We only need project codes to determine whether the workflow instance belongs to the user or not.
			     *
			     * @param startTime    startTime
			     * @param endTime      endTime
			     * @param projectCode  projectCode
			     * @param workflowCode workflowCode			
",
,

		],
		dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
		[
			fromLine:"			17",
			toLine:"			61",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.Flag;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
			import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
			
			import java.io.Serializable;
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.FieldStrategy;
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
			
			@Data
			@TableName("t_ds_task_instance")
			public class TaskInstance implements Serializable {
			
			    @TableId(value = "id", type = IdType.AUTO)
			    private Integer id;
			
			    private String name;
			
			    private String taskType;
			
			    private int workflowInstanceId;
			
			    private String workflowInstanceName;
			
			    private Long projectCode;
			
			    private long taskCode;
			
			    private int taskDefinitionVersion;
			
			    @TableField(exist = false)
			    private String processDefinitionName;
			
			    @TableField(exist = false)
			    private int taskGroupPriority;			
",
,
			fromLine:"			63",
			toLine:"			83",
			content:"
			    private TaskExecutionStatus state;
			
			    private Date firstSubmitTime;
			
			    private Date submitTime;
			
			    private Date startTime;
			
			    private Date endTime;
			
			    private String host;
			
			    private String executePath;
			
			    private String logPath;
			
			    private int retryTimes;
			
			    private Flag alertFlag;
			
			    @TableField(exist = false)			
",
,
			fromLine:"			134",
			toLine:"			154",
			content:"
			
			    private Integer cpuQuota;
			
			    private Integer memoryMax;
			
			    private TaskExecuteType taskExecuteType;
			
			    private int testFlag;
			
			    public void init(String host, Date startTime, String executePath) {
			        this.host = host;
			        this.startTime = startTime;
			        this.executePath = executePath;
			    }
			
			}
						
",
,

		],
		dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java:
		[
			fromLine:"			15",
			toLine:"			39",
			content:"
			 * limitations under the License.
			 */
			
			package org.apache.dolphinscheduler.api.service;
			
			import org.apache.dolphinscheduler.api.utils.Result;
			import org.apache.dolphinscheduler.dao.entity.User;
			
			public interface ProjectParameterService {
			
			    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,
			                                  String projectParameterValue, String projectParameterDataType);
			
			    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
			                                  String projectParameterValue, String projectParameterDataType);
			
			    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);
			
			    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);
			
			    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,
			                                           String searchVal, String projectParameterDataType);
			
			    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);
			}			
",
,

		],
		dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java:
		[
			fromLine:"			17",
			toLine:"			51",
			content:"
			
			package org.apache.dolphinscheduler.api.controller;
			
			import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;
			
			import org.apache.dolphinscheduler.api.exceptions.ApiException;
			import org.apache.dolphinscheduler.api.service.ProjectParameterService;
			import org.apache.dolphinscheduler.api.utils.Result;
			import org.apache.dolphinscheduler.common.constants.Constants;
			import org.apache.dolphinscheduler.dao.entity.User;
			import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
			
			import lombok.extern.slf4j.Slf4j;
			
			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.http.HttpStatus;
			import org.springframework.web.bind.annotation.GetMapping;
			import org.springframework.web.bind.annotation.PathVariable;
			import org.springframework.web.bind.annotation.PostMapping;
			import org.springframework.web.bind.annotation.PutMapping;
			import org.springframework.web.bind.annotation.RequestAttribute;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RequestParam;
			import org.springframework.web.bind.annotation.ResponseStatus;
			import org.springframework.web.bind.annotation.RestController;
			
			import io.swagger.v3.oas.annotations.Operation;
			import io.swagger.v3.oas.annotations.Parameter;
			import io.swagger.v3.oas.annotations.Parameters;
			import io.swagger.v3.oas.annotations.media.Schema;
			import io.swagger.v3.oas.annotations.tags.Tag;
						
",
,
			fromLine:"			60",
			toLine:"			106",
			content:"
			
			    @Operation(summary = "createProjectParameter", description = "CREATE_PROJECT_PARAMETER_NOTES")
			    @Parameters({
			            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
			            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
			            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
			    })
			    @PostMapping()
			    @ResponseStatus(HttpStatus.CREATED)
			    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)
			    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
			                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
			                                         @RequestParam("projectParameterName") String projectParameterName,
			                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
			                                         @RequestParam(value = "projectParameterDataType", defaultValue = "VARCHAR") String projectParameterDataType) {
			        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
			                projectParameterValue, projectParameterDataType);
			    }
			
			    @Operation(summary = "updateProjectParameter", description = "UPDATE_PROJECT_PARAMETER_NOTES")
			    @Parameters({
			            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456")),
			            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
			            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
			            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
			    })
			    @PutMapping(value = "/{code}")
			    @ResponseStatus(HttpStatus.OK)
			    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)
			    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
			                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
			                                         @PathVariable("code") Long code,
			                                         @RequestParam("projectParameterName") String projectParameterName,
			                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
			                                         @RequestParam(value = "projectParameterDataType") String projectParameterDataType) {
			        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
			                projectParameterValue, projectParameterDataType);
			    }
			
			    @Operation(summary = "deleteProjectParametersByCode", description = "DELETE_PROJECT_PARAMETER_NOTES")
			    @Parameters({
			            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
			    })
			    @PostMapping(value = "/delete")
			    @ResponseStatus(HttpStatus.OK)
			    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
			    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,			
",
,

		],
		dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.dolphinscheduler.api.controller;
			
			import org.apache.dolphinscheduler.api.enums.Status;
			import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
			import org.apache.dolphinscheduler.api.utils.Result;
			import org.apache.dolphinscheduler.common.enums.UserType;
			import org.apache.dolphinscheduler.dao.entity.User;
			import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
			
			import org.junit.jupiter.api.Assertions;
			import org.junit.jupiter.api.Test;
			import org.junit.jupiter.api.extension.ExtendWith;
			import org.mockito.InjectMocks;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.junit.jupiter.MockitoExtension;
			import org.mockito.junit.jupiter.MockitoSettings;
			import org.mockito.quality.Strictness;
						
",
,
			fromLine:"			41",
			toLine:"			74",
			content:"
			    @InjectMocks
			    private ProjectParameterController projectParameterController;
			
			    @Mock
			    private ProjectParameterServiceImpl projectParameterService;
			
			    @Test
			    public void testCreateProjectParameter() {
			        User loginUser = getGeneralUser();
			
			        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),
			                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
			        Result result = projectParameterController.createProjectParameter(loginUser, 1, "key", "value",
			                DataType.VARCHAR.name());
			        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
			    }
			
			    @Test
			    public void testUpdateProjectParameter() {
			        User loginUser = getGeneralUser();
			
			        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),
			                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
			        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, "key", "value",
			                DataType.LONG.name());
			        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
			    }
			
			    @Test
			    public void testDeleteProjectParametersByCode() {
			        User loginUser = getGeneralUser();
			
			        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),
			                Mockito.anyLong())).thenReturn(getSuccessResult());			
",
,

		],
		dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.dolphinscheduler.api.service;
			
			import static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;
			import static org.junit.jupiter.api.Assertions.assertEquals;
			import static org.junit.jupiter.api.Assertions.assertNotNull;
			import static org.junit.jupiter.api.Assertions.assertNull;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.Mockito.when;
			
			import org.apache.dolphinscheduler.api.AssertionsHelper;
			import org.apache.dolphinscheduler.api.enums.Status;
			import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
			import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
			import org.apache.dolphinscheduler.api.utils.Result;
			import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
			import org.apache.dolphinscheduler.dao.entity.Project;
			import org.apache.dolphinscheduler.dao.entity.ProjectParameter;
			import org.apache.dolphinscheduler.dao.entity.User;
			import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
			import org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;
			import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
			
			import java.util.Collections;
			
			import org.junit.jupiter.api.Test;
			import org.junit.jupiter.api.extension.ExtendWith;
			import org.mockito.InjectMocks;
			import org.mockito.Mock;
			import org.mockito.MockedStatic;
			import org.mockito.Mockito;
			import org.mockito.junit.jupiter.MockitoExtension;
			import org.mockito.junit.jupiter.MockitoSettings;
			import org.mockito.quality.Strictness;
			
			import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
						
",
,
			fromLine:"			70",
			toLine:"			167",
			content:"
			
			    protected final static long projectCode = 1L;
			
			    @Test
			    public void testCreateProjectParameter() {
			        User loginUser = getGeneralUser();
			
			        // PERMISSION DENIED
			        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
			                .thenReturn(false);
			        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
			                DataType.VARCHAR.name());
			        assertNull(result.getData());
			        assertNull(result.getCode());
			        assertNull(result.getMsg());
			
			        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
			                .thenReturn(true);
			
			        // CODE GENERATION ERROR
			        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {
			            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);
			
			            result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
			                    DataType.VARCHAR.name());
			            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
			        }
			
			        // PROJECT_PARAMETER_ALREADY_EXISTS
			        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
			        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
			        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
			
			        // INSERT DATA ERROR
			        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
			        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);
			        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
			
			        // SUCCESS
			        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);
			        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.SUCCESS.getCode(), result.getCode());
			    }
			
			    @Test
			    public void testUpdateProjectParameter() {
			        User loginUser = getGeneralUser();
			
			        // NO PERMISSION
			        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
			                .thenReturn(false);
			        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
			                DataType.VARCHAR.name());
			        assertNull(result.getData());
			        assertNull(result.getCode());
			        assertNull(result.getMsg());
			
			        // PROJECT_PARAMETER_NOT_EXISTS
			        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
			        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
			                .thenReturn(true);
			        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
			        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
			
			        // PROJECT_PARAMETER_ALREADY_EXISTS
			        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
			        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
			        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
			
			        // PROJECT_UPDATE_ERROR
			        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
			        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);
			        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
			                DataType.VARCHAR.name());
			        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
			
			        // SUCCESS
			        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);
			        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
			                DataType.LONG.name());
			        assertEquals(Status.SUCCESS.getCode(), result.getCode());
			        ProjectParameter projectParameter = (ProjectParameter) result.getData();
			        assertNotNull(projectParameter.getOperator());
			        assertNotNull(projectParameter.getUpdateTime());
			        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());
			    }
			
			    @Test
			    public void testDeleteProjectParametersByCode() {			
",
,

		],
		dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java:
		[
			fromLine:"			17",
			toLine:"			62",
			content:"
			
			package org.apache.dolphinscheduler.api.controller;
			
			import static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;
			import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;
			import static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;
			
			import org.apache.dolphinscheduler.api.audit.OperatorLog;
			import org.apache.dolphinscheduler.api.audit.enums.AuditType;
			import org.apache.dolphinscheduler.api.enums.Status;
			import org.apache.dolphinscheduler.api.exceptions.ApiException;
			import org.apache.dolphinscheduler.api.service.SchedulerService;
			import org.apache.dolphinscheduler.api.utils.Result;
			import org.apache.dolphinscheduler.common.enums.FailureStrategy;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.WarningType;
			import org.apache.dolphinscheduler.dao.entity.User;
			import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
			
			import java.util.Map;
			
			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.http.HttpStatus;
			import org.springframework.web.bind.annotation.DeleteMapping;
			import org.springframework.web.bind.annotation.GetMapping;
			import org.springframework.web.bind.annotation.PathVariable;
			import org.springframework.web.bind.annotation.PostMapping;
			import org.springframework.web.bind.annotation.PutMapping;
			import org.springframework.web.bind.annotation.RequestAttribute;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RequestParam;
			import org.springframework.web.bind.annotation.ResponseStatus;
			import org.springframework.web.bind.annotation.RestController;
			
			import io.swagger.v3.oas.annotations.Operation;
			import io.swagger.v3.oas.annotations.Parameter;
			import io.swagger.v3.oas.annotations.Parameters;
			import io.swagger.v3.oas.annotations.media.Schema;
			import io.swagger.v3.oas.annotations.tags.Tag;
						
",
,
			fromLine:"			72",
			toLine:"			141",
			content:"
			    public static final String DEFAULT_NOTIFY_GROUP_ID = "1";
			    public static final String DEFAULT_FAILURE_POLICY = "CONTINUE";
			    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = "MEDIUM";
			
			    @Autowired
			    private SchedulerService schedulerService;
			
			    /**
			     * create schedule
			     *
			     * @param loginUser login user
			     * @param projectCode project code
			     * @param workflowDefinitionCode workflow definition code
			     * @param schedule scheduler
			     * @param warningType warning type
			     * @param warningGroupId warning group id
			     * @param failureStrategy failure strategy
			     * @param workflowInstancePriority workflow instance priority
			     * @param workerGroup worker group
			     * @param tenantCode tenant code
			     * @return create result code
			     */
			    @Operation(summary = "createSchedule", description = "CREATE_SCHEDULE_NOTES")
			    @Parameters({
			            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "100")),
			            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}")),
			            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
			            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
			            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
			            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
			            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
			            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
			            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
			    })
			    @PostMapping()
			    @ResponseStatus(HttpStatus.CREATED)
			    @ApiException(CREATE_SCHEDULE_ERROR)
			    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)
			    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
			                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
			                                 @RequestParam(value = "workflowDefinitionCode") long workflowDefinitionCode,
			                                 @RequestParam(value = "schedule") String schedule,
			                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
			                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
			                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,
			                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
			                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
			                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
			                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
			        Map<String, Object> result = schedulerService.insertSchedule(
			                loginUser,
			                projectCode,
			                workflowDefinitionCode,
			                schedule,
			                warningType,
			                warningGroupId,
			                failureStrategy,
			                workflowInstancePriority,
			                workerGroup,
			                tenantCode,
			                environmentCode);
			
			        return returnDataList(result);
			    }
			
			    /**
			     * updateWorkflowInstance schedule
			     *
			     * @param loginUser login user
			     * @param projectCode project code			
",
,
			fromLine:"			299",
			toLine:"			359",
			content:"
			    @ApiException(PREVIEW_SCHEDULE_ERROR)
			    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
			                                  @RequestParam(value = "schedule") String schedule) {
			        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);
			        return returnDataList(result);
			    }
			
			    /**
			     * update workflow definition schedule
			     *
			     * @param loginUser login user
			     * @param projectCode project code
			     * @param workflowDefinitionCode workflow definition code
			     * @param schedule scheduler
			     * @param warningType warning type
			     * @param warningGroupId warning group id
			     * @param failureStrategy failure strategy
			     * @param workerGroup worker group
			     * @param workflowInstancePriority workflow instance priority
			     * @return update result code
			     */
			    @Operation(summary = "updateScheduleByWorkflowDefinitionCode", description = "UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES")
			    @Parameters({
			            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "12345678")),
			            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
			            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
			            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
			            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
			            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
			            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
			            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
			            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
			    })
			    @PutMapping("/update/{code}")
			    @ResponseStatus(HttpStatus.OK)
			    @ApiException(UPDATE_SCHEDULE_ERROR)
			    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
			    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
			                                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
			                                                         @PathVariable(value = "code") long workflowDefinitionCode,
			                                                         @RequestParam(value = "schedule") String schedule,
			                                                         @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
			                                                         @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
			                                                         @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
			                                                         @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
			                                                         @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
			                                                         @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") long environmentCode,
			                                                         @RequestParam(value = "workflowInstancePriority", required = false) Priority workflowInstancePriority) {
			        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,
			                workflowDefinitionCode, schedule,
			                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
			                environmentCode);
			        return returnDataList(result);
			    }
			}
						
",
,

		],
		dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:
		[
			fromLine:"			12",
			toLine:"			59",
			content:"
			 * distributed under the License is distributed on an "AS IS" BASIS,
			 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			 * See the License for the specific language governing permissions and
			 * limitations under the License.
			 */
			
			package org.apache.dolphinscheduler.plugin.task.api.model;
			
			public class TaskAlertInfo {
			
			    private String title;
			
			    private String content;
			
			    private Integer alertGroupId;
			
			    public String getTitle() {
			        return title;
			    }
			
			    public void setTitle(String title) {
			        this.title = title;
			    }
			
			    public String getContent() {
			        return content;
			    }
			
			    public void setContent(String content) {
			        this.content = content;
			    }
			
			    public Integer getAlertGroupId() {
			        return alertGroupId;
			    }
			
			    public void setAlertGroupId(Integer alertGroupId) {
			        this.alertGroupId = alertGroupId;
			    }
			}
						
",
,

		],
		dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.AlertStatus;
			import org.apache.dolphinscheduler.common.enums.AlertType;
			import org.apache.dolphinscheduler.common.enums.WarningType;
			
			import java.util.Date;
			import java.util.HashMap;
			import java.util.Map;
			
			import lombok.AllArgsConstructor;
			import lombok.Builder;
			import lombok.Data;
			import lombok.NoArgsConstructor;
			
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
						
",
,
			fromLine:"			42",
			toLine:"			77",
			content:"
			@TableName("t_ds_alert")
			public class Alert {
			
			    @TableId(value = "id", type = IdType.AUTO)
			    private Integer id;
			
			    @TableField(value = "sign")
			    private String sign;
			
			    @TableField(value = "title")
			    private String title;
			
			    @TableField(value = "content")
			    private String content;
			
			    @TableField(value = "alert_status")
			    private AlertStatus alertStatus;
			
			    @TableField(value = "warning_type")
			    private WarningType warningType;
			
			    @TableField(value = "log")
			    private String log;
			
			    @TableField("alertgroup_id")
			    private Integer alertGroupId;
			
			    @TableField("create_time")
			    private Date createTime;
			
			    @TableField("update_time")
			    private Date updateTime;
			
			    @TableField("project_code")
			    private Long projectCode;
						
",
,

		],
	
}
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java:
			[
				fromLine:"				62",
				toLine:"				96",
				oldContent:"
				        Map<String, Object> params = new HashMap<>();
				        params.put("loginUser", loginUser);
				        params.put("id", workflowInstanceCode);
				        Map<String, String> headers = new HashMap<>();
				        headers.put(Constants.SESSION_ID_KEY, sessionId);
				        RequestClient requestClient = new RequestClient();
				        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
				        return requestClient.get(url, headers, params);
				    }
				
				    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
				        Map<String, Object> params = new HashMap<>();
				        params.put("loginUser", loginUser);
				        params.put("projectCode", projectCode);
				        params.put("workflowInstanceId", workflowInstanceId);
				        params.put("executeType", executeType);
				        Map<String, String> headers = new HashMap<>();
				        headers.put(Constants.SESSION_ID_KEY, sessionId);
				
				        RequestClient requestClient = new RequestClient();
				        String url = String.format("/projects/%s/executors/execute", projectCode);
				        return requestClient.post(url, headers, params);
				    }
				
				    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
				                                    TaskDependType taskDependType) {
				        Map<String, Object> params = new HashMap<>();
				        params.put("loginUser", loginUser);
				        params.put("workflowInstanceId", workflowInstanceId);
				        params.put("startNodeList", startNodeList);
				        params.put("taskDependType", taskDependType);
				        Map<String, String> headers = new HashMap<>();
				        headers.put(Constants.SESSION_ID_KEY, sessionId);
				
				        RequestClient requestClient = new RequestClient();				
",
				newContent:"
				        ExecutorRequest executorRequest = new ExecutorRequest(loginUser, workflowInstanceCode);
				        ExecutorHeaders executorHeaders = new ExecutorHeaders(sessionId);
				        RequestClient requestClient = new RequestClient();
				        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
				        return requestClient.get(url, executorHeaders.getHeadersMap(), executorRequest.getParamsMap());
				    }
				
				    public HttpResponse execute(ExecutorRequest executorRequest) {
				        ExecutorHeaders executorHeaders = new ExecutorHeaders(sessionId);
				        RequestClient requestClient = new RequestClient();
				        String url = String.format("/projects/%s/executors/execute", executorRequest.getProjectCode());
				        return requestClient.post(url, executorHeaders.getHeadersMap(), executorRequest.getParamsMap());
				    }
				
				    public HttpResponse executeTask(ExecutorRequest executorRequest) {
				        ExecutorHeaders executorHeaders = new ExecutorHeaders(sessionId);
				        RequestClient requestClient = new RequestClient();				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:
			[
				fromLine:"				261",
				toLine:"				294",
				oldContent:"
				
				    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
				                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
				                                                            @Param("states") int[] states);
				
				    /**
				     * Filter workflow instance
				     *
				     * @param page                  page
				     * @param workflowDefinitionCode workflowDefinitionCode
				     * @param name                  name
				     * @param host                  host
				     * @param startTime             startTime
				     * @param endTime               endTime
				     * @return workflow instance IPage
				     */
				    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
				                                                              @Param("projectCode") Long projectCode,
				                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
				                                                              @Param("name") String name,
				                                                              @Param("startTime") String startTime,
				                                                              @Param("endTime") String endTime,
				                                                              @Param("state") Integer state,
				                                                              @Param("host") String host);
				
				    /**
				     * Statistics workflow instance state v2
				     * <p>
				     * We only need project codes to determine whether the workflow instance belongs to the user or not.
				     *
				     * @param startTime    startTime
				     * @param endTime      endTime
				     * @param projectCode  projectCode
				     * @param workflowCode workflowCode				
",
				newContent:"
				
				    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowCodeVersionStatus") WorkflowCodeVersionStatus workflowCodeVersionStatus);
				
				    /**
				     * Filter workflow instance
				     *
				     * @param page                  page
				     * @param workflowInstanceFilter workflowInstanceFilter
				     * @return workflow instance IPage
				     */
				    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
				                                                              @Param("workflowInstanceFilter") WorkflowInstanceFilter workflowInstanceFilter);
				
				    /**
				     * Statistics workflow instance state v2
				     * <p>
				     * We only need project codes to determine whether the workflow instance belongs to the user or not.
				     *
				     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
			[
				fromLine:"				42",
				toLine:"				77",
				oldContent:"
				@TableName("t_ds_alert")
				public class Alert {
				
				    @TableId(value = "id", type = IdType.AUTO)
				    private Integer id;
				
				    @TableField(value = "sign")
				    private String sign;
				
				    @TableField(value = "title")
				    private String title;
				
				    @TableField(value = "content")
				    private String content;
				
				    @TableField(value = "alert_status")
				    private AlertStatus alertStatus;
				
				    @TableField(value = "warning_type")
				    private WarningType warningType;
				
				    @TableField(value = "log")
				    private String log;
				
				    @TableField("alertgroup_id")
				    private Integer alertGroupId;
				
				    @TableField("create_time")
				    private Date createTime;
				
				    @TableField("update_time")
				    private Date updateTime;
				
				    @TableField("project_code")
				    private Long projectCode;
								
",
				newContent:"
				@TableName("t_ds_alert")
				public class Alert {
				
				    @TableId(value = "id", type = IdType.AUTO)
				    private Integer id;
				
				    @TableField(value = "sign")
				    private String sign;
				
				    private TaskAlertInfo taskAlertInfo;
				
				    @TableField(value = "alert_status")
				    private AlertStatus alertStatus;
				
				    @TableField(value = "warning_type")
				    private WarningType warningType;
				
				    @TableField(value = "log")
				    private String log;
				
				    @TableField("create_time")
				    private Date createTime;
				
				    @TableField("update_time")
				    private Date updateTime;
				
				    @TableField("project_code")
				    private Long projectCode;
								
",
,

			],
		
}
		extractedClasses:
{
					org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorRequest.java:"
			package org.apache.dolphinscheduler.api.test.pages.workflow;
			
			import org.apache.dolphinscheduler.dao.entity.User;
			
			import java.util.HashMap;
			import java.util.Map;
			
			public class ExecutorRequest {
			    private User loginUser;
			    private long projectCode;
			    private int workflowInstanceId;
			    private ExecuteType executeType;
			
			    public ExecutorRequest(User loginUser, long projectCode) {
			        this.loginUser = loginUser;
			        this.projectCode = projectCode;
			    }
			
			    public Map<String, Object> getParamsMap() {
			        Map<String, Object> params = new HashMap<>();
			        params.put("loginUser", loginUser);
			        params.put("projectCode", projectCode);
			        return params;
			    }
			
			    public long getProjectCode() {
			        return projectCode;
			    }
			}
						
",
			org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorHeaders.java:"
			package org.apache.dolphinscheduler.api.test.pages.workflow;
			
			import org.apache.dolphinscheduler.api.test.core.Constants;
			
			import java.util.HashMap;
			import java.util.Map;
			
			public class ExecutorHeaders {
			    private String sessionId;
			
			    public ExecutorHeaders(String sessionId) {
			        this.sessionId = sessionId;
			    }
			
			    public Map<String, String> getHeadersMap() {
			        Map<String, String> headers = new HashMap<>();
			        headers.put(Constants.SESSION_ID_KEY, sessionId);
			        return headers;
			    }
			}
						
",
			org/apache/dolphinscheduler/dao/mapper/WorkflowCodeVersionStatus.java:"
			package org.apache.dolphinscheduler.dao.mapper;
			
			public class WorkflowCodeVersionStatus {
			    private long workflowDefinitionCode;
			    private int workflowDefinitionVersion;
			    private int[] states;
			
			    public WorkflowCodeVersionStatus(long workflowDefinitionCode, int workflowDefinitionVersion, int[] states) {
			        this.workflowDefinitionCode = workflowDefinitionCode;
			        this.workflowDefinitionVersion = workflowDefinitionVersion;
			        this.states = states;
			    }
			
			    public long getWorkflowDefinitionCode() {
			        return workflowDefinitionCode;
			    }
			
			    public int getWorkflowDefinitionVersion() {
			        return workflowDefinitionVersion;
			    }
			
			    public int[] getStates() {
			        return states;
			    }
			}
						
",
			org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceFilter.java:"
			package org.apache.dolphinscheduler.dao.mapper;
			
			import java.util.Date;
			
			public class WorkflowInstanceFilter {
			    private Long projectCode;
			    private Long workflowDefinitionCode;
			    private String name;
			    private Date startTime;
			    private Date endTime;
			    private Integer state;
			    private String host;
			
			    public WorkflowInstanceFilter(Long projectCode, Long workflowDefinitionCode, String name, Date startTime, Date endTime, Integer state, String host) {
			        this.projectCode = projectCode;
			        this.workflowDefinitionCode = workflowDefinitionCode;
			        this.name = name;
			        this.startTime = startTime;
			        this.endTime = endTime;
			        this.state = state;
			        this.host = host;
			    }
			
			    public Long getProjectCode() {
			        return projectCode;
			    }
			
			    public Long getWorkflowDefinitionCode() {
			        return workflowDefinitionCode;
			    }
			
			    public String getName() {
			        return name;
			    }
			
			    public Date getStartTime() {
			        return startTime;
			    }
			
			    public Date getEndTime() {
			        return endTime;
			    }
			
			    public Integer getState() {
			        return state;
			    }
			
			    public String getHost() {
			        return host;
			    }
			}
						
",
			org/apache/dolphinscheduler/dao/mapper/WorkflowStateStatisticsFilter.java:"
			package org.apache.dolphinscheduler.dao.mapper;
			
			import java.util.Date;
			
			public class WorkflowStateStatisticsFilter {
			    private Date startTime;
			    private Date endTime;
			    private Long projectCode;
			    private Long workflowCode;
			
			    public WorkflowStateStatisticsFilter(Date startTime, Date endTime, Long projectCode, Long workflowCode) {
			        this.startTime = startTime;
			        this.endTime = endTime;
			        this.projectCode = projectCode;
			        this.workflowCode = workflowCode;
			    }
			
			    public Date getStartTime() {
			        return startTime;
			    }
			
			    public Date getEndTime() {
			        return endTime;
			    }
			
			    public Long getProjectCode() {
			        return projectCode;
			    }
			
			    public Long getWorkflowCode() {
			        return workflowCode;
			    }
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[64,18] variable projectCode is already defined in class org.apache.dolphinscheduler.dao.entity.TaskInstance
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[262,97] cannot find symbol
	[ERROR]   symbol:   class WorkflowCodeVersionStatus
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[272,96] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceFilter
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[172,35] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[173,50] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[221,13] cannot find symbol
	[ERROR]   symbol: method setState(org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[222,37] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[225,50] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[227,27] constructor StateDesc in class org.apache.dolphinscheduler.dao.entity.WorkflowInstance.StateDesc cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.util.Date,org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[228,13] cannot find symbol
	[ERROR]   symbol: method setStateHistory(java.lang.String)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[101,43] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[102,64] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[103,50] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[104,61] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[105,50] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[106,53] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[107,51] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[108,54] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[109,52] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[110,54] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[112,49] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[35,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[39,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[40,42] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[41,60] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[42,63] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[43,49] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[44,49] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[45,52] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[46,50] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[47,53] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[48,51] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[49,53] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[50,48] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[51,48] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol
	[ERROR]   symbol:   method getUserId()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol
	[ERROR]   symbol:   method getUserName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol
	[ERROR]   symbol:   method getWorkerGroup()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol
	[ERROR]   symbol:   method getEnvironmentCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol
	[ERROR]   symbol:   method getProjectName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol
	[ERROR]   symbol:   method getResourceIds()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol
	[ERROR]   symbol:   method getTaskParams()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol
	[ERROR]   symbol:   method getTaskPriority()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol
	[ERROR]   symbol:   method getTimeoutNotifyStrategy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol
	[ERROR]   symbol:   method getTimeout()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol
	[ERROR]   symbol:   method getDelayTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol
	[ERROR]   symbol:   method getTimeoutFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol
	[ERROR]   symbol:   method getFailRetryInterval()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol
	[ERROR]   symbol:   method getFailRetryTimes()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol
	[ERROR]   symbol:   method getFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol
	[ERROR]   symbol:   method getIsCache()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol
	[ERROR]   symbol:   method getModifyBy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol
	[ERROR]   symbol: method setCpuQuota(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol
	[ERROR]   symbol: method setMemoryMax(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol
	[ERROR]   symbol:   method getAddrList()
	[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[41,56] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[46,67] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[57,36] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[58,36] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,67] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,97] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[64,81] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[65,40] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,45] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,75] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[73,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.dao.PluginDao
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[74,86] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[75,37] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,49] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,79] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,45] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,77] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[84,56] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[85,58] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[88,32] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[35,9] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[38,73] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[39,40] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[40,40] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[41,43] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[42,48] cannot find symbol
	[ERROR]   symbol:   method getReleaseState()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[43,47] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[44,47] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[45,48] cannot find symbol
	[ERROR]   symbol:   method getGlobalParams()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[46,51] cannot find symbol
	[ERROR]   symbol:   method getGlobalParamList()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[47,13] cannot find symbol
	[ERROR]   symbol: method setGlobalParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:
{
			/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.Flag;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
			import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
			
			import java.io.Serializable;
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.FieldStrategy;
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
						
",
,
			fromLine:"			54",
			toLine:"			74",
			content:"
			    
			    private int taskDefinitionVersion;
			    
			    @TableField(exist = false)
			    private String processDefinitionName;
			    private Date createTime;
			    @TableField(exist = false)
			    private int taskGroupPriority;
			
			    private TaskExecutionStatus state;
			    private Long projectCode;
			    private Date firstSubmitTime;
			    private Date submitTime;
			
			    private Date startTime;
			    private Date endTime;
			    private String host;
			
			    private String executePath;
			    private String logPath;
			    private int retryTimes;			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.mapper;
			
			import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
			import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
			import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
			import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
			
			import org.apache.ibatis.annotations.Param;
			
			import java.util.Collection;
			import java.util.Date;
			import java.util.List;
			import java.util.Set;
			
			import com.baomidou.mybatisplus.core.mapper.BaseMapper;
			import com.baomidou.mybatisplus.core.metadata.IPage;
			import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
						
",
,
			fromLine:"			252",
			toLine:"			282",
			content:"
			     * query workflow instance by workflowDefinitionCode and stateArray
			     *
			     * @param workflowDefinitionCode workflowDefinitionCode
			     * @param states                states array
			     * @return workflow instance list
			     */
			
			    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
			                                                                  @Param("states") int[] states);
			
			    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowCodeVersionStatus") WorkflowCodeVersionStatus workflowCodeVersionStatus);
			
			    /**
			     * Filter workflow instance
			     *
			     * @param page                  page
			     * @param workflowInstanceFilter workflowInstanceFilter
			     * @return workflow instance IPage
			     */
			    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
			                                                              @Param("workflowInstanceFilter") WorkflowInstanceFilter workflowInstanceFilter);
			
			    /**
			     * Statistics workflow instance state v2
			     * <p>
			     * We only need project codes to determine whether the workflow instance belongs to the user or not.
			     *
			     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter
			     * @param model        model
			     * @param projectIds   projectIds
			     * @return ExecuteStatusCount list			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.CommandType;
			import org.apache.dolphinscheduler.common.enums.FailureStrategy;
			import org.apache.dolphinscheduler.common.enums.Flag;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.TaskDependType;
			import org.apache.dolphinscheduler.common.enums.WarningType;
			import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
			import org.apache.dolphinscheduler.common.utils.DateUtils;
			import org.apache.dolphinscheduler.common.utils.JSONUtils;
			
			import org.apache.commons.lang3.StringUtils;
			
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.List;
			
			import lombok.AllArgsConstructor;
			import lombok.Builder;
			import lombok.Data;
			import lombok.NoArgsConstructor;
			
			import com.baomidou.mybatisplus.annotation.FieldStrategy;
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
			import com.google.common.base.Strings;
						
",
,
			fromLine:"			162",
			toLine:"			183",
			content:"
			
			    /**
			     * set the process name with process define version and timestamp
			     *
			     * @param workflowDefinition processDefinition
			     */
			    public WorkflowInstance(WorkflowDefinition workflowDefinition) {
			        this.workflowDefinition = workflowDefinition;
			        // todo: the name is not unique
			        this.name = String.join("-",
			                workflowDefinition.getName(),
			                String.valueOf(workflowDefinition.getVersion()),
			                DateUtils.getCurrentTimeStamp());
			    }
			
			    /**
			     * add command to history
			     *
			     * @param cmd cmd
			     */
			    public void addHistoryCmd(CommandType cmd) {
			        if (!Strings.isNullOrEmpty(this.historyCmd)) {			
",
,
			fromLine:"			211",
			toLine:"			238",
			content:"
			        }
			        return commandType;
			    }
			
			    /**
			     * set state with desc
			     * @param state
			     * @param stateDesc
			     */
			    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {
			        this.setState(state);
			        if (StringUtils.isEmpty(this.getStateHistory())) {
			            stateDescList = new ArrayList<>();
			        } else if (stateDescList == null) {
			            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);
			        }
			        stateDescList.add(new StateDesc(new Date(), state, stateDesc));
			        this.setStateHistory(JSONUtils.toJsonString(stateDescList));
			    }
			
			    @Data
			    @NoArgsConstructor
			    @AllArgsConstructor
			    public static class StateDesc {
			
			        Date time;
			        WorkflowExecutionStatus state;
			        String desc;			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.ConditionType;
			import org.apache.dolphinscheduler.common.utils.JSONUtils;
			
			import java.util.Date;
			
			import lombok.AllArgsConstructor;
			import lombok.Builder;
			import lombok.Data;
			import lombok.NoArgsConstructor;
			
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
			import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
			import com.fasterxml.jackson.databind.annotation.JsonSerialize;
						
",
,
			fromLine:"			91",
			toLine:"			122",
			content:"
			        this.postTaskVersion = postTaskVersion;
			        this.conditionType = conditionType;
			        this.conditionParams = conditionParams;
			
			        Date now = new Date();
			        this.createTime = now;
			        this.updateTime = now;
			    }
			
			    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {
			        this.name = processTaskRelationLog.getName();
			        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();
			        this.projectCode = processTaskRelationLog.getProjectCode();
			        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();
			        this.preTaskCode = processTaskRelationLog.getPreTaskCode();
			        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();
			        this.postTaskCode = processTaskRelationLog.getPostTaskCode();
			        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();
			        this.conditionType = processTaskRelationLog.getConditionType();
			        this.conditionParams = processTaskRelationLog.getConditionParams();
			
			        this.createTime = processTaskRelationLog.getCreateTime();
			        this.updateTime = new Date();
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:
		[
			fromLine:"			17",
			toLine:"			61",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.TableName;
			
			@Data
			@TableName("t_ds_workflow_task_relation_log")
			public class WorkflowTaskRelationLog extends WorkflowTaskRelation {
			
			    private int operator;
			
			    private Date operateTime;
			
			    public WorkflowTaskRelationLog() {
			        super();
			    }
			
			    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {
			        super();
			        this.setName(workflowTaskRelation.getName());
			        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());
			        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());
			        this.setProjectCode(workflowTaskRelation.getProjectCode());
			        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());
			        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());
			        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());
			        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());
			        this.setConditionType(workflowTaskRelation.getConditionType());
			        this.setConditionParams(workflowTaskRelation.getConditionParams());
			        this.setCreateTime(workflowTaskRelation.getCreateTime());
			        this.setUpdateTime(workflowTaskRelation.getUpdateTime());
			    }
			
			    @Override
			    public boolean equals(Object o) {
			        return super.equals(o);
			    }
			
			    @Override
			    public int hashCode() {
			        return super.hashCode();			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import com.baomidou.mybatisplus.annotation.TableName;
						
",
,
			fromLine:"			31",
			toLine:"			86",
			content:"
			     * operator user id
			     */
			    private int operator;
			
			    /**
			     * operate time
			     */
			    private Date operateTime;
			
			    public TaskDefinitionLog() {
			        super();
			    }
			
			    public TaskDefinitionLog(TaskDefinition taskDefinition) {
			        super();
			        this.setCode(taskDefinition.getCode());
			        this.setVersion(taskDefinition.getVersion());
			        this.setName(taskDefinition.getName());
			        this.setDescription(taskDefinition.getDescription());
			        this.setUserId(taskDefinition.getUserId());
			        this.setUserName(taskDefinition.getUserName());
			        this.setWorkerGroup(taskDefinition.getWorkerGroup());
			        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
			        this.setProjectCode(taskDefinition.getProjectCode());
			        this.setProjectName(taskDefinition.getProjectName());
			        this.setResourceIds(taskDefinition.getResourceIds());
			        this.setTaskParams(taskDefinition.getTaskParams());
			        this.setTaskParamList(taskDefinition.getTaskParamList());
			        this.setTaskParamMap(taskDefinition.getTaskParamMap());
			        this.setTaskPriority(taskDefinition.getTaskPriority());
			        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
			        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
			        this.setTaskType(taskDefinition.getTaskType());
			        this.setTimeout(taskDefinition.getTimeout());
			        this.setDelayTime(taskDefinition.getDelayTime());
			        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
			        this.setUpdateTime(taskDefinition.getUpdateTime());
			        this.setCreateTime(taskDefinition.getCreateTime());
			        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
			        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
			        this.setFlag(taskDefinition.getFlag());
			        this.setIsCache(taskDefinition.getIsCache());
			        this.setModifyBy(taskDefinition.getModifyBy());
			        this.setCpuQuota(taskDefinition.getCpuQuota());
			        this.setMemoryMax(taskDefinition.getMemoryMax());
			        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
			    }
			
			    public int getOperator() {
			        return operator;
			    }
			
			    public void setOperator(int operator) {
			        this.operator = operator;
			    }
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.dolphinscheduler.dao.utils;
			
			import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
			
			import org.apache.commons.lang3.StringUtils;
			
			import java.util.Collections;
			import java.util.List;
			
			import com.google.common.collect.Lists;
						
",
,
			fromLine:"			43",
			toLine:"			63",
			content:"
			
			    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {
			        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;
			    }
			
			    public static String getDefaultWorkerGroup() {
			        return DEFAULT_WORKER_GROUP;
			    }
			
			    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {
			        String addrList = workerGroup.getAddrList();
			        if (StringUtils.isEmpty(addrList)) {
			            return Collections.emptyList();
			        }
			        return Lists.newArrayList(addrList.split(","));
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.dolphinscheduler.dao.repository.impl;
			
			import org.apache.dolphinscheduler.dao.entity.Session;
			import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
			import org.apache.dolphinscheduler.dao.repository.BaseDao;
			import org.apache.dolphinscheduler.dao.repository.SessionDao;
			
			import java.util.List;
			
			import lombok.NonNull;
			
			import org.springframework.stereotype.Repository;
			
			import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
			
			@Repository
			public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {
			
			    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {
			        super(sessionMapper);
			    }
			
			    public void deleteByUserId(Integer userId) {
			        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));
			    }
			
			    @Override
			    public List<Session> queryByUserId(Integer userId) {
			        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.dolphinscheduler.dao;
			
			import static java.util.Objects.requireNonNull;
			
			import org.apache.dolphinscheduler.dao.entity.PluginDefine;
			import org.apache.dolphinscheduler.dao.mapper.PluginDefineMapper;
			import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
			
			import java.util.Objects;
			
			import lombok.NonNull;
			import lombok.extern.slf4j.Slf4j;
			
			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.stereotype.Repository;
						
",
,
			fromLine:"			47",
			toLine:"			98",
			content:"
			        return pluginDefineMapper.checkTableExist() > 0;
			    }
			
			    /**
			     * add or update plugin define
			     *
			     * @param pluginDefine new pluginDefine
			     * @return plugin id
			     */
			    public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {
			        requireNonNull(pluginDefine.getPluginName(), "pluginName is null");
			        requireNonNull(pluginDefine.getPluginType(), "pluginType is null");
			
			        PluginDefine currPluginDefine =
			                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());
			        if (currPluginDefine == null) {
			            try {
			                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {
			                    return pluginDefine.getId();
			                }
			                throw new TaskPluginException(
			                        String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
			                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));
			            } catch (TaskPluginException ex) {
			                throw ex;
			            } catch (Exception ex) {
			                log.error("Insert plugin definition error, there may already exist a plugin", ex);
			                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),
			                        pluginDefine.getPluginType());
			                if (currPluginDefine == null) {
			                    throw new TaskPluginException(
			                            String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
			                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));
			                }
			            }
			        }
			        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {
			            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());
			            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());
			            pluginDefineMapper.updateById(currPluginDefine);
			        }
			        return currPluginDefine.getId();
			    }
			
			    /**
			     * query plugin define by id
			     *
			     * @param pluginDefineId plugin define id
			     * @return PluginDefine
			     */
			    public PluginDefine getPluginDefineById(int pluginDefineId) {
			        return pluginDefineMapper.selectById(pluginDefineId);			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:
		[
			fromLine:"			17",
			toLine:"			57",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.TableName;
			
			@Data
			@TableName("t_ds_workflow_definition_log")
			public class WorkflowDefinitionLog extends WorkflowDefinition {
			
			    private int operator;
			
			    private Date operateTime;
			
			    public WorkflowDefinitionLog() {
			        super();
			    }
			
			    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {
			        this.setCode(workflowDefinition.getCode());
			        this.setName(workflowDefinition.getName());
			        this.setVersion(workflowDefinition.getVersion());
			        this.setReleaseState(workflowDefinition.getReleaseState());
			        this.setProjectCode(workflowDefinition.getProjectCode());
			        this.setDescription(workflowDefinition.getDescription());
			        this.setGlobalParams(workflowDefinition.getGlobalParams());
			        this.setGlobalParamList(workflowDefinition.getGlobalParamList());
			        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());
			        this.setCreateTime(workflowDefinition.getCreateTime());
			        this.setUpdateTime(workflowDefinition.getUpdateTime());
			        this.setFlag(workflowDefinition.getFlag());
			        this.setUserId(workflowDefinition.getUserId());
			        this.setUserName(workflowDefinition.getUserName());
			        this.setProjectName(workflowDefinition.getProjectName());
			        this.setLocations(workflowDefinition.getLocations());
			        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());
			        this.setTimeout(workflowDefinition.getTimeout());
			        this.setModifyBy(workflowDefinition.getModifyBy());			
",
,

		],
	
}
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
			[
				fromLine:"				54",
				toLine:"				74",
				oldContent:"
				
				    private int taskDefinitionVersion;
				    
				    @TableField(exist = false)
				    private String processDefinitionName;
				    private Date createTime;
				    @TableField(exist = false)
				    private int taskGroupPriority;
				
				    private TaskExecutionStatus state;
				    private Long projectCode;
				    private Date firstSubmitTime;
				    private Date submitTime;
				
				    private Date startTime;
				    private Date endTime;
				    private String host;
				
				    private String executePath;
				    private String logPath;
				    private int retryTimes;				
",
				newContent:"
				
				    private int taskDefinitionVersion;
				    
				    @TableField(exist = false)
				    private String processDefinitionName;
				    @TableField(value = "create_time")
				    private Date createTime;
				    @TableField(exist = false)
				    private int taskGroupPriority;
				
				    @TableField(value = "state")
				    private TaskExecutionStatus state;
				    @TableField(value = "project_code")
				    private Long projectCode;
				    @TableField(value = "first_submit_time")
				    private Date firstSubmitTime;
				    @TableField(value = "submit_time")
				    private Date submitTime;
				
				    @TableField(value = "start_time")
				    private Date startTime;
				    @TableField(value = "end_time")
				    private Date endTime;
				    @TableField(value = "host")
				    private String host;
				
				    @TableField(value = "execute_path")
				    private String executePath;
				    @TableField(value = "log_path")
				    private String logPath;
				    @TableField(value = "retry_times")
				    private int retryTimes;				
",
,

			],
			/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:
			[
				fromLine:"				252",
				toLine:"				282",
				oldContent:"
				     * query workflow instance by workflowDefinitionCode and stateArray
				     *
				     * @param workflowDefinitionCode workflowDefinitionCode
				     * @param states                states array
				     * @return workflow instance list
				     */
				
				    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
				                                                                  @Param("states") int[] states);
				
				    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowCodeVersionStatus") WorkflowCodeVersionStatus workflowCodeVersionStatus);
				
				    /**
				     * Filter workflow instance
				     *
				     * @param page                  page
				     * @param workflowInstanceFilter workflowInstanceFilter
				     * @return workflow instance IPage
				     */
				    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
				                                                              @Param("workflowInstanceFilter") WorkflowInstanceFilter workflowInstanceFilter);
				
				    /**
				     * Statistics workflow instance state v2
				     * <p>
				     * We only need project codes to determine whether the workflow instance belongs to the user or not.
				     *
				     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter
				     * @param model        model
				     * @param projectIds   projectIds
				     * @return ExecuteStatusCount list				
",
				newContent:"
				     * query workflow instance by workflowDefinitionCode and stateArray
				     *
				     * @param workflowDefinitionCode workflowDefinitionCode
				     * @param states                states array
				     * @return workflow instance list
				     */
				
				    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
				                                                                  @Param("states") int[] states);
				
				    // List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowCodeVersionStatus") WorkflowCodeVersionStatus workflowCodeVersionStatus);
				
				    /**
				     * Filter workflow instance
				     *
				     * @param page                  page
				     * @param workflowInstanceFilter workflowInstanceFilter
				     * @return workflow instance IPage
				     */
				    // IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
				    //                                                           @Param("workflowInstanceFilter") WorkflowInstanceFilter workflowInstanceFilter);
				
				    /**
				     * Statistics workflow instance state v2
				     * <p>
				     * We only need project codes to determine whether the workflow instance belongs to the user or not.
				     *
				     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter
				     * @param model        model
				     * @param projectIds   projectIds
				     * @return ExecuteStatusCount list				
",
,

			],
		
}
		extractedClasses:
{
				
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[67,18] variable projectCode is already defined in class org.apache.dolphinscheduler.dao.entity.TaskInstance
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[172,35] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[173,50] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[221,13] cannot find symbol
	[ERROR]   symbol: method setState(org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[222,37] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[225,50] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[227,27] constructor StateDesc in class org.apache.dolphinscheduler.dao.entity.WorkflowInstance.StateDesc cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.util.Date,org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[228,13] cannot find symbol
	[ERROR]   symbol: method setStateHistory(java.lang.String)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[101,43] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[102,64] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[103,50] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[104,61] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[105,50] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[106,53] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[107,51] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[108,54] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[109,52] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[110,54] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[112,49] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[35,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[39,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[40,42] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[41,60] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[42,63] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[43,49] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[44,49] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[45,52] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[46,50] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[47,53] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[48,51] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[49,53] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[50,48] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[51,48] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol
	[ERROR]   symbol:   method getUserId()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol
	[ERROR]   symbol:   method getUserName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol
	[ERROR]   symbol:   method getWorkerGroup()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol
	[ERROR]   symbol:   method getEnvironmentCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol
	[ERROR]   symbol:   method getProjectName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol
	[ERROR]   symbol:   method getResourceIds()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol
	[ERROR]   symbol:   method getTaskParams()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol
	[ERROR]   symbol:   method getTaskPriority()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol
	[ERROR]   symbol:   method getTimeoutNotifyStrategy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol
	[ERROR]   symbol:   method getTimeout()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol
	[ERROR]   symbol:   method getDelayTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol
	[ERROR]   symbol:   method getTimeoutFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol
	[ERROR]   symbol:   method getFailRetryInterval()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol
	[ERROR]   symbol:   method getFailRetryTimes()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol
	[ERROR]   symbol:   method getFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol
	[ERROR]   symbol:   method getIsCache()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol
	[ERROR]   symbol:   method getModifyBy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol
	[ERROR]   symbol: method setCpuQuota(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol
	[ERROR]   symbol: method setMemoryMax(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol
	[ERROR]   symbol:   method getAddrList()
	[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[41,56] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[46,67] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[57,36] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[58,36] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,67] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,97] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[64,81] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[65,40] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,45] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,75] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[73,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.dao.PluginDao
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[74,86] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[75,37] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,49] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,79] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,45] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,77] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[84,56] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[85,58] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[88,32] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[35,9] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[38,73] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[39,40] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[40,40] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[41,43] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[42,48] cannot find symbol
	[ERROR]   symbol:   method getReleaseState()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[43,47] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[44,47] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[45,48] cannot find symbol
	[ERROR]   symbol:   method getGlobalParams()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[46,51] cannot find symbol
	[ERROR]   symbol:   method getGlobalParamList()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[47,13] cannot find symbol
	[ERROR]   symbol: method setGlobalParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[48,46] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[49,46] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:
{
			/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.Flag;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
			import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
			
			import java.io.Serializable;
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.FieldStrategy;
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
						
",
,
			fromLine:"			57",
			toLine:"			77",
			content:"
			    @TableField(exist = false)
			    private String processDefinitionName;
			    @TableField(value = "create_time")
			    private Date createTime;
			    @TableField(exist = false)
			    private int taskGroupPriority;
			
			    @TableField(value = "state")
			    private TaskExecutionStatus state;
			    @TableField(value = "project_code")
			    private Long projectCode;
			    @TableField(value = "first_submit_time")
			    private Date firstSubmitTime;
			    @TableField(value = "submit_time")
			    private Date submitTime;
			
			    @TableField(value = "start_time")
			    private Date startTime;
			    @TableField(value = "end_time")
			    private Date endTime;
			    @TableField(value = "host")			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.CommandType;
			import org.apache.dolphinscheduler.common.enums.FailureStrategy;
			import org.apache.dolphinscheduler.common.enums.Flag;
			import org.apache.dolphinscheduler.common.enums.Priority;
			import org.apache.dolphinscheduler.common.enums.TaskDependType;
			import org.apache.dolphinscheduler.common.enums.WarningType;
			import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
			import org.apache.dolphinscheduler.common.utils.DateUtils;
			import org.apache.dolphinscheduler.common.utils.JSONUtils;
			
			import org.apache.commons.lang3.StringUtils;
			
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.List;
			
			import lombok.AllArgsConstructor;
			import lombok.Builder;
			import lombok.Data;
			import lombok.NoArgsConstructor;
			
			import com.baomidou.mybatisplus.annotation.FieldStrategy;
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableField;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
			import com.google.common.base.Strings;
						
",
,
			fromLine:"			162",
			toLine:"			183",
			content:"
			
			    /**
			     * set the process name with process define version and timestamp
			     *
			     * @param workflowDefinition processDefinition
			     */
			    public WorkflowInstance(WorkflowDefinition workflowDefinition) {
			        this.workflowDefinition = workflowDefinition;
			        // todo: the name is not unique
			        this.name = String.join("-",
			                workflowDefinition.getName(),
			                String.valueOf(workflowDefinition.getVersion()),
			                DateUtils.getCurrentTimeStamp());
			    }
			
			    /**
			     * add command to history
			     *
			     * @param cmd cmd
			     */
			    public void addHistoryCmd(CommandType cmd) {
			        if (!Strings.isNullOrEmpty(this.historyCmd)) {			
",
,
			fromLine:"			211",
			toLine:"			238",
			content:"
			        }
			        return commandType;
			    }
			
			    /**
			     * set state with desc
			     * @param state
			     * @param stateDesc
			     */
			    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {
			        this.setState(state);
			        if (StringUtils.isEmpty(this.getStateHistory())) {
			            stateDescList = new ArrayList<>();
			        } else if (stateDescList == null) {
			            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);
			        }
			        stateDescList.add(new StateDesc(new Date(), state, stateDesc));
			        this.setStateHistory(JSONUtils.toJsonString(stateDescList));
			    }
			
			    @Data
			    @NoArgsConstructor
			    @AllArgsConstructor
			    public static class StateDesc {
			
			        Date time;
			        WorkflowExecutionStatus state;
			        String desc;			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import org.apache.dolphinscheduler.common.enums.ConditionType;
			import org.apache.dolphinscheduler.common.utils.JSONUtils;
			
			import java.util.Date;
			
			import lombok.AllArgsConstructor;
			import lombok.Builder;
			import lombok.Data;
			import lombok.NoArgsConstructor;
			
			import com.baomidou.mybatisplus.annotation.IdType;
			import com.baomidou.mybatisplus.annotation.TableId;
			import com.baomidou.mybatisplus.annotation.TableName;
			import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
			import com.fasterxml.jackson.databind.annotation.JsonSerialize;
						
",
,
			fromLine:"			91",
			toLine:"			122",
			content:"
			        this.postTaskVersion = postTaskVersion;
			        this.conditionType = conditionType;
			        this.conditionParams = conditionParams;
			
			        Date now = new Date();
			        this.createTime = now;
			        this.updateTime = now;
			    }
			
			    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {
			        this.name = processTaskRelationLog.getName();
			        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();
			        this.projectCode = processTaskRelationLog.getProjectCode();
			        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();
			        this.preTaskCode = processTaskRelationLog.getPreTaskCode();
			        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();
			        this.postTaskCode = processTaskRelationLog.getPostTaskCode();
			        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();
			        this.conditionType = processTaskRelationLog.getConditionType();
			        this.conditionParams = processTaskRelationLog.getConditionParams();
			
			        this.createTime = processTaskRelationLog.getCreateTime();
			        this.updateTime = new Date();
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:
		[
			fromLine:"			17",
			toLine:"			61",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.TableName;
			
			@Data
			@TableName("t_ds_workflow_task_relation_log")
			public class WorkflowTaskRelationLog extends WorkflowTaskRelation {
			
			    private int operator;
			
			    private Date operateTime;
			
			    public WorkflowTaskRelationLog() {
			        super();
			    }
			
			    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {
			        super();
			        this.setName(workflowTaskRelation.getName());
			        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());
			        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());
			        this.setProjectCode(workflowTaskRelation.getProjectCode());
			        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());
			        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());
			        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());
			        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());
			        this.setConditionType(workflowTaskRelation.getConditionType());
			        this.setConditionParams(workflowTaskRelation.getConditionParams());
			        this.setCreateTime(workflowTaskRelation.getCreateTime());
			        this.setUpdateTime(workflowTaskRelation.getUpdateTime());
			    }
			
			    @Override
			    public boolean equals(Object o) {
			        return super.equals(o);
			    }
			
			    @Override
			    public int hashCode() {
			        return super.hashCode();			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import com.baomidou.mybatisplus.annotation.TableName;
						
",
,
			fromLine:"			31",
			toLine:"			86",
			content:"
			     * operator user id
			     */
			    private int operator;
			
			    /**
			     * operate time
			     */
			    private Date operateTime;
			
			    public TaskDefinitionLog() {
			        super();
			    }
			
			    public TaskDefinitionLog(TaskDefinition taskDefinition) {
			        super();
			        this.setCode(taskDefinition.getCode());
			        this.setVersion(taskDefinition.getVersion());
			        this.setName(taskDefinition.getName());
			        this.setDescription(taskDefinition.getDescription());
			        this.setUserId(taskDefinition.getUserId());
			        this.setUserName(taskDefinition.getUserName());
			        this.setWorkerGroup(taskDefinition.getWorkerGroup());
			        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
			        this.setProjectCode(taskDefinition.getProjectCode());
			        this.setProjectName(taskDefinition.getProjectName());
			        this.setResourceIds(taskDefinition.getResourceIds());
			        this.setTaskParams(taskDefinition.getTaskParams());
			        this.setTaskParamList(taskDefinition.getTaskParamList());
			        this.setTaskParamMap(taskDefinition.getTaskParamMap());
			        this.setTaskPriority(taskDefinition.getTaskPriority());
			        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
			        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
			        this.setTaskType(taskDefinition.getTaskType());
			        this.setTimeout(taskDefinition.getTimeout());
			        this.setDelayTime(taskDefinition.getDelayTime());
			        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
			        this.setUpdateTime(taskDefinition.getUpdateTime());
			        this.setCreateTime(taskDefinition.getCreateTime());
			        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
			        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
			        this.setFlag(taskDefinition.getFlag());
			        this.setIsCache(taskDefinition.getIsCache());
			        this.setModifyBy(taskDefinition.getModifyBy());
			        this.setCpuQuota(taskDefinition.getCpuQuota());
			        this.setMemoryMax(taskDefinition.getMemoryMax());
			        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
			    }
			
			    public int getOperator() {
			        return operator;
			    }
			
			    public void setOperator(int operator) {
			        this.operator = operator;
			    }
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.dolphinscheduler.dao.utils;
			
			import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
			
			import org.apache.commons.lang3.StringUtils;
			
			import java.util.Collections;
			import java.util.List;
			
			import com.google.common.collect.Lists;
						
",
,
			fromLine:"			43",
			toLine:"			63",
			content:"
			
			    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {
			        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;
			    }
			
			    public static String getDefaultWorkerGroup() {
			        return DEFAULT_WORKER_GROUP;
			    }
			
			    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {
			        String addrList = workerGroup.getAddrList();
			        if (StringUtils.isEmpty(addrList)) {
			            return Collections.emptyList();
			        }
			        return Lists.newArrayList(addrList.split(","));
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.dolphinscheduler.dao.repository.impl;
			
			import org.apache.dolphinscheduler.dao.entity.Session;
			import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
			import org.apache.dolphinscheduler.dao.repository.BaseDao;
			import org.apache.dolphinscheduler.dao.repository.SessionDao;
			
			import java.util.List;
			
			import lombok.NonNull;
			
			import org.springframework.stereotype.Repository;
			
			import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
			
			@Repository
			public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {
			
			    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {
			        super(sessionMapper);
			    }
			
			    public void deleteByUserId(Integer userId) {
			        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));
			    }
			
			    @Override
			    public List<Session> queryByUserId(Integer userId) {
			        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));
			    }
			
			}
						
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.dolphinscheduler.dao;
			
			import static java.util.Objects.requireNonNull;
			
			import org.apache.dolphinscheduler.dao.entity.PluginDefine;
			import org.apache.dolphinscheduler.dao.mapper.PluginDefineMapper;
			import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
			
			import java.util.Objects;
			
			import lombok.NonNull;
			import lombok.extern.slf4j.Slf4j;
			
			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.stereotype.Repository;
						
",
,
			fromLine:"			47",
			toLine:"			98",
			content:"
			        return pluginDefineMapper.checkTableExist() > 0;
			    }
			
			    /**
			     * add or update plugin define
			     *
			     * @param pluginDefine new pluginDefine
			     * @return plugin id
			     */
			    public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {
			        requireNonNull(pluginDefine.getPluginName(), "pluginName is null");
			        requireNonNull(pluginDefine.getPluginType(), "pluginType is null");
			
			        PluginDefine currPluginDefine =
			                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());
			        if (currPluginDefine == null) {
			            try {
			                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {
			                    return pluginDefine.getId();
			                }
			                throw new TaskPluginException(
			                        String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
			                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));
			            } catch (TaskPluginException ex) {
			                throw ex;
			            } catch (Exception ex) {
			                log.error("Insert plugin definition error, there may already exist a plugin", ex);
			                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),
			                        pluginDefine.getPluginType());
			                if (currPluginDefine == null) {
			                    throw new TaskPluginException(
			                            String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
			                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));
			                }
			            }
			        }
			        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {
			            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());
			            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());
			            pluginDefineMapper.updateById(currPluginDefine);
			        }
			        return currPluginDefine.getId();
			    }
			
			    /**
			     * query plugin define by id
			     *
			     * @param pluginDefineId plugin define id
			     * @return PluginDefine
			     */
			    public PluginDefine getPluginDefineById(int pluginDefineId) {
			        return pluginDefineMapper.selectById(pluginDefineId);			
",
,

		],
		/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:
		[
			fromLine:"			17",
			toLine:"			59",
			content:"
			
			package org.apache.dolphinscheduler.dao.entity;
			
			import java.util.Date;
			
			import lombok.Data;
			
			import com.baomidou.mybatisplus.annotation.TableName;
			
			@Data
			@TableName("t_ds_workflow_definition_log")
			public class WorkflowDefinitionLog extends WorkflowDefinition {
			
			    private int operator;
			
			    private Date operateTime;
			
			    public WorkflowDefinitionLog() {
			        super();
			    }
			
			    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {
			        this.setCode(workflowDefinition.getCode());
			        this.setName(workflowDefinition.getName());
			        this.setVersion(workflowDefinition.getVersion());
			        this.setReleaseState(workflowDefinition.getReleaseState());
			        this.setProjectCode(workflowDefinition.getProjectCode());
			        this.setDescription(workflowDefinition.getDescription());
			        this.setGlobalParams(workflowDefinition.getGlobalParams());
			        this.setGlobalParamList(workflowDefinition.getGlobalParamList());
			        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());
			        this.setCreateTime(workflowDefinition.getCreateTime());
			        this.setUpdateTime(workflowDefinition.getUpdateTime());
			        this.setFlag(workflowDefinition.getFlag());
			        this.setUserId(workflowDefinition.getUserId());
			        this.setUserName(workflowDefinition.getUserName());
			        this.setProjectName(workflowDefinition.getProjectName());
			        this.setLocations(workflowDefinition.getLocations());
			        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());
			        this.setTimeout(workflowDefinition.getTimeout());
			        this.setModifyBy(workflowDefinition.getModifyBy());
			        this.setWarningGroupId(workflowDefinition.getWarningGroupId());
			        this.setExecutionType(workflowDefinition.getExecutionType());			
",
,

		],
	
}
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.9",
