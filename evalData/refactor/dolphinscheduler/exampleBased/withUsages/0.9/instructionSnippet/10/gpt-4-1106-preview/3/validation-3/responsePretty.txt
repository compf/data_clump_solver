"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImpl.java": [
            {
                "fromLine": 156,
                "toLine": 176,
                "oldContent": "@Override\n    // Deprecated and to be removed in future versions, replaced by queryBySomethingElse method\n    // public List<WorkflowInstance> queryByWorkflowCodeVersionStatus(Long workflowDefinitionCode,\n    //                                                               int workflowDefinitionVersion,\n    //                                                               int[] states) {\n    //     return mybatisMapper.queryByWorkflowCodeVersionStatus(workflowDefinitionCode, workflowDefinitionVersion,\n    //             states);\n    // }\n\n    @Override",
                "newContent": "@Override\n    // Deprecated and to be removed in future versions, replaced by queryBySomethingElse method\n    // public List<WorkflowInstance> queryByWorkflowCodeVersionStatus(Long workflowDefinitionCode,\n    //                                                               int workflowDefinitionVersion,\n    //                                                               int[] states) {\n    //     return mybatisMapper.queryByWorkflowCodeVersionStatus(workflowDefinitionCode, workflowDefinitionVersion,\n    //             states);\n    // }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 212,
                "toLine": 237,
                "oldContent": "    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        // this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        // this.setStateHistory(JSONUtils.toJsonString(stateDescList));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class StateDesc {\n\n        Date time;\n        WorkflowExecutionStatus state;",
                "newContent": "    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        // this.setState(state);\n        if (StringUtils.isEmpty(this.stateHistory)) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.stateHistory, StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        // this.setStateHistory(JSONUtils.toJsonString(stateDescList));\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @Builder\n    public static class StateDesc {\n\n        Date time;\n        WorkflowExecutionStatus state;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 31,
                "toLine": 86,
                "oldContent": "    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n    }\n",
                "newContent": "// Unable to refactor TaskDefinitionLog class automatically\n    // Manual check required\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 43,
                "toLine": 63,
                "oldContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.getAddrList();\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();\n        }\n        return Lists.newArrayList(addrList.split(\",\"));\n    }\n",
                "newContent": "public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        // Manual check required for getAddrList method\n        // String addrList = workerGroup.getAddrList();\n        if (StringUtils.isEmpty(workerGroup.getAddresses())) {\n            return Collections.emptyList();\n        }\n        return Lists.newArrayList(workerGroup.getAddresses().split(\",\"));\n    }\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 17,
                "toLine": 56,
                "oldContent": "public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {\n\n    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {\n        super(sessionMapper);\n    }\n",
                "newContent": "public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {\n\n    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {\n        super(sessionMapper);\n    }\n    // Constructor builder method was here\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 47,
                "toLine": 98,
                "oldContent": "public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {\n        requireNonNull(pluginDefine.getPluginName(), \"pluginName is null\");\n        requireNonNull(pluginDefine.getPluginType(), \"pluginType is null\");\n",
                "newContent": "public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {\n        // Manual check for PluginDefine class needed\n        // requireNonNull(pluginDefine.getPluginName(), \"pluginName is null\");\n        // requireNonNull(pluginDefine.getPluginType(), \"pluginType is null\");\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 17,
                "toLine": 69,
                "oldContent": "public class WorkflowDefinitionLog extends WorkflowDefinition {\n    public WorkflowDefinitionLog() {\n        super();\n    }\n\n    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());\n        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());\n        this.setCreateTime(workflowDefinition.getCreateTime());\n        this.setUpdateTime(workflowDefinition.getUpdateTime());\n        this.setFlag(workflowDefinition.getFlag());\n        this.setUserId(workflowDefinition.getUserId());\n        this.setUserName(workflowDefinition.getUserName());\n        this.setProjectName(workflowDefinition.getProjectName());\n        this.setLocations(workflowDefinition.getLocations());\n        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());\n        this.setTimeout(workflowDefinition.getTimeout());\n        this.setModifyBy(workflowDefinition.getModifyBy());\n        this.setWarningGroupId(workflowDefinition.getWarningGroupId());\n        this.setExecutionType(workflowDefinition.getExecutionType());\n    }\n",
                "newContent": "// Unable to refactor WorkflowDefinitionLog class automatically\n    // Manual check required\n"
            }
        ]
    },
    "extractedClasses": {}
}"