"{
    "refactorings": {},
    "extractedClasses": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.test.entity.HttpResponse;\nimport org.apache.dolphinscheduler.api.test.utils.RequestClient;\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExecutionParameters {\n\n    private final User loginUser;\n    private final long projectCode;\n    private final long workflowInstanceCode;\n    private final String sessionId;\n\n    public ExecutionParameters(User loginUser, long projectCode, long workflowInstanceCode, String sessionId) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowInstanceCode = workflowInstanceCode;\n        this.sessionId = sessionId;\n    }\n\n    public HttpResponse executeTask(RequestClient requestClient, int workflowInstanceId, String startNodeList, TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        String url = String.format(\"/projects/%s/executors/execute\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n    // Additional methods for queryExecutingWorkflow and execute can be added here\n}\n"
    }
}"