{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 54,
                "toLine": 74,
                "oldContent": "\n    private int taskDefinitionVersion;\n    \n    @TableField(exist = false)\n    private String processDefinitionName;\n    private Date createTime;\n    @TableField(exist = false)\n    private int taskGroupPriority;\n\n    private TaskExecutionStatus state;\n    private Long projectCode;\n    private Date firstSubmitTime;\n    private Date submitTime;\n\n    private Date startTime;\n    private Date endTime;\n    private String host;\n\n    private String executePath;\n    private String logPath;\n    private int retryTimes;",
                "newContent": "\n    private int taskDefinitionVersion;\n    \n    @TableField(exist = false)\n    private String processDefinitionName;\n    @TableField(value = \"create_time\")\n    private Date createTime;\n    @TableField(exist = false)\n    private int taskGroupPriority;\n\n    @TableField(value = \"state\")\n    private TaskExecutionStatus state;\n    @TableField(value = \"project_code\")\n    private Long projectCode;\n    @TableField(value = \"first_submit_time\")\n    private Date firstSubmitTime;\n    @TableField(value = \"submit_time\")\n    private Date submitTime;\n\n    @TableField(value = \"start_time\")\n    private Date startTime;\n    @TableField(value = \"end_time\")\n    private Date endTime;\n    @TableField(value = \"host\")\n    private String host;\n\n    @TableField(value = \"execute_path\")\n    private String executePath;\n    @TableField(value = \"log_path\")\n    private String logPath;\n    @TableField(value = \"retry_times\")\n    private int retryTimes;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 252,
                "toLine": 282,
                "oldContent": "     * query workflow instance by workflowDefinitionCode and stateArray\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param states                states array\n     * @return workflow instance list\n     */\n\n    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                                  @Param(\"states\") int[] states);\n\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowCodeVersionStatus\") WorkflowCodeVersionStatus workflowCodeVersionStatus);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowInstanceFilter workflowInstanceFilter\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"workflowInstanceFilter\") WorkflowInstanceFilter workflowInstanceFilter);\n\n    /**\n     * Statistics workflow instance state v2\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter\n     * @param model        model\n     * @param projectIds   projectIds\n     * @return ExecuteStatusCount list",
                "newContent": "     * query workflow instance by workflowDefinitionCode and stateArray\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param states                states array\n     * @return workflow instance list\n     */\n\n    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                                  @Param(\"states\") int[] states);\n\n    // List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowCodeVersionStatus\") WorkflowCodeVersionStatus workflowCodeVersionStatus);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowInstanceFilter workflowInstanceFilter\n     * @return workflow instance IPage\n     */\n    // IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n    //                                                           @Param(\"workflowInstanceFilter\") WorkflowInstanceFilter workflowInstanceFilter);\n\n    /**\n     * Statistics workflow instance state v2\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param workflowStateStatisticsFilter workflowStateStatisticsFilter\n     * @param model        model\n     * @param projectIds   projectIds\n     * @return ExecuteStatusCount list"
            }
        ]
    },
    "extractedClasses": {}
}