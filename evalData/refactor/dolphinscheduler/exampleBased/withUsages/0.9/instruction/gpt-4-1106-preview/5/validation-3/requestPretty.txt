messages:
[
	content:"
	
	I will provide you one or more Java code files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.test.pages.workflow;
	
	import org.apache.dolphinscheduler.api.enums.ExecuteType;
	import org.apache.dolphinscheduler.api.test.core.Constants;
	import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
	import org.apache.dolphinscheduler.api.test.utils.RequestClient;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	@AllArgsConstructor
	public class ExecutorPage {
	
	    private String sessionId;
	
	    public HttpResponse startWorkflowInstance(User loginUser,
	                                              long projectCode,
	                                              long workflowDefinitionCode,
	                                              String scheduleTime,
	                                              FailureStrategy failureStrategy,
	                                              WarningType warningType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowDefinitionCode", workflowDefinitionCode);
	        params.put("scheduleTime", scheduleTime);
	        params.put("failureStrategy", failureStrategy);
	        params.put("warningType", warningType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/start-workflow-instance", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("id", workflowInstanceCode);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
	        return requestClient.get(url, headers, params);
	    }
	
	    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("projectCode", projectCode);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("executeType", executeType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
	                                    TaskDependType taskDependType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("startNodeList", startNodeList);
	        params.put("taskDependType", taskDependType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute-task", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param("projectCode") Long projectCode,
	                                                            @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                            @Param("searchVal") String searchVal,
	                                                            @Param("executorName") String executorName,
	                                                            @Param("states") int[] statusArray,
	                                                            @Param("host") String host,
	                                                            @Param("startTime") Date startTime,
	                                                            @Param("endTime") Date endTime);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(String host, Date startTime, String executePath) {
	        this.host = host;
	        this.startTime = startTime;
	        this.executePath = executePath;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	public interface ProjectParameterService {
	
	    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);
	
	    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);
	
	    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,
	                                           String searchVal, String projectParameterDataType);
	
	    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;
	
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.ProjectParameterService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.constants.Constants;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	@Tag(name = "PROJECT_PARAMETER_TAG")
	@RestController
	@RequestMapping("projects/{projectCode}/project-parameter")
	@Slf4j
	public class ProjectParameterController extends BaseController {
	
	    @Autowired
	    private ProjectParameterService projectParameterService;
	
	    @Operation(summary = "createProjectParameter", description = "CREATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)
	    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType", defaultValue = "VARCHAR") String projectParameterDataType) {
	        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "updateProjectParameter", description = "UPDATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456")),
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PutMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)
	    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @PathVariable("code") Long code,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType") String projectParameterDataType) {
	        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "deleteProjectParametersByCode", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                @RequestParam("code") long code) {
	
	        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);
	    }
	
	    @Operation(summary = "batchDeleteProjectParametersByCodes", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "codes", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/batch-delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                      @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                      @RequestParam("codes") String codes) {
	
	        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);
	    }
	
	    @Operation(summary = "queryProjectParameterListPaging", description = "QUERY_PROJECT_PARAMETER_LIST_PAGING_NOTES")
	    @Parameters({
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", required = false, schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", required = true, schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", required = true, schema = @Schema(implementation = int.class, example = "10"))
	    })
	    @GetMapping()
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterListPaging(
	                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                  @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                  @RequestParam(value = "searchVal", required = false) String searchVal,
	                                                  @RequestParam(value = "projectParameterDataType", required = false) String projectParameterDataType,
	                                                  @RequestParam("pageNo") Integer pageNo,
	                                                  @RequestParam("pageSize") Integer pageSize) {
	
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                searchVal, projectParameterDataType);
	    }
	
	    @Operation(summary = "queryProjectParameterByCode", description = "QUERY_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456"))
	    })
	    @GetMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                              @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                              @PathVariable("code") long code) {
	        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.UserType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import org.junit.jupiter.api.Assertions;
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterControllerTest {
	
	    @InjectMocks
	    private ProjectParameterController projectParameterController;
	
	    @Mock
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),
	                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.createProjectParameter(loginUser, 1, "key", "value",
	                DataType.VARCHAR.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),
	                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, "key", "value",
	                DataType.LONG.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),
	                Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, "1");
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, "1",
	                DataType.VARCHAR.name(), 1, 10);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    private User getGeneralUser() {
	        User loginUser = new User();
	        loginUser.setUserType(UserType.GENERAL_USER);
	        loginUser.setUserName("userName");
	        loginUser.setId(1);
	        return loginUser;
	    }
	
	    private Result getSuccessResult() {
	        Result result = new Result();
	        result.setCode(Status.SUCCESS.getCode());
	        result.setMsg(Status.SUCCESS.getMsg());
	        return result;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;
	import static org.junit.jupiter.api.Assertions.assertEquals;
	import static org.junit.jupiter.api.Assertions.assertNotNull;
	import static org.junit.jupiter.api.Assertions.assertNull;
	import static org.mockito.ArgumentMatchers.any;
	import static org.mockito.ArgumentMatchers.anyLong;
	import static org.mockito.Mockito.when;
	
	import org.apache.dolphinscheduler.api.AssertionsHelper;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
	import org.apache.dolphinscheduler.dao.entity.Project;
	import org.apache.dolphinscheduler.dao.entity.ProjectParameter;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
	import org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import java.util.Collections;
	
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.MockedStatic;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterServiceTest {
	
	    @InjectMocks
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Mock
	    private ProjectMapper projectMapper;
	
	    @Mock
	    private ProjectParameterMapper projectParameterMapper;
	
	    @Mock
	    private ProjectServiceImpl projectService;
	
	    protected final static long projectCode = 1L;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // PERMISSION DENIED
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	
	        // CODE GENERATION ERROR
	        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {
	            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);
	
	            result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                    DataType.VARCHAR.name());
	            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	        }
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // INSERT DATA ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_UPDATE_ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.LONG.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	        ProjectParameter projectParameter = (ProjectParameter) result.getData();
	        assertNotNull(projectParameter.getOperator());
	        assertNotNull(projectParameter.getUpdateTime());
	        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // DATABASE OPERATION ERROR
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(-1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.DELETE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any())).thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	        Integer pageSize = 10;
	        Integer pageNo = 1;
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result =
	                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,
	                        DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // SUCCESS
	        when(projectService.hasProjectAndPerm(any(), any(), any(Result.class), any()))
	                .thenReturn(true);
	
	        Page<ProjectParameter> page = new Page<>(pageNo, pageSize);
	        page.setRecords(Collections.singletonList(getProjectParameter()));
	
	        when(projectParameterMapper.queryProjectParameterListPaging(any(), anyLong(), any(), any(), any()))
	                .thenReturn(page);
	        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                null, null);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Result result = projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "");
	        assertEquals(Status.PROJECT_PARAMETER_CODE_EMPTY.getCode(), result.getCode());
	
	        when(projectParameterMapper.queryByCodes(any())).thenReturn(Collections.singletonList(getProjectParameter()));
	
	        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,
	                () -> projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1,2"));
	
	        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1");
	    }
	
	    private Project getProject(long projectCode) {
	        Project project = new Project();
	        project.setCode(projectCode);
	        project.setId(1);
	        project.setName("test");
	        project.setUserId(1);
	        return project;
	    }
	
	    private ProjectParameter getProjectParameter() {
	        ProjectParameter projectParameter = new ProjectParameter();
	        projectParameter.setId(1);
	        projectParameter.setCode(1);
	        projectParameter.setProjectCode(1);
	        projectParameter.setParamName("key");
	        projectParameter.setParamValue("value");
	        return projectParameter;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;
	
	import org.apache.dolphinscheduler.api.audit.OperatorLog;
	import org.apache.dolphinscheduler.api.audit.enums.AuditType;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.SchedulerService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import java.util.Map;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	/**
	 * scheduler controller
	 */
	@Tag(name = "SCHEDULE_TAG")
	@RestController
	@RequestMapping("/projects/{projectCode}/schedules")
	public class SchedulerController extends BaseController {
	
	    public static final String DEFAULT_WARNING_TYPE = "NONE";
	    public static final String DEFAULT_NOTIFY_GROUP_ID = "1";
	    public static final String DEFAULT_FAILURE_POLICY = "CONTINUE";
	    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = "MEDIUM";
	
	    @Autowired
	    private SchedulerService schedulerService;
	
	    /**
	     * create schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workflowInstancePriority workflow instance priority
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @return create result code
	     */
	    @Operation(summary = "createSchedule", description = "CREATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)
	    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @RequestParam(value = "workflowDefinitionCode") long workflowDefinitionCode,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.insertSchedule(
	                loginUser,
	                projectCode,
	                workflowDefinitionCode,
	                schedule,
	                warningType,
	                warningGroupId,
	                failureStrategy,
	                workflowInstancePriority,
	                workerGroup,
	                tenantCode,
	                environmentCode);
	
	        return returnDataList(result);
	    }
	
	    /**
	     * updateWorkflowInstance schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id scheduler id
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateSchedule", description = "UPDATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @PathVariable(value = "id") Integer id,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	
	        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	
	    @Operation(summary = "online", description = "ONLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/online")
	    @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)
	    public Result<Boolean> publishScheduleOnline(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                 @PathVariable("id") Integer id) {
	        schedulerService.onlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    @Operation(summary = "offline", description = "OFFLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/offline")
	    @ApiException(OFFLINE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)
	    public Result<Boolean> offlineSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                           @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                           @PathVariable("id") Integer id) {
	        schedulerService.offlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    /**
	     * query schedule list paging
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param pageNo page number
	     * @param pageSize page size
	     * @param searchVal search value
	     * @return schedule list page
	     */
	    @Operation(summary = "queryScheduleListPaging", description = "QUERY_SCHEDULE_LIST_PAGING_NOTES")
	    @Parameters({
	
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", schema = @Schema(implementation = int.class, example = "20"))
	    })
	    @GetMapping()
	    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)
	    public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                          @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                          @RequestParam(value = "workflowDefinitionCode", required = false, defaultValue = "0") long workflowDefinitionCode,
	                                          @RequestParam(value = "searchVal", required = false) String searchVal,
	                                          @RequestParam("pageNo") Integer pageNo,
	                                          @RequestParam("pageSize") Integer pageSize) {
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,
	                pageSize);
	
	    }
	
	    /**
	     * delete schedule by id
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id schedule id
	     * @return delete result code
	     */
	    @Operation(summary = "deleteScheduleById", description = "DELETE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @DeleteMapping(value = "/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_SCHEDULE_BY_ID_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)
	    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,
	                                     @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                     @PathVariable("id") Integer id) {
	        schedulerService.deleteSchedulesById(loginUser, id);
	        return new Result(Status.SUCCESS);
	    }
	
	    /**
	     * query schedule list
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @return schedule list
	     */
	    @Operation(summary = "queryScheduleList", description = "QUERY_SCHEDULE_LIST_NOTES")
	    @PostMapping("/list")
	    @ApiException(QUERY_SCHEDULE_LIST_ERROR)
	    public Result queryScheduleList(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                    @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
	        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);
	        return returnDataList(result);
	    }
	
	    /**
	     * preview schedule
	     *
	     * @param loginUser login user
	     * @param schedule schedule expression
	     * @return the next five fire time
	     */
	    @Operation(summary = "previewSchedule", description = "PREVIEW_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	    })
	    @PostMapping("/preview")
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(PREVIEW_SCHEDULE_ERROR)
	    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                  @RequestParam(value = "schedule") String schedule) {
	        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);
	        return returnDataList(result);
	    }
	
	    /**
	     * update workflow definition schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateScheduleByWorkflowDefinitionCode", description = "UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "12345678")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/update/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                         @PathVariable(value = "code") long workflowDefinitionCode,
	                                                         @RequestParam(value = "schedule") String schedule,
	                                                         @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                                         @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
	                                                         @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                                         @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                                         @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                                         @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") long environmentCode,
	                                                         @RequestParam(value = "workflowInstancePriority", required = false) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,
	                workflowDefinitionCode, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private Integer alertGroupId;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroupId;
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroupId = alertGroupId;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.AlertStatus;
	import org.apache.dolphinscheduler.common.enums.AlertType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@Builder
	@NoArgsConstructor
	@AllArgsConstructor
	@TableName("t_ds_alert")
	public class Alert {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    @TableField(value = "sign")
	    private String sign;
	
	    @TableField(value = "title")
	    private String title;
	
	    @TableField(value = "content")
	    private String content;
	
	    @TableField(value = "alert_status")
	    private AlertStatus alertStatus;
	
	    @TableField(value = "warning_type")
	    private WarningType warningType;
	
	    @TableField(value = "log")
	    private String log;
	
	    @TableField("alertgroup_id")
	    private Integer alertGroupId;
	
	    @TableField("create_time")
	    private Date createTime;
	
	    @TableField("update_time")
	    private Date updateTime;
	
	    @TableField("project_code")
	    private Long projectCode;
	
	    @TableField("workflow_definition_code")
	    private Long workflowDefinitionCode;
	
	    @TableField("workflow_instance_id")
	    private Integer workflowInstanceId;
	
	    @TableField("alert_type")
	    private AlertType alertType;
	
	    @TableField(exist = false)
	    private Map<String, Object> info = new HashMap<>();
	
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java:
			[
				fromLine:"				47",
				toLine:"				60",
				oldContent:"
				public HttpResponse startWorkflowInstance(User loginUser,
				                                              long projectCode,
				                                              long workflowDefinitionCode,
				                                              String scheduleTime,
				                                              FailureStrategy failureStrategy,
				                                              WarningType warningType) {
				        // method implementation
				    }				
",
				newContent:"
				public HttpResponse startWorkflowInstance(ExecutorParameter executorParameter) {
				        // method implementation using ExecutorParameter
				    }				
",
,
				fromLine:"				62",
				toLine:"				73",
				oldContent:"
				public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {
				        // method implementation
				    }				
",
				newContent:"
				public HttpResponse queryExecutingWorkflow(QueryParameter queryParameter) {
				        // method implementation using QueryParameter
				    }				
",
,
				fromLine:"				75",
				toLine:"				84",
				oldContent:"
				public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
				        // method implementation
				    }				
",
				newContent:"
				public HttpResponse execute(ExecuteParameter executeParameter) {
				        // method implementation using ExecuteParameter
				    }				
",
,
				fromLine:"				86",
				toLine:"				97",
				oldContent:"
				public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
				                                    TaskDependType taskDependType) {
				        // method implementation
				    }				
",
				newContent:"
				public HttpResponse executeTask(ExecuteTaskParameter executeTaskParameter) {
				        // method implementation using ExecuteTaskParameter
				    }				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:
			[
				fromLine:"				223",
				toLine:"				231",
				oldContent:"
				IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
				                                                            @Param("projectCode") Long projectCode,
				                                                            @Param("workflowDefinitionCode") Long workflowDefinitionCode,
				                                                            @Param("searchVal") String searchVal,
				                                                            @Param("executorName") String executorName,
				                                                            @Param("states") int[] statusArray,
				                                                            @Param("host") String host,
				                                                            @Param("startTime") Date startTime,
				                                                            @Param("endTime") Date endTime);				
",
				newContent:"
				IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
				                                                            WorkflowInstanceQuery workflowInstanceQuery);				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
			[
				fromLine:"				65",
				toLine:"				67",
				oldContent:"
				public void init(String host, Date startTime, String executePath) {
				        this.host = host;
				        this.startTime = startTime;				
",
				newContent:"
				public void init(TaskExecutionInitialization taskExecutionInitialization) {
				        this.host = taskExecutionInitialization.getHost();
				        this.startTime = taskExecutionInitialization.getStartTime();				
",
,

			],
			dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java:
			[
				fromLine:"				9",
				toLine:"				9",
				oldContent:"
								
",
				newContent:"
				Result createProjectParameter(ProjectParameterRequest projectParameterRequest);				
",
,
				fromLine:"				11",
				toLine:"				13",
				oldContent:"
				Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
				                                  String projectParameterValue, String projectParameterDataType);				
",
				newContent:"
				Result updateProjectParameter(ProjectParameterRequest projectParameterRequest);				
",
,

			],
			dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java:
			[
				fromLine:"				72",
				toLine:"				79",
				oldContent:"
				return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
				                projectParameterValue, projectParameterDataType);				
",
				newContent:"
				ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);
				return projectParameterService.createProjectParameter(projectParameterRequest);				
",
,
				fromLine:"				95",
				toLine:"				102",
				oldContent:"
				return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
				                projectParameterValue, projectParameterDataType);				
",
				newContent:"
				ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, projectParameterName, projectParameterValue, projectParameterDataType);
				return projectParameterService.updateProjectParameter(projectParameterRequest);				
",
,

			],
		
}
		extractedClasses:
{
					dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/entity/ExecutorParameter.java:"
			public class ExecutorParameter {
			    private User loginUser;
			    private long projectCode;
			    private long workflowDefinitionCode;
			    private String scheduleTime;
			    private FailureStrategy failureStrategy;
			    private WarningType warningType;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/entity/QueryParameter.java:"
			public class QueryParameter {
			    private User loginUser;
			    private long projectCode;
			    private long workflowInstanceCode;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/entity/ExecuteParameter.java:"
			public class ExecuteParameter {
			    private User loginUser;
			    private long projectCode;
			    private int workflowInstanceId;
			    private ExecuteType executeType;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/entity/ExecuteTaskParameter.java:"
			public class ExecuteTaskParameter {
			    private User loginUser;
			    private long projectCode;
			    private int workflowInstanceId;
			    private String startNodeList;
			    private TaskDependType taskDependType;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:"
			public class WorkflowInstanceQuery {
			    private Long projectCode;
			    private Long workflowDefinitionCode;
			    private String searchVal;
			    private String executorName;
			    private int[] statusArray;
			    private String host;
			    private Date startTime;
			    private Date endTime;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:"
			public class TaskExecutionInitialization {
			    private String host;
			    private Date startTime;
			    private String executePath;
			
			    // Constructor, getters and setters
			}			
",
			dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterRequest.java:"
			public class ProjectParameterRequest {
			    private User loginUser;
			    private long projectCode;
			    private long code;
			    private String projectParameterName;
			    private String projectParameterValue;
			    private String projectParameterDataType;
			
			    public ProjectParameterRequest(User loginUser, long projectCode, String projectParameterName, String projectParameterValue, String projectParameterDataType) {
			        this.loginUser = loginUser;
			        this.projectCode = projectCode;
			        this.projectParameterName = projectParameterName;
			        this.projectParameterValue = projectParameterValue;
			        this.projectParameterDataType = projectParameterDataType;
			    }
			
			    public ProjectParameterRequest(User loginUser, long projectCode, long code, String projectParameterName, String projectParameterValue, String projectParameterDataType) {
			        this(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);
			        this.code = code;
			    }
			
			    // Getters and Setters
			}			
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[143,22] cannot access org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	[ERROR]     file does not contain class org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[1,8] duplicate class: TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[114,61] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[3,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[8,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[9,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[172,35] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[173,50] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[221,13] cannot find symbol
	[ERROR]   symbol: method setState(org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[222,37] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[225,50] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[227,27] constructor StateDesc in class org.apache.dolphinscheduler.dao.entity.WorkflowInstance.StateDesc cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.util.Date,org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[228,13] cannot find symbol
	[ERROR]   symbol: method setStateHistory(java.lang.String)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[101,43] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[102,64] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[103,50] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[104,61] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[105,50] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[106,53] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[107,51] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[108,54] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[109,52] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[110,54] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[112,49] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[35,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[39,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[40,42] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[41,60] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[42,63] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[43,49] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[44,49] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[45,52] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[46,50] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[47,53] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[48,51] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[49,53] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[50,48] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[51,48] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol
	[ERROR]   symbol:   method getUserId()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol
	[ERROR]   symbol:   method getUserName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol
	[ERROR]   symbol:   method getWorkerGroup()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol
	[ERROR]   symbol:   method getEnvironmentCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol
	[ERROR]   symbol:   method getProjectName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol
	[ERROR]   symbol:   method getResourceIds()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol
	[ERROR]   symbol:   method getTaskParams()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol
	[ERROR]   symbol:   method getTaskPriority()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol
	[ERROR]   symbol:   method getTimeoutNotifyStrategy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol
	[ERROR]   symbol:   method getTimeout()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol
	[ERROR]   symbol:   method getDelayTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol
	[ERROR]   symbol:   method getTimeoutFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol
	[ERROR]   symbol:   method getFailRetryInterval()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol
	[ERROR]   symbol:   method getFailRetryTimes()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol
	[ERROR]   symbol:   method getFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol
	[ERROR]   symbol:   method getIsCache()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol
	[ERROR]   symbol:   method getModifyBy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol
	[ERROR]   symbol: method setCpuQuota(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol
	[ERROR]   symbol: method setMemoryMax(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol
	[ERROR]   symbol:   method getAddrList()
	[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[41,56] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[46,67] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[57,36] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[58,36] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,67] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,97] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[64,81] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[65,40] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,45] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,75] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[73,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.dao.PluginDao
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[74,86] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[75,37] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,49] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,79] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,45] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,77] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[84,56] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[85,58] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[88,32] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[35,9] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[38,73] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[39,40] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[40,40] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[41,43] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[42,48] cannot find symbol
	[ERROR]   symbol:   method getReleaseState()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[43,47] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[44,47] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(TaskExecutionInitialization taskExecutionInitialization) {
	        this.host = taskExecutionInitialization.getHost();
	        this.startTime = taskExecutionInitialization.getStartTime();
	        this.executePath = executePath;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	public class TaskExecutionInitialization {
	    private String host;
	    private Date startTime;
	    private String executePath;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            WorkflowInstanceQuery workflowInstanceQuery);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java
	public class WorkflowInstanceQuery {
	    private Long projectCode;
	    private Long workflowDefinitionCode;
	    private String searchVal;
	    private String executorName;
	    private int[] statusArray;
	    private String host;
	    private Date startTime;
	    private Date endTime;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.CommandType;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.common.utils.DateUtils;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.ArrayList;
	import java.util.Date;
	import java.util.List;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.google.common.base.Strings;
	
	@NoArgsConstructor
	@Data
	@Builder
	@AllArgsConstructor
	@TableName("t_ds_workflow_instance")
	public class WorkflowInstance {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private Long workflowDefinitionCode;
	
	    private int workflowDefinitionVersion;
	
	    private Long projectCode;
	
	    private WorkflowExecutionStatus state;
	
	    private String stateHistory;
	
	    @TableField(exist = false)
	    private List<StateDesc> stateDescList;
	
	    private Flag recovery;
	    private Date startTime;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private Date endTime;
	
	    private int runTimes;
	
	    private String name;
	
	    private String host;
	
	    @Deprecated
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    private CommandType commandType;
	
	    private String commandParam;
	
	    private TaskDependType taskDependType;
	
	    @Deprecated
	    private int maxTryTimes;
	
	    private FailureStrategy failureStrategy;
	
	    private WarningType warningType;
	
	    private Integer warningGroupId;
	
	    private Date scheduleTime;
	
	    private Date commandStartTime;
	
	    /**
	     * user define parameters string
	     */
	    private String globalParams;
	
	    @TableField(exist = false)
	    private DagData dagData;
	
	    private int executorId;
	
	    private String executorName;
	
	    private String tenantCode;
	
	    @TableField(exist = false)
	    private String queue;
	
	    private Flag isSubWorkflow;
	
	    /**
	     * task locations for web
	     */
	    @TableField(exist = false)
	    private String locations;
	
	    private String historyCmd;
	
	    @TableField(exist = false)
	    private String dependenceScheduleTimes;
	
	    /**
	     * workflow execution duration
	     *
	     * @return
	     */
	    @TableField(exist = false)
	    private String duration;
	
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private int timeout;
	
	    private String varPool;
	
	    @Deprecated
	    private int nextWorkflowInstanceId;
	
	    private int dryRun;
	
	    private Date restartTime;
	
	    private int testFlag;
	
	    /**
	     * set the process name with process define version and timestamp
	     *
	     * @param workflowDefinition processDefinition
	     */
	    public WorkflowInstance(WorkflowDefinition workflowDefinition) {
	        this.workflowDefinition = workflowDefinition;
	        // todo: the name is not unique
	        this.name = String.join("-",
	                workflowDefinition.getName(),
	                String.valueOf(workflowDefinition.getVersion()),
	                DateUtils.getCurrentTimeStamp());
	    }
	
	    /**
	     * add command to history
	     *
	     * @param cmd cmd
	     */
	    public void addHistoryCmd(CommandType cmd) {
	        if (!Strings.isNullOrEmpty(this.historyCmd)) {
	            this.historyCmd = String.format("%s,%s", this.historyCmd, cmd.toString());
	        } else {
	            this.historyCmd = cmd.toString();
	        }
	    }
	
	    /**
	     * check this process is start complement data
	     *
	     * @return whether complement data
	     */
	    public boolean isComplementData() {
	        if (Strings.isNullOrEmpty(this.historyCmd)) {
	            return false;
	        }
	        return historyCmd.startsWith(CommandType.COMPLEMENT_DATA.toString());
	    }
	
	    /**
	     * get current command type,
	     * if start with complement data,return complement
	     *
	     * @return CommandType
	     */
	    public CommandType getCmdTypeIfComplement() {
	        if (isComplementData()) {
	            return CommandType.COMPLEMENT_DATA;
	        }
	        return commandType;
	    }
	
	    /**
	     * set state with desc
	     * @param state
	     * @param stateDesc
	     */
	    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {
	        this.setState(state);
	        if (StringUtils.isEmpty(this.getStateHistory())) {
	            stateDescList = new ArrayList<>();
	        } else if (stateDescList == null) {
	            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);
	        }
	        stateDescList.add(new StateDesc(new Date(), state, stateDesc));
	        this.setStateHistory(JSONUtils.toJsonString(stateDescList));
	    }
	
	    @Data
	    @NoArgsConstructor
	    @AllArgsConstructor
	    public static class StateDesc {
	
	        Date time;
	        WorkflowExecutionStatus state;
	        String desc;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.ConditionType;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import java.util.Date;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
	import com.fasterxml.jackson.databind.annotation.JsonSerialize;
	
	@Data
	@Builder
	@AllArgsConstructor
	@NoArgsConstructor
	@TableName("t_ds_workflow_task_relation")
	public class WorkflowTaskRelation {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private int workflowDefinitionVersion;
	
	    private long projectCode;
	
	    private long workflowDefinitionCode;
	
	    private long preTaskCode;
	
	    private int preTaskVersion;
	
	    private long postTaskCode;
	
	    private int postTaskVersion;
	
	    @Deprecated
	    private ConditionType conditionType;
	
	    @JsonDeserialize(using = JSONUtils.JsonDataDeserializer.class)
	    @JsonSerialize(using = JSONUtils.JsonDataSerializer.class)
	    @Deprecated
	    private String conditionParams;
	
	    private Date createTime;
	
	    private Date updateTime;
	
	    public WorkflowTaskRelation(String name,
	                                int workflowDefinitionVersion,
	                                long projectCode,
	                                long workflowDefinitionCode,
	                                long preTaskCode,
	                                int preTaskVersion,
	                                long postTaskCode,
	                                int postTaskVersion,
	                                ConditionType conditionType,
	                                String conditionParams) {
	        this.name = name;
	        this.workflowDefinitionVersion = workflowDefinitionVersion;
	        this.projectCode = projectCode;
	        this.workflowDefinitionCode = workflowDefinitionCode;
	        this.preTaskCode = preTaskCode;
	        this.preTaskVersion = preTaskVersion;
	        this.postTaskCode = postTaskCode;
	        this.postTaskVersion = postTaskVersion;
	        this.conditionType = conditionType;
	        this.conditionParams = conditionParams;
	
	        Date now = new Date();
	        this.createTime = now;
	        this.updateTime = now;
	    }
	
	    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {
	        this.name = processTaskRelationLog.getName();
	        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();
	        this.projectCode = processTaskRelationLog.getProjectCode();
	        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();
	        this.preTaskCode = processTaskRelationLog.getPreTaskCode();
	        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();
	        this.postTaskCode = processTaskRelationLog.getPostTaskCode();
	        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();
	        this.conditionType = processTaskRelationLog.getConditionType();
	        this.conditionParams = processTaskRelationLog.getConditionParams();
	
	        this.createTime = processTaskRelationLog.getCreateTime();
	        this.updateTime = new Date();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_task_relation_log")
	public class WorkflowTaskRelationLog extends WorkflowTaskRelation {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowTaskRelationLog() {
	        super();
	    }
	
	    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {
	        super();
	        this.setName(workflowTaskRelation.getName());
	        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());
	        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());
	        this.setProjectCode(workflowTaskRelation.getProjectCode());
	        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());
	        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());
	        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());
	        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());
	        this.setConditionType(workflowTaskRelation.getConditionType());
	        this.setConditionParams(workflowTaskRelation.getConditionParams());
	        this.setCreateTime(workflowTaskRelation.getCreateTime());
	        this.setUpdateTime(workflowTaskRelation.getUpdateTime());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	/**
	 * task definition log
	 */
	@TableName("t_ds_task_definition_log")
	public class TaskDefinitionLog extends TaskDefinition {
	
	    /**
	     * operator user id
	     */
	    private int operator;
	
	    /**
	     * operate time
	     */
	    private Date operateTime;
	
	    public TaskDefinitionLog() {
	        super();
	    }
	
	    public TaskDefinitionLog(TaskDefinition taskDefinition) {
	        super();
	        this.setCode(taskDefinition.getCode());
	        this.setVersion(taskDefinition.getVersion());
	        this.setName(taskDefinition.getName());
	        this.setDescription(taskDefinition.getDescription());
	        this.setUserId(taskDefinition.getUserId());
	        this.setUserName(taskDefinition.getUserName());
	        this.setWorkerGroup(taskDefinition.getWorkerGroup());
	        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
	        this.setProjectCode(taskDefinition.getProjectCode());
	        this.setProjectName(taskDefinition.getProjectName());
	        this.setResourceIds(taskDefinition.getResourceIds());
	        this.setTaskParams(taskDefinition.getTaskParams());
	        this.setTaskParamList(taskDefinition.getTaskParamList());
	        this.setTaskParamMap(taskDefinition.getTaskParamMap());
	        this.setTaskPriority(taskDefinition.getTaskPriority());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
	        this.setTaskType(taskDefinition.getTaskType());
	        this.setTimeout(taskDefinition.getTimeout());
	        this.setDelayTime(taskDefinition.getDelayTime());
	        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
	        this.setUpdateTime(taskDefinition.getUpdateTime());
	        this.setCreateTime(taskDefinition.getCreateTime());
	        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
	        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
	        this.setFlag(taskDefinition.getFlag());
	        this.setIsCache(taskDefinition.getIsCache());
	        this.setModifyBy(taskDefinition.getModifyBy());
	        this.setCpuQuota(taskDefinition.getCpuQuota());
	        this.setMemoryMax(taskDefinition.getMemoryMax());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	    }
	
	    public int getOperator() {
	        return operator;
	    }
	
	    public void setOperator(int operator) {
	        this.operator = operator;
	    }
	
	    public Date getOperateTime() {
	        return operateTime;
	    }
	
	    public void setOperateTime(Date operateTime) {
	        this.operateTime = operateTime;
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.utils;
	
	import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.Collections;
	import java.util.List;
	
	import com.google.common.collect.Lists;
	
	public class WorkerGroupUtils {
	
	    private static final String DEFAULT_WORKER_GROUP = "default";
	
	    /**
	     * Check if the worker group is empty, if the worker group is default, it is considered empty
	     */
	    public static boolean isWorkerGroupEmpty(String workerGroup) {
	        return StringUtils.isEmpty(workerGroup) || getDefaultWorkerGroup().equals(workerGroup);
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup) {
	        return getWorkerGroupOrDefault(workerGroup, getDefaultWorkerGroup());
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {
	        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;
	    }
	
	    public static String getDefaultWorkerGroup() {
	        return DEFAULT_WORKER_GROUP;
	    }
	
	    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {
	        String addrList = workerGroup.getAddrList();
	        if (StringUtils.isEmpty(addrList)) {
	            return Collections.emptyList();
	        }
	        return Lists.newArrayList(addrList.split(","));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.repository.impl;
	
	import org.apache.dolphinscheduler.dao.entity.Session;
	import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
	import org.apache.dolphinscheduler.dao.repository.BaseDao;
	import org.apache.dolphinscheduler.dao.repository.SessionDao;
	
	import java.util.List;
	
	import lombok.NonNull;
	
	import org.springframework.stereotype.Repository;
	
	import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
	
	@Repository
	public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {
	
	    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {
	        super(sessionMapper);
	    }
	
	    public void deleteByUserId(Integer userId) {
	        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	    @Override
	    public List<Session> queryByUserId(Integer userId) {
	        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao;
	
	import static java.util.Objects.requireNonNull;
	
	import org.apache.dolphinscheduler.dao.entity.PluginDefine;
	import org.apache.dolphinscheduler.dao.mapper.PluginDefineMapper;
	import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
	
	import java.util.Objects;
	
	import lombok.NonNull;
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Repository;
	
	@Slf4j
	@Repository
	public class PluginDao {
	
	    @Autowired
	    private PluginDefineMapper pluginDefineMapper;
	
	    /**
	     * check plugin define table exist
	     *
	     * @return boolean
	     */
	    public boolean checkPluginDefineTableExist() {
	        return pluginDefineMapper.checkTableExist() > 0;
	    }
	
	    /**
	     * add or update plugin define
	     *
	     * @param pluginDefine new pluginDefine
	     * @return plugin id
	     */
	    public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {
	        requireNonNull(pluginDefine.getPluginName(), "pluginName is null");
	        requireNonNull(pluginDefine.getPluginType(), "pluginType is null");
	
	        PluginDefine currPluginDefine =
	                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());
	        if (currPluginDefine == null) {
	            try {
	                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {
	                    return pluginDefine.getId();
	                }
	                throw new TaskPluginException(
	                        String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	            } catch (TaskPluginException ex) {
	                throw ex;
	            } catch (Exception ex) {
	                log.error("Insert plugin definition error, there may already exist a plugin", ex);
	                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),
	                        pluginDefine.getPluginType());
	                if (currPluginDefine == null) {
	                    throw new TaskPluginException(
	                            String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	                }
	            }
	        }
	        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {
	            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());
	            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());
	            pluginDefineMapper.updateById(currPluginDefine);
	        }
	        return currPluginDefine.getId();
	    }
	
	    /**
	     * query plugin define by id
	     *
	     * @param pluginDefineId plugin define id
	     * @return PluginDefine
	     */
	    public PluginDefine getPluginDefineById(int pluginDefineId) {
	        return pluginDefineMapper.selectById(pluginDefineId);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_definition_log")
	public class WorkflowDefinitionLog extends WorkflowDefinition {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowDefinitionLog() {
	        super();
	    }
	
	    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {
	        this.setCode(workflowDefinition.getCode());
	        this.setName(workflowDefinition.getName());
	        this.setVersion(workflowDefinition.getVersion());
	        this.setReleaseState(workflowDefinition.getReleaseState());
	        this.setProjectCode(workflowDefinition.getProjectCode());
	        this.setDescription(workflowDefinition.getDescription());
	        this.setGlobalParams(workflowDefinition.getGlobalParams());
	        this.setGlobalParamList(workflowDefinition.getGlobalParamList());
	        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());
	        this.setCreateTime(workflowDefinition.getCreateTime());
	        this.setUpdateTime(workflowDefinition.getUpdateTime());
	        this.setFlag(workflowDefinition.getFlag());
	        this.setUserId(workflowDefinition.getUserId());
	        this.setUserName(workflowDefinition.getUserName());
	        this.setProjectName(workflowDefinition.getProjectName());
	        this.setLocations(workflowDefinition.getLocations());
	        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());
	        this.setTimeout(workflowDefinition.getTimeout());
	        this.setModifyBy(workflowDefinition.getModifyBy());
	        this.setWarningGroupId(workflowDefinition.getWarningGroupId());
	        this.setExecutionType(workflowDefinition.getExecutionType());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:
			[
				fromLine:"				67",
				toLine:"				67",
				oldContent:"
				this.executePath = executePath;				
",
				newContent:"
				this.executePath = taskExecutionInitialization.getExecutePath();				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:
			[
				fromLine:"				4",
				toLine:"				4",
				oldContent:"
								
",
				newContent:"
				import java.util.Date;				
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:
			[
				fromLine:"				7",
				toLine:"				7",
				oldContent:"
								
",
				newContent:"
				import java.util.Date;				
",
,

			],
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[5,1] illegal start of type
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[5,22] <identifier> expected
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[10,1] illegal start of type
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[10,22] <identifier> expected
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	public class TaskExecutionInitialization {
	    private String host;
	    private Date startTime;
	    private String executePath;
	import java.util.Date;
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java
	public class WorkflowInstanceQuery {
	    private Long projectCode;
	    private Long workflowDefinitionCode;
	    private String searchVal;
	    private String executorName;
	    private int[] statusArray;
	    private String host;
	    private Date startTime;
	    private Date endTime;
	import java.util.Date;
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:
			[
				fromLine:"				5",
				toLine:"				5",
				oldContent:"
				import java.util.Date;				
",
				newContent:"
								
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:
			[
				fromLine:"				10",
				toLine:"				10",
				oldContent:"
				import java.util.Date;				
",
				newContent:"
								
",
,

			],
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[143,22] cannot access org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	[ERROR]     file does not contain class org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[1,8] duplicate class: TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[114,61] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[3,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[8,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[9,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[172,35] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[173,50] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[221,13] cannot find symbol
	[ERROR]   symbol: method setState(org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[222,37] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[225,50] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[227,27] constructor StateDesc in class org.apache.dolphinscheduler.dao.entity.WorkflowInstance.StateDesc cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.util.Date,org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[228,13] cannot find symbol
	[ERROR]   symbol: method setStateHistory(java.lang.String)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[101,43] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[102,64] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[103,50] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[104,61] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[105,50] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[106,53] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[107,51] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[108,54] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[109,52] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[110,54] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[112,49] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[35,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[39,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[40,42] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[41,60] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[42,63] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[43,49] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[44,49] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[45,52] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[46,50] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[47,53] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[48,51] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[49,53] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[50,48] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[51,48] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol
	[ERROR]   symbol:   method getUserId()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol
	[ERROR]   symbol:   method getUserName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol
	[ERROR]   symbol:   method getWorkerGroup()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol
	[ERROR]   symbol:   method getEnvironmentCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol
	[ERROR]   symbol:   method getProjectName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol
	[ERROR]   symbol:   method getResourceIds()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol
	[ERROR]   symbol:   method getTaskParams()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol
	[ERROR]   symbol:   method getTaskPriority()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol
	[ERROR]   symbol:   method getTimeoutNotifyStrategy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol
	[ERROR]   symbol:   method getTimeout()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol
	[ERROR]   symbol:   method getDelayTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol
	[ERROR]   symbol:   method getTimeoutFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol
	[ERROR]   symbol:   method getFailRetryInterval()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol
	[ERROR]   symbol:   method getFailRetryTimes()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol
	[ERROR]   symbol:   method getFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol
	[ERROR]   symbol:   method getIsCache()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol
	[ERROR]   symbol:   method getModifyBy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol
	[ERROR]   symbol: method setCpuQuota(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol
	[ERROR]   symbol: method setMemoryMax(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol
	[ERROR]   symbol:   method getAddrList()
	[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[41,56] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[46,67] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[57,36] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[58,36] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,67] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,97] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[64,81] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[65,40] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,45] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,75] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[73,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.dao.PluginDao
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[74,86] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[75,37] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,49] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,79] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,45] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,77] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[84,56] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[85,58] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[88,32] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[35,9] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[38,73] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[39,40] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[40,40] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[41,43] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[42,48] cannot find symbol
	[ERROR]   symbol:   method getReleaseState()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[43,47] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[44,47] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(TaskExecutionInitialization taskExecutionInitialization) {
	        this.host = taskExecutionInitialization.getHost();
	        this.startTime = taskExecutionInitialization.getStartTime();
	        this.executePath = taskExecutionInitialization.getExecutePath();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	public class TaskExecutionInitialization {
	    private String host;
	    private Date startTime;
	    private String executePath;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            WorkflowInstanceQuery workflowInstanceQuery);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java
	public class WorkflowInstanceQuery {
	    private Long projectCode;
	    private Long workflowDefinitionCode;
	    private String searchVal;
	    private String executorName;
	    private int[] statusArray;
	    private String host;
	    private Date startTime;
	    private Date endTime;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.CommandType;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.common.utils.DateUtils;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.ArrayList;
	import java.util.Date;
	import java.util.List;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.google.common.base.Strings;
	
	@NoArgsConstructor
	@Data
	@Builder
	@AllArgsConstructor
	@TableName("t_ds_workflow_instance")
	public class WorkflowInstance {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private Long workflowDefinitionCode;
	
	    private int workflowDefinitionVersion;
	
	    private Long projectCode;
	
	    private WorkflowExecutionStatus state;
	
	    private String stateHistory;
	
	    @TableField(exist = false)
	    private List<StateDesc> stateDescList;
	
	    private Flag recovery;
	    private Date startTime;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private Date endTime;
	
	    private int runTimes;
	
	    private String name;
	
	    private String host;
	
	    @Deprecated
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    private CommandType commandType;
	
	    private String commandParam;
	
	    private TaskDependType taskDependType;
	
	    @Deprecated
	    private int maxTryTimes;
	
	    private FailureStrategy failureStrategy;
	
	    private WarningType warningType;
	
	    private Integer warningGroupId;
	
	    private Date scheduleTime;
	
	    private Date commandStartTime;
	
	    /**
	     * user define parameters string
	     */
	    private String globalParams;
	
	    @TableField(exist = false)
	    private DagData dagData;
	
	    private int executorId;
	
	    private String executorName;
	
	    private String tenantCode;
	
	    @TableField(exist = false)
	    private String queue;
	
	    private Flag isSubWorkflow;
	
	    /**
	     * task locations for web
	     */
	    @TableField(exist = false)
	    private String locations;
	
	    private String historyCmd;
	
	    @TableField(exist = false)
	    private String dependenceScheduleTimes;
	
	    /**
	     * workflow execution duration
	     *
	     * @return
	     */
	    @TableField(exist = false)
	    private String duration;
	
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private int timeout;
	
	    private String varPool;
	
	    @Deprecated
	    private int nextWorkflowInstanceId;
	
	    private int dryRun;
	
	    private Date restartTime;
	
	    private int testFlag;
	
	    /**
	     * set the process name with process define version and timestamp
	     *
	     * @param workflowDefinition processDefinition
	     */
	    public WorkflowInstance(WorkflowDefinition workflowDefinition) {
	        this.workflowDefinition = workflowDefinition;
	        // todo: the name is not unique
	        this.name = String.join("-",
	                workflowDefinition.getName(),
	                String.valueOf(workflowDefinition.getVersion()),
	                DateUtils.getCurrentTimeStamp());
	    }
	
	    /**
	     * add command to history
	     *
	     * @param cmd cmd
	     */
	    public void addHistoryCmd(CommandType cmd) {
	        if (!Strings.isNullOrEmpty(this.historyCmd)) {
	            this.historyCmd = String.format("%s,%s", this.historyCmd, cmd.toString());
	        } else {
	            this.historyCmd = cmd.toString();
	        }
	    }
	
	    /**
	     * check this process is start complement data
	     *
	     * @return whether complement data
	     */
	    public boolean isComplementData() {
	        if (Strings.isNullOrEmpty(this.historyCmd)) {
	            return false;
	        }
	        return historyCmd.startsWith(CommandType.COMPLEMENT_DATA.toString());
	    }
	
	    /**
	     * get current command type,
	     * if start with complement data,return complement
	     *
	     * @return CommandType
	     */
	    public CommandType getCmdTypeIfComplement() {
	        if (isComplementData()) {
	            return CommandType.COMPLEMENT_DATA;
	        }
	        return commandType;
	    }
	
	    /**
	     * set state with desc
	     * @param state
	     * @param stateDesc
	     */
	    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {
	        this.setState(state);
	        if (StringUtils.isEmpty(this.getStateHistory())) {
	            stateDescList = new ArrayList<>();
	        } else if (stateDescList == null) {
	            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);
	        }
	        stateDescList.add(new StateDesc(new Date(), state, stateDesc));
	        this.setStateHistory(JSONUtils.toJsonString(stateDescList));
	    }
	
	    @Data
	    @NoArgsConstructor
	    @AllArgsConstructor
	    public static class StateDesc {
	
	        Date time;
	        WorkflowExecutionStatus state;
	        String desc;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.ConditionType;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import java.util.Date;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
	import com.fasterxml.jackson.databind.annotation.JsonSerialize;
	
	@Data
	@Builder
	@AllArgsConstructor
	@NoArgsConstructor
	@TableName("t_ds_workflow_task_relation")
	public class WorkflowTaskRelation {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private int workflowDefinitionVersion;
	
	    private long projectCode;
	
	    private long workflowDefinitionCode;
	
	    private long preTaskCode;
	
	    private int preTaskVersion;
	
	    private long postTaskCode;
	
	    private int postTaskVersion;
	
	    @Deprecated
	    private ConditionType conditionType;
	
	    @JsonDeserialize(using = JSONUtils.JsonDataDeserializer.class)
	    @JsonSerialize(using = JSONUtils.JsonDataSerializer.class)
	    @Deprecated
	    private String conditionParams;
	
	    private Date createTime;
	
	    private Date updateTime;
	
	    public WorkflowTaskRelation(String name,
	                                int workflowDefinitionVersion,
	                                long projectCode,
	                                long workflowDefinitionCode,
	                                long preTaskCode,
	                                int preTaskVersion,
	                                long postTaskCode,
	                                int postTaskVersion,
	                                ConditionType conditionType,
	                                String conditionParams) {
	        this.name = name;
	        this.workflowDefinitionVersion = workflowDefinitionVersion;
	        this.projectCode = projectCode;
	        this.workflowDefinitionCode = workflowDefinitionCode;
	        this.preTaskCode = preTaskCode;
	        this.preTaskVersion = preTaskVersion;
	        this.postTaskCode = postTaskCode;
	        this.postTaskVersion = postTaskVersion;
	        this.conditionType = conditionType;
	        this.conditionParams = conditionParams;
	
	        Date now = new Date();
	        this.createTime = now;
	        this.updateTime = now;
	    }
	
	    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {
	        this.name = processTaskRelationLog.getName();
	        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();
	        this.projectCode = processTaskRelationLog.getProjectCode();
	        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();
	        this.preTaskCode = processTaskRelationLog.getPreTaskCode();
	        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();
	        this.postTaskCode = processTaskRelationLog.getPostTaskCode();
	        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();
	        this.conditionType = processTaskRelationLog.getConditionType();
	        this.conditionParams = processTaskRelationLog.getConditionParams();
	
	        this.createTime = processTaskRelationLog.getCreateTime();
	        this.updateTime = new Date();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_task_relation_log")
	public class WorkflowTaskRelationLog extends WorkflowTaskRelation {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowTaskRelationLog() {
	        super();
	    }
	
	    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {
	        super();
	        this.setName(workflowTaskRelation.getName());
	        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());
	        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());
	        this.setProjectCode(workflowTaskRelation.getProjectCode());
	        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());
	        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());
	        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());
	        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());
	        this.setConditionType(workflowTaskRelation.getConditionType());
	        this.setConditionParams(workflowTaskRelation.getConditionParams());
	        this.setCreateTime(workflowTaskRelation.getCreateTime());
	        this.setUpdateTime(workflowTaskRelation.getUpdateTime());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	/**
	 * task definition log
	 */
	@TableName("t_ds_task_definition_log")
	public class TaskDefinitionLog extends TaskDefinition {
	
	    /**
	     * operator user id
	     */
	    private int operator;
	
	    /**
	     * operate time
	     */
	    private Date operateTime;
	
	    public TaskDefinitionLog() {
	        super();
	    }
	
	    public TaskDefinitionLog(TaskDefinition taskDefinition) {
	        super();
	        this.setCode(taskDefinition.getCode());
	        this.setVersion(taskDefinition.getVersion());
	        this.setName(taskDefinition.getName());
	        this.setDescription(taskDefinition.getDescription());
	        this.setUserId(taskDefinition.getUserId());
	        this.setUserName(taskDefinition.getUserName());
	        this.setWorkerGroup(taskDefinition.getWorkerGroup());
	        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
	        this.setProjectCode(taskDefinition.getProjectCode());
	        this.setProjectName(taskDefinition.getProjectName());
	        this.setResourceIds(taskDefinition.getResourceIds());
	        this.setTaskParams(taskDefinition.getTaskParams());
	        this.setTaskParamList(taskDefinition.getTaskParamList());
	        this.setTaskParamMap(taskDefinition.getTaskParamMap());
	        this.setTaskPriority(taskDefinition.getTaskPriority());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
	        this.setTaskType(taskDefinition.getTaskType());
	        this.setTimeout(taskDefinition.getTimeout());
	        this.setDelayTime(taskDefinition.getDelayTime());
	        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
	        this.setUpdateTime(taskDefinition.getUpdateTime());
	        this.setCreateTime(taskDefinition.getCreateTime());
	        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
	        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
	        this.setFlag(taskDefinition.getFlag());
	        this.setIsCache(taskDefinition.getIsCache());
	        this.setModifyBy(taskDefinition.getModifyBy());
	        this.setCpuQuota(taskDefinition.getCpuQuota());
	        this.setMemoryMax(taskDefinition.getMemoryMax());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	    }
	
	    public int getOperator() {
	        return operator;
	    }
	
	    public void setOperator(int operator) {
	        this.operator = operator;
	    }
	
	    public Date getOperateTime() {
	        return operateTime;
	    }
	
	    public void setOperateTime(Date operateTime) {
	        this.operateTime = operateTime;
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.utils;
	
	import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.Collections;
	import java.util.List;
	
	import com.google.common.collect.Lists;
	
	public class WorkerGroupUtils {
	
	    private static final String DEFAULT_WORKER_GROUP = "default";
	
	    /**
	     * Check if the worker group is empty, if the worker group is default, it is considered empty
	     */
	    public static boolean isWorkerGroupEmpty(String workerGroup) {
	        return StringUtils.isEmpty(workerGroup) || getDefaultWorkerGroup().equals(workerGroup);
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup) {
	        return getWorkerGroupOrDefault(workerGroup, getDefaultWorkerGroup());
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {
	        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;
	    }
	
	    public static String getDefaultWorkerGroup() {
	        return DEFAULT_WORKER_GROUP;
	    }
	
	    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {
	        String addrList = workerGroup.getAddrList();
	        if (StringUtils.isEmpty(addrList)) {
	            return Collections.emptyList();
	        }
	        return Lists.newArrayList(addrList.split(","));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.repository.impl;
	
	import org.apache.dolphinscheduler.dao.entity.Session;
	import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
	import org.apache.dolphinscheduler.dao.repository.BaseDao;
	import org.apache.dolphinscheduler.dao.repository.SessionDao;
	
	import java.util.List;
	
	import lombok.NonNull;
	
	import org.springframework.stereotype.Repository;
	
	import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
	
	@Repository
	public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {
	
	    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {
	        super(sessionMapper);
	    }
	
	    public void deleteByUserId(Integer userId) {
	        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	    @Override
	    public List<Session> queryByUserId(Integer userId) {
	        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao;
	
	import static java.util.Objects.requireNonNull;
	
	import org.apache.dolphinscheduler.dao.entity.PluginDefine;
	import org.apache.dolphinscheduler.dao.mapper.PluginDefineMapper;
	import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
	
	import java.util.Objects;
	
	import lombok.NonNull;
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Repository;
	
	@Slf4j
	@Repository
	public class PluginDao {
	
	    @Autowired
	    private PluginDefineMapper pluginDefineMapper;
	
	    /**
	     * check plugin define table exist
	     *
	     * @return boolean
	     */
	    public boolean checkPluginDefineTableExist() {
	        return pluginDefineMapper.checkTableExist() > 0;
	    }
	
	    /**
	     * add or update plugin define
	     *
	     * @param pluginDefine new pluginDefine
	     * @return plugin id
	     */
	    public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {
	        requireNonNull(pluginDefine.getPluginName(), "pluginName is null");
	        requireNonNull(pluginDefine.getPluginType(), "pluginType is null");
	
	        PluginDefine currPluginDefine =
	                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());
	        if (currPluginDefine == null) {
	            try {
	                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {
	                    return pluginDefine.getId();
	                }
	                throw new TaskPluginException(
	                        String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	            } catch (TaskPluginException ex) {
	                throw ex;
	            } catch (Exception ex) {
	                log.error("Insert plugin definition error, there may already exist a plugin", ex);
	                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),
	                        pluginDefine.getPluginType());
	                if (currPluginDefine == null) {
	                    throw new TaskPluginException(
	                            String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	                }
	            }
	        }
	        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {
	            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());
	            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());
	            pluginDefineMapper.updateById(currPluginDefine);
	        }
	        return currPluginDefine.getId();
	    }
	
	    /**
	     * query plugin define by id
	     *
	     * @param pluginDefineId plugin define id
	     * @return PluginDefine
	     */
	    public PluginDefine getPluginDefineById(int pluginDefineId) {
	        return pluginDefineMapper.selectById(pluginDefineId);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_definition_log")
	public class WorkflowDefinitionLog extends WorkflowDefinition {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowDefinitionLog() {
	        super();
	    }
	
	    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {
	        this.setCode(workflowDefinition.getCode());
	        this.setName(workflowDefinition.getName());
	        this.setVersion(workflowDefinition.getVersion());
	        this.setReleaseState(workflowDefinition.getReleaseState());
	        this.setProjectCode(workflowDefinition.getProjectCode());
	        this.setDescription(workflowDefinition.getDescription());
	        this.setGlobalParams(workflowDefinition.getGlobalParams());
	        this.setGlobalParamList(workflowDefinition.getGlobalParamList());
	        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());
	        this.setCreateTime(workflowDefinition.getCreateTime());
	        this.setUpdateTime(workflowDefinition.getUpdateTime());
	        this.setFlag(workflowDefinition.getFlag());
	        this.setUserId(workflowDefinition.getUserId());
	        this.setUserName(workflowDefinition.getUserName());
	        this.setProjectName(workflowDefinition.getProjectName());
	        this.setLocations(workflowDefinition.getLocations());
	        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());
	        this.setTimeout(workflowDefinition.getTimeout());
	        this.setModifyBy(workflowDefinition.getModifyBy());
	        this.setWarningGroupId(workflowDefinition.getWarningGroupId());
	        this.setExecutionType(workflowDefinition.getExecutionType());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:
			[
				fromLine:"				6",
				toLine:"				6",
				oldContent:"
				import java.util.Date;				
",
				newContent:"
								
",
,

			],
			dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:
			[
				fromLine:"				11",
				toLine:"				11",
				oldContent:"
				import java.util.Date;				
",
				newContent:"
								
",
,

			],
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[143,22] cannot access org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	[ERROR]     file does not contain class org.apache.dolphinscheduler.dao.entity.TaskExecutionInitialization
	[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[1,8] duplicate class: TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[114,61] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java:[3,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class TaskExecutionInitialization
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[8,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java:[9,13] cannot find symbol
	[ERROR]   symbol:   class Date
	[ERROR]   location: class WorkflowInstanceQuery
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[172,35] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[173,50] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[221,13] cannot find symbol
	[ERROR]   symbol: method setState(org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[222,37] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[225,50] cannot find symbol
	[ERROR]   symbol: method getStateHistory()
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[227,27] constructor StateDesc in class org.apache.dolphinscheduler.dao.entity.WorkflowInstance.StateDesc cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.util.Date,org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java:[228,13] cannot find symbol
	[ERROR]   symbol: method setStateHistory(java.lang.String)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[101,43] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[102,64] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[103,50] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[104,61] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[105,50] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[106,53] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[107,51] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[108,54] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[109,52] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[110,54] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java:[112,49] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable processTaskRelationLog of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[35,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[39,9] no suitable constructor found for WorkflowTaskRelation(no arguments)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(java.lang.String,int,long,long,long,int,long,int,org.apache.dolphinscheduler.common.enums.ConditionType,java.lang.String) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR]     constructor org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation.WorkflowTaskRelation(org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelationLog) is not applicable
	[ERROR]       (actual and formal argument lists differ in length)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[40,42] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[41,60] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[42,63] cannot find symbol
	[ERROR]   symbol:   method getWorkflowDefinitionVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[43,49] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[44,49] cannot find symbol
	[ERROR]   symbol:   method getPreTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[45,52] cannot find symbol
	[ERROR]   symbol:   method getPreTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[46,50] cannot find symbol
	[ERROR]   symbol:   method getPostTaskCode()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[47,53] cannot find symbol
	[ERROR]   symbol:   method getPostTaskVersion()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[48,51] cannot find symbol
	[ERROR]   symbol:   method getConditionType()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[49,53] cannot find symbol
	[ERROR]   symbol:   method getConditionParams()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[50,48] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java:[51,48] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable workflowTaskRelation of type org.apache.dolphinscheduler.dao.entity.WorkflowTaskRelation
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;
	[ERROR]   required: long,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol
	[ERROR]   symbol:   method getUserId()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol
	[ERROR]   symbol:   method getUserName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol
	[ERROR]   symbol:   method getWorkerGroup()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol
	[ERROR]   symbol:   method getEnvironmentCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol
	[ERROR]   symbol:   method getProjectName()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol
	[ERROR]   symbol:   method getResourceIds()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol
	[ERROR]   symbol:   method getTaskParams()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol
	[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol
	[ERROR]   symbol:   method getTaskPriority()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol
	[ERROR]   symbol:   method getTimeoutNotifyStrategy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol
	[ERROR]   symbol:   method getTimeout()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol
	[ERROR]   symbol:   method getDelayTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol
	[ERROR]   symbol:   method getTimeoutFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol
	[ERROR]   symbol:   method getCreateTime()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol
	[ERROR]   symbol:   method getFailRetryInterval()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol
	[ERROR]   symbol:   method getFailRetryTimes()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol
	[ERROR]   symbol:   method getFlag()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol
	[ERROR]   symbol:   method getIsCache()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol
	[ERROR]   symbol:   method getModifyBy()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol
	[ERROR]   symbol: method setCpuQuota(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol
	[ERROR]   symbol: method setMemoryMax(java.lang.Integer)
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol
	[ERROR]   symbol:   method getTaskExecuteType()
	[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol
	[ERROR]   symbol:   method getAddrList()
	[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[41,56] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java:[46,67] cannot find symbol
	[ERROR]   symbol:   method builder()
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.Session
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[57,36] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[58,36] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,67] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[61,97] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[64,81] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[65,40] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,45] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[69,75] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[73,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.dao.PluginDao
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[74,86] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[75,37] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,49] cannot find symbol
	[ERROR]   symbol:   method getPluginName()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[79,79] cannot find symbol
	[ERROR]   symbol:   method getPluginType()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,45] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[83,77] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[84,56] cannot find symbol
	[ERROR]   symbol:   method getUpdateTime()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[85,58] cannot find symbol
	[ERROR]   symbol:   method getPluginParams()
	[ERROR]   location: variable pluginDefine of type @lombok.NonNull org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java:[88,32] cannot find symbol
	[ERROR]   symbol:   method getId()
	[ERROR]   location: variable currPluginDefine of type org.apache.dolphinscheduler.dao.entity.PluginDefine
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[35,9] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[38,73] constructor WorkflowDefinition in class org.apache.dolphinscheduler.dao.entity.WorkflowDefinition cannot be applied to given types;
	[ERROR]   required: long,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,int,int
	[ERROR]   found:    no arguments
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[39,40] cannot find symbol
	[ERROR]   symbol:   method getCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[40,40] cannot find symbol
	[ERROR]   symbol:   method getName()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[41,43] cannot find symbol
	[ERROR]   symbol:   method getVersion()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[42,48] cannot find symbol
	[ERROR]   symbol:   method getReleaseState()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[43,47] cannot find symbol
	[ERROR]   symbol:   method getProjectCode()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java:[44,47] cannot find symbol
	[ERROR]   symbol:   method getDescription()
	[ERROR]   location: variable workflowDefinition of type org.apache.dolphinscheduler.dao.entity.WorkflowDefinition
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(TaskExecutionInitialization taskExecutionInitialization) {
	        this.host = taskExecutionInitialization.getHost();
	        this.startTime = taskExecutionInitialization.getStartTime();
	        this.executePath = taskExecutionInitialization.getExecutePath();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskExecutionInitialization.java
	public class TaskExecutionInitialization {
	    private String host;
	    private Date startTime;
	    private String executePath;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            WorkflowInstanceQuery workflowInstanceQuery);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstanceQuery.java
	public class WorkflowInstanceQuery {
	    private Long projectCode;
	    private Long workflowDefinitionCode;
	    private String searchVal;
	    private String executorName;
	    private int[] statusArray;
	    private String host;
	    private Date startTime;
	    private Date endTime;
	
	    // Constructor, getters and setters
	}	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.CommandType;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.common.utils.DateUtils;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.ArrayList;
	import java.util.Date;
	import java.util.List;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.google.common.base.Strings;
	
	@NoArgsConstructor
	@Data
	@Builder
	@AllArgsConstructor
	@TableName("t_ds_workflow_instance")
	public class WorkflowInstance {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private Long workflowDefinitionCode;
	
	    private int workflowDefinitionVersion;
	
	    private Long projectCode;
	
	    private WorkflowExecutionStatus state;
	
	    private String stateHistory;
	
	    @TableField(exist = false)
	    private List<StateDesc> stateDescList;
	
	    private Flag recovery;
	    private Date startTime;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private Date endTime;
	
	    private int runTimes;
	
	    private String name;
	
	    private String host;
	
	    @Deprecated
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    private CommandType commandType;
	
	    private String commandParam;
	
	    private TaskDependType taskDependType;
	
	    @Deprecated
	    private int maxTryTimes;
	
	    private FailureStrategy failureStrategy;
	
	    private WarningType warningType;
	
	    private Integer warningGroupId;
	
	    private Date scheduleTime;
	
	    private Date commandStartTime;
	
	    /**
	     * user define parameters string
	     */
	    private String globalParams;
	
	    @TableField(exist = false)
	    private DagData dagData;
	
	    private int executorId;
	
	    private String executorName;
	
	    private String tenantCode;
	
	    @TableField(exist = false)
	    private String queue;
	
	    private Flag isSubWorkflow;
	
	    /**
	     * task locations for web
	     */
	    @TableField(exist = false)
	    private String locations;
	
	    private String historyCmd;
	
	    @TableField(exist = false)
	    private String dependenceScheduleTimes;
	
	    /**
	     * workflow execution duration
	     *
	     * @return
	     */
	    @TableField(exist = false)
	    private String duration;
	
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private int timeout;
	
	    private String varPool;
	
	    @Deprecated
	    private int nextWorkflowInstanceId;
	
	    private int dryRun;
	
	    private Date restartTime;
	
	    private int testFlag;
	
	    /**
	     * set the process name with process define version and timestamp
	     *
	     * @param workflowDefinition processDefinition
	     */
	    public WorkflowInstance(WorkflowDefinition workflowDefinition) {
	        this.workflowDefinition = workflowDefinition;
	        // todo: the name is not unique
	        this.name = String.join("-",
	                workflowDefinition.getName(),
	                String.valueOf(workflowDefinition.getVersion()),
	                DateUtils.getCurrentTimeStamp());
	    }
	
	    /**
	     * add command to history
	     *
	     * @param cmd cmd
	     */
	    public void addHistoryCmd(CommandType cmd) {
	        if (!Strings.isNullOrEmpty(this.historyCmd)) {
	            this.historyCmd = String.format("%s,%s", this.historyCmd, cmd.toString());
	        } else {
	            this.historyCmd = cmd.toString();
	        }
	    }
	
	    /**
	     * check this process is start complement data
	     *
	     * @return whether complement data
	     */
	    public boolean isComplementData() {
	        if (Strings.isNullOrEmpty(this.historyCmd)) {
	            return false;
	        }
	        return historyCmd.startsWith(CommandType.COMPLEMENT_DATA.toString());
	    }
	
	    /**
	     * get current command type,
	     * if start with complement data,return complement
	     *
	     * @return CommandType
	     */
	    public CommandType getCmdTypeIfComplement() {
	        if (isComplementData()) {
	            return CommandType.COMPLEMENT_DATA;
	        }
	        return commandType;
	    }
	
	    /**
	     * set state with desc
	     * @param state
	     * @param stateDesc
	     */
	    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {
	        this.setState(state);
	        if (StringUtils.isEmpty(this.getStateHistory())) {
	            stateDescList = new ArrayList<>();
	        } else if (stateDescList == null) {
	            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);
	        }
	        stateDescList.add(new StateDesc(new Date(), state, stateDesc));
	        this.setStateHistory(JSONUtils.toJsonString(stateDescList));
	    }
	
	    @Data
	    @NoArgsConstructor
	    @AllArgsConstructor
	    public static class StateDesc {
	
	        Date time;
	        WorkflowExecutionStatus state;
	        String desc;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.ConditionType;
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	
	import java.util.Date;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
	import com.fasterxml.jackson.databind.annotation.JsonSerialize;
	
	@Data
	@Builder
	@AllArgsConstructor
	@NoArgsConstructor
	@TableName("t_ds_workflow_task_relation")
	public class WorkflowTaskRelation {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private int workflowDefinitionVersion;
	
	    private long projectCode;
	
	    private long workflowDefinitionCode;
	
	    private long preTaskCode;
	
	    private int preTaskVersion;
	
	    private long postTaskCode;
	
	    private int postTaskVersion;
	
	    @Deprecated
	    private ConditionType conditionType;
	
	    @JsonDeserialize(using = JSONUtils.JsonDataDeserializer.class)
	    @JsonSerialize(using = JSONUtils.JsonDataSerializer.class)
	    @Deprecated
	    private String conditionParams;
	
	    private Date createTime;
	
	    private Date updateTime;
	
	    public WorkflowTaskRelation(String name,
	                                int workflowDefinitionVersion,
	                                long projectCode,
	                                long workflowDefinitionCode,
	                                long preTaskCode,
	                                int preTaskVersion,
	                                long postTaskCode,
	                                int postTaskVersion,
	                                ConditionType conditionType,
	                                String conditionParams) {
	        this.name = name;
	        this.workflowDefinitionVersion = workflowDefinitionVersion;
	        this.projectCode = projectCode;
	        this.workflowDefinitionCode = workflowDefinitionCode;
	        this.preTaskCode = preTaskCode;
	        this.preTaskVersion = preTaskVersion;
	        this.postTaskCode = postTaskCode;
	        this.postTaskVersion = postTaskVersion;
	        this.conditionType = conditionType;
	        this.conditionParams = conditionParams;
	
	        Date now = new Date();
	        this.createTime = now;
	        this.updateTime = now;
	    }
	
	    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {
	        this.name = processTaskRelationLog.getName();
	        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();
	        this.projectCode = processTaskRelationLog.getProjectCode();
	        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();
	        this.preTaskCode = processTaskRelationLog.getPreTaskCode();
	        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();
	        this.postTaskCode = processTaskRelationLog.getPostTaskCode();
	        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();
	        this.conditionType = processTaskRelationLog.getConditionType();
	        this.conditionParams = processTaskRelationLog.getConditionParams();
	
	        this.createTime = processTaskRelationLog.getCreateTime();
	        this.updateTime = new Date();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_task_relation_log")
	public class WorkflowTaskRelationLog extends WorkflowTaskRelation {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowTaskRelationLog() {
	        super();
	    }
	
	    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {
	        super();
	        this.setName(workflowTaskRelation.getName());
	        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());
	        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());
	        this.setProjectCode(workflowTaskRelation.getProjectCode());
	        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());
	        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());
	        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());
	        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());
	        this.setConditionType(workflowTaskRelation.getConditionType());
	        this.setConditionParams(workflowTaskRelation.getConditionParams());
	        this.setCreateTime(workflowTaskRelation.getCreateTime());
	        this.setUpdateTime(workflowTaskRelation.getUpdateTime());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	/**
	 * task definition log
	 */
	@TableName("t_ds_task_definition_log")
	public class TaskDefinitionLog extends TaskDefinition {
	
	    /**
	     * operator user id
	     */
	    private int operator;
	
	    /**
	     * operate time
	     */
	    private Date operateTime;
	
	    public TaskDefinitionLog() {
	        super();
	    }
	
	    public TaskDefinitionLog(TaskDefinition taskDefinition) {
	        super();
	        this.setCode(taskDefinition.getCode());
	        this.setVersion(taskDefinition.getVersion());
	        this.setName(taskDefinition.getName());
	        this.setDescription(taskDefinition.getDescription());
	        this.setUserId(taskDefinition.getUserId());
	        this.setUserName(taskDefinition.getUserName());
	        this.setWorkerGroup(taskDefinition.getWorkerGroup());
	        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
	        this.setProjectCode(taskDefinition.getProjectCode());
	        this.setProjectName(taskDefinition.getProjectName());
	        this.setResourceIds(taskDefinition.getResourceIds());
	        this.setTaskParams(taskDefinition.getTaskParams());
	        this.setTaskParamList(taskDefinition.getTaskParamList());
	        this.setTaskParamMap(taskDefinition.getTaskParamMap());
	        this.setTaskPriority(taskDefinition.getTaskPriority());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
	        this.setTaskType(taskDefinition.getTaskType());
	        this.setTimeout(taskDefinition.getTimeout());
	        this.setDelayTime(taskDefinition.getDelayTime());
	        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
	        this.setUpdateTime(taskDefinition.getUpdateTime());
	        this.setCreateTime(taskDefinition.getCreateTime());
	        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
	        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
	        this.setFlag(taskDefinition.getFlag());
	        this.setIsCache(taskDefinition.getIsCache());
	        this.setModifyBy(taskDefinition.getModifyBy());
	        this.setCpuQuota(taskDefinition.getCpuQuota());
	        this.setMemoryMax(taskDefinition.getMemoryMax());
	        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
	    }
	
	    public int getOperator() {
	        return operator;
	    }
	
	    public void setOperator(int operator) {
	        this.operator = operator;
	    }
	
	    public Date getOperateTime() {
	        return operateTime;
	    }
	
	    public void setOperateTime(Date operateTime) {
	        this.operateTime = operateTime;
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	    @Override
	    public int hashCode() {
	        return super.hashCode();
	    }
	
	    @Override
	    public String toString() {
	        return super.toString();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.utils;
	
	import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.Collections;
	import java.util.List;
	
	import com.google.common.collect.Lists;
	
	public class WorkerGroupUtils {
	
	    private static final String DEFAULT_WORKER_GROUP = "default";
	
	    /**
	     * Check if the worker group is empty, if the worker group is default, it is considered empty
	     */
	    public static boolean isWorkerGroupEmpty(String workerGroup) {
	        return StringUtils.isEmpty(workerGroup) || getDefaultWorkerGroup().equals(workerGroup);
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup) {
	        return getWorkerGroupOrDefault(workerGroup, getDefaultWorkerGroup());
	    }
	
	    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {
	        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;
	    }
	
	    public static String getDefaultWorkerGroup() {
	        return DEFAULT_WORKER_GROUP;
	    }
	
	    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {
	        String addrList = workerGroup.getAddrList();
	        if (StringUtils.isEmpty(addrList)) {
	            return Collections.emptyList();
	        }
	        return Lists.newArrayList(addrList.split(","));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.repository.impl;
	
	import org.apache.dolphinscheduler.dao.entity.Session;
	import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
	import org.apache.dolphinscheduler.dao.repository.BaseDao;
	import org.apache.dolphinscheduler.dao.repository.SessionDao;
	
	import java.util.List;
	
	import lombok.NonNull;
	
	import org.springframework.stereotype.Repository;
	
	import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
	
	@Repository
	public class SessionDaoImpl extends BaseDao<Session, SessionMapper> implements SessionDao {
	
	    public SessionDaoImpl(@NonNull SessionMapper sessionMapper) {
	        super(sessionMapper);
	    }
	
	    public void deleteByUserId(Integer userId) {
	        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	    @Override
	    public List<Session> queryByUserId(Integer userId) {
	        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao;
	
	import static java.util.Objects.requireNonNull;
	
	import org.apache.dolphinscheduler.dao.entity.PluginDefine;
	import org.apache.dolphinscheduler.dao.mapper.PluginDefineMapper;
	import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
	
	import java.util.Objects;
	
	import lombok.NonNull;
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Repository;
	
	@Slf4j
	@Repository
	public class PluginDao {
	
	    @Autowired
	    private PluginDefineMapper pluginDefineMapper;
	
	    /**
	     * check plugin define table exist
	     *
	     * @return boolean
	     */
	    public boolean checkPluginDefineTableExist() {
	        return pluginDefineMapper.checkTableExist() > 0;
	    }
	
	    /**
	     * add or update plugin define
	     *
	     * @param pluginDefine new pluginDefine
	     * @return plugin id
	     */
	    public int addOrUpdatePluginDefine(@NonNull PluginDefine pluginDefine) {
	        requireNonNull(pluginDefine.getPluginName(), "pluginName is null");
	        requireNonNull(pluginDefine.getPluginType(), "pluginType is null");
	
	        PluginDefine currPluginDefine =
	                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());
	        if (currPluginDefine == null) {
	            try {
	                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {
	                    return pluginDefine.getId();
	                }
	                throw new TaskPluginException(
	                        String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	            } catch (TaskPluginException ex) {
	                throw ex;
	            } catch (Exception ex) {
	                log.error("Insert plugin definition error, there may already exist a plugin", ex);
	                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),
	                        pluginDefine.getPluginType());
	                if (currPluginDefine == null) {
	                    throw new TaskPluginException(
	                            String.format("Failed to insert plugin definition, pluginName: %s, pluginType: %s",
	                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));
	                }
	            }
	        }
	        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {
	            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());
	            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());
	            pluginDefineMapper.updateById(currPluginDefine);
	        }
	        return currPluginDefine.getId();
	    }
	
	    /**
	     * query plugin define by id
	     *
	     * @param pluginDefineId plugin define id
	     * @return PluginDefine
	     */
	    public PluginDefine getPluginDefineById(int pluginDefineId) {
	        return pluginDefineMapper.selectById(pluginDefineId);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_workflow_definition_log")
	public class WorkflowDefinitionLog extends WorkflowDefinition {
	
	    private int operator;
	
	    private Date operateTime;
	
	    public WorkflowDefinitionLog() {
	        super();
	    }
	
	    public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {
	        this.setCode(workflowDefinition.getCode());
	        this.setName(workflowDefinition.getName());
	        this.setVersion(workflowDefinition.getVersion());
	        this.setReleaseState(workflowDefinition.getReleaseState());
	        this.setProjectCode(workflowDefinition.getProjectCode());
	        this.setDescription(workflowDefinition.getDescription());
	        this.setGlobalParams(workflowDefinition.getGlobalParams());
	        this.setGlobalParamList(workflowDefinition.getGlobalParamList());
	        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());
	        this.setCreateTime(workflowDefinition.getCreateTime());
	        this.setUpdateTime(workflowDefinition.getUpdateTime());
	        this.setFlag(workflowDefinition.getFlag());
	        this.setUserId(workflowDefinition.getUserId());
	        this.setUserName(workflowDefinition.getUserName());
	        this.setProjectName(workflowDefinition.getProjectName());
	        this.setLocations(workflowDefinition.getLocations());
	        this.setScheduleReleaseState(workflowDefinition.getScheduleReleaseState());
	        this.setTimeout(workflowDefinition.getTimeout());
	        this.setModifyBy(workflowDefinition.getModifyBy());
	        this.setWarningGroupId(workflowDefinition.getWarningGroupId());
	        this.setExecutionType(workflowDefinition.getExecutionType());
	    }
	
	    @Override
	    public boolean equals(Object o) {
	        return super.equals(o);
	    }
	
	}
		
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.9",
