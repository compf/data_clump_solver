
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 65,
                "toLine": 70,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType)",
                "newContent": "public HttpResponse startWorkflowInstance(StartWorkflowInstanceParams params)"
            },
            {
                "fromLine": 72,
                "toLine": 78,
                "oldContent": "        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        Map<String, Object> params = params.toMap();"
            },
            {
                "fromLine": 103,
                "toLine": 103,
                "oldContent": "    public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {",
                "newContent": "    public HttpResponse queryExecutingWorkflow(QueryExecutingWorkflowParams params) {"
            },
            {
                "fromLine": 105,
                "toLine": 108,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"id\", workflowInstanceCode);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);",
                "newContent": "        Map<String, Object> params = params.toMap();\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, params.getSessionId());"
            },
            {
                "fromLine": 131,
                "toLine": 131,
                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "    public HttpResponse execute(ExecuteWorkflowParams params) {"
            },
            {
                "fromLine": 133,
                "toLine": 136,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);",
                "newContent": "        Map<String, Object> params = params.toMap();"
            },
            {
                "fromLine": 159,
                "toLine": 159,
                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {",
                "newContent": "    public HttpResponse executeTask(ExecuteTaskParams params) {"
            },
            {
                "fromLine": 161,
                "toLine": 164,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);",
                "newContent": "        Map<String, Object> params = params.toMap();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 171,
                "toLine": 186,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            WorkflowInstanceListPagingParams params);"
            },
            {
                "fromLine": 303,
                "toLine": 316,
                "oldContent": "    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(\n                                                                                  @Param(\"startTime\") Date startTime,\n                                                                                  @Param(\"endTime\") Date endTime,\n                                                                                  @Param(\"projectCodes\") Collection<Long> projectCodes);",
                "newContent": "    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceStateParams params);"
            },
            {
                "fromLine": 389,
                "toLine": 393,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              WorkflowInstanceListV2PagingParams params);"
            },
            {
                "fromLine": 403,
                "toLine": 416,
                "oldContent": "    List<ExecuteStatusCount> countInstanceStateV2(\n                                                  @Param(\"startTime\") Date startTime,\n                                                  @Param(\"endTime\") Date endTime,\n                                                  @Param(\"projectCode\") Long projectCode,\n                                                  @Param(\"workflowCode\") Long workflowCode,\n                                                  @Param(\"model\") Integer model,\n                                                  @Param(\"projectIds\") Set<Integer> projectIds);",
                "newContent": "    List<ExecuteStatusCount> countInstanceStateV2(InstanceStateV2Params params);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 109,
                "toLine": 111,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;\n    }",
                "newContent": "    public void init(TaskInstanceInitParams params) {\n        this.host = params.getHost();\n        this.startTime = params.getStartTime();\n        this.executePath = params.getExecutePath();\n    }"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 27,
                "toLine": 27,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result createProjectParameter(CreateProjectParameterParams params);"
            },
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result updateProjectParameter(UpdateProjectParameterParams params);"
            },
            {
                "fromLine": 31,
                "toLine": 31,
                "oldContent": "    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result deleteProjectParametersByCode(DeleteProjectParametersByCodeParams params);"
            },
            {
                "fromLine": 33,
                "toLine": 33,
                "oldContent": "    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
                "newContent": "    Result batchDeleteProjectParametersByCodes(BatchDeleteProjectParametersByCodesParams params);"
            },
            {
                "fromLine": 35,
                "toLine": 35,
                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);",
                "newContent": "    Result queryProjectParameterListPaging(QueryProjectParameterListPagingParams params);"
            },
            {
                "fromLine": 37,
                "toLine": 37,
                "oldContent": "    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result queryProjectParameterByCode(QueryProjectParameterByCodeParams params);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 56,
                "toLine": 62,
                "oldContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {",
                "newContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         CreateProjectParameterParams params) {"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        return projectParameterService.createProjectParameter(params.withLoginUser(loginUser));"
            },
            {
                "fromLine": 72,
                "toLine": 78,
                "oldContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {",
                "newContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         UpdateProjectParameterParams params) {"
            },
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        return projectParameterService.updateProjectParameter(params.withLoginUser(loginUser));"
            },
            {
                "fromLine": 87,
                "toLine": 93,
                "oldContent": "    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                @RequestParam(\"code\") long code) {",
                "newContent": "    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                DeleteProjectParametersByCodeParams params) {"
            },
            {
                "fromLine": 95,
                "toLine": 95,
                "oldContent": "        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);",
                "newContent": "        return projectParameterService.deleteProjectParametersByCode(params.withLoginUser(loginUser));"
            },
            {
                "fromLine": 102,
                "toLine": 108,
                "oldContent": "    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      @RequestParam(\"codes\") String codes) {",
                "newContent": "    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      BatchDeleteProjectParametersByCodesParams params) {"
            },
            {
                "fromLine": 110,
                "toLine": 110,
                "oldContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
                "newContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(params.withLoginUser(loginUser));"
            },
            {
                "fromLine": 118,
                "toLine": 124,
                "oldContent": "    public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                                  @RequestParam(value = \"projectParameterDataType\", required = false) String projectParameterDataType,\n                                                  @RequestParam(\"pageNo\") Integer pageNo,\n                                                  @RequestParam(\"pageSize\") Integer pageSize) {",
                "newContent": "    public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  QueryProjectParameterListPagingParams params) {"
            },
            {
                "fromLine": 126,
                "toLine": 126,
                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);",
                "newContent": "        return projectParameterService.queryProjectParameterListPaging(params.withLoginUser(loginUser));"
            },
            {
                "fromLine": 133,
                "toLine": 139,
                "oldContent": "    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              @PathVariable(\"code\") long code) {",
                "newContent": "    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              QueryProjectParameterByCodeParams params) {"
            },
            {
                "fromLine": 141,
                "toLine": 141,
                "oldContent": "        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
                "newContent": "        return projectParameterService.queryProjectParameterByCode(params.withLoginUser(loginUser));"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 28,
                "toLine": 32,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        CreateProjectParameterParams params = new CreateProjectParameterParams()\n                .withProjectCode(1L)\n                .withProjectParameterName(\"key\")\n                .withProjectParameterValue(\"value\")\n                .withProjectParameterDataType(DataType.VARCHAR.name());\n        Result result = projectParameterController.createProjectParameter(loginUser, params);"
            },
            {
                "fromLine": 39,
                "toLine": 43,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        UpdateProjectParameterParams params = new UpdateProjectParameterParams()\n                .withProjectCode(1L)\n                .withCode(1L)\n                .withProjectParameterName(\"key\")\n                .withProjectParameterValue(\"value\")\n                .withProjectParameterDataType(DataType.LONG.name());\n        Result result = projectParameterController.updateProjectParameter(loginUser, params);"
            },
            {
                "fromLine": 50,
                "toLine": 54,
                "oldContent": "        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);",
                "newContent": "        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any())).thenReturn(getSuccessResult());\n        DeleteProjectParametersByCodeParams params = new DeleteProjectParametersByCodeParams()\n                .withProjectCode(1L)\n                .withCode(1L);\n        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, params);"
            },
            {
                "fromLine": 61,
                "toLine": 65,
                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),\n                Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");",
                "newContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any())).thenReturn(get
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 61,
                "toLine": 65,
                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),\n                Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");",
                "newContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any())).thenReturn(getSuccessResult());\n        BatchDeleteProjectParametersByCodesParams params = new BatchDeleteProjectParametersByCodesParams()\n                .withProjectCode(1L)\n                .withCodes(\"1\");\n        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, params);"
            },
            {
                "fromLine": 72,
                "toLine": 76,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",\n                DataType.VARCHAR.name(), 1, 10);",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any())).thenReturn(getSuccessResult());\n        QueryProjectParameterListPagingParams params = new QueryProjectParameterListPagingParams()\n                .withProjectCode(1L)\n                .withSearchVal(\"1\")\n                .withProjectParameterDataType(DataType.VARCHAR.name())\n                .withPageNo(1)\n                .withPageSize(10);\n        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, params);"
            },
            {
                "fromLine": 83,
                "toLine": 87,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any())).thenReturn(getSuccessResult());\n        QueryProjectParameterByCodeParams params = new QueryProjectParameterByCodeParams()\n                .withProjectCode(1L)\n                .withCode(1L);\n        Result result = projectParameterController.queryProjectParameterByCode(loginUser, params);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 40,
                "toLine": 44,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        CreateProjectParameterParams params = new CreateProjectParameterParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withProjectParameterName(\"key\")\n                .withProjectParameterValue(\"value\")\n                .withProjectParameterDataType(DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(params);"
            },
            {
                "fromLine": 53,
                "toLine": 57,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        UpdateProjectParameterParams updateParams = new UpdateProjectParameterParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCode(1L)\n                .withProjectParameterName(\"key\")\n                .withProjectParameterValue(\"value\")\n                .withProjectParameterDataType(DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(updateParams);"
            },
            {
                "fromLine": 66,
                "toLine": 70,
                "oldContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        DeleteProjectParametersByCodeParams deleteParams = new DeleteProjectParametersByCodeParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCode(1L);\n        Result result = projectParameterService.deleteProjectParametersByCode(deleteParams);"
            },
            {
                "fromLine": 79,
                "toLine": 83,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        QueryProjectParameterByCodeParams queryParams = new QueryProjectParameterByCodeParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCode(1L);\n        Result result = projectParameterService.queryProjectParameterByCode(queryParams);"
            },
            {
                "fromLine": 92,
                "toLine": 96,
                "oldContent": "        Result result =\n                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,\n                        DataType.VARCHAR.name());",
                "newContent": "        QueryProjectParameterListPagingParams pagingParams = new QueryProjectParameterListPagingParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withPageSize(pageSize)\n                .withPageNo(pageNo)\n                .withProjectParameterDataType(DataType.VARCHAR.name());\n        Result result = projectParameterService.queryProjectParameterListPaging(pagingParams);"
            },
            {
                "fromLine": 105,
                "toLine": 109,
                "oldContent": "        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"\");",
                "newContent": "        BatchDeleteProjectParametersByCodesParams batchDeleteParams = new BatchDeleteProjectParametersByCodesParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCodes(\"\");\n        projectParameterService.batchDeleteProjectParametersByCodes(batchDeleteParams);"
            },
            {
                "fromLine": 113,
                "toLine": 117,
                "oldContent": "        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1,2\");",
                "newContent": "        BatchDeleteProjectParametersByCodesParams batchDeleteParams2 = new BatchDeleteProjectParametersByCodesParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCodes(\"1,2\");\n        projectParameterService.batchDeleteProjectParametersByCodes(batchDeleteParams2);"
            },
            {
                "fromLine": 121,
                "toLine": 125,
                "oldContent": "        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1\");",
                "newContent": "        BatchDeleteProjectParametersByCodesParams batchDeleteParams3 = new BatchDeleteProjectParametersByCodesParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withCodes(\"1\");\n        projectParameterService.batchDeleteProjectParametersByCodes(batchDeleteParams3);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 139,
                "toLine": 150,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);",
                "newContent": "        CreateScheduleParams createScheduleParams = new CreateScheduleParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withWorkflowDefinitionCode(workflowDefinitionCode)\n                .withSchedule(schedule)\n                .withWarningType(warningType)\n                .withWarningGroupId(warningGroupId)\n                .withFailureStrategy(failureStrategy)\n                .withWorkflowInstancePriority(workflowInstancePriority)\n                .withWorkerGroup(workerGroup)\n                .withTenantCode(tenantCode)\n                .withEnvironmentCode(environmentCode);\n        Map<String, Object> result = schedulerService.insertSchedule(createScheduleParams);"
            },
            {
                "fromLine": 161,
                "toLine": 172,
                "oldContent": "        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "        UpdateScheduleParams updateScheduleParams = new UpdateScheduleParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withId(id)\n                .withSchedule(schedule)\n                .withWarningType(warningType)\n                .withWarningGroupId(warningGroupId)\n                .withFailureStrategy(failureStrategy)\n                .withWorkflowInstancePriority(workflowInstancePriority)\n                .withWorkerGroup(workerGroup)\n                .withTenantCode(tenantCode)\n                .withEnvironmentCode(environmentCode);\n        Map<String, Object> result = schedulerService.updateSchedule(updateScheduleParams);"
            },
            {
                "fromLine": 233,
                "toLine": 243,
                "oldContent": "        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,\n                pageSize);",
                "newContent": "        QueryScheduleListPagingParams queryScheduleListPagingParams = new QueryScheduleListPagingParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withWorkflowDefinitionCode(workflowDefinitionCode)\n                .withSearchVal(searchVal)\n                .withPageNo(pageNo)\n                .withPageSize(pageSize);\n        return schedulerService.querySchedule(queryScheduleListPagingParams);"
            },
            {
                "fromLine": 258,
                "toLine": 261,
                "oldContent": "        schedulerService.deleteSchedulesById(loginUser, id);",
                "newContent": "        DeleteScheduleByIdParams deleteScheduleByIdParams = new DeleteScheduleByIdParams()\n                .withLoginUser(loginUser)\n                .withId(id);\n        schedulerService.deleteSchedulesById(deleteScheduleByIdParams);"
            },
            {
                "fromLine": 269,
                "toLine": 272,
                "oldContent": "        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);",
                "newContent": "        QueryScheduleListParams queryScheduleListParams = new QueryScheduleListParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode);\n        Map<String, Object> result = schedulerService.queryScheduleList(queryScheduleListParams);"
            },
            {
                "fromLine": 283,
                "toLine": 286,
                "oldContent": "        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);",
                "newContent": "        PreviewScheduleParams previewScheduleParams = new PreviewScheduleParams()\n                .withLoginUser(loginUser)\n                .withSchedule(schedule);\n        Map<String, Object> result = schedulerService.previewSchedule(previewScheduleParams);"
            },
            {
                "fromLine": 302,
                "toLine": 313,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "        UpdateScheduleByWorkflowDefinitionCodeParams updateScheduleByWorkflowDefinitionCodeParams = new UpdateScheduleByWorkflowDefinitionCodeParams()\n                .withLoginUser(loginUser)\n                .withProjectCode(projectCode)\n                .withWorkflowDefinitionCode(workflowDefinitionCode)\n                .withSchedule(schedule)\n                .withWarningType(warningType)\n                .withWarningGroupId(warningGroupId)\n                .withFailureStrategy(failureStrategy)\n                .withWorkflowInstancePriority(workflowInstancePriority)\n                .withWorkerGroup(workerGroup)\n                .withTenantCode(tenantCode)\n                .withEnvironmentCode(environmentCode);\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(updateScheduleByWorkflowDefinitionCodeParams);"
            }
        ]
    },
    "extractedClasses": {
        "StartWorkflowInstanceParams.java": "public class StartWorkflowInstanceParams {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // getters and setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);\n        return params;\n    }\n}",
        "QueryExecutingWorkflowParams.java": "public class QueryExecutingWorkflowParams {\n    private User loginUser;\n    private long projectCode;\n    private long workflowInstanceCode;\n    private String sessionId;\n\n    // getters and setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"id\", workflowInstanceCode);\n        return params;\n    }\n\n    public String getSessionId() {\n        return sessionId;\n    }\n}",
        "ExecuteWorkflowParams.java": "public class ExecuteWorkflowParams {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // getters and setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);\n        return params;\n    }\n}",
        "ExecuteTaskParams.java": "public class ExecuteTaskParams {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private String startNodeList;\n    private TaskDependType taskDependType;\n\n    // getters and setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        return params;\n    }\n}",
        "WorkflowInstanceListPagingParams.java": "public class WorkflowInstanceListPagingParams {\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // getters and setters\n}",
        "WorkflowInstanceStateParams.java": "public class WorkflowInstanceStateParams {\n    private Date startTime;\n    private Date endTime;\n    private Collection<Long> projectCodes;\n\n    // getters and setters\n}",
        "WorkflowInstanceListV2PagingParams.java": "public class WorkflowInstanceListV2PagingParams {\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String name;\n    private String startTime;\n    private String endTime;\n    private Integer state;\n    private String host;\n\n    // getters and setters\n}",
        "InstanceStateV2Params.java": "public class InstanceStateV2Params {\n    private Date startTime;\n    private Date endTime;\n    private Long projectCode;\n    private Long workflowCode;\n    private Integer model;\n    private Set<Integer> projectIds;\n\n    // getters and setters\n}",
        "TaskInstanceInitParams.java": "public class TaskInstanceInitParams {\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // getters and setters\n}",
        "CreateProjectParameterParams.java": "public class CreateProjectParameterParams {\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // getters and setters\n\n    public CreateProjectParameterParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "UpdateProjectParameterParams.java": "public class UpdateProjectParameterParams {\n    private User loginUser;\n    private long projectCode;\n    private long code;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // getters and setters\n\n    public UpdateProjectParameterParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "DeleteProjectParametersByCodeParams.java": "public class DeleteProjectParametersByCodeParams {\n    private User loginUser;\n    private long projectCode;\n    private long code;\n\n    // getters and setters\n\n    public DeleteProjectParametersByCodeParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "BatchDeleteProjectParametersByCodesParams.java": "public class BatchDeleteProjectParametersByCodesParams {\n    private User loginUser;\n    private long projectCode;\n    private String codes;\n\n    // getters and setters\n\n    public BatchDeleteProjectParametersByCodesParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\
{
    "refactorings": {
        "BatchDeleteProjectParametersByCodesParams.java": "    return this;\n    }\n\n    // toMap method if needed\n}",
        "QueryProjectParameterListPagingParams.java": "public class QueryProjectParameterListPagingParams {\n    private User loginUser;\n    private long projectCode;\n    private Integer pageSize;\n    private Integer pageNo;\n    private String searchVal;\n    private String projectParameterDataType;\n\n    // getters and setters\n\n    public QueryProjectParameterListPagingParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "QueryProjectParameterByCodeParams.java": "public class QueryProjectParameterByCodeParams {\n    private User loginUser;\n    private long projectCode;\n    private long code;\n\n    // getters and setters\n\n    public QueryProjectParameterByCodeParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "CreateScheduleParams.java": "public class CreateScheduleParams {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // getters and setters\n\n    public CreateScheduleParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "UpdateScheduleParams.java": "public class UpdateScheduleParams {\n    private User loginUser;\n    private long projectCode;\n    private Integer id;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // getters and setters\n\n    public UpdateScheduleParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "QueryScheduleListPagingParams.java": "public class QueryScheduleListPagingParams {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String searchVal;\n    private Integer pageNo;\n    private Integer pageSize;\n\n    // getters and setters\n\n    public QueryScheduleListPagingParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "DeleteScheduleByIdParams.java": "public class DeleteScheduleByIdParams {\n    private User loginUser;\n    private Integer id;\n\n    // getters and setters\n\n    public DeleteScheduleByIdParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "QueryScheduleListParams.java": "public class QueryScheduleListParams {\n    private User loginUser;\n    private long projectCode;\n\n    // getters and setters\n\n    public QueryScheduleListParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "PreviewScheduleParams.java": "public class PreviewScheduleParams {\n    private User loginUser;\n    private String schedule;\n\n    // getters and setters\n\n    public PreviewScheduleParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}",
        "UpdateScheduleByWorkflowDefinitionCodeParams.java": "public class UpdateScheduleByWorkflowDefinitionCodeParams {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private long environmentCode;\n\n    // getters and setters\n\n    public UpdateScheduleByWorkflowDefinitionCodeParams withLoginUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    // toMap method if needed\n}"
    }
}