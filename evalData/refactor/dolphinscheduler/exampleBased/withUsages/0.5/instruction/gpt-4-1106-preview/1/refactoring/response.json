
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 38,
                "toLine": 38,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,",
                "newContent": "public HttpResponse startWorkflowInstance(ExecutionParameters executionParameters,"
            },
            {
                "fromLine": 39,
                "toLine": 41,
                "oldContent": "                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,",
                "newContent": "                                              long projectCode,"
            },
            {
                "fromLine": 42,
                "toLine": 44,
                "oldContent": "                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "                                              ) {\n        Map<String, Object> params = new HashMap<>();"
            },
            {
                "fromLine": 45,
                "toLine": 49,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        params.put(\"loginUser\", executionParameters.getLoginUser());\n        params.put(\"workflowDefinitionCode\", executionParameters.getWorkflowDefinitionCode());\n        params.put(\"scheduleTime\", executionParameters.getScheduleTime());\n        params.put(\"failureStrategy\", executionParameters.getFailureStrategy());\n        params.put(\"warningType\", executionParameters.getWarningType());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 235,
                "toLine": 235,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(WorkflowInstanceQueryCondition condition,"
            },
            {
                "fromLine": 236,
                "toLine": 244,
                "oldContent": "                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "                                                            );"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 99,
                "toLine": 99,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {",
                "newContent": "    public void init(InitializationParameters initParams) {"
            },
            {
                "fromLine": 100,
                "toLine": 102,
                "oldContent": "        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;",
                "newContent": "        this.host = initParams.getHost();\n        this.startTime = initParams.getStartTime();\n        this.executePath = initParams.getExecutePath();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 14,
                "toLine": 14,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,",
                "newContent": "    Result createProjectParameter(ProjectParameterRequest parameterRequest,"
            },
            {
                "fromLine": 15,
                "toLine": 16,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "                                  );"
            },
            {
                "fromLine": 18,
                "toLine": 18,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
                "newContent": "    Result updateProjectParameter(ProjectParameterRequest parameterRequest,"
            },
            {
                "fromLine": 19,
                "toLine": 20,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "                                  );"
            },
            {
                "fromLine": 22,
                "toLine": 22,
                "oldContent": "    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result deleteProjectParametersByCode(ProjectParameterRequest parameterRequest);"
            },
            {
                "fromLine": 24,
                "toLine": 24,
                "oldContent": "    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
                "newContent": "    Result batchDeleteProjectParametersByCodes(ProjectParameterRequest parameterRequest);"
            },
            {
                "fromLine": 26,
                "toLine": 26,
                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,",
                "newContent": "    Result queryProjectParameterListPaging(ProjectParameterQuery query);"
            },
            {
                "fromLine": 27,
                "toLine": 28,
                "oldContent": "                                           String searchVal, String projectParameterDataType);",
                "newContent": "                                           "
            },
            {
                "fromLine": 30,
                "toLine": 30,
                "oldContent": "    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result queryProjectParameterByCode(ProjectParameterQuery query);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, projectParameterName,"
            },
            {
                "fromLine": 65,
                "toLine": 66,
                "oldContent": "                projectParameterValue, projectParameterDataType);",
                "newContent": "                projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(parameterRequest);"
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, code, projectParameterName,"
            },
            {
                "fromLine": 79,
                "toLine": 80,
                "oldContent": "                projectParameterValue, projectParameterDataType);",
                "newContent": "                projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(parameterRequest);"
            },
            {
                "fromLine": 91,
                "toLine": 91,
                "oldContent": "        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, code);\n        return projectParameterService.deleteProjectParametersByCode(parameterRequest);"
            },
            {
                "fromLine": 102,
                "toLine": 102,
                "oldContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, codes);\n        return projectParameterService.batchDeleteProjectParametersByCodes(parameterRequest);"
            },
            {
                "fromLine": 114,
                "toLine": 114,
                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(loginUser, projectCode, pageSize, pageNo, searchVal, projectParameterDataType);\n        return projectParameterService.queryProjectParameterListPaging(query);"
            },
            {
                "fromLine": 115,
                "toLine": 116,
                "oldContent": "                searchVal, projectParameterDataType);",
                "newContent": "                "
            },
            {
                "fromLine": 127,
                "toLine": 127,
                "oldContent": "        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(loginUser, projectCode, code);\n        return projectParameterService.queryProjectParameterByCode(query);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 25,
                "toLine": 25,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, \"key\", \"value\", DataType.VARCHAR.name());\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(),"
            },
            {
                "fromLine": 26,
                "toLine": 27,
                "oldContent": "                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.any())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 28,
                "toLine": 28,
                "oldContent": "        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",",
                "newContent": "        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\","
            },
            {
                "fromLine": 29,
                "toLine": 30,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name());"
            },
            {
                "fromLine": 36,
                "toLine": 36,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, 1L, \"key\", \"value\", DataType.LONG.name());\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(),"
            },
            {
                "fromLine": 37,
                "toLine": 38,
                "oldContent": "                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.any())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 39,
                "toLine": 39,
                "oldContent": "        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",",
                "newContent": "        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\","
            },
            {
                "fromLine": 40,
                "toLine": 41,
                "oldContent": "                DataType.LONG.name());",
                "newContent": "                DataType.LONG.name());"
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, 1);\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(),"
            },
            {
                "fromLine": 48,
                "toLine": 49,
                "oldContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 50,
                "toLine": 50,
                "oldContent": "        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);",
                "newContent": "        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);"
            },
            {
                "fromLine": 56,
                "toLine": 56,
                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(getGeneralUser(), 1, \"1\");\n        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(),"
            },
            {
                "fromLine": 57,
                "toLine": 58,
                "oldContent": "                Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.any())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 59,
                "toLine": 59,
                "oldContent": "        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");",
                "newContent": "        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");"
            },
            {
                "fromLine": 65,
                "toLine": 65,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(getGeneralUser(), 1, 10, 1, \"1\", DataType.VARCHAR.name());\n        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(),"
            },
            {
                "fromLine": 66,
                "toLine": 67,
                "oldContent": "                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",",
                "newContent": "        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\","
            },
            {
                "fromLine": 69,
                "toLine": 70,
                "oldContent": "                DataType.VARCHAR.name(), 1, 10);",
                "newContent": "                DataType.VARCHAR.name(), 1, 10);"
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(getGeneralUser(), 1, 1);\n        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(),"
            },
            {
                "fromLine": 77,
                "toLine": 78,
                "oldContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);",
                "newContent": "        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\","
            },
            {
                "fromLine": 54,
                "toLine": 55,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(parameterRequest);"
            },
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\","
            },
            {
                "fromLine": 71,
                "toLine": 72,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(parameterRequest);"
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, 1);\n        Result result = projectParameterService.deleteProjectParametersByCode(parameterRequest);"
            },
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(loginUser, projectCode, 1);\n        Result result
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(loginUser, projectCode, 1);\n        Result result = projectParameterService.queryProjectParameterByCode(query);"
            },
            {
                "fromLine": 110,
                "toLine": 110,
                "oldContent": "        Result result =",
                "newContent": "        ProjectParameterQuery query = new ProjectParameterQuery(loginUser, projectCode, pageSize, pageNo, null, DataType.VARCHAR.name());\n        Result result ="
            },
            {
                "fromLine": 111,
                "toLine": 112,
                "oldContent": "                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "                projectParameterService.queryProjectParameterListPaging(query);"
            },
            {
                "fromLine": 113,
                "toLine": 114,
                "oldContent": "                        DataType.VARCHAR.name());",
                "newContent": ""
            },
            {
                "fromLine": 120,
                "toLine": 121,
                "oldContent": "        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,",
                "newContent": "        ProjectParameterRequest parameterRequest = new ProjectParameterRequest(loginUser, projectCode, \"1,2\");\n        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,"
            },
            {
                "fromLine": 122,
                "toLine": 123,
                "oldContent": "                () -> projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1,2\"));",
                "newContent": "                () -> projectParameterService.batchDeleteProjectParametersByCodes(parameterRequest));"
            },
            {
                "fromLine": 125,
                "toLine": 125,
                "oldContent": "        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1\");",
                "newContent": "        ProjectParameterRequest parameterRequest2 = new ProjectParameterRequest(loginUser, projectCode, \"1\");\n        projectParameterService.batchDeleteProjectParametersByCodes(parameterRequest2);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 190,
                "toLine": 190,
                "oldContent": "                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,",
                "newContent": "                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,"
            },
            {
                "fromLine": 191,
                "toLine": 191,
                "oldContent": "                                 @RequestParam(value = \"schedule\") String schedule,",
                "newContent": "                                 @RequestParam(value = \"schedule\") String schedule,"
            },
            {
                "fromLine": 192,
                "toLine": 192,
                "oldContent": "                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,",
                "newContent": "                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,"
            },
            {
                "fromLine": 193,
                "toLine": 193,
                "oldContent": "                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,",
                "newContent": "                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,"
            },
            {
                "fromLine": 194,
                "toLine": 194,
                "oldContent": "                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,",
                "newContent": "                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,"
            },
            {
                "fromLine": 195,
                "toLine": 195,
                "oldContent": "                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,",
                "newContent": "                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,"
            },
            {
                "fromLine": 196,
                "toLine": 196,
                "oldContent": "                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,",
                "newContent": "                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,"
            },
            {
                "fromLine": 197,
                "toLine": 197,
                "oldContent": "                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,",
                "newContent": "                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,"
            },
            {
                "fromLine": 198,
                "toLine": 198,
                "oldContent": "                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
                "newContent": "                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {"
            },
            {
                "fromLine": 199,
                "toLine": 199,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(",
                "newContent": "        ScheduleCreateRequest createRequest = new ScheduleCreateRequest(loginUser, projectCode, workflowDefinitionCode, schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.insertSchedule("
            },
            {
                "fromLine": 200,
                "toLine": 200,
                "oldContent": "                loginUser,",
                "newContent": "                createRequest,"
            },
            {
                "fromLine": 201,
                "toLine": 206,
                "oldContent": "                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,",
                "newContent": ""
            },
            {
                "fromLine": 207,
                "toLine": 211,
                "oldContent": "                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n",
                "newContent": ""
            },
            {
                "fromLine": 212,
                "toLine": 212,
                "oldContent": "        return returnDataList(result);",
                "newContent": "        return returnDataList(result);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 19,
                "toLine": 19,
                "oldContent": "    public void setAlertGroupId(Integer alertGroupId) {",
                "newContent": "    public void setAlertGroupId(Integer alertGroupId) {"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 28,
                "toLine": 28,
                "oldContent": "    private String title;",
                "newContent": "    private String title;"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ExecutionParameters {\n\n    private User loginUser;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceQueryCondition.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Date;\n\npublic class WorkflowInstanceQueryCondition {\n\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/dao/entity/InitializationParameters.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class InitializationParameters {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterRequest.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterRequest {\n\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n    private long code;\n    private String codes;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterQuery.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterQuery {\n\n    private User loginUser;\n    private long projectCode;\n    private Integer pageSize;\n    private Integer pageNo;\n    private String searchVal;\n    private String projectParameterDataType;\n    private long code;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/api/controller/ScheduleCreateRequest.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ScheduleCreateRequest {\n\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // getters and setters\n}"
    }
}