messages:
[
	content:"
	
	I will provide you one or more Java code files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.test.pages.workflow;
	
	import org.apache.dolphinscheduler.api.enums.ExecuteType;
	import org.apache.dolphinscheduler.api.test.core.Constants;
	import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
	import org.apache.dolphinscheduler.api.test.utils.RequestClient;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	@AllArgsConstructor
	public class ExecutorPage {
	
	    private String sessionId;
	
	    public HttpResponse startWorkflowInstance(User loginUser,
	                                              long projectCode,
	                                              long workflowDefinitionCode,
	                                              String scheduleTime,
	                                              FailureStrategy failureStrategy,
	                                              WarningType warningType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowDefinitionCode", workflowDefinitionCode);
	        params.put("scheduleTime", scheduleTime);
	        params.put("failureStrategy", failureStrategy);
	        params.put("warningType", warningType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/start-workflow-instance", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("id", workflowInstanceCode);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
	        return requestClient.get(url, headers, params);
	    }
	
	    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("projectCode", projectCode);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("executeType", executeType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
	                                    TaskDependType taskDependType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("startNodeList", startNodeList);
	        params.put("taskDependType", taskDependType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute-task", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param("projectCode") Long projectCode,
	                                                            @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                            @Param("searchVal") String searchVal,
	                                                            @Param("executorName") String executorName,
	                                                            @Param("states") int[] statusArray,
	                                                            @Param("host") String host,
	                                                            @Param("startTime") Date startTime,
	                                                            @Param("endTime") Date endTime);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(String host, Date startTime, String executePath) {
	        this.host = host;
	        this.startTime = startTime;
	        this.executePath = executePath;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	public interface ProjectParameterService {
	
	    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);
	
	    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);
	
	    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,
	                                           String searchVal, String projectParameterDataType);
	
	    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;
	
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.ProjectParameterService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.constants.Constants;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	@Tag(name = "PROJECT_PARAMETER_TAG")
	@RestController
	@RequestMapping("projects/{projectCode}/project-parameter")
	@Slf4j
	public class ProjectParameterController extends BaseController {
	
	    @Autowired
	    private ProjectParameterService projectParameterService;
	
	    @Operation(summary = "createProjectParameter", description = "CREATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)
	    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType", defaultValue = "VARCHAR") String projectParameterDataType) {
	        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "updateProjectParameter", description = "UPDATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456")),
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PutMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)
	    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @PathVariable("code") Long code,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType") String projectParameterDataType) {
	        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "deleteProjectParametersByCode", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                @RequestParam("code") long code) {
	
	        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);
	    }
	
	    @Operation(summary = "batchDeleteProjectParametersByCodes", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "codes", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/batch-delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                      @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                      @RequestParam("codes") String codes) {
	
	        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);
	    }
	
	    @Operation(summary = "queryProjectParameterListPaging", description = "QUERY_PROJECT_PARAMETER_LIST_PAGING_NOTES")
	    @Parameters({
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", required = false, schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", required = true, schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", required = true, schema = @Schema(implementation = int.class, example = "10"))
	    })
	    @GetMapping()
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterListPaging(
	                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                  @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                  @RequestParam(value = "searchVal", required = false) String searchVal,
	                                                  @RequestParam(value = "projectParameterDataType", required = false) String projectParameterDataType,
	                                                  @RequestParam("pageNo") Integer pageNo,
	                                                  @RequestParam("pageSize") Integer pageSize) {
	
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                searchVal, projectParameterDataType);
	    }
	
	    @Operation(summary = "queryProjectParameterByCode", description = "QUERY_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456"))
	    })
	    @GetMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                              @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                              @PathVariable("code") long code) {
	        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.UserType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import org.junit.jupiter.api.Assertions;
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterControllerTest {
	
	    @InjectMocks
	    private ProjectParameterController projectParameterController;
	
	    @Mock
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),
	                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.createProjectParameter(loginUser, 1, "key", "value",
	                DataType.VARCHAR.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),
	                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, "key", "value",
	                DataType.LONG.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),
	                Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, "1");
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, "1",
	                DataType.VARCHAR.name(), 1, 10);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    private User getGeneralUser() {
	        User loginUser = new User();
	        loginUser.setUserType(UserType.GENERAL_USER);
	        loginUser.setUserName("userName");
	        loginUser.setId(1);
	        return loginUser;
	    }
	
	    private Result getSuccessResult() {
	        Result result = new Result();
	        result.setCode(Status.SUCCESS.getCode());
	        result.setMsg(Status.SUCCESS.getMsg());
	        return result;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;
	import static org.junit.jupiter.api.Assertions.assertEquals;
	import static org.junit.jupiter.api.Assertions.assertNotNull;
	import static org.junit.jupiter.api.Assertions.assertNull;
	import static org.mockito.ArgumentMatchers.any;
	import static org.mockito.ArgumentMatchers.anyLong;
	import static org.mockito.Mockito.when;
	
	import org.apache.dolphinscheduler.api.AssertionsHelper;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
	import org.apache.dolphinscheduler.dao.entity.Project;
	import org.apache.dolphinscheduler.dao.entity.ProjectParameter;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
	import org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import java.util.Collections;
	
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.MockedStatic;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterServiceTest {
	
	    @InjectMocks
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Mock
	    private ProjectMapper projectMapper;
	
	    @Mock
	    private ProjectParameterMapper projectParameterMapper;
	
	    @Mock
	    private ProjectServiceImpl projectService;
	
	    protected final static long projectCode = 1L;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // PERMISSION DENIED
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	
	        // CODE GENERATION ERROR
	        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {
	            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);
	
	            result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                    DataType.VARCHAR.name());
	            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	        }
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // INSERT DATA ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_UPDATE_ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.LONG.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	        ProjectParameter projectParameter = (ProjectParameter) result.getData();
	        assertNotNull(projectParameter.getOperator());
	        assertNotNull(projectParameter.getUpdateTime());
	        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // DATABASE OPERATION ERROR
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(-1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.DELETE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any())).thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	        Integer pageSize = 10;
	        Integer pageNo = 1;
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result =
	                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,
	                        DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // SUCCESS
	        when(projectService.hasProjectAndPerm(any(), any(), any(Result.class), any()))
	                .thenReturn(true);
	
	        Page<ProjectParameter> page = new Page<>(pageNo, pageSize);
	        page.setRecords(Collections.singletonList(getProjectParameter()));
	
	        when(projectParameterMapper.queryProjectParameterListPaging(any(), anyLong(), any(), any(), any()))
	                .thenReturn(page);
	        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                null, null);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Result result = projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "");
	        assertEquals(Status.PROJECT_PARAMETER_CODE_EMPTY.getCode(), result.getCode());
	
	        when(projectParameterMapper.queryByCodes(any())).thenReturn(Collections.singletonList(getProjectParameter()));
	
	        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,
	                () -> projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1,2"));
	
	        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1");
	    }
	
	    private Project getProject(long projectCode) {
	        Project project = new Project();
	        project.setCode(projectCode);
	        project.setId(1);
	        project.setName("test");
	        project.setUserId(1);
	        return project;
	    }
	
	    private ProjectParameter getProjectParameter() {
	        ProjectParameter projectParameter = new ProjectParameter();
	        projectParameter.setId(1);
	        projectParameter.setCode(1);
	        projectParameter.setProjectCode(1);
	        projectParameter.setParamName("key");
	        projectParameter.setParamValue("value");
	        return projectParameter;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;
	
	import org.apache.dolphinscheduler.api.audit.OperatorLog;
	import org.apache.dolphinscheduler.api.audit.enums.AuditType;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.SchedulerService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import java.util.Map;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	/**
	 * scheduler controller
	 */
	@Tag(name = "SCHEDULE_TAG")
	@RestController
	@RequestMapping("/projects/{projectCode}/schedules")
	public class SchedulerController extends BaseController {
	
	    public static final String DEFAULT_WARNING_TYPE = "NONE";
	    public static final String DEFAULT_NOTIFY_GROUP_ID = "1";
	    public static final String DEFAULT_FAILURE_POLICY = "CONTINUE";
	    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = "MEDIUM";
	
	    @Autowired
	    private SchedulerService schedulerService;
	
	    /**
	     * create schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workflowInstancePriority workflow instance priority
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @return create result code
	     */
	    @Operation(summary = "createSchedule", description = "CREATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)
	    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @RequestParam(value = "workflowDefinitionCode") long workflowDefinitionCode,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.insertSchedule(
	                loginUser,
	                projectCode,
	                workflowDefinitionCode,
	                schedule,
	                warningType,
	                warningGroupId,
	                failureStrategy,
	                workflowInstancePriority,
	                workerGroup,
	                tenantCode,
	                environmentCode);
	
	        return returnDataList(result);
	    }
	
	    /**
	     * updateWorkflowInstance schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id scheduler id
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateSchedule", description = "UPDATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @PathVariable(value = "id") Integer id,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	
	        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	
	    @Operation(summary = "online", description = "ONLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/online")
	    @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)
	    public Result<Boolean> publishScheduleOnline(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                 @PathVariable("id") Integer id) {
	        schedulerService.onlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    @Operation(summary = "offline", description = "OFFLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/offline")
	    @ApiException(OFFLINE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)
	    public Result<Boolean> offlineSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                           @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                           @PathVariable("id") Integer id) {
	        schedulerService.offlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    /**
	     * query schedule list paging
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param pageNo page number
	     * @param pageSize page size
	     * @param searchVal search value
	     * @return schedule list page
	     */
	    @Operation(summary = "queryScheduleListPaging", description = "QUERY_SCHEDULE_LIST_PAGING_NOTES")
	    @Parameters({
	
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", schema = @Schema(implementation = int.class, example = "20"))
	    })
	    @GetMapping()
	    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)
	    public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                          @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                          @RequestParam(value = "workflowDefinitionCode", required = false, defaultValue = "0") long workflowDefinitionCode,
	                                          @RequestParam(value = "searchVal", required = false) String searchVal,
	                                          @RequestParam("pageNo") Integer pageNo,
	                                          @RequestParam("pageSize") Integer pageSize) {
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,
	                pageSize);
	
	    }
	
	    /**
	     * delete schedule by id
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id schedule id
	     * @return delete result code
	     */
	    @Operation(summary = "deleteScheduleById", description = "DELETE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @DeleteMapping(value = "/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_SCHEDULE_BY_ID_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)
	    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,
	                                     @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                     @PathVariable("id") Integer id) {
	        schedulerService.deleteSchedulesById(loginUser, id);
	        return new Result(Status.SUCCESS);
	    }
	
	    /**
	     * query schedule list
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @return schedule list
	     */
	    @Operation(summary = "queryScheduleList", description = "QUERY_SCHEDULE_LIST_NOTES")
	    @PostMapping("/list")
	    @ApiException(QUERY_SCHEDULE_LIST_ERROR)
	    public Result queryScheduleList(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                    @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
	        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);
	        return returnDataList(result);
	    }
	
	    /**
	     * preview schedule
	     *
	     * @param loginUser login user
	     * @param schedule schedule expression
	     * @return the next five fire time
	     */
	    @Operation(summary = "previewSchedule", description = "PREVIEW_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	    })
	    @PostMapping("/preview")
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(PREVIEW_SCHEDULE_ERROR)
	    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                  @RequestParam(value = "schedule") String schedule) {
	        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);
	        return returnDataList(result);
	    }
	
	    /**
	     * update workflow definition schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateScheduleByWorkflowDefinitionCode", description = "UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "12345678")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/update/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                         @PathVariable(value = "code") long workflowDefinitionCode,
	                                                         @RequestParam(value = "schedule") String schedule,
	                                                         @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                                         @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
	                                                         @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                                         @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                                         @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                                         @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") long environmentCode,
	                                                         @RequestParam(value = "workflowInstancePriority", required = false) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,
	                workflowDefinitionCode, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private Integer alertGroupId;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroupId;
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroupId = alertGroupId;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.AlertStatus;
	import org.apache.dolphinscheduler.common.enums.AlertType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@Builder
	@NoArgsConstructor
	@AllArgsConstructor
	@TableName("t_ds_alert")
	public class Alert {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    @TableField(value = "sign")
	    private String sign;
	
	    @TableField(value = "title")
	    private String title;
	
	    @TableField(value = "content")
	    private String content;
	
	    @TableField(value = "alert_status")
	    private AlertStatus alertStatus;
	
	    @TableField(value = "warning_type")
	    private WarningType warningType;
	
	    @TableField(value = "log")
	    private String log;
	
	    @TableField("alertgroup_id")
	    private Integer alertGroupId;
	
	    @TableField("create_time")
	    private Date createTime;
	
	    @TableField("update_time")
	    private Date updateTime;
	
	    @TableField("project_code")
	    private Long projectCode;
	
	    @TableField("workflow_definition_code")
	    private Long workflowDefinitionCode;
	
	    @TableField("workflow_instance_id")
	    private Integer workflowInstanceId;
	
	    @TableField("alert_type")
	    private AlertType alertType;
	
	    @TableField(exist = false)
	    private Map<String, Object> info = new HashMap<>();
	
	}
		
",
	role:"
	user	
",
,
	content:"
	
	{
	    "refactorings": {
	        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
	            {
	                "fromLine": 36,
	                "toLine": 42,
	                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,
	                                              long projectCode,
	                                              long workflowDefinitionCode,
	                                              String scheduleTime,
	                                              FailureStrategy failureStrategy,
	                                              WarningType warningType) {",
	                "newContent": "public HttpResponse startWorkflowInstance(User loginUser,
	                                              long projectCode,
	                                              WorkflowInstanceRequest workflowInstanceRequest) {"
	            },
	            {
	                "fromLine": 44,
	                "toLine": 50,
	                "oldContent": "        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);
	        params.put(\"scheduleTime\", scheduleTime);
	        params.put(\"failureStrategy\", failureStrategy);
	        params.put(\"warningType\", warningType);",
	                "newContent": "        params.put(\"workflowDefinitionCode\", workflowInstanceRequest.getWorkflowDefinitionCode());
	        params.put(\"scheduleTime\", workflowInstanceRequest.getScheduleTime());
	        params.put(\"failureStrategy\", workflowInstanceRequest.getFailureStrategy());
	        params.put(\"warningType\", workflowInstanceRequest.getWarningType());"
	            },
	            {
	                "fromLine": 71,
	                "toLine": 77,
	                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
	                                    TaskDependType taskDependType) {",
	                "newContent": "public HttpResponse executeTask(User loginUser, long projectCode, TaskExecutionRequest taskExecutionRequest) {"
	            },
	            {
	                "fromLine": 79,
	                "toLine": 83,
	                "oldContent": "        params.put(\"workflowInstanceId\", workflowInstanceId);
	        params.put(\"startNodeList\", startNodeList);
	        params.put(\"taskDependType\", taskDependType);",
	                "newContent": "        params.put(\"workflowInstanceId\", taskExecutionRequest.getWorkflowInstanceId());
	        params.put(\"startNodeList\", taskExecutionRequest.getStartNodeList());
	        params.put(\"taskDependType\", taskExecutionRequest.getTaskDependType());"
	            }
	        ],
	        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
	            {
	                "fromLine": 88,
	                "toLine": 102,
	                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param(\"projectCode\") Long projectCode,
	                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,
	                                                            @Param(\"searchVal\") String searchVal,
	                                                            @Param(\"executorName\") String executorName,
	                                                            @Param(\"states\") int[] statusArray,
	                                                            @Param(\"host\") String host,
	                                                            @Param(\"startTime\") Date startTime,
	                                                            @Param(\"endTime\") Date endTime);",
	                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param(\"projectCode\") Long projectCode,
	                                                            WorkflowInstanceQuery workflowInstanceQuery);"
	            },
	            {
	                "fromLine": 104,
	                "toLine": 105,
	                "oldContent": "    int setFailoverByHostAndStateArray(@Param(\"host\") String host,
	                                       @Param(\"states\") int[] stateArray);",
	                "newContent": "    int setFailoverByHostAndStateArray(FailoverStateQuery failoverStateQuery);"
	            },
	            {
	                "fromLine": 107,
	                "toLine": 108,
	                "oldContent": "    int updateWorkflowInstanceState(
	                                    @Param(\"workflowInstanceId\") Integer workflowInstanceId,",
	                "newContent": "    int updateWorkflowInstanceState(WorkflowInstanceUpdateState workflowInstanceUpdateState,"
	            },
	            {
	                "fromLine": 110,
	                "toLine": 110,
	                "oldContent": "                                    @Param(\"originState\") WorkflowExecutionStatus originState,",
	                "newContent": "                                    WorkflowExecutionStatus originState,"
	            },
	            {
	                "fromLine": 111,
	                "toLine": 111,
	                "oldContent": "                                    @Param(\"targetState\") WorkflowExecutionStatus targetState);",
	                "newContent": "                                    WorkflowExecutionStatus targetState);"
	            },
	            {
	                "fromLine": 113,
	                "toLine": 114,
	                "oldContent": "    int updateWorkflowInstanceByTenantCode(@Param(\"originTenantCode\") String originTenantCode,
	                                           @Param(\"destTenantCode\") String destTenantCode);",
	                "newContent": "    int updateWorkflowInstanceByTenantCode(TenantCodeUpdate tenantCodeUpdate);"
	            },
	            {
	                "fromLine": 116,
	                "toLine": 117,
	                "oldContent": "    int updateWorkflowInstanceByWorkerGroupName(@Param(\"originWorkerGroupName\") String originWorkerGroupName,
	                                                @Param(\"destWorkerGroupName\") String destWorkerGroupName);",
	                "newContent": "    int updateWorkflowInstanceByWorkerGroupName(WorkerGroupNameUpdate workerGroupNameUpdate);"
	            },
	            {
	                "fromLine": 119,
	                "toLine": 124,
	                "oldContent": "    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param(\"startTime\") Date startTime,
	                                                                                  @Param(\"endTime\") Date endTime,
	                                                                                  @Param(\"projectCodes\") Collection<Long> projectCodes);",
	                "newContent": "    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceCountQuery workflowInstanceCountQuery);"
	            },
	            {
	                "fromLine": 126,
	                "toLine": 127,
	                "oldContent": "    WorkflowInstance queryLastSchedulerWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,",
	                "newContent": "    WorkflowInstance queryLastSchedulerWorkflow(WorkflowInstanceQuery workflowInstanceQuery,"
	            },
	            {
	                "fromLine": 128,
	                "toLine": 128,
	                "oldContent": "                                                @Param(\"taskDefinitionCode\") Long taskDefinitionCode,",
	                "newContent": "                                                Long taskDefinitionCode,"
	            },
	            {
	                "fromLine": 129,
	                "toLine": 129,
	                "oldContent": "                                                @Param(\"startTime\") Date startTime,",
	                "newContent": "                                                Date startTime,"
	            },
	            {
	                "fromLine": 130,
	                "toLine": 130,
	                "oldContent": "                                                @Param(\"endTime\") Date endTime,",
	                "newContent": "                                                Date endTime,"
	            },
	            {
	                "fromLine": 131,
	                "toLine": 131,
	                "oldContent": "                                                @Param(\"testFlag\") int testFlag);",
	                "newContent": "                                                int testFlag);"
	            },
	            {
	                "fromLine": 133,
	                "toLine": 134,
	                "oldContent": "    WorkflowInstance queryLastManualWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,",
	                "newContent": "    WorkflowInstance queryLastManualWorkflow(WorkflowInstanceQuery workflowInstanceQuery,"
	            },
	            {
	                "fromLine": 135,
	                "toLine": 135,
	                "oldContent": "                                             @Param(\"taskCode\") Long taskCode,",
	                "newContent": "                                             Long taskCode,"
	            },
	            {
	                "fromLine": 136,
	                "toLine": 136,
	                "oldContent": "                                             @Param(\"startTime\") Date startTime,",
	                "newContent": "                                             Date startTime,"
	            },
	            {
	                "fromLine": 137,
	                "toLine": 137,
	                "oldContent": "                                             @Param(\"endTime\") Date endTime,",
	                "newContent": "                                             Date endTime,"
	            },
	            {
	                "fromLine": 138,
	                "toLine": 138,
	                "oldContent": "                                             @Param(\"testFlag\") int testFlag);",
	                "newContent": "                                             int testFlag);"
	            },
	            {
	                "fromLine": 140,
	                "toLine": 140,
	                "oldContent": "    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode);",
	                "newContent": "    WorkflowInstance queryFirstScheduleWorkflowInstance(Long workflowDefinitionCode);"
	            },
	            {
	                "fromLine": 142,
	                "toLine": 142,
	                "oldContent": "    WorkflowInstance queryFirstStartWorkflowInstance(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode);",
	                "newContent": "    WorkflowInstance queryFirstStartWorkflowInstance(Long workflowDefinitionCode);"
	            },
	            {
	                "fromLine": 144,
	                "toLine": 149,
	                "oldContent": "    List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\"size\") int size,
	                                                     @Param(\"startTime\") Date startTime,
	                                                     @Param(\"endTime\") Date endTime,
	                                                     @Param(\"status\") WorkflowExecutionStatus status,
	                                                     @Param(\"projectCode\") long projectCode);",
	                "newContent": "    List<WorkflowInstance> queryTopNWorkflowInstance(WorkflowInstanceTopQuery workflowInstanceTopQuery);"
	            },
	            {
	                "fromLine": 151,
	                "toLine": 152,
	                "oldContent": "    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,",
	                "newContent": "    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(WorkflowInstanceQuery workflowInstanceQuery,"
	            },
	            {
	                "fromLine": 153,
	                "toLine": 153,
	                "oldContent": "                                                                  @Param(\"states\") int[] states);",
	                "newContent": "                                                                  int[] states);"
	            },
	            {
	                "fromLine": 155,
	                "toLine": 155,
	                "oldContent": "    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowDefinitionCode\") long workflowDefinitionCode,",
	                "newContent": "    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery,"
	            },
	            {
	                "fromLine": 156,
	                "toLine": 156,
	                "oldContent": "                                                            @Param(\"workflowDefinitionVersion\") int workflowDefinitionVersion,",
	                "newContent": "                                                            int workflowDefinitionVersion,"
	            },
	            {
	                "fromLine": 157,
	                "toLine": 157,
	                "oldContent": "                                                            @Param(\"states\") int[] states);",
	                "newContent": "                                                            int[] states);"
	            },
	            {
	                "fromLine": 159,
	                "toLine": 164,
	                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param(\"projectCode\") Long projectCode,
	                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,
	                                                              @Param(\"name\") String name,
	                                                              @Param(\"startTime\") String startTime,
	                                                              @Param(\"endTime\") String endTime,",
	                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param(\"projectCode\") Long projectCode,
	                                                              WorkflowInstanceQuery workflowInstanceQuery,"
	            },
	            {
	                "fromLine": 165,
	                "toLine": 165,
	                "oldContent": "                                                              @Param(\"state\") Integer state,",
	                "newContent": "                                                              Integer state,"
	            },
	            {
	                "fromLine": 166,
	                "toLine": 166,
	                "oldContent": "                                                              @Param(\"host\") String host);",
	                "newContent": "                                                              String host);"
	            },
	            {
	                "fromLine": 168,
	                "toLine": 174,
	                "oldContent": "    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param(\"startTime\") Date startTime,
	                                                  @Param(\"endTime\") Date endTime,
	                                                  @Param(\"projectCode\") Long projectCode,
	                                                  @Param(\"workflowCode\") Long workflowCode,
	                                                  @Param(\"model\") Integer model,
	                                                  @Param(\"projectIds\") Set<Integer> projectIds);",
	                "newContent": "    List<ExecuteStatusCount> countInstanceStateV2(WorkflowInstanceCountQuery workflowInstanceCountQuery);"
	            }
	        ],
	        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
	            {
	                "fromLine": 109,
	                "toLine": 109,
	                "oldContent": "    public void init(String host, Date startTime, String executePath) {",
	                "newContent": "    public void init(TaskInstanceInit taskInstanceInit) {"
	            },
	            {
	                "fromLine": 110,
	                "toLine": 112,
	                "oldContent": "        this.host = host;
	        this.startTime = startTime;
	        this.executePath = executePath;",
	                "newContent": "        this.host = taskInstanceInit.getHost();
	        this.startTime = taskInstanceInit.getStartTime();
	        this.executePath = taskInstanceInit.getExecutePath();"
	            }
	        ],
	        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
	            {
	                "fromLine": 24,
	                "toLine": 24,
	                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,",
	                "newContent": "    Result createProjectParameter(User loginUser, long projectCode, ProjectParameterRequest projectParameterRequest);"
	            },
	            {
	                "fromLine": 26,
	                "toLine": 26,
	                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
	                "newContent": ""
	            },
	            {
	                "fromLine": 28,
	                "toLine": 28,
	                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
	                "newContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, ProjectParameterRequest projectParameterRequest);"
	            },
	            {
	                "fromLine": 30,
	                "toLine": 30,
	                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
	                "newContent": ""
	            },
	            {
	                "fromLine": 32,
	                "toLine": 32,
	                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,",
	                "newContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, ProjectParameterPagingRequest projectParameterPagingRequest);"
	            },
	            {
	                "fromLine": 34,
	                "toLine": 34,
	                "oldContent": "                                           String searchVal, String projectParameterDataType);",
	                "newContent": ""
	            }
	        ],
	        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
	            {
	                "fromLine": 74,
	                "toLine": 80,
	                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
	                projectParameterValue, projectParameterDataType);",
	                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(projectParameterName, projectParameterValue, projectParameterDataType);
	        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterRequest);"
	            },
	            {
	                "fromLine": 86,
	                "toLine": 92,
	                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
	                projectParameterValue, projectParameterDataType);",
	                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(projectParameterName, projectParameterValue, projectParameterDataType);
	        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterRequest);"
	            },
	            {
	                "fromLine": 130,
	                "toLine": 136,
	                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                searchVal, projectParameterDataType);",
	                "newContent": "        ProjectParameterPagingRequest projectParameterPagingRequest = new ProjectParameterPagingRequest(pageSize, pageNo, searchVal, projectParameterDataType);
	        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, projectParameterPagingRequest);"
	            }
	        ],
	        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
	            {
	                "fromLine": 30,
	                "toLine": 32,
	                "oldContent": "        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",
	                DataType.VARCHAR.name());",
	                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(\"key\", \"value\", DataType.VARCHAR.name());
	        Result result = projectParameterController.createProjectParameter(loginUser, 1, projectParameterRequest);"
	            },
	            {
	                "fromLine": 38,
	                "toLine": 40,
	                "oldContent": "        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",
	                DataType.LONG.name());",
	                "newContent": "        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(\"key\", \"value\", DataType.LONG.name());
	        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, projectParameterRequest);"
	            },
	            {
	                "fromLine": 66,
	                "toLine": 68,
	                "oldContent": "        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",
	                DataType.VARCHAR.name(), 1, 10);",
	                "newContent": "        ProjectParameterPagingRequest projectParameterPagingRequest = new ProjectParameterPagingRequest(10, 1, \"1\", DataType.VARCHAR.name());
	        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, projectParameterPagingRequest);"
	            }
	        ],
	        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
	            {
	                "fromLine": 28,
	                "toLine": 30,
	                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",
	                DataType.VARCHAR.name());",
	                "newContent": "        ProjectParameterRequest projectParameterRequest =	
",
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[143,22] cannot find symbol
	[ERROR]   symbol:   class TaskInstanceInit
	[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.TaskInstance
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[115,61] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[124,40] cannot find symbol
	[ERROR]   symbol:   class FailoverStateQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[129,37] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceUpdateState
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[140,44] cannot find symbol
	[ERROR]   symbol:   class TenantCodeUpdate
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[149,49] cannot find symbol
	[ERROR]   symbol:   class WorkerGroupNameUpdate
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[161,83] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceCountQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[183,49] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[199,46] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[246,67] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[249,61] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[266,63] cannot find symbol
	[ERROR]   symbol:   class WorkflowInstanceQuery
	[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-dao
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(TaskInstanceInit taskInstanceInit) {
	        this.host = taskInstanceInit.getHost();
	        this.startTime = taskInstanceInit.getStartTime();
	        this.executePath = taskInstanceInit.getExecutePath();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param("projectCode") Long projectCode,
	                                                            WorkflowInstanceQuery workflowInstanceQuery);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(FailoverStateQuery failoverStateQuery);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(WorkflowInstanceUpdateState workflowInstanceUpdateState,
	                                    WorkflowExecutionStatus originState,
	                                    WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(TenantCodeUpdate tenantCodeUpdate);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(WorkerGroupNameUpdate workerGroupNameUpdate);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceCountQuery workflowInstanceCountQuery);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(WorkflowInstanceQuery workflowInstanceQuery,
	                                                Long taskDefinitionCode,
	                                                Date startTime,
	                                                Date endTime,
	                                                int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(WorkflowInstanceQuery workflowInstanceQuery,
	                                             Long taskCode,
	                                             Date startTime,
	                                             Date endTime,
	                                             int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     Date startTime,
	                                                     Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(WorkflowInstanceQuery workflowInstanceQuery,
	                                                                  int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery,
	                                                            int workflowDefinitionVersion,
	                                                            int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              WorkflowInstanceQuery workflowInstanceQuery,
	                                                              Integer state,
	                                                              String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  Date startTime,
	                                                  Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.5",
