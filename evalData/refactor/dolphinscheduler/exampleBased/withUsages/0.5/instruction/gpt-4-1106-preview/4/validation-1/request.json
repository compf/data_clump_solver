{
    "messages": [
        {
            "content": "\nI will provide you one or more Java code files.\n\nRefactor all data clumps in the respective files.\nTo do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.\nAlso provide the content of all extracted classes.\nIf possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.\n\n\n Examples of data clump are provided below.\n## Examples\n/* \n    These examples show data clumps and how they might be refactored\n    Imports are missing so these examples would not compile\n*/\n// ### example 5#########################\n//'method parameters to method parameters' data clump\nclass Example1A {\n\n    // both methods share at least 3 parameters, so we can extract those 3\n    // parameters into a class\n\n    public static String buildServiceKey(String path, String group, String version) {\n        int length = path == null ? 0 : path.length();\n        length += group == null ? 0 : group.length();\n        length += version == null ? 0 : version.length();\n        length += 2;\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(group)) {\n            buf.append(group).append('/');\n        }\n        buf.append(path);\n        if (StringUtils.isNotEmpty(version)) {\n            buf.append(':').append(version);\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(String path, String group, String version, String prefix) {\n        return prefix + buildServiceKey(path, group, version);\n    }\n\n}\n\n// ## refactored ##################################\nclass KeyData {\n    private String path;\n    private String group;\n    private String version;\n\n    KeyData(String path, String group, String version) {\n        this.path = path;\n        this.group = group;\n        this.version = version;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public int getLength() {\n        return path == null ? 0\n                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;\n    }\n\n}\n\nclass Example1A {\n\n    public static String buildServiceKey(KeyData keyData) {\n        int length = keyData.getLength();\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(keyData.getGroup())) {\n            buf.append(keyData.getGroup()).append('/');\n        }\n        buf.append(keyData.getPath());\n        if (StringUtils.isNotEmpty(keyData.getVersion())) {\n            buf.append(':').append(keyData.getVersion());\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(KeyData keyData, String prefix) {\n        return prefix + buildServiceKey(keyData);\n    }\n}\n// #### example 5 end ##################################\n\n//\n\n// ## example 2 ##################################\n// 'fields to fields' data clump\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a class\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\t\t\t\n\t\t\tint state = node.getId();\n\t\t\tstates.add(state);\n\t\t\tsuccessors.put(state, new ArrayList<Integer>());\n\t\t\tlabels.put(state, new ArrayList<Label>())\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + successors.get(state) + \", Labels: \"\n                    + labels.get(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## refactored ##################################\n\nclass StateGraphData {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n\n    StateGraphData() {\n        this.states = new ArrayList<Integer>();\n        this.successors = new HashMap<Integer, List<Integer>>();\n        this.labels = new HashMap<Integer, List<Label>>();\n    }\n\n    public List<Integer> getStates() {\n        return states;\n    }\n\n    public Map<Integer, List<Integer>> getSuccessors(int state) {\n        return successors.get(state);\n    }\n\n    public Map<Integer, List<Label>> getLabels(int state) {\n        return labels.get(state);\n    }\n\n    public void addState(int state) {\n        states.add(state);\n        successors.put(state, new ArrayList<Integer>());\n        labels.put(state, new ArrayList<Label>());\n    }\n\n}\n\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a\n    // class\n    private StateGraphData stateGraphData;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\n            stateGraphData.addState(node.getId());\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private StateGraphData stateGraphData;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + stateGraphData.getSuccessor(state) + \", Labels: \"\n                    + stateGraphData.getLabel(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## example 2 end ##################################\n\n// ## example 3 ##################################\n// 'parameters to fields' data clump\nclass Example3A {\n    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {\n        return parameterTypes.length == arguments.length;\n    }\n}\n\n// Example3B.java\nclass Example3B {\n\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private String methodName;\n\n    private Class<?>[] parameterTypes;\n\n    private Object[] arguments;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n\n}\n\n// ## refactored ##################################\nclass MethodCallData {\n    public String methodName;\n    public Class<?>[] parameterTypes;\n    public Object[] arguments;\n\n    public boolean isValid() {\n        return parameterTypes.length == arguments.length;\n    }\n\n}\n\nclass Example3A {\n    boolean validate(MethodCallData methodCallData) {\n        return methodCallData.isValid();\n    }\n}\n\nclass Example3B {\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private MethodCallData methodCallData;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n}\n// ## example 3 end ##################################\n\n// ## example 4 ##################################\nclass Example4A {\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        writer.incrementNumberReturned();\n        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));\n    }\n}\n\n// Example4B.java\nclass Example4B extends Example4A {\n     // This pair of methods do not constitute a data clump even if signature is copied because\n    // the method is overridden and therefore must have the same paremeters\n    @Override\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        root.reset();\n        super.beforeEvaluation(writer, root, feature);\n    }\n   \n}\n// ## example 4 end ##################################\n\n## Examples end\n\n\nUse the following JSON format for the output:\n\n## JSON\n\n{\n    \"refactorings\":{\n        // for each refactored file\n        \"file1Path\": [\n            // for each change in the file performed by you. Try to group changes of neighboring lines\n            {\n                \"fromLine\": \"<the fromLine>\",\n                \"toLine\":\"<the toLine>\",\n                \"oldContent\": \"the old content of the changed lines\",\n                \"newContent\": \"the new content of the changed lines\"\n            },\n            //...\n        ]\n    },\n    \"extractedClasses\":{\n          // for each extracted class\n        \"extractedClassPath1\": \"full content of the newly extracted class 1 \",\n        //...\n    }\n}\n\n## END JSON\n\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\nimport org.apache.dolphinscheduler.api.test.core.Constants;\nimport org.apache.dolphinscheduler.api.test.entity.HttpResponse;\nimport org.apache.dolphinscheduler.api.test.utils.RequestClient;\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@AllArgsConstructor\npublic class ExecutorPage {\n\n    private String sessionId;\n\n    public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/start-workflow-instance\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"id\", workflowInstanceCode);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/query-executing-workflow\", projectCode);\n        return requestClient.get(url, headers, params);\n    }\n\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute-task\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\nimport org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;\n\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\n/**\n * workflow instance mapper interface\n */\npublic interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {\n\n    /**\n     * query workflow instance detail info by id\n     *\n     * @param id id\n     * @return workflow instance\n     */\n    WorkflowInstance queryDetailById(@Param(\"id\") int id);\n\n    /**\n     * query workflow instance by host and stateArray\n     *\n     * @param host       host\n     * @param stateArray stateArray\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByHostAndStatus(@Param(\"host\") String host,\n                                                @Param(\"states\") int[] stateArray);\n\n    /**\n     * query workflow instance host by stateArray\n     *\n     * @param stateArray\n     * @return\n     */\n    List<String> queryNeedFailoverWorkflowInstanceHost(@Param(\"states\") int[] stateArray);\n\n    /**\n     * query workflow instance by tenantCode and stateArray\n     *\n     * @param tenantCode tenantCode\n     * @param states     states array\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param(\"tenantCode\") String tenantCode,\n                                                      @Param(\"states\") int[] states);\n\n    /**\n     * @param workerGroupName workerGroupName\n     * @param states          states array\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param(\"workerGroupName\") String workerGroupName,\n                                                           @Param(\"states\") int[] states);\n\n    /**\n     * workflow instance page\n     * @param page page\n     * @param projectId projectId\n     * @param processDefinitionId processDefinitionId\n     * @param searchVal searchVal\n     * @param executorId executorId\n     * @param statusArray statusArray\n     * @param host host\n     * @param startTime startTime\n     * @param endTime endTime\n     * @return workflow instance IPage\n     */\n\n    /**\n     * workflow instance page\n     *\n     * @param page                  page\n     * @param projectCode           projectCode\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param searchVal             searchVal\n     * @param executorName          executorName\n     * @param statusArray           statusArray\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance page\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);\n\n    /**\n     * set failover by host and state array\n     *\n     * @param host       host\n     * @param stateArray stateArray\n     * @return set result\n     */\n    int setFailoverByHostAndStateArray(@Param(\"host\") String host,\n                                       @Param(\"states\") int[] stateArray);\n\n    /**\n     * Update the workflow instance state from originState to destState\n     */\n    int updateWorkflowInstanceState(\n                                    @Param(\"workflowInstanceId\") Integer workflowInstanceId,\n                                    @Param(\"originState\") WorkflowExecutionStatus originState,\n                                    @Param(\"targetState\") WorkflowExecutionStatus targetState);\n\n    /**\n     * update workflow instance by tenantCode\n     *\n     * @param originTenantCode originTenantCode\n     * @param destTenantCode   destTenantCode\n     * @return update result\n     */\n    int updateWorkflowInstanceByTenantCode(@Param(\"originTenantCode\") String originTenantCode,\n                                           @Param(\"destTenantCode\") String destTenantCode);\n\n    /**\n     * update workflow instance by worker groupId\n     *\n     * @param originWorkerGroupName originWorkerGroupName\n     * @param destWorkerGroupName   destWorkerGroupName\n     * @return update result\n     */\n    int updateWorkflowInstanceByWorkerGroupName(@Param(\"originWorkerGroupName\") String originWorkerGroupName,\n                                                @Param(\"destWorkerGroupName\") String destWorkerGroupName);\n\n    /**\n     * Statistics workflow instance state by given project codes list\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param startTime    startTime\n     * @param endTime      endTime\n     * @param projectCodes projectCodes\n     * @return ExecuteStatusCount list\n     */\n    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(\n                                                                                  @Param(\"startTime\") Date startTime,\n                                                                                  @Param(\"endTime\") Date endTime,\n                                                                                  @Param(\"projectCodes\") Collection<Long> projectCodes);\n\n    /**\n     * query workflow instance by workflowDefinitionCode\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param size                  size\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                         @Param(\"size\") int size);\n\n    /**\n     * query last scheduler workflow instance\n     *\n     * @param workflowDefinitionCode definitionCode\n     * @param taskDefinitionCode    definitionCode\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @param testFlag              testFlag\n     * @return workflow instance\n     */\n    WorkflowInstance queryLastSchedulerWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                @Param(\"taskDefinitionCode\") Long taskDefinitionCode,\n                                                @Param(\"startTime\") Date startTime,\n                                                @Param(\"endTime\") Date endTime,\n                                                @Param(\"testFlag\") int testFlag);\n\n    /**\n     * query last manual workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param taskCode       taskCode\n     * @param startTime      startTime\n     * @param endTime        endTime\n     * @param testFlag       testFlag\n     * @return workflow instance\n     */\n    WorkflowInstance queryLastManualWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                             @Param(\"taskCode\") Long taskCode,\n                                             @Param(\"startTime\") Date startTime,\n                                             @Param(\"endTime\") Date endTime,\n                                             @Param(\"testFlag\") int testFlag);\n\n    /**\n     * query first schedule workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @return workflow instance\n     */\n    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode);\n\n    /**\n     * query first manual workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @return workflow instance\n     */\n    WorkflowInstance queryFirstStartWorkflowInstance(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode);\n\n    /**\n     * query top n workflow instance order by running duration\n     *\n     * @param size        size\n     * @param startTime   start time\n     * @param startTime   end time\n     * @param status      workflow instance status\n     * @param projectCode project code\n     * @return ProcessInstance list\n     */\n\n    List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\"size\") int size,\n                                                     @Param(\"startTime\") Date startTime,\n                                                     @Param(\"endTime\") Date endTime,\n                                                     @Param(\"status\") WorkflowExecutionStatus status,\n                                                     @Param(\"projectCode\") long projectCode);\n\n    /**\n     * query workflow instance by workflowDefinitionCode and stateArray\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param states                states array\n     * @return workflow instance list\n     */\n\n    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                                  @Param(\"states\") int[] states);\n\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowDefinitionCode\") long workflowDefinitionCode,\n                                                            @Param(\"workflowDefinitionVersion\") int workflowDefinitionVersion,\n                                                            @Param(\"states\") int[] states);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);\n\n    /**\n     * Statistics workflow instance state v2\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param startTime    startTime\n     * @param endTime      endTime\n     * @param projectCode  projectCode\n     * @param workflowCode workflowCode\n     * @param model        model\n     * @param projectIds   projectIds\n     * @return ExecuteStatusCount list\n     */\n    List<ExecuteStatusCount> countInstanceStateV2(\n                                                  @Param(\"startTime\") Date startTime,\n                                                  @Param(\"endTime\") Date endTime,\n                                                  @Param(\"projectCode\") Long projectCode,\n                                                  @Param(\"workflowCode\") Long workflowCode,\n                                                  @Param(\"model\") Integer model,\n                                                  @Param(\"projectIds\") Set<Integer> projectIds);\n\n    /**\n     * query process list by triggerCode\n     *\n     * @param triggerCode\n     * @return\n     */\n    List<WorkflowInstance> queryByTriggerCode(@Param(\"triggerCode\") Long triggerCode);\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.Flag;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\nimport lombok.Data;\n\nimport com.baomidou.mybatisplus.annotation.FieldStrategy;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n@Data\n@TableName(\"t_ds_task_instance\")\npublic class TaskInstance implements Serializable {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String name;\n\n    private String taskType;\n\n    private int workflowInstanceId;\n\n    private String workflowInstanceName;\n\n    private Long projectCode;\n\n    private long taskCode;\n\n    private int taskDefinitionVersion;\n\n    @TableField(exist = false)\n    private String processDefinitionName;\n\n    @TableField(exist = false)\n    private int taskGroupPriority;\n\n    private TaskExecutionStatus state;\n\n    private Date firstSubmitTime;\n\n    private Date submitTime;\n\n    private Date startTime;\n\n    private Date endTime;\n\n    private String host;\n\n    private String executePath;\n\n    private String logPath;\n\n    private int retryTimes;\n\n    private Flag alertFlag;\n\n    @TableField(exist = false)\n    private WorkflowInstance workflowInstance;\n\n    @TableField(exist = false)\n    private WorkflowDefinition workflowDefinition;\n\n    @TableField(exist = false)\n    private TaskDefinition taskDefine;\n\n    private int pid;\n\n    private String appLink;\n\n    private Flag flag;\n\n    private Flag isCache;\n\n    @TableField(updateStrategy = FieldStrategy.IGNORED)\n    private String cacheKey;\n\n    @TableField(exist = false)\n    private String duration;\n\n    private int maxRetryTimes;\n\n    private int retryInterval;\n\n    private Priority taskInstancePriority;\n\n    @TableField(exist = false)\n    private Priority workflowInstancePriority;\n\n    private String workerGroup;\n\n    private Long environmentCode;\n\n    private String environmentConfig;\n\n    private int executorId;\n\n    private String varPool;\n\n    private String executorName;\n\n    private int delayTime;\n\n    private String taskParams;\n\n    private int dryRun;\n\n    private int taskGroupId;\n\n    private Integer cpuQuota;\n\n    private Integer memoryMax;\n\n    private TaskExecuteType taskExecuteType;\n\n    private int testFlag;\n\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\n\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\n\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);\n\n    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.controller;\n\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;\n\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\nimport org.apache.dolphinscheduler.api.service.ProjectParameterService;\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.common.constants.Constants;\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@Tag(name = \"PROJECT_PARAMETER_TAG\")\n@RestController\n@RequestMapping(\"projects/{projectCode}/project-parameter\")\n@Slf4j\npublic class ProjectParameterController extends BaseController {\n\n    @Autowired\n    private ProjectParameterService projectParameterService;\n\n    @Operation(summary = \"createProjectParameter\", description = \"CREATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"projectParameterName\", description = \"PROJECT_PARAMETER_NAME\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"updateProjectParameter\", description = \"UPDATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", schema = @Schema(implementation = long.class, example = \"123456\")),\n            @Parameter(name = \"projectParameterName\", description = \"PROJECT_PARAMETER_NAME\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"deleteProjectParametersByCode\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", required = true, schema = @Schema(implementation = String.class))\n    })\n    @PostMapping(value = \"/delete\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\n    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                @RequestParam(\"code\") long code) {\n\n        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);\n    }\n\n    @Operation(summary = \"batchDeleteProjectParametersByCodes\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"codes\", description = \"PROJECT_PARAMETER_CODE\", required = true, schema = @Schema(implementation = String.class))\n    })\n    @PostMapping(value = \"/batch-delete\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\n    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      @RequestParam(\"codes\") String codes) {\n\n        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);\n    }\n\n    @Operation(summary = \"queryProjectParameterListPaging\", description = \"QUERY_PROJECT_PARAMETER_LIST_PAGING_NOTES\")\n    @Parameters({\n            @Parameter(name = \"searchVal\", description = \"SEARCH_VAL\", required = false, schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"pageNo\", description = \"PAGE_NO\", required = true, schema = @Schema(implementation = int.class, example = \"1\")),\n            @Parameter(name = \"pageSize\", description = \"PAGE_SIZE\", required = true, schema = @Schema(implementation = int.class, example = \"10\"))\n    })\n    @GetMapping()\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)\n    public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                                  @RequestParam(value = \"projectParameterDataType\", required = false) String projectParameterDataType,\n                                                  @RequestParam(\"pageNo\") Integer pageNo,\n                                                  @RequestParam(\"pageSize\") Integer pageSize) {\n\n        checkPageParams(pageNo, pageSize);\n        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);\n    }\n\n    @Operation(summary = \"queryProjectParameterByCode\", description = \"QUERY_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", schema = @Schema(implementation = long.class, example = \"123456\"))\n    })\n    @GetMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)\n    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              @PathVariable(\"code\") long code) {\n        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.api.enums.Status;\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.common.enums.UserType;\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.mockito.junit.jupiter.MockitoSettings;\nimport org.mockito.quality.Strictness;\n\n@ExtendWith(MockitoExtension.class)\n@MockitoSettings(strictness = Strictness.LENIENT)\npublic class ProjectParameterControllerTest {\n\n    @InjectMocks\n    private ProjectParameterController projectParameterController;\n\n    @Mock\n    private ProjectParameterServiceImpl projectParameterService;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testDeleteProjectParametersByCode() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testBatchDeleteProjectParametersByCodes() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),\n                Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testQueryProjectParameterListPaging() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",\n                DataType.VARCHAR.name(), 1, 10);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testQueryProjectParameterByCode() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    private User getGeneralUser() {\n        User loginUser = new User();\n        loginUser.setUserType(UserType.GENERAL_USER);\n        loginUser.setUserName(\"userName\");\n        loginUser.setId(1);\n        return loginUser;\n    }\n\n    private Result getSuccessResult() {\n        Result result = new Result();\n        result.setCode(Status.SUCCESS.getCode());\n        result.setMsg(Status.SUCCESS.getMsg());\n        return result;\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.service;\n\nimport static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyLong;\nimport static org.mockito.Mockito.when;\n\nimport org.apache.dolphinscheduler.api.AssertionsHelper;\nimport org.apache.dolphinscheduler.api.enums.Status;\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\nimport org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;\nimport org.apache.dolphinscheduler.dao.entity.Project;\nimport org.apache.dolphinscheduler.dao.entity.ProjectParameter;\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.dao.mapper.ProjectMapper;\nimport org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\n\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.mockito.junit.jupiter.MockitoSettings;\nimport org.mockito.quality.Strictness;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\n@ExtendWith(MockitoExtension.class)\n@MockitoSettings(strictness = Strictness.LENIENT)\npublic class ProjectParameterServiceTest {\n\n    @InjectMocks\n    private ProjectParameterServiceImpl projectParameterService;\n\n    @Mock\n    private ProjectMapper projectMapper;\n\n    @Mock\n    private ProjectParameterMapper projectParameterMapper;\n\n    @Mock\n    private ProjectServiceImpl projectService;\n\n    protected final static long projectCode = 1L;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n\n        // CODE GENERATION ERROR\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n        }\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // INSERT DATA ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());\n        assertNotNull(projectParameter.getUpdateTime());\n        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());\n    }\n\n    @Test\n    public void testDeleteProjectParametersByCode() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // DATABASE OPERATION ERROR\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(-1);\n        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);\n        assertEquals(Status.DELETE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(1);\n        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testQueryProjectParameterByCode() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),\n                Mockito.any()))\n                        .thenReturn(false);\n\n        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),\n                Mockito.any())).thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testQueryProjectParameterListPaging() {\n        User loginUser = getGeneralUser();\n        Integer pageSize = 10;\n        Integer pageNo = 1;\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),\n                Mockito.any()))\n                        .thenReturn(false);\n\n        Result result =\n                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,\n                        DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // SUCCESS\n        when(projectService.hasProjectAndPerm(any(), any(), any(Result.class), any()))\n                .thenReturn(true);\n\n        Page<ProjectParameter> page = new Page<>(pageNo, pageSize);\n        page.setRecords(Collections.singletonList(getProjectParameter()));\n\n        when(projectParameterMapper.queryProjectParameterListPaging(any(), anyLong(), any(), any(), any()))\n                .thenReturn(page);\n        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                null, null);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testBatchDeleteProjectParametersByCodes() {\n        User loginUser = getGeneralUser();\n\n        Result result = projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"\");\n        assertEquals(Status.PROJECT_PARAMETER_CODE_EMPTY.getCode(), result.getCode());\n\n        when(projectParameterMapper.queryByCodes(any())).thenReturn(Collections.singletonList(getProjectParameter()));\n\n        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,\n                () -> projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1,2\"));\n\n        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1\");\n    }\n\n    private Project getProject(long projectCode) {\n        Project project = new Project();\n        project.setCode(projectCode);\n        project.setId(1);\n        project.setName(\"test\");\n        project.setUserId(1);\n        return project;\n    }\n\n    private ProjectParameter getProjectParameter() {\n        ProjectParameter projectParameter = new ProjectParameter();\n        projectParameter.setId(1);\n        projectParameter.setCode(1);\n        projectParameter.setProjectCode(1);\n        projectParameter.setParamName(\"key\");\n        projectParameter.setParamValue(\"value\");\n        return projectParameter;\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.controller;\n\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;\nimport static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;\n\nimport org.apache.dolphinscheduler.api.audit.OperatorLog;\nimport org.apache.dolphinscheduler.api.audit.enums.AuditType;\nimport org.apache.dolphinscheduler.api.enums.Status;\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\nimport org.apache.dolphinscheduler.api.service.SchedulerService;\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\n\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n/**\n * scheduler controller\n */\n@Tag(name = \"SCHEDULE_TAG\")\n@RestController\n@RequestMapping(\"/projects/{projectCode}/schedules\")\npublic class SchedulerController extends BaseController {\n\n    public static final String DEFAULT_WARNING_TYPE = \"NONE\";\n    public static final String DEFAULT_NOTIFY_GROUP_ID = \"1\";\n    public static final String DEFAULT_FAILURE_POLICY = \"CONTINUE\";\n    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = \"MEDIUM\";\n\n    @Autowired\n    private SchedulerService schedulerService;\n\n    /**\n     * create schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workflowInstancePriority workflow instance priority\n     * @param workerGroup worker group\n     * @param tenantCode tenant code\n     * @return create result code\n     */\n    @Operation(summary = \"createSchedule\", description = \"CREATE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"workflowDefinitionCode\", description = \"WORKFLOW_DEFINITION_CODE\", required = true, schema = @Schema(implementation = long.class, example = \"100\")),\n            @Parameter(name = \"schedule\", description = \"SCHEDULE\", schema = @Schema(implementation = String.class, example = \"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}\")),\n            @Parameter(name = \"warningType\", description = \"WARNING_TYPE\", schema = @Schema(implementation = WarningType.class)),\n            @Parameter(name = \"warningGroupId\", description = \"WARNING_GROUP_ID\", schema = @Schema(implementation = int.class, example = \"100\")),\n            @Parameter(name = \"failureStrategy\", description = \"FAILURE_STRATEGY\", schema = @Schema(implementation = FailureStrategy.class)),\n            @Parameter(name = \"workerGroup\", description = \"WORKER_GROUP\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"tenantCode\", description = \"TENANT_CODE\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"environmentCode\", description = \"ENVIRONMENT_CODE\", schema = @Schema(implementation = long.class)),\n            @Parameter(name = \"workflowInstancePriority\", description = \"WORKFLOW_INSTANCE_PRIORITY\", schema = @Schema(implementation = Priority.class)),\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n\n        return returnDataList(result);\n    }\n\n    /**\n     * updateWorkflowInstance schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param id scheduler id\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workerGroup worker group\n     * @param tenantCode tenant code\n     * @param workflowInstancePriority workflow instance priority\n     * @return update result code\n     */\n    @Operation(summary = \"updateSchedule\", description = \"UPDATE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"id\", description = \"SCHEDULE_ID\", required = true, schema = @Schema(implementation = int.class, example = \"100\")),\n            @Parameter(name = \"schedule\", description = \"SCHEDULE\", schema = @Schema(implementation = String.class, example = \"{\\\"startTime\\\":\\\"1996-08-08 00:00:00\\\",\\\"endTime\\\":\\\"2200-08-08 00:00:00\\\",\\\"timezoneId\\\":\\\"America/Phoenix\\\",\\\"crontab\\\":\\\"0 0 3/6 * * ? *\\\"}\")),\n            @Parameter(name = \"warningType\", description = \"WARNING_TYPE\", schema = @Schema(implementation = WarningType.class)),\n            @Parameter(name = \"warningGroupId\", description = \"WARNING_GROUP_ID\", schema = @Schema(implementation = int.class, example = \"100\")),\n            @Parameter(name = \"failureStrategy\", description = \"FAILURE_STRATEGY\", schema = @Schema(implementation = FailureStrategy.class)),\n            @Parameter(name = \"workerGroup\", description = \"WORKER_GROUP\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"tenantCode\", description = \"TENANT_CODE\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"workflowInstancePriority\", description = \"WORKFLOW_INSTANCE_PRIORITY\", schema = @Schema(implementation = Priority.class)),\n            @Parameter(name = \"environmentCode\", description = \"ENVIRONMENT_CODE\", schema = @Schema(implementation = long.class)),\n    })\n    @PutMapping(\"/{id}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\n    public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @PathVariable(value = \"id\") Integer id,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n\n        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);\n    }\n\n    @Operation(summary = \"online\", description = \"ONLINE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"id\", description = \"SCHEDULE_ID\", required = true, schema = @Schema(implementation = int.class, example = \"100\"))\n    })\n    @PostMapping(\"/{id}/online\")\n    @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)\n    public Result<Boolean> publishScheduleOnline(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                 @PathVariable(\"id\") Integer id) {\n        schedulerService.onlineScheduler(loginUser, projectCode, id);\n        return Result.success(true);\n    }\n\n    @Operation(summary = \"offline\", description = \"OFFLINE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"id\", description = \"SCHEDULE_ID\", required = true, schema = @Schema(implementation = int.class, example = \"100\"))\n    })\n    @PostMapping(\"/{id}/offline\")\n    @ApiException(OFFLINE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)\n    public Result<Boolean> offlineSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                           @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                           @PathVariable(\"id\") Integer id) {\n        schedulerService.offlineScheduler(loginUser, projectCode, id);\n        return Result.success(true);\n    }\n\n    /**\n     * query schedule list paging\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param pageNo page number\n     * @param pageSize page size\n     * @param searchVal search value\n     * @return schedule list page\n     */\n    @Operation(summary = \"queryScheduleListPaging\", description = \"QUERY_SCHEDULE_LIST_PAGING_NOTES\")\n    @Parameters({\n\n            @Parameter(name = \"searchVal\", description = \"SEARCH_VAL\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"pageNo\", description = \"PAGE_NO\", schema = @Schema(implementation = int.class, example = \"1\")),\n            @Parameter(name = \"pageSize\", description = \"PAGE_SIZE\", schema = @Schema(implementation = int.class, example = \"20\"))\n    })\n    @GetMapping()\n    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)\n    public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                          @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                          @RequestParam(value = \"workflowDefinitionCode\", required = false, defaultValue = \"0\") long workflowDefinitionCode,\n                                          @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                          @RequestParam(\"pageNo\") Integer pageNo,\n                                          @RequestParam(\"pageSize\") Integer pageSize) {\n        checkPageParams(pageNo, pageSize);\n        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,\n                pageSize);\n\n    }\n\n    /**\n     * delete schedule by id\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param id schedule id\n     * @return delete result code\n     */\n    @Operation(summary = \"deleteScheduleById\", description = \"DELETE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"id\", description = \"SCHEDULE_ID\", required = true, schema = @Schema(implementation = int.class, example = \"100\"))\n    })\n    @DeleteMapping(value = \"/{id}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(DELETE_SCHEDULE_BY_ID_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)\n    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n                                     @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                     @PathVariable(\"id\") Integer id) {\n        schedulerService.deleteSchedulesById(loginUser, id);\n        return new Result(Status.SUCCESS);\n    }\n\n    /**\n     * query schedule list\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @return schedule list\n     */\n    @Operation(summary = \"queryScheduleList\", description = \"QUERY_SCHEDULE_LIST_NOTES\")\n    @PostMapping(\"/list\")\n    @ApiException(QUERY_SCHEDULE_LIST_ERROR)\n    public Result queryScheduleList(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                    @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode) {\n        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);\n        return returnDataList(result);\n    }\n\n    /**\n     * preview schedule\n     *\n     * @param loginUser login user\n     * @param schedule schedule expression\n     * @return the next five fire time\n     */\n    @Operation(summary = \"previewSchedule\", description = \"PREVIEW_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"schedule\", description = \"SCHEDULE\", schema = @Schema(implementation = String.class, example = \"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}\")),\n    })\n    @PostMapping(\"/preview\")\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(PREVIEW_SCHEDULE_ERROR)\n    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                  @RequestParam(value = \"schedule\") String schedule) {\n        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);\n        return returnDataList(result);\n    }\n\n    /**\n     * update workflow definition schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workerGroup worker group\n     * @param workflowInstancePriority workflow instance priority\n     * @return update result code\n     */\n    @Operation(summary = \"updateScheduleByWorkflowDefinitionCode\", description = \"UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"workflowDefinitionCode\", description = \"WORKFLOW_DEFINITION_CODE\", required = true, schema = @Schema(implementation = long.class, example = \"12345678\")),\n            @Parameter(name = \"schedule\", description = \"SCHEDULE\", schema = @Schema(implementation = String.class, example = \"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}\")),\n            @Parameter(name = \"warningType\", description = \"WARNING_TYPE\", schema = @Schema(implementation = WarningType.class)),\n            @Parameter(name = \"warningGroupId\", description = \"WARNING_GROUP_ID\", schema = @Schema(implementation = int.class, example = \"100\")),\n            @Parameter(name = \"failureStrategy\", description = \"FAILURE_STRATEGY\", schema = @Schema(implementation = FailureStrategy.class)),\n            @Parameter(name = \"workerGroup\", description = \"WORKER_GROUP\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"tenantCode\", description = \"TENANT_CODE\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"workflowInstancePriority\", description = \"WORKFLOW_INSTANCE_PRIORITY\", schema = @Schema(implementation = Priority.class)),\n            @Parameter(name = \"environmentCode\", description = \"ENVIRONMENT_CODE\", schema = @Schema(implementation = long.class)),\n    })\n    @PutMapping(\"/update/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\n    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         @RequestParam(value = \"schedule\") String schedule,\n                                                         @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                                         @RequestParam(value = \"warningGroupId\", required = false) int warningGroupId,\n                                                         @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                                         @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                                         @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                                         @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") long environmentCode,\n                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\nimport org.apache.dolphinscheduler.common.enums.AlertType;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@TableName(\"t_ds_alert\")\npublic class Alert {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    @TableField(value = \"sign\")\n    private String sign;\n\n    @TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n\n    @TableField(value = \"warning_type\")\n    private WarningType warningType;\n\n    @TableField(value = \"log\")\n    private String log;\n\n    @TableField(\"alertgroup_id\")\n    private Integer alertGroupId;\n\n    @TableField(\"create_time\")\n    private Date createTime;\n\n    @TableField(\"update_time\")\n    private Date updateTime;\n\n    @TableField(\"project_code\")\n    private Long projectCode;\n\n    @TableField(\"workflow_definition_code\")\n    private Long workflowDefinitionCode;\n\n    @TableField(\"workflow_instance_id\")\n    private Integer workflowInstanceId;\n\n    @TableField(\"alert_type\")\n    private AlertType alertType;\n\n    @TableField(exist = false)\n    private Map<String, Object> info = new HashMap<>();\n\n}\n",
            "role": "user"
        },
        {
            "content": "\n{\n    \"refactorings\": {\n        \"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\": [\n            {\n                \"fromLine\": 36,\n                \"toLine\": 42,\n                \"oldContent\": \"public HttpResponse startWorkflowInstance(User loginUser,\\n                                              long projectCode,\\n                                              long workflowDefinitionCode,\\n                                              String scheduleTime,\\n                                              FailureStrategy failureStrategy,\\n                                              WarningType warningType) {\",\n                \"newContent\": \"public HttpResponse startWorkflowInstance(User loginUser,\\n                                              long projectCode,\\n                                              WorkflowInstanceRequest workflowInstanceRequest) {\"\n            },\n            {\n                \"fromLine\": 44,\n                \"toLine\": 50,\n                \"oldContent\": \"        params.put(\\\"workflowDefinitionCode\\\", workflowDefinitionCode);\\n        params.put(\\\"scheduleTime\\\", scheduleTime);\\n        params.put(\\\"failureStrategy\\\", failureStrategy);\\n        params.put(\\\"warningType\\\", warningType);\",\n                \"newContent\": \"        params.put(\\\"workflowDefinitionCode\\\", workflowInstanceRequest.getWorkflowDefinitionCode());\\n        params.put(\\\"scheduleTime\\\", workflowInstanceRequest.getScheduleTime());\\n        params.put(\\\"failureStrategy\\\", workflowInstanceRequest.getFailureStrategy());\\n        params.put(\\\"warningType\\\", workflowInstanceRequest.getWarningType());\"\n            },\n            {\n                \"fromLine\": 71,\n                \"toLine\": 77,\n                \"oldContent\": \"public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\\n                                    TaskDependType taskDependType) {\",\n                \"newContent\": \"public HttpResponse executeTask(User loginUser, long projectCode, TaskExecutionRequest taskExecutionRequest) {\"\n            },\n            {\n                \"fromLine\": 79,\n                \"toLine\": 83,\n                \"oldContent\": \"        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"startNodeList\\\", startNodeList);\\n        params.put(\\\"taskDependType\\\", taskDependType);\",\n                \"newContent\": \"        params.put(\\\"workflowInstanceId\\\", taskExecutionRequest.getWorkflowInstanceId());\\n        params.put(\\\"startNodeList\\\", taskExecutionRequest.getStartNodeList());\\n        params.put(\\\"taskDependType\\\", taskExecutionRequest.getTaskDependType());\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\": [\n            {\n                \"fromLine\": 88,\n                \"toLine\": 102,\n                \"oldContent\": \"IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\\n                                                            @Param(\\\"projectCode\\\") Long projectCode,\\n                                                            @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                            @Param(\\\"searchVal\\\") String searchVal,\\n                                                            @Param(\\\"executorName\\\") String executorName,\\n                                                            @Param(\\\"states\\\") int[] statusArray,\\n                                                            @Param(\\\"host\\\") String host,\\n                                                            @Param(\\\"startTime\\\") Date startTime,\\n                                                            @Param(\\\"endTime\\\") Date endTime);\",\n                \"newContent\": \"IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\\n                                                            @Param(\\\"projectCode\\\") Long projectCode,\\n                                                            WorkflowInstanceQuery workflowInstanceQuery);\"\n            },\n            {\n                \"fromLine\": 104,\n                \"toLine\": 105,\n                \"oldContent\": \"    int setFailoverByHostAndStateArray(@Param(\\\"host\\\") String host,\\n                                       @Param(\\\"states\\\") int[] stateArray);\",\n                \"newContent\": \"    int setFailoverByHostAndStateArray(FailoverStateQuery failoverStateQuery);\"\n            },\n            {\n                \"fromLine\": 107,\n                \"toLine\": 108,\n                \"oldContent\": \"    int updateWorkflowInstanceState(\\n                                    @Param(\\\"workflowInstanceId\\\") Integer workflowInstanceId,\",\n                \"newContent\": \"    int updateWorkflowInstanceState(WorkflowInstanceUpdateState workflowInstanceUpdateState,\"\n            },\n            {\n                \"fromLine\": 110,\n                \"toLine\": 110,\n                \"oldContent\": \"                                    @Param(\\\"originState\\\") WorkflowExecutionStatus originState,\",\n                \"newContent\": \"                                    WorkflowExecutionStatus originState,\"\n            },\n            {\n                \"fromLine\": 111,\n                \"toLine\": 111,\n                \"oldContent\": \"                                    @Param(\\\"targetState\\\") WorkflowExecutionStatus targetState);\",\n                \"newContent\": \"                                    WorkflowExecutionStatus targetState);\"\n            },\n            {\n                \"fromLine\": 113,\n                \"toLine\": 114,\n                \"oldContent\": \"    int updateWorkflowInstanceByTenantCode(@Param(\\\"originTenantCode\\\") String originTenantCode,\\n                                           @Param(\\\"destTenantCode\\\") String destTenantCode);\",\n                \"newContent\": \"    int updateWorkflowInstanceByTenantCode(TenantCodeUpdate tenantCodeUpdate);\"\n            },\n            {\n                \"fromLine\": 116,\n                \"toLine\": 117,\n                \"oldContent\": \"    int updateWorkflowInstanceByWorkerGroupName(@Param(\\\"originWorkerGroupName\\\") String originWorkerGroupName,\\n                                                @Param(\\\"destWorkerGroupName\\\") String destWorkerGroupName);\",\n                \"newContent\": \"    int updateWorkflowInstanceByWorkerGroupName(WorkerGroupNameUpdate workerGroupNameUpdate);\"\n            },\n            {\n                \"fromLine\": 119,\n                \"toLine\": 124,\n                \"oldContent\": \"    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(\\n                                                                                  @Param(\\\"startTime\\\") Date startTime,\\n                                                                                  @Param(\\\"endTime\\\") Date endTime,\\n                                                                                  @Param(\\\"projectCodes\\\") Collection<Long> projectCodes);\",\n                \"newContent\": \"    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceCountQuery workflowInstanceCountQuery);\"\n            },\n            {\n                \"fromLine\": 126,\n                \"toLine\": 127,\n                \"oldContent\": \"    WorkflowInstance queryLastSchedulerWorkflow(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\",\n                \"newContent\": \"    WorkflowInstance queryLastSchedulerWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\"\n            },\n            {\n                \"fromLine\": 128,\n                \"toLine\": 128,\n                \"oldContent\": \"                                                @Param(\\\"taskDefinitionCode\\\") Long taskDefinitionCode,\",\n                \"newContent\": \"                                                Long taskDefinitionCode,\"\n            },\n            {\n                \"fromLine\": 129,\n                \"toLine\": 129,\n                \"oldContent\": \"                                                @Param(\\\"startTime\\\") Date startTime,\",\n                \"newContent\": \"                                                Date startTime,\"\n            },\n            {\n                \"fromLine\": 130,\n                \"toLine\": 130,\n                \"oldContent\": \"                                                @Param(\\\"endTime\\\") Date endTime,\",\n                \"newContent\": \"                                                Date endTime,\"\n            },\n            {\n                \"fromLine\": 131,\n                \"toLine\": 131,\n                \"oldContent\": \"                                                @Param(\\\"testFlag\\\") int testFlag);\",\n                \"newContent\": \"                                                int testFlag);\"\n            },\n            {\n                \"fromLine\": 133,\n                \"toLine\": 134,\n                \"oldContent\": \"    WorkflowInstance queryLastManualWorkflow(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\",\n                \"newContent\": \"    WorkflowInstance queryLastManualWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\"\n            },\n            {\n                \"fromLine\": 135,\n                \"toLine\": 135,\n                \"oldContent\": \"                                             @Param(\\\"taskCode\\\") Long taskCode,\",\n                \"newContent\": \"                                             Long taskCode,\"\n            },\n            {\n                \"fromLine\": 136,\n                \"toLine\": 136,\n                \"oldContent\": \"                                             @Param(\\\"startTime\\\") Date startTime,\",\n                \"newContent\": \"                                             Date startTime,\"\n            },\n            {\n                \"fromLine\": 137,\n                \"toLine\": 137,\n                \"oldContent\": \"                                             @Param(\\\"endTime\\\") Date endTime,\",\n                \"newContent\": \"                                             Date endTime,\"\n            },\n            {\n                \"fromLine\": 138,\n                \"toLine\": 138,\n                \"oldContent\": \"                                             @Param(\\\"testFlag\\\") int testFlag);\",\n                \"newContent\": \"                                             int testFlag);\"\n            },\n            {\n                \"fromLine\": 140,\n                \"toLine\": 140,\n                \"oldContent\": \"    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode);\",\n                \"newContent\": \"    WorkflowInstance queryFirstScheduleWorkflowInstance(Long workflowDefinitionCode);\"\n            },\n            {\n                \"fromLine\": 142,\n                \"toLine\": 142,\n                \"oldContent\": \"    WorkflowInstance queryFirstStartWorkflowInstance(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode);\",\n                \"newContent\": \"    WorkflowInstance queryFirstStartWorkflowInstance(Long workflowDefinitionCode);\"\n            },\n            {\n                \"fromLine\": 144,\n                \"toLine\": 149,\n                \"oldContent\": \"    List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\\\"size\\\") int size,\\n                                                     @Param(\\\"startTime\\\") Date startTime,\\n                                                     @Param(\\\"endTime\\\") Date endTime,\\n                                                     @Param(\\\"status\\\") WorkflowExecutionStatus status,\\n                                                     @Param(\\\"projectCode\\\") long projectCode);\",\n                \"newContent\": \"    List<WorkflowInstance> queryTopNWorkflowInstance(WorkflowInstanceTopQuery workflowInstanceTopQuery);\"\n            },\n            {\n                \"fromLine\": 151,\n                \"toLine\": 152,\n                \"oldContent\": \"    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\",\n                \"newContent\": \"    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(WorkflowInstanceQuery workflowInstanceQuery,\"\n            },\n            {\n                \"fromLine\": 153,\n                \"toLine\": 153,\n                \"oldContent\": \"                                                                  @Param(\\\"states\\\") int[] states);\",\n                \"newContent\": \"                                                                  int[] states);\"\n            },\n            {\n                \"fromLine\": 155,\n                \"toLine\": 155,\n                \"oldContent\": \"    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\",\n                \"newContent\": \"    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery,\"\n            },\n            {\n                \"fromLine\": 156,\n                \"toLine\": 156,\n                \"oldContent\": \"                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\",\n                \"newContent\": \"                                                            int workflowDefinitionVersion,\"\n            },\n            {\n                \"fromLine\": 157,\n                \"toLine\": 157,\n                \"oldContent\": \"                                                            @Param(\\\"states\\\") int[] states);\",\n                \"newContent\": \"                                                            int[] states);\"\n            },\n            {\n                \"fromLine\": 159,\n                \"toLine\": 164,\n                \"oldContent\": \"    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\",\n                \"newContent\": \"    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              WorkflowInstanceQuery workflowInstanceQuery,\"\n            },\n            {\n                \"fromLine\": 165,\n                \"toLine\": 165,\n                \"oldContent\": \"                                                              @Param(\\\"state\\\") Integer state,\",\n                \"newContent\": \"                                                              Integer state,\"\n            },\n            {\n                \"fromLine\": 166,\n                \"toLine\": 166,\n                \"oldContent\": \"                                                              @Param(\\\"host\\\") String host);\",\n                \"newContent\": \"                                                              String host);\"\n            },\n            {\n                \"fromLine\": 168,\n                \"toLine\": 174,\n                \"oldContent\": \"    List<ExecuteStatusCount> countInstanceStateV2(\\n                                                  @Param(\\\"startTime\\\") Date startTime,\\n                                                  @Param(\\\"endTime\\\") Date endTime,\\n                                                  @Param(\\\"projectCode\\\") Long projectCode,\\n                                                  @Param(\\\"workflowCode\\\") Long workflowCode,\\n                                                  @Param(\\\"model\\\") Integer model,\\n                                                  @Param(\\\"projectIds\\\") Set<Integer> projectIds);\",\n                \"newContent\": \"    List<ExecuteStatusCount> countInstanceStateV2(WorkflowInstanceCountQuery workflowInstanceCountQuery);\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\": [\n            {\n                \"fromLine\": 109,\n                \"toLine\": 109,\n                \"oldContent\": \"    public void init(String host, Date startTime, String executePath) {\",\n                \"newContent\": \"    public void init(TaskInstanceInit taskInstanceInit) {\"\n            },\n            {\n                \"fromLine\": 110,\n                \"toLine\": 112,\n                \"oldContent\": \"        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\",\n                \"newContent\": \"        this.host = taskInstanceInit.getHost();\\n        this.startTime = taskInstanceInit.getStartTime();\\n        this.executePath = taskInstanceInit.getExecutePath();\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\": [\n            {\n                \"fromLine\": 24,\n                \"toLine\": 24,\n                \"oldContent\": \"    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\",\n                \"newContent\": \"    Result createProjectParameter(User loginUser, long projectCode, ProjectParameterRequest projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 26,\n                \"toLine\": 26,\n                \"oldContent\": \"                                  String projectParameterValue, String projectParameterDataType);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 28,\n                \"toLine\": 28,\n                \"oldContent\": \"    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\",\n                \"newContent\": \"    Result updateProjectParameter(User loginUser, long projectCode, long code, ProjectParameterRequest projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 30,\n                \"toLine\": 30,\n                \"oldContent\": \"                                  String projectParameterValue, String projectParameterDataType);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 32,\n                \"toLine\": 32,\n                \"oldContent\": \"    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\",\n                \"newContent\": \"    Result queryProjectParameterListPaging(User loginUser, long projectCode, ProjectParameterPagingRequest projectParameterPagingRequest);\"\n            },\n            {\n                \"fromLine\": 34,\n                \"toLine\": 34,\n                \"oldContent\": \"                                           String searchVal, String projectParameterDataType);\",\n                \"newContent\": \"\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\": [\n            {\n                \"fromLine\": 74,\n                \"toLine\": 80,\n                \"oldContent\": \"        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\",\n                \"newContent\": \"        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(projectParameterName, projectParameterValue, projectParameterDataType);\\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 86,\n                \"toLine\": 92,\n                \"oldContent\": \"        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\",\n                \"newContent\": \"        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(projectParameterName, projectParameterValue, projectParameterDataType);\\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 130,\n                \"toLine\": 136,\n                \"oldContent\": \"        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\\n                searchVal, projectParameterDataType);\",\n                \"newContent\": \"        ProjectParameterPagingRequest projectParameterPagingRequest = new ProjectParameterPagingRequest(pageSize, pageNo, searchVal, projectParameterDataType);\\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, projectParameterPagingRequest);\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\": [\n            {\n                \"fromLine\": 30,\n                \"toLine\": 32,\n                \"oldContent\": \"        Result result = projectParameterController.createProjectParameter(loginUser, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\",\n                \"newContent\": \"        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(\\\"key\\\", \\\"value\\\", DataType.VARCHAR.name());\\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 38,\n                \"toLine\": 40,\n                \"oldContent\": \"        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \\\"key\\\", \\\"value\\\",\\n                DataType.LONG.name());\",\n                \"newContent\": \"        ProjectParameterRequest projectParameterRequest = new ProjectParameterRequest(\\\"key\\\", \\\"value\\\", DataType.LONG.name());\\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, projectParameterRequest);\"\n            },\n            {\n                \"fromLine\": 66,\n                \"toLine\": 68,\n                \"oldContent\": \"        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \\\"1\\\",\\n                DataType.VARCHAR.name(), 1, 10);\",\n                \"newContent\": \"        ProjectParameterPagingRequest projectParameterPagingRequest = new ProjectParameterPagingRequest(10, 1, \\\"1\\\", DataType.VARCHAR.name());\\n        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, projectParameterPagingRequest);\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\": [\n            {\n                \"fromLine\": 28,\n                \"toLine\": 30,\n                \"oldContent\": \"        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\",\n                \"newContent\": \"        ProjectParameterRequest projectParameterRequest =",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[143,22] cannot find symbol\n[ERROR]   symbol:   class TaskInstanceInit\n[ERROR]   location: class org.apache.dolphinscheduler.dao.entity.TaskInstance\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[115,61] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[124,40] cannot find symbol\n[ERROR]   symbol:   class FailoverStateQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[129,37] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceUpdateState\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[140,44] cannot find symbol\n[ERROR]   symbol:   class TenantCodeUpdate\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[149,49] cannot find symbol\n[ERROR]   symbol:   class WorkerGroupNameUpdate\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[161,83] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceCountQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[183,49] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[199,46] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[246,67] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[249,61] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[266,63] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceQuery\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-dao\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.Flag;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\nimport lombok.Data;\n\nimport com.baomidou.mybatisplus.annotation.FieldStrategy;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n@Data\n@TableName(\"t_ds_task_instance\")\npublic class TaskInstance implements Serializable {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    private String name;\n\n    private String taskType;\n\n    private int workflowInstanceId;\n\n    private String workflowInstanceName;\n\n    private Long projectCode;\n\n    private long taskCode;\n\n    private int taskDefinitionVersion;\n\n    @TableField(exist = false)\n    private String processDefinitionName;\n\n    @TableField(exist = false)\n    private int taskGroupPriority;\n\n    private TaskExecutionStatus state;\n\n    private Date firstSubmitTime;\n\n    private Date submitTime;\n\n    private Date startTime;\n\n    private Date endTime;\n\n    private String host;\n\n    private String executePath;\n\n    private String logPath;\n\n    private int retryTimes;\n\n    private Flag alertFlag;\n\n    @TableField(exist = false)\n    private WorkflowInstance workflowInstance;\n\n    @TableField(exist = false)\n    private WorkflowDefinition workflowDefinition;\n\n    @TableField(exist = false)\n    private TaskDefinition taskDefine;\n\n    private int pid;\n\n    private String appLink;\n\n    private Flag flag;\n\n    private Flag isCache;\n\n    @TableField(updateStrategy = FieldStrategy.IGNORED)\n    private String cacheKey;\n\n    @TableField(exist = false)\n    private String duration;\n\n    private int maxRetryTimes;\n\n    private int retryInterval;\n\n    private Priority taskInstancePriority;\n\n    @TableField(exist = false)\n    private Priority workflowInstancePriority;\n\n    private String workerGroup;\n\n    private Long environmentCode;\n\n    private String environmentConfig;\n\n    private int executorId;\n\n    private String varPool;\n\n    private String executorName;\n\n    private int delayTime;\n\n    private String taskParams;\n\n    private int dryRun;\n\n    private int taskGroupId;\n\n    private Integer cpuQuota;\n\n    private Integer memoryMax;\n\n    private TaskExecuteType taskExecuteType;\n\n    private int testFlag;\n\n    public void init(TaskInstanceInit taskInstanceInit) {\n        this.host = taskInstanceInit.getHost();\n        this.startTime = taskInstanceInit.getStartTime();\n        this.executePath = taskInstanceInit.getExecutePath();\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\nimport org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;\n\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\n/**\n * workflow instance mapper interface\n */\npublic interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {\n\n    /**\n     * query workflow instance detail info by id\n     *\n     * @param id id\n     * @return workflow instance\n     */\n    WorkflowInstance queryDetailById(@Param(\"id\") int id);\n\n    /**\n     * query workflow instance by host and stateArray\n     *\n     * @param host       host\n     * @param stateArray stateArray\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByHostAndStatus(@Param(\"host\") String host,\n                                                @Param(\"states\") int[] stateArray);\n\n    /**\n     * query workflow instance host by stateArray\n     *\n     * @param stateArray\n     * @return\n     */\n    List<String> queryNeedFailoverWorkflowInstanceHost(@Param(\"states\") int[] stateArray);\n\n    /**\n     * query workflow instance by tenantCode and stateArray\n     *\n     * @param tenantCode tenantCode\n     * @param states     states array\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param(\"tenantCode\") String tenantCode,\n                                                      @Param(\"states\") int[] states);\n\n    /**\n     * @param workerGroupName workerGroupName\n     * @param states          states array\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param(\"workerGroupName\") String workerGroupName,\n                                                           @Param(\"states\") int[] states);\n\n    /**\n     * workflow instance page\n     * @param page page\n     * @param projectId projectId\n     * @param processDefinitionId processDefinitionId\n     * @param searchVal searchVal\n     * @param executorId executorId\n     * @param statusArray statusArray\n     * @param host host\n     * @param startTime startTime\n     * @param endTime endTime\n     * @return workflow instance IPage\n     */\n\n    /**\n     * workflow instance page\n     *\n     * @param page                  page\n     * @param projectCode           projectCode\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param searchVal             searchVal\n     * @param executorName          executorName\n     * @param statusArray           statusArray\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance page\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            WorkflowInstanceQuery workflowInstanceQuery);\n\n    /**\n     * set failover by host and state array\n     *\n     * @param host       host\n     * @param stateArray stateArray\n     * @return set result\n     */\n    int setFailoverByHostAndStateArray(FailoverStateQuery failoverStateQuery);\n\n    /**\n     * Update the workflow instance state from originState to destState\n     */\n    int updateWorkflowInstanceState(WorkflowInstanceUpdateState workflowInstanceUpdateState,\n                                    WorkflowExecutionStatus originState,\n                                    WorkflowExecutionStatus targetState);\n\n    /**\n     * update workflow instance by tenantCode\n     *\n     * @param originTenantCode originTenantCode\n     * @param destTenantCode   destTenantCode\n     * @return update result\n     */\n    int updateWorkflowInstanceByTenantCode(TenantCodeUpdate tenantCodeUpdate);\n\n    /**\n     * update workflow instance by worker groupId\n     *\n     * @param originWorkerGroupName originWorkerGroupName\n     * @param destWorkerGroupName   destWorkerGroupName\n     * @return update result\n     */\n    int updateWorkflowInstanceByWorkerGroupName(WorkerGroupNameUpdate workerGroupNameUpdate);\n\n    /**\n     * Statistics workflow instance state by given project codes list\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param startTime    startTime\n     * @param endTime      endTime\n     * @param projectCodes projectCodes\n     * @return ExecuteStatusCount list\n     */\n    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceCountQuery workflowInstanceCountQuery);\n\n    /**\n     * query workflow instance by workflowDefinitionCode\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param size                  size\n     * @return workflow instance list\n     */\n    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                         @Param(\"size\") int size);\n\n    /**\n     * query last scheduler workflow instance\n     *\n     * @param workflowDefinitionCode definitionCode\n     * @param taskDefinitionCode    definitionCode\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @param testFlag              testFlag\n     * @return workflow instance\n     */\n    WorkflowInstance queryLastSchedulerWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\n                                                Long taskDefinitionCode,\n                                                Date startTime,\n                                                Date endTime,\n                                                int testFlag);\n\n    /**\n     * query last manual workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param taskCode       taskCode\n     * @param startTime      startTime\n     * @param endTime        endTime\n     * @param testFlag       testFlag\n     * @return workflow instance\n     */\n    WorkflowInstance queryLastManualWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\n                                             Long taskCode,\n                                             Date startTime,\n                                             Date endTime,\n                                             int testFlag);\n\n    /**\n     * query first schedule workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @return workflow instance\n     */\n    WorkflowInstance queryFirstScheduleWorkflowInstance(Long workflowDefinitionCode);\n\n    /**\n     * query first manual workflow instance\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @return workflow instance\n     */\n    WorkflowInstance queryFirstStartWorkflowInstance(Long workflowDefinitionCode);\n\n    /**\n     * query top n workflow instance order by running duration\n     *\n     * @param size        size\n     * @param startTime   start time\n     * @param startTime   end time\n     * @param status      workflow instance status\n     * @param projectCode project code\n     * @return ProcessInstance list\n     */\n\n    List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\"size\") int size,\n                                                     Date startTime,\n                                                     Date endTime,\n                                                     @Param(\"status\") WorkflowExecutionStatus status,\n                                                     @Param(\"projectCode\") long projectCode);\n\n    /**\n     * query workflow instance by workflowDefinitionCode and stateArray\n     *\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param states                states array\n     * @return workflow instance list\n     */\n\n    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(WorkflowInstanceQuery workflowInstanceQuery,\n                                                                  int[] states);\n\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery,\n                                                            int workflowDefinitionVersion,\n                                                            int[] states);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              WorkflowInstanceQuery workflowInstanceQuery,\n                                                              Integer state,\n                                                              String host);\n\n    /**\n     * Statistics workflow instance state v2\n     * <p>\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\n     *\n     * @param startTime    startTime\n     * @param endTime      endTime\n     * @param projectCode  projectCode\n     * @param workflowCode workflowCode\n     * @param model        model\n     * @param projectIds   projectIds\n     * @return ExecuteStatusCount list\n     */\n    List<ExecuteStatusCount> countInstanceStateV2(\n                                                  Date startTime,\n                                                  Date endTime,\n                                                  @Param(\"projectCode\") Long projectCode,\n                                                  @Param(\"workflowCode\") Long workflowCode,\n                                                  @Param(\"model\") Integer model,\n                                                  @Param(\"projectIds\") Set<Integer> projectIds);\n\n    /**\n     * query process list by triggerCode\n     *\n     * @param triggerCode\n     * @return\n     */\n    List<WorkflowInstance> queryByTriggerCode(@Param(\"triggerCode\") Long triggerCode);\n}\n",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\": [\n            {\n                \"fromLine\": 109,\n                \"toLine\": 112,\n                \"oldContent\": \"    public void init(TaskInstanceInit taskInstanceInit) {\\n        this.host = taskInstanceInit.getHost();\\n        this.startTime = taskInstanceInit.getStartTime();\\n        this.executePath = taskInstanceInit.getExecutePath();\\n    }\",\n                \"newContent\": \"    public void init(String host, Date startTime, String executePath) {\\n        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\\n    }\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\": [\n            {\n                \"fromLine\": 88,\n                \"toLine\": 102,\n                \"oldContent\": \"IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\\n                                                            @Param(\\\"projectCode\\\") Long projectCode,\\n                                                            WorkflowInstanceQuery workflowInstanceQuery);\",\n                \"newContent\": \"IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\\n                                                            @Param(\\\"projectCode\\\") Long projectCode,\\n                                                            @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                            @Param(\\\"searchVal\\\") String searchVal,\\n                                                            @Param(\\\"executorName\\\") String executorName,\\n                                                            @Param(\\\"states\\\") int[] statusArray,\\n                                                            @Param(\\\"host\\\") String host,\\n                                                            @Param(\\\"startTime\\\") Date startTime,\\n                                                            @Param(\\\"endTime\\\") Date endTime);\"\n            },\n            {\n                \"fromLine\": 104,\n                \"toLine\": 105,\n                \"oldContent\": \"    int setFailoverByHostAndStateArray(FailoverStateQuery failoverStateQuery);\",\n                \"newContent\": \"    int setFailoverByHostAndStateArray(@Param(\\\"host\\\") String host,\\n                                       @Param(\\\"states\\\") int[] stateArray);\"\n            },\n            {\n                \"fromLine\": 107,\n                \"toLine\": 111,\n                \"oldContent\": \"    int updateWorkflowInstanceState(WorkflowInstanceUpdateState workflowInstanceUpdateState,\\n                                    WorkflowExecutionStatus originState,\\n                                    WorkflowExecutionStatus targetState);\",\n                \"newContent\": \"    int updateWorkflowInstanceState(\\n                                    @Param(\\\"workflowInstanceId\\\") Integer workflowInstanceId,\\n                                    @Param(\\\"originState\\\") WorkflowExecutionStatus originState,\\n                                    @Param(\\\"targetState\\\") WorkflowExecutionStatus targetState);\"\n            },\n            {\n                \"fromLine\": 113,\n                \"toLine\": 114,\n                \"oldContent\": \"    int updateWorkflowInstanceByTenantCode(TenantCodeUpdate tenantCodeUpdate);\",\n                \"newContent\": \"    int updateWorkflowInstanceByTenantCode(@Param(\\\"originTenantCode\\\") String originTenantCode,\\n                                           @Param(\\\"destTenantCode\\\") String destTenantCode);\"\n            },\n            {\n                \"fromLine\": 116,\n                \"toLine\": 117,\n                \"oldContent\": \"    int updateWorkflowInstanceByWorkerGroupName(WorkerGroupNameUpdate workerGroupNameUpdate);\",\n                \"newContent\": \"    int updateWorkflowInstanceByWorkerGroupName(@Param(\\\"originWorkerGroupName\\\") String originWorkerGroupName,\\n                                                @Param(\\\"destWorkerGroupName\\\") String destWorkerGroupName);\"\n            },\n            {\n                \"fromLine\": 119,\n                \"toLine\": 124,\n                \"oldContent\": \"    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceCountQuery workflowInstanceCountQuery);\",\n                \"newContent\": \"    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(\\n                                                                                  @Param(\\\"startTime\\\") Date startTime,\\n                                                                                  @Param(\\\"endTime\\\") Date endTime,\\n                                                                                  @Param(\\\"projectCodes\\\") Collection<Long> projectCodes);\"\n            },\n            {\n                \"fromLine\": 126,\n                \"toLine\": 131,\n                \"oldContent\": \"    WorkflowInstance queryLastSchedulerWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\\n                                                Long taskDefinitionCode,\\n                                                Date startTime,\\n                                                Date endTime,\\n                                                int testFlag);\",\n                \"newContent\": \"    WorkflowInstance queryLastSchedulerWorkflow(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                @Param(\\\"taskDefinitionCode\\\") Long taskDefinitionCode,\\n                                                @Param(\\\"startTime\\\") Date startTime,\\n                                                @Param(\\\"endTime\\\") Date endTime,\\n                                                @Param(\\\"testFlag\\\") int testFlag);\"\n            },\n            {\n                \"fromLine\": 133,\n                \"toLine\": 138,\n                \"oldContent\": \"    WorkflowInstance queryLastManualWorkflow(WorkflowInstanceQuery workflowInstanceQuery,\\n                                             Long taskCode,\\n                                             Date startTime,\\n                                             Date endTime,\\n                                             int testFlag);\",\n                \"newContent\": \"    WorkflowInstance queryLastManualWorkflow(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                             @Param(\\\"taskCode\\\") Long taskCode,\\n                                             @Param(\\\"startTime\\\") Date startTime,\\n                                             @Param(\\\"endTime\\\") Date endTime,\\n                                             @Param(\\\"testFlag\\\") int testFlag);\"\n            },\n            {\n                \"fromLine\": 140,\n                \"toLine\": 140,\n                \"oldContent\": \"    WorkflowInstance queryFirstScheduleWorkflowInstance(Long workflowDefinitionCode);\",\n                \"newContent\": \"    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode);\"\n            },\n            {\n                \"fromLine\": 142,\n                \"toLine\": 142,\n                \"oldContent\": \"    WorkflowInstance queryFirstStartWorkflowInstance(Long workflowDefinitionCode);\",\n                \"newContent\": \"    WorkflowInstance queryFirstStartWorkflowInstance(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode);\"\n            },\n            {\n                \"fromLine\": 144,\n                \"toLine\": 149,\n                \"oldContent\": \"    List<WorkflowInstance> queryTopNWorkflowInstance(WorkflowInstanceTopQuery workflowInstanceTopQuery);\",\n                \"newContent\": \"    List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\\\"size\\\") int size,\\n                                                     @Param(\\\"startTime\\\") Date startTime,\\n                                                     @Param(\\\"endTime\\\") Date endTime,\\n                                                     @Param(\\\"status\\\") WorkflowExecutionStatus status,\\n                                                     @Param(\\\"projectCode\\\") long projectCode);\"\n            },\n            {\n                \"fromLine\": 151,\n                \"toLine\": 153,\n                \"oldContent\": \"    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(WorkflowInstanceQuery workflowInstanceQuery,\\n                                                                  int[] states);\",\n                \"newContent\": \"    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                                  @Param(\\\"states\\\") int[] states);\"\n            },\n            {\n                \"fromLine\": 155,\n                \"toLine\": 157,\n                \"oldContent\": \"    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery,\\n                                                            int workflowDefinitionVersion,\\n                                                            int[] states);\",\n                \"newContent\": \"    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\\n                                                            @Param(\\\"states\\\") int[] states);\"\n            },\n            {\n                \"fromLine\": 159,\n                \"toLine\": 166,\n                \"oldContent\": \"    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              WorkflowInstanceQuery workflowInstanceQuery,\\n                                                              Integer state,\\n                                                              String host);\",\n                \"newContent\": \"    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\\n                                                              @Param(\\\"state\\\") Integer state,\\n                                                              @Param(\\\"host\\\") String host);\"\n            },\n            {\n                \"fromLine\": 168,\n                \"toLine\": 174,\n                \"oldContent\": \"    List<ExecuteStatusCount> countInstanceStateV2(WorkflowInstanceCountQuery workflowInstanceCountQuery);\",\n                \"newContent\": \"    List<ExecuteStatusCount> countInstanceStateV2(\\n                                                  @Param(\\\"startTime\\\") Date startTime,\\n                                                  @Param(\\\"endTime\\\") Date endTime,\\n                                                  @Param(\\\"projectCode\\\") Long projectCode,\\n                                                  @Param(\\\"workflowCode\\\") Long workflowCode,\\n                                                  @Param(\\\"model\\\") Integer model,\\n                                                  @Param(\\\"projectIds\\\") Set<Integer> projectIds);\"\n            }\n        ]\n    },\n    \"extractedClasses\": {\n        \"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\": \"public class WorkflowInstanceRequest {\\n\\n    private long workflowDefinitionCode;\\n    private String scheduleTime;\\n    private FailureStrategy failureStrategy;\\n    private WarningType warningType;\\n\\n    // getters and setters\\n}\\n\\npublic class TaskExecutionRequest {\\n\\n    private int workflowInstanceId;\\n    private String startNodeList;\\n    private TaskDependType taskDependType;\\n\\n    // getters and setters\\n}\",\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\": \"public class WorkflowInstanceQuery {\\n\\n    private Long workflowDefinitionCode;\\n    private String searchVal;\\n    private String executorName;\\n    private int[] statusArray;\\n    private String host;\\n    private Date startTime;\\n    private Date endTime;\\n\\n    // getters and setters\\n}\\n\\npublic class FailoverStateQuery {\\n\\n    private String host;\\n    private int[] stateArray;\\n\\n    // getters and setters\\n}\\n\\npublic class WorkflowInstanceUpdateState {\\n\\n    private Integer workflowInstanceId;\\n    private WorkflowExecutionStatus originState;\\n    private WorkflowExecutionStatus targetState;\\n\\n    // getters and setters\\n}\\n\\npublic class TenantCodeUpdate {\\n\\n    private String originTenantCode;\\n    private String destTenantCode;\\n\\n    // getters and setters\\n}\\n\\npublic class WorkerGroupNameUpdate {\\n\\n    private String originWorkerGroupName;\\n    private String destWorkerGroupName;\\n\\n    // getters and setters\\n}\\n\\npublic class WorkflowInstanceCountQuery {\\n\\n    private Date startTime;\\n    private Date endTime;\\n    private Collection<Long> projectCodes;\\n\\n    // getters and setters\\n}\\n\\npublic class WorkflowInstanceTopQuery {\\n\\n    private int size;\\n    private Date startTime;\\n    private Date endTime;\\n    private WorkflowExecutionStatus status;\\n    private long projectCode;\\n\\n    // getters and setters\\n}\",\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\": \"public class TaskInstanceInit {\\n\\n    private String host;\\n    private Date startTime;\\n    private String executePath;\\n\\n    // getters and setters\\n}\",\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\": \"public class ProjectParameterRequest {\\n\\n    private String projectParameterName;\\n    private String projectParameterValue;\\n    private String projectParameterDataType;\\n\\n    // getters and setters\\n}\\n\\npublic class ProjectParameterPagingRequest {\\n\\n    private Integer pageSize;\\n    private Integer pageNo;\\n    private String searchVal;\\n    private String projectParameterDataType;\\n\\n    // getters and setters\\n}\"\n    }\n}",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-dao: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[23,46] cannot access org.apache.dolphinscheduler.dao.entity.TaskInstance\n[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\n[ERROR]     file does not contain class org.apache.dolphinscheduler.dao.entity.TaskInstance\n[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImpl.java:[23,46] cannot access org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\n[ERROR]     file does not contain class org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper\n[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[1,8] class TaskInstanceInit is public, should be declared in a file named TaskInstanceInit.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[1,8] class WorkflowInstanceQuery is public, should be declared in a file named WorkflowInstanceQuery.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[14,8] class FailoverStateQuery is public, should be declared in a file named FailoverStateQuery.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[22,8] class WorkflowInstanceUpdateState is public, should be declared in a file named WorkflowInstanceUpdateState.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[31,8] class TenantCodeUpdate is public, should be declared in a file named TenantCodeUpdate.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[39,8] class WorkerGroupNameUpdate is public, should be declared in a file named WorkerGroupNameUpdate.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[47,8] class WorkflowInstanceCountQuery is public, should be declared in a file named WorkflowInstanceCountQuery.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[56,8] class WorkflowInstanceTopQuery is public, should be declared in a file named WorkflowInstanceTopQuery.java\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[40,56] cannot find symbol\n[ERROR]   symbol: class TaskInstance\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[42,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[46,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[49,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[53,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[105,59] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[105,11] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[119,65] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[119,11] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[134,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[143,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java:[147,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[30,47] cannot find symbol\n[ERROR]   symbol: class TaskInstance\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[40,32] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[49,36] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[54,39] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[63,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[72,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[80,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[88,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[100,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[110,10] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java:[121,5] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: interface org.apache.dolphinscheduler.dao.repository.TaskInstanceDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java:[71,43] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.utils.TaskCacheUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java:[125,50] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.utils.TaskCacheUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java:[202,50] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.utils.TaskCacheUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskInstanceUtils.java:[31,41] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.utils.TaskInstanceUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskInstanceUtils.java:[31,62] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.utils.TaskInstanceUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java:[4,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class TaskInstanceInit\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[8,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[9,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[25,13] cannot find symbol\n[ERROR]   symbol:   class WorkflowExecutionStatus\n[ERROR]   location: class WorkflowInstanceUpdateState\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[26,13] cannot find symbol\n[ERROR]   symbol:   class WorkflowExecutionStatus\n[ERROR]   location: class WorkflowInstanceUpdateState\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[49,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceCountQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[50,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceCountQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[51,13] cannot find symbol\n[ERROR]   symbol:   class Collection\n[ERROR]   location: class WorkflowInstanceCountQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[59,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceTopQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[60,13] cannot find symbol\n[ERROR]   symbol:   class Date\n[ERROR]   location: class WorkflowInstanceTopQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java:[61,13] cannot find symbol\n[ERROR]   symbol:   class WorkflowExecutionStatus\n[ERROR]   location: class WorkflowInstanceTopQuery\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImpl.java:[42,72] cannot find symbol\n[ERROR]   symbol: class WorkflowInstanceMapper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImpl.java:[49,45] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceMapper\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.WorkflowInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java:[245,38] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.AlertDao\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[49,50] cannot find symbol\n[ERROR]   symbol: class TaskInstance\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[52,13] cannot find symbol\n[ERROR]   symbol:   class WorkflowInstanceMapper\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[59,39] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[68,43] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[93,46] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[103,52] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[123,42] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[142,17] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[147,12] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[152,17] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[159,12] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[183,17] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[188,17] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java:[195,12] cannot find symbol\n[ERROR]   symbol:   class TaskInstance\n[ERROR]   location: class org.apache.dolphinscheduler.dao.repository.impl.TaskInstanceDaoImpl\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[41,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;\n[ERROR]   required: long,int\n[ERROR]   found:    no arguments\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[45,9] constructor TaskDefinition in class org.apache.dolphinscheduler.dao.entity.TaskDefinition cannot be applied to given types;\n[ERROR]   required: long,int\n[ERROR]   found:    no arguments\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[46,36] cannot find symbol\n[ERROR]   symbol:   method getCode()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[47,39] cannot find symbol\n[ERROR]   symbol:   method getVersion()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[48,36] cannot find symbol\n[ERROR]   symbol:   method getName()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[49,43] cannot find symbol\n[ERROR]   symbol:   method getDescription()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[50,38] cannot find symbol\n[ERROR]   symbol:   method getUserId()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[51,40] cannot find symbol\n[ERROR]   symbol:   method getUserName()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[52,43] cannot find symbol\n[ERROR]   symbol:   method getWorkerGroup()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[53,47] cannot find symbol\n[ERROR]   symbol:   method getEnvironmentCode()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[54,43] cannot find symbol\n[ERROR]   symbol:   method getProjectCode()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[55,43] cannot find symbol\n[ERROR]   symbol:   method getProjectName()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[56,43] cannot find symbol\n[ERROR]   symbol:   method getResourceIds()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[57,42] cannot find symbol\n[ERROR]   symbol:   method getTaskParams()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[58,13] cannot find symbol\n[ERROR]   symbol: method setTaskParamList(java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>)\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[59,13] cannot find symbol\n[ERROR]   symbol: method setTaskParamMap(java.util.Map<java.lang.String,java.lang.String>)\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[60,44] cannot find symbol\n[ERROR]   symbol:   method getTaskPriority()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[61,47] cannot find symbol\n[ERROR]   symbol:   method getTaskExecuteType()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[62,53] cannot find symbol\n[ERROR]   symbol:   method getTimeoutNotifyStrategy()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[63,40] cannot find symbol\n[ERROR]   symbol:   method getTaskType()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[64,39] cannot find symbol\n[ERROR]   symbol:   method getTimeout()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[65,41] cannot find symbol\n[ERROR]   symbol:   method getDelayTime()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[66,43] cannot find symbol\n[ERROR]   symbol:   method getTimeoutFlag()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[67,42] cannot find symbol\n[ERROR]   symbol:   method getUpdateTime()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[68,42] cannot find symbol\n[ERROR]   symbol:   method getCreateTime()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[69,49] cannot find symbol\n[ERROR]   symbol:   method getFailRetryInterval()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[70,46] cannot find symbol\n[ERROR]   symbol:   method getFailRetryTimes()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[71,36] cannot find symbol\n[ERROR]   symbol:   method getFlag()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[72,39] cannot find symbol\n[ERROR]   symbol:   method getIsCache()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[73,40] cannot find symbol\n[ERROR]   symbol:   method getModifyBy()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[74,13] cannot find symbol\n[ERROR]   symbol: method setCpuQuota(java.lang.Integer)\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[75,13] cannot find symbol\n[ERROR]   symbol: method setMemoryMax(java.lang.Integer)\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java:[76,47] cannot find symbol\n[ERROR]   symbol:   method getTaskExecuteType()\n[ERROR]   location: variable taskDefinition of type org.apache.dolphinscheduler.dao.entity.TaskDefinition\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java:[53,38] cannot find symbol\n[ERROR]   symbol:   method getAddrList()\n[ERROR]   location: variable workerGroup of type org.apache.dolphinscheduler.dao.entity.WorkerGroup\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-dao\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.common.enums.Flag;\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\nimport org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\nimport org.apache.dolphinscheduler.dao.model.TaskInstanceStatusCountDto;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport org.apache.ibatis.annotations.Param;\n\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n\n/**\n * task instance mapper interface\n */\npublic interface TaskInstanceMapper extends BaseMapper<TaskInstance> {\n\n    List<TaskInstance> findValidTaskListByWorkflowInstanceId(@Param(\"workflowInstanceId\") Integer workflowInstanceId,\n                                                             @Param(\"flag\") Flag flag,\n                                                             @Param(\"testFlag\") int testFlag);\n\n    TaskInstance queryByInstanceIdAndCode(@Param(\"workflowInstanceId\") int workflowInstanceId,\n                                          @Param(\"taskCode\") Long taskCode);\n\n    TaskInstance queryByCacheKey(@Param(\"cacheKey\") String cacheKey);\n\n    Boolean clearCacheByCacheKey(@Param(\"cacheKey\") String cacheKey);\n\n    List<TaskInstance> queryByWorkflowInstanceIdsAndTaskCodes(@Param(\"workflowInstanceIds\") List<Integer> workflowInstanceIds,\n                                                              @Param(\"taskCodes\") List<Long> taskCodes);\n\n    /**\n     * Statistics task instance group by given project codes list by start time\n     * <p>\n     * We only need project codes to determine whether the task instance belongs to the user or not.\n     *\n     * @param startTime    Statistics start time\n     * @param endTime      Statistics end time\n     * @param projectCodes Project codes list to filter\n     * @return List of ExecuteStatusCount\n     */\n    List<TaskInstanceStatusCountDto> countTaskInstanceStateByProjectCodes(@Param(\"startTime\") Date startTime,\n                                                                          @Param(\"endTime\") Date endTime,\n                                                                          @Param(\"projectCodes\") Collection<Long> projectCodes);\n\n    /**\n     * Statistics task instance group by given project ids list by start time\n     * <p>\n     * We only need project ids to determine whether the task instance belongs to the user or not.\n     *\n     * @param startTime    Statistics start time\n     * @param endTime      Statistics end time\n     * @param projectIds Project ids list to filter\n     * @return List of ExecuteStatusCount\n     */\n    List<ExecuteStatusCount> countTaskInstanceStateByProjectIdsV2(@Param(\"startTime\") Date startTime,\n                                                                  @Param(\"endTime\") Date endTime,\n                                                                  @Param(\"projectIds\") Set<Integer> projectIds);\n\n    /**\n     * Statistics task instance group by given project codes list by submit time\n     * <p>\n     * We only need project codes to determine whether the task instance belongs to the user or not.\n     *\n     * @param startTime    Statistics start time\n     * @param endTime      Statistics end time\n     * @param projectCode  projectCode\n     * @param model model\n     * @param projectIds projectIds\n     * @return List of ExecuteStatusCount\n     */\n    List<ExecuteStatusCount> countTaskInstanceStateByProjectCodesAndStatesBySubmitTimeV2(@Param(\"startTime\") Date startTime,\n                                                                                         @Param(\"endTime\") Date endTime,\n                                                                                         @Param(\"projectCode\") Long projectCode,\n                                                                                         @Param(\"workflowCode\") Long workflowCode,\n                                                                                         @Param(\"taskCode\") Long taskCode,\n                                                                                         @Param(\"model\") Integer model,\n                                                                                         @Param(\"projectIds\") Set<Integer> projectIds,\n                                                                                         @Param(\"states\") List<TaskExecutionStatus> states);\n\n    IPage<TaskInstance> queryTaskInstanceListPaging(IPage<TaskInstance> page,\n                                                    @Param(\"projectCode\") Long projectCode,\n                                                    @Param(\"workflowInstanceId\") Integer workflowInstanceId,\n                                                    @Param(\"workflowInstanceName\") String workflowInstanceName,\n                                                    @Param(\"searchVal\") String searchVal,\n                                                    @Param(\"taskName\") String taskName,\n                                                    @Param(\"taskCode\") Long taskCode,\n                                                    @Param(\"executorName\") String executorName,\n                                                    @Param(\"states\") int[] statusArray,\n                                                    @Param(\"host\") String host,\n                                                    @Param(\"taskExecuteType\") TaskExecuteType taskExecuteType,\n                                                    @Param(\"startTime\") Date startTime,\n                                                    @Param(\"endTime\") Date endTime);\n\n    IPage<TaskInstance> queryStreamTaskInstanceListPaging(IPage<TaskInstance> page,\n                                                          @Param(\"projectCode\") Long projectCode,\n                                                          @Param(\"workflowDefinitionName\") String workflowDefinitionName,\n                                                          @Param(\"searchVal\") String searchVal,\n                                                          @Param(\"taskName\") String taskName,\n                                                          @Param(\"taskCode\") Long taskCode,\n                                                          @Param(\"executorName\") String executorName,\n                                                          @Param(\"states\") int[] statusArray,\n                                                          @Param(\"host\") String host,\n                                                          @Param(\"taskExecuteType\") TaskExecuteType taskExecuteType,\n                                                          @Param(\"startTime\") Date startTime,\n                                                          @Param(\"endTime\") Date endTime);\n\n    void deleteByWorkflowInstanceId(@Param(\"workflowInstanceId\") int workflowInstanceId);\n\n    List<TaskInstance> findByWorkflowInstanceId(@Param(\"workflowInstanceId\") Integer workflowInstanceId);\n\n    /**\n     * find last task instance list in the date interval\n     *\n     * @param taskCodes taskCodes\n     * @param testFlag testFlag\n     * @return task instance list\n     */\n    List<TaskInstance> findLastTaskInstances(@Param(\"workflowInstanceId\") Integer workflowInstanceId,\n                                             @Param(\"taskCodes\") Set<Long> taskCodes,\n                                             @Param(\"testFlag\") int testFlag);\n\n    TaskInstance findLastTaskInstance(@Param(\"workflowInstanceId\") Integer workflowInstanceId,\n                                      @Param(\"taskCode\") long depTaskCode,\n                                      @Param(\"testFlag\") int testFlag);\n\n    void updateTaskInstanceState(@Param(\"taskInstanceId\") Integer taskInstanceId,\n                                 @Param(\"originState\") int originState,\n                                 @Param(\"targetState\") int targetState);\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImpl.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.repository.impl;\n\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstanceRelation;\nimport org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper;\nimport org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceRelationMapper;\nimport org.apache.dolphinscheduler.dao.repository.BaseDao;\nimport org.apache.dolphinscheduler.dao.repository.WorkflowInstanceDao;\nimport org.apache.dolphinscheduler.plugin.task.api.model.DateInterval;\n\nimport java.util.List;\n\nimport lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Isolation;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Slf4j\n@Repository\npublic class WorkflowInstanceDaoImpl extends BaseDao<WorkflowInstance, WorkflowInstanceMapper>\n        implements\n            WorkflowInstanceDao {\n\n    @Autowired\n    private WorkflowInstanceRelationMapper workflowInstanceRelationMapper;\n\n    public WorkflowInstanceDaoImpl(@NonNull WorkflowInstanceMapper workflowInstanceMapper) {\n        super(workflowInstanceMapper);\n    }\n\n    @Override\n    public void upsertWorkflowInstance(@NonNull WorkflowInstance workflowInstance) {\n        if (workflowInstance.getId() != null) {\n            updateById(workflowInstance);\n        } else {\n            insert(workflowInstance);\n        }\n    }\n\n    @Override\n    public void updateWorkflowInstanceState(Integer workflowInstanceId, WorkflowExecutionStatus originalStatus,\n                                            WorkflowExecutionStatus targetStatus) {\n        int update = mybatisMapper.updateWorkflowInstanceState(workflowInstanceId, originalStatus, targetStatus);\n        if (update != 1) {\n            WorkflowInstance workflowInstance = mybatisMapper.selectById(workflowInstanceId);\n            if (workflowInstance == null) {\n                throw new UnsupportedOperationException(\"updateWorkflowInstance \" + workflowInstanceId\n                        + \" state failed, the workflow instance is not exist in db\");\n            }\n            throw new UnsupportedOperationException(\n                    \"updateWorkflowInstance \" + workflowInstanceId + \" state failed, expect original state is \"\n                            + originalStatus.name() + \" actual state is : {} \" + workflowInstance.getState().name());\n        }\n    }\n\n    @Override\n    @Transactional(propagation = Propagation.REQUIRES_NEW, isolation = Isolation.READ_COMMITTED, rollbackFor = Exception.class)\n    public void performTransactionalUpsert(WorkflowInstance workflowInstance) {\n        this.upsertWorkflowInstance(workflowInstance);\n    }\n\n    /**\n     * find last scheduler process instance in the date interval\n     *\n     * @param workflowDefinitionCode definitionCode\n     * @param taskDefinitionCode    definitionCode\n     * @param dateInterval          dateInterval\n     * @return process instance\n     */\n    @Override\n    public WorkflowInstance queryLastSchedulerWorkflowInterval(Long workflowDefinitionCode, Long taskDefinitionCode,\n                                                               DateInterval dateInterval,\n                                                               int testFlag) {\n        return mybatisMapper.queryLastSchedulerWorkflow(\n                workflowDefinitionCode,\n                taskDefinitionCode,\n                dateInterval.getStartTime(),\n                dateInterval.getEndTime(),\n                testFlag);\n    }\n\n    /**\n     * find last manual process instance interval\n     *\n     * @param definitionCode process definition code\n     * @param taskCode       taskCode\n     * @param dateInterval   dateInterval\n     * @return process instance\n     */\n    @Override\n    public WorkflowInstance queryLastManualWorkflowInterval(Long definitionCode, Long taskCode,\n                                                            DateInterval dateInterval,\n                                                            int testFlag) {\n        return mybatisMapper.queryLastManualWorkflow(definitionCode,\n                taskCode,\n                dateInterval.getStartTime(),\n                dateInterval.getEndTime(),\n                testFlag);\n    }\n\n    /**\n     * query first schedule process instance\n     *\n     * @param definitionCode definitionCode\n     * @return process instance\n     */\n    @Override\n    public WorkflowInstance queryFirstScheduleWorkflowInstance(Long definitionCode) {\n        return mybatisMapper.queryFirstScheduleWorkflowInstance(definitionCode);\n    }\n\n    /**\n     * query first manual process instance\n     *\n     * @param definitionCode definitionCode\n     * @return process instance\n     */\n    @Override\n    public WorkflowInstance queryFirstStartWorkflowInstance(Long definitionCode) {\n        return mybatisMapper.queryFirstStartWorkflowInstance(definitionCode);\n    }\n\n    @Override\n    public WorkflowInstance querySubWorkflowInstanceByParentId(Integer workflowInstanceId, Integer taskInstanceId) {\n        WorkflowInstance workflowInstance = null;\n        WorkflowInstanceRelation workflowInstanceRelation =\n                workflowInstanceRelationMapper.queryByParentId(workflowInstanceId, taskInstanceId);\n        if (workflowInstanceRelation == null || workflowInstanceRelation.getWorkflowInstanceId() == 0) {\n            return workflowInstance;\n        }\n        workflowInstance = queryById(workflowInstanceRelation.getWorkflowInstanceId());\n        return workflowInstance;\n    }\n\n    @Override\n    public List<WorkflowInstance> queryByWorkflowCodeVersionStatus(Long workflowDefinitionCode,\n                                                                   int workflowDefinitionVersion,\n                                                                   int[] states) {\n        return mybatisMapper.queryByWorkflowCodeVersionStatus(workflowDefinitionCode, workflowDefinitionVersion,\n                states);\n    }\n\n    @Override\n    public List<String> queryNeedFailoverMasters() {\n        return mybatisMapper\n                .queryNeedFailoverWorkflowInstanceHost(WorkflowExecutionStatus.getNeedFailoverWorkflowInstanceState());\n    }\n\n    @Override\n    public List<WorkflowInstance> queryNeedFailoverWorkflowInstances(String masterAddress) {\n        return mybatisMapper.queryByHostAndStatus(masterAddress,\n                WorkflowExecutionStatus.getNeedFailoverWorkflowInstanceState());\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\npublic class TaskInstanceInit {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // getters and setters\n}",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\npublic class WorkflowInstanceQuery {\n\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // getters and setters\n}\n\npublic class FailoverStateQuery {\n\n    private String host;\n    private int[] stateArray;\n\n    // getters and setters\n}\n\npublic class WorkflowInstanceUpdateState {\n\n    private Integer workflowInstanceId;\n    private WorkflowExecutionStatus originState;\n    private WorkflowExecutionStatus targetState;\n\n    // getters and setters\n}\n\npublic class TenantCodeUpdate {\n\n    private String originTenantCode;\n    private String destTenantCode;\n\n    // getters and setters\n}\n\npublic class WorkerGroupNameUpdate {\n\n    private String originWorkerGroupName;\n    private String destWorkerGroupName;\n\n    // getters and setters\n}\n\npublic class WorkflowInstanceCountQuery {\n\n    private Date startTime;\n    private Date endTime;\n    private Collection<Long> projectCodes;\n\n    // getters and setters\n}\n\npublic class WorkflowInstanceTopQuery {\n\n    private int size;\n    private Date startTime;\n    private Date endTime;\n    private WorkflowExecutionStatus status;\n    private long projectCode;\n\n    // getters and setters\n}",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.repository;\n\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * Task Instance DAO\n */\npublic interface TaskInstanceDao extends IDao<TaskInstance> {\n\n    /**\n     * Update or Insert task instance to DB.\n     * ID is null -> Insert\n     * ID is not null -> Update\n     *\n     * @param taskInstance task instance\n     * @return result\n     */\n    boolean upsertTaskInstance(TaskInstance taskInstance);\n\n    /**\n     * Submit a task instance to DB.\n     *\n     * @param taskInstance    task instance\n     * @param workflowInstance workflow instance\n     * @return task instance\n     */\n    boolean submitTaskInstanceToDB(TaskInstance taskInstance, WorkflowInstance workflowInstance);\n\n    /**\n     * Mark the task instance as invalid\n     */\n    void markTaskInstanceInvalid(List<TaskInstance> taskInstances);\n\n    /**\n     * Query list of valid task instance by workflow instance id\n     *\n     * @param workflowInstanceId workflowInstanceId\n     * @param testFlag          test flag\n     * @return list of valid task instance\n     */\n    List<TaskInstance> queryValidTaskListByWorkflowInstanceId(Integer workflowInstanceId, int testFlag);\n\n    /**\n     * Query list of task instance by workflow instance id and task code\n     *\n     * @param workflowInstanceId workflowInstanceId\n     * @param taskCode          task code\n     * @return list of valid task instance\n     */\n    TaskInstance queryByWorkflowInstanceIdAndTaskCode(Integer workflowInstanceId, Long taskCode);\n\n    /**\n     * find previous task list by work workflow id\n     *\n     * @param workflowInstanceId workflowInstanceId\n     * @return task instance list\n     */\n    List<TaskInstance> queryPreviousTaskListByWorkflowInstanceId(Integer workflowInstanceId);\n\n    /**\n     * find task instance by cache_key\n     *\n     * @param cacheKey cache key\n     * @return task instance\n     */\n    TaskInstance queryByCacheKey(String cacheKey);\n\n    /**\n     * clear task instance cache by cache_key\n     *\n     * @param cacheKey cache key\n     * @return task instance\n     */\n    Boolean clearCacheByCacheKey(String cacheKey);\n\n    void deleteByWorkflowInstanceId(int workflowInstanceId);\n\n    List<TaskInstance> queryByWorkflowInstanceId(Integer workflowInstanceId);\n\n    /**\n     * find last task instance list corresponding to taskCodes in the date interval\n     *\n     * @param workflowInstanceId Task's parent workflow instance id\n     * @param taskCodes         taskCodes\n     * @param testFlag          test flag\n     * @return task instance list\n     */\n    List<TaskInstance> queryLastTaskInstanceListIntervalInWorkflowInstance(Integer workflowInstanceId,\n                                                                           Set<Long> taskCodes, int testFlag);\n\n    /**\n     * find last task instance corresponding to taskCode in the date interval\n     *\n     * @param workflowInstanceId Task's parent workflow instance id\n     * @param depTaskCode       taskCode\n     * @param testFlag          test flag\n     * @return task instance\n     */\n    TaskInstance queryLastTaskInstanceIntervalInWorkflowInstance(Integer workflowInstanceId,\n                                                                 long depTaskCode, int testFlag);\n\n    void updateTaskInstanceState(Integer taskInstanceId, TaskExecutionStatus originState,\n                                 TaskExecutionStatus targetState);\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.utils;\n\nimport static org.apache.dolphinscheduler.common.constants.Constants.CRC_SUFFIX;\n\nimport org.apache.dolphinscheduler.common.utils.FileUtils;\nimport org.apache.dolphinscheduler.common.utils.JSONUtils;\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\nimport org.apache.dolphinscheduler.plugin.storage.api.StorageOperator;\nimport org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.Direct;\nimport org.apache.dolphinscheduler.plugin.task.api.model.Property;\n\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport com.fasterxml.jackson.databind.JsonNode;\n\n@Slf4j\npublic class TaskCacheUtils {\n\n    private TaskCacheUtils() {\n        throw new IllegalStateException(\"Utility class\");\n    }\n\n    public static final String MERGE_TAG = \"-\";\n\n    /**\n     * generate cache key for task instance\n     * the follow message will be used to generate cache key\n     * 2. task version\n     * 3. task is cache\n     * 4. input VarPool, from upstream task and workflow global parameters\n     * @param taskInstance task instance\n     * @param taskExecutionContext taskExecutionContext\n     * @param storageOperator storageOperate\n     * @return cache key\n     */\n    public static String generateCacheKey(TaskInstance taskInstance, TaskExecutionContext taskExecutionContext,\n                                          StorageOperator storageOperator) {\n        List<String> keyElements = new ArrayList<>();\n        keyElements.add(String.valueOf(taskInstance.getTaskCode()));\n        keyElements.add(String.valueOf(taskInstance.getTaskDefinitionVersion()));\n        keyElements.add(String.valueOf(taskInstance.getIsCache().getCode()));\n        keyElements.add(String.valueOf(taskInstance.getEnvironmentConfig()));\n        keyElements.add(getTaskInputVarPoolData(taskInstance, taskExecutionContext, storageOperator));\n        String data = StringUtils.join(keyElements, \"_\");\n        return DigestUtils.sha256Hex(data);\n    }\n\n    /**\n     * generate cache key for task instance which is cache execute\n     * this key will record which cache task instance will be copied, and cache key will be used\n     * tagCacheKey = sourceTaskId + \"-\" + cacheKey\n     * @param sourceTaskId source task id\n     * @param cacheKey cache key\n     * @return tagCacheKey\n     */\n    public static String generateTagCacheKey(Integer sourceTaskId, String cacheKey) {\n        return sourceTaskId + MERGE_TAG + cacheKey;\n    }\n\n    /**\n     * revert cache key tag to source task id and cache key\n     * @param tagCacheKey cache key\n     * @return Pair<Integer, String>, first is source task id, second is cache key\n     */\n    public static Pair<Integer, String> revertCacheKey(String tagCacheKey) {\n        Pair<Integer, String> taskIdAndCacheKey;\n        if (tagCacheKey == null) {\n            taskIdAndCacheKey = Pair.of(-1, \"\");\n            return taskIdAndCacheKey;\n        }\n        if (tagCacheKey.contains(MERGE_TAG)) {\n            String[] split = tagCacheKey.split(MERGE_TAG);\n            if (split.length == 2) {\n                taskIdAndCacheKey = Pair.of(Integer.parseInt(split[0]), split[1]);\n            } else {\n                taskIdAndCacheKey = Pair.of(-1, \"\");\n            }\n            return taskIdAndCacheKey;\n        } else {\n            return Pair.of(-1, tagCacheKey);\n        }\n    }\n\n    /**\n     * get hash data of task input var pool\n     * there are two parts of task input var pool: from upstream task and workflow global parameters\n     * @param taskInstance task instance\n     * taskExecutionContext taskExecutionContext\n     */\n    public static String getTaskInputVarPoolData(TaskInstance taskInstance, TaskExecutionContext context,\n                                                 StorageOperator storageOperator) {\n        JsonNode taskParams = JSONUtils.parseObject(taskInstance.getTaskParams());\n\n        // The set of input values considered from localParams in the taskParams\n        Set<String> propertyInSet = JSONUtils.toList(taskParams.get(\"localParams\").toString(), Property.class).stream()\n                .filter(property -> property.getDirect().equals(Direct.IN))\n                .map(Property::getProp).collect(Collectors.toSet());\n\n        // The set of input values considered from `${var}` form task definition\n        propertyInSet.addAll(getScriptVarInSet(taskInstance));\n\n        // var pool value from upstream task\n        List<Property> varPool = JSONUtils.toList(taskInstance.getVarPool(), Property.class);\n\n        Map<String, String> fileCheckSumMap = new HashMap<>();\n        List<Property> fileInput = varPool.stream().filter(property -> property.getType().equals(DataType.FILE))\n                .collect(Collectors.toList());\n        fileInput.forEach(\n                property -> fileCheckSumMap.put(property.getProp(),\n                        getValCheckSum(property, context, storageOperator)));\n\n        // var pool value from workflow global parameters\n        if (context.getPrepareParamsMap() != null) {\n            Set<String> taskVarPoolSet = varPool.stream().map(Property::getProp).collect(Collectors.toSet());\n            List<Property> globalContextVarPool = context.getPrepareParamsMap().entrySet().stream()\n                    .filter(entry -> !taskVarPoolSet.contains(entry.getKey()))\n                    .map(Map.Entry::getValue)\n                    .collect(Collectors.toList());\n            varPool.addAll(globalContextVarPool);\n        }\n\n        // only consider var pool value which is in propertyInSet\n        varPool = varPool.stream()\n                .filter(property -> property.getDirect().equals(Direct.IN))\n                .filter(property -> propertyInSet.contains(property.getProp()))\n                .sorted(Comparator.comparing(Property::getProp))\n                .collect(Collectors.toList());\n\n        varPool.forEach(property -> {\n            if (property.getType() == DataType.FILE) {\n                property.setValue(fileCheckSumMap.get(property.getValue()));\n            }\n        });\n        return JSONUtils.toJsonString(varPool);\n    }\n\n    /**\n     * get checksum from crc32 file of file property in varPool\n     * cache can be used if content of upstream output files are the same\n     * @param fileProperty\n     * @param context\n     * @param storageOperator\n     */\n    public static String getValCheckSum(Property fileProperty, TaskExecutionContext context,\n                                        StorageOperator storageOperator) {\n        String resourceCRCPath = fileProperty.getValue() + CRC_SUFFIX;\n        String resourceCRCWholePath =\n                storageOperator.getStorageFileAbsolutePath(context.getTenantCode(), resourceCRCPath);\n        String targetPath = String.format(\"%s/%s\", context.getExecutePath(), resourceCRCPath);\n        log.info(\"{} --- Remote:{} to Local:{}\", \"CRC file\", resourceCRCWholePath, targetPath);\n        String crcString = \"\";\n        try {\n            storageOperator.download(resourceCRCWholePath, targetPath, true);\n            crcString = FileUtils.readFile2Str(new FileInputStream(targetPath));\n            fileProperty.setValue(crcString);\n        } catch (IOException e) {\n            log.error(\"Replace checksum failed for file property {}.\", fileProperty.getProp());\n        }\n        return crcString;\n    }\n\n    /**\n     * get var in set from task definition\n     * @param taskInstance task instance\n     * @return var in set\n     */\n    public static List<String> getScriptVarInSet(TaskInstance taskInstance) {\n        Pattern pattern = Pattern.compile(\"\\\\$\\\\{(.+?)\\\\}\");\n        Matcher matcher = pattern.matcher(taskInstance.getTaskParams());\n\n        List<String> varInSet = new ArrayList<>();\n        while (matcher.find()) {\n            varInSet.add(matcher.group(1));\n        }\n        return varInSet;\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskInstanceUtils.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.utils;\n\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\n\npublic class TaskInstanceUtils {\n\n    /**\n     * Copy the property of given source {@link TaskInstance} to target.\n     *\n     * @param source Given task instance, copy from.\n     * @param target Given task instance, copy to\n     * @return a soft copy of given task instance.\n     */\n    public static void copyTaskInstance(TaskInstance source, TaskInstance target) {\n        target.setId(source.getId());\n        target.setName(source.getName());\n        target.setTaskType(source.getTaskType());\n        target.setWorkflowInstanceId(source.getWorkflowInstanceId());\n        target.setWorkflowInstanceName(source.getWorkflowInstanceName());\n        target.setProjectCode(source.getProjectCode());\n        target.setTaskCode(source.getTaskCode());\n        target.setTaskDefinitionVersion(source.getTaskDefinitionVersion());\n        target.setWorkflowInstanceName(source.getWorkflowInstanceName());\n        target.setTaskGroupPriority(source.getTaskGroupPriority());\n        target.setState(source.getState());\n        target.setFirstSubmitTime(source.getFirstSubmitTime());\n        target.setSubmitTime(source.getSubmitTime());\n        target.setStartTime(source.getStartTime());\n        target.setEndTime(source.getEndTime());\n        target.setHost(source.getHost());\n        target.setExecutePath(source.getExecutePath());\n        target.setLogPath(source.getLogPath());\n        target.setRetryTimes(source.getRetryTimes());\n        target.setAlertFlag(source.getAlertFlag());\n        target.setWorkflowInstance(source.getWorkflowInstance());\n        target.setWorkflowDefinition(source.getWorkflowDefinition());\n        target.setTaskDefine(source.getTaskDefine());\n        target.setPid(source.getPid());\n        target.setAppLink(source.getAppLink());\n        target.setFlag(source.getFlag());\n        // todo: we need to cpoy the task params and then copy switchDependency, since the setSwitchDependency rely on\n        // task params, this is really a very bad practice.\n        target.setTaskParams(source.getTaskParams());\n        target.setDuration(source.getDuration());\n        target.setMaxRetryTimes(source.getMaxRetryTimes());\n        target.setRetryInterval(source.getRetryInterval());\n        target.setTaskInstancePriority(source.getTaskInstancePriority());\n        target.setWorkerGroup(source.getWorkerGroup());\n        target.setEnvironmentCode(source.getEnvironmentCode());\n        target.setEnvironmentConfig(source.getEnvironmentConfig());\n        target.setExecutorId(source.getExecutorId());\n        target.setVarPool(source.getVarPool());\n        target.setExecutorName(source.getExecutorName());\n        target.setDelayTime(source.getDelayTime());\n        target.setDryRun(source.getDryRun());\n        target.setTaskGroupId(source.getTaskGroupId());\n        target.setCpuQuota(source.getCpuQuota());\n        target.setMemoryMax(source.getMemoryMax());\n        target.setTaskExecuteType(source.getTaskExecuteType());\n        target.setTestFlag(source.getTestFlag());\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao;\n\nimport org.apache.dolphinscheduler.common.enums.AlertEvent;\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\nimport org.apache.dolphinscheduler.common.enums.AlertType;\nimport org.apache.dolphinscheduler.common.enums.AlertWarnLevel;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.common.utils.JSONUtils;\nimport org.apache.dolphinscheduler.dao.entity.Alert;\nimport org.apache.dolphinscheduler.dao.entity.AlertPluginInstance;\nimport org.apache.dolphinscheduler.dao.entity.AlertSendStatus;\nimport org.apache.dolphinscheduler.dao.entity.ProjectUser;\nimport org.apache.dolphinscheduler.dao.entity.ServerAlertContent;\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowAlertContent;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.dao.mapper.AlertGroupMapper;\nimport org.apache.dolphinscheduler.dao.mapper.AlertMapper;\nimport org.apache.dolphinscheduler.dao.mapper.AlertPluginInstanceMapper;\nimport org.apache.dolphinscheduler.dao.mapper.AlertSendStatusMapper;\n\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.google.common.base.Strings;\nimport com.google.common.collect.Lists;\n\n@Component\n@Slf4j\npublic class AlertDao {\n\n    private static final Integer QUERY_ALERT_THRESHOLD = 100;\n\n    private static final int ADMIN_ALERT_GROUP_ID = 1;\n\n    @Value(\"${alert.alarm-suppression.crash:60}\")\n    private Integer crashAlarmSuppression;\n\n    @Autowired\n    private AlertMapper alertMapper;\n\n    @Autowired\n    private AlertPluginInstanceMapper alertPluginInstanceMapper;\n\n    @Autowired\n    private AlertGroupMapper alertGroupMapper;\n\n    @Autowired\n    private AlertSendStatusMapper alertSendStatusMapper;\n\n    /**\n     * insert alert\n     *\n     * @param alert alert\n     * @return add alert result\n     */\n    public int addAlert(Alert alert) {\n        if (null == alert.getAlertGroupId() || NumberUtils.INTEGER_ZERO.equals(alert.getAlertGroupId())) {\n            log.warn(\"the value of alertGroupId is null or 0 \");\n            return 0;\n        }\n\n        String sign = generateSign(alert);\n        alert.setSign(sign);\n        int count = alertMapper.insert(alert);\n        log.info(\"add alert to db , alert: {}\", alert);\n        return count;\n    }\n\n    /**\n     * update alert sending(execution) status\n     *\n     * @param alertStatus alertStatus\n     * @param log         alert results json\n     * @param id          id\n     * @return update alert result\n     */\n    public int updateAlert(AlertStatus alertStatus, String log, int id) {\n        Alert alert = new Alert();\n        alert.setId(id);\n        alert.setAlertStatus(alertStatus);\n        alert.setUpdateTime(new Date());\n        alert.setLog(log);\n        return alertMapper.updateById(alert);\n    }\n\n    /**\n     * generate sign for alert\n     *\n     * @param alert alert\n     * @return sign's str\n     */\n    private String generateSign(Alert alert) {\n        return Optional.of(alert)\n                .map(Alert::getContent)\n                .map(DigestUtils::sha1Hex)\n                .map(String::toLowerCase)\n                .orElse(\"\");\n    }\n\n    /**\n     * add AlertSendStatus\n     *\n     * @param sendStatus            alert send status\n     * @param log                   log\n     * @param alertId               alert id\n     * @param alertPluginInstanceId alert plugin instance id\n     * @return insert count\n     */\n    public int addAlertSendStatus(AlertStatus sendStatus, String log, int alertId, int alertPluginInstanceId) {\n        AlertSendStatus alertSendStatus = new AlertSendStatus();\n        alertSendStatus.setAlertId(alertId);\n        alertSendStatus.setAlertPluginInstanceId(alertPluginInstanceId);\n        alertSendStatus.setSendStatus(sendStatus);\n        alertSendStatus.setLog(log);\n        alertSendStatus.setCreateTime(new Date());\n        return alertSendStatusMapper.insert(alertSendStatus);\n    }\n\n    public int insertAlertSendStatus(List<AlertSendStatus> alertSendStatuses) {\n        if (CollectionUtils.isEmpty(alertSendStatuses)) {\n            return 0;\n        }\n        return alertSendStatusMapper.batchInsert(alertSendStatuses);\n    }\n\n    /**\n     * MasterServer or WorkerServer stopped\n     *\n     * @param host         host\n     * @param serverType   serverType\n     */\n    public void sendServerStoppedAlert(String host, String serverType) {\n        ServerAlertContent serverStopAlertContent = ServerAlertContent.newBuilder().type(serverType)\n                .host(host)\n                .event(AlertEvent.SERVER_DOWN)\n                .warningLevel(AlertWarnLevel.SERIOUS).build();\n        String content = JSONUtils.toJsonString(Lists.newArrayList(serverStopAlertContent));\n\n        Alert alert = new Alert();\n        alert.setTitle(\"Fault tolerance warning\");\n        alert.setWarningType(WarningType.FAILURE);\n        alert.setAlertStatus(AlertStatus.WAIT_EXECUTION);\n        alert.setContent(content);\n        alert.setAlertGroupId(ADMIN_ALERT_GROUP_ID);\n        alert.setCreateTime(new Date());\n        alert.setUpdateTime(new Date());\n        alert.setAlertType(AlertType.FAULT_TOLERANCE_WARNING);\n        alert.setSign(generateSign(alert));\n        // we use this method to avoid insert duplicate alert(issue #5525)\n        // we modified this method to optimize performance(issue #9174)\n        Date crashAlarmSuppressionStartTime = Date.from(\n                LocalDateTime.now().plusMinutes(-crashAlarmSuppression).atZone(ZoneId.systemDefault()).toInstant());\n        alertMapper.insertAlertWhenServerCrash(alert, crashAlarmSuppressionStartTime);\n    }\n\n    /**\n     * workflow time out alert\n     *\n     * @param workflowInstance workflowInstance\n     * @param projectUser     projectUser\n     */\n    public void sendWorkflowTimeoutAlert(WorkflowInstance workflowInstance, ProjectUser projectUser) {\n        int alertGroupId = workflowInstance.getWarningGroupId();\n        Alert alert = new Alert();\n        List<WorkflowAlertContent> workflowAlertContentList = new ArrayList<>(1);\n        WorkflowAlertContent workflowAlertContent = WorkflowAlertContent.builder()\n                .projectCode(projectUser.getProjectCode())\n                .projectName(projectUser.getProjectName())\n                .owner(projectUser.getUserName())\n                .workflowInstanceId(workflowInstance.getId())\n                .workflowDefinitionCode(workflowInstance.getWorkflowDefinitionCode())\n                .workflowInstanceName(workflowInstance.getName())\n                .commandType(workflowInstance.getCommandType())\n                .workflowExecutionStatus(workflowInstance.getState())\n                .runTimes(workflowInstance.getRunTimes())\n                .workflowStartTime(workflowInstance.getStartTime())\n                .workflowHost(workflowInstance.getHost())\n                .event(AlertEvent.TIME_OUT)\n                .warnLevel(AlertWarnLevel.MIDDLE)\n                .build();\n        workflowAlertContentList.add(workflowAlertContent);\n        String content = JSONUtils.toJsonString(workflowAlertContentList);\n        alert.setTitle(\"Workflow Timeout Warn\");\n        alert.setProjectCode(projectUser.getProjectCode());\n        alert.setWorkflowDefinitionCode(workflowInstance.getWorkflowDefinitionCode());\n        alert.setWorkflowInstanceId(workflowInstance.getId());\n        alert.setAlertType(AlertType.WORKFLOW_INSTANCE_TIMEOUT);\n        saveTaskTimeoutAlert(alert, content, alertGroupId);\n    }\n\n    private void saveTaskTimeoutAlert(Alert alert, String content, int alertGroupId) {\n        alert.setAlertGroupId(alertGroupId);\n        alert.setWarningType(WarningType.FAILURE);\n        alert.setContent(content);\n        alert.setCreateTime(new Date());\n        alert.setUpdateTime(new Date());\n        String sign = generateSign(alert);\n        alert.setSign(sign);\n        alertMapper.insert(alert);\n    }\n\n    /**\n     * task timeout warn\n     *\n     * @param workflowInstance workflowInstance\n     * @param taskInstance    taskInstance\n     * @param projectUser     projectUser\n     */\n    public void sendTaskTimeoutAlert(WorkflowInstance workflowInstance,\n                                     TaskInstance taskInstance,\n                                     ProjectUser projectUser) {\n        Alert alert = new Alert();\n        List<WorkflowAlertContent> workflowAlertContentList = new ArrayList<>(1);\n        WorkflowAlertContent workflowAlertContent = WorkflowAlertContent.builder()\n                .projectCode(projectUser.getProjectCode())\n                .projectName(projectUser.getProjectName())\n                .owner(projectUser.getUserName())\n                .workflowInstanceId(workflowInstance.getId())\n                .workflowDefinitionCode(workflowInstance.getWorkflowDefinitionCode())\n                .workflowInstanceName(workflowInstance.getName())\n                .taskCode(taskInstance.getTaskCode())\n                .taskName(taskInstance.getName())\n                .taskType(taskInstance.getTaskType())\n                .taskStartTime(taskInstance.getStartTime())\n                .taskHost(taskInstance.getHost())\n                .event(AlertEvent.TIME_OUT)\n                .warnLevel(AlertWarnLevel.MIDDLE)\n                .build();\n        workflowAlertContentList.add(workflowAlertContent);\n        String content = JSONUtils.toJsonString(workflowAlertContentList);\n        alert.setTitle(\"Task Timeout Warn\");\n        alert.setProjectCode(projectUser.getProjectCode());\n        alert.setWorkflowDefinitionCode(workflowInstance.getWorkflowDefinitionCode());\n        alert.setWorkflowInstanceId(workflowInstance.getId());\n        alert.setAlertType(AlertType.TASK_TIMEOUT);\n        saveTaskTimeoutAlert(alert, content, workflowInstance.getWarningGroupId());\n    }\n\n    /**\n     * List pending alerts which id > minAlertId and status = {@link AlertStatus#WAIT_EXECUTION} order by id asc.\n     */\n    public List<Alert> listPendingAlerts(int minAlertId) {\n        return alertMapper.listingAlertByStatus(minAlertId, AlertStatus.WAIT_EXECUTION.getCode(),\n                QUERY_ALERT_THRESHOLD);\n    }\n\n    public List<Alert> listAlerts(int workflowInstanceId) {\n        LambdaQueryWrapper<Alert> wrapper = new LambdaQueryWrapper<Alert>()\n                .eq(Alert::getWorkflowInstanceId, workflowInstanceId);\n        return alertMapper.selectList(wrapper);\n    }\n\n    /**\n     * list all alert plugin instance by alert group id\n     *\n     * @param alertGroupId alert group id\n     * @return AlertPluginInstance list\n     */\n    public List<AlertPluginInstance> listInstanceByAlertGroupId(int alertGroupId) {\n        String alertInstanceIdsParam = alertGroupMapper.queryAlertGroupInstanceIdsById(alertGroupId);\n        if (!Strings.isNullOrEmpty(alertInstanceIdsParam)) {\n            String[] idsArray = alertInstanceIdsParam.split(\",\");\n            List<Integer> ids = Arrays.stream(idsArray)\n                    .map(s -> Integer.parseInt(s.trim()))\n                    .collect(Collectors.toList());\n            return alertPluginInstanceMapper.queryByIds(ids);\n        }\n        return null;\n    }\n\n    public AlertPluginInstanceMapper getAlertPluginInstanceMapper() {\n        return alertPluginInstanceMapper;\n    }\n\n    public void setAlertPluginInstanceMapper(AlertPluginInstanceMapper alertPluginInstanceMapper) {\n        this.alertPluginInstanceMapper = alertPluginInstanceMapper;\n    }\n\n    public AlertGroupMapper getAlertGroupMapper() {\n        return alertGroupMapper;\n    }\n\n    public void setAlertGroupMapper(AlertGroupMapper alertGroupMapper) {\n        this.alertGroupMapper = alertGroupMapper;\n    }\n\n    public void setCrashAlarmSuppression(Integer crashAlarmSuppression) {\n        this.crashAlarmSuppression = crashAlarmSuppression;\n    }\n\n    public void deleteByWorkflowInstanceId(Integer workflowInstanceId) {\n        if (workflowInstanceId == null) {\n            return;\n        }\n        List<Alert> alertList = alertMapper.selectByWorkflowInstanceId(workflowInstanceId);\n        if (CollectionUtils.isEmpty(alertList)) {\n            return;\n        }\n        alertMapper.deleteByWorkflowInstanceId(workflowInstanceId);\n        List<Integer> alertIds = alertList\n                .stream()\n                .map(Alert::getId)\n                .collect(Collectors.toList());\n        alertSendStatusMapper.deleteByAlertIds(alertIds);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.repository.impl;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Flag;\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\nimport org.apache.dolphinscheduler.dao.entity.TaskInstance;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\nimport org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;\nimport org.apache.dolphinscheduler.dao.mapper.WorkflowInstanceMapper;\nimport org.apache.dolphinscheduler.dao.repository.BaseDao;\nimport org.apache.dolphinscheduler.dao.repository.TaskInstanceDao;\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\n\nimport lombok.NonNull;\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\n\n/**\n * Task Instance DAO implementation\n */\n@Repository\n@Slf4j\npublic class TaskInstanceDaoImpl extends BaseDao<TaskInstance, TaskInstanceMapper> implements TaskInstanceDao {\n\n    @Autowired\n    private WorkflowInstanceMapper workflowInstanceMapper;\n\n    public TaskInstanceDaoImpl(@NonNull TaskInstanceMapper taskInstanceMapper) {\n        super(taskInstanceMapper);\n    }\n\n    @Override\n    public boolean upsertTaskInstance(TaskInstance taskInstance) {\n        if (taskInstance.getId() != null) {\n            return updateById(taskInstance);\n        } else {\n            return insert(taskInstance) > 0;\n        }\n    }\n\n    @Override\n    public boolean submitTaskInstanceToDB(TaskInstance taskInstance, WorkflowInstance workflowInstance) {\n        WorkflowExecutionStatus processInstanceState = workflowInstance.getState();\n        if (processInstanceState.isFinished() || processInstanceState == WorkflowExecutionStatus.READY_STOP) {\n            log.warn(\"processInstance: {} state was: {}, skip submit this task, taskCode: {}\",\n                    workflowInstance.getId(),\n                    processInstanceState,\n                    taskInstance.getTaskCode());\n            return false;\n        }\n        if (processInstanceState == WorkflowExecutionStatus.READY_PAUSE) {\n            taskInstance.setState(TaskExecutionStatus.PAUSE);\n        }\n        taskInstance.setExecutorId(workflowInstance.getExecutorId());\n        taskInstance.setExecutorName(workflowInstance.getExecutorName());\n        taskInstance.setState(getSubmitTaskState(taskInstance, workflowInstance));\n        if (taskInstance.getSubmitTime() == null) {\n            taskInstance.setSubmitTime(new Date());\n        }\n        if (taskInstance.getFirstSubmitTime() == null) {\n            taskInstance.setFirstSubmitTime(taskInstance.getSubmitTime());\n        }\n        return upsertTaskInstance(taskInstance);\n    }\n\n    @Override\n    public void markTaskInstanceInvalid(List<TaskInstance> taskInstances) {\n        if (CollectionUtils.isEmpty(taskInstances)) {\n            return;\n        }\n        for (TaskInstance taskInstance : taskInstances) {\n            taskInstance.setFlag(Flag.NO);\n            mybatisMapper.updateById(taskInstance);\n        }\n    }\n\n    private TaskExecutionStatus getSubmitTaskState(TaskInstance taskInstance, WorkflowInstance workflowInstance) {\n        TaskExecutionStatus state = taskInstance.getState();\n        if (state == TaskExecutionStatus.RUNNING_EXECUTION\n                || state == TaskExecutionStatus.DELAY_EXECUTION\n                || state == TaskExecutionStatus.KILL\n                || state == TaskExecutionStatus.DISPATCH) {\n            return state;\n        }\n\n        if (workflowInstance.getState() == WorkflowExecutionStatus.READY_PAUSE) {\n            state = TaskExecutionStatus.PAUSE;\n        } else if (workflowInstance.getState() == WorkflowExecutionStatus.READY_STOP\n                || !checkProcessStrategy(taskInstance, workflowInstance)) {\n            state = TaskExecutionStatus.KILL;\n        } else {\n            state = TaskExecutionStatus.SUBMITTED_SUCCESS;\n        }\n        return state;\n    }\n\n    private boolean checkProcessStrategy(TaskInstance taskInstance, WorkflowInstance workflowInstance) {\n        FailureStrategy failureStrategy = workflowInstance.getFailureStrategy();\n        if (failureStrategy == FailureStrategy.CONTINUE) {\n            return true;\n        }\n        List<TaskInstance> taskInstances =\n                this.queryValidTaskListByWorkflowInstanceId(taskInstance.getWorkflowInstanceId(),\n                        taskInstance.getTestFlag());\n\n        for (TaskInstance task : taskInstances) {\n            if (task.getState() == TaskExecutionStatus.FAILURE\n                    && task.getRetryTimes() >= task.getMaxRetryTimes()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public List<TaskInstance> queryValidTaskListByWorkflowInstanceId(Integer processInstanceId, int testFlag) {\n        return mybatisMapper.findValidTaskListByWorkflowInstanceId(processInstanceId, Flag.YES, testFlag);\n    }\n\n    @Override\n    public TaskInstance queryByWorkflowInstanceIdAndTaskCode(Integer workflowInstanceId, Long taskCode) {\n        return mybatisMapper.queryByInstanceIdAndCode(workflowInstanceId, taskCode);\n    }\n\n    @Override\n    public List<TaskInstance> queryPreviousTaskListByWorkflowInstanceId(Integer workflowInstanceId) {\n        WorkflowInstance workflowInstance = workflowInstanceMapper.selectById(workflowInstanceId);\n        return mybatisMapper.findValidTaskListByWorkflowInstanceId(workflowInstanceId, Flag.NO,\n                workflowInstance.getTestFlag());\n    }\n\n    @Override\n    public TaskInstance queryByCacheKey(String cacheKey) {\n        if (StringUtils.isEmpty(cacheKey)) {\n            return null;\n        }\n        return mybatisMapper.queryByCacheKey(cacheKey);\n    }\n\n    @Override\n    public Boolean clearCacheByCacheKey(String cacheKey) {\n        try {\n            mybatisMapper.clearCacheByCacheKey(cacheKey);\n            return true;\n        } catch (Exception e) {\n            log.error(\"clear cache by cacheKey failed\", e);\n            return false;\n        }\n    }\n\n    @Override\n    public void deleteByWorkflowInstanceId(int workflowInstanceId) {\n        mybatisMapper.deleteByWorkflowInstanceId(workflowInstanceId);\n    }\n\n    @Override\n    public List<TaskInstance> queryByWorkflowInstanceId(Integer workflowInstanceId) {\n        return mybatisMapper.findByWorkflowInstanceId(workflowInstanceId);\n    }\n\n    @Override\n    public List<TaskInstance> queryLastTaskInstanceListIntervalInWorkflowInstance(Integer workflowInstanceId,\n                                                                                  Set<Long> taskCodes,\n                                                                                  int testFlag) {\n        return mybatisMapper.findLastTaskInstances(workflowInstanceId, taskCodes, testFlag);\n    }\n\n    @Override\n    public TaskInstance queryLastTaskInstanceIntervalInWorkflowInstance(Integer workflowInstanceId, long depTaskCode,\n                                                                        int testFlag) {\n        return mybatisMapper.findLastTaskInstance(workflowInstanceId, depTaskCode, testFlag);\n    }\n\n    @Override\n    public void updateTaskInstanceState(Integer taskInstanceId,\n                                        TaskExecutionStatus originState,\n                                        TaskExecutionStatus targetState) {\n        mybatisMapper.updateTaskInstanceState(taskInstanceId, originState.getCode(), targetState.getCode());\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n/**\n * task definition log\n */\n@TableName(\"t_ds_task_definition_log\")\npublic class TaskDefinitionLog extends TaskDefinition {\n\n    /**\n     * operator user id\n     */\n    private int operator;\n\n    /**\n     * operate time\n     */\n    private Date operateTime;\n\n    public TaskDefinitionLog() {\n        super();\n    }\n\n    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n    }\n\n    public int getOperator() {\n        return operator;\n    }\n\n    public void setOperator(int operator) {\n        this.operator = operator;\n    }\n\n    public Date getOperateTime() {\n        return operateTime;\n    }\n\n    public void setOperateTime(Date operateTime) {\n        this.operateTime = operateTime;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    @Override\n    public String toString() {\n        return super.toString();\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.dao.utils;\n\nimport org.apache.dolphinscheduler.dao.entity.WorkerGroup;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.google.common.collect.Lists;\n\npublic class WorkerGroupUtils {\n\n    private static final String DEFAULT_WORKER_GROUP = \"default\";\n\n    /**\n     * Check if the worker group is empty, if the worker group is default, it is considered empty\n     */\n    public static boolean isWorkerGroupEmpty(String workerGroup) {\n        return StringUtils.isEmpty(workerGroup) || getDefaultWorkerGroup().equals(workerGroup);\n    }\n\n    public static String getWorkerGroupOrDefault(String workerGroup) {\n        return getWorkerGroupOrDefault(workerGroup, getDefaultWorkerGroup());\n    }\n\n    public static String getWorkerGroupOrDefault(String workerGroup, String defaultWorkerGroup) {\n        return isWorkerGroupEmpty(workerGroup) ? defaultWorkerGroup : workerGroup;\n    }\n\n    public static String getDefaultWorkerGroup() {\n        return DEFAULT_WORKER_GROUP;\n    }\n\n    public static List<String> getWorkerAddressListFromWorkerGroup(WorkerGroup workerGroup) {\n        String addrList = workerGroup.getAddrList();\n        if (StringUtils.isEmpty(addrList)) {\n            return Collections.emptyList();\n        }\n        return Lists.newArrayList(addrList.split(\",\"));\n    }\n\n}\n",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.5
}