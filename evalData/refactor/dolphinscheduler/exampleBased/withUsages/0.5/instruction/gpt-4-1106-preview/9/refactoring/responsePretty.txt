"

{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 24,
                "toLine": 33,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType)",
                "newContent": "public HttpResponse startWorkflowInstance(StartWorkflowInstanceParams params)"
            },
            {
                "fromLine": 35,
                "toLine": 42,
                "oldContent": "Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "Map<String, Object> params = params.toMap();"
            },
            {
                "fromLine": 59,
                "toLine": 61,
                "oldContent": "public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {",
                "newContent": "public HttpResponse queryExecutingWorkflow(QueryExecutingWorkflowParams params) {"
            },
            {
                "fromLine": 63,
                "toLine": 66,
                "oldContent": "params.put(\"loginUser\", loginUser);\n        params.put(\"id\", workflowInstanceCode);",
                "newContent": "Map<String, Object> params = params.toMap();"
            },
            {
                "fromLine": 80,
                "toLine": 82,
                "oldContent": "public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "public HttpResponse execute(ExecuteWorkflowParams params) {"
            },
            {
                "fromLine": 84,
                "toLine": 87,
                "oldContent": "params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);",
                "newContent": "Map<String, Object> params = params.toMap();"
            },
            {
                "fromLine": 101,
                "toLine": 103,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {",
                "newContent": "public HttpResponse executeTask(ExecuteTaskParams params) {"
            },
            {
                "fromLine": 105,
                "toLine": 108,
                "oldContent": "params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);",
                "newContent": "Map<String, Object> params = params.toMap();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 124,
                "toLine": 141,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            WorkflowInstanceListPagingParams params);"
            },
            {
                "fromLine": 243,
                "toLine": 251,
                "oldContent": "List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(\n                                                                                  @Param(\"startTime\") Date startTime,\n                                                                                  @Param(\"endTime\") Date endTime,\n                                                                                  @Param(\"projectCodes\") Collection<Long> projectCodes);",
                "newContent": "List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(WorkflowInstanceStateCountParams params);"
            },
            {
                "fromLine": 267,
                "toLine": 271,
                "oldContent": "WorkflowInstance queryLastSchedulerWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                @Param(\"taskDefinitionCode\") Long taskDefinitionCode,\n                                                @Param(\"startTime\") Date startTime,\n                                                @Param(\"endTime\") Date endTime,\n                                                @Param(\"testFlag\") int testFlag);",
                "newContent": "WorkflowInstance queryLastSchedulerWorkflow(QueryLastSchedulerWorkflowParams params);"
            },
            {
                "fromLine": 286,
                "toLine": 290,
                "oldContent": "WorkflowInstance queryLastManualWorkflow(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                             @Param(\"taskCode\") Long taskCode,\n                                             @Param(\"startTime\") Date startTime,\n                                             @Param(\"endTime\") Date endTime,\n                                             @Param(\"testFlag\") int testFlag);",
                "newContent": "WorkflowInstance queryLastManualWorkflow(QueryLastManualWorkflowParams params);"
            },
            {
                "fromLine": 313,
                "toLine": 322,
                "oldContent": "List<WorkflowInstance> queryTopNWorkflowInstance(@Param(\"size\") int size,\n                                                     @Param(\"startTime\") Date startTime,\n                                                     @Param(\"endTime\") Date endTime,\n                                                     @Param(\"status\") WorkflowExecutionStatus status,\n                                                     @Param(\"projectCode\") long projectCode);",
                "newContent": "List<WorkflowInstance> queryTopNWorkflowInstance(QueryTopNWorkflowInstanceParams params);"
            },
            {
                "fromLine": 330,
                "toLine": 333,
                "oldContent": "List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                                  @Param(\"states\") int[] states);",
                "newContent": "List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(QueryWorkflowDefinitionCodeAndStatusParams params);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 25,
                "toLine": 25,
                "oldContent": "Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "Result createProjectParameter(ProjectParameterCreateParams params);"
            },
            {
                "fromLine": 27,
                "toLine": 27,
                "oldContent": "Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "Result updateProjectParameter(ProjectParameterUpdateParams params);"
            },
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "Result deleteProjectParametersByCode(ProjectParameterDeleteByCodeParams params);"
            },
            {
                "fromLine": 31,
                "toLine": 31,
                "oldContent": "Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
                "newContent": "Result batchDeleteProjectParametersByCodes(ProjectParameterBatchDeleteParams params);"
            },
            {
                "fromLine": 33,
                "toLine": 33,
                "oldContent": "Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);",
                "newContent": "Result queryProjectParameterListPaging(ProjectParameterListPagingParams params);"
            },
            {
                "fromLine": 35,
                "toLine": 35,
                "oldContent": "Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
                "newContent": "Result queryProjectParameterByCode(ProjectParameterQueryByCodeParams params);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 58,
                "toLine": 64,
                "oldContent": "public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {",
                "newContent": "public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         ProjectParameterCreateParams params) {"
            },
            {
                "fromLine": 66,
                "toLine": 66,
                "oldContent": "return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "return projectParameterService.createProjectParameter(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 74,
                "toLine": 80,
                "oldContent": "public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {",
                "newContent": "public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         ProjectParameterUpdateParams params) {"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "return projectParameterService.updateProjectParameter(params.withUser(loginUser).withProjectCode(projectCode).withCode(code));"
            },
            {
                "fromLine": 88,
                "toLine": 94,
                "oldContent": "public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                @RequestParam(\"code\") long code) {",
                "newContent": "public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                ProjectParameterDeleteByCodeParams params) {"
            },
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);",
                "newContent": "return projectParameterService.deleteProjectParametersByCode(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 103,
                "toLine": 109,
                "oldContent": "public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      @RequestParam(\"codes\") String codes) {",
                "newContent": "public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                      @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                      ProjectParameterBatchDeleteParams params) {"
            },
            {
                "fromLine": 111,
                "toLine": 111,
                "oldContent": "return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
                "newContent": "return projectParameterService.batchDeleteProjectParametersByCodes(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 118,
                "toLine": 124,
                "oldContent": "public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                                  @RequestParam(value = \"projectParameterDataType\", required = false) String projectParameterDataType,\n                                                  @RequestParam(\"pageNo\") Integer pageNo,\n                                                  @RequestParam(\"pageSize\") Integer pageSize) {",
                "newContent": "public Result queryProjectParameterListPaging(\n                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                                  @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                  ProjectParameterListPagingParams params) {"
            },
            {
                "fromLine": 126,
                "toLine": 126,
                "oldContent": "return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);",
                "newContent": "return projectParameterService.queryProjectParameterListPaging(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 132,
                "toLine": 138,
                "oldContent": "public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              @PathVariable(\"code\") long code) {",
                "newContent": "public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                              @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                              ProjectParameterQueryByCodeParams params) {"
            },
            {
                "fromLine": 140,
                "toLine": 140,
                "oldContent": "return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
                "newContent": "return projectParameterService.queryProjectParameterByCode(params.withUser(loginUser).withProjectCode(projectCode));"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 30,
                "toLine": 31,
                "oldContent": "Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "Result result = projectParameterController.createProjectParameter(loginUser, 1, new ProjectParameterCreateParams(\"key\", \"value\", DataType.VARCHAR.name()));"
            },
            {
                "fromLine": 36,
                "toLine": 37,
                "oldContent": "Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());",
                "newContent": "Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, new ProjectParameterUpdateParams(\"key\", \"value\", DataType.LONG.name()));"
            },
            {
                "fromLine": 42,
                "toLine": 43,
                "oldContent": "Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);",
                "newContent": "Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, new ProjectParameterDeleteByCodeParams(1));"
            },
            {
                "fromLine": 48,
                "toLine": 49,
                "oldContent": "Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, \"1\");",
                "newContent": "Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, new ProjectParameterBatchDeleteParams(\"1\"));"
            },
            {
                "fromLine": 54,
                "toLine": 55,
                "oldContent": "Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",\n                DataType.VARCHAR.name(), 1, 10);",
                "newContent": "Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, new ProjectParameterListPagingParams(10, 1, \"1\", DataType.VARCHAR.name()));"
            },
            {
                "fromLine": 60,
                "toLine": 61,
                "oldContent": "Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);",
                "newContent": "Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, new ProjectParameterQueryByCodeParams(1));"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 32,
                "toLine": 33,
                "oldContent": "Result result = projectParameterService.createProjectParameter(login
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 32,
                "toLine": 33,
                "oldContent": "Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "Result result = projectParameterService.createProjectParameter(new ProjectParameterCreateParams(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR.name()));"
            },
            {
                "fromLine": 39,
                "toLine": 40,
                "oldContent": "Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "Result result = projectParameterService.updateProjectParameter(new ProjectParameterUpdateParams(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR.name()));"
            },
            {
                "fromLine": 46,
                "toLine": 47,
                "oldContent": "Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "Result result = projectParameterService.deleteProjectParametersByCode(new ProjectParameterDeleteByCodeParams(loginUser, projectCode, 1));"
            },
            {
                "fromLine": 53,
                "toLine": 54,
                "oldContent": "Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "Result result = projectParameterService.queryProjectParameterByCode(new ProjectParameterQueryByCodeParams(loginUser, projectCode, 1));"
            },
            {
                "fromLine": 60,
                "toLine": 61,
                "oldContent": "Result result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                null, null);",
                "newContent": "Result result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterListPagingParams(loginUser, projectCode, pageSize, pageNo, null, null));"
            },
            {
                "fromLine": 68,
                "toLine": 69,
                "oldContent": "projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1\");",
                "newContent": "projectParameterService.batchDeleteProjectParametersByCodes(new ProjectParameterBatchDeleteParams(loginUser, projectCode, \"1\"));"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 61,
                "toLine": 71,
                "oldContent": "public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
                "newContent": "public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 ScheduleCreateParams params) {"
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);",
                "newContent": "Map<String, Object> result = schedulerService.insertSchedule(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 81,
                "toLine": 91,
                "oldContent": "public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @PathVariable(value = \"id\") Integer id,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
                "newContent": "public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @PathVariable(value = \"id\") Integer id,\n                                 ScheduleUpdateParams params) {"
            },
            {
                "fromLine": 93,
                "toLine": 93,
                "oldContent": "Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "Map<String, Object> result = schedulerService.updateSchedule(params.withUser(loginUser).withProjectCode(projectCode).withId(id));"
            },
            {
                "fromLine": 116,
                "toLine": 120,
                "oldContent": "public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                          @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                          @RequestParam(value = \"workflowDefinitionCode\", required = false, defaultValue = \"0\") long workflowDefinitionCode,\n                                          @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                          @RequestParam(\"pageNo\") Integer pageNo,",
                "newContent": "public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                          @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                          ScheduleListPagingParams params) {"
            },
            {
                "fromLine": 122,
                "toLine": 122,
                "oldContent": "return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,\n                pageSize);",
                "newContent": "return schedulerService.querySchedule(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 130,
                "toLine": 134,
                "oldContent": "public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n                                     @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                     @PathVariable(\"id\") Integer id) {",
                "newContent": "public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n                                     @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                     ScheduleDeleteParams params) {"
            },
            {
                "fromLine": 136,
                "toLine": 136,
                "oldContent": "schedulerService.deleteSchedulesById(loginUser, id);",
                "newContent": "schedulerService.deleteSchedulesById(params.withUser(loginUser));"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);",
                "newContent": "Map<String, Object> result = schedulerService.queryScheduleList(params.withUser(loginUser).withProjectCode(projectCode));"
            },
            {
                "fromLine": 155,
                "toLine": 155,
                "oldContent": "Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);",
                "newContent": "Map<String, Object> result = schedulerService.previewSchedule(params.withUser(loginUser));"
            },
            {
                "fromLine": 168,
                "toLine": 178,
                "oldContent": "public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         @RequestParam(value = \"schedule\") String schedule,\n                                                         @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                                         @RequestParam(value = \"warningGroupId\", required = false) int warningGroupId,\n                                                         @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                                         @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                                         @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,",
                "newContent": "public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         ScheduleUpdateParams params) {"
            },
            {
                "fromLine": 180,
                "toLine": 180,
                "oldContent": "Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(params.withUser(loginUser).withProjectCode(projectCode).withWorkflowDefinitionCode(workflowDefinitionCode));"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 7,
                "toLine": 7,
                "oldContent": "public class TaskAlertInfo {",
                "newContent": "public class TaskAlertInfo {\n\n    private int workflowInstanceId;"
            },
            {
                "fromLine": 9,
                "toLine": 9,
                "oldContent": "private String title;",
                "newContent": "public int getWorkflowInstanceId() {\n        return workflowInstanceId;\n    }\n\n    public void setWorkflowInstanceId(int workflowInstanceId) {\n        this.workflowInstanceId = workflowInstanceId;\n    }\n\n    private String title;"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "private AlertType alertType;",
                "newContent": "private AlertType alertType;\n\n    @TableField(\"workflow_instance_id\")\n    private Integer workflowInstanceId;"
            }
        ]
    },
    "extractedClasses": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/StartWorkflowInstanceParams.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StartWorkflowInstanceParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // Getters and Setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);\n        return params;\n    }\n}\n",
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/QueryExecutingWorkflowParams.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class QueryExecutingWorkflowParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long workflowInstanceCode;\n\n    // Getters and Setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"id\", workflowInstanceCode);\n        return params;\n    }\n}\n",
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecuteWorkflowParams.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExecuteWorkflowParams {\n\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Getters and Setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);\n        return params;\n    }\n}\n",
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecuteTaskParams.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExecuteTaskParams {\n\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private String startNodeList;\n    private TaskDependType taskDependType;\n\n    // Getters and Setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        return params;\n    }\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceListPagingParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\n\nimport java.util.Date;\n\npublic class WorkflowInstanceListPagingParams {\n\n    private Page<WorkflowInstance> page;\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceStateCountParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class WorkflowInstanceStateCountParams {\n\n    private Date startTime;\n    private Date endTime;\n    private Collection<Long> projectCodes;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/QueryLastSchedulerWorkflowParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Date;\n\npublic class QueryLastSchedulerWorkflowParams {\n\n    private Long workflowDefinitionCode;\n    private Long taskDefinitionCode;\n    private Date startTime;\n    private Date endTime;\n    private int testFlag;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler
{
    "refactorings": {
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/QueryLastManualWorkflowParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Date;\n\npublic class QueryLastManualWorkflowParams {\n\n    private Long workflowDefinitionCode;\n    private Long taskCode;\n    private Date startTime;\n    private Date endTime;\n    private int testFlag;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/QueryTopNWorkflowInstanceParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\n\nimport java.util.Date;\n\npublic class QueryTopNWorkflowInstanceParams {\n\n    private int size;\n    private Date startTime;\n    private Date endTime;\n    private WorkflowExecutionStatus status;\n    private long projectCode;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/QueryWorkflowDefinitionCodeAndStatusParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\npublic class QueryWorkflowDefinitionCodeAndStatusParams {\n\n    private Long workflowDefinitionCode;\n    private int[] states;\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterCreateParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterCreateParams {\n\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    public ProjectParameterCreateParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterCreateParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterUpdateParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterUpdateParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long code;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    public ProjectParameterUpdateParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterUpdateParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    public ProjectParameterUpdateParams withCode(long code) {\n        this.code = code;\n        return this;\n    }\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterDeleteByCodeParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterDeleteByCodeParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long code;\n\n    public ProjectParameterDeleteByCodeParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterDeleteByCodeParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterBatchDeleteParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterBatchDeleteParams {\n\n    private User loginUser;\n    private long projectCode;\n    private String codes;\n\n    public ProjectParameterBatchDeleteParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterBatchDeleteParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterListPagingParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterListPagingParams {\n\n    private User loginUser;\n    private long projectCode;\n    private Integer pageSize;\n    private Integer pageNo;\n    private String searchVal;\n    private String projectParameterDataType;\n\n    public ProjectParameterListPagingParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterListPagingParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    // Getters and Setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterQueryByCodeParams.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterQueryByCodeParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long code;\n\n    public ProjectParameterQueryByCodeParams withUser(User loginUser) {\n        this.loginUser = loginUser;\n        return this;\n    }\n\n    public ProjectParameterQueryByCodeParams withProjectCode(long projectCode) {\n        this.projectCode = projectCode;\n        return this;\n    }\n\n    // Getters and Setters\n}\n"
    }
}"