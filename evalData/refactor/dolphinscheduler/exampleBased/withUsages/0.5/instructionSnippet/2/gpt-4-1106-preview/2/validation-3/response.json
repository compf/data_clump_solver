{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 50,
                "toLine": 54,
                "oldContent": "@TableField(value = \"alert_info\")\n    private AlertInfo alertInfo;",
                "newContent": "@TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;"
            },
            {
                "fromLine": 60,
                "toLine": 64,
                "oldContent": "@TableField(\"create_time\")\n\n    @TableField(value = \"log\")\n    private String log;\n    private Date createTime;",
                "newContent": "@TableField(value = \"alert_group_id\")\n    private Integer alertGroupId;\n\n    @TableField(value = \"create_time\")\n    private Date createTime;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 39,
                "toLine": 43,
                "oldContent": "@TableId(value = \"id\", type = IdType.AUTO)\n    private TaskBasicInfo taskBasicInfo;",
                "newContent": "@TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;"
            },
            {
                "fromLine": 59,
                "toLine": 63,
                "oldContent": "private Date startTime;\n\n    private TaskExecutionEnvironment taskExecutionEnvironment;",
                "newContent": "private Date startTime;\n\n    private Date endTime;\n\n    private String host;\n\n    private String executePath;"
            },
            {
                "fromLine": 127,
                "toLine": 131,
                "oldContent": "private int testFlag;\n\n    public void init(TaskExecutionEnvironment environment) {\n        this.taskExecutionEnvironment = environment;",
                "newContent": "private int testFlag;\n\n    public void init(Date endTime, String host, String executePath) {\n        this.endTime = endTime;\n        this.host = host;\n        this.executePath = executePath;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 276,
                "toLine": 280,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              WorkflowInstanceQueryParameters parameters);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") Date startTime,\n                                                              @Param(\"endTime\") Date endTime,\n                                                              @Param(\"state\") WorkflowExecutionStatus state,\n                                                              @Param(\"host\") String host);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 170,
                "toLine": 175,
                "oldContent": "this.name = String.join(\"-\",\n                workflowDefinition.getName(),\n                String.valueOf(workflowDefinition.getVersion()),\n                DateUtils.getCurrentTimeStamp());",
                "newContent": "this.name = workflowDefinition.getName() + \"-\" + workflowDefinition.getVersion() + \"-\" + DateUtils.getCurrentTimeStamp();"
            },
            {
                "fromLine": 219,
                "toLine": 230,
                "oldContent": "public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.setStateHistory(JSONUtils.toJsonString(stateDescList));\n    }",
                "newContent": "public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.state = state;\n        if (StringUtils.isEmpty(this.stateHistory)) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.stateHistory, StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));\n        this.stateHistory = JSONUtils.toJsonString(stateDescList);\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 99,
                "toLine": 114,
                "oldContent": "public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();\n        this.conditionParams = processTaskRelationLog.getConditionParams();\n\n        this.createTime = processTaskRelationLog.getCreateTime();\n        this.updateTime = new Date();\n    }",
                "newContent": "public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.name;\n        this.workflowDefinitionVersion = processTaskRelationLog.workflowDefinitionVersion;\n        this.projectCode = processTaskRelationLog.projectCode;\n        this.workflowDefinitionCode = processTaskRelationLog.workflowDefinitionCode;\n        this.preTaskCode = processTaskRelationLog.preTaskCode;\n        this.preTaskVersion = processTaskRelationLog.preTaskVersion;\n        this.postTaskCode = processTaskRelationLog.postTaskCode;\n        this.postTaskVersion = processTaskRelationLog.postTaskVersion;\n        this.conditionType = processTaskRelationLog.conditionType;\n        this.conditionParams = processTaskRelationLog.conditionParams;\n\n        this.createTime = processTaskRelationLog.createTime;\n        this.updateTime = new Date();\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 33,
                "toLine": 53,
                "oldContent": "public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());\n        this.setConditionType(workflowTaskRelation.getConditionType());\n        this.setConditionParams(workflowTaskRelation.getConditionParams());\n        this.setCreateTime(workflowTaskRelation.getCreateTime());\n        this.setUpdateTime(workflowTaskRelation.getUpdateTime());\n    }",
                "newContent": "public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.name = workflowTaskRelation.name;\n        this.workflowDefinitionCode = workflowTaskRelation.workflowDefinitionCode;\n        this.workflowDefinitionVersion = workflowTaskRelation.workflowDefinitionVersion;\n        this.projectCode = workflowTaskRelation.projectCode;\n        this.preTaskCode = workflowTaskRelation.preTaskCode;\n        this.preTaskVersion = workflowTaskRelation.preTaskVersion;\n        this.postTaskCode = workflowTaskRelation.postTaskCode;\n        this.postTaskVersion = workflowTaskRelation.postTaskVersion;\n        this.conditionType = workflowTaskRelation.conditionType;\n        this.conditionParams = workflowTaskRelation.conditionParams;\n        this.createTime = workflowTaskRelation.createTime;\n        this.updateTime = workflowTaskRelation.updateTime;\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 39,
                "toLine": 78,
                "oldContent": "public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());\n        this.setProjectCode(taskDefinition.getProjectCode());\n        this.setProjectName(taskDefinition.getProjectName());\n        this.setResourceIds(taskDefinition.getResourceIds());\n        this.setTaskParams(taskDefinition.getTaskParams());\n        this.setTaskParamList(taskDefinition.getTaskParamList());\n        this.setTaskParamMap(taskDefinition.getTaskParamMap());\n        this.setTaskPriority(taskDefinition.getTaskPriority());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());\n        this.setTaskType(taskDefinition.getTaskType());\n        this.setTimeout(taskDefinition.getTimeout());\n        this.setDelayTime(taskDefinition.getDelayTime());\n        this.setTimeoutFlag(taskDefinition.getTimeoutFlag());\n        this.setUpdateTime(taskDefinition.getUpdateTime());\n        this.setCreateTime(taskDefinition.getCreateTime());\n        this.setFailRetryInterval(taskDefinition.getFailRetryInterval());\n        this.setFailRetryTimes(taskDefinition.getFailRetryTimes());\n        this.setFlag(taskDefinition.getFlag());\n        this.setIsCache(taskDefinition.getIsCache());\n        this.setModifyBy(taskDefinition.getModifyBy());\n        this.setCpuQuota(taskDefinition.getCpuQuota());\n        this.setMemoryMax(taskDefinition.getMemoryMax());\n        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());\n    }",
                "newContent": "public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.code = taskDefinition.code;\n        this.version = taskDefinition.version;\n        this.name = taskDefinition.name;\n        this.description = taskDefinition.description;\n        this.userId = taskDefinition.userId;\n        this.userName = taskDefinition.userName;\n        this.workerGroup = taskDefinition.workerGroup;\n        this.environmentCode = taskDefinition.environmentCode;\n        this.projectCode = taskDefinition.projectCode;\n        this.projectName = taskDefinition.projectName;\n        this.resourceIds = taskDefinition.resourceIds;\n        this.taskParams = taskDefinition.taskParams;\n        this.taskPriority = taskDefinition.taskPriority;\n        this.taskExecuteType = taskDefinition.taskExecuteType;\n        this.timeoutNotifyStrategy = taskDefinition.timeoutNotifyStrategy;\n        this.taskType = taskDefinition.taskType;\n        this.timeout = taskDefinition.timeout;\n        this.delayTime = taskDefinition.delayTime;\n        this.timeoutFlag = taskDefinition.timeoutFlag;\n        this.updateTime = taskDefinition.updateTime;\n        this.createTime = taskDefinition.createTime;\n        this.failRetryInterval = taskDefinition.failRetryInterval;\n        this.failRetryTimes = taskDefinition.failRetryTimes;\n        this.flag = taskDefinition.flag;\n        this.isCache = taskDefinition.isCache;\n        this.modifyBy = taskDefinition.modifyBy;\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 51,
                "toLine": 55,
                "oldContent": "String addrList = workerGroup.getAddrList();",
                "newContent": "String addrList = workerGroup.addrList;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 39,
                "toLine": 48,
                "oldContent": "mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "mybatisMapper.delete(new QueryWrapper<>(new Session(userId)));"
            },
            {
                "fromLine": 39,
                "toLine": 48,
                "oldContent": "return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "return mybatisMapper.selectList(new QueryWrapper<>(new Session(userId)));"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "requireNonNull(pluginDefine.getPluginName(), \"pluginName is null\");\n        requireNonNull(pluginDefine.getPluginType(), \"pluginType is null\");\n\n        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());",
                "newContent": "requireNonNull(pluginDefine.pluginName, \"pluginName is null\");\n        requireNonNull(pluginDefine.pluginType, \"pluginType is null\");\n\n        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.pluginName, pluginDefine.pluginType);"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "if (currPluginDefine == null) {\n            try {\n                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {\n                    return pluginDefine.getId();\n                }",
                "newContent": "if (currPluginDefine == null) {\n            try {\n                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.id != null) {\n                    return pluginDefine.id;\n                }"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "throw new TaskPluginException(\n                        String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                pluginDefine.getPluginName(), pluginDefine.getPluginType()));",
                "newContent": "throw new TaskPluginException(\n                        String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                pluginDefine.pluginName, pluginDefine.pluginType));"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),\n                        pluginDefine.getPluginType());",
                "newContent": "log.error(\"Insert plugin definition error, there may already exist a plugin\", ex);\n                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.pluginName,\n                        pluginDefine.pluginType);"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "throw new TaskPluginException(\n                            String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                    pluginDefine.getPluginName(), pluginDefine.getPluginType()));",
                "newContent": "throw new TaskPluginException(\n                            String.format(\"Failed to insert plugin definition, pluginName: %s, pluginType: %s\",\n                                    pluginDefine.pluginName, pluginDefine.pluginType));"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {\n            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());\n            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());",
                "newContent": "if (!Objects.equals(currPluginDefine.pluginParams, pluginDefine.pluginParams)) {\n            currPluginDefine.updateTime = pluginDefine.updateTime;\n            currPluginDefine.pluginParams = pluginDefine.pluginParams;"
            },
            {
                "fromLine": 55,
                "toLine": 90,
                "oldContent": "return currPluginDefine.getId();",
                "newContent": "return currPluginDefine.id;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 33,
                "toLine": 46,
                "oldContent": "public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());",
                "newContent": "public WorkflowDefinitionLog(Workflow
{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 33,
                "toLine": 46,
                "oldContent": "public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.setCode(workflowDefinition.getCode());\n        this.setName(workflowDefinition.getName());\n        this.setVersion(workflowDefinition.getVersion());\n        this.setReleaseState(workflowDefinition.getReleaseState());\n        this.setProjectCode(workflowDefinition.getProjectCode());\n        this.setDescription(workflowDefinition.getDescription());\n        this.setGlobalParams(workflowDefinition.getGlobalParams());\n        this.setGlobalParamList(workflowDefinition.getGlobalParamList());",
                "newContent": "public WorkflowDefinitionLog(WorkflowDefinition workflowDefinition) {\n        this.code = workflowDefinition.code;\n        this.name = workflowDefinition.name;\n        this.version = workflowDefinition.version;\n        this.releaseState = workflowDefinition.releaseState;\n        this.projectCode = workflowDefinition.projectCode;\n        this.description = workflowDefinition.description;\n        this.globalParams = workflowDefinition.globalParams;\n        this.globalParamList = workflowDefinition.globalParamList;\n        this.globalParamMap = workflowDefinition.globalParamMap;\n        this.flag = workflowDefinition.flag;\n        this.locations = workflowDefinition.locations;\n        this.connects = workflowDefinition.connects;\n        this.timeout = workflowDefinition.timeout;\n        this.tenantId = workflowDefinition.tenantId;\n        this.userId = workflowDefinition.userId;\n        this.createTime = workflowDefinition.createTime;\n        this.updateTime = workflowDefinition.updateTime;\n    }"
            }
        ]
    },
    "extractedClasses": {}
}