{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "public HttpResponse execute(ExecutionParameters executionParameters) {"
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
                "newContent": "public HttpResponse executeTask(ExecutionParameters executionParameters, String startNodeList,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 271,
                "toLine": 272,
                "oldContent": "* @param name                  name\n     * @param host                  host",
                "newContent": "* @param instanceQueryParams  instance query parameters"
            },
            {
                "fromLine": 277,
                "toLine": 280,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"host\") String host);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"instanceQueryParams\") InstanceQueryParams instanceQueryParams);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 43,
                "toLine": 73,
                "oldContent": "private String name;\nprivate Long projectCode;\nprivate String host;",
                "newContent": "private TaskInstanceInfo taskInstanceInfo;"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "this.host = host;",
                "newContent": "this.taskInstanceInfo.setHost(host);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 25,
                "toLine": 26,
                "oldContent": "Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "Result createProjectParameter(ProjectParameterInfo projectParameterInfo);"
            },
            {
                "fromLine": 28,
                "toLine": 29,
                "oldContent": "Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "Result updateProjectParameter(ProjectParameterInfo projectParameterInfo, long code);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 70,
                "toLine": 76,
                "oldContent": "public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 89,
                "toLine": 96,
                "oldContent": "public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(projectParameterInfo, code);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 51,
                "toLine": 53,
                "oldContent": "Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\nMockito.any(), Mockito.any())).thenReturn(result);\nResult result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterInfo.class))).thenReturn(result);\nProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, 1, \"key\", \"value\", \"VARCHAR\");\nResult result = projectParameterController.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 62,
                "toLine": 64,
                "oldContent": "Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\nMockito.any(), Mockito.any(), Mockito.any())).thenReturn(result);\nResult result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterInfo.class), Mockito.anyLong())).thenReturn(result);\nProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, 1, \"key\", \"value\", \"VARCHAR\");\nResult result = projectParameterController.updateProjectParameter(projectParameterInfo, 1L);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nResult result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 93,
                "toLine": 93,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nresult = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 101,
                "toLine": 101,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nresult = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");\nresult = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 114,
                "toLine": 114,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");\nresult = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 126,
                "toLine": 126,
                "oldContent": "Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nResult result = projectParameterService.updateProjectParameter(projectParameterInfo, 1);"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nresult = projectParameterService.updateProjectParameter(projectParameterInfo, 1);"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", \"VARCHAR\");\nresult = projectParameterService.updateProjectParameter(projectParameterInfo, 1);"
            },
            {
                "fromLine": 151,
                "toLine": 151,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");\nresult = projectParameterService.updateProjectParameter(projectParameterInfo, 1);"
            },
            {
                "fromLine": 157,
                "toLine": 157,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\", \"VARCHAR\");",
                "newContent": "ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", \"VARCHAR\");\nresult = projectParameterService.updateProjectParameter(projectParameterInfo, 1);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 110,
                "toLine": 120,
                "oldContent": "public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {",
                "newContent": "public Result createSchedule(ScheduleInfo scheduleInfo) {"
            },
            {
                "fromLine": 122,
                "toLine": 131,
                "oldContent": "loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,",
                "newContent": "scheduleInfo,"
            },
            {
                "fromLine": 336,
                "toLine": 346,
                "oldContent": "public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                         @PathVariable(value = \"code\") long workflowDefinitionCode,\n                                                         @RequestParam(value = \"schedule\") String schedule,\n                                                         @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                                         @RequestParam(value = \"warningGroupId\", required = false) int warningGroupId,\n                                                         @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                                         @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                                         @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {",
                "newContent": "public Result updateScheduleByWorkflowDefinitionCode(ScheduleInfo scheduleInfo, @PathVariable(value = \"code\") long workflowDefinitionCode) {"
            },
            {
                "fromLine": 346,
                "toLine": 349,
                "oldContent": "                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(scheduleInfo, workflowDefinitionCode,"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 22,
                "toLine": 26,
                "oldContent": "private String title;\nprivate String content;\nprivate Integer alertGroupId;",
                "newContent": "private AlertInfo alertInfo;"
            },
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "return title;",
                "newContent": "return alertInfo.getTitle();"
            },
            {
                "fromLine": 33,
                "toLine": 33,
                "oldContent": "this.title = title;",
                "newContent": "this.alertInfo.setTitle(title);"
            },
            {
                "fromLine": 37,
                "toLine": 37,
                "oldContent": "return content;",
                "newContent": "return alertInfo.getContent();"
            },
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "this.content = content;",
                "newContent": "this.alertInfo.setContent(content);"
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "return alertGroupId;",
                "newContent": "return alertInfo.getAlertGroupId();"
            },
            {
                "fromLine": 49,
                "toLine": 49,
                "oldContent": "this.alertGroupId = alertGroupId;",
                "newContent": "this.alertInfo.setAlertGroupId(alertGroupId);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 52,
                "toLine": 67,
                "oldContent": "private String title;\nprivate String content;\nprivate Integer alertGroupId;",
                "newContent": "private AlertInfo alertInfo;"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ExecutionParameters {\n\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructor, getters and setters\n}\n",
        "org/apache/dolphinscheduler/
{
    "extractedClasses": {
        "org/apache/dolphinscheduler/dao/mapper/InstanceQueryParams.java": "package org.apache.dolphinscheduler.dao.mapper;\n\npublic class InstanceQueryParams {\n\n    private Long projectCode;\n    private String name;\n    private String host;\n\n    // Constructor, getters and setters\n}\n",
        "org/apache/dolphinscheduler/dao/entity/TaskInstanceInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\npublic class TaskInstanceInfo {\n\n    private String name;\n    private Long projectCode;\n    private String host;\n\n    // Constructor, getters and setters\n}\n",
        "org/apache/dolphinscheduler/api/service/ProjectParameterInfo.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterInfo {\n\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, getters and setters\n}\n",
        "org/apache/dolphinscheduler/api/controller/ScheduleInfo.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ScheduleInfo {\n\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n\n    // Constructor, getters and setters\n}\n",
        "org/apache/dolphinscheduler/plugin/task/api/model/AlertInfo.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class AlertInfo {\n\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    // Constructor, getters and setters\n}\n"
    }
}