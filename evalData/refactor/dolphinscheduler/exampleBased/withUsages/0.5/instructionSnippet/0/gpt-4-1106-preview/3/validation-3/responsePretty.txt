"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "    private Integer alertGroupId;",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "    private String host;",
                "newContent": ""
            },
            {
                "fromLine": 145,
                "toLine": 145,
                "oldContent": "        this.details.setHost(host);",
                "newContent": "        this.host = host;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 285,
                "toLine": 285,
                "oldContent": "                                                              @Param(\"host\") String host);",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 172,
                "toLine": 173,
                "oldContent": "                workflowDefinition.getName(),\n                workflowDefinition.getVersion(),",
                "newContent": ""
            },
            {
                "fromLine": 227,
                "toLine": 227,
                "oldContent": "        stateDescList.add(new StateDesc(new Date(), state, stateDesc));",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 101,
                "toLine": 112,
                "oldContent": "        this.name = processTaskRelationLog.name;\n        this.workflowDefinitionVersion = processTaskRelationLog.workflowDefinitionVersion;\n        this.projectCode = processTaskRelationLog.projectCode;\n        this.workflowDefinitionCode = processTaskRelationLog.workflowDefinitionCode;\n        this.preTaskCode = processTaskRelationLog.preTaskCode;\n        this.preTaskVersion = processTaskRelationLog.preTaskVersion;\n        this.postTaskCode = processTaskRelationLog.postTaskCode;\n        this.postTaskVersion = processTaskRelationLog.postTaskVersion;\n        this.conditionType = processTaskRelationLog.conditionType;\n        this.conditionParams = processTaskRelationLog.conditionParams;\n        this.createTime = processTaskRelationLog.createTime;",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 34,
                "toLine": 50,
                "oldContent": "    public WorkflowTaskRelationLog() {\n    }\n\n    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n    }\n\n        this.workflowDefinitionCode = workflowTaskRelation.workflowDefinitionCode;\n        this.workflowDefinitionVersion = workflowTaskRelation.workflowDefinitionVersion;\n        this.projectCode = workflowTaskRelation.projectCode;\n        this.preTaskCode = workflowTaskRelation.preTaskCode;\n        this.preTaskVersion = workflowTaskRelation.preTaskVersion;\n        this.postTaskCode = workflowTaskRelation.postTaskCode;\n        this.postTaskVersion = workflowTaskRelation.postTaskVersion;\n        this.conditionType = workflowTaskRelation.conditionType;\n        this.conditionParams = workflowTaskRelation.conditionParams;\n        this.createTime = workflowTaskRelation.createTime;\n        this.updateTime = workflowTaskRelation.updateTime;",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 40,
                "toLine": 73,
                "oldContent": "    public TaskDefinitionLog() {\n    }\n\n    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n    }\n\n        this.version = taskDefinition.version;\n        this.name = taskDefinition.name;\n        this.description = taskDefinition.description;\n        this.userId = taskDefinition.userId;\n        this.userName = taskDefinition.userName;\n        this.workerGroup = taskDefinition.workerGroup;\n        this.environmentCode = taskDefinition.environmentCode;\n        this.projectCode = taskDefinition.projectCode;\n        this.projectName = taskDefinition.projectName;\n        this.resourceIds = taskDefinition.resourceIds;\n        this.taskParams = taskDefinition.taskParams;\n        this.taskParamList = taskDefinition.taskParamList;\n        this.taskParamMap = taskDefinition.taskParamMap;\n        this.taskPriority = taskDefinition.taskPriority;\n        this.taskExecuteType = taskDefinition.taskExecuteType;\n        this.timeoutNotifyStrategy = taskDefinition.timeoutNotifyStrategy;\n        this.taskType = taskDefinition.taskType;\n        this.timeout = taskDefinition.timeout;\n        this.delayTime = taskDefinition.delayTime;\n        this.timeoutFlag = taskDefinition.timeoutFlag;\n        this.updateTime = taskDefinition.updateTime;\n        this.createTime = taskDefinition.createTime;\n        this.failRetryInterval = taskDefinition.failRetryInterval;\n        this.failRetryTimes = taskDefinition.failRetryTimes;\n        this.flag = taskDefinition.flag;\n        this.isCache = taskDefinition.isCache;\n        this.modifyBy = taskDefinition.modifyBy;\n        this.cpuQuota = taskDefinition.cpuQuota;",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {}
}"