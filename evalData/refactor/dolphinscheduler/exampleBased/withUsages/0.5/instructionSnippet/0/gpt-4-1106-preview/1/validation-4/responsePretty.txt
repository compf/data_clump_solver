"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "                projectParameterInfo.getName(), projectParameterInfo.getValue(), projectParameterInfo.getDescription(), projectParameterInfo.getDataType()););",
                "newContent": "                projectParameterInfo.getName(), projectParameterInfo.getValue(), projectParameterInfo.getDescription(), projectParameterInfo.getDataType());"
            },
            {
                "fromLine": 97,
                "toLine": 99,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterInfo);\n                projectParameterInfo.getName(), projectParameterInfo.getValue(), projectParameterInfo.getDescription(), projectParameterInfo.getDataType()););\n    }",
                "newContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterInfo.getName(), projectParameterInfo.getValue(), projectParameterInfo.getDescription(), projectParameterInfo.getDataType());\n    }"
            },
            {
                "fromLine": 147,
                "toLine": 148,
                "oldContent": "        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,",
                "newContent": "        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, searchVal, projectParameterDataType);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 123,
                "toLine": 123,
                "oldContent": "                scheduleInfo.getSchedule(), scheduleInfo.getWarningType(), scheduleInfo.getWarningGroupId(), scheduleInfo.getFailureStrategy(), scheduleInfo.getWorkflowInstancePriority(), scheduleInfo.getWorkerGroup());););",
                "newContent": "                scheduleInfo.getSchedule(), scheduleInfo.getWarningType(), scheduleInfo.getWarningGroupId(), scheduleInfo.getFailureStrategy(), scheduleInfo.getWorkflowInstancePriority(), scheduleInfo.getWorkerGroup());"
            },
            {
                "fromLine": 172,
                "toLine": 174,
                "oldContent": "                scheduleInfo.getSchedule(), scheduleInfo.getWarningType(), scheduleInfo.getWarningGroupId(), scheduleInfo.getFailureStrategy(), scheduleInfo.getWorkflowInstancePriority(), scheduleInfo.getWorkerGroup());););\n        return returnDataList(result);\n    }",
                "newContent": "                scheduleInfo.getSchedule(), scheduleInfo.getWarningType(), scheduleInfo.getWarningGroupId(), scheduleInfo.getFailureStrategy(), scheduleInfo.getWorkflowInstancePriority(), scheduleInfo.getWorkerGroup());\n        return returnDataList(result);\n    }"
            },
            {
                "fromLine": 231,
                "toLine": 232,
                "oldContent": "        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,",
                "newContent": "        searchVal = ParameterUtils.handleEscapes(searchVal);\n        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo, pageSize);"
            }
        ]
    },
    "extractedClasses": {}
}"