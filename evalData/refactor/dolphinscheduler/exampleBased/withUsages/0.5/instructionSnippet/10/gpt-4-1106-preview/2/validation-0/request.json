{
    "messages": [
        {
            "content": "\nI will provide you code snippets of one or more Java  files.\n\nRefactor all data clumps in the respective files.\nTo do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.\nAlso provide the content of all extracted classes.\nIf possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.\n\n\n Examples of data clump are provided below.\n## Examples\n/* \n    These examples show data clumps and how they might be refactored\n    Imports are missing so these examples would not compile\n*/\n// ### example 5#########################\n//'method parameters to method parameters' data clump\nclass Example1A {\n\n    // both methods share at least 3 parameters, so we can extract those 3\n    // parameters into a class\n\n    public static String buildServiceKey(String path, String group, String version) {\n        int length = path == null ? 0 : path.length();\n        length += group == null ? 0 : group.length();\n        length += version == null ? 0 : version.length();\n        length += 2;\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(group)) {\n            buf.append(group).append('/');\n        }\n        buf.append(path);\n        if (StringUtils.isNotEmpty(version)) {\n            buf.append(':').append(version);\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(String path, String group, String version, String prefix) {\n        return prefix + buildServiceKey(path, group, version);\n    }\n\n}\n\n// ## refactored ##################################\nclass KeyData {\n    private String path;\n    private String group;\n    private String version;\n\n    KeyData(String path, String group, String version) {\n        this.path = path;\n        this.group = group;\n        this.version = version;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public int getLength() {\n        return path == null ? 0\n                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;\n    }\n\n}\n\nclass Example1A {\n\n    public static String buildServiceKey(KeyData keyData) {\n        int length = keyData.getLength();\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(keyData.getGroup())) {\n            buf.append(keyData.getGroup()).append('/');\n        }\n        buf.append(keyData.getPath());\n        if (StringUtils.isNotEmpty(keyData.getVersion())) {\n            buf.append(':').append(keyData.getVersion());\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(KeyData keyData, String prefix) {\n        return prefix + buildServiceKey(keyData);\n    }\n}\n// #### example 5 end ##################################\n\n//\n\n// ## example 2 ##################################\n// 'fields to fields' data clump\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a class\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\t\t\t\n\t\t\tint state = node.getId();\n\t\t\tstates.add(state);\n\t\t\tsuccessors.put(state, new ArrayList<Integer>());\n\t\t\tlabels.put(state, new ArrayList<Label>())\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + successors.get(state) + \", Labels: \"\n                    + labels.get(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## refactored ##################################\n\nclass StateGraphData {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n\n    StateGraphData() {\n        this.states = new ArrayList<Integer>();\n        this.successors = new HashMap<Integer, List<Integer>>();\n        this.labels = new HashMap<Integer, List<Label>>();\n    }\n\n    public List<Integer> getStates() {\n        return states;\n    }\n\n    public Map<Integer, List<Integer>> getSuccessors(int state) {\n        return successors.get(state);\n    }\n\n    public Map<Integer, List<Label>> getLabels(int state) {\n        return labels.get(state);\n    }\n\n    public void addState(int state) {\n        states.add(state);\n        successors.put(state, new ArrayList<Integer>());\n        labels.put(state, new ArrayList<Label>());\n    }\n\n}\n\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a\n    // class\n    private StateGraphData stateGraphData;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\n            stateGraphData.addState(node.getId());\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private StateGraphData stateGraphData;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + stateGraphData.getSuccessor(state) + \", Labels: \"\n                    + stateGraphData.getLabel(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## example 2 end ##################################\n\n// ## example 3 ##################################\n// 'parameters to fields' data clump\nclass Example3A {\n    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {\n        return parameterTypes.length == arguments.length;\n    }\n}\n\n// Example3B.java\nclass Example3B {\n\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private String methodName;\n\n    private Class<?>[] parameterTypes;\n\n    private Object[] arguments;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n\n}\n\n// ## refactored ##################################\nclass MethodCallData {\n    public String methodName;\n    public Class<?>[] parameterTypes;\n    public Object[] arguments;\n\n    public boolean isValid() {\n        return parameterTypes.length == arguments.length;\n    }\n\n}\n\nclass Example3A {\n    boolean validate(MethodCallData methodCallData) {\n        return methodCallData.isValid();\n    }\n}\n\nclass Example3B {\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private MethodCallData methodCallData;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n}\n// ## example 3 end ##################################\n\n// ## example 4 ##################################\nclass Example4A {\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        writer.incrementNumberReturned();\n        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));\n    }\n}\n\n// Example4B.java\nclass Example4B extends Example4A {\n     // This pair of methods do not constitute a data clump even if signature is copied because\n    // the method is overridden and therefore must have the same paremeters\n    @Override\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        root.reset();\n        super.beforeEvaluation(writer, root, feature);\n    }\n   \n}\n// ## example 4 end ##################################\n\n## Examples end\n\n\nUse the following JSON format for the output:\n\n## JSON\n\n{\n    \"refactorings\":{\n        // for each refactored file\n        \"file1Path\": [\n            // for each change in the file performed by you. Try to group changes of neighboring lines\n            {\n                \"fromLine\": \"<the fromLine>\",\n                \"toLine\":\"<the toLine>\",\n                \"oldContent\": \"the old content of the changed lines\",\n                \"newContent\": \"the new content of the changed lines\"\n            },\n            //...\n        ]\n    },\n    \"extractedClasses\":{\n          // for each extracted class\n        \"extractedClassPath1\": \"full content of the newly extracted class 1 \",\n        //...\n    }\n}\n\n## END JSON\n\n",
            "role": "user"
        },
        {
            "content": "{\"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\":[{\"fromLine\":17,\"toLine\":34,\"content\":\"\\npackage org.apache.dolphinscheduler.api.test.pages.workflow;\\n\\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\\nimport org.apache.dolphinscheduler.api.test.core.Constants;\\nimport org.apache.dolphinscheduler.api.test.entity.HttpResponse;\\nimport org.apache.dolphinscheduler.api.test.utils.RequestClient;\\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":62,\"toLine\":96,\"content\":\"        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"id\\\", workflowInstanceCode);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", projectCode);\\n        return requestClient.get(url, headers, params);\\n    }\\n\\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"projectCode\\\", projectCode);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"executeType\\\", executeType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", projectCode);\\n        return requestClient.post(url, headers, params);\\n    }\\n\\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\\n                                    TaskDependType taskDependType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"startNodeList\\\", startNodeList);\\n        params.put(\\\"taskDependType\\\", taskDependType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\":[{\"fromLine\":17,\"toLine\":35,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.mapper;\\n\\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\\nimport org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;\\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\\nimport org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;\\n\\nimport org.apache.ibatis.annotations.Param;\\n\\nimport java.util.Collection;\\nimport java.util.Date;\\nimport java.util.List;\\nimport java.util.Set;\\n\\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\\nimport com.baomidou.mybatisplus.core.metadata.IPage;\\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\\n\"},{\"fromLine\":261,\"toLine\":294,\"content\":\"\\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\\n                                                            @Param(\\\"states\\\") int[] states);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowDefinitionCode workflowDefinitionCode\\n     * @param name                  name\\n     * @param host                  host\\n     * @param startTime             startTime\\n     * @param endTime               endTime\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\\n                                                              @Param(\\\"state\\\") Integer state,\\n                                                              @Param(\\\"host\\\") String host);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param startTime    startTime\\n     * @param endTime      endTime\\n     * @param projectCode  projectCode\\n     * @param workflowCode workflowCode\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\":[{\"fromLine\":17,\"toLine\":61,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.entity;\\n\\nimport org.apache.dolphinscheduler.common.enums.Flag;\\nimport org.apache.dolphinscheduler.common.enums.Priority;\\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\\n\\nimport java.io.Serializable;\\nimport java.util.Date;\\n\\nimport lombok.Data;\\n\\nimport com.baomidou.mybatisplus.annotation.FieldStrategy;\\nimport com.baomidou.mybatisplus.annotation.IdType;\\nimport com.baomidou.mybatisplus.annotation.TableField;\\nimport com.baomidou.mybatisplus.annotation.TableId;\\nimport com.baomidou.mybatisplus.annotation.TableName;\\n\\n@Data\\n@TableName(\\\"t_ds_task_instance\\\")\\npublic class TaskInstance implements Serializable {\\n\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    private String name;\\n\\n    private String taskType;\\n\\n    private int workflowInstanceId;\\n\\n    private String workflowInstanceName;\\n\\n    private Long projectCode;\\n\\n    private long taskCode;\\n\\n    private int taskDefinitionVersion;\\n\\n    @TableField(exist = false)\\n    private String processDefinitionName;\\n\\n    @TableField(exist = false)\\n    private int taskGroupPriority;\"},{\"fromLine\":63,\"toLine\":83,\"content\":\"    private TaskExecutionStatus state;\\n\\n    private Date firstSubmitTime;\\n\\n    private Date submitTime;\\n\\n    private Date startTime;\\n\\n    private Date endTime;\\n\\n    private String host;\\n\\n    private String executePath;\\n\\n    private String logPath;\\n\\n    private int retryTimes;\\n\\n    private Flag alertFlag;\\n\\n    @TableField(exist = false)\"},{\"fromLine\":134,\"toLine\":154,\"content\":\"\\n    private Integer cpuQuota;\\n\\n    private Integer memoryMax;\\n\\n    private TaskExecuteType taskExecuteType;\\n\\n    private int testFlag;\\n\\n    public void init(String host, Date startTime, String executePath) {\\n        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\\n    }\\n\\n}\\n\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\":[{\"fromLine\":15,\"toLine\":39,\"content\":\" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\\n\\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\\n\\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\\n                                           String searchVal, String projectParameterDataType);\\n\\n    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);\\n}\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\":[{\"fromLine\":17,\"toLine\":51,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;\\n\\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\\nimport org.apache.dolphinscheduler.api.service.ProjectParameterService;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.constants.Constants;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.PathVariable;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.PutMapping;\\nimport org.springframework.web.bind.annotation.RequestAttribute;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestParam;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport io.swagger.v3.oas.annotations.Operation;\\nimport io.swagger.v3.oas.annotations.Parameter;\\nimport io.swagger.v3.oas.annotations.Parameters;\\nimport io.swagger.v3.oas.annotations.media.Schema;\\nimport io.swagger.v3.oas.annotations.tags.Tag;\\n\"},{\"fromLine\":60,\"toLine\":106,\"content\":\"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\", defaultValue = \\\"VARCHAR\\\") String projectParameterDataType) {\\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", schema = @Schema(implementation = long.class, example = \\\"123456\\\")),\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @PathVariable(\\\"code\\\") Long code,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\") String projectParameterDataType) {\\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", required = true, schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\"}],\"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\":[{\"fromLine\":17,\"toLine\":36,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.enums.UserType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\\n\\nimport org.junit.jupiter.api.Assertions;\\nimport org.junit.jupiter.api.Test;\\nimport org.junit.jupiter.api.extension.ExtendWith;\\nimport org.mockito.InjectMocks;\\nimport org.mockito.Mock;\\nimport org.mockito.Mockito;\\nimport org.mockito.junit.jupiter.MockitoExtension;\\nimport org.mockito.junit.jupiter.MockitoSettings;\\nimport org.mockito.quality.Strictness;\\n\"},{\"fromLine\":41,\"toLine\":74,\"content\":\"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \\\"key\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\\n                Mockito.anyLong())).thenReturn(getSuccessResult());\"}],\"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\":[{\"fromLine\":17,\"toLine\":54,\"content\":\"\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;\\nimport static org.junit.jupiter.api.Assertions.assertEquals;\\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\\nimport static org.junit.jupiter.api.Assertions.assertNull;\\nimport static org.mockito.ArgumentMatchers.any;\\nimport static org.mockito.ArgumentMatchers.anyLong;\\nimport static org.mockito.Mockito.when;\\n\\nimport org.apache.dolphinscheduler.api.AssertionsHelper;\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;\\nimport org.apache.dolphinscheduler.dao.entity.Project;\\nimport org.apache.dolphinscheduler.dao.entity.ProjectParameter;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.dao.mapper.ProjectMapper;\\nimport org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\\n\\nimport java.util.Collections;\\n\\nimport org.junit.jupiter.api.Test;\\nimport org.junit.jupiter.api.extension.ExtendWith;\\nimport org.mockito.InjectMocks;\\nimport org.mockito.Mock;\\nimport org.mockito.MockedStatic;\\nimport org.mockito.Mockito;\\nimport org.mockito.junit.jupiter.MockitoExtension;\\nimport org.mockito.junit.jupiter.MockitoSettings;\\nimport org.mockito.quality.Strictness;\\n\\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\\n\"},{\"fromLine\":70,\"toLine\":167,\"content\":\"\\n    protected final static long projectCode = 1L;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // PERMISSION DENIED\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n\\n        // CODE GENERATION ERROR\\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\\n\\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                    DataType.VARCHAR.name());\\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n        }\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // INSERT DATA ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // NO PERMISSION\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        // PROJECT_PARAMETER_NOT_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // PROJECT_UPDATE_ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key1\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\\n        assertNotNull(projectParameter.getOperator());\\n        assertNotNull(projectParameter.getUpdateTime());\\n        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java\":[{\"fromLine\":17,\"toLine\":62,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;\\n\\nimport org.apache.dolphinscheduler.api.audit.OperatorLog;\\nimport org.apache.dolphinscheduler.api.audit.enums.AuditType;\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\\nimport org.apache.dolphinscheduler.api.service.SchedulerService;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\\nimport org.apache.dolphinscheduler.common.enums.Priority;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport java.util.Map;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.DeleteMapping;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.PathVariable;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.PutMapping;\\nimport org.springframework.web.bind.annotation.RequestAttribute;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestParam;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport io.swagger.v3.oas.annotations.Operation;\\nimport io.swagger.v3.oas.annotations.Parameter;\\nimport io.swagger.v3.oas.annotations.Parameters;\\nimport io.swagger.v3.oas.annotations.media.Schema;\\nimport io.swagger.v3.oas.annotations.tags.Tag;\\n\"},{\"fromLine\":72,\"toLine\":141,\"content\":\"    public static final String DEFAULT_NOTIFY_GROUP_ID = \\\"1\\\";\\n    public static final String DEFAULT_FAILURE_POLICY = \\\"CONTINUE\\\";\\n    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = \\\"MEDIUM\\\";\\n\\n    @Autowired\\n    private SchedulerService schedulerService;\\n\\n    /**\\n     * create schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\\n     * @param workflowDefinitionCode workflow definition code\\n     * @param schedule scheduler\\n     * @param warningType warning type\\n     * @param warningGroupId warning group id\\n     * @param failureStrategy failure strategy\\n     * @param workflowInstancePriority workflow instance priority\\n     * @param workerGroup worker group\\n     * @param tenantCode tenant code\\n     * @return create result code\\n     */\\n    @Operation(summary = \\\"createSchedule\\\", description = \\\"CREATE_SCHEDULE_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"workflowDefinitionCode\\\", description = \\\"WORKFLOW_DEFINITION_CODE\\\", required = true, schema = @Schema(implementation = long.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"schedule\\\", description = \\\"SCHEDULE\\\", schema = @Schema(implementation = String.class, example = \\\"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}\\\")),\\n            @Parameter(name = \\\"warningType\\\", description = \\\"WARNING_TYPE\\\", schema = @Schema(implementation = WarningType.class)),\\n            @Parameter(name = \\\"warningGroupId\\\", description = \\\"WARNING_GROUP_ID\\\", schema = @Schema(implementation = int.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"failureStrategy\\\", description = \\\"FAILURE_STRATEGY\\\", schema = @Schema(implementation = FailureStrategy.class)),\\n            @Parameter(name = \\\"workerGroup\\\", description = \\\"WORKER_GROUP\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"tenantCode\\\", description = \\\"TENANT_CODE\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"environmentCode\\\", description = \\\"ENVIRONMENT_CODE\\\", schema = @Schema(implementation = long.class)),\\n            @Parameter(name = \\\"workflowInstancePriority\\\", description = \\\"WORKFLOW_INSTANCE_PRIORITY\\\", schema = @Schema(implementation = Priority.class)),\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_SCHEDULE_ERROR)\\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                 @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                 @RequestParam(value = \\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                 @RequestParam(value = \\\"schedule\\\") String schedule,\\n                                 @RequestParam(value = \\\"warningType\\\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\\n                                 @RequestParam(value = \\\"warningGroupId\\\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\\n                                 @RequestParam(value = \\\"failureStrategy\\\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\\n                                 @RequestParam(value = \\\"workerGroup\\\", required = false, defaultValue = \\\"default\\\") String workerGroup,\\n                                 @RequestParam(value = \\\"tenantCode\\\", required = false, defaultValue = \\\"default\\\") String tenantCode,\\n                                 @RequestParam(value = \\\"environmentCode\\\", required = false, defaultValue = \\\"-1\\\") Long environmentCode,\\n                                 @RequestParam(value = \\\"workflowInstancePriority\\\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\\n        Map<String, Object> result = schedulerService.insertSchedule(\\n                loginUser,\\n                projectCode,\\n                workflowDefinitionCode,\\n                schedule,\\n                warningType,\\n                warningGroupId,\\n                failureStrategy,\\n                workflowInstancePriority,\\n                workerGroup,\\n                tenantCode,\\n                environmentCode);\\n\\n        return returnDataList(result);\\n    }\\n\\n    /**\\n     * updateWorkflowInstance schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\"},{\"fromLine\":299,\"toLine\":359,\"content\":\"    @ApiException(PREVIEW_SCHEDULE_ERROR)\\n    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                  @RequestParam(value = \\\"schedule\\\") String schedule) {\\n        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);\\n        return returnDataList(result);\\n    }\\n\\n    /**\\n     * update workflow definition schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\\n     * @param workflowDefinitionCode workflow definition code\\n     * @param schedule scheduler\\n     * @param warningType warning type\\n     * @param warningGroupId warning group id\\n     * @param failureStrategy failure strategy\\n     * @param workerGroup worker group\\n     * @param workflowInstancePriority workflow instance priority\\n     * @return update result code\\n     */\\n    @Operation(summary = \\\"updateScheduleByWorkflowDefinitionCode\\\", description = \\\"UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"workflowDefinitionCode\\\", description = \\\"WORKFLOW_DEFINITION_CODE\\\", required = true, schema = @Schema(implementation = long.class, example = \\\"12345678\\\")),\\n            @Parameter(name = \\\"schedule\\\", description = \\\"SCHEDULE\\\", schema = @Schema(implementation = String.class, example = \\\"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}\\\")),\\n            @Parameter(name = \\\"warningType\\\", description = \\\"WARNING_TYPE\\\", schema = @Schema(implementation = WarningType.class)),\\n            @Parameter(name = \\\"warningGroupId\\\", description = \\\"WARNING_GROUP_ID\\\", schema = @Schema(implementation = int.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"failureStrategy\\\", description = \\\"FAILURE_STRATEGY\\\", schema = @Schema(implementation = FailureStrategy.class)),\\n            @Parameter(name = \\\"workerGroup\\\", description = \\\"WORKER_GROUP\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"tenantCode\\\", description = \\\"TENANT_CODE\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"workflowInstancePriority\\\", description = \\\"WORKFLOW_INSTANCE_PRIORITY\\\", schema = @Schema(implementation = Priority.class)),\\n            @Parameter(name = \\\"environmentCode\\\", description = \\\"ENVIRONMENT_CODE\\\", schema = @Schema(implementation = long.class)),\\n    })\\n    @PutMapping(\\\"/update/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_SCHEDULE_ERROR)\\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\\n    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                                         @PathVariable(value = \\\"code\\\") long workflowDefinitionCode,\\n                                                         @RequestParam(value = \\\"schedule\\\") String schedule,\\n                                                         @RequestParam(value = \\\"warningType\\\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\\n                                                         @RequestParam(value = \\\"warningGroupId\\\", required = false) int warningGroupId,\\n                                                         @RequestParam(value = \\\"failureStrategy\\\", required = false, defaultValue = \\\"END\\\") FailureStrategy failureStrategy,\\n                                                         @RequestParam(value = \\\"workerGroup\\\", required = false, defaultValue = \\\"default\\\") String workerGroup,\\n                                                         @RequestParam(value = \\\"tenantCode\\\", required = false, defaultValue = \\\"default\\\") String tenantCode,\\n                                                         @RequestParam(value = \\\"environmentCode\\\", required = false, defaultValue = \\\"-1\\\") long environmentCode,\\n                                                         @RequestParam(value = \\\"workflowInstancePriority\\\", required = false) Priority workflowInstancePriority) {\\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\\n                workflowDefinitionCode, schedule,\\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\\n                environmentCode);\\n        return returnDataList(result);\\n    }\\n}\\n\"}],\"dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":12,\"toLine\":59,\"content\":\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private String title;\\n\\n    private String content;\\n\\n    private Integer alertGroupId;\\n\\n    public String getTitle() {\\n        return title;\\n    }\\n\\n    public void setTitle(String title) {\\n        this.title = title;\\n    }\\n\\n    public String getContent() {\\n        return content;\\n    }\\n\\n    public void setContent(String content) {\\n        this.content = content;\\n    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n}\\n\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java\":[{\"fromLine\":17,\"toLine\":37,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.entity;\\n\\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\\nimport org.apache.dolphinscheduler.common.enums.AlertType;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\n\\nimport java.util.Date;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\nimport com.baomidou.mybatisplus.annotation.IdType;\\nimport com.baomidou.mybatisplus.annotation.TableField;\\nimport com.baomidou.mybatisplus.annotation.TableId;\\nimport com.baomidou.mybatisplus.annotation.TableName;\\n\"},{\"fromLine\":42,\"toLine\":77,\"content\":\"@TableName(\\\"t_ds_alert\\\")\\npublic class Alert {\\n\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    @TableField(value = \\\"sign\\\")\\n    private String sign;\\n\\n    @TableField(value = \\\"title\\\")\\n    private String title;\\n\\n    @TableField(value = \\\"content\\\")\\n    private String content;\\n\\n    @TableField(value = \\\"alert_status\\\")\\n    private AlertStatus alertStatus;\\n\\n    @TableField(value = \\\"warning_type\\\")\\n    private WarningType warningType;\\n\\n    @TableField(value = \\\"log\\\")\\n    private String log;\\n\\n    @TableField(\\\"alertgroup_id\\\")\\n    private Integer alertGroupId;\\n\\n    @TableField(\\\"create_time\\\")\\n    private Date createTime;\\n\\n    @TableField(\\\"update_time\\\")\\n    private Date updateTime;\\n\\n    @TableField(\\\"project_code\\\")\\n    private Long projectCode;\\n\"}]}",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\": [\n            {\n                \"fromLine\": 62,\n                \"toLine\": 96,\n                \"oldContent\": \"Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"id\\\", workflowInstanceCode);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", projectCode);\\n        return requestClient.get(url, headers, params);\\n    }\\n\\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"projectCode\\\", projectCode);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"executeType\\\", executeType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", projectCode);\\n        return requestClient.post(url, headers, params);\\n    }\\n\\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\\n                                    TaskDependType taskDependType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"startNodeList\\\", startNodeList);\\n        params.put(\\\"taskDependType\\\", taskDependType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\",\n                \"newContent\": \"public HttpResponse queryExecutingWorkflow(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", parameters.getProjectCode());\\n        return requestClient.get(url, parameters.getHeaders(), parameters.getParams());\\n    }\\n\\n    public HttpResponse execute(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", parameters.getProjectCode());\\n        return requestClient.post(url, parameters.getHeaders(), parameters.getParams());\\n    }\\n\\n    public HttpResponse executeTask(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\": [\n            {\n                \"fromLine\": 261,\n                \"toLine\": 294,\n                \"oldContent\": \"List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\\n                                                            @Param(\\\"states\\\") int[] states);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowDefinitionCode workflowDefinitionCode\\n     * @param name                  name\\n     * @param host                  host\\n     * @param startTime             startTime\\n     * @param endTime               endTime\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\\n                                                              @Param(\\\"state\\\") Integer state,\\n                                                              @Param(\\\"host\\\") String host);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param startTime    startTime\\n     * @param endTime      endTime\\n     * @param projectCode  projectCode\\n     * @param workflowCode workflowCode\",\n                \"newContent\": \"List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowInstanceQuery workflow instance query parameters\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              WorkflowInstanceQuery workflowInstanceQuery);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param workflowInstanceQuery workflow instance query parameters\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\": [\n            {\n                \"fromLine\": 134,\n                \"toLine\": 154,\n                \"oldContent\": \"\\n    private Integer cpuQuota;\\n\\n    private Integer memoryMax;\\n\\n    private TaskExecuteType taskExecuteType;\\n\\n    private int testFlag;\\n\\n    public void init(String host, Date startTime, String executePath) {\\n        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\\n    }\\n\\n}\\n\",\n                \"newContent\": \"\\n    private TaskResourceInfo taskResourceInfo;\\n\\n    private int testFlag;\\n\\n    public void init(TaskExecutionEnvironment taskExecutionEnvironment) {\\n        this.host = taskExecutionEnvironment.getHost();\\n        this.startTime = taskExecutionEnvironment.getStartTime();\\n        this.executePath = taskExecutionEnvironment.getExecutePath();\\n    }\\n\\n}\\n\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\": [\n            {\n                \"fromLine\": 15,\n                \"toLine\": 39,\n                \"oldContent\": \" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\\n\\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\\n\\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\\n                                           String searchVal, String projectParameterDataType);\\n\\n    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);\\n}\",\n                \"newContent\": \" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(ProjectParameterRequest parameterRequest);\\n\\n    Result updateProjectParameter(ProjectParameterRequest parameterRequest);\\n\\n    Result deleteProjectParametersByCode(ProjectParameterRequest parameterRequest);\\n\\n    Result batchDeleteProjectParametersByCodes(ProjectParameterRequest parameterRequest);\\n\\n    Result queryProjectParameterListPaging(ProjectParameterRequest parameterRequest);\\n\\n    Result queryProjectParameterByCode(ProjectParameterRequest parameterRequest);\\n}\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\": [\n            {\n                \"fromLine\": 60,\n                \"toLine\": 106,\n                \"oldContent\": \"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\", defaultValue = \\\"VARCHAR\\\") String projectParameterDataType) {\\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", schema = @Schema(implementation = long.class, example = \\\"123456\\\")),\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @PathVariable(\\\"code\\\") Long code,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\") String projectParameterDataType) {\\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", required = true, schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\",\n                \"newContent\": \"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@RequestBody ProjectParameterRequest parameterRequest) {\\n        return projectParameterService.createProjectParameter(parameterRequest);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@RequestBody ProjectParameterRequest parameterRequest) {\\n        return projectParameterService.updateProjectParameter(parameterRequest);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@RequestBody ProjectParameterRequest parameterRequest) {\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\": [\n            {\n                \"fromLine\": 41,\n                \"toLine\": 74,\n                \"oldContent\": \"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \\\"key\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\\n                Mockito.anyLong())).thenReturn(getSuccessResult());\",\n                \"newContent\": \"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(parameterRequest);\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(parameterRequest);\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any())).thenReturn(getSuccessResult());\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\": [\n            {\n                \"fromLine\": 70,\n                \"toLine\": 167,\n                \"oldContent\": \"\\n    protected final static long projectCode = 1L;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // PERMISSION DENIED\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n\\n        // CODE GENERATION ERROR\\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\\n\\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                    DataType.VARCHAR.name());\\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n        }\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // INSERT DATA ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // NO PERMISSION\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        // PROJECT_PARAMETER_NOT_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[22,13] cannot find symbol\n[ERROR]   symbol:   class AlertInfo\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo\n[ERROR] \n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-task-api\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "{\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":12,\"toLine\":32,\"content\":\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private AlertInfo alertInfo;\\n\\n    public String getTitle() {\\n        return alertInfo.getTitle();\\n    }\\n\\n    public void setTitle(String title) {\\n        alertInfo.setTitle(title);\\n    }\\n\\n    public String getContent() {\"}]}",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.5
}