{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 61,
                "toLine": 95,
                "oldContent": "public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"id\", workflowInstanceCode);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/query-executing-workflow\", projectCode);\n        return requestClient.get(url, headers, params);\n    }\n\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n",
                "newContent": "public HttpResponse queryExecutingWorkflow(ExecutionRequestContext context) {\n        Map<String, Object> params = context.createParamsMap();\n        Map<String, String> headers = context.createHeadersMap(sessionId);\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/query-executing-workflow\", context.getProjectCode());\n        return requestClient.get(url, headers, params);\n    }\n\n    public HttpResponse execute(ExecutionRequestContext context, ExecuteType executeType) {\n        Map<String, Object> params = context.createParamsMap();\n        params.put(\"executeType\", executeType);\n        Map<String, String> headers = context.createHeadersMap(sessionId);\n\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute\", context.getProjectCode());\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse executeTask(ExecutionRequestContext context, String startNodeList, TaskDependType taskDependType) {\n        Map<String, Object> params = context.createParamsMap();\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);\n        Map<String, String> headers = context.createHeadersMap(sessionId);\n"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 260,
                "toLine": 286,
                "oldContent": "@Param(\"states\") int[] states);\n\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowDefinitionCode\") long workflowDefinitionCode,\n                                                            @Param(\"workflowDefinitionVersion\") int workflowDefinitionVersion,\n                                                            @Param(\"states\") int[] states);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);\n\n    /**",
                "newContent": "@Param(\"states\") WorkflowInstanceState[] states);\n\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\"workflowDefinitionCode\") long workflowDefinitionCode,\n                                                            @Param(\"workflowDefinitionVersion\") int workflowDefinitionVersion,\n                                                            @Param(\"states\") WorkflowInstanceState[] states);\n\n    /**\n     * Filter workflow instance\n     *\n     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host\n     * @param startTime             startTime\n     * @param endTime               endTime\n     * @return workflow instance IPage\n     */\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") WorkflowInstanceTime startTime,\n                                                              @Param(\"endTime\") WorkflowInstanceTime endTime,\n                                                              @Param(\"state\") WorkflowInstanceState state,\n                                                              @Param(\"host\") String host);\n\n    /**"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 62,
                "toLine": 82,
                "oldContent": "\n    private TaskExecutionStatus state;\n\n    private Date firstSubmitTime;\n\n    private Date submitTime;\n\n    private Date startTime;\n\n    private Date endTime;\n\n    private String host;\n\n    private String executePath;\n\n    private String logPath;\n\n    private int retryTimes;\n\n    private Flag alertFlag;\n",
                "newContent": "\n    private TaskExecutionInfo executionInfo;\n"
            },
            {
                "fromLine": 133,
                "toLine": 153,
                "oldContent": "    private int taskGroupId;\n\n    private Integer cpuQuota;\n\n    private Integer memoryMax;\n\n    private TaskExecuteType taskExecuteType;\n\n    private int testFlag;\n\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;\n    }\n\n}\n",
                "newContent": "    private TaskResourceInfo resourceInfo;\n\n    private int testFlag;\n\n    public void init(TaskExecutionInfo executionInfo) {\n        this.executionInfo = executionInfo;\n    }\n\n}\n"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 14,
                "toLine": 37,
                "oldContent": " * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\n\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\n\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);\n",
                "newContent": " * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic interface ProjectParameterService {\n\n    Result createProjectParameter(User loginUser, long projectCode, ProjectParameterInfo parameterInfo);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, ProjectParameterInfo parameterInfo);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\n\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\n\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);\n"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 59,
                "toLine": 105,
                "oldContent": "    private ProjectParameterService projectParameterService;\n\n    @Operation(summary = \"createProjectParameter\", description = \"CREATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"projectParameterName\", description = \"PROJECT_PARAMETER_NAME\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"updateProjectParameter\", description = \"UPDATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", schema = @Schema(implementation = long.class, example = \"123456\")),\n            @Parameter(name = \"projectParameterName\", description = \"PROJECT_PARAMETER_NAME\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"deleteProjectParametersByCode\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({\n            @Parameter(name = \"code\", description = \"PROJECT_PARAMETER_CODE\", required = true, schema = @Schema(implementation = String.class))\n    })\n    @PostMapping(value = \"/delete\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)",
                "newContent": "    private ProjectParameterService projectParameterService;\n\n    @Operation(summary = \"createProjectParameter\", description = \"CREATE_PROJECT_PARAMETER_NOTES\")\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestBody ProjectParameterInfo parameterInfo) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);\n    }\n\n    @Operation(summary = \"updateProjectParameter\", description = \"UPDATE_PROJECT_PARAMETER_NOTES\")\n    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestBody ProjectParameterInfo parameterInfo) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, parameterInfo);\n    }\n\n    @Operation(summary = \"deleteProjectParametersByCode\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @PostMapping(value = \"/delete\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 40,
                "toLine": 73,
                "oldContent": "\n    @InjectMocks\n    private ProjectParameterController projectParameterController;\n\n    @Mock\n    private ProjectParameterServiceImpl projectParameterService;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testDeleteProjectParametersByCode() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),",
                "newContent": "\n    @InjectMocks\n    private ProjectParameterController projectParameterController;\n\n    @Mock\n    private ProjectParameterServiceImpl projectParameterService;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, parameterInfo);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.LONG.name());\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, parameterInfo);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testDeleteProjectParametersByCode() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 69,
                "toLine": 166,
                "oldContent": "    private ProjectServiceImpl projectService;\n\n    protected final static long projectCode = 1L;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n\n        // CODE GENERATION
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 69,
                "toLine": 166,
                "oldContent": "    private ProjectServiceImpl projectService;\n\n    protected final static long projectCode = 1L;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n\n        // CODE GENERATION ERROR\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n        }\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // INSERT DATA ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());\n        assertNotNull(projectParameter.getUpdateTime());\n        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());\n    }\n\n    @Test",
                "newContent": "    private ProjectServiceImpl projectService;\n\n    protected final static long projectCode = 1L;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n\n        // CODE GENERATION ERROR\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n        }\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // INSERT DATA ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name()));\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, new ProjectParameterInfo(\"key1\", \"value\", DataType.LONG.name()));\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());\n        assertNotNull(projectParameter.getUpdateTime());\n        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());\n    }\n\n    @Test"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 71,
                "toLine": 140,
                "oldContent": "    public static final String DEFAULT_WARNING_TYPE = \"NONE\";\n    public static final String DEFAULT_NOTIFY_GROUP_ID = \"1\";\n    public static final String DEFAULT_FAILURE_POLICY = \"CONTINUE\";\n    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = \"MEDIUM\";\n\n    @Autowired\n    private SchedulerService schedulerService;\n\n    /**\n     * create schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workflowInstancePriority workflow instance priority\n     * @param workerGroup worker group\n     * @param tenantCode tenant code\n     * @return create result code\n     */\n    @Operation(summary = \"createSchedule\", description = \"CREATE_SCHEDULE_NOTES\")\n    @Parameters({\n            @Parameter(name = \"workflowDefinitionCode\", description = \"WORKFLOW_DEFINITION_CODE\", required = true, schema = @Schema(implementation = long.class, example = \"100\")),\n            @Parameter(name = \"schedule\", description = \"SCHEDULE\", schema = @Schema(implementation = String.class, example = \"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}\")),\n            @Parameter(name = \"warningType\", description = \"WARNING_TYPE\", schema = @Schema(implementation = WarningType.class)),\n            @Parameter(name = \"warningGroupId\", description = \"WARNING_GROUP_ID\", schema = @Schema(implementation = int.class, example = \"100\")),\n            @Parameter(name = \"failureStrategy\", description = \"FAILURE_STRATEGY\", schema = @Schema(implementation = FailureStrategy.class)),\n            @Parameter(name = \"workerGroup\", description = \"WORKER_GROUP\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"tenantCode\", description = \"TENANT_CODE\", schema = @Schema(implementation = String.class, example = \"default\")),\n            @Parameter(name = \"environmentCode\", description = \"ENVIRONMENT_CODE\", schema = @Schema(implementation = long.class)),\n            @Parameter(name = \"workflowInstancePriority\", description = \"WORKFLOW_INSTANCE_PRIORITY\", schema = @Schema(implementation = Priority.class)),\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n\n        return returnDataList(result);\n    }\n\n    /**\n     * updateWorkflowInstance schedule\n     *\n     * @param loginUser login user",
                "newContent": "    public static final String DEFAULT_WARNING_TYPE = \"NONE\";\n    public static final String DEFAULT_NOTIFY_GROUP_ID = \"1\";\n    public static final String DEFAULT_FAILURE_POLICY = \"CONTINUE\";\n    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = \"MEDIUM\";\n\n    @Autowired\n    private SchedulerService schedulerService;\n\n    /**\n     * create schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param scheduleConfig scheduler configuration\n     * @return create result code\n     */\n    @Operation(summary = \"createSchedule\", description = \"CREATE_SCHEDULE_NOTES\")\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @RequestBody ScheduleConfig scheduleConfig) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                scheduleConfig.getWorkflowDefinitionCode(),\n                scheduleConfig.getSchedule(),\n                scheduleConfig.getWarningType(),\n                scheduleConfig.getWarningGroupId(),\n                scheduleConfig.getFailureStrategy(),\n                scheduleConfig.getWorkflowInstancePriority(),\n                scheduleConfig.getWorkerGroup(),\n                scheduleConfig.getTenantCode(),\n                scheduleConfig.getEnvironmentCode());\n\n        return returnDataList(result);\n    }\n\n    /**\n     * updateWorkflowInstance schedule\n     *\n     * @param loginUser login user"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 11,
                "toLine": 58,
                "oldContent": " * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;\n    }\n}\n",
                "newContent": " * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class TaskAlertInfo {\n\n    private AlertData alertData;\n\n    public String getTitle() {\n        return alertData.getTitle();\n    }\n\n    public void setTitle(String title) {\n        alertData.setTitle(title);\n    }\n\n    public String getContent() {\n        return alertData.getContent();\n    }\n\n    public void setContent(String content) {\n        alertData.setContent(content);\n    }\n\n    public Integer getAlertGroupId() {\n        return alertData.getAlertGroupId();\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        alertData.setAlertGroupId(alertGroupId);\n    }\n}\n"
            }
        ],
        "dol
{
    "refactorings": {
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 41,
                "toLine": 76,
                "oldContent": "@AllArgsConstructor\n@TableName(\"t_ds_alert\")\npublic class Alert {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    @TableField(value = \"sign\")\n    private String sign;\n\n    @TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n\n    @TableField(value = \"warning_type\")\n    private WarningType warningType;\n\n    @TableField(value = \"log\")\n    private String log;\n\n    @TableField(\"alertgroup_id\")\n    private Integer alertGroupId;\n\n    @TableField(\"create_time\")\n    private Date createTime;\n\n    @TableField(\"update_time\")\n    private Date updateTime;\n\n    @TableField(\"project_code\")\n    private Long projectCode;",
                "newContent": "@AllArgsConstructor\n@TableName(\"t_ds_alert\")\npublic class Alert {\n\n    @TableId(value = \"id\", type = IdType.AUTO)\n    private Integer id;\n\n    @TableField(value = \"sign\")\n    private String sign;\n\n    private AlertData alertData;\n\n    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n\n    @TableField(value = \"log\")\n    private String log;\n\n    @TableField(\"create_time\")\n    private Date createTime;\n\n    @TableField(\"update_time\")\n    private Date updateTime;\n\n    @TableField(\"project_code\")\n    private Long projectCode;"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/model/ExecutionRequestContext.java": "package org.apache.dolphinscheduler.api.test.model;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExecutionRequestContext {\n\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n\n    public ExecutionRequestContext(User loginUser, long projectCode, int workflowInstanceId) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowInstanceId = workflowInstanceId;\n    }\n\n    public Map<String, Object> createParamsMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        return params;\n    }\n\n    public Map<String, String> createHeadersMap(String sessionId) {\n        Map<String, String> headers = new HashMap<>();\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        return headers;\n    }\n\n    public long getProjectCode() {\n        return projectCode;\n    }\n}\n",
        "org/apache/dolphinscheduler/dao/model/WorkflowInstanceState.java": "package org.apache.dolphinscheduler.dao.model;\n\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\n\npublic class WorkflowInstanceState {\n\n    private WorkflowExecutionStatus state;\n\n    public WorkflowInstanceState(WorkflowExecutionStatus state) {\n        this.state = state;\n    }\n\n    public WorkflowExecutionStatus getState() {\n        return state;\n    }\n}\n",
        "org/apache/dolphinscheduler/dao/model/WorkflowInstanceTime.java": "package org.apache.dolphinscheduler.dao.model;\n\nimport java.util.Date;\n\npublic class WorkflowInstanceTime {\n\n    private Date time;\n\n    public WorkflowInstanceTime(Date time) {\n        this.time = time;\n    }\n\n    public Date getTime() {\n        return time;\n    }\n}\n",
        "org/apache/dolphinscheduler/dao/entity/TaskExecutionInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\n\nimport java.util.Date;\n\npublic class TaskExecutionInfo {\n\n    private TaskExecutionStatus state;\n    private Date firstSubmitTime;\n    private Date submitTime;\n    private Date startTime;\n    private Date endTime;\n    private String host;\n    private String executePath;\n    private String logPath;\n    private int retryTimes;\n    private Flag alertFlag;\n\n    public TaskExecutionInfo(TaskExecutionStatus state, Date firstSubmitTime, Date submitTime, Date startTime, Date endTime, String host, String executePath, String logPath, int retryTimes, Flag alertFlag) {\n        this.state = state;\n        this.firstSubmitTime = firstSubmitTime;\n        this.submitTime = submitTime;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.host = host;\n        this.executePath = executePath;\n        this.logPath = logPath;\n        this.retryTimes = retryTimes;\n        this.alertFlag = alertFlag;\n    }\n\n    // Getters and setters\n}\n",
        "org/apache/dolphinscheduler/dao/entity/TaskResourceInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\n\npublic class TaskResourceInfo {\n\n    private int taskGroupId;\n    private Integer cpuQuota;\n    private Integer memoryMax;\n    private TaskExecuteType taskExecuteType;\n\n    public TaskResourceInfo(int taskGroupId, Integer cpuQuota, Integer memoryMax, TaskExecuteType taskExecuteType) {\n        this.taskGroupId = taskGroupId;\n        this.cpuQuota = cpuQuota;\n        this.memoryMax = memoryMax;\n        this.taskExecuteType = taskExecuteType;\n    }\n\n    // Getters and setters\n}\n",
        "org/apache/dolphinscheduler/api/model/ProjectParameterInfo.java": "package org.apache.dolphinscheduler.api.model;\n\npublic class ProjectParameterInfo {\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    public ProjectParameterInfo(String projectParameterName, String projectParameterValue, String projectParameterDataType) {\n        this.projectParameterName = projectParameterName;\n        this.projectParameterValue = projectParameterValue;\n        this.projectParameterDataType = projectParameterDataType;\n    }\n\n    // Getters and setters\n}\n",
        "org/apache/dolphinscheduler/api/model/ScheduleConfig.java": "package org.apache.dolphinscheduler.api.model;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\n\npublic class ScheduleConfig {\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    public ScheduleConfig(long workflowDefinitionCode, String schedule, WarningType warningType, int warningGroupId, FailureStrategy failureStrategy, Priority workflowInstancePriority, String workerGroup, String tenantCode, Long environmentCode) {\n        this.workflowDefinitionCode = workflowDefinitionCode;\n        this.schedule = schedule;\n        this.warningType = warningType;\n        this.warningGroupId = warningGroupId;\n        this.failureStrategy = failureStrategy;\n        this.workflowInstancePriority = workflowInstancePriority;\n        this.workerGroup = workerGroup;\n        this.tenantCode = tenantCode;\n        this.environmentCode = environmentCode;\n    }\n\n    // Getters and setters\n}\n",
        "org/apache/dolphinscheduler/plugin/task/api/model/AlertData.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class AlertData {\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    public AlertData(String title, String content, Integer alertGroupId) {\n        this.title = title;\n        this.content = content;\n        this.alertGroupId = alertGroupId;\n    }\n\n    // Getters and setters\n}\n"
    }
}