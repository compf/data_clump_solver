{
    "messages": [
        {
            "content": "\nI will provide you code snippets of one or more Java  files.\n\nRefactor all data clumps in the respective files.\nTo do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.\nAlso provide the content of all extracted classes.\nIf possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.\n\n\n Examples of data clump are provided below.\n## Examples\n/* \n    These examples show data clumps and how they might be refactored\n    Imports are missing so these examples would not compile\n*/\n// ### example 5#########################\n//'method parameters to method parameters' data clump\nclass Example1A {\n\n    // both methods share at least 3 parameters, so we can extract those 3\n    // parameters into a class\n\n    public static String buildServiceKey(String path, String group, String version) {\n        int length = path == null ? 0 : path.length();\n        length += group == null ? 0 : group.length();\n        length += version == null ? 0 : version.length();\n        length += 2;\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(group)) {\n            buf.append(group).append('/');\n        }\n        buf.append(path);\n        if (StringUtils.isNotEmpty(version)) {\n            buf.append(':').append(version);\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(String path, String group, String version, String prefix) {\n        return prefix + buildServiceKey(path, group, version);\n    }\n\n}\n\n// ## refactored ##################################\nclass KeyData {\n    private String path;\n    private String group;\n    private String version;\n\n    KeyData(String path, String group, String version) {\n        this.path = path;\n        this.group = group;\n        this.version = version;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public int getLength() {\n        return path == null ? 0\n                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;\n    }\n\n}\n\nclass Example1A {\n\n    public static String buildServiceKey(KeyData keyData) {\n        int length = keyData.getLength();\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(keyData.getGroup())) {\n            buf.append(keyData.getGroup()).append('/');\n        }\n        buf.append(keyData.getPath());\n        if (StringUtils.isNotEmpty(keyData.getVersion())) {\n            buf.append(':').append(keyData.getVersion());\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(KeyData keyData, String prefix) {\n        return prefix + buildServiceKey(keyData);\n    }\n}\n// #### example 5 end ##################################\n\n//\n\n// ## example 2 ##################################\n// 'fields to fields' data clump\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a class\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\t\t\t\n\t\t\tint state = node.getId();\n\t\t\tstates.add(state);\n\t\t\tsuccessors.put(state, new ArrayList<Integer>());\n\t\t\tlabels.put(state, new ArrayList<Label>())\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + successors.get(state) + \", Labels: \"\n                    + labels.get(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## refactored ##################################\n\nclass StateGraphData {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n\n    StateGraphData() {\n        this.states = new ArrayList<Integer>();\n        this.successors = new HashMap<Integer, List<Integer>>();\n        this.labels = new HashMap<Integer, List<Label>>();\n    }\n\n    public List<Integer> getStates() {\n        return states;\n    }\n\n    public Map<Integer, List<Integer>> getSuccessors(int state) {\n        return successors.get(state);\n    }\n\n    public Map<Integer, List<Label>> getLabels(int state) {\n        return labels.get(state);\n    }\n\n    public void addState(int state) {\n        states.add(state);\n        successors.put(state, new ArrayList<Integer>());\n        labels.put(state, new ArrayList<Label>());\n    }\n\n}\n\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a\n    // class\n    private StateGraphData stateGraphData;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\n            stateGraphData.addState(node.getId());\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private StateGraphData stateGraphData;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + stateGraphData.getSuccessor(state) + \", Labels: \"\n                    + stateGraphData.getLabel(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## example 2 end ##################################\n\n// ## example 3 ##################################\n// 'parameters to fields' data clump\nclass Example3A {\n    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {\n        return parameterTypes.length == arguments.length;\n    }\n}\n\n// Example3B.java\nclass Example3B {\n\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private String methodName;\n\n    private Class<?>[] parameterTypes;\n\n    private Object[] arguments;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n\n}\n\n// ## refactored ##################################\nclass MethodCallData {\n    public String methodName;\n    public Class<?>[] parameterTypes;\n    public Object[] arguments;\n\n    public boolean isValid() {\n        return parameterTypes.length == arguments.length;\n    }\n\n}\n\nclass Example3A {\n    boolean validate(MethodCallData methodCallData) {\n        return methodCallData.isValid();\n    }\n}\n\nclass Example3B {\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private MethodCallData methodCallData;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n}\n// ## example 3 end ##################################\n\n// ## example 4 ##################################\nclass Example4A {\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        writer.incrementNumberReturned();\n        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));\n    }\n}\n\n// Example4B.java\nclass Example4B extends Example4A {\n     // This pair of methods do not constitute a data clump even if signature is copied because\n    // the method is overridden and therefore must have the same paremeters\n    @Override\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        root.reset();\n        super.beforeEvaluation(writer, root, feature);\n    }\n   \n}\n// ## example 4 end ##################################\n\n## Examples end\n\n\nUse the following JSON format for the output:\n\n## JSON\n\n{\n    \"refactorings\":{\n        // for each refactored file\n        \"file1Path\": [\n            // for each change in the file performed by you. Try to group changes of neighboring lines\n            {\n                \"fromLine\": \"<the fromLine>\",\n                \"toLine\":\"<the toLine>\",\n                \"oldContent\": \"the old content of the changed lines\",\n                \"newContent\": \"the new content of the changed lines\"\n            },\n            //...\n        ]\n    },\n    \"extractedClasses\":{\n          // for each extracted class\n        \"extractedClassPath1\": \"full content of the newly extracted class 1 \",\n        //...\n    }\n}\n\n## END JSON\n\n",
            "role": "user"
        },
        {
            "content": "{\"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\":[{\"fromLine\":17,\"toLine\":34,\"content\":\"\\npackage org.apache.dolphinscheduler.api.test.pages.workflow;\\n\\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\\nimport org.apache.dolphinscheduler.api.test.core.Constants;\\nimport org.apache.dolphinscheduler.api.test.entity.HttpResponse;\\nimport org.apache.dolphinscheduler.api.test.utils.RequestClient;\\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\\nimport org.apache.dolphinscheduler.common.enums.TaskDependType;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":62,\"toLine\":96,\"content\":\"        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"id\\\", workflowInstanceCode);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", projectCode);\\n        return requestClient.get(url, headers, params);\\n    }\\n\\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"projectCode\\\", projectCode);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"executeType\\\", executeType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", projectCode);\\n        return requestClient.post(url, headers, params);\\n    }\\n\\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\\n                                    TaskDependType taskDependType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"startNodeList\\\", startNodeList);\\n        params.put(\\\"taskDependType\\\", taskDependType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\":[{\"fromLine\":17,\"toLine\":35,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.mapper;\\n\\nimport org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;\\nimport org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;\\nimport org.apache.dolphinscheduler.dao.entity.WorkflowInstance;\\nimport org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;\\n\\nimport org.apache.ibatis.annotations.Param;\\n\\nimport java.util.Collection;\\nimport java.util.Date;\\nimport java.util.List;\\nimport java.util.Set;\\n\\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\\nimport com.baomidou.mybatisplus.core.metadata.IPage;\\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\\n\"},{\"fromLine\":261,\"toLine\":294,\"content\":\"\\n    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\\n                                                            @Param(\\\"states\\\") int[] states);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowDefinitionCode workflowDefinitionCode\\n     * @param name                  name\\n     * @param host                  host\\n     * @param startTime             startTime\\n     * @param endTime               endTime\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\\n                                                              @Param(\\\"state\\\") Integer state,\\n                                                              @Param(\\\"host\\\") String host);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param startTime    startTime\\n     * @param endTime      endTime\\n     * @param projectCode  projectCode\\n     * @param workflowCode workflowCode\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\":[{\"fromLine\":17,\"toLine\":61,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.entity;\\n\\nimport org.apache.dolphinscheduler.common.enums.Flag;\\nimport org.apache.dolphinscheduler.common.enums.Priority;\\nimport org.apache.dolphinscheduler.common.enums.TaskExecuteType;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\\n\\nimport java.io.Serializable;\\nimport java.util.Date;\\n\\nimport lombok.Data;\\n\\nimport com.baomidou.mybatisplus.annotation.FieldStrategy;\\nimport com.baomidou.mybatisplus.annotation.IdType;\\nimport com.baomidou.mybatisplus.annotation.TableField;\\nimport com.baomidou.mybatisplus.annotation.TableId;\\nimport com.baomidou.mybatisplus.annotation.TableName;\\n\\n@Data\\n@TableName(\\\"t_ds_task_instance\\\")\\npublic class TaskInstance implements Serializable {\\n\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    private String name;\\n\\n    private String taskType;\\n\\n    private int workflowInstanceId;\\n\\n    private String workflowInstanceName;\\n\\n    private Long projectCode;\\n\\n    private long taskCode;\\n\\n    private int taskDefinitionVersion;\\n\\n    @TableField(exist = false)\\n    private String processDefinitionName;\\n\\n    @TableField(exist = false)\\n    private int taskGroupPriority;\"},{\"fromLine\":63,\"toLine\":83,\"content\":\"    private TaskExecutionStatus state;\\n\\n    private Date firstSubmitTime;\\n\\n    private Date submitTime;\\n\\n    private Date startTime;\\n\\n    private Date endTime;\\n\\n    private String host;\\n\\n    private String executePath;\\n\\n    private String logPath;\\n\\n    private int retryTimes;\\n\\n    private Flag alertFlag;\\n\\n    @TableField(exist = false)\"},{\"fromLine\":134,\"toLine\":154,\"content\":\"\\n    private Integer cpuQuota;\\n\\n    private Integer memoryMax;\\n\\n    private TaskExecuteType taskExecuteType;\\n\\n    private int testFlag;\\n\\n    public void init(String host, Date startTime, String executePath) {\\n        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\\n    }\\n\\n}\\n\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\":[{\"fromLine\":15,\"toLine\":39,\"content\":\" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\\n\\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\\n\\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\\n                                           String searchVal, String projectParameterDataType);\\n\\n    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);\\n}\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\":[{\"fromLine\":17,\"toLine\":51,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;\\n\\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\\nimport org.apache.dolphinscheduler.api.service.ProjectParameterService;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.constants.Constants;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.PathVariable;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.PutMapping;\\nimport org.springframework.web.bind.annotation.RequestAttribute;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestParam;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport io.swagger.v3.oas.annotations.Operation;\\nimport io.swagger.v3.oas.annotations.Parameter;\\nimport io.swagger.v3.oas.annotations.Parameters;\\nimport io.swagger.v3.oas.annotations.media.Schema;\\nimport io.swagger.v3.oas.annotations.tags.Tag;\\n\"},{\"fromLine\":60,\"toLine\":106,\"content\":\"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\", defaultValue = \\\"VARCHAR\\\") String projectParameterDataType) {\\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", schema = @Schema(implementation = long.class, example = \\\"123456\\\")),\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @PathVariable(\\\"code\\\") Long code,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\") String projectParameterDataType) {\\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", required = true, schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\"}],\"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\":[{\"fromLine\":17,\"toLine\":36,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.enums.UserType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\\n\\nimport org.junit.jupiter.api.Assertions;\\nimport org.junit.jupiter.api.Test;\\nimport org.junit.jupiter.api.extension.ExtendWith;\\nimport org.mockito.InjectMocks;\\nimport org.mockito.Mock;\\nimport org.mockito.Mockito;\\nimport org.mockito.junit.jupiter.MockitoExtension;\\nimport org.mockito.junit.jupiter.MockitoSettings;\\nimport org.mockito.quality.Strictness;\\n\"},{\"fromLine\":41,\"toLine\":74,\"content\":\"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \\\"key\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\\n                Mockito.anyLong())).thenReturn(getSuccessResult());\"}],\"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\":[{\"fromLine\":17,\"toLine\":54,\"content\":\"\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;\\nimport static org.junit.jupiter.api.Assertions.assertEquals;\\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\\nimport static org.junit.jupiter.api.Assertions.assertNull;\\nimport static org.mockito.ArgumentMatchers.any;\\nimport static org.mockito.ArgumentMatchers.anyLong;\\nimport static org.mockito.Mockito.when;\\n\\nimport org.apache.dolphinscheduler.api.AssertionsHelper;\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;\\nimport org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;\\nimport org.apache.dolphinscheduler.dao.entity.Project;\\nimport org.apache.dolphinscheduler.dao.entity.ProjectParameter;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.dao.mapper.ProjectMapper;\\nimport org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\\n\\nimport java.util.Collections;\\n\\nimport org.junit.jupiter.api.Test;\\nimport org.junit.jupiter.api.extension.ExtendWith;\\nimport org.mockito.InjectMocks;\\nimport org.mockito.Mock;\\nimport org.mockito.MockedStatic;\\nimport org.mockito.Mockito;\\nimport org.mockito.junit.jupiter.MockitoExtension;\\nimport org.mockito.junit.jupiter.MockitoSettings;\\nimport org.mockito.quality.Strictness;\\n\\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\\n\"},{\"fromLine\":70,\"toLine\":167,\"content\":\"\\n    protected final static long projectCode = 1L;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // PERMISSION DENIED\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n\\n        // CODE GENERATION ERROR\\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\\n\\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                    DataType.VARCHAR.name());\\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n        }\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // INSERT DATA ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // NO PERMISSION\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        // PROJECT_PARAMETER_NOT_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // PROJECT_UPDATE_ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key1\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\\n        assertNotNull(projectParameter.getOperator());\\n        assertNotNull(projectParameter.getUpdateTime());\\n        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\"}],\"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java\":[{\"fromLine\":17,\"toLine\":62,\"content\":\"\\npackage org.apache.dolphinscheduler.api.controller;\\n\\nimport static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;\\nimport static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;\\nimport static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;\\n\\nimport org.apache.dolphinscheduler.api.audit.OperatorLog;\\nimport org.apache.dolphinscheduler.api.audit.enums.AuditType;\\nimport org.apache.dolphinscheduler.api.enums.Status;\\nimport org.apache.dolphinscheduler.api.exceptions.ApiException;\\nimport org.apache.dolphinscheduler.api.service.SchedulerService;\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\\nimport org.apache.dolphinscheduler.common.enums.Priority;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport java.util.Map;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.DeleteMapping;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.PathVariable;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.PutMapping;\\nimport org.springframework.web.bind.annotation.RequestAttribute;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RequestParam;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport io.swagger.v3.oas.annotations.Operation;\\nimport io.swagger.v3.oas.annotations.Parameter;\\nimport io.swagger.v3.oas.annotations.Parameters;\\nimport io.swagger.v3.oas.annotations.media.Schema;\\nimport io.swagger.v3.oas.annotations.tags.Tag;\\n\"},{\"fromLine\":72,\"toLine\":141,\"content\":\"    public static final String DEFAULT_NOTIFY_GROUP_ID = \\\"1\\\";\\n    public static final String DEFAULT_FAILURE_POLICY = \\\"CONTINUE\\\";\\n    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = \\\"MEDIUM\\\";\\n\\n    @Autowired\\n    private SchedulerService schedulerService;\\n\\n    /**\\n     * create schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\\n     * @param workflowDefinitionCode workflow definition code\\n     * @param schedule scheduler\\n     * @param warningType warning type\\n     * @param warningGroupId warning group id\\n     * @param failureStrategy failure strategy\\n     * @param workflowInstancePriority workflow instance priority\\n     * @param workerGroup worker group\\n     * @param tenantCode tenant code\\n     * @return create result code\\n     */\\n    @Operation(summary = \\\"createSchedule\\\", description = \\\"CREATE_SCHEDULE_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"workflowDefinitionCode\\\", description = \\\"WORKFLOW_DEFINITION_CODE\\\", required = true, schema = @Schema(implementation = long.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"schedule\\\", description = \\\"SCHEDULE\\\", schema = @Schema(implementation = String.class, example = \\\"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}\\\")),\\n            @Parameter(name = \\\"warningType\\\", description = \\\"WARNING_TYPE\\\", schema = @Schema(implementation = WarningType.class)),\\n            @Parameter(name = \\\"warningGroupId\\\", description = \\\"WARNING_GROUP_ID\\\", schema = @Schema(implementation = int.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"failureStrategy\\\", description = \\\"FAILURE_STRATEGY\\\", schema = @Schema(implementation = FailureStrategy.class)),\\n            @Parameter(name = \\\"workerGroup\\\", description = \\\"WORKER_GROUP\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"tenantCode\\\", description = \\\"TENANT_CODE\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"environmentCode\\\", description = \\\"ENVIRONMENT_CODE\\\", schema = @Schema(implementation = long.class)),\\n            @Parameter(name = \\\"workflowInstancePriority\\\", description = \\\"WORKFLOW_INSTANCE_PRIORITY\\\", schema = @Schema(implementation = Priority.class)),\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_SCHEDULE_ERROR)\\n    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\\n    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                 @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                 @RequestParam(value = \\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                 @RequestParam(value = \\\"schedule\\\") String schedule,\\n                                 @RequestParam(value = \\\"warningType\\\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\\n                                 @RequestParam(value = \\\"warningGroupId\\\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\\n                                 @RequestParam(value = \\\"failureStrategy\\\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\\n                                 @RequestParam(value = \\\"workerGroup\\\", required = false, defaultValue = \\\"default\\\") String workerGroup,\\n                                 @RequestParam(value = \\\"tenantCode\\\", required = false, defaultValue = \\\"default\\\") String tenantCode,\\n                                 @RequestParam(value = \\\"environmentCode\\\", required = false, defaultValue = \\\"-1\\\") Long environmentCode,\\n                                 @RequestParam(value = \\\"workflowInstancePriority\\\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\\n        Map<String, Object> result = schedulerService.insertSchedule(\\n                loginUser,\\n                projectCode,\\n                workflowDefinitionCode,\\n                schedule,\\n                warningType,\\n                warningGroupId,\\n                failureStrategy,\\n                workflowInstancePriority,\\n                workerGroup,\\n                tenantCode,\\n                environmentCode);\\n\\n        return returnDataList(result);\\n    }\\n\\n    /**\\n     * updateWorkflowInstance schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\"},{\"fromLine\":299,\"toLine\":359,\"content\":\"    @ApiException(PREVIEW_SCHEDULE_ERROR)\\n    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                  @RequestParam(value = \\\"schedule\\\") String schedule) {\\n        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);\\n        return returnDataList(result);\\n    }\\n\\n    /**\\n     * update workflow definition schedule\\n     *\\n     * @param loginUser login user\\n     * @param projectCode project code\\n     * @param workflowDefinitionCode workflow definition code\\n     * @param schedule scheduler\\n     * @param warningType warning type\\n     * @param warningGroupId warning group id\\n     * @param failureStrategy failure strategy\\n     * @param workerGroup worker group\\n     * @param workflowInstancePriority workflow instance priority\\n     * @return update result code\\n     */\\n    @Operation(summary = \\\"updateScheduleByWorkflowDefinitionCode\\\", description = \\\"UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"workflowDefinitionCode\\\", description = \\\"WORKFLOW_DEFINITION_CODE\\\", required = true, schema = @Schema(implementation = long.class, example = \\\"12345678\\\")),\\n            @Parameter(name = \\\"schedule\\\", description = \\\"SCHEDULE\\\", schema = @Schema(implementation = String.class, example = \\\"{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}\\\")),\\n            @Parameter(name = \\\"warningType\\\", description = \\\"WARNING_TYPE\\\", schema = @Schema(implementation = WarningType.class)),\\n            @Parameter(name = \\\"warningGroupId\\\", description = \\\"WARNING_GROUP_ID\\\", schema = @Schema(implementation = int.class, example = \\\"100\\\")),\\n            @Parameter(name = \\\"failureStrategy\\\", description = \\\"FAILURE_STRATEGY\\\", schema = @Schema(implementation = FailureStrategy.class)),\\n            @Parameter(name = \\\"workerGroup\\\", description = \\\"WORKER_GROUP\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"tenantCode\\\", description = \\\"TENANT_CODE\\\", schema = @Schema(implementation = String.class, example = \\\"default\\\")),\\n            @Parameter(name = \\\"workflowInstancePriority\\\", description = \\\"WORKFLOW_INSTANCE_PRIORITY\\\", schema = @Schema(implementation = Priority.class)),\\n            @Parameter(name = \\\"environmentCode\\\", description = \\\"ENVIRONMENT_CODE\\\", schema = @Schema(implementation = long.class)),\\n    })\\n    @PutMapping(\\\"/update/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_SCHEDULE_ERROR)\\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\\n    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\\n                                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                                         @PathVariable(value = \\\"code\\\") long workflowDefinitionCode,\\n                                                         @RequestParam(value = \\\"schedule\\\") String schedule,\\n                                                         @RequestParam(value = \\\"warningType\\\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\\n                                                         @RequestParam(value = \\\"warningGroupId\\\", required = false) int warningGroupId,\\n                                                         @RequestParam(value = \\\"failureStrategy\\\", required = false, defaultValue = \\\"END\\\") FailureStrategy failureStrategy,\\n                                                         @RequestParam(value = \\\"workerGroup\\\", required = false, defaultValue = \\\"default\\\") String workerGroup,\\n                                                         @RequestParam(value = \\\"tenantCode\\\", required = false, defaultValue = \\\"default\\\") String tenantCode,\\n                                                         @RequestParam(value = \\\"environmentCode\\\", required = false, defaultValue = \\\"-1\\\") long environmentCode,\\n                                                         @RequestParam(value = \\\"workflowInstancePriority\\\", required = false) Priority workflowInstancePriority) {\\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\\n                workflowDefinitionCode, schedule,\\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\\n                environmentCode);\\n        return returnDataList(result);\\n    }\\n}\\n\"}],\"dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":12,\"toLine\":59,\"content\":\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private String title;\\n\\n    private String content;\\n\\n    private Integer alertGroupId;\\n\\n    public String getTitle() {\\n        return title;\\n    }\\n\\n    public void setTitle(String title) {\\n        this.title = title;\\n    }\\n\\n    public String getContent() {\\n        return content;\\n    }\\n\\n    public void setContent(String content) {\\n        this.content = content;\\n    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n}\\n\"}],\"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java\":[{\"fromLine\":17,\"toLine\":37,\"content\":\"\\npackage org.apache.dolphinscheduler.dao.entity;\\n\\nimport org.apache.dolphinscheduler.common.enums.AlertStatus;\\nimport org.apache.dolphinscheduler.common.enums.AlertType;\\nimport org.apache.dolphinscheduler.common.enums.WarningType;\\n\\nimport java.util.Date;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\\nimport com.baomidou.mybatisplus.annotation.IdType;\\nimport com.baomidou.mybatisplus.annotation.TableField;\\nimport com.baomidou.mybatisplus.annotation.TableId;\\nimport com.baomidou.mybatisplus.annotation.TableName;\\n\"},{\"fromLine\":42,\"toLine\":77,\"content\":\"@TableName(\\\"t_ds_alert\\\")\\npublic class Alert {\\n\\n    @TableId(value = \\\"id\\\", type = IdType.AUTO)\\n    private Integer id;\\n\\n    @TableField(value = \\\"sign\\\")\\n    private String sign;\\n\\n    @TableField(value = \\\"title\\\")\\n    private String title;\\n\\n    @TableField(value = \\\"content\\\")\\n    private String content;\\n\\n    @TableField(value = \\\"alert_status\\\")\\n    private AlertStatus alertStatus;\\n\\n    @TableField(value = \\\"warning_type\\\")\\n    private WarningType warningType;\\n\\n    @TableField(value = \\\"log\\\")\\n    private String log;\\n\\n    @TableField(\\\"alertgroup_id\\\")\\n    private Integer alertGroupId;\\n\\n    @TableField(\\\"create_time\\\")\\n    private Date createTime;\\n\\n    @TableField(\\\"update_time\\\")\\n    private Date updateTime;\\n\\n    @TableField(\\\"project_code\\\")\\n    private Long projectCode;\\n\"}]}",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java\": [\n            {\n                \"fromLine\": 62,\n                \"toLine\": 96,\n                \"oldContent\": \"Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"id\\\", workflowInstanceCode);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", projectCode);\\n        return requestClient.get(url, headers, params);\\n    }\\n\\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"projectCode\\\", projectCode);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"executeType\\\", executeType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", projectCode);\\n        return requestClient.post(url, headers, params);\\n    }\\n\\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\\n                                    TaskDependType taskDependType) {\\n        Map<String, Object> params = new HashMap<>();\\n        params.put(\\\"loginUser\\\", loginUser);\\n        params.put(\\\"workflowInstanceId\\\", workflowInstanceId);\\n        params.put(\\\"startNodeList\\\", startNodeList);\\n        params.put(\\\"taskDependType\\\", taskDependType);\\n        Map<String, String> headers = new HashMap<>();\\n        headers.put(Constants.SESSION_ID_KEY, sessionId);\\n\\n        RequestClient requestClient = new RequestClient();\",\n                \"newContent\": \"public HttpResponse queryExecutingWorkflow(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/query-executing-workflow\\\", parameters.getProjectCode());\\n        return requestClient.get(url, parameters.getHeaders(), parameters.getParams());\\n    }\\n\\n    public HttpResponse execute(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\\n        String url = String.format(\\\"/projects/%s/executors/execute\\\", parameters.getProjectCode());\\n        return requestClient.post(url, parameters.getHeaders(), parameters.getParams());\\n    }\\n\\n    public HttpResponse executeTask(ExecutorParameters parameters) {\\n        RequestClient requestClient = new RequestClient();\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java\": [\n            {\n                \"fromLine\": 261,\n                \"toLine\": 294,\n                \"oldContent\": \"List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param(\\\"workflowDefinitionCode\\\") long workflowDefinitionCode,\\n                                                            @Param(\\\"workflowDefinitionVersion\\\") int workflowDefinitionVersion,\\n                                                            @Param(\\\"states\\\") int[] states);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowDefinitionCode workflowDefinitionCode\\n     * @param name                  name\\n     * @param host                  host\\n     * @param startTime             startTime\\n     * @param endTime               endTime\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              @Param(\\\"projectCode\\\") Long projectCode,\\n                                                              @Param(\\\"workflowDefinitionCode\\\") Long workflowDefinitionCode,\\n                                                              @Param(\\\"name\\\") String name,\\n                                                              @Param(\\\"startTime\\\") String startTime,\\n                                                              @Param(\\\"endTime\\\") String endTime,\\n                                                              @Param(\\\"state\\\") Integer state,\\n                                                              @Param(\\\"host\\\") String host);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param startTime    startTime\\n     * @param endTime      endTime\\n     * @param projectCode  projectCode\\n     * @param workflowCode workflowCode\",\n                \"newContent\": \"List<WorkflowInstance> queryByWorkflowCodeVersionStatus(WorkflowInstanceQuery workflowInstanceQuery);\\n\\n    /**\\n     * Filter workflow instance\\n     *\\n     * @param page                  page\\n     * @param workflowInstanceQuery workflow instance query parameters\\n     * @return workflow instance IPage\\n     */\\n    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\\n                                                              WorkflowInstanceQuery workflowInstanceQuery);\\n\\n    /**\\n     * Statistics workflow instance state v2\\n     * <p>\\n     * We only need project codes to determine whether the workflow instance belongs to the user or not.\\n     *\\n     * @param workflowInstanceQuery workflow instance query parameters\"\n            }\n        ],\n        \"dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java\": [\n            {\n                \"fromLine\": 134,\n                \"toLine\": 154,\n                \"oldContent\": \"\\n    private Integer cpuQuota;\\n\\n    private Integer memoryMax;\\n\\n    private TaskExecuteType taskExecuteType;\\n\\n    private int testFlag;\\n\\n    public void init(String host, Date startTime, String executePath) {\\n        this.host = host;\\n        this.startTime = startTime;\\n        this.executePath = executePath;\\n    }\\n\\n}\\n\",\n                \"newContent\": \"\\n    private TaskResourceInfo taskResourceInfo;\\n\\n    private int testFlag;\\n\\n    public void init(TaskExecutionEnvironment taskExecutionEnvironment) {\\n        this.host = taskExecutionEnvironment.getHost();\\n        this.startTime = taskExecutionEnvironment.getStartTime();\\n        this.executePath = taskExecutionEnvironment.getExecutePath();\\n    }\\n\\n}\\n\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java\": [\n            {\n                \"fromLine\": 15,\n                \"toLine\": 39,\n                \"oldContent\": \" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\\n                                  String projectParameterValue, String projectParameterDataType);\\n\\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);\\n\\n    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);\\n\\n    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\\n                                           String searchVal, String projectParameterDataType);\\n\\n    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);\\n}\",\n                \"newContent\": \" * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.api.service;\\n\\nimport org.apache.dolphinscheduler.api.utils.Result;\\nimport org.apache.dolphinscheduler.dao.entity.User;\\n\\npublic interface ProjectParameterService {\\n\\n    Result createProjectParameter(ProjectParameterRequest parameterRequest);\\n\\n    Result updateProjectParameter(ProjectParameterRequest parameterRequest);\\n\\n    Result deleteProjectParametersByCode(ProjectParameterRequest parameterRequest);\\n\\n    Result batchDeleteProjectParametersByCodes(ProjectParameterRequest parameterRequest);\\n\\n    Result queryProjectParameterListPaging(ProjectParameterRequest parameterRequest);\\n\\n    Result queryProjectParameterByCode(ProjectParameterRequest parameterRequest);\\n}\"\n            }\n        ],\n        \"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java\": [\n            {\n                \"fromLine\": 60,\n                \"toLine\": 106,\n                \"oldContent\": \"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\", defaultValue = \\\"VARCHAR\\\") String projectParameterDataType) {\\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", schema = @Schema(implementation = long.class, example = \\\"123456\\\")),\\n            @Parameter(name = \\\"projectParameterName\\\", description = \\\"PROJECT_PARAMETER_NAME\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterValue\\\", description = \\\"PROJECT_PARAMETER_VALUE\\\", schema = @Schema(implementation = String.class)),\\n            @Parameter(name = \\\"projectParameterDataType\\\", description = \\\"PROJECT_PARAMETER_DATA_TYPE\\\", schema = @Schema(implementation = String.class))\\n    })\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\\n                                         @Parameter(name = \\\"projectCode\\\", description = \\\"PROJECT_CODE\\\", required = true) @PathVariable long projectCode,\\n                                         @PathVariable(\\\"code\\\") Long code,\\n                                         @RequestParam(\\\"projectParameterName\\\") String projectParameterName,\\n                                         @RequestParam(value = \\\"projectParameterValue\\\") String projectParameterValue,\\n                                         @RequestParam(value = \\\"projectParameterDataType\\\") String projectParameterDataType) {\\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\\n                projectParameterValue, projectParameterDataType);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @Parameters({\\n            @Parameter(name = \\\"code\\\", description = \\\"PROJECT_PARAMETER_CODE\\\", required = true, schema = @Schema(implementation = String.class))\\n    })\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\",\n                \"newContent\": \"\\n    @Operation(summary = \\\"createProjectParameter\\\", description = \\\"CREATE_PROJECT_PARAMETER_NOTES\\\")\\n    @PostMapping()\\n    @ResponseStatus(HttpStatus.CREATED)\\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\\n    public Result createProjectParameter(@RequestBody ProjectParameterRequest parameterRequest) {\\n        return projectParameterService.createProjectParameter(parameterRequest);\\n    }\\n\\n    @Operation(summary = \\\"updateProjectParameter\\\", description = \\\"UPDATE_PROJECT_PARAMETER_NOTES\\\")\\n    @PutMapping(value = \\\"/{code}\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\\n    public Result updateProjectParameter(@RequestBody ProjectParameterRequest parameterRequest) {\\n        return projectParameterService.updateProjectParameter(parameterRequest);\\n    }\\n\\n    @Operation(summary = \\\"deleteProjectParametersByCode\\\", description = \\\"DELETE_PROJECT_PARAMETER_NOTES\\\")\\n    @PostMapping(value = \\\"/delete\\\")\\n    @ResponseStatus(HttpStatus.OK)\\n    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)\\n    public Result deleteProjectParametersByCode(@RequestBody ProjectParameterRequest parameterRequest) {\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java\": [\n            {\n                \"fromLine\": 41,\n                \"toLine\": 74,\n                \"oldContent\": \"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \\\"key\\\", \\\"value\\\",\\n                DataType.LONG.name());\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        User loginUser = getGeneralUser();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\\n                Mockito.anyLong())).thenReturn(getSuccessResult());\",\n                \"newContent\": \"    @InjectMocks\\n    private ProjectParameterController projectParameterController;\\n\\n    @Mock\\n    private ProjectParameterServiceImpl projectParameterService;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.createProjectParameter(parameterRequest);\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\\n        Result result = projectParameterController.updateProjectParameter(parameterRequest);\\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testDeleteProjectParametersByCode() {\\n        ProjectParameterRequest parameterRequest = getProjectParameterRequest();\\n\\n        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any())).thenReturn(getSuccessResult());\"\n            }\n        ],\n        \"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java\": [\n            {\n                \"fromLine\": 70,\n                \"toLine\": 167,\n                \"oldContent\": \"\\n    protected final static long projectCode = 1L;\\n\\n    @Test\\n    public void testCreateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // PERMISSION DENIED\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(true);\\n\\n        // CODE GENERATION ERROR\\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\\n\\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                    DataType.VARCHAR.name());\\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n        }\\n\\n        // PROJECT_PARAMETER_ALREADY_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\\n\\n        // INSERT DATA ERROR\\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\\n\\n        // SUCCESS\\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \\\"key1\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\\n    }\\n\\n    @Test\\n    public void testUpdateProjectParameter() {\\n        User loginUser = getGeneralUser();\\n\\n        // NO PERMISSION\\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\\n                .thenReturn(false);\\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \\\"key\\\", \\\"value\\\",\\n                DataType.VARCHAR.name());\\n        assertNull(result.getData());\\n        assertNull(result.getCode());\\n        assertNull(result.getMsg());\\n\\n        // PROJECT_PARAMETER_NOT_EXISTS\\n        when(projectMapper.queryByCode(projectCode)).",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[22,13] cannot find symbol\n[ERROR]   symbol:   class AlertInfo\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo\n[ERROR] \n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-task-api\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "{\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":12,\"toLine\":32,\"content\":\" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private AlertInfo alertInfo;\\n\\n    public String getTitle() {\\n        return alertInfo.getTitle();\\n    }\\n\\n    public void setTitle(String title) {\\n        alertInfo.setTitle(title);\\n    }\\n\\n    public String getContent() {\"}]}",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\": [\n            {\n                \"fromLine\": 12,\n                \"toLine\": 32,\n                \"oldContent\": \" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private AlertInfo alertInfo;\\n\\n    public String getTitle() {\\n        return alertInfo.getTitle();\\n    }\\n\\n    public void setTitle(String title) {\\n        alertInfo.setTitle(title);\\n    }\\n\\n    public String getContent() {\",\n                \"newContent\": \" * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\npublic class TaskAlertInfo {\\n\\n    private String title;\\n    private String content;\\n    private Integer alertGroupId;\\n\\n    public String getTitle() {\\n        return title;\\n    }\\n\\n    public void setTitle(String title) {\\n        this.title = title;\\n    }\\n\\n    public String getContent() {\\n        return content;\\n    }\\n\\n    public void setContent(String content) {\\n        this.content = content;\\n    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n}\\n\"\n            }\n        ]\n    },\n    \"extractedClasses\": {}\n}",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[51,9] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[52,5] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[54,12] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[56,5] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[58,12] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[60,5] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[62,12] class, interface, or enum expected\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[64,5] class, interface, or enum expected\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-task-api\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "{\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":17,\"toLine\":19,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\"},{\"fromLine\":41,\"toLine\":74,\"content\":\"\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n}\\n\\n        return alertInfo.getContent();\\n    }\\n\\n    public void setContent(String content) {\\n        alertInfo.setContent(content);\\n    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertInfo.getAlertGroupId();\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        alertInfo.setAlertGroupId(alertGroupId);\\n    }\\n}\\n\"}]}",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\": [\n            {\n                \"fromLine\": 41,\n                \"toLine\": 74,\n                \"oldContent\": \"\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n}\\n\\n        return alertInfo.getContent();\\n    }\\n\\n    public void setContent(String content) {\\n        alertInfo.setContent(content);\\n    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertInfo.getAlertGroupId();\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        alertInfo.setAlertGroupId(alertGroupId);\\n    }\\n}\\n\",\n                \"newContent\": \"\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n\\n    public String getContent() {\\n        return content;\\n    }\\n\\n    public void setContent(String content) {\\n        this.content = content;\\n    }\\n}\\n\"\n            }\n        ]\n    },\n    \"extractedClasses\": {}\n}",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[50,19] method getContent() is already defined in class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[54,17] method setContent(java.lang.String) is already defined in class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/TimePlaceholderUtils.java:[326,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.TimePlaceholderUtils.TimePlaceholderResolver\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java:[161,25] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PropertyPlaceholderHelper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java:[162,25] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PropertyPlaceholderHelper\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[70,49] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[81,32] cannot find symbol\n[ERROR]   symbol:   method setConnectionParams(Objects.no[...] null)\n[ERROR]   location: variable k8sTaskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[96,29] cannot find symbol\n[ERROR]   symbol:   method getDirect()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[96,87] cannot find symbol\n[ERROR]   symbol:   method getDirect()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[97,53] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[113,40] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[135,57] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[137,25] cannot find symbol\n[ERROR]   symbol:   method setValue(java.lang.String)\n[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[142,31] non-static method mergeVarPool(java.util.List<java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>>) cannot be referenced from a static context\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[150,37] cannot find symbol\n[ERROR]   symbol:   method getDirect()\n[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[169,32] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable p of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[169,58] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[164,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[192,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[199,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java:[45,41] cannot find symbol\n[ERROR]   symbol:   method getResourceAbsolutePathInStorage()\n[ERROR]   location: variable resourceItem of type org.apache.dolphinscheduler.plugin.task.api.resource.ResourceContext.ResourceItem\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[55,47] cannot find symbol\n[ERROR]   symbol:   method getAppIds()\n[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[56,34] cannot find symbol\n[ERROR]   symbol:   method getAppIds()\n[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[65,24] cannot find symbol\n[ERROR]   symbol:   method setAppIds(java.lang.String)\n[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[67,87] constructor ApplicationInfo in class org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    java.lang.String\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[67,65] cannot find symbol\n[ERROR]   symbol:   method getTaskInstanceId()\n[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[63,87] constructor ApplicationInfo in class org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    java.lang.String\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[63,65] cannot find symbol\n[ERROR]   symbol:   method getTaskInstanceId()\n[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[78,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[81,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[85,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[90,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[95,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java:[75,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.DataQualityParameters\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java:[80,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.DataQualityParameters\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[108,17] cannot find symbol\n[ERROR]   symbol:   method setDriverName(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[109,17] cannot find symbol\n[ERROR]   symbol:   method setHost(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[110,17] cannot find symbol\n[ERROR]   symbol:   method setPort(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[111,17] cannot find symbol\n[ERROR]   symbol:   method setDatabase(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[124,21] cannot find symbol\n[ERROR]   symbol:   method setParams(java.util.Map<java.lang.String,java.lang.String>)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[128,17] cannot find symbol\n[ERROR]   symbol:   method setAddress(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[129,17] cannot find symbol\n[ERROR]   symbol:   method setJdbcUrl(java.lang.String)\n[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[62,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[76,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[82,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseShellInterceptor.java:[46,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseShellInterceptor\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/log/TaskLogDiscriminator.java:[43,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.log.TaskLogDiscriminator\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java:[50,39] constructor Property in class org.apache.dolphinscheduler.plugin.task.api.model.Property cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    java.lang.String,org.apache.dolphinscheduler.plugin.task.api.enums.Direct,org.apache.dolphinscheduler.plugin.task.api.enums.DataType,java.lang.String\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java:[51,33] incompatible types: inference variable T has incompatible bounds\n[ERROR]     equality constraints: org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR]     lower bounds: java.lang.Object\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PlaceholderUtils.java:[97,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PlaceholderUtils.PropertyPlaceholderResolver\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[44,69] cannot find symbol\n[ERROR]   symbol:   method getDependTaskList()\n[ERROR]   location: variable dependence of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionDependency\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[47,79] cannot find symbol\n[ERROR]   symbol:   method getSuccessNode()\n[ERROR]   location: variable conditionResult of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionResult\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[48,59] cannot find symbol\n[ERROR]   symbol:   method getFailedNode()\n[ERROR]   location: variable conditionResult of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionResult\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[42,17] cannot find symbol\n[ERROR]   symbol:   method getDefinitionCode()\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[43,17] cannot find symbol\n[ERROR]   symbol:   method getDepTaskCode()\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[44,17] cannot find symbol\n[ERROR]   symbol:   method getCycle()\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[45,17] cannot find symbol\n[ERROR]   symbol:   method getDateValue()\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java:[101,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java:[102,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[93,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[93,72] cannot find symbol\n[ERROR]   symbol:   method getProcessId()\n[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[94,36] cannot find symbol\n[ERROR]   symbol:   method getProcessId()\n[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[96,17] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[101,45] cannot find symbol\n[ERROR]   symbol:   method getTenantCode()\n[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[102,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[105,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[105,74] cannot find symbol\n[ERROR]   symbol:   method getProcessId()\n[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[108,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[108,73] cannot find symbol\n[ERROR]   symbol:   method getProcessId()\n[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[138,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[170,53] cannot find symbol\n[ERROR]   symbol:   method getK8sTaskExecutionContext()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[171,69] cannot find symbol\n[ERROR]   symbol:   method getTaskType()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[176,57] cannot find symbol\n[ERROR]   symbol:   method getTaskAppId()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[175,57] cannot find symbol\n[ERROR]   symbol:   method getK8sTaskExecutionContext()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[179,51] cannot find symbol\n[ERROR]   symbol:   method getHost()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[180,58] cannot find symbol\n[ERROR]   symbol:   method getExecutePath()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[181,57] cannot find symbol\n[ERROR]   symbol:   method getTenantCode()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[183,64] cannot find symbol\n[ERROR]   symbol:   method getAppIds()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[185,64] cannot find symbol\n[ERROR]   symbol:   method getAppIds()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[187,58] cannot find symbol\n[ERROR]   symbol:   method getLogPath()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[188,62] cannot find symbol\n[ERROR]   symbol:   method getAppInfoPath()\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[190,25] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[195,21] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[196,38] non-static method getAppIds(java.lang.String,java.lang.String,java.lang.String) cannot be referenced from a static context\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[198,41] cannot find symbol\n[ERROR]   symbol:   method setAppIds(java.lang.String)\n[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[201,21] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[205,52] constructor YarnApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.YarnApplicationManagerContext cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    java.lang.String,java.lang.String,java.util.List<java.lang.String>\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[208,13] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[227,39] constructor KubernetesApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String,java.lang.String\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[244,25] constructor KubernetesApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext cannot be applied to given types;\n[ERROR]   required: no arguments\n[ERROR]   found:    org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String,java.lang.String\n[ERROR]   reason: actual and formal argument lists differ in length\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java:[64,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseLinuxShellInterceptorBuilder<T,Y>\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java:[108,9] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseLinuxShellInterceptorBuilder<T,Y>\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[51,22] incompatible types: invalid method reference\n[ERROR]     unexpected instance method deserializeVarPool(java.lang.String) found in unbound lookup\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[75,48] cannot find symbol\n[ERROR]   symbol:   method getDirect()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[76,21] cannot find symbol\n[ERROR]   symbol:   variable log\n[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.VarPoolUtils\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[76,89] cannot find symbol\n[ERROR]   symbol:   method getDirect()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[79,36] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[88,22] incompatible types: invalid method reference\n[ERROR]     unexpected instance method deserializeVarPool(java.lang.String) found in unbound lookup\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[107,48] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[112,57] cannot find symbol\n[ERROR]   symbol:   method getProp()\n[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dolphinscheduler-task-api\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "{\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java\":[{\"fromLine\":17,\"toLine\":19,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\"},{\"fromLine\":40,\"toLine\":64,\"content\":\"    }\\n\\n    public Integer getAlertGroupId() {\\n        return alertGroupId;\\n    }\\n\\n    public void setAlertGroupId(Integer alertGroupId) {\\n        this.alertGroupId = alertGroupId;\\n    }\\n\\n    public String getContent() {\\n        return content;\\n    }\\n\\n    public void setContent(String content) {\\n        this.content = content;\\n    }\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/TimePlaceholderUtils.java\":[{\"fromLine\":17,\"toLine\":67,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parser;\\n\\nimport static org.apache.commons.lang3.time.DateUtils.addWeeks;\\nimport static org.apache.dolphinscheduler.common.utils.DateUtils.addDays;\\nimport static org.apache.dolphinscheduler.common.utils.DateUtils.addMinutes;\\nimport static org.apache.dolphinscheduler.common.utils.DateUtils.addMonths;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_MONTHS;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_STRING;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COMMA;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DIVISION_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DIVISION_STRING;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.HYPHEN;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LAST_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LEFT_BRACE_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LEFT_BRACE_STRING;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_BEGIN;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_END;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_FIRST_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_LAST_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MULTIPLY_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MULTIPLY_STRING;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.N;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.P;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.PARAMETER_FORMAT_TIME;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.RIGHT_BRACE_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SUBTRACT_CHAR;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SUBTRACT_STRING;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.THIS_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TIMESTAMP;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_BEGIN;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_END;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_FIRST_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_LAST_DAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.YEAR_WEEK;\\n\\nimport org.apache.dolphinscheduler.common.utils.DateUtils;\\n\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.util.AbstractMap;\\nimport java.util.ArrayList;\\nimport java.util.Calendar;\\nimport java.util.Date;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Stack;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":316,\"toLine\":336,\"content\":\"        public TimePlaceholderResolver(String value, Date date) {\\n            this.value = value;\\n            this.date = date;\\n        }\\n\\n        @Override\\n        public String resolvePlaceholder(String placeholderName) {\\n            try {\\n                return calculateTime(placeholderName, date);\\n            } catch (Exception ex) {\\n                log.error(\\\"resolve placeholder '{}' in [ {} ]\\\", placeholderName, value, ex);\\n                return null;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * return the formatted date according to the corresponding date format\\n     *\\n     * @param expression date expression\\n     * @param date       date\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java\":[{\"fromLine\":17,\"toLine\":27,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parser;\\n\\nimport java.util.HashMap;\\nimport java.util.HashSet;\\nimport java.util.Map;\\nimport java.util.Properties;\\nimport java.util.Set;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":151,\"toLine\":172,\"content\":\"                        if (propVal == null) {\\n                            propVal = defaultValue;\\n                        }\\n                    }\\n                }\\n                if (propVal != null) {\\n                    // Recursive invocation, parsing placeholders contained in the\\n                    // previously resolved placeholder value.\\n                    propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);\\n                    result.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);\\n                    if (log.isTraceEnabled()) {\\n                        log.trace(\\\"Resolved placeholder '\\\" + placeholder + \\\"'\\\");\\n                    }\\n                    startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());\\n                } else if (this.ignoreUnresolvablePlaceholders) {\\n                    // Proceed with unprocessed value.\\n                    startIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());\\n                } else {\\n                    throw new IllegalArgumentException(\\\"Could not resolve placeholder '\\\"\\n                            + placeholder + \\\"'\\\" + \\\" in value \\\\\\\"\\\" + value + \\\"\\\\\\\"\\\");\\n                }\\n                visitedPlaceholders.remove(originalPlaceholder);\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java\":[{\"fromLine\":17,\"toLine\":48,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parameters;\\n\\nimport org.apache.dolphinscheduler.common.utils.JSONUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.Direct;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.ResourceType;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.Property;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;\\nimport org.apache.dolphinscheduler.plugin.task.api.parameters.resource.DataSourceParameters;\\nimport org.apache.dolphinscheduler.plugin.task.api.parameters.resource.ResourceParametersHelper;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.VarPoolUtils;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\nimport org.apache.commons.collections4.MapUtils;\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.util.ArrayList;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.stream.Collectors;\\n\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.extern.slf4j.Slf4j;\\n\\nimport com.fasterxml.jackson.databind.JsonNode;\\nimport com.fasterxml.jackson.databind.node.ArrayNode;\\nimport com.google.common.collect.Lists;\\n\"},{\"fromLine\":60,\"toLine\":123,\"content\":\"\\n    @Override\\n    public List<ResourceInfo> getResourceFilesList() {\\n        return new ArrayList<>();\\n    }\\n\\n    public Map<String, Property> getLocalParametersMap() {\\n        Map<String, Property> localParametersMaps = new LinkedHashMap<>();\\n        if (localParams != null) {\\n            for (Property property : localParams) {\\n                localParametersMaps.put(property.getProp(), property);\\n            }\\n        }\\n        return localParametersMaps;\\n    }\\n\\n    public K8sTaskExecutionContext generateK8sTaskExecutionContext(ResourceParametersHelper parametersHelper,\\n                                                                   int datasource) {\\n        DataSourceParameters dataSourceParameters =\\n                (DataSourceParameters) parametersHelper.getResourceParameters(ResourceType.DATASOURCE, datasource);\\n        K8sTaskExecutionContext k8sTaskExecutionContext = new K8sTaskExecutionContext();\\n        k8sTaskExecutionContext.setConnectionParams(\\n                Objects.nonNull(dataSourceParameters) ? dataSourceParameters.getConnectionParams() : null);\\n        return k8sTaskExecutionContext;\\n    }\\n\\n    /**\\n     * get input local parameters map if the param direct is IN\\n     *\\n     * @return parameters map\\n     */\\n    public Map<String, Property> getInputLocalParametersMap() {\\n        Map<String, Property> localParametersMaps = new LinkedHashMap<>();\\n        if (localParams != null) {\\n            for (Property property : localParams) {\\n                // The direct of some tasks is empty, default IN\\n                if (property.getDirect() == null || Objects.equals(Direct.IN, property.getDirect())) {\\n                    localParametersMaps.put(property.getProp(), property);\\n                }\\n            }\\n        }\\n        return localParametersMaps;\\n    }\\n\\n    /**\\n     * get varPool map\\n     *\\n     * @return parameters map\\n     */\\n    public Map<String, Property> getVarPoolMap() {\\n        Map<String, Property> varPoolMap = new LinkedHashMap<>();\\n        if (varPool != null) {\\n            for (Property property : varPool) {\\n                varPoolMap.put(property.getProp(), property);\\n            }\\n        }\\n        return varPoolMap;\\n    }\\n\\n    public void setVarPool(String varPool) {\\n        if (StringUtils.isEmpty(varPool)) {\\n            this.varPool = new ArrayList<>();\\n        } else {\\n            this.varPool = JSONUtils.toList(varPool, Property.class);\"},{\"fromLine\":125,\"toLine\":179,\"content\":\"    }\\n\\n    public void dealOutParam(Map<String, String> taskOutputParams) {\\n        List<Property> outProperty = getOutProperty(localParams);\\n        if (CollectionUtils.isEmpty(outProperty)) {\\n            return;\\n        }\\n        if (CollectionUtils.isNotEmpty(outProperty) && MapUtils.isNotEmpty(taskOutputParams)) {\\n            // Inject the value\\n            for (Property info : outProperty) {\\n                String value = taskOutputParams.get(info.getProp());\\n                if (value != null) {\\n                    info.setValue(value);\\n                }\\n            }\\n        }\\n\\n        varPool = VarPoolUtils.mergeVarPool(Lists.newArrayList(varPool, outProperty));\\n    }\\n\\n    protected List<Property> getOutProperty(List<Property> params) {\\n        if (CollectionUtils.isEmpty(params)) {\\n            return new ArrayList<>();\\n        }\\n        return params.stream()\\n                .filter(info -> info.getDirect() == Direct.OUT)\\n                .collect(Collectors.toList());\\n    }\\n\\n    public List<Map<String, String>> getListMapByString(String json) {\\n        List<Map<String, String>> allParams = new ArrayList<>();\\n        ArrayNode paramsByJson = JSONUtils.parseArray(json);\\n        for (JsonNode jsonNode : paramsByJson) {\\n            Map<String, String> param = JSONUtils.toMap(jsonNode.toString());\\n            allParams.add(param);\\n        }\\n        return allParams;\\n    }\\n\\n    public ResourceParametersHelper getResources() {\\n        return new ResourceParametersHelper();\\n    }\\n\\n    public void addPropertyToValPool(Property property) {\\n        varPool.removeIf(p -> p.getProp().equals(property.getProp()));\\n        varPool.add(property);\\n    }\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java\":[{\"fromLine\":17,\"toLine\":33,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.Property;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo;\\nimport org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;\\n\\nimport java.util.Map;\\nimport java.util.StringJoiner;\\nimport java.util.concurrent.LinkedBlockingQueue;\\nimport java.util.regex.Matcher;\\n\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":154,\"toLine\":174,\"content\":\"     * log handle\\n     *\\n     * @param logs log list\\n     */\\n    public void logHandle(LinkedBlockingQueue<String> logs) {\\n\\n        StringJoiner joiner = new StringJoiner(\\\"\\\\n\\\\t\\\");\\n        while (!logs.isEmpty()) {\\n            joiner.add(logs.poll());\\n        }\\n        log.info(\\\" -> {}\\\", joiner);\\n    }\\n\\n    /**\\n     * regular expressions match the contents between two specified strings\\n     *\\n     * @param content content\\n     * @param sqlParamsMap sql params map\\n     * @param paramsPropsMap params props map\\n     */\\n    public void setSqlParamsMap(String content, Map<Integer, Property> sqlParamsMap,\"},{\"fromLine\":182,\"toLine\":209,\"content\":\"        while (m.find()) {\\n\\n            String paramName = m.group(TaskConstants.GROUP_NAME1);\\n            if (paramName == null) {\\n                paramName = m.group(TaskConstants.GROUP_NAME2);\\n            }\\n\\n            Property prop = paramsPropsMap.get(paramName);\\n\\n            if (prop == null) {\\n                log.error(\\n                        \\\"setSqlParamsMap: No Property with paramName: {} is found in paramsPropsMap of task instance\\\"\\n                                + \\\" with id: {}. So couldn't put Property in sqlParamsMap.\\\",\\n                        paramName, taskInstanceId);\\n            } else {\\n                sqlParamsMap.put(index, prop);\\n                index++;\\n                log.info(\\n                        \\\"setSqlParamsMap: Property with paramName: {} put in sqlParamsMap of content {} successfully.\\\",\\n                        paramName, content);\\n            }\\n\\n        }\\n    }\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java\":[{\"fromLine\":17,\"toLine\":30,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.resource;\\n\\nimport static com.google.common.base.Preconditions.checkNotNull;\\n\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\nimport lombok.ToString;\\n\"},{\"fromLine\":35,\"toLine\":55,\"content\":\"     * ResourceAbsolutePathInStorage -> ResourceItem\\n     */\\n    private final Map<String, ResourceItem> resourceItemMap;\\n\\n    public ResourceContext() {\\n        this.resourceItemMap = new HashMap<>();\\n    }\\n\\n    public void addResourceItem(ResourceItem resourceItem) {\\n        checkNotNull(resourceItem);\\n        resourceItemMap.put(resourceItem.getResourceAbsolutePathInStorage(), resourceItem);\\n    }\\n\\n    public ResourceItem getResourceItem(String resourceAbsolutePathInStorage) {\\n        ResourceItem resourceItem = resourceItemMap.get(resourceAbsolutePathInStorage);\\n        if (resourceItem == null) {\\n            throw new IllegalArgumentException(\\\"Cannot find the resourceItem: \\\" + resourceAbsolutePathInStorage);\\n        }\\n        return resourceItem;\\n    }\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java\":[{\"fromLine\":17,\"toLine\":25,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo;\\n\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.util.List;\\n\"},{\"fromLine\":45,\"toLine\":77,\"content\":\"\\n    /**\\n     * If appIds is empty, submit a new remote application; otherwise, just track application status.\\n     *\\n     * @param taskCallBack\\n     * @throws TaskException\\n     */\\n    @Override\\n    public void handle(TaskCallBack taskCallBack) throws TaskException {\\n        // if appIds is not empty, just track application status, avoid resubmitting remote task\\n        if (StringUtils.isNotEmpty(taskRequest.getAppIds())) {\\n            setAppIds(taskRequest.getAppIds());\\n            trackApplicationStatus();\\n            return;\\n        }\\n\\n        // submit a remote application\\n        submitApplication();\\n\\n        if (StringUtils.isNotEmpty(getAppIds())) {\\n            taskRequest.setAppIds(getAppIds());\\n            // callback to update remote application info\\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));\\n        }\\n\\n        // keep tracking application status\\n        trackApplicationStatus();\\n    }\\n\\n    /**\\n     * submit a new remote application and get application info\\n     *\\n     * @return\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java\":[{\"fromLine\":17,\"toLine\":34,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.loop;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.AbstractRemoteTask;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskCallBack;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskConstants;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskException;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.RetryUtils;\\n\\nimport java.time.Duration;\\n\\nimport javax.annotation.Nullable;\\n\\nimport lombok.NonNull;\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":53,\"toLine\":105,\"content\":\"    protected BaseLoopTaskExecutor(@NonNull TaskExecutionContext taskExecutionContext) {\\n        super(taskExecutionContext);\\n    }\\n\\n    @Override\\n    public void handle(TaskCallBack taskCallBack) throws TaskException {\\n        try {\\n            final long loopInterval = getTaskInstanceStatusQueryInterval().toMillis();\\n            loopTaskInstanceInfo = submitLoopTask();\\n            this.setAppIds(loopTaskInstanceInfo.getTaskInstanceId());\\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));\\n\\n            // loop the task status until the task is finished or task has been canceled.\\n            // we use retry utils here to avoid the task status query failure due to network failure.\\n            // the default retry policy is 3 times, and the interval is 1 second.\\n            LoopTaskInstanceStatus loopTaskInstanceStatus = null;\\n            while (!cancel) {\\n                loopTaskInstanceStatus = RetryUtils.retryFunction(() -> queryTaskInstanceStatus(loopTaskInstanceInfo));\\n                if (loopTaskInstanceStatus.isFinished()) {\\n                    break;\\n                }\\n                Thread.sleep(loopInterval);\\n            }\\n            if (loopTaskInstanceStatus != null && loopTaskInstanceStatus.isSuccess()) {\\n                setExitStatusCode(TaskConstants.EXIT_CODE_SUCCESS);\\n                log.info(\\\"The task instance: {} execute successfully.\\\", appIds);\\n            } else {\\n                setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);\\n                log.info(\\\"The task instance: {} is execute failure.\\\", appIds);\\n            }\\n        } catch (InterruptedException e) {\\n            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);\\n            log.error(\\\"The current loop thread has been interrupted\\\", e);\\n            Thread.currentThread().interrupt();\\n            throw new TaskException(\\\"The current loop thread has been interrupted\\\");\\n        } catch (TaskException ex) {\\n            // print the error message with task log.\\n            log.error(\\\"Loop task execute error\\\", ex);\\n            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);\\n            throw ex;\\n        } catch (Exception ex) {\\n            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);\\n            log.error(\\\"Loop task execute error\\\", ex);\\n            throw new TaskException(\\\"Loop task execute error\\\", ex);\\n        }\\n    }\\n\\n    /**\\n     * Submit the loop task, if submit failed, directly throw exception\\n     */\\n    public abstract @NonNull LoopTaskInstanceInfo submitLoopTask() throws TaskException;\\n\\n    /**\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java\":[{\"fromLine\":17,\"toLine\":30,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;\\nimport org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;\\nimport org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.spark.SparkParameters;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.MapUtils;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":65,\"toLine\":90,\"content\":\"\\n    /**\\n     * In this function ,we need more detailed check every parameter,\\n     * if the parameter is non-conformant will return false\\n     * @return boolean result\\n     */\\n    @Override\\n    public boolean checkParameters() {\\n\\n        if (ruleId == 0) {\\n            log.error(\\\"rule id is null\\\");\\n            return false;\\n        }\\n\\n        if (MapUtils.isEmpty(ruleInputParameter)) {\\n            log.error(\\\"rule input parameter is empty\\\");\\n            return false;\\n        }\\n\\n        return sparkParameters != null;\\n    }\\n\\n    @Override\\n    public List<ResourceInfo> getResourceFilesList() {\\n        return new ArrayList<>();\\n    }\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java\":[{\"fromLine\":17,\"toLine\":36,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.utils;\\n\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COLON;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DOUBLE_SLASH;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.EQUAL_SIGN;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.QUESTION;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SEMICOLON;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SINGLE_SLASH;\\nimport static org.apache.dolphinscheduler.plugin.task.api.utils.DataQualityConstants.MYSQL;\\nimport static org.apache.dolphinscheduler.plugin.task.api.utils.DataQualityConstants.POSTGRESQL;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo;\\nimport org.apache.dolphinscheduler.spi.enums.DbType;\\n\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\"},{\"fromLine\":98,\"toLine\":139,\"content\":\"        }\\n\\n        if (database.contains(QUESTION)) {\\n            database = database.substring(0, database.indexOf(QUESTION));\\n        }\\n\\n        if (database.contains(SEMICOLON)) {\\n            database = database.substring(0, database.indexOf(SEMICOLON));\\n        }\\n\\n        jdbcInfo.setDriverName(driverName);\\n        jdbcInfo.setHost(host);\\n        jdbcInfo.setPort(port);\\n        jdbcInfo.setDatabase(database);\\n\\n        if (StringUtils.isNotEmpty(params)) {\\n            Map<String, String> others = new HashMap<>();\\n            String[] paramList = params.split(\\\"&\\\");\\n            for (String param : paramList) {\\n                // handle bad params\\n                if (StringUtils.isEmpty(param) || !param.contains(EQUAL_SIGN)) {\\n                    continue;\\n                }\\n                String[] kv = param.split(EQUAL_SIGN);\\n                others.put(kv[0], kv[1]);\\n            }\\n            jdbcInfo.setParams(others);\\n        }\\n\\n        String address = \\\"jdbc:\\\" + driverName + \\\"://\\\" + host + COLON + port;\\n        jdbcInfo.setAddress(address);\\n        jdbcInfo.setJdbcUrl(address + SINGLE_SLASH + database);\\n\\n        return jdbcInfo;\\n    }\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java\":[{\"fromLine\":17,\"toLine\":38,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.shell;\\n\\nimport org.apache.dolphinscheduler.common.utils.FileUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.nio.file.StandardOpenOption;\\nimport java.util.ArrayList;\\nimport java.util.Collection;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.stream.Collectors;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":52,\"toLine\":92,\"content\":\"        finalScripts.addAll(customEnvScript());\\n        // add k8s config\\n        finalScripts.addAll(k8sConfig());\\n        // add shell body\\n        finalScripts.add(shellBody());\\n        // create shell file\\n        String finalScript = finalScripts.stream().collect(Collectors.joining(System.lineSeparator()));\\n        Path shellAbsolutePath = shellAbsolutePath();\\n        FileUtils.createFileWith755(shellAbsolutePath);\\n        Files.write(shellAbsolutePath, finalScript.getBytes(), StandardOpenOption.APPEND);\\n        log.info(\\\"Final Shell file is : \\\\n{}\\\", finalScript);\\n    }\\n\\n    private String shellBody() {\\n        if (CollectionUtils.isEmpty(scripts)) {\\n            return StringUtils.EMPTY;\\n        }\\n        String scriptBody = scripts\\n                .stream()\\n                .collect(Collectors.joining(System.lineSeparator()));\\n        return ParameterUtils.convertParameterPlaceholders(scriptBody, propertyMap);\\n    }\\n\\n    private Collection<String> k8sConfig() {\\n        log.warn(\\\"k8s config is not supported in windows\\\");\\n        return Collections.emptyList();\\n    }\\n\\n    protected List<String> generateBootstrapCommand() {\\n        if (sudoEnable) {\\n            log.warn(\\\"sudo is not supported in windows\\\");\\n        }\\n        // todo: support tenant in widnows\\n        List<String> bootstrapCommand = new ArrayList<>();\\n        bootstrapCommand.add(shellInterpreter());\\n        bootstrapCommand.add(shellAbsolutePath().toString());\\n        return bootstrapCommand;\\n    }\\n\\n    protected abstract String shellHeader();\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseShellInterceptor.java\":[{\"fromLine\":17,\"toLine\":25,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.shell;\\n\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.util.List;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":36,\"toLine\":56,\"content\":\"\\n    @Override\\n    public Process execute() throws IOException {\\n        // init process builder\\n        ProcessBuilder processBuilder = new ProcessBuilder();\\n        // setting up a working directory\\n        processBuilder.directory(new File(workingDirectory));\\n        // merge error information to standard output stream\\n        processBuilder.redirectErrorStream(true);\\n        processBuilder.command(executeCommands);\\n        log.info(\\\"Executing shell command : {}\\\", String.join(\\\" \\\", executeCommands));\\n        return processBuilder.start();\\n    }\\n\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/log/TaskLogDiscriminator.java\":[{\"fromLine\":17,\"toLine\":28,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.log;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.LogUtils;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\\nimport org.slf4j.MDC;\\n\\nimport ch.qos.logback.classic.spi.ILoggingEvent;\\nimport ch.qos.logback.core.sift.AbstractDiscriminator;\\n\"},{\"fromLine\":33,\"toLine\":53,\"content\":\"public class TaskLogDiscriminator extends AbstractDiscriminator<ILoggingEvent> {\\n\\n    private String key;\\n\\n    private String logBase;\\n\\n    @Override\\n    public String getDiscriminatingValue(ILoggingEvent event) {\\n        String taskInstanceLogPath = MDC.get(LogUtils.TASK_INSTANCE_LOG_FULL_PATH_MDC_KEY);\\n        if (taskInstanceLogPath == null) {\\n            log.error(\\\"The task instance log path is null, please check the logback configuration, log: {}\\\", event);\\n        }\\n        return taskInstanceLogPath;\\n    }\\n\\n    @Override\\n    public void start() {\\n        started = true;\\n    }\\n\\n    @Override\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java\":[{\"fromLine\":17,\"toLine\":28,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.utils;\\n\\nimport org.apache.dolphinscheduler.common.utils.JSONUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DataType;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.Direct;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.Property;\\n\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.stream.Collectors;\\n\"},{\"fromLine\":40,\"toLine\":61,\"content\":\"     *\\n     * @param startParams startParams\\n     * @return startParamList\\n     */\\n    public static List<Property> startParamsTransformPropertyList(String startParams) {\\n        List<Property> startParamList = null;\\n        if (startParams != null) {\\n            try {\\n                Map<String, String> startParamMap = JSONUtils.toMap(startParams);\\n                startParamList = startParamMap.entrySet().stream()\\n                        .map(entry -> new Property(entry.getKey(), Direct.IN, DataType.VARCHAR, entry.getValue()))\\n                        .collect(Collectors.toList());\\n            } catch (Exception ignore) {\\n                startParamList = JSONUtils.toList(startParams, Property.class);\\n            }\\n        }\\n        return startParamList;\\n    }\\n\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PlaceholderUtils.java\":[{\"fromLine\":17,\"toLine\":23,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parser;\\n\\nimport java.util.Map;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":87,\"toLine\":107,\"content\":\"        public PropertyPlaceholderResolver(String value, Map<String, String> paramsMap) {\\n            this.value = value;\\n            this.paramsMap = paramsMap;\\n        }\\n\\n        @Override\\n        public String resolvePlaceholder(String placeholderName) {\\n            try {\\n                return paramsMap.get(placeholderName);\\n            } catch (Exception ex) {\\n                log.error(\\\"resolve placeholder '{}' in [ {} ]\\\", placeholderName, value, ex);\\n                return null;\\n            }\\n        }\\n    }\\n\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java\":[{\"fromLine\":17,\"toLine\":31,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.parameters;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DependentRelation;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.DependentTaskModel;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\n\\nimport java.util.List;\\n\\nimport lombok.AllArgsConstructor;\\nimport lombok.Builder;\\nimport lombok.Data;\\nimport lombok.NoArgsConstructor;\\n\"},{\"fromLine\":34,\"toLine\":58,\"content\":\"@NoArgsConstructor\\n@AllArgsConstructor\\npublic class ConditionsParameters extends AbstractParameters {\\n\\n    private ConditionDependency dependence;\\n\\n    private ConditionResult conditionResult;\\n\\n    @Override\\n    public boolean checkParameters() {\\n        if (dependence == null || CollectionUtils.isEmpty(dependence.getDependTaskList())) {\\n            return false;\\n        }\\n        if (conditionResult == null || CollectionUtils.isEmpty(conditionResult.getSuccessNode())\\n                || CollectionUtils.isEmpty(conditionResult.getFailedNode())) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    @Data\\n    @Builder\\n    @NoArgsConstructor\\n    @AllArgsConstructor\\n    public static class ConditionDependency {\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java\":[{\"fromLine\":17,\"toLine\":24,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.model;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.DependResult;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\\n\\nimport lombok.Data;\\n\"},{\"fromLine\":32,\"toLine\":55,\"content\":\"    private long definitionCode;\\n    private long depTaskCode;\\n    private String cycle;\\n    private String dateValue;\\n    private DependResult dependResult;\\n    private TaskExecutionStatus status;\\n    private Boolean parameterPassing = false;\\n\\n    public String getKey() {\\n        return String.format(\\\"%d-%d-%s-%s\\\",\\n                getDefinitionCode(),\\n                getDepTaskCode(),\\n                getCycle(),\\n                getDateValue());\\n    }\\n\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java\":[{\"fromLine\":17,\"toLine\":34,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.utils;\\n\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LOG_LINES;\\n\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskException;\\n\\nimport java.util.List;\\n\\nimport lombok.extern.slf4j.Slf4j;\\nimport io.fabric8.kubernetes.api.model.Pod;\\nimport io.fabric8.kubernetes.api.model.batch.v1.Job;\\nimport io.fabric8.kubernetes.client.Config;\\nimport io.fabric8.kubernetes.client.KubernetesClient;\\nimport io.fabric8.kubernetes.client.KubernetesClientBuilder;\\nimport io.fabric8.kubernetes.client.Watch;\\nimport io.fabric8.kubernetes.client.Watcher;\\n\"},{\"fromLine\":91,\"toLine\":112,\"content\":\"                podName = pod.getMetadata().getName();\\n                if (podName.contains(\\\"-\\\") && jobName.equals(podName.substring(0, podName.lastIndexOf(\\\"-\\\")))) {\\n                    break;\\n                }\\n            }\\n            return client.pods().inNamespace(namespace)\\n                    .withName(podName)\\n                    .tailingLines(LOG_LINES)\\n                    .getLog(Boolean.TRUE);\\n        } catch (Exception e) {\\n            log.error(\\\"fail to getPodLog\\\", e);\\n            log.error(\\\"response bodies : {}\\\", e.getMessage());\\n        }\\n        return null;\\n    }\\n\\n    public void buildClient(String configYaml) {\\n        try {\\n            Config config = Config.fromKubeconfig(configYaml);\\n            client = new KubernetesClientBuilder().withConfig(config).build();\\n        } catch (Exception e) {\\n            throw new TaskException(\\\"fail to build k8s ApiClient\\\", e);\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java\":[{\"fromLine\":17,\"toLine\":55,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.utils;\\n\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.APPID_COLLECT;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COMMA;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DEFAULT_COLLECT_WAY;\\nimport static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_SET_K8S;\\n\\nimport org.apache.dolphinscheduler.common.utils.OSUtils;\\nimport org.apache.dolphinscheduler.common.utils.PropertyUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskConstants;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskException;\\nimport org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.am.ApplicationManager;\\nimport org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager;\\nimport org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.am.YarnApplicationManagerContext;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.ResourceManagerType;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\nimport org.apache.commons.lang3.StringUtils;\\nimport org.apache.commons.lang3.SystemUtils;\\n\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.ServiceLoader;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nimport lombok.NonNull;\\nimport lombok.extern.slf4j.Slf4j;\\nimport io.fabric8.kubernetes.client.dsl.LogWatch;\\n\"},{\"fromLine\":83,\"toLine\":118,\"content\":\"     * Expression of PID recognition in Linux scene\\n     */\\n    private static final Pattern LINUXPATTERN = Pattern.compile(\\\"\\\\\\\\((\\\\\\\\d+)\\\\\\\\)\\\");\\n\\n    /**\\n     * kill tasks according to different task types.\\n     */\\n    @Deprecated\\n    public static boolean kill(@NonNull TaskExecutionContext request) {\\n        try {\\n            log.info(\\\"Begin kill task instance, processId: {}\\\", request.getProcessId());\\n            int processId = request.getProcessId();\\n            if (processId == 0) {\\n                log.error(\\\"Task instance kill failed, processId is not exist\\\");\\n                return false;\\n            }\\n\\n            String cmd = String.format(\\\"kill -9 %s\\\", getPidsStr(processId));\\n            cmd = OSUtils.getSudoCmd(request.getTenantCode(), cmd);\\n            log.info(\\\"process id:{}, cmd:{}\\\", processId, cmd);\\n\\n            OSUtils.exeCmd(cmd);\\n            log.info(\\\"Success kill task instance, processId: {}\\\", request.getProcessId());\\n            return true;\\n        } catch (Exception e) {\\n            log.error(\\\"Kill task instance error, processId: {}\\\", request.getProcessId(), e);\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * get pids str.\\n     *\\n     * @param processId process id\\n     * @return pids pid String\\n     * @throws Exception exception\"},{\"fromLine\":128,\"toLine\":148,\"content\":\"            rawPidStr = OSUtils.exeCmd(String.format(\\\"%s -p %d\\\", TaskConstants.PSTREE, processId));\\n        } else {\\n            rawPidStr = OSUtils.exeCmd(String.format(\\\"%s -p %d\\\", TaskConstants.PSTREE, processId));\\n        }\\n\\n        return parsePidStr(rawPidStr);\\n    }\\n\\n    public static String parsePidStr(String rawPidStr) {\\n\\n        log.info(\\\"prepare to parse pid, raw pid string: {}\\\", rawPidStr);\\n        ArrayList<String> allPidList = new ArrayList<>();\\n        Matcher mat = null;\\n        if (SystemUtils.IS_OS_MAC) {\\n            if (StringUtils.isNotEmpty(rawPidStr)) {\\n                mat = MACPATTERN.matcher(rawPidStr);\\n            }\\n        } else if (SystemUtils.IS_OS_LINUX) {\\n            if (StringUtils.isNotEmpty(rawPidStr)) {\\n                mat = LINUXPATTERN.matcher(rawPidStr);\\n            }\"},{\"fromLine\":160,\"toLine\":254,\"content\":\"    }\\n\\n    /**\\n     * cancel k8s / yarn application\\n     *\\n     * @param taskExecutionContext\\n     * @return\\n     */\\n    public static void cancelApplication(TaskExecutionContext taskExecutionContext) {\\n        try {\\n            if (Objects.nonNull(taskExecutionContext.getK8sTaskExecutionContext())) {\\n                if (!TASK_TYPE_SET_K8S.contains(taskExecutionContext.getTaskType())) {\\n                    // Set empty container name for Spark on K8S task\\n                    applicationManagerMap.get(ResourceManagerType.KUBERNETES)\\n                            .killApplication(new KubernetesApplicationManagerContext(\\n                                    taskExecutionContext.getK8sTaskExecutionContext(),\\n                                    taskExecutionContext.getTaskAppId(), \\\"\\\"));\\n                }\\n            } else {\\n                String host = taskExecutionContext.getHost();\\n                String executePath = taskExecutionContext.getExecutePath();\\n                String tenantCode = taskExecutionContext.getTenantCode();\\n                List<String> appIds;\\n                if (StringUtils.isNotEmpty(taskExecutionContext.getAppIds())) {\\n                    // is failover\\n                    appIds = Arrays.asList(taskExecutionContext.getAppIds().split(COMMA));\\n                } else {\\n                    String logPath = taskExecutionContext.getLogPath();\\n                    String appInfoPath = taskExecutionContext.getAppInfoPath();\\n                    if (logPath == null || appInfoPath == null || executePath == null || tenantCode == null) {\\n                        log.error(\\n                                \\\"Kill yarn job error, the input params is illegal, host: {}, logPath: {}, appInfoPath: {}, executePath: {}, tenantCode: {}\\\",\\n                                host, logPath, appInfoPath, executePath, tenantCode);\\n                        throw new TaskException(\\\"Cancel application failed!\\\");\\n                    }\\n                    log.info(\\\"Get appIds from worker {}, taskLogPath: {}\\\", host, logPath);\\n                    appIds = LogUtils.getAppIds(logPath, appInfoPath,\\n                            PropertyUtils.getString(APPID_COLLECT, DEFAULT_COLLECT_WAY));\\n                    taskExecutionContext.setAppIds(String.join(TaskConstants.COMMA, appIds));\\n                }\\n                if (CollectionUtils.isEmpty(appIds)) {\\n                    log.info(\\\"The appId is empty\\\");\\n                    return;\\n                }\\n                ApplicationManager applicationManager = applicationManagerMap.get(ResourceManagerType.YARN);\\n                applicationManager.killApplication(new YarnApplicationManagerContext(executePath, tenantCode, appIds));\\n            }\\n        } catch (Exception e) {\\n            log.error(\\\"Cancel application failed: {}\\\", e.getMessage());\\n        }\\n    }\\n\\n    /**\\n     * get k8s application status\\n     *\\n     * @param k8sTaskExecutionContext\\n     * @param taskAppId\\n     * @return\\n     */\\n    public static TaskExecutionStatus getApplicationStatus(K8sTaskExecutionContext k8sTaskExecutionContext,\\n                                                           String taskAppId) {\\n        if (Objects.isNull(k8sTaskExecutionContext)) {\\n            return TaskExecutionStatus.SUCCESS;\\n        }\\n        KubernetesApplicationManager applicationManager =\\n                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);\\n        return applicationManager\\n                .getApplicationStatus(new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId, \\\"\\\"));\\n    }\\n\\n    /**\\n     * get driver pod logs\\n     *\\n     * @param k8sTaskExecutionContext\\n     * @param taskAppId\\n     * @return\\n     */\\n    public static LogWatch getPodLogWatcher(K8sTaskExecutionContext k8sTaskExecutionContext, String taskAppId,\\n                                            String containerName) {\\n        KubernetesApplicationManager applicationManager =\\n                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);\\n\\n        return applicationManager\\n                .getPodLogWatcher(\\n                        new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId, containerName));\\n    }\\n\\n    public static void removeK8sClientCache(String taskAppId) {\\n        KubernetesApplicationManager applicationManager =\\n                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);\\n        applicationManager.removeCache(taskAppId);\\n    }\\n}\\n\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java\":[{\"fromLine\":17,\"toLine\":39,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.shell;\\n\\nimport org.apache.dolphinscheduler.common.utils.FileUtils;\\nimport org.apache.dolphinscheduler.common.utils.PropertyUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.AbstractCommandExecutorConstants;\\nimport org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.io.IOException;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\nimport java.nio.file.StandardOpenOption;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.List;\\nimport java.util.stream.Collectors;\\n\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":54,\"toLine\":74,\"content\":\"        finalScripts.addAll(customEnvScript());\\n        // add k8s config\\n        finalScripts.addAll(k8sConfig());\\n        // add shell body\\n        finalScripts.add(shellBody());\\n        // create shell file\\n        String finalScript = finalScripts.stream().collect(Collectors.joining(System.lineSeparator()));\\n        Path shellAbsolutePath = shellAbsolutePath();\\n        FileUtils.createFileWith755(shellAbsolutePath);\\n        Files.write(shellAbsolutePath, finalScript.getBytes(), StandardOpenOption.APPEND);\\n        log.info(\\n                \\\"Final Shell file is: \\\\n****************************** Script Content *****************************************************************\\\"\\n                        +\\n                        \\\"{}\\\" +\\n                        \\\"\\\\n****************************** Script Content *****************************************************************\\\",\\n                finalScript);\\n    }\\n\\n    protected List<String> generateBootstrapCommand() {\\n        if (sudoEnable) {\\n            return bootstrapCommandInSudoMode();\"},{\"fromLine\":98,\"toLine\":118,\"content\":\"        return customEnvScripts;\\n    }\\n\\n    private List<String> k8sConfig() throws IOException {\\n        if (StringUtils.isEmpty(k8sConfigYaml)) {\\n            return Collections.emptyList();\\n        }\\n        Path kubeConfigPath = Paths.get(FileUtils.getKubeConfigPath(shellDirectory));\\n        FileUtils.createFileWith755(kubeConfigPath);\\n        Files.write(kubeConfigPath, k8sConfigYaml.getBytes(), StandardOpenOption.APPEND);\\n        log.info(\\\"Created kubernetes configuration file: {}.\\\", kubeConfigPath);\\n        return Collections.singletonList(\\\"export KUBECONFIG=\\\" + kubeConfigPath);\\n    }\\n\\n    private String shellBody() {\\n        if (CollectionUtils.isEmpty(scripts)) {\\n            return StringUtils.EMPTY;\\n        }\\n        String scriptBody = scripts\\n                .stream()\\n                .collect(Collectors.joining(System.lineSeparator()));\"}],\"/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java\":[{\"fromLine\":17,\"toLine\":34,\"content\":\"\\npackage org.apache.dolphinscheduler.plugin.task.api.utils;\\n\\nimport org.apache.dolphinscheduler.common.utils.JSONUtils;\\nimport org.apache.dolphinscheduler.plugin.task.api.enums.Direct;\\nimport org.apache.dolphinscheduler.plugin.task.api.model.Property;\\n\\nimport org.apache.commons.collections4.CollectionUtils;\\n\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.stream.Collectors;\\n\\nimport lombok.experimental.UtilityClass;\\nimport lombok.extern.slf4j.Slf4j;\\n\"},{\"fromLine\":41,\"toLine\":61,\"content\":\"    }\\n\\n    /**\\n     * @see #mergeVarPool(List)\\n     */\\n    public String mergeVarPoolJsonString(List<String> varPoolJsons) {\\n        if (CollectionUtils.isEmpty(varPoolJsons)) {\\n            return null;\\n        }\\n        List<List<Property>> varPools = varPoolJsons.stream()\\n                .map(VarPoolUtils::deserializeVarPool)\\n                .collect(Collectors.toList());\\n        List<Property> finalVarPool = mergeVarPool(varPools);\\n        return JSONUtils.toJsonString(finalVarPool);\\n    }\\n\\n    /**\\n     * Merge the given two varpools, and return the merged varpool.\\n     * If the two varpools have the same property({@link Property#getProp()} and {@link Property#getDirect()} is same), the value of the property in varpool2 will be used.\\n     * // todo: we may need to consider the datatype of the property\\n     */\"},{\"fromLine\":65,\"toLine\":122,\"content\":\"        }\\n        if (varPools.size() == 1) {\\n            return varPools.get(0);\\n        }\\n        Map<String, Property> result = new HashMap<>();\\n        for (List<Property> varPool : varPools) {\\n            if (CollectionUtils.isEmpty(varPool)) {\\n                continue;\\n            }\\n            for (Property property : varPool) {\\n                if (!Direct.OUT.equals(property.getDirect())) {\\n                    log.info(\\\"The direct should be OUT in varPool, but got {}\\\", property.getDirect());\\n                    continue;\\n                }\\n                result.put(property.getProp(), property);\\n            }\\n        }\\n        return new ArrayList<>(result.values());\\n    }\\n\\n    public String subtractVarPoolJson(String varPool, List<String> subtractVarPool) {\\n        List<Property> varPoolList = deserializeVarPool(varPool);\\n        List<List<Property>> subtractVarPoolList = subtractVarPool.stream()\\n                .map(VarPoolUtils::deserializeVarPool)\\n                .collect(Collectors.toList());\\n        List<Property> finalVarPool = subtractVarPool(varPoolList, subtractVarPoolList);\\n        return JSONUtils.toJsonString(finalVarPool);\\n    }\\n\\n    /**\\n     * Return the subtracted varpool, which key is in varPool but not in subtractVarPool.\\n     */\\n    public List<Property> subtractVarPool(List<Property> varPool, List<List<Property>> subtractVarPool) {\\n        if (CollectionUtils.isEmpty(varPool)) {\\n            return null;\\n        }\\n        if (CollectionUtils.isEmpty(subtractVarPool)) {\\n            return varPool;\\n        }\\n        Map<String, Property> subtractVarPoolMap = new HashMap<>();\\n        for (List<Property> properties : subtractVarPool) {\\n            for (Property property : properties) {\\n                subtractVarPoolMap.put(property.getProp(), property);\\n            }\\n        }\\n        List<Property> result = new ArrayList<>();\\n        for (Property property : varPool) {\\n            if (!subtractVarPoolMap.containsKey(property.getProp())) {\\n                result.add(property);\\n            }\\n        }\\n        return result;\\n    }\\n\\n}\\n\"}]}",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.5
}