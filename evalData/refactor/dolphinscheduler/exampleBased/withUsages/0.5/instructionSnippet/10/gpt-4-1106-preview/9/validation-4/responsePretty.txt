"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java": [
            {
                "fromLine": 57,
                "toLine": 77,
                "oldContent": "            trackApplicationStatus();\n            return;\n        }\n\n        // submit a remote application\n        submitApplication();\n\n        if (StringUtils.isNotEmpty(getAppIds())) {\n            taskRequest.setAppIds(getAppIds());\n            // callback to update remote application info\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), getAppIds());\n        }\n\n        // keep tracking application status\n        trackApplicationStatus();\n    }\n\n    /**\n     * submit a new remote application and get application info\n     *\n     * @return",
                "newContent": "            trackApplicationStatus();\n            return;\n        }\n\n        // submit a remote application\n        submitApplication();\n\n        if (StringUtils.isNotEmpty(getAppIds())) {\n            taskRequest.setAppIds(getAppIds());\n            // callback to update remote application info\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));\n        }\n\n        // keep tracking application status\n        trackApplicationStatus();\n    }\n\n    /**\n     * submit a new remote application and get application info\n     *\n     * @return"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java": [
            {
                "fromLine": 53,
                "toLine": 73,
                "oldContent": "    protected BaseLoopTaskExecutor(@NonNull TaskExecutionContext taskExecutionContext) {\n        super(taskExecutionContext);\n    }\n\n    @Override\n    public void handle(TaskCallBack taskCallBack) throws TaskException {\n        try {\n            final long loopInterval = getTaskInstanceStatusQueryInterval().toMillis();\n            loopTaskInstanceInfo = submitLoopTask();\n            this.setAppIds(loopTaskInstanceInfo.getTaskInstanceId());\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), getAppIds());\n\n            // loop the task status until the task is finished or task has been canceled.\n            // we use retry utils here to avoid the task status query failure due to network failure.\n            // the default retry policy is 3 times, and the interval is 1 second.\n            LoopTaskInstanceStatus loopTaskInstanceStatus = null;\n            while (!cancel) {\n                loopTaskInstanceStatus = RetryUtils.retryFunction(() -> queryTaskInstanceStatus(loopTaskInstanceInfo));\n                if (loopTaskInstanceStatus.isFinished()) {\n                    break;\n                }",
                "newContent": "    protected BaseLoopTaskExecutor(@NonNull TaskExecutionContext taskExecutionContext) {\n        super(taskExecutionContext);\n    }\n\n    @Override\n    public void handle(TaskCallBack taskCallBack) throws TaskException {\n        try {\n            final long loopInterval = getTaskInstanceStatusQueryInterval().toMillis();\n            loopTaskInstanceInfo = submitLoopTask();\n            this.setAppIds(loopTaskInstanceInfo.getTaskInstanceId());\n            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));\n\n            // loop the task status until the task is finished or task has been canceled.\n            // we use retry utils here to avoid the task status query failure due to network failure.\n            // the default retry policy is 3 times, and the interval is 1 second.\n            LoopTaskInstanceStatus loopTaskInstanceStatus = null;\n            while (!cancel) {\n                loopTaskInstanceStatus = RetryUtils.retryFunction(() -> queryTaskInstanceStatus(loopTaskInstanceInfo));\n                if (loopTaskInstanceStatus.isFinished()) {\n                    break;\n                }"
            }
        ]
    }
}"