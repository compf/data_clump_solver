{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 70,
                "toLine": 72,
                "oldContent": "public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "public HttpResponse execute(ExecutionParameters executionParameters) {"
            },
            {
                "fromLine": 84,
                "toLine": 86,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
                "newContent": "public HttpResponse executeTask(ExecutionTaskParameters executionTaskParameters,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 269,
                "toLine": 272,
                "oldContent": "     * @param page                  page\n     * @param workflowDefinitionCode workflowDefinitionCode\n     * @param name                  name\n     * @param host                  host",
                "newContent": "     * @param workflowInstanceQuery workflowInstanceQuery"
            },
            {
                "fromLine": 275,
                "toLine": 277,
                "oldContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,",
                "newContent": "    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(WorkflowInstanceQuery workflowInstanceQuery,"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 142,
                "toLine": 144,
                "oldContent": "\n    public void init(String host, Date startTime, String executePath) {\n        this.host = host;",
                "newContent": "\n    public void init(TaskInstanceInit taskInstanceInit) {\n        this.host = taskInstanceInit.getHost();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 28,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result createProjectParameter(ProjectParameterInfo projectParameterInfo);"
            },
            {
                "fromLine": 17,
                "toLine": 28,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
                "newContent": "    Result updateProjectParameter(ProjectParameterUpdateInfo projectParameterUpdateInfo);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 68,
                "toLine": 70,
                "oldContent": "    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,",
                "newContent": "    public Result createProjectParameter(ProjectParameterInfo projectParameterInfo) {"
            },
            {
                "fromLine": 73,
                "toLine": 76,
                "oldContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        return projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 87,
                "toLine": 89,
                "oldContent": "    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,",
                "newContent": "    public Result updateProjectParameter(ProjectParameterUpdateInfo projectParameterUpdateInfo) {"
            },
            {
                "fromLine": 93,
                "toLine": 96,
                "oldContent": "                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        return projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 49,
                "toLine": 53,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",",
                "newContent": "        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(getGeneralUser(), 1, \"key\", \"value\", DataType.VARCHAR);\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 60,
                "toLine": 64,
                "oldContent": "        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",",
                "newContent": "        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(getGeneralUser(), 1, 1L, \"key\", \"value\", DataType.VARCHAR);\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(projectParameterUpdateInfo);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 78,
                "toLine": 80,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR);\n        Result result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 91,
                "toLine": 93,
                "oldContent": "            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR);\n            result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 99,
                "toLine": 101,
                "oldContent": "        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 106,
                "toLine": 108,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 112,
                "toLine": 114,
                "oldContent": "        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(loginUser, projectCode, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.createProjectParameter(projectParameterInfo);"
            },
            {
                "fromLine": 124,
                "toLine": 126,
                "oldContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        Result result = projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            },
            {
                "fromLine": 135,
                "toLine": 137,
                "oldContent": "                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            },
            {
                "fromLine": 142,
                "toLine": 144,
                "oldContent": "        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(loginUser, projectCode, 1, \"key\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            },
            {
                "fromLine": 149,
                "toLine": 151,
                "oldContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(loginUser, projectCode, 1, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            },
            {
                "fromLine": 155,
                "toLine": 157,
                "oldContent": "        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        ProjectParameterUpdateInfo projectParameterUpdateInfo = new ProjectParameterUpdateInfo(loginUser, projectCode, 1, \"key1\", \"value\", DataType.VARCHAR);\n        result = projectParameterService.updateProjectParameter(projectParameterUpdateInfo);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 80,
                "toLine": 91,
                "oldContent": "     * create schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workflowInstancePriority workflow instance priority\n     * @param workerGroup worker group\n     * @param tenantCode tenant code",
                "newContent": "     * create schedule\n     *\n     * @param scheduleCreation scheduleCreation"
            },
            {
                "fromLine": 108,
                "toLine": 110,
                "oldContent": "    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,",
                "newContent": "    public Result createSchedule(ScheduleCreation scheduleCreation) {"
            },
            {
                "fromLine": 120,
                "toLine": 131,
                "oldContent": "                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,",
                "newContent": "        Map<String, Object> result = schedulerService.insertSchedule(scheduleCreation);"
            },
            {
                "fromLine": 307,
                "toLine": 317,
                "oldContent": "     * update workflow definition schedule\n     *\n     * @param loginUser login user\n     * @param projectCode project code\n     * @param workflowDefinitionCode workflow definition code\n     * @param schedule scheduler\n     * @param warningType warning type\n     * @param warningGroupId warning group id\n     * @param failureStrategy failure strategy\n     * @param workerGroup worker group\n     * @param workflowInstancePriority workflow instance priority",
                "newContent": "     * update workflow definition schedule\n     *\n     * @param scheduleUpdate scheduleUpdate"
            },
            {
                "fromLine": 334,
                "toLine": 336,
                "oldContent": "    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,",
                "newContent": "    public Result updateScheduleByWorkflowDefinitionCode(ScheduleUpdate scheduleUpdate) {"
            },
            {
                "fromLine": 345,
                "toLine": 349,
                "oldContent": "                                                         @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") long environmentCode,\n                                                         @RequestParam(value = \"workflowInstancePriority\", required = false) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(scheduleUpdate);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 17,
                "toLine": 49,
                "oldContent": "public class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;",
                "newContent": "public class TaskAlertInfo {\n\n    private AlertInfo alertInfo;\n\n    public AlertInfo getAlertInfo() {\n        return alertInfo;\n    }\n\n    public void setAlertInfo(AlertInfo alertInfo) {\n        this.alertInfo = alertInfo;"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 50,
                "toLine": 67,
                "oldContent": "\n    @TableField(value = \"title
{
    "refactorings": {
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 50,
                "toLine": 67,
                "oldContent": "\n    @TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(\"alertgroup_id\")\n    private Integer alertGroupId;",
                "newContent": "\n    private AlertInfo alertInfo;"
            }
        ]
    },
    "extractedClasses": {
        "ExecutorPage.ExecutionParameters": "public class ExecutionParameters {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "ExecutorPage.ExecutionTaskParameters": "public class ExecutionTaskParameters {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private String startNodeList;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "WorkflowInstanceMapper.WorkflowInstanceQuery": "public class WorkflowInstanceQuery {\n    private Page<WorkflowInstance> page;\n    private long workflowDefinitionCode;\n    private String name;\n    private String host;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "TaskInstance.TaskInstanceInit": "public class TaskInstanceInit {\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "ProjectParameterService.ProjectParameterInfo": "public class ProjectParameterInfo {\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "ProjectParameterService.ProjectParameterUpdateInfo": "public class ProjectParameterUpdateInfo extends ProjectParameterInfo {\n    private long code;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "SchedulerController.ScheduleCreation": "public class ScheduleCreation {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "SchedulerController.ScheduleUpdate": "public class ScheduleUpdate extends ScheduleCreation {\n    private long environmentCode;\n\n    // Constructor, getters and setters are omitted for brevity\n}",
        "TaskAlertInfo.AlertInfo": "public class AlertInfo {\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    // Constructor, getters and setters are omitted for brevity\n}"
    }
}