"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 43,
                "toLine": 45,
                "oldContent": "    @Override\n    public List<Session> queryByUserId(Integer userId) {\n    }",
                "newContent": "    @Override\n    public List<Session> queryByUserId(Integer userId) {\n        return mybatisMapper.selectList(new QueryWrapper<Session>().lambda().eq(Session::getUserId, userId));\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 60,
                "toLine": 62,
                "oldContent": "                }\n                } else {\n                    currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());",
                "newContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {\n                    return pluginDefine.getId();\n                }"
            },
            {
                "fromLine": 69,
                "toLine": 75,
                "oldContent": "                }\n                return currPluginDefine.getId();\n     * query plugin define by id\n     *\n     * @param pluginDefineId plugin define id\n     * @return PluginDefine\n     */",
                "newContent": "                } else {\n                    currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());\n                    currPluginDefine.setPluginParams(pluginDefine.getPluginParams());\n                    pluginDefineMapper.updateById(currPluginDefine);\n                }\n                return currPluginDefine.getId();\n    }"
            }
        ]
    }
}"