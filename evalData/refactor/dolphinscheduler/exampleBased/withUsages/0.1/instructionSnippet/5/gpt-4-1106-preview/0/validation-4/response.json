{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java": [
            {
                "fromLine": 69,
                "toLine": 81,
                "oldContent": "public static String generateCacheKey(TaskInstance taskInstance, TaskExecutionContext taskExecutionContext,\n                                          StorageOperator storageOperator) {\n        List<String> keyElements = new ArrayList<>();\n        keyElements.add(String.valueOf(taskExecutionContext.getTaskCode()));\n        keyElements.add(String.valueOf(taskExecutionContext.getTaskDefinitionVersion()));\n        keyElements.add(String.valueOf(taskExecutionContext.getIsCache().getCode()));\n        keyElements.add(String.valueOf(taskExecutionContext.getEnvironmentConfig()));\n        keyElements.add(getTaskInputVarPoolData(taskInstance, taskExecutionContext, storageOperator));\n        String data = StringUtils.join(keyElements, \"_\");\n        return DigestUtils.sha256Hex(data);\n    }",
                "newContent": "public static String generateCacheKey(TaskInstance taskInstance, TaskExecutionContext taskExecutionContext,\n                                          StorageOperator storageOperator) {\n        List<String> keyElements = new ArrayList<>();\n        keyElements.add(String.valueOf(taskInstance.getTaskCode()));\n        keyElements.add(String.valueOf(taskInstance.getTaskDefinitionVersion()));\n        keyElements.add(String.valueOf(taskInstance.getIsCache().getCode()));\n        keyElements.add(String.valueOf(taskInstance.getEnvironmentConfig()));\n        keyElements.add(getTaskInputVarPoolData(taskInstance, taskExecutionContext, storageOperator));\n        String data = StringUtils.join(keyElements, \"_\");\n        return DigestUtils.sha256Hex(data);\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java": [
            {
                "fromLine": 251,
                "toLine": 265,
                "oldContent": ".taskCode(taskInstance.getTaskCode())\n                .taskName(taskInstance.getName())\n                .taskType(taskInstance.getTaskType())\n                .taskStartTime(taskInstance.getStartTime())\n                .taskHost(taskInstance.getHost())",
                "newContent": ".taskCode(taskInstance.getTaskCode())\n                .taskName(taskInstance.getName())\n                .taskType(taskInstance.getTaskType())\n                .taskStartTime(taskInstance.getStartTime())\n                .taskHost(taskInstance.getHost())\n                // Correctly retrieve and set other taskInstance related fields"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/TaskInstanceDaoImpl.java": [
            {
                "fromLine": 69,
                "toLine": 92,
                "oldContent": "                    taskInstance.getTaskCode());\n            return false;\n        }\n        if (processInstanceState == WorkflowExecutionStatus.READY_PAUSE) {\n            taskInstance.setState(TaskExecutionStatus.PAUSE);\n        }\n        taskInstance.setExecutorId(workflowInstance.getExecutorId());\n        taskInstance.setExecutorName(workflowInstance.getExecutorName());\n        taskInstance.setState(getSubmitTaskState(taskInstance, workflowInstance));\n        if (taskInstance.getSubmitTime() == null) {\n            taskInstance.setSubmitTime(new Date());\n        }\n        if (taskInstance.getFirstSubmitTime() == null) {\n            taskInstance.setFirstSubmitTime(taskInstance.getSubmitTime());\n        }\n        return upsertTaskInstance(taskInstance);\n        // Add other taskInstance related fields",
                "newContent": "                    taskInstance.getTaskCode());\n            return false;\n        }\n        if (processInstanceState == WorkflowExecutionStatus.READY_PAUSE) {\n            taskInstance.setState(TaskExecutionStatus.PAUSE);\n        }\n        taskInstance.setExecutorId(workflowInstance.getExecutorId());\n        taskInstance.setExecutorName(workflowInstance.getExecutorName());\n        taskInstance.setState(getSubmitTaskState(taskInstance, workflowInstance));\n        if (taskInstance.getSubmitTime() == null) {\n            taskInstance.setSubmitTime(new Date());\n        }\n        if (taskInstance.getFirstSubmitTime() == null) {\n            taskInstance.setFirstSubmitTime(taskInstance.getSubmitTime());\n        }\n        return upsertTaskInstance(taskInstance);\n        // Correctly retrieve and set other taskInstance related fields"
            },
            {
                "fromLine": 125,
                "toLine": 135,
                "oldContent": "                this.queryValidTaskListByWorkflowInstanceId(taskInstance.getWorkflowInstanceId(),\n                        taskInstance.getTestFlag());\n                // Add other taskInstance related fields",
                "newContent": "                this.queryValidTaskListByWorkflowInstanceId(taskInstance.getWorkflowInstanceId(),\n                        taskInstance.getTestFlag());\n                // Correctly retrieve and set other taskInstance related fields"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/dao/entity/TaskDefinitionKey.java": "Deleted",
        "org/apache/dolphinscheduler/dao/entity/TaskExecutionEnvironment.java": "Deleted",
        "org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceQueryParameters.java": "Deleted"
    }
}