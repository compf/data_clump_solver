{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 66,
                "toLine": 76,
                "oldContent": "        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/query-executing-workflow\", projectCode);\n        return requestClient.get(url, headers, params);\n    }\n\n    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);",
                "newContent": "        headers.put(Constants.SESSION_ID_KEY, sessionId);\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/query-executing-workflow\", projectCode);\n        return requestClient.get(url, headers, params);\n    }\n\n    public HttpResponse execute(ExecutionParameters executionParameters) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", executionParameters.getLoginUser());\n        params.put(\"projectCode\", executionParameters.getProjectCode());\n        params.put(\"workflowInstanceId\", executionParameters.getWorkflowInstanceId());"
            },
            {
                "fromLine": 80,
                "toLine": 90,
                "oldContent": "\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute\", projectCode);\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);",
                "newContent": "\n        RequestClient requestClient = new RequestClient();\n        String url = String.format(\"/projects/%s/executors/execute\", executionParameters.getProjectCode());\n        return requestClient.post(url, headers, params);\n    }\n\n    public HttpResponse executeTask(ExecutionParameters executionParameters, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", executionParameters.getLoginUser());\n        params.put(\"workflowInstanceId\", executionParameters.getWorkflowInstanceId());"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 64,
                "toLine": 80,
                "oldContent": "            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"updateProjectParameter\", description = \"UPDATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({",
                "newContent": "            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)\n    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         ProjectParameterInfo projectParameterInfo) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n    }\n\n    @Operation(summary = \"updateProjectParameter\", description = \"UPDATE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({"
            },
            {
                "fromLine": 83,
                "toLine": 100,
                "oldContent": "            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n\n    @Operation(summary = \"deleteProjectParametersByCode\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({",
                "newContent": "            @Parameter(name = \"projectParameterValue\", description = \"PROJECT_PARAMETER_VALUE\", schema = @Schema(implementation = String.class)),\n            @Parameter(name = \"projectParameterDataType\", description = \"PROJECT_PARAMETER_DATA_TYPE\", schema = @Schema(implementation = String.class))\n    })\n    @PutMapping(value = \"/{code}\")\n    @ResponseStatus(HttpStatus.OK)\n    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         ProjectParameterInfo projectParameterInfo) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterInfo);\n    }\n\n    @Operation(summary = \"deleteProjectParametersByCode\", description = \"DELETE_PROJECT_PARAMETER_NOTES\")\n    @Parameters({"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 45,
                "toLine": 68,
                "oldContent": "    private ProjectParameterServiceImpl projectParameterService;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n",
                "newContent": "    private ProjectParameterServiceImpl projectParameterService;\n\n    @Test\n    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n\n        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, projectParameterInfo);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n\n    @Test\n    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.LONG.name());\n\n        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, projectParameterInfo);\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 74,
                "toLine": 84,
                "oldContent": "    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());",
                "newContent": "    public void testCreateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n\n        // PERMISSION DENIED\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());"
            },
            {
                "fromLine": 87,
                "toLine": 118,
                "oldContent": "                .thenReturn(true);\n\n        // CODE GENERATION ERROR\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n        }\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // INSERT DATA ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n",
                "newContent": "                .thenReturn(true);\n\n        // CODE GENERATION ERROR\n        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {\n            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);\n\n            result = projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n        }\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // INSERT DATA ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterInfo);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n    }\n"
            },
            {
                "fromLine": 120,
                "toLine": 161,
                "oldContent": "    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());",
                "newContent": "    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 120,
                "toLine": 161,
                "oldContent": "    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());",
                "newContent": "    public void testUpdateProjectParameter() {\n        User loginUser = getGeneralUser();\n        ProjectParameterInfo projectParameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n\n        // NO PERMISSION\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(false);\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertNull(result.getData());\n        assertNull(result.getCode());\n        assertNull(result.getMsg());\n\n        // PROJECT_PARAMETER_NOT_EXISTS\n        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));\n        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))\n                .thenReturn(true);\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_PARAMETER_ALREADY_EXISTS\n        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());\n\n        // PROJECT_UPDATE_ERROR\n        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());\n\n        // SUCCESS\n        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, projectParameterInfo);\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());\n        ProjectParameter projectParameter = (ProjectParameter) result.getData();\n        assertNotNull(projectParameter.getOperator());"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ExecutionParameters {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n\n    public ExecutionParameters(User loginUser, long projectCode, int workflowInstanceId) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowInstanceId = workflowInstanceId;\n    }\n\n    public User getLoginUser() {\n        return loginUser;\n    }\n\n    public long getProjectCode() {\n        return projectCode;\n    }\n\n    public int getWorkflowInstanceId() {\n        return workflowInstanceId;\n    }\n}",
        "org/apache/dolphinscheduler/api/controller/ProjectParameterInfo.java": "package org.apache.dolphinscheduler.api.controller;\n\npublic class ProjectParameterInfo {\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    public ProjectParameterInfo(String projectParameterName, String projectParameterValue, String projectParameterDataType) {\n        this.projectParameterName = projectParameterName;\n        this.projectParameterValue = projectParameterValue;\n        this.projectParameterDataType = projectParameterDataType;\n    }\n\n    public String getProjectParameterName() {\n        return projectParameterName;\n    }\n\n    public String getProjectParameterValue() {\n        return projectParameterValue;\n    }\n\n    public String getProjectParameterDataType() {\n        return projectParameterDataType;\n    }\n}"
    }
}