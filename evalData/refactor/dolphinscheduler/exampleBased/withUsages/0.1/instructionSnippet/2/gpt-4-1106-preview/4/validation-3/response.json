{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 83,
                "toLine": 87,
                "oldContent": "@ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(ProjectParameterInfo projectParameterInfo) {\n                                         @PathVariable(\"code\") Long code,\n        return projectParameterService.updateProjectParameter(projectParameterInfo);\n    }",
                "newContent": "@ApiException(UPDATE_PROJECT_PARAMETER_ERROR)\n    public Result updateProjectParameter(@PathVariable(\"code\") Long code, ProjectParameterInfo projectParameterInfo) {\n        projectParameterInfo.setCode(code);\n        return projectParameterService.updateProjectParameter(projectParameterInfo);\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 109,
                "toLine": 121,
                "oldContent": "@OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(ScheduleParameters scheduleParameters) {\n                                 @RequestParam(value = \"workflowDefinitionCode\") long workflowDefinitionCode,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n        Map<String, Object> result = schedulerService.insertSchedule(scheduleParameters);\n",
                "newContent": "@OperatorLog(auditType = AuditType.SCHEDULE_CREATE)\n    public Result createSchedule(@PathVariable long projectCode, ScheduleParameters scheduleParameters) {\n        return schedulerService.insertSchedule(projectCode, scheduleParameters);\n"
            },
            {
                "fromLine": 154,
                "toLine": 168,
                "oldContent": "@ApiException(UPDATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\n    public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                 @PathVariable(value = \"id\") Integer id,\n                                 @RequestParam(value = \"schedule\") String schedule,\n                                 @RequestParam(value = \"warningType\", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,\n                                 @RequestParam(value = \"warningGroupId\", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,\n                                 @RequestParam(value = \"failureStrategy\", required = false, defaultValue = \"END\") FailureStrategy failureStrategy,\n                                 @RequestParam(value = \"workerGroup\", required = false, defaultValue = \"default\") String workerGroup,\n                                 @RequestParam(value = \"tenantCode\", required = false, defaultValue = \"default\") String tenantCode,\n                                 @RequestParam(value = \"environmentCode\", required = false, defaultValue = \"-1\") Long environmentCode,\n                                 @RequestParam(value = \"workflowInstancePriority\", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {\n\n        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,",
                "newContent": "@ApiException(UPDATE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)\n    public Result updateSchedule(@PathVariable long projectCode, @PathVariable(value = \"id\") Integer id, ScheduleParameters scheduleParameters) {\n        return schedulerService.updateSchedule(projectCode, id, scheduleParameters);\n"
            },
            {
                "fromLine": 179,
                "toLine": 185,
                "oldContent": "@ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)\n    public Result<Boolean> publishScheduleOnline(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                                 @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                                 @PathVariable(\"id\") Integer id) {\n        schedulerService.onlineScheduler(loginUser, projectCode, id);\n        return Result.success(true);",
                "newContent": "@ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)\n    public Result<Boolean> publishScheduleOnline(@PathVariable long projectCode, @PathVariable(\"id\") Integer id) {\n        return schedulerService.onlineScheduler(projectCode, id);\n"
            },
            {
                "fromLine": 193,
                "toLine": 199,
                "oldContent": "@ApiException(OFFLINE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)\n    public Result<Boolean> offlineSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                           @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                           @PathVariable(\"id\") Integer id) {\n        schedulerService.offlineScheduler(loginUser, projectCode, id);\n        return Result.success(true);",
                "newContent": "@ApiException(OFFLINE_SCHEDULE_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)\n    public Result<Boolean> offlineSchedule(@PathVariable long projectCode, @PathVariable(\"id\") Integer id) {\n        return schedulerService.offlineScheduler(projectCode, id);\n"
            },
            {
                "fromLine": 220,
                "toLine": 229,
                "oldContent": "@GetMapping()\n    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)\n    public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                          @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                          @RequestParam(value = \"workflowDefinitionCode\", required = false, defaultValue = \"0\") long workflowDefinitionCode,\n                                          @RequestParam(value = \"searchVal\", required = false) String searchVal,\n                                          @RequestParam(\"pageNo\") Integer pageNo,\n                                          @RequestParam(\"pageSize\") Integer pageSize) {\n        checkPageParams(pageNo, pageSize);\n        searchVal = ParameterUtils.handleEscapes(searchVal);",
                "newContent": "@GetMapping()\n    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)\n    public Result queryScheduleListPaging(@PathVariable long projectCode, @RequestParam(value = \"workflowDefinitionCode\", required = false, defaultValue = \"0\") long workflowDefinitionCode, @RequestParam(value = \"searchVal\", required = false) String searchVal, @RequestParam(\"pageNo\") Integer pageNo, @RequestParam(\"pageSize\") Integer pageSize) {\n        return schedulerService.queryScheduleListPaging(projectCode, workflowDefinitionCode, searchVal, pageNo, pageSize);\n"
            },
            {
                "fromLine": 249,
                "toLine": 255,
                "oldContent": "@ApiException(DELETE_SCHEDULE_BY_ID_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)\n    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,\n                                     @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                     @PathVariable(\"id\") Integer id) {\n        schedulerService.deleteSchedulesById(loginUser, id);\n        return new Result(Status.SUCCESS);",
                "newContent": "@ApiException(DELETE_SCHEDULE_BY_ID_ERROR)\n    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)\n    public Result deleteScheduleById(@PathVariable long projectCode, @PathVariable(\"id\") Integer id) {\n        return schedulerService.deleteSchedulesById(projectCode, id);\n"
            },
            {
                "fromLine": 266,
                "toLine": 270,
                "oldContent": "@PostMapping(\"/list\")\n    @ApiException(QUERY_SCHEDULE_LIST_ERROR)\n    public Result queryScheduleList(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,\n                                    @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode) {\n        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);",
                "newContent": "@PostMapping(\"/list\")\n    @ApiException(QUERY_SCHEDULE_LIST_ERROR)\n    public Result queryScheduleList(@PathVariable long projectCode) {\n        return schedulerService.queryScheduleList(projectCode);\n"
            }
        ]
    },
    "extractedClasses": {}
}