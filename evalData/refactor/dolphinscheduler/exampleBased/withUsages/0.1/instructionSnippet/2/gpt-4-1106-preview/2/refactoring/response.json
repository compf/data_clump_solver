{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 70,
                "toLine": 74,
                "oldContent": "public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);",
                "newContent": "public HttpResponse execute(ExecutionRequest executionRequest) {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", executionRequest.getLoginUser());"
            },
            {
                "fromLine": 84,
                "toLine": 88,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "public HttpResponse executeTask(ExecutionRequest executionRequest) {\n        Map<String, Object> params = new HashMap<>();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 269,
                "toLine": 286,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              @Param(\"projectCode\") Long projectCode,\n                                                              @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                              @Param(\"name\") String name,\n                                                              @Param(\"startTime\") String startTime,\n                                                              @Param(\"endTime\") String endTime,\n                                                              @Param(\"state\") Integer state,\n                                                              @Param(\"host\") String host);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,\n                                                              WorkflowInstanceQuery workflowInstanceQuery);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 41,
                "toLine": 45,
                "oldContent": "private Integer id;\n\n    private String name;\n\n    private String taskType;",
                "newContent": "private TaskIdentity taskIdentity;"
            },
            {
                "fromLine": 49,
                "toLine": 53,
                "oldContent": "private String workflowInstanceName;\n\n    private Long projectCode;\n\n    private long taskCode;",
                "newContent": "private WorkflowInstanceInfo workflowInstanceInfo;"
            },
            {
                "fromLine": 71,
                "toLine": 75,
                "oldContent": "private Date endTime;\n\n    private String host;\n\n    private String executePath;",
                "newContent": "private ExecutionEnvironment executionEnvironment;"
            },
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;",
                "newContent": "public void init(ExecutionEnvironment executionEnvironment) {\n        this.executionEnvironment = executionEnvironment;"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 31,
                "oldContent": "Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "Result createProjectParameter(ProjectParameterRequest projectParameterRequest);\n\n    Result updateProjectParameter(ProjectParameterRequest projectParameterRequest);\n\n    Result deleteProjectParametersByCode(ProjectParameterRequest projectParameterRequest);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 68,
                "toLine": 78,
                "oldContent": "public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\", defaultValue = \"VARCHAR\") String projectParameterDataType) {\n        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "public Result createProjectParameter(ProjectParameterRequest projectParameterRequest) {\n        return projectParameterService.createProjectParameter(projectParameterRequest);\n    }\n"
            },
            {
                "fromLine": 87,
                "toLine": 98,
                "oldContent": "public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                         @Parameter(name = \"projectCode\", description = \"PROJECT_CODE\", required = true) @PathVariable long projectCode,\n                                         @PathVariable(\"code\") Long code,\n                                         @RequestParam(\"projectParameterName\") String projectParameterName,\n                                         @RequestParam(value = \"projectParameterValue\") String projectParameterValue,\n                                         @RequestParam(value = \"projectParameterDataType\") String projectParameterDataType) {\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n    }\n",
                "newContent": "public Result updateProjectParameter(ProjectParameterRequest projectParameterRequest) {\n        return projectParameterService.updateProjectParameter(projectParameterRequest);\n    }\n"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 49,
                "toLine": 55,
                "oldContent": "Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "Result result = projectParameterController.createProjectParameter(new ProjectParameterRequest(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 60,
                "toLine": 66,
                "oldContent": "Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "Result result = projectParameterController.updateProjectParameter(new ProjectParameterRequest(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name()));\n        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 78,
                "toLine": 82,
                "oldContent": "Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "Result result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        assertNull(result.getData());"
            },
            {
                "fromLine": 91,
                "toLine": 95,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name());\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\",\n                    DataType.VARCHAR.name()));\n            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 99,
                "toLine": 103,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 106,
                "toLine": 110,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 112,
                "toLine": 116,
                "oldContent": "result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            },
            {
                "fromLine": 124,
                "toLine": 128,
                "oldContent": "Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertNull(result.getData());",
                "newContent": "Result result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        assertNull(result.getData());"
            },
            {
                "fromLine": 135,
                "toLine": 139,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 142,
                "toLine": 146,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());"
            },
            {
                "fromLine": 149,
                "toLine": 153,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name()));\n        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());"
            },
            {
                "fromLine": 155,
                "toLine": 159,
                "oldContent": "result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());",
                "newContent": "result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name()));\n        assertEquals(Status.SUCCESS.getCode(), result.getCode());"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 108,
                "toLine": 133,
                "oldContent": "Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);",
                "newContent": "Map<String, Object> result = schedulerService.insertSchedule(new ScheduleRequest(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode));"
            },
            {
                "fromLine": 334,
                "toLine": 351,
                "oldContent": "Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(new ScheduleRequest(\n                loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode));"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 17,
                "toLine": 51,
                "oldContent": "public class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;\n    }\n}",
                "newContent": "public class TaskAlertInfo {\n\n    private AlertInfo alertInfo;\n\n    public String getTitle() {\n        return alertInfo.getTitle();\n    }\n\n    public void setTitle(String title) {\n        alertInfo.setTitle(title);\n    }\n\n    public String getContent() {\n        return alertInfo.getContent();\n    }\n\n    public void setContent(String content) {\n        alertInfo.setContent(content);\n    }\n\n    public Integer getAlertGroupId() {\n        return alertInfo.getAlertGroupId();\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        alertInfo.setAlertGroupId(alertGroupId);\n    }\n}"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 50,
                "toLine": 57,
                "oldContent": "@TableField(value = \"title\")\n    private String title;\n\n    @TableField(value = \"content\")\n    private String content;\n\n    @TableField(value = \"alert_status\")",
                "newContent": "@TableField(value = \"alert_info\")\n    private AlertInfo alertInfo;"
            },
            {
                "fromLine": 65,
                "toLine": 69,
                "oldContent": "@TableField(\"alertgroup_id\")\n    private Integer alertGroupId;\n\n    @TableField(\"create_time\")",
                "newContent": "@TableField(\"create_time\")"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionRequest.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.api.enums.ExecuteType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ExecutionRequest {\n    private User loginUser;\n    private long projectCode;\n    private int workflowInstanceId;\n    private ExecuteType executeType;\n\n    // Constructor, getters, and setters\n}",
        "org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceQuery.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Date;\n\npublic class WorkflowInstanceQuery {\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String name;\n    private String startTime;\n    private String endTime;\n    private Integer state;\n    private String host;\n\n    // Constructor, getters, and setters\n}",
        "org/apache/dolphinscheduler/dao/entity/TaskIdentity.java": "package org.apache.dolphinscheduler.dao.entity;\n\npublic class TaskIdentity {\n    private Integer id;\n    private String name;\n    private String taskType;\n\n    // Constructor, getters, and setters\n}",
        "org/apache/dolphinscheduler/dao/entity/WorkflowInstanceInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\npublic class WorkflowInstanceInfo {\n    private String workflowInstanceName;\n    private Long projectCode;\n    private long taskCode;\n\n    // Constructor, getters,
    {
        "fromLine": 17,
        "toLine": 51,
        "oldContent": "public class TaskAlertInfo {\n\n    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Integer getAlertGroupId() {\n        return alertGroupId;\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        this.alertGroupId = alertGroupId;\n    }\n}",
        "newContent": "public class TaskAlertInfo {\n\n    private AlertInfo alertInfo;\n\n    public String getTitle() {\n        return alertInfo.getTitle();\n    }\n\n    public void setTitle(String title) {\n        alertInfo.setTitle(title);\n    }\n\n    public String getContent() {\n        return alertInfo.getContent();\n    }\n\n    public void setContent(String content) {\n        alertInfo.setContent(content);\n    }\n\n    public Integer getAlertGroupId() {\n        return alertInfo.getAlertGroupId();\n    }\n\n    public void setAlertGroupId(Integer alertGroupId) {\n        alertInfo.setAlertGroupId(alertGroupId);\n    }\n}"
    }
    