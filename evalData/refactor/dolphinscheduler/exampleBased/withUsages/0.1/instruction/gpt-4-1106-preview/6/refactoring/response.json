
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 47,
                "toLine": 57,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {",
                "newContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              WorkflowInstanceExecutionInfo executionInfo) {"
            },
            {
                "fromLine": 59,
                "toLine": 65,
                "oldContent": "        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        params.put(\"workflowDefinitionCode\", executionInfo.getWorkflowDefinitionCode());\n        params.put(\"scheduleTime\", executionInfo.getScheduleTime());\n        params.put(\"failureStrategy\", executionInfo.getFailureStrategy());\n        params.put(\"warningType\", executionInfo.getWarningType());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 107,
                "toLine": 117,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            WorkflowInstanceQuery workflowInstanceQuery);"
            },
            {
                "fromLine": 119,
                "toLine": 125,
                "oldContent": "                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime",
                "newContent": "                                                            @Param(\"projectCode\") Long projectCode,\n                                                            WorkflowInstanceQuery workflowInstanceQuery"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 92,
                "toLine": 94,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;",
                "newContent": "    public void init(TaskInstanceHostInfo hostInfo) {\n        this.host = hostInfo.getHost();\n        this.startTime = hostInfo.getStartTime();"
            },
            {
                "fromLine": 95,
                "toLine": 95,
                "oldContent": "        this.executePath = executePath;",
                "newContent": "        this.executePath = hostInfo.getExecutePath();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 23,
                "toLine": 25,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result createProjectParameter(User loginUser, long projectCode, ProjectParameterInfo parameterInfo);"
            },
            {
                "fromLine": 27,
                "toLine": 29,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, ProjectParameterInfo parameterInfo);"
            },
            {
                "fromLine": 31,
                "toLine": 33,
                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);",
                "newContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           ProjectParameterQuery parameterQuery);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 70,
                "toLine": 74,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);"
            },
            {
                "fromLine": 89,
                "toLine": 93,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, parameterInfo);"
            },
            {
                "fromLine": 123,
                "toLine": 127,
                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);",
                "newContent": "        ProjectParameterQuery parameterQuery = new ProjectParameterQuery(searchVal, projectParameterDataType);\n        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, parameterQuery);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 30,
                "toLine": 34,
                "oldContent": "        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, parameterInfo);"
            },
            {
                "fromLine": 41,
                "toLine": 45,
                "oldContent": "        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.LONG.name());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, parameterInfo);"
            },
            {
                "fromLine": 66,
                "toLine": 70,
                "oldContent": "        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, \"1\",\n                DataType.VARCHAR.name(), 1, 10);",
                "newContent": "        ProjectParameterQuery parameterQuery = new ProjectParameterQuery(\"1\", DataType.VARCHAR.name());\n        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, parameterQuery, 1, 10);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 52,
                "toLine": 56,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);"
            },
            {
                "fromLine": 73,
                "toLine": 77,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);"
            },
            {
                "fromLine": 87,
                "toLine": 91,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);"
            },
            {
                "fromLine": 101,
                "toLine": 105,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(loginUser, projectCode, parameterInfo);"
            },
            {
                "fromLine": 116,
                "toLine": 120,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, parameterInfo);"
            },
            {
                "fromLine": 137,
                "toLine": 141,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, parameterInfo);"
            },
            {
                "fromLine": 151,
                "toLine": 155,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, parameterInfo);"
            },
            {
                "fromLine": 165,
                "toLine": 169,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(\"key1\", \"value\", DataType.LONG.name());\n        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, parameterInfo);"
            },
            {
                "fromLine": 191,
                "toLine": 195,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                null, null);",
                "newContent": "        ProjectParameterQuery parameterQuery = new ProjectParameterQuery(null, null);\n        Result result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, parameterQuery);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 74,
                "toLine": 90,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.insertSchedule(loginUser, projectCode, workflowDefinitionCode, scheduleInfo);"
            },
            {
                "fromLine": 108,
                "toLine": 124,
                "oldContent": "        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, scheduleInfo);"
            },
            {
                "fromLine": 228,
                "toLine": 244,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode, workflowDefinitionCode, scheduleInfo);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 42,
                "toLine": 44,
                "oldContent": "    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n\n    @TableField(value = \"warning_type\")",
                "newContent": "    @TableField(value = \"alert_status\")\n    private AlertStatus alertStatus;\n\n    @TableField(value = \"warning_type\")\n    private WarningType warningType;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 15,
                "toLine": 17,
                "oldContent": "    private String title;\n\n    private String content;",
                "newContent": "    private String title;\n\n    private String content;\n\n    private Integer alertGroupId;"
            }
        ]
    },
    "extractedClasses": {
        "WorkflowInstanceExecutionInfo.java": "public class WorkflowInstanceExecutionInfo {\n\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // Constructor, getters and setters\n}",
        "WorkflowInstanceQuery.java": "public class WorkflowInstanceQuery {\n\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // Constructor, getters and setters\n}",
        "TaskInstanceHostInfo.java": "public class TaskInstanceHostInfo {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // Constructor, getters and setters\n}",
        "ProjectParameterInfo.java": "public class ProjectParameterInfo {\n\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // Constructor, getters and setters\n}",
        "ProjectParameterQuery.java": "public class ProjectParameterQuery {\n\n    private String searchVal;\n    private String projectParameterDataType;\n\n    // Constructor, getters and setters\n}",
        "ScheduleInfo.java": "public class ScheduleInfo {\n\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // Constructor, getters and setters\n}"
    }
}