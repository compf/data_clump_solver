
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 35,
                "toLine": 35,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,",
                "newContent": "public HttpResponse startWorkflowInstance(ExecutionParameters executionParameters,"
            },
            {
                "fromLine": 36,
                "toLine": 40,
                "oldContent": "                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {",
                "newContent": "                                              long projectCode) {"
            },
            {
                "fromLine": 42,
                "toLine": 46,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        params.putAll(executionParameters.toMap());"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
                "newContent": "    public HttpResponse execute(ExecutionParameters executionParameters, long projectCode) {"
            },
            {
                "fromLine": 66,
                "toLine": 69,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"projectCode\", projectCode);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"executeType\", executeType);",
                "newContent": "        params.putAll(executionParameters.toMap());"
            },
            {
                "fromLine": 87,
                "toLine": 87,
                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
                "newContent": "    public HttpResponse executeTask(ExecutionParameters executionParameters, long projectCode,"
            },
            {
                "fromLine": 88,
                "toLine": 89,
                "oldContent": "                                    TaskDependType taskDependType) {\n        Map<String, Object> params = new HashMap<>();",
                "newContent": "                                    TaskDependType taskDependType) {"
            },
            {
                "fromLine": 91,
                "toLine": 94,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);",
                "newContent": "        params.putAll(executionParameters.toMap());"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 15,
                "toLine": 15,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,",
                "newContent": "    Result createProjectParameter(ProjectParameterRequest projectParameterRequest,"
            },
            {
                "fromLine": 16,
                "toLine": 17,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);\n\n    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
                "newContent": "                                  long projectCode);\n\n    Result updateProjectParameter(ProjectParameterRequest projectParameterRequest,"
            },
            {
                "fromLine": 18,
                "toLine": 19,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "                                  long projectCode, long code);\n\n    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);"
            },
            {
                "fromLine": 21,
                "toLine": 21,
                "oldContent": "    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
                "newContent": "    Result batchDeleteProjectParametersByCodes(ProjectParameterRequest projectParameterRequest);"
            },
            {
                "fromLine": 23,
                "toLine": 23,
                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,",
                "newContent": "    Result queryProjectParameterListPaging(ProjectParameterRequest projectParameterRequest,"
            },
            {
                "fromLine": 24,
                "toLine": 24,
                "oldContent": "                                           String searchVal, String projectParameterDataType);",
                "newContent": "                                           Integer pageSize, Integer pageNo);"
            },
            {
                "fromLine": 26,
                "toLine": 26,
                "oldContent": "    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result queryProjectParameterByCode(ProjectParameterRequest projectParameterRequest);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 57,
                "toLine": 57,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,",
                "newContent": "        return projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectParameterName,"
            },
            {
                "fromLine": 58,
                "toLine": 58,
                "oldContent": "                projectParameterValue, projectParameterDataType);",
                "newContent": "                projectParameterValue, projectParameterDataType), projectCode);"
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,",
                "newContent": "        return projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectParameterName,"
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "                projectParameterValue, projectParameterDataType);",
                "newContent": "                projectParameterValue, projectParameterDataType), projectCode, code);"
            },
            {
                "fromLine": 92,
                "toLine": 92,
                "oldContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
                "newContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(new ProjectParameterRequest(loginUser, projectCode, codes));"
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,",
                "newContent": "        return projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, searchVal, projectParameterDataType),"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "                searchVal, projectParameterDataType);",
                "newContent": "                pageSize, pageNo);"
            },
            {
                "fromLine": 122,
                "toLine": 122,
                "oldContent": "        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
                "newContent": "        return projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, code));"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 29,
                "toLine": 29,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),",
                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterRequest.class),"
            },
            {
                "fromLine": 30,
                "toLine": 30,
                "oldContent": "                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),",
                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterRequest.class),"
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyLong(), Mockito.anyLong())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 59,
                "toLine": 59,
                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "                Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": ""
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(ProjectParameterRequest.class),"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "                Mockito.anyInt(), Mockito.anyInt())).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 89,
                "toLine": 89,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 90,
                "toLine": 90,
                "oldContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());",
                "newContent": ""
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 36,
                "toLine": 36,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        Result result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
            },
            {
                "fromLine": 37,
                "toLine": 37,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode);"
            },
            {
                "fromLine": 51,
                "toLine": 51,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
            },
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode);"
            },
            {
                "fromLine": 59,
                "toLine": 59,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode);"
            },
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode);"
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        Result result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
            },
            {
                "fromLine": 98,
                "toLine": 98,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
            },
            {
                "fromLine": 99,
                "toLine": 99,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
            },
            {
                "fromLine": 106,
                "toLine": 106,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
            },
            {
                "fromLine": 115,
                "toLine": 115,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
            },
            {
                "fromLine": 116,
                "toLine": 116,
                "oldContent": "                DataType.LONG.name());",
                "newContent": "                DataType.LONG.name()), projectCode, 1);"
            },
            {
                "fromLine": 130,
                "toLine": 130,
                "oldContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
            },
            {
                "fromLine": 144,
                "toLine": 144,
                "oldContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
            },
            {
                "fromLine": 152,
                "toLine": 152,
                "oldContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
            },
            {
                "fromLine": 166,
                "toLine": 166,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        Result result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
            },
            {
                "fromLine": 180,
                "toLine": 180,
                "oldContent": "        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
            },
            {
                "fromLine": 188,
                "toLine": 188,
                "oldContent": "        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
            },
            {
                "fromLine": 202,
                "toLine": 202,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        Result result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 203,
                "toLine": 203,
                "oldContent": "                DataType.VARCHAR.name());",
                "newContent": "                DataType.VARCHAR.name()), pageSize, pageNo);"
            },
            {
                "fromLine": 217,
                "toLine": 217,
                "oldContent": "        result = projectParameterService.queryProject
{
    "refactorings": {
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 217,
                "toLine": 217,
                "oldContent": "        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 218,
                "toLine": 218,
                "oldContent": "                null);",
                "newContent": "                null), pageSize, pageNo);"
            },
            {
                "fromLine": 232,
                "toLine": 232,
                "oldContent": "        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 233,
                "toLine": 233,
                "oldContent": "                null);",
                "newContent": "                null), pageSize, pageNo);"
            },
            {
                "fromLine": 247,
                "toLine": 247,
                "oldContent": "        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 248,
                "toLine": 248,
                "oldContent": "                null);",
                "newContent": "                null), pageSize, pageNo);"
            },
            {
                "fromLine": 262,
                "toLine": 262,
                "oldContent": "        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 263,
                "toLine": 263,
                "oldContent": "                null);",
                "newContent": "                null), pageSize, pageNo);"
            },
            {
                "fromLine": 277,
                "toLine": 277,
                "oldContent": "        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
            },
            {
                "fromLine": 278,
                "toLine": 278,
                "oldContent": "                null);",
                "newContent": "                null), pageSize, pageNo);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(",
                "newContent": "        Map<String, Object> result = schedulerService.insertSchedule(new ScheduleRequest(loginUser,"
            },
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "                loginUser,",
                "newContent": ""
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "                projectCode,",
                "newContent": "                projectCode,"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "                workflowDefinitionCode,",
                "newContent": "                workflowDefinitionCode,"
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "                schedule,",
                "newContent": "                schedule,"
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "                warningType,",
                "newContent": "                warningType,"
            },
            {
                "fromLine": 85,
                "toLine": 85,
                "oldContent": "                warningGroupId,",
                "newContent": "                warningGroupId,"
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "                failureStrategy,",
                "newContent": "                failureStrategy,"
            },
            {
                "fromLine": 87,
                "toLine": 87,
                "oldContent": "                workflowInstancePriority,",
                "newContent": "                workflowInstancePriority,"
            },
            {
                "fromLine": 88,
                "toLine": 88,
                "oldContent": "                workerGroup,",
                "newContent": "                workerGroup,"
            },
            {
                "fromLine": 89,
                "toLine": 89,
                "oldContent": "                tenantCode,",
                "newContent": "                tenantCode,"
            },
            {
                "fromLine": 90,
                "toLine": 90,
                "oldContent": "                environmentCode);",
                "newContent": "                environmentCode));"
            },
            {
                "fromLine": 106,
                "toLine": 106,
                "oldContent": "        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,",
                "newContent": "        Map<String, Object> result = schedulerService.updateSchedule(new ScheduleRequest(loginUser,"
            },
            {
                "fromLine": 107,
                "toLine": 107,
                "oldContent": "                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "                projectCode, id, schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "                environmentCode);",
                "newContent": "                environmentCode));"
            },
            {
                "fromLine": 127,
                "toLine": 127,
                "oldContent": "        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,",
                "newContent": "        return schedulerService.querySchedule(new ScheduleRequest(loginUser, projectCode, workflowDefinitionCode, searchVal),"
            },
            {
                "fromLine": 128,
                "toLine": 128,
                "oldContent": "                pageSize);",
                "newContent": "                pageNo, pageSize);"
            },
            {
                "fromLine": 147,
                "toLine": 147,
                "oldContent": "        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);",
                "newContent": "        Map<String, Object> result = schedulerService.queryScheduleList(new ScheduleRequest(loginUser, projectCode));"
            },
            {
                "fromLine": 163,
                "toLine": 163,
                "oldContent": "        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);",
                "newContent": "        Map<String, Object> result = schedulerService.previewSchedule(new ScheduleRequest(loginUser, schedule));"
            },
            {
                "fromLine": 183,
                "toLine": 183,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,",
                "newContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(new ScheduleRequest(loginUser,"
            },
            {
                "fromLine": 184,
                "toLine": 184,
                "oldContent": "                workflowDefinitionCode, schedule,",
                "newContent": "                projectCode, workflowDefinitionCode, schedule,"
            },
            {
                "fromLine": 185,
                "toLine": 185,
                "oldContent": "                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,",
                "newContent": "                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,"
            },
            {
                "fromLine": 186,
                "toLine": 186,
                "oldContent": "                environmentCode);",
                "newContent": "                environmentCode));"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "    private Map<String, Object> info = new HashMap<>();",
                "newContent": "    private AlertInfo info = new AlertInfo();"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 23,
                "toLine": 23,
                "oldContent": "    private Integer alertGroupId;",
                "newContent": "    private AlertGroup alertGroup;"
            }
        ]
    },
    "extractedClasses": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutionParameters.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExecutionParameters {\n    private User loginUser;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // getters and setters\n\n    public Map<String, Object> toMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);\n        return params;\n    }\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterRequest.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterRequest {\n    private User loginUser;\n    private long projectCode;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // constructor, getters and setters\n}\n",
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ScheduleRequest.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ScheduleRequest {\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // constructor, getters and setters\n}\n",
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class AlertInfo {\n    private Map<String, Object> properties = new HashMap<>();\n\n    // methods to manipulate properties\n}\n",
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java": "package org.apache.dolphinscheduler.plugin.task.api.model;\n\npublic class AlertGroup {\n    private Integer id;\n    private String name;\n\n    // getters and setters\n}\n"
    }
}