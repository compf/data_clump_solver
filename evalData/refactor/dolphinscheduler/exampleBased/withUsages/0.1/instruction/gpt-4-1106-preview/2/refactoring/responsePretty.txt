"
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 38,
                "toLine": 47,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {",
                "newContent": "public HttpResponse startWorkflowInstance(WorkflowInstanceExecutionInfo executionInfo) {"
            },
            {
                "fromLine": 49,
                "toLine": 54,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        params.put(\"loginUser\", executionInfo.getLoginUser());\n        params.put(\"workflowDefinitionCode\", executionInfo.getWorkflowDefinitionCode());\n        params.put(\"scheduleTime\", executionInfo.getScheduleTime());\n        params.put(\"failureStrategy\", executionInfo.getFailureStrategy());\n        params.put(\"warningType\", executionInfo.getWarningType());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 155,
                "toLine": 164,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            WorkflowInstanceQuery workflowInstanceQuery);"
            },
            {
                "fromLine": 166,
                "toLine": 174,
                "oldContent": "                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime",
                "newContent": "                                                            WorkflowInstanceQuery workflowInstanceQuery"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 98,
                "toLine": 100,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;",
                "newContent": "    public void init(TaskInstanceExecutionInfo executionInfo) {\n        this.host = executionInfo.getHost();\n        this.startTime = executionInfo.getStartTime();"
            },
            {
                "fromLine": 101,
                "toLine": 101,
                "oldContent": "        this.executePath = executePath;",
                "newContent": "        this.executePath = executionInfo.getExecutePath();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 17,
                "toLine": 17,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,",
                "newContent": "    Result createProjectParameter(ProjectParameterInfo parameterInfo,"
            },
            {
                "fromLine": 18,
                "toLine": 18,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "                                  long projectCode);"
            },
            {
                "fromLine": 20,
                "toLine": 20,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
                "newContent": "    Result updateProjectParameter(ProjectParameterInfo parameterInfo,"
            },
            {
                "fromLine": 21,
                "toLine": 21,
                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "                                  long projectCode, long code);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 61,
                "toLine": 65,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(parameterInfo, projectCode);"
            },
            {
                "fromLine": 82,
                "toLine": 86,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, projectParameterName, projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(parameterInfo, projectCode, code);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 29,
                "toLine": 33,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.createProjectParameter(loginUser, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong())).thenReturn(getSuccessResult());\n        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterController.createProjectParameter(parameterInfo, 1);"
            },
            {
                "fromLine": 40,
                "toLine": 44,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());\n        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, \"key\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong())).thenReturn(getSuccessResult());\n        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.LONG.name());\n        Result result = projectParameterController.updateProjectParameter(parameterInfo, 1, 1L);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 38,
                "toLine": 42,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(parameterInfo, projectCode);"
            },
            {
                "fromLine": 52,
                "toLine": 56,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterInfo, projectCode);"
            },
            {
                "fromLine": 63,
                "toLine": 67,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterInfo, projectCode);"
            },
            {
                "fromLine": 72,
                "toLine": 76,
                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.createProjectParameter(parameterInfo, projectCode);"
            },
            {
                "fromLine": 88,
                "toLine": 92,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterInfo parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(parameterInfo, projectCode, 1);"
            },
            {
                "fromLine": 104,
                "toLine": 108,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(parameterInfo, projectCode, 1);"
            },
            {
                "fromLine": 116,
                "toLine": 120,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key1\", \"value\", DataType.VARCHAR.name());\n        result = projectParameterService.updateProjectParameter(parameterInfo, projectCode, 1);"
            },
            {
                "fromLine": 125,
                "toLine": 129,
                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",\n                DataType.LONG.name());",
                "newContent": "        parameterInfo = new ProjectParameterInfo(loginUser, \"key1\", \"value\", DataType.LONG.name());\n        result = projectParameterService.updateProjectParameter(parameterInfo, projectCode, 1);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 75,
                "toLine": 89,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n\n        return returnDataList(result);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(loginUser, workflowDefinitionCode, schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.insertSchedule(scheduleInfo, projectCode);\n        return returnDataList(result);"
            },
            {
                "fromLine": 107,
                "toLine": 121,
                "oldContent": "        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(loginUser, id, schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.updateSchedule(scheduleInfo, projectCode);\n        return returnDataList(result);"
            },
            {
                "fromLine": 261,
                "toLine": 275,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);",
                "newContent": "        ScheduleInfo scheduleInfo = new ScheduleInfo(loginUser, workflowDefinitionCode, schedule, warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode, environmentCode);\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(scheduleInfo, projectCode);\n        return returnDataList(result);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 42,
                "toLine": 42,
                "oldContent": "    private String title;",
                "newContent": "    private AlertInfo alertInfo;"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "    private String content;",
                "newContent": ""
            },
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "    private Integer alertGroupId;",
                "newContent": ""
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 17,
                "toLine": 17,
                "oldContent": "    private String title;",
                "newContent": "    private AlertInfo alertInfo;"
            },
            {
                "fromLine": 19,
                "toLine": 19,
                "oldContent": "    private String content;",
                "newContent": ""
            },
            {
                "fromLine": 21,
                "toLine": 21,
                "oldContent": "    private Integer alertGroupId;",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {
        "org/apache/dolphinscheduler/api/test/pages/workflow/WorkflowInstanceExecutionInfo.java": "package org.apache.dolphinscheduler.api.test.pages.workflow;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class WorkflowInstanceExecutionInfo {\n\n    private User loginUser;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n    private FailureStrategy failureStrategy;\n    private WarningType warningType;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceQuery.java": "package org.apache.dolphinscheduler.dao.mapper;\n\nimport java.util.Date;\n\npublic class WorkflowInstanceQuery {\n\n    private Long projectCode;\n    private Long workflowDefinitionCode;\n    private String searchVal;\n    private String executorName;\n    private int[] statusArray;\n    private String host;\n    private Date startTime;\n    private Date endTime;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/dao/entity/TaskInstanceExecutionInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\nimport java.util.Date;\n\npublic class TaskInstanceExecutionInfo {\n\n    private String host;\n    private Date startTime;\n    private String executePath;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/api/service/ProjectParameterInfo.java": "package org.apache.dolphinscheduler.api.service;\n\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ProjectParameterInfo {\n\n    private User loginUser;\n    private String projectParameterName;\n    private String projectParameterValue;\n    private String projectParameterDataType;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/api/controller/ScheduleInfo.java": "package org.apache.dolphinscheduler.api.controller;\n\nimport org.apache.dolphinscheduler.common.enums.FailureStrategy;\nimport org.apache.dolphinscheduler.common.enums.Priority;\nimport org.apache.dolphinscheduler.common.enums.WarningType;\nimport org.apache.dolphinscheduler.dao.entity.User;\n\npublic class ScheduleInfo {\n\n    private User loginUser;\n    private long workflowDefinitionCode;\n    private String schedule;\n    private WarningType warningType;\n    private int warningGroupId;\n    private FailureStrategy failureStrategy;\n    private Priority workflowInstancePriority;\n    private String workerGroup;\n    private String tenantCode;\n    private Long environmentCode;\n\n    // getters and setters\n}",
        "org/apache/dolphinscheduler/dao/entity/AlertInfo.java": "package org.apache.dolphinscheduler.dao.entity;\n\npublic class AlertInfo {\n\n    private String title;\n    private String content;\n    private Integer alertGroupId;\n\n    // getters and setters\n}"
    }
}"