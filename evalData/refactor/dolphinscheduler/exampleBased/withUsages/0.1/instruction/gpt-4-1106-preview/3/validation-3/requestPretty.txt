messages:
[
	content:"
	
	I will provide you one or more Java code files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.test.pages.workflow;
	
	import org.apache.dolphinscheduler.api.enums.ExecuteType;
	import org.apache.dolphinscheduler.api.test.core.Constants;
	import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
	import org.apache.dolphinscheduler.api.test.utils.RequestClient;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.TaskDependType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	@AllArgsConstructor
	public class ExecutorPage {
	
	    private String sessionId;
	
	    public HttpResponse startWorkflowInstance(User loginUser,
	                                              long projectCode,
	                                              long workflowDefinitionCode,
	                                              String scheduleTime,
	                                              FailureStrategy failureStrategy,
	                                              WarningType warningType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowDefinitionCode", workflowDefinitionCode);
	        params.put("scheduleTime", scheduleTime);
	        params.put("failureStrategy", failureStrategy);
	        params.put("warningType", warningType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/start-workflow-instance", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse queryExecutingWorkflow(User loginUser, long projectCode, long workflowInstanceCode) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("id", workflowInstanceCode);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/query-executing-workflow", projectCode);
	        return requestClient.get(url, headers, params);
	    }
	
	    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("projectCode", projectCode);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("executeType", executeType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,
	                                    TaskDependType taskDependType) {
	        Map<String, Object> params = new HashMap<>();
	        params.put("loginUser", loginUser);
	        params.put("workflowInstanceId", workflowInstanceId);
	        params.put("startNodeList", startNodeList);
	        params.put("taskDependType", taskDependType);
	        Map<String, String> headers = new HashMap<>();
	        headers.put(Constants.SESSION_ID_KEY, sessionId);
	
	        RequestClient requestClient = new RequestClient();
	        String url = String.format("/projects/%s/executors/execute-task", projectCode);
	        return requestClient.post(url, headers, params);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.mapper;
	
	import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
	import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
	import org.apache.dolphinscheduler.dao.entity.WorkflowInstance;
	import org.apache.dolphinscheduler.dao.model.WorkflowInstanceStatusCountDto;
	
	import org.apache.ibatis.annotations.Param;
	
	import java.util.Collection;
	import java.util.Date;
	import java.util.List;
	import java.util.Set;
	
	import com.baomidou.mybatisplus.core.mapper.BaseMapper;
	import com.baomidou.mybatisplus.core.metadata.IPage;
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	/**
	 * workflow instance mapper interface
	 */
	public interface WorkflowInstanceMapper extends BaseMapper<WorkflowInstance> {
	
	    /**
	     * query workflow instance detail info by id
	     *
	     * @param id id
	     * @return workflow instance
	     */
	    WorkflowInstance queryDetailById(@Param("id") int id);
	
	    /**
	     * query workflow instance by host and stateArray
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByHostAndStatus(@Param("host") String host,
	                                                @Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance host by stateArray
	     *
	     * @param stateArray
	     * @return
	     */
	    List<String> queryNeedFailoverWorkflowInstanceHost(@Param("states") int[] stateArray);
	
	    /**
	     * query workflow instance by tenantCode and stateArray
	     *
	     * @param tenantCode tenantCode
	     * @param states     states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByTenantCodeAndStatus(@Param("tenantCode") String tenantCode,
	                                                      @Param("states") int[] states);
	
	    /**
	     * @param workerGroupName workerGroupName
	     * @param states          states array
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkerGroupNameAndStatus(@Param("workerGroupName") String workerGroupName,
	                                                           @Param("states") int[] states);
	
	    /**
	     * workflow instance page
	     * @param page page
	     * @param projectId projectId
	     * @param processDefinitionId processDefinitionId
	     * @param searchVal searchVal
	     * @param executorId executorId
	     * @param statusArray statusArray
	     * @param host host
	     * @param startTime startTime
	     * @param endTime endTime
	     * @return workflow instance IPage
	     */
	
	    /**
	     * workflow instance page
	     *
	     * @param page                  page
	     * @param projectCode           projectCode
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param searchVal             searchVal
	     * @param executorName          executorName
	     * @param statusArray           statusArray
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance page
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,
	                                                            @Param("projectCode") Long projectCode,
	                                                            @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                            @Param("searchVal") String searchVal,
	                                                            @Param("executorName") String executorName,
	                                                            @Param("states") int[] statusArray,
	                                                            @Param("host") String host,
	                                                            @Param("startTime") Date startTime,
	                                                            @Param("endTime") Date endTime);
	
	    /**
	     * set failover by host and state array
	     *
	     * @param host       host
	     * @param stateArray stateArray
	     * @return set result
	     */
	    int setFailoverByHostAndStateArray(@Param("host") String host,
	                                       @Param("states") int[] stateArray);
	
	    /**
	     * Update the workflow instance state from originState to destState
	     */
	    int updateWorkflowInstanceState(
	                                    @Param("workflowInstanceId") Integer workflowInstanceId,
	                                    @Param("originState") WorkflowExecutionStatus originState,
	                                    @Param("targetState") WorkflowExecutionStatus targetState);
	
	    /**
	     * update workflow instance by tenantCode
	     *
	     * @param originTenantCode originTenantCode
	     * @param destTenantCode   destTenantCode
	     * @return update result
	     */
	    int updateWorkflowInstanceByTenantCode(@Param("originTenantCode") String originTenantCode,
	                                           @Param("destTenantCode") String destTenantCode);
	
	    /**
	     * update workflow instance by worker groupId
	     *
	     * @param originWorkerGroupName originWorkerGroupName
	     * @param destWorkerGroupName   destWorkerGroupName
	     * @return update result
	     */
	    int updateWorkflowInstanceByWorkerGroupName(@Param("originWorkerGroupName") String originWorkerGroupName,
	                                                @Param("destWorkerGroupName") String destWorkerGroupName);
	
	    /**
	     * Statistics workflow instance state by given project codes list
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCodes projectCodes
	     * @return ExecuteStatusCount list
	     */
	    List<WorkflowInstanceStatusCountDto> countWorkflowInstanceStateByProjectCodes(
	                                                                                  @Param("startTime") Date startTime,
	                                                                                  @Param("endTime") Date endTime,
	                                                                                  @Param("projectCodes") Collection<Long> projectCodes);
	
	    /**
	     * query workflow instance by workflowDefinitionCode
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param size                  size
	     * @return workflow instance list
	     */
	    List<WorkflowInstance> queryByWorkflowDefinitionCode(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                         @Param("size") int size);
	
	    /**
	     * query last scheduler workflow instance
	     *
	     * @param workflowDefinitionCode definitionCode
	     * @param taskDefinitionCode    definitionCode
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @param testFlag              testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastSchedulerWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                @Param("taskDefinitionCode") Long taskDefinitionCode,
	                                                @Param("startTime") Date startTime,
	                                                @Param("endTime") Date endTime,
	                                                @Param("testFlag") int testFlag);
	
	    /**
	     * query last manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param taskCode       taskCode
	     * @param startTime      startTime
	     * @param endTime        endTime
	     * @param testFlag       testFlag
	     * @return workflow instance
	     */
	    WorkflowInstance queryLastManualWorkflow(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                             @Param("taskCode") Long taskCode,
	                                             @Param("startTime") Date startTime,
	                                             @Param("endTime") Date endTime,
	                                             @Param("testFlag") int testFlag);
	
	    /**
	     * query first schedule workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstScheduleWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query first manual workflow instance
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @return workflow instance
	     */
	    WorkflowInstance queryFirstStartWorkflowInstance(@Param("workflowDefinitionCode") Long workflowDefinitionCode);
	
	    /**
	     * query top n workflow instance order by running duration
	     *
	     * @param size        size
	     * @param startTime   start time
	     * @param startTime   end time
	     * @param status      workflow instance status
	     * @param projectCode project code
	     * @return ProcessInstance list
	     */
	
	    List<WorkflowInstance> queryTopNWorkflowInstance(@Param("size") int size,
	                                                     @Param("startTime") Date startTime,
	                                                     @Param("endTime") Date endTime,
	                                                     @Param("status") WorkflowExecutionStatus status,
	                                                     @Param("projectCode") long projectCode);
	
	    /**
	     * query workflow instance by workflowDefinitionCode and stateArray
	     *
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param states                states array
	     * @return workflow instance list
	     */
	
	    List<WorkflowInstance> queryByWorkflowDefinitionCodeAndStatus(@Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                                  @Param("states") int[] states);
	
	    List<WorkflowInstance> queryByWorkflowCodeVersionStatus(@Param("workflowDefinitionCode") long workflowDefinitionCode,
	                                                            @Param("workflowDefinitionVersion") int workflowDefinitionVersion,
	                                                            @Param("states") int[] states);
	
	    /**
	     * Filter workflow instance
	     *
	     * @param page                  page
	     * @param workflowDefinitionCode workflowDefinitionCode
	     * @param name                  name
	     * @param host                  host
	     * @param startTime             startTime
	     * @param endTime               endTime
	     * @return workflow instance IPage
	     */
	    IPage<WorkflowInstance> queryWorkflowInstanceListV2Paging(Page<WorkflowInstance> page,
	                                                              @Param("projectCode") Long projectCode,
	                                                              @Param("workflowDefinitionCode") Long workflowDefinitionCode,
	                                                              @Param("name") String name,
	                                                              @Param("startTime") String startTime,
	                                                              @Param("endTime") String endTime,
	                                                              @Param("state") Integer state,
	                                                              @Param("host") String host);
	
	    /**
	     * Statistics workflow instance state v2
	     * <p>
	     * We only need project codes to determine whether the workflow instance belongs to the user or not.
	     *
	     * @param startTime    startTime
	     * @param endTime      endTime
	     * @param projectCode  projectCode
	     * @param workflowCode workflowCode
	     * @param model        model
	     * @param projectIds   projectIds
	     * @return ExecuteStatusCount list
	     */
	    List<ExecuteStatusCount> countInstanceStateV2(
	                                                  @Param("startTime") Date startTime,
	                                                  @Param("endTime") Date endTime,
	                                                  @Param("projectCode") Long projectCode,
	                                                  @Param("workflowCode") Long workflowCode,
	                                                  @Param("model") Integer model,
	                                                  @Param("projectIds") Set<Integer> projectIds);
	
	    /**
	     * query process list by triggerCode
	     *
	     * @param triggerCode
	     * @return
	     */
	    List<WorkflowInstance> queryByTriggerCode(@Param("triggerCode") Long triggerCode);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.Flag;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import java.io.Serializable;
	import java.util.Date;
	
	import lombok.Data;
	
	import com.baomidou.mybatisplus.annotation.FieldStrategy;
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@TableName("t_ds_task_instance")
	public class TaskInstance implements Serializable {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    private String name;
	
	    private String taskType;
	
	    private int workflowInstanceId;
	
	    private String workflowInstanceName;
	
	    private Long projectCode;
	
	    private long taskCode;
	
	    private int taskDefinitionVersion;
	
	    @TableField(exist = false)
	    private String processDefinitionName;
	
	    @TableField(exist = false)
	    private int taskGroupPriority;
	
	    private TaskExecutionStatus state;
	
	    private Date firstSubmitTime;
	
	    private Date submitTime;
	
	    private Date startTime;
	
	    private Date endTime;
	
	    private String host;
	
	    private String executePath;
	
	    private String logPath;
	
	    private int retryTimes;
	
	    private Flag alertFlag;
	
	    @TableField(exist = false)
	    private WorkflowInstance workflowInstance;
	
	    @TableField(exist = false)
	    private WorkflowDefinition workflowDefinition;
	
	    @TableField(exist = false)
	    private TaskDefinition taskDefine;
	
	    private int pid;
	
	    private String appLink;
	
	    private Flag flag;
	
	    private Flag isCache;
	
	    @TableField(updateStrategy = FieldStrategy.IGNORED)
	    private String cacheKey;
	
	    @TableField(exist = false)
	    private String duration;
	
	    private int maxRetryTimes;
	
	    private int retryInterval;
	
	    private Priority taskInstancePriority;
	
	    @TableField(exist = false)
	    private Priority workflowInstancePriority;
	
	    private String workerGroup;
	
	    private Long environmentCode;
	
	    private String environmentConfig;
	
	    private int executorId;
	
	    private String varPool;
	
	    private String executorName;
	
	    private int delayTime;
	
	    private String taskParams;
	
	    private int dryRun;
	
	    private int taskGroupId;
	
	    private Integer cpuQuota;
	
	    private Integer memoryMax;
	
	    private TaskExecuteType taskExecuteType;
	
	    private int testFlag;
	
	    public void init(String host, Date startTime, String executePath) {
	        this.host = host;
	        this.startTime = startTime;
	        this.executePath = executePath;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.dao.entity.User;
	
	public interface ProjectParameterService {
	
	    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
	                                  String projectParameterValue, String projectParameterDataType);
	
	    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);
	
	    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);
	
	    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,
	                                           String searchVal, String projectParameterDataType);
	
	    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_PARAMETER_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_PARAMETER_ERROR;
	
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.ProjectParameterService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.constants.Constants;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import lombok.extern.slf4j.Slf4j;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	@Tag(name = "PROJECT_PARAMETER_TAG")
	@RestController
	@RequestMapping("projects/{projectCode}/project-parameter")
	@Slf4j
	public class ProjectParameterController extends BaseController {
	
	    @Autowired
	    private ProjectParameterService projectParameterService;
	
	    @Operation(summary = "createProjectParameter", description = "CREATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_PROJECT_PARAMETER_ERROR)
	    public Result createProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType", defaultValue = "VARCHAR") String projectParameterDataType) {
	        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "updateProjectParameter", description = "UPDATE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456")),
	            @Parameter(name = "projectParameterName", description = "PROJECT_PARAMETER_NAME", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterValue", description = "PROJECT_PARAMETER_VALUE", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "projectParameterDataType", description = "PROJECT_PARAMETER_DATA_TYPE", schema = @Schema(implementation = String.class))
	    })
	    @PutMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_PROJECT_PARAMETER_ERROR)
	    public Result updateProjectParameter(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                         @PathVariable("code") Long code,
	                                         @RequestParam("projectParameterName") String projectParameterName,
	                                         @RequestParam(value = "projectParameterValue") String projectParameterValue,
	                                         @RequestParam(value = "projectParameterDataType") String projectParameterDataType) {
	        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,
	                projectParameterValue, projectParameterDataType);
	    }
	
	    @Operation(summary = "deleteProjectParametersByCode", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result deleteProjectParametersByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                @RequestParam("code") long code) {
	
	        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);
	    }
	
	    @Operation(summary = "batchDeleteProjectParametersByCodes", description = "DELETE_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "codes", description = "PROJECT_PARAMETER_CODE", required = true, schema = @Schema(implementation = String.class))
	    })
	    @PostMapping(value = "/batch-delete")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_PROJECT_PARAMETER_ERROR)
	    public Result batchDeleteProjectParametersByCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                      @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                      @RequestParam("codes") String codes) {
	
	        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);
	    }
	
	    @Operation(summary = "queryProjectParameterListPaging", description = "QUERY_PROJECT_PARAMETER_LIST_PAGING_NOTES")
	    @Parameters({
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", required = false, schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", required = true, schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", required = true, schema = @Schema(implementation = int.class, example = "10"))
	    })
	    @GetMapping()
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterListPaging(
	                                                  @Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                                  @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                  @RequestParam(value = "searchVal", required = false) String searchVal,
	                                                  @RequestParam(value = "projectParameterDataType", required = false) String projectParameterDataType,
	                                                  @RequestParam("pageNo") Integer pageNo,
	                                                  @RequestParam("pageSize") Integer pageSize) {
	
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                searchVal, projectParameterDataType);
	    }
	
	    @Operation(summary = "queryProjectParameterByCode", description = "QUERY_PROJECT_PARAMETER_NOTES")
	    @Parameters({
	            @Parameter(name = "code", description = "PROJECT_PARAMETER_CODE", schema = @Schema(implementation = long.class, example = "123456"))
	    })
	    @GetMapping(value = "/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(QUERY_PROJECT_PARAMETER_ERROR)
	    public Result queryProjectParameterByCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
	                                              @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                              @PathVariable("code") long code) {
	        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.UserType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import org.junit.jupiter.api.Assertions;
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterControllerTest {
	
	    @InjectMocks
	    private ProjectParameterController projectParameterController;
	
	    @Mock
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),
	                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.createProjectParameter(loginUser, 1, "key", "value",
	                DataType.VARCHAR.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),
	                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.updateProjectParameter(loginUser, 1, 1L, "key", "value",
	                DataType.LONG.name());
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.deleteProjectParametersByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),
	                Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.batchDeleteProjectParametersByCodes(loginUser, 1, "1");
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterListPaging(loginUser, 1, "1",
	                DataType.VARCHAR.name(), 1, 10);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),
	                Mockito.anyLong())).thenReturn(getSuccessResult());
	        Result result = projectParameterController.queryProjectParameterByCode(loginUser, 1, 1);
	        Assertions.assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    private User getGeneralUser() {
	        User loginUser = new User();
	        loginUser.setUserType(UserType.GENERAL_USER);
	        loginUser.setUserName("userName");
	        loginUser.setId(1);
	        return loginUser;
	    }
	
	    private Result getSuccessResult() {
	        Result result = new Result();
	        result.setCode(Status.SUCCESS.getCode());
	        result.setMsg(Status.SUCCESS.getMsg());
	        return result;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.service;
	
	import static org.apache.dolphinscheduler.api.utils.ServiceTestUtil.getGeneralUser;
	import static org.junit.jupiter.api.Assertions.assertEquals;
	import static org.junit.jupiter.api.Assertions.assertNotNull;
	import static org.junit.jupiter.api.Assertions.assertNull;
	import static org.mockito.ArgumentMatchers.any;
	import static org.mockito.ArgumentMatchers.anyLong;
	import static org.mockito.Mockito.when;
	
	import org.apache.dolphinscheduler.api.AssertionsHelper;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.service.impl.ProjectParameterServiceImpl;
	import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
	import org.apache.dolphinscheduler.dao.entity.Project;
	import org.apache.dolphinscheduler.dao.entity.ProjectParameter;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
	import org.apache.dolphinscheduler.dao.mapper.ProjectParameterMapper;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	
	import java.util.Collections;
	
	import org.junit.jupiter.api.Test;
	import org.junit.jupiter.api.extension.ExtendWith;
	import org.mockito.InjectMocks;
	import org.mockito.Mock;
	import org.mockito.MockedStatic;
	import org.mockito.Mockito;
	import org.mockito.junit.jupiter.MockitoExtension;
	import org.mockito.junit.jupiter.MockitoSettings;
	import org.mockito.quality.Strictness;
	
	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
	
	@ExtendWith(MockitoExtension.class)
	@MockitoSettings(strictness = Strictness.LENIENT)
	public class ProjectParameterServiceTest {
	
	    @InjectMocks
	    private ProjectParameterServiceImpl projectParameterService;
	
	    @Mock
	    private ProjectMapper projectMapper;
	
	    @Mock
	    private ProjectParameterMapper projectParameterMapper;
	
	    @Mock
	    private ProjectServiceImpl projectService;
	
	    protected final static long projectCode = 1L;
	
	    @Test
	    public void testCreateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // PERMISSION DENIED
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	
	        // CODE GENERATION ERROR
	        try (MockedStatic<CodeGenerateUtils> ignored = Mockito.mockStatic(CodeGenerateUtils.class)) {
	            when(CodeGenerateUtils.genCode()).thenThrow(CodeGenerateUtils.CodeGenerateException.class);
	
	            result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                    DataType.VARCHAR.name());
	            assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	        }
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // INSERT DATA ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.CREATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.insert(Mockito.any())).thenReturn(1);
	        result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testUpdateProjectParameter() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_PARAMETER_ALREADY_EXISTS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(getProjectParameter());
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.PROJECT_PARAMETER_ALREADY_EXISTS.getCode(), result.getCode());
	
	        // PROJECT_UPDATE_ERROR
	        when(projectParameterMapper.selectOne(Mockito.any())).thenReturn(null);
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(-1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.VARCHAR.name());
	        assertEquals(Status.UPDATE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.updateById(Mockito.any())).thenReturn(1);
	        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, "key1", "value",
	                DataType.LONG.name());
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	        ProjectParameter projectParameter = (ProjectParameter) result.getData();
	        assertNotNull(projectParameter.getOperator());
	        assertNotNull(projectParameter.getUpdateTime());
	        assertEquals(DataType.LONG.name(), projectParameter.getParamDataType());
	    }
	
	    @Test
	    public void testDeleteProjectParametersByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(false);
	        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndWritePerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class)))
	                .thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // DATABASE OPERATION ERROR
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(-1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.DELETE_PROJECT_PARAMETER_ERROR.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.deleteById(Mockito.anyInt())).thenReturn(1);
	        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterByCode() {
	        User loginUser = getGeneralUser();
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // PROJECT_PARAMETER_NOT_EXISTS
	        when(projectMapper.queryByCode(projectCode)).thenReturn(getProject(projectCode));
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any())).thenReturn(true);
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(null);
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.PROJECT_PARAMETER_NOT_EXISTS.getCode(), result.getCode());
	
	        // SUCCESS
	        when(projectParameterMapper.queryByCode(Mockito.anyLong())).thenReturn(getProjectParameter());
	        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testQueryProjectParameterListPaging() {
	        User loginUser = getGeneralUser();
	        Integer pageSize = 10;
	        Integer pageNo = 1;
	
	        // NO PERMISSION
	        when(projectService.hasProjectAndPerm(Mockito.any(), Mockito.any(), Mockito.any(Result.class),
	                Mockito.any()))
	                        .thenReturn(false);
	
	        Result result =
	                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,
	                        DataType.VARCHAR.name());
	        assertNull(result.getData());
	        assertNull(result.getCode());
	        assertNull(result.getMsg());
	
	        // SUCCESS
	        when(projectService.hasProjectAndPerm(any(), any(), any(Result.class), any()))
	                .thenReturn(true);
	
	        Page<ProjectParameter> page = new Page<>(pageNo, pageSize);
	        page.setRecords(Collections.singletonList(getProjectParameter()));
	
	        when(projectParameterMapper.queryProjectParameterListPaging(any(), anyLong(), any(), any(), any()))
	                .thenReturn(page);
	        result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,
	                null, null);
	        assertEquals(Status.SUCCESS.getCode(), result.getCode());
	    }
	
	    @Test
	    public void testBatchDeleteProjectParametersByCodes() {
	        User loginUser = getGeneralUser();
	
	        Result result = projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "");
	        assertEquals(Status.PROJECT_PARAMETER_CODE_EMPTY.getCode(), result.getCode());
	
	        when(projectParameterMapper.queryByCodes(any())).thenReturn(Collections.singletonList(getProjectParameter()));
	
	        AssertionsHelper.assertThrowsServiceException(Status.PROJECT_PARAMETER_NOT_EXISTS,
	                () -> projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1,2"));
	
	        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, "1");
	    }
	
	    private Project getProject(long projectCode) {
	        Project project = new Project();
	        project.setCode(projectCode);
	        project.setId(1);
	        project.setName("test");
	        project.setUserId(1);
	        return project;
	    }
	
	    private ProjectParameter getProjectParameter() {
	        ProjectParameter projectParameter = new ProjectParameter();
	        projectParameter.setId(1);
	        projectParameter.setCode(1);
	        projectParameter.setProjectCode(1);
	        projectParameter.setParamName("key");
	        projectParameter.setParamValue("value");
	        return projectParameter;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.api.controller;
	
	import static org.apache.dolphinscheduler.api.enums.Status.CREATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.DELETE_SCHEDULE_BY_ID_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.OFFLINE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PREVIEW_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.PUBLISH_SCHEDULE_ONLINE_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.QUERY_SCHEDULE_LIST_PAGING_ERROR;
	import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_SCHEDULE_ERROR;
	import static org.apache.dolphinscheduler.common.constants.Constants.SESSION_USER;
	
	import org.apache.dolphinscheduler.api.audit.OperatorLog;
	import org.apache.dolphinscheduler.api.audit.enums.AuditType;
	import org.apache.dolphinscheduler.api.enums.Status;
	import org.apache.dolphinscheduler.api.exceptions.ApiException;
	import org.apache.dolphinscheduler.api.service.SchedulerService;
	import org.apache.dolphinscheduler.api.utils.Result;
	import org.apache.dolphinscheduler.common.enums.FailureStrategy;
	import org.apache.dolphinscheduler.common.enums.Priority;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	import org.apache.dolphinscheduler.dao.entity.User;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import java.util.Map;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.bind.annotation.RestController;
	
	import io.swagger.v3.oas.annotations.Operation;
	import io.swagger.v3.oas.annotations.Parameter;
	import io.swagger.v3.oas.annotations.Parameters;
	import io.swagger.v3.oas.annotations.media.Schema;
	import io.swagger.v3.oas.annotations.tags.Tag;
	
	/**
	 * scheduler controller
	 */
	@Tag(name = "SCHEDULE_TAG")
	@RestController
	@RequestMapping("/projects/{projectCode}/schedules")
	public class SchedulerController extends BaseController {
	
	    public static final String DEFAULT_WARNING_TYPE = "NONE";
	    public static final String DEFAULT_NOTIFY_GROUP_ID = "1";
	    public static final String DEFAULT_FAILURE_POLICY = "CONTINUE";
	    public static final String DEFAULT_WORKFLOW_INSTANCE_PRIORITY = "MEDIUM";
	
	    @Autowired
	    private SchedulerService schedulerService;
	
	    /**
	     * create schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workflowInstancePriority workflow instance priority
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @return create result code
	     */
	    @Operation(summary = "createSchedule", description = "CREATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	    })
	    @PostMapping()
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(CREATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_CREATE)
	    public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @RequestParam(value = "workflowDefinitionCode") long workflowDefinitionCode,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = DEFAULT_FAILURE_POLICY) FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.insertSchedule(
	                loginUser,
	                projectCode,
	                workflowDefinitionCode,
	                schedule,
	                warningType,
	                warningGroupId,
	                failureStrategy,
	                workflowInstancePriority,
	                workerGroup,
	                tenantCode,
	                environmentCode);
	
	        return returnDataList(result);
	    }
	
	    /**
	     * updateWorkflowInstance schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id scheduler id
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param tenantCode tenant code
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateSchedule", description = "UPDATE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                 @PathVariable(value = "id") Integer id,
	                                 @RequestParam(value = "schedule") String schedule,
	                                 @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
	                                 @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                 @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                 @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                 @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
	                                 @RequestParam(value = "workflowInstancePriority", required = false, defaultValue = DEFAULT_WORKFLOW_INSTANCE_PRIORITY) Priority workflowInstancePriority) {
	
	        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	
	    @Operation(summary = "online", description = "ONLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/online")
	    @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_ONLINE)
	    public Result<Boolean> publishScheduleOnline(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                 @PathVariable("id") Integer id) {
	        schedulerService.onlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    @Operation(summary = "offline", description = "OFFLINE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @PostMapping("/{id}/offline")
	    @ApiException(OFFLINE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_OFFLINE)
	    public Result<Boolean> offlineSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                           @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                           @PathVariable("id") Integer id) {
	        schedulerService.offlineScheduler(loginUser, projectCode, id);
	        return Result.success(true);
	    }
	
	    /**
	     * query schedule list paging
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param pageNo page number
	     * @param pageSize page size
	     * @param searchVal search value
	     * @return schedule list page
	     */
	    @Operation(summary = "queryScheduleListPaging", description = "QUERY_SCHEDULE_LIST_PAGING_NOTES")
	    @Parameters({
	
	            @Parameter(name = "searchVal", description = "SEARCH_VAL", schema = @Schema(implementation = String.class)),
	            @Parameter(name = "pageNo", description = "PAGE_NO", schema = @Schema(implementation = int.class, example = "1")),
	            @Parameter(name = "pageSize", description = "PAGE_SIZE", schema = @Schema(implementation = int.class, example = "20"))
	    })
	    @GetMapping()
	    @ApiException(QUERY_SCHEDULE_LIST_PAGING_ERROR)
	    public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                          @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                          @RequestParam(value = "workflowDefinitionCode", required = false, defaultValue = "0") long workflowDefinitionCode,
	                                          @RequestParam(value = "searchVal", required = false) String searchVal,
	                                          @RequestParam("pageNo") Integer pageNo,
	                                          @RequestParam("pageSize") Integer pageSize) {
	        checkPageParams(pageNo, pageSize);
	        searchVal = ParameterUtils.handleEscapes(searchVal);
	        return schedulerService.querySchedule(loginUser, projectCode, workflowDefinitionCode, searchVal, pageNo,
	                pageSize);
	
	    }
	
	    /**
	     * delete schedule by id
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param id schedule id
	     * @return delete result code
	     */
	    @Operation(summary = "deleteScheduleById", description = "DELETE_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
	    })
	    @DeleteMapping(value = "/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(DELETE_SCHEDULE_BY_ID_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_DELETE)
	    public Result deleteScheduleById(@RequestAttribute(value = SESSION_USER) User loginUser,
	                                     @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                     @PathVariable("id") Integer id) {
	        schedulerService.deleteSchedulesById(loginUser, id);
	        return new Result(Status.SUCCESS);
	    }
	
	    /**
	     * query schedule list
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @return schedule list
	     */
	    @Operation(summary = "queryScheduleList", description = "QUERY_SCHEDULE_LIST_NOTES")
	    @PostMapping("/list")
	    @ApiException(QUERY_SCHEDULE_LIST_ERROR)
	    public Result queryScheduleList(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                    @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
	        Map<String, Object> result = schedulerService.queryScheduleList(loginUser, projectCode);
	        return returnDataList(result);
	    }
	
	    /**
	     * preview schedule
	     *
	     * @param loginUser login user
	     * @param schedule schedule expression
	     * @return the next five fire time
	     */
	    @Operation(summary = "previewSchedule", description = "PREVIEW_SCHEDULE_NOTES")
	    @Parameters({
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	    })
	    @PostMapping("/preview")
	    @ResponseStatus(HttpStatus.CREATED)
	    @ApiException(PREVIEW_SCHEDULE_ERROR)
	    public Result previewSchedule(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                  @RequestParam(value = "schedule") String schedule) {
	        Map<String, Object> result = schedulerService.previewSchedule(loginUser, schedule);
	        return returnDataList(result);
	    }
	
	    /**
	     * update workflow definition schedule
	     *
	     * @param loginUser login user
	     * @param projectCode project code
	     * @param workflowDefinitionCode workflow definition code
	     * @param schedule scheduler
	     * @param warningType warning type
	     * @param warningGroupId warning group id
	     * @param failureStrategy failure strategy
	     * @param workerGroup worker group
	     * @param workflowInstancePriority workflow instance priority
	     * @return update result code
	     */
	    @Operation(summary = "updateScheduleByWorkflowDefinitionCode", description = "UPDATE_SCHEDULE_BY_WORKFLOW_DEFINITION_CODE_NOTES")
	    @Parameters({
	            @Parameter(name = "workflowDefinitionCode", description = "WORKFLOW_DEFINITION_CODE", required = true, schema = @Schema(implementation = long.class, example = "12345678")),
	            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
	            @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
	            @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
	            @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
	            @Parameter(name = "workerGroup", description = "WORKER_GROUP", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "tenantCode", description = "TENANT_CODE", schema = @Schema(implementation = String.class, example = "default")),
	            @Parameter(name = "workflowInstancePriority", description = "WORKFLOW_INSTANCE_PRIORITY", schema = @Schema(implementation = Priority.class)),
	            @Parameter(name = "environmentCode", description = "ENVIRONMENT_CODE", schema = @Schema(implementation = long.class)),
	    })
	    @PutMapping("/update/{code}")
	    @ResponseStatus(HttpStatus.OK)
	    @ApiException(UPDATE_SCHEDULE_ERROR)
	    @OperatorLog(auditType = AuditType.SCHEDULE_UPDATE)
	    public Result updateScheduleByWorkflowDefinitionCode(@Parameter(hidden = true) @RequestAttribute(value = SESSION_USER) User loginUser,
	                                                         @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
	                                                         @PathVariable(value = "code") long workflowDefinitionCode,
	                                                         @RequestParam(value = "schedule") String schedule,
	                                                         @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
	                                                         @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
	                                                         @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
	                                                         @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
	                                                         @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,
	                                                         @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") long environmentCode,
	                                                         @RequestParam(value = "workflowInstancePriority", required = false) Priority workflowInstancePriority) {
	        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,
	                workflowDefinitionCode, schedule,
	                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,
	                environmentCode);
	        return returnDataList(result);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.dao.entity;
	
	import org.apache.dolphinscheduler.common.enums.AlertStatus;
	import org.apache.dolphinscheduler.common.enums.AlertType;
	import org.apache.dolphinscheduler.common.enums.WarningType;
	
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	import com.baomidou.mybatisplus.annotation.IdType;
	import com.baomidou.mybatisplus.annotation.TableField;
	import com.baomidou.mybatisplus.annotation.TableId;
	import com.baomidou.mybatisplus.annotation.TableName;
	
	@Data
	@Builder
	@NoArgsConstructor
	@AllArgsConstructor
	@TableName("t_ds_alert")
	public class Alert {
	
	    @TableId(value = "id", type = IdType.AUTO)
	    private Integer id;
	
	    @TableField(value = "sign")
	    private String sign;
	
	    @TableField(value = "title")
	    private String title;
	
	    @TableField(value = "content")
	    private String content;
	
	    @TableField(value = "alert_status")
	    private AlertStatus alertStatus;
	
	    @TableField(value = "warning_type")
	    private WarningType warningType;
	
	    @TableField(value = "log")
	    private String log;
	
	    @TableField("alertgroup_id")
	    private Integer alertGroupId;
	
	    @TableField("create_time")
	    private Date createTime;
	
	    @TableField("update_time")
	    private Date updateTime;
	
	    @TableField("project_code")
	    private Long projectCode;
	
	    @TableField("workflow_definition_code")
	    private Long workflowDefinitionCode;
	
	    @TableField("workflow_instance_id")
	    private Integer workflowInstanceId;
	
	    @TableField("alert_type")
	    private AlertType alertType;
	
	    @TableField(exist = false)
	    private Map<String, Object> info = new HashMap<>();
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private Integer alertGroupId;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroupId;
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroupId = alertGroupId;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	
	{
	    "refactorings": {
	        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
	            {
	                "fromLine": 35,
	                "toLine": 35,
	                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,",
	                "newContent": "public HttpResponse startWorkflowInstance(ExecutionParameters executionParameters,"
	            },
	            {
	                "fromLine": 36,
	                "toLine": 40,
	                "oldContent": "                                              long projectCode,
	                                              long workflowDefinitionCode,
	                                              String scheduleTime,
	                                              FailureStrategy failureStrategy,
	                                              WarningType warningType) {",
	                "newContent": "                                              long projectCode) {"
	            },
	            {
	                "fromLine": 42,
	                "toLine": 46,
	                "oldContent": "        params.put(\"loginUser\", loginUser);
	        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);
	        params.put(\"scheduleTime\", scheduleTime);
	        params.put(\"failureStrategy\", failureStrategy);
	        params.put(\"warningType\", warningType);",
	                "newContent": "        params.putAll(executionParameters.toMap());"
	            },
	            {
	                "fromLine": 64,
	                "toLine": 64,
	                "oldContent": "    public HttpResponse execute(User loginUser, long projectCode, int workflowInstanceId, ExecuteType executeType) {",
	                "newContent": "    public HttpResponse execute(ExecutionParameters executionParameters, long projectCode) {"
	            },
	            {
	                "fromLine": 66,
	                "toLine": 69,
	                "oldContent": "        params.put(\"loginUser\", loginUser);
	        params.put(\"projectCode\", projectCode);
	        params.put(\"workflowInstanceId\", workflowInstanceId);
	        params.put(\"executeType\", executeType);",
	                "newContent": "        params.putAll(executionParameters.toMap());"
	            },
	            {
	                "fromLine": 87,
	                "toLine": 87,
	                "oldContent": "    public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,",
	                "newContent": "    public HttpResponse executeTask(ExecutionParameters executionParameters, long projectCode,"
	            },
	            {
	                "fromLine": 88,
	                "toLine": 89,
	                "oldContent": "                                    TaskDependType taskDependType) {
	        Map<String, Object> params = new HashMap<>();",
	                "newContent": "                                    TaskDependType taskDependType) {"
	            },
	            {
	                "fromLine": 91,
	                "toLine": 94,
	                "oldContent": "        params.put(\"loginUser\", loginUser);
	        params.put(\"workflowInstanceId\", workflowInstanceId);
	        params.put(\"startNodeList\", startNodeList);
	        params.put(\"taskDependType\", taskDependType);",
	                "newContent": "        params.putAll(executionParameters.toMap());"
	            }
	        ],
	        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
	            {
	                "fromLine": 15,
	                "toLine": 15,
	                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,",
	                "newContent": "    Result createProjectParameter(ProjectParameterRequest projectParameterRequest,"
	            },
	            {
	                "fromLine": 16,
	                "toLine": 17,
	                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);
	
	    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,",
	                "newContent": "                                  long projectCode);
	
	    Result updateProjectParameter(ProjectParameterRequest projectParameterRequest,"
	            },
	            {
	                "fromLine": 18,
	                "toLine": 19,
	                "oldContent": "                                  String projectParameterValue, String projectParameterDataType);
	
	    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
	                "newContent": "                                  long projectCode, long code);
	
	    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);"
	            },
	            {
	                "fromLine": 21,
	                "toLine": 21,
	                "oldContent": "    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
	                "newContent": "    Result batchDeleteProjectParametersByCodes(ProjectParameterRequest projectParameterRequest);"
	            },
	            {
	                "fromLine": 23,
	                "toLine": 23,
	                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,",
	                "newContent": "    Result queryProjectParameterListPaging(ProjectParameterRequest projectParameterRequest,"
	            },
	            {
	                "fromLine": 24,
	                "toLine": 24,
	                "oldContent": "                                           String searchVal, String projectParameterDataType);",
	                "newContent": "                                           Integer pageSize, Integer pageNo);"
	            },
	            {
	                "fromLine": 26,
	                "toLine": 26,
	                "oldContent": "    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
	                "newContent": "    Result queryProjectParameterByCode(ProjectParameterRequest projectParameterRequest);"
	            }
	        ],
	        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
	            {
	                "fromLine": 57,
	                "toLine": 57,
	                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,",
	                "newContent": "        return projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, projectParameterName,"
	            },
	            {
	                "fromLine": 58,
	                "toLine": 58,
	                "oldContent": "                projectParameterValue, projectParameterDataType);",
	                "newContent": "                projectParameterValue, projectParameterDataType), projectCode);"
	            },
	            {
	                "fromLine": 73,
	                "toLine": 73,
	                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,",
	                "newContent": "        return projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, projectParameterName,"
	            },
	            {
	                "fromLine": 74,
	                "toLine": 74,
	                "oldContent": "                projectParameterValue, projectParameterDataType);",
	                "newContent": "                projectParameterValue, projectParameterDataType), projectCode, code);"
	            },
	            {
	                "fromLine": 92,
	                "toLine": 92,
	                "oldContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
	                "newContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(new ProjectParameterRequest(loginUser, projectCode, codes));"
	            },
	            {
	                "fromLine": 107,
	                "toLine": 107,
	                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,",
	                "newContent": "        return projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, searchVal, projectParameterDataType),"
	            },
	            {
	                "fromLine": 108,
	                "toLine": 108,
	                "oldContent": "                searchVal, projectParameterDataType);",
	                "newContent": "                pageSize, pageNo);"
	            },
	            {
	                "fromLine": 122,
	                "toLine": 122,
	                "oldContent": "        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
	                "newContent": "        return projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, code));"
	            }
	        ],
	        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
	            {
	                "fromLine": 29,
	                "toLine": 29,
	                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),",
	                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterRequest.class),"
	            },
	            {
	                "fromLine": 30,
	                "toLine": 30,
	                "oldContent": "                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
	                "newContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());"
	            },
	            {
	                "fromLine": 44,
	                "toLine": 44,
	                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),",
	                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterRequest.class),"
	            },
	            {
	                "fromLine": 45,
	                "toLine": 45,
	                "oldContent": "                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
	                "newContent": "                Mockito.anyLong(), Mockito.anyLong())).thenReturn(getSuccessResult());"
	            },
	            {
	                "fromLine": 59,
	                "toLine": 59,
	                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),",
	                "newContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());"
	            },
	            {
	                "fromLine": 60,
	                "toLine": 60,
	                "oldContent": "                Mockito.any())).thenReturn(getSuccessResult());",
	                "newContent": ""
	            },
	            {
	                "fromLine": 74,
	                "toLine": 74,
	                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),",
	                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(ProjectParameterRequest.class),"
	            },
	            {
	                "fromLine": 75,
	                "toLine": 75,
	                "oldContent": "                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
	                "newContent": "                Mockito.anyInt(), Mockito.anyInt())).thenReturn(getSuccessResult());"
	            },
	            {
	                "fromLine": 89,
	                "toLine": 89,
	                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),",
	                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(ProjectParameterRequest.class))).thenReturn(getSuccessResult());"
	            },
	            {
	                "fromLine": 90,
	                "toLine": 90,
	                "oldContent": "                Mockito.anyLong())).thenReturn(getSuccessResult());",
	                "newContent": ""
	            }
	        ],
	        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
	            {
	                "fromLine": 36,
	                "toLine": 36,
	                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
	                "newContent": "        Result result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
	            },
	            {
	                "fromLine": 37,
	                "toLine": 37,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode);"
	            },
	            {
	                "fromLine": 51,
	                "toLine": 51,
	                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",",
	                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
	            },
	            {
	                "fromLine": 52,
	                "toLine": 52,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode);"
	            },
	            {
	                "fromLine": 59,
	                "toLine": 59,
	                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
	                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
	            },
	            {
	                "fromLine": 60,
	                "toLine": 60,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode);"
	            },
	            {
	                "fromLine": 68,
	                "toLine": 68,
	                "oldContent": "        result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key1\", \"value\",",
	                "newContent": "        result = projectParameterService.createProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
	            },
	            {
	                "fromLine": 69,
	                "toLine": 69,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode);"
	            },
	            {
	                "fromLine": 83,
	                "toLine": 83,
	                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
	                "newContent": "        Result result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
	            },
	            {
	                "fromLine": 84,
	                "toLine": 84,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
	            },
	            {
	                "fromLine": 98,
	                "toLine": 98,
	                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",",
	                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key\", \"value\","
	            },
	            {
	                "fromLine": 99,
	                "toLine": 99,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
	            },
	            {
	                "fromLine": 106,
	                "toLine": 106,
	                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
	                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
	            },
	            {
	                "fromLine": 107,
	                "toLine": 107,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), projectCode, 1);"
	            },
	            {
	                "fromLine": 115,
	                "toLine": 115,
	                "oldContent": "        result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key1\", \"value\",",
	                "newContent": "        result = projectParameterService.updateProjectParameter(new ProjectParameterRequest(loginUser, \"key1\", \"value\","
	            },
	            {
	                "fromLine": 116,
	                "toLine": 116,
	                "oldContent": "                DataType.LONG.name());",
	                "newContent": "                DataType.LONG.name()), projectCode, 1);"
	            },
	            {
	                "fromLine": 130,
	                "toLine": 130,
	                "oldContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
	                "newContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
	            },
	            {
	                "fromLine": 144,
	                "toLine": 144,
	                "oldContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
	                "newContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
	            },
	            {
	                "fromLine": 152,
	                "toLine": 152,
	                "oldContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
	                "newContent": "        result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);"
	            },
	            {
	                "fromLine": 166,
	                "toLine": 166,
	                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
	                "newContent": "        Result result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
	            },
	            {
	                "fromLine": 180,
	                "toLine": 180,
	                "oldContent": "        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
	                "newContent": "        result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
	            },
	            {
	                "fromLine": 188,
	                "toLine": 188,
	                "oldContent": "        result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
	                "newContent": "        result = projectParameterService.queryProjectParameterByCode(new ProjectParameterRequest(loginUser, projectCode, 1));"
	            },
	            {
	                "fromLine": 202,
	                "toLine": 202,
	                "oldContent": "        Result result = projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
	                "newContent": "        Result result = projectParameterService.queryProjectParameterListPaging(new ProjectParameterRequest(loginUser, projectCode, null,"
	            },
	            {
	                "fromLine": 203,
	                "toLine": 203,
	                "oldContent": "                DataType.VARCHAR.name());",
	                "newContent": "                DataType.VARCHAR.name()), pageSize, pageNo);"
	            },
	            {
	                "fromLine": 217,
	                "toLine": 217,
	                "oldContent": "        result = projectParameterService.queryProject	
",
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[45,16] cannot find symbol
	[ERROR]   symbol:   variable alertGroupId
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[49,13] cannot find symbol
	[ERROR]   symbol: variable alertGroupId
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-task-api
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private AlertGroup alertGroup;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroupId;
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroupId = alertGroupId;
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:
			[
				fromLine:"				27",
				toLine:"				27",
				oldContent:"
				    private AlertGroup alertGroup;				
",
				newContent:"
				    private Integer alertGroupId;				
",
,
				fromLine:"				33",
				toLine:"				33",
				oldContent:"
				        return alertGroupId;				
",
				newContent:"
				        return alertGroup.getId();				
",
,
				fromLine:"				37",
				toLine:"				37",
				oldContent:"
				        this.alertGroupId = alertGroupId;				
",
				newContent:"
				        this.alertGroup = new AlertGroup(alertGroupId);				
",
,

			],
		
}
		extractedClasses:
{
					dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java:"
			public class AlertGroup {
			
			    private Integer id;
			
			    public AlertGroup(Integer id) {
			        this.id = id;
			    }
			
			    public Integer getId() {
			        return id;
			    }
			
			    public void setId(Integer id) {
			        this.id = id;
			    }
			}			
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[45,16] cannot find symbol
	[ERROR]   symbol:   variable alertGroup
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[49,13] cannot find symbol
	[ERROR]   symbol: variable alertGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java:[1,8] duplicate class: AlertGroup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[49,31] cannot access org.apache.dolphinscheduler.plugin.task.api.model.AlertGroup
	[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java
	[ERROR]     file does not contain class org.apache.dolphinscheduler.plugin.task.api.model.AlertGroup
	[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-task-api
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private Integer alertGroupId;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroup.getId();
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroup = new AlertGroup(alertGroupId);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java
	public class AlertGroup {
	
	    private Integer id;
	
	    public AlertGroup(Integer id) {
	        this.id = id;
	    }
	
	    public Integer getId() {
	        return id;
	    }
	
	    public void setId(Integer id) {
	        this.id = id;
	    }
	}	
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:
			[
				fromLine:"				27",
				toLine:"				27",
				oldContent:"
				    private Integer alertGroupId;				
",
				newContent:"
				    private AlertGroup alertGroup;				
",
,
				fromLine:"				33",
				toLine:"				33",
				oldContent:"
				        return alertGroup.getId();				
",
				newContent:"
				        return alertGroupId;				
",
,
				fromLine:"				37",
				toLine:"				37",
				oldContent:"
				        this.alertGroup = new AlertGroup(alertGroupId);				
",
				newContent:"
				        this.alertGroupId = alertGroupId;				
",
,

			],
			dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java:
			[
				fromLine:"				1",
				toLine:"				11",
				oldContent:"
				public class AlertGroup {
				
				    private Integer id;
				
				    public AlertGroup(Integer id) {
				        this.id = id;
				    }
				
				    public Integer getId() {
				        return id;
				    }
				
				    public void setId(Integer id) {
				        this.id = id;
				    }
				}				
",
				newContent:"
				// Removed AlertGroup class				
",
,

			],
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-task-api: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[26,13] cannot access org.apache.dolphinscheduler.plugin.task.api.model.AlertGroup
	[ERROR]   bad source file: /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/AlertGroup.java
	[ERROR]     file does not contain class org.apache.dolphinscheduler.plugin.task.api.model.AlertGroup
	[ERROR]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/TimePlaceholderUtils.java:[326,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.TimePlaceholderUtils.TimePlaceholderResolver
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java:[161,25] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PropertyPlaceholderHelper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java:[162,25] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PropertyPlaceholderHelper
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[70,49] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[81,32] cannot find symbol
	[ERROR]   symbol:   method setConnectionParams(Objects.no[...] null)
	[ERROR]   location: variable k8sTaskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[96,29] cannot find symbol
	[ERROR]   symbol:   method getDirect()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[96,87] cannot find symbol
	[ERROR]   symbol:   method getDirect()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[97,53] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[113,40] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[135,57] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[137,25] cannot find symbol
	[ERROR]   symbol:   method setValue(java.lang.String)
	[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[142,31] non-static method mergeVarPool(java.util.List<java.util.List<org.apache.dolphinscheduler.plugin.task.api.model.Property>>) cannot be referenced from a static context
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[150,37] cannot find symbol
	[ERROR]   symbol:   method getDirect()
	[ERROR]   location: variable info of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[169,32] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable p of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java:[169,58] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[164,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[192,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java:[199,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.AbstractTask
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[45,16] cannot find symbol
	[ERROR]   symbol:   variable alertGroupId
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:[49,13] cannot find symbol
	[ERROR]   symbol: variable alertGroupId
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java:[45,41] cannot find symbol
	[ERROR]   symbol:   method getResourceAbsolutePathInStorage()
	[ERROR]   location: variable resourceItem of type org.apache.dolphinscheduler.plugin.task.api.resource.ResourceContext.ResourceItem
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[55,47] cannot find symbol
	[ERROR]   symbol:   method getAppIds()
	[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[56,34] cannot find symbol
	[ERROR]   symbol:   method getAppIds()
	[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[65,24] cannot find symbol
	[ERROR]   symbol:   method setAppIds(java.lang.String)
	[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[67,87] constructor ApplicationInfo in class org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java:[67,65] cannot find symbol
	[ERROR]   symbol:   method getTaskInstanceId()
	[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[63,87] constructor ApplicationInfo in class org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[63,65] cannot find symbol
	[ERROR]   symbol:   method getTaskInstanceId()
	[ERROR]   location: variable taskRequest of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[78,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[81,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[85,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[90,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java:[95,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.loop.BaseLoopTaskExecutor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java:[75,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.DataQualityParameters
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java:[80,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.DataQualityParameters
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[108,17] cannot find symbol
	[ERROR]   symbol:   method setDriverName(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[109,17] cannot find symbol
	[ERROR]   symbol:   method setHost(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[110,17] cannot find symbol
	[ERROR]   symbol:   method setPort(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[111,17] cannot find symbol
	[ERROR]   symbol:   method setDatabase(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[124,21] cannot find symbol
	[ERROR]   symbol:   method setParams(java.util.Map<java.lang.String,java.lang.String>)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[128,17] cannot find symbol
	[ERROR]   symbol:   method setAddress(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java:[129,17] cannot find symbol
	[ERROR]   symbol:   method setJdbcUrl(java.lang.String)
	[ERROR]   location: variable jdbcInfo of type org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[62,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[76,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java:[82,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseWindowsShellInterceptorBuilder<T,Y>
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseShellInterceptor.java:[46,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseShellInterceptor
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/log/TaskLogDiscriminator.java:[43,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.log.TaskLogDiscriminator
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java:[50,39] constructor Property in class org.apache.dolphinscheduler.plugin.task.api.model.Property cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.lang.String,org.apache.dolphinscheduler.plugin.task.api.enums.Direct,org.apache.dolphinscheduler.plugin.task.api.enums.DataType,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java:[51,33] incompatible types: inference variable T has incompatible bounds
	[ERROR]     equality constraints: org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR]     lower bounds: java.lang.Object
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PlaceholderUtils.java:[97,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.parser.PlaceholderUtils.PropertyPlaceholderResolver
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[44,69] cannot find symbol
	[ERROR]   symbol:   method getDependTaskList()
	[ERROR]   location: variable dependence of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionDependency
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[47,79] cannot find symbol
	[ERROR]   symbol:   method getSuccessNode()
	[ERROR]   location: variable conditionResult of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionResult
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java:[48,59] cannot find symbol
	[ERROR]   symbol:   method getFailedNode()
	[ERROR]   location: variable conditionResult of type org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters.ConditionResult
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[42,17] cannot find symbol
	[ERROR]   symbol:   method getDefinitionCode()
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[43,17] cannot find symbol
	[ERROR]   symbol:   method getDepTaskCode()
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[44,17] cannot find symbol
	[ERROR]   symbol:   method getCycle()
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java:[45,17] cannot find symbol
	[ERROR]   symbol:   method getDateValue()
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.model.DependentItem
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java:[101,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java:[102,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[93,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[93,72] cannot find symbol
	[ERROR]   symbol:   method getProcessId()
	[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[94,36] cannot find symbol
	[ERROR]   symbol:   method getProcessId()
	[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[96,17] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[101,45] cannot find symbol
	[ERROR]   symbol:   method getTenantCode()
	[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[102,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[105,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[105,74] cannot find symbol
	[ERROR]   symbol:   method getProcessId()
	[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[108,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[108,73] cannot find symbol
	[ERROR]   symbol:   method getProcessId()
	[ERROR]   location: variable request of type @lombok.NonNull org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[138,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[170,53] cannot find symbol
	[ERROR]   symbol:   method getK8sTaskExecutionContext()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[171,69] cannot find symbol
	[ERROR]   symbol:   method getTaskType()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[176,57] cannot find symbol
	[ERROR]   symbol:   method getTaskAppId()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[175,57] cannot find symbol
	[ERROR]   symbol:   method getK8sTaskExecutionContext()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[179,51] cannot find symbol
	[ERROR]   symbol:   method getHost()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[180,58] cannot find symbol
	[ERROR]   symbol:   method getExecutePath()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[181,57] cannot find symbol
	[ERROR]   symbol:   method getTenantCode()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[183,64] cannot find symbol
	[ERROR]   symbol:   method getAppIds()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[185,64] cannot find symbol
	[ERROR]   symbol:   method getAppIds()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[187,58] cannot find symbol
	[ERROR]   symbol:   method getLogPath()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[188,62] cannot find symbol
	[ERROR]   symbol:   method getAppInfoPath()
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[190,25] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[195,21] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[196,38] non-static method getAppIds(java.lang.String,java.lang.String,java.lang.String) cannot be referenced from a static context
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[198,41] cannot find symbol
	[ERROR]   symbol:   method setAppIds(java.lang.String)
	[ERROR]   location: variable taskExecutionContext of type org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[201,21] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[205,52] constructor YarnApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.YarnApplicationManagerContext cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    java.lang.String,java.lang.String,java.util.List<java.lang.String>
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[208,13] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[227,39] constructor KubernetesApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java:[244,25] constructor KubernetesApplicationManagerContext in class org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext cannot be applied to given types;
	[ERROR]   required: no arguments
	[ERROR]   found:    org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext,java.lang.String,java.lang.String
	[ERROR]   reason: actual and formal argument lists differ in length
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java:[64,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseLinuxShellInterceptorBuilder<T,Y>
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java:[108,9] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.shell.BaseLinuxShellInterceptorBuilder<T,Y>
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[51,22] incompatible types: invalid method reference
	[ERROR]     unexpected instance method deserializeVarPool(java.lang.String) found in unbound lookup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[75,48] cannot find symbol
	[ERROR]   symbol:   method getDirect()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[76,21] cannot find symbol
	[ERROR]   symbol:   variable log
	[ERROR]   location: class org.apache.dolphinscheduler.plugin.task.api.utils.VarPoolUtils
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[76,89] cannot find symbol
	[ERROR]   symbol:   method getDirect()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[79,36] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[88,22] incompatible types: invalid method reference
	[ERROR]     unexpected instance method deserializeVarPool(java.lang.String) found in unbound lookup
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java:[107,48] cannot find symbol
	[ERROR]   symbol:   method getProp()
	[ERROR]   location: variable property of type org.apache.dolphinscheduler.plugin.task.api.model.Property
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-task-api
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	public class TaskAlertInfo {
	
	    private String title;
	
	    private String content;
	
	    private AlertGroup alertGroup;
	
	    public String getTitle() {
	        return title;
	    }
	
	    public void setTitle(String title) {
	        this.title = title;
	    }
	
	    public String getContent() {
	        return content;
	    }
	
	    public void setContent(String content) {
	        this.content = content;
	    }
	
	    public Integer getAlertGroupId() {
	        return alertGroupId;
	    }
	
	    public void setAlertGroupId(Integer alertGroupId) {
	        this.alertGroupId = alertGroupId;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/TimePlaceholderUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parser;
	
	import static org.apache.commons.lang3.time.DateUtils.addWeeks;
	import static org.apache.dolphinscheduler.common.utils.DateUtils.addDays;
	import static org.apache.dolphinscheduler.common.utils.DateUtils.addMinutes;
	import static org.apache.dolphinscheduler.common.utils.DateUtils.addMonths;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_MONTHS;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.ADD_STRING;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COMMA;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DIVISION_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DIVISION_STRING;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.HYPHEN;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LAST_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LEFT_BRACE_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LEFT_BRACE_STRING;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_BEGIN;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_END;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_FIRST_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MONTH_LAST_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MULTIPLY_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.MULTIPLY_STRING;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.N;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.P;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.PARAMETER_FORMAT_TIME;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.RIGHT_BRACE_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SUBTRACT_CHAR;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SUBTRACT_STRING;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.THIS_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TIMESTAMP;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_BEGIN;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_END;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_FIRST_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.WEEK_LAST_DAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.YEAR_WEEK;
	
	import org.apache.dolphinscheduler.common.utils.DateUtils;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.AbstractMap;
	import java.util.ArrayList;
	import java.util.Calendar;
	import java.util.Date;
	import java.util.List;
	import java.util.Map;
	import java.util.Stack;
	
	import lombok.extern.slf4j.Slf4j;
	
	/**
	 * time place holder utils
	 */
	@Slf4j
	public class TimePlaceholderUtils {
	
	    /**
	     * Prefix of the position to be replaced
	     */
	    public static final String PLACEHOLDER_PREFIX = "$[";
	
	    /**
	     * The suffix of the position to be replaced
	     */
	    public static final String PLACEHOLDER_SUFFIX = "]";
	
	    /**
	     * Replaces all placeholders of format {@code ${name}} with the value returned
	     * from the supplied {@link PropertyPlaceholderHelper.PlaceholderResolver}.
	     *
	     * @param value                          the value containing the placeholders to be replaced
	     * @param date                           custom date
	     * @param ignoreUnresolvablePlaceholders ignore unresolvable placeholders
	     * @return the supplied value with placeholders replaced inline
	     */
	    public static String replacePlaceholders(String value, Date date, boolean ignoreUnresolvablePlaceholders) {
	        PropertyPlaceholderHelper strictHelper = getPropertyPlaceholderHelper(false);
	        PropertyPlaceholderHelper nonStrictHelper = getPropertyPlaceholderHelper(true);
	
	        PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);
	        return helper.replacePlaceholders(value, new TimePlaceholderResolver(value, date));
	    }
	
	    /**
	     * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.
	     *
	     * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should
	     *                                       be ignored ({@code true}) or cause an exception ({@code false})
	     */
	    private static PropertyPlaceholderHelper getPropertyPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {
	        return new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, null,
	                ignoreUnresolvablePlaceholders);
	    }
	
	    /**
	     * calculate expression's value
	     *
	     * @param expression expression
	     * @return expression's value
	     */
	    public static Integer calculate(String expression) {
	        expression = StringUtils.trim(expression);
	        expression = convert(expression);
	
	        List<String> result = string2List(expression);
	        result = convert2SuffixList(result);
	
	        return calculate(result);
	    }
	
	    /**
	     * Change the sign in the expression to P (positive) N (negative)
	     *
	     * @param expression
	     * @return eg. "-3+-6*(+8)-(-5) -> S3+S6*(P8)-(S5)"
	     */
	    private static String convert(String expression) {
	        char[] arr = expression.toCharArray();
	
	        for (int i = 0; i < arr.length; i++) {
	            if (arr[i] == SUBTRACT_CHAR) {
	                if (i == 0) {
	                    arr[i] = N;
	                } else {
	                    char c = arr[i - 1];
	                    if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR
	                            || c == LEFT_BRACE_CHAR) {
	                        arr[i] = N;
	                    }
	                }
	            } else if (arr[i] == ADD_CHAR) {
	                if (i == 0) {
	                    arr[i] = P;
	                } else {
	                    char c = arr[i - 1];
	                    if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR
	                            || c == LEFT_BRACE_CHAR) {
	                        arr[i] = P;
	                    }
	                }
	            }
	        }
	
	        return new String(arr);
	    }
	
	    /**
	     * to suffix expression
	     *
	     * @param srcList
	     * @return
	     */
	    private static List<String> convert2SuffixList(List<String> srcList) {
	        List<String> result = new ArrayList<>();
	        Stack<String> stack = new Stack<>();
	
	        for (int i = 0; i < srcList.size(); i++) {
	            if (Character.isDigit(srcList.get(i).charAt(0))) {
	                result.add(srcList.get(i));
	            } else {
	                switch (srcList.get(i).charAt(0)) {
	                    case LEFT_BRACE_CHAR:
	                        stack.push(srcList.get(i));
	                        break;
	                    case RIGHT_BRACE_CHAR:
	                        while (!LEFT_BRACE_STRING.equals(stack.peek())) {
	                            result.add(stack.pop());
	                        }
	                        stack.pop();
	                        break;
	                    default:
	                        while (!stack.isEmpty() && compare(stack.peek(), srcList.get(i))) {
	                            result.add(stack.pop());
	                        }
	                        stack.push(srcList.get(i));
	                        break;
	                }
	            }
	        }
	
	        while (!stack.isEmpty()) {
	            result.add(stack.pop());
	        }
	
	        return result;
	    }
	
	    /**
	     * Calculate the suffix expression
	     *
	     * @param result
	     * @return
	     */
	    private static Integer calculate(List<String> result) {
	        Stack<Integer> stack = new Stack<>();
	        for (int i = 0; i < result.size(); i++) {
	            if (Character.isDigit(result.get(i).charAt(0))) {
	                stack.push(Integer.parseInt(result.get(i)));
	            } else {
	                Integer backInt = stack.pop();
	                Integer frontInt = 0;
	                char op = result.get(i).charAt(0);
	
	                if (!(op == P || op == N)) {
	                    frontInt = stack.pop();
	                }
	
	                Integer res = 0;
	                switch (result.get(i).charAt(0)) {
	                    case P:
	                        res = frontInt + backInt;
	                        break;
	                    case N:
	                        res = frontInt - backInt;
	                        break;
	                    case ADD_CHAR:
	                        res = frontInt + backInt;
	                        break;
	                    case SUBTRACT_CHAR:
	                        res = frontInt - backInt;
	                        break;
	                    case MULTIPLY_CHAR:
	                        res = frontInt * backInt;
	                        break;
	                    case DIVISION_CHAR:
	                        res = frontInt / backInt;
	                        break;
	                    default:
	                        break;
	                }
	                stack.push(res);
	            }
	        }
	
	        return stack.pop();
	    }
	
	    /**
	     * string to list
	     *
	     * @param expression
	     * @return list
	     */
	    private static List<String> string2List(String expression) {
	        List<String> result = new ArrayList<>();
	        String num = "";
	        for (int i = 0; i < expression.length(); i++) {
	            if (Character.isDigit(expression.charAt(i))) {
	                num = num + expression.charAt(i);
	            } else {
	                if (!StringUtils.isEmpty(num)) {
	                    result.add(num);
	                }
	                result.add(expression.charAt(i) + "");
	                num = "";
	            }
	        }
	
	        if (!num.isEmpty()) {
	            result.add(num);
	        }
	
	        return result;
	    }
	
	    /**
	     * compare loginUser level
	     *
	     * @param peek
	     * @param cur
	     * @return true or false
	     */
	    private static boolean compare(String peek, String cur) {
	        if (MULTIPLY_STRING.equals(peek) && (DIVISION_STRING.equals(cur) || MULTIPLY_STRING.equals(cur)
	                || ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur))) {
	            return true;
	        } else if (DIVISION_STRING.equals(peek) && (DIVISION_STRING.equals(cur) || MULTIPLY_STRING.equals(cur)
	                || ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur))) {
	            return true;
	        } else if (ADD_STRING.equals(peek) && (ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur))) {
	            return true;
	        } else {
	            return SUBTRACT_STRING.equals(peek) && (ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur));
	        }
	
	    }
	
	    /**
	     * Placeholder replacement resolver
	     */
	    private static class TimePlaceholderResolver
	            implements
	                PropertyPlaceholderHelper.PlaceholderResolver {
	
	        private final String value;
	
	        private final Date date;
	
	        public TimePlaceholderResolver(String value, Date date) {
	            this.value = value;
	            this.date = date;
	        }
	
	        @Override
	        public String resolvePlaceholder(String placeholderName) {
	            try {
	                return calculateTime(placeholderName, date);
	            } catch (Exception ex) {
	                log.error("resolve placeholder '{}' in [ {} ]", placeholderName, value, ex);
	                return null;
	            }
	        }
	    }
	
	    /**
	     * return the formatted date according to the corresponding date format
	     *
	     * @param expression date expression
	     * @param date       date
	     * @return reformat date
	     */
	    public static String getPlaceHolderTime(String expression, Date date) {
	        if (StringUtils.isBlank(expression)) {
	            throw new IllegalArgumentException("expression is null");
	        }
	        if (null == date) {
	            throw new IllegalArgumentException("date is null");
	        }
	        return calculateTime(expression, date);
	    }
	
	    /**
	     * calculate time
	     *
	     * @param date date
	     * @return calculate time
	     */
	    private static String calculateTime(String expression, Date date) {
	        // After N years: $[add_months(yyyyMMdd,12*N)], the first N months: $[add_months(yyyyMMdd,-N)], etc
	        if (date == null) {
	            throw new IllegalArgumentException("Cannot parse the expression: " + expression + ", date is null");
	        }
	        try {
	            if (expression.startsWith(TIMESTAMP)) {
	                String timeExpression = expression.substring(TIMESTAMP.length() + 1, expression.length() - 1);
	
	                Map.Entry<Date, String> entry = calcTimeExpression(timeExpression, date);
	
	                String dateStr = DateUtils.format(entry.getKey(), entry.getValue());
	
	                Date timestamp = DateUtils.parse(dateStr, PARAMETER_FORMAT_TIME);
	
	                return String.valueOf(timestamp.getTime() / 1000);
	            }
	            if (expression.startsWith(YEAR_WEEK)) {
	                return calculateYearWeek(expression, date);
	            }
	            Map.Entry<Date, String> entry = calcTimeExpression(expression, date);
	            return DateUtils.format(entry.getKey(), entry.getValue());
	        } catch (Exception e) {
	            throw new IllegalArgumentException("Unsupported placeholder expression: " + expression, e);
	        }
	    }
	
	    /**
	     * get week of year
	     * @param expression expression
	     * @param date       date
	     * @return week of year
	     */
	    public static String calculateYearWeek(String expression, Date date) {
	
	        String dataFormat = expression.substring(YEAR_WEEK.length() + 1, expression.length() - 1);
	
	        String targetDate = "";
	        try {
	
	            if (dataFormat.contains(COMMA)) {
	                String param1 = dataFormat.split(COMMA)[0];
	                String param2 = dataFormat.split(COMMA)[1];
	                dataFormat = param1;
	
	                targetDate = transformYearWeek(date, dataFormat, calculate(param2));
	
	            } else {
	                targetDate = transformYearWeek(date, dataFormat, 1);
	            }
	        } catch (Exception e) {
	            throw new RuntimeException("expression not valid");
	        }
	
	        return targetDate;
	    }
	
	    /**
	     * transform week of year
	     * @param date date
	     * @param format date_format,for example: yyyy-MM-dd / yyyyMMdd
	     * @param weekDay day of week
	     * @return date_string
	     */
	    private static String transformYearWeek(Date date, String format, int weekDay) {
	        Calendar calendar = Calendar.getInstance();
	        // Minimum number of days required for the first week of the year
	        calendar.setMinimalDaysInFirstWeek(4);
	
	        // By default ,Set Monday as the first day of the week
	        switch (weekDay) {
	            case 2:
	                calendar.setFirstDayOfWeek(Calendar.TUESDAY);
	                break;
	            case 3:
	                calendar.setFirstDayOfWeek(Calendar.WEDNESDAY);
	                break;
	            case 4:
	                calendar.setFirstDayOfWeek(Calendar.THURSDAY);
	                break;
	            case 5:
	                calendar.setFirstDayOfWeek(Calendar.FRIDAY);
	                break;
	            case 6:
	                calendar.setFirstDayOfWeek(Calendar.SATURDAY);
	                break;
	            case 7:
	                calendar.setFirstDayOfWeek(Calendar.SUNDAY);
	                break;
	            default:
	                calendar.setFirstDayOfWeek(Calendar.MONDAY);
	                break;
	        }
	        calendar.setTimeInMillis(date.getTime());
	
	        int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);
	
	        int year = calendar.get(Calendar.YEAR);
	
	        String weekYearStr = "";
	        if (weekOfYear < 10 && format.contains(HYPHEN)) {
	            weekYearStr = String.format("%d%s0%d", year, HYPHEN, weekOfYear);
	        } else if (weekOfYear >= 10 && format.contains(HYPHEN)) {
	            weekYearStr = String.format("%d%s%d", year, HYPHEN, weekOfYear);
	        } else if (weekOfYear < 10) {
	            weekYearStr = String.format("%d0%d", year, weekOfYear);
	        } else {
	            weekYearStr = String.format("%d%d", year, weekOfYear);
	        }
	
	        return weekYearStr;
	    }
	
	    /**
	     * calculate time expresstion
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return map with date, date format
	     */
	    public static Map.Entry<Date, String> calcTimeExpression(String expression, Date date) {
	        Map.Entry<Date, String> resultEntry;
	
	        if (expression.startsWith(ADD_MONTHS)) {
	            resultEntry = calcMonths(expression, date);
	        } else if (expression.startsWith(MONTH_BEGIN)) {
	            resultEntry = calcMonthBegin(expression, date);
	        } else if (expression.startsWith(MONTH_END)) {
	            resultEntry = calcMonthEnd(expression, date);
	        } else if (expression.startsWith(WEEK_BEGIN)) {
	            resultEntry = calcWeekStart(expression, date);
	        } else if (expression.startsWith(WEEK_END)) {
	            resultEntry = calcWeekEnd(expression, date);
	        } else if (expression.startsWith(MONTH_FIRST_DAY)) {
	            resultEntry = calcCustomDay(expression, MONTH_FIRST_DAY, date);
	        } else if (expression.startsWith(MONTH_LAST_DAY)) {
	            resultEntry = calcCustomDay(expression, MONTH_LAST_DAY, date);
	        } else if (expression.startsWith(THIS_DAY)) {
	            resultEntry = calcCustomDay(expression, THIS_DAY, date);
	        } else if (expression.startsWith(LAST_DAY)) {
	            resultEntry = calcCustomDay(expression, LAST_DAY, date);
	        } else if (expression.startsWith(WEEK_FIRST_DAY)) {
	            resultEntry = calcCustomDay(expression, WEEK_FIRST_DAY, date);
	        } else if (expression.startsWith(WEEK_LAST_DAY)) {
	            resultEntry = calcCustomDay(expression, WEEK_LAST_DAY, date);
	        } else {
	            resultEntry = calcMinutes(expression, date);
	        }
	
	        return resultEntry;
	    }
	
	    /**
	     * get first day of month
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return first day of month
	     */
	    public static Map.Entry<Date, String> calcMonthBegin(String expression, Date date) {
	        String addMonthExpr = expression.substring(MONTH_BEGIN.length() + 1, expression.length() - 1);
	        String[] params = addMonthExpr.split(COMMA);
	
	        if (params.length == 2) {
	            String dateFormat = params[0];
	            String dayExpr = params[1];
	            Integer day = calculate(dayExpr);
	            Date targetDate = DateUtils.getFirstDayOfMonth(date);
	            targetDate = addDays(targetDate, day);
	
	            return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	        }
	
	        throw new RuntimeException("expression not valid");
	    }
	
	    /**
	     * get last day of month
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return last day of month
	     */
	    public static Map.Entry<Date, String> calcMonthEnd(String expression, Date date) {
	        String addMonthExpr = expression.substring(MONTH_END.length() + 1, expression.length() - 1);
	        String[] params = addMonthExpr.split(COMMA);
	
	        if (params.length == 2) {
	            String dateFormat = params[0];
	            String dayExpr = params[1];
	            Integer day = calculate(dayExpr);
	            Date targetDate = DateUtils.getLastDayOfMonth(date);
	            targetDate = addDays(targetDate, day);
	
	            return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	        }
	
	        throw new RuntimeException("expression not valid");
	    }
	
	    /**
	     * calculate time expression
	     * month first day month last day
	     * @param expression expression
	     * @param date       date
	     * @return calculate time expression with date,format
	     */
	    public static Map.Entry<Date, String> calcCustomDay(String expression, String keyDate, Date date) {
	        String dataFormat = "yyyy-MM-dd";
	        Date targetDate = new Date();
	
	        switch (keyDate) {
	            case MONTH_FIRST_DAY:
	                dataFormat = expression.substring(MONTH_FIRST_DAY.length() + 1, expression.length() - 1);
	
	                if (dataFormat.contains(COMMA)) {
	                    String param1 = dataFormat.split(COMMA)[0];
	                    String param2 = dataFormat.split(COMMA)[1];
	                    dataFormat = param1;
	
	                    targetDate = addMonths(DateUtils.getFirstDayOfMonth(date), calculate(param2));
	                } else {
	                    targetDate = DateUtils.getFirstDayOfMonth(date);
	                }
	
	                break;
	            case MONTH_LAST_DAY:
	                dataFormat = expression.substring(MONTH_LAST_DAY.length() + 1, expression.length() - 1);
	
	                if (dataFormat.contains(COMMA)) {
	                    String param1 = dataFormat.split(COMMA)[0];
	                    String param2 = dataFormat.split(COMMA)[1];
	                    dataFormat = param1;
	
	                    Date lastMonthDay = addMonths(date, calculate(param2));
	
	                    targetDate = DateUtils.getLastDayOfMonth(lastMonthDay);
	
	                } else {
	                    targetDate = DateUtils.getLastDayOfMonth(date);
	                }
	                break;
	            case THIS_DAY:
	                dataFormat = expression.substring(THIS_DAY.length() + 1, expression.length() - 1);
	                targetDate = addDays(date, 0);
	                break;
	            case LAST_DAY:
	                dataFormat = expression.substring(LAST_DAY.length() + 1, expression.length() - 1);
	                targetDate = addDays(date, -1);
	                break;
	            case WEEK_FIRST_DAY:
	                dataFormat = expression.substring(WEEK_FIRST_DAY.length() + 1, expression.length() - 1);
	
	                if (dataFormat.contains(COMMA)) {
	                    String param1 = dataFormat.split(COMMA)[0];
	                    String param2 = dataFormat.split(COMMA)[1];
	                    dataFormat = param1;
	
	                    targetDate = addWeeks(DateUtils.getMonday(date), calculate(param2));
	                } else {
	                    targetDate = addWeeks(DateUtils.getMonday(date), 0);
	                }
	                break;
	            case WEEK_LAST_DAY:
	                dataFormat = expression.substring(WEEK_LAST_DAY.length() + 1, expression.length() - 1);
	
	                if (dataFormat.contains(COMMA)) {
	                    String param1 = dataFormat.split(COMMA)[0];
	                    String param2 = dataFormat.split(COMMA)[1];
	                    dataFormat = param1;
	
	                    targetDate = addWeeks(DateUtils.getSunday(date), calculate(param2));
	                } else {
	                    targetDate = addWeeks(DateUtils.getSunday(date), 0);
	                }
	                break;
	            default:
	                break;
	        }
	
	        return new AbstractMap.SimpleImmutableEntry<>(targetDate, dataFormat);
	
	    }
	
	    /**
	     * get first day of week
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return monday
	     */
	    public static Map.Entry<Date, String> calcWeekStart(String expression, Date date) {
	        String addMonthExpr = expression.substring(WEEK_BEGIN.length() + 1, expression.length() - 1);
	        String[] params = addMonthExpr.split(COMMA);
	
	        if (params.length == 2) {
	            String dateFormat = params[0];
	            String dayExpr = params[1];
	            Integer day = calculate(dayExpr);
	            Date targetDate = DateUtils.getMonday(date);
	            targetDate = addDays(targetDate, day);
	            return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	        }
	
	        throw new RuntimeException("expression not valid");
	    }
	
	    /**
	     * get last day of week
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return last day of week
	     */
	    public static Map.Entry<Date, String> calcWeekEnd(String expression, Date date) {
	        String addMonthExpr = expression.substring(WEEK_END.length() + 1, expression.length() - 1);
	        String[] params = addMonthExpr.split(COMMA);
	
	        if (params.length == 2) {
	            String dateFormat = params[0];
	            String dayExpr = params[1];
	            Integer day = calculate(dayExpr);
	            Date targetDate = DateUtils.getSunday(date);
	            targetDate = addDays(targetDate, day);
	
	            return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	        }
	
	        throw new RuntimeException("Expression not valid");
	    }
	
	    /**
	     * calc months expression
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return calc months
	     */
	    public static Map.Entry<Date, String> calcMonths(String expression, Date date) {
	        String addMonthExpr = expression.substring(ADD_MONTHS.length() + 1, expression.length() - 1);
	        String[] params = addMonthExpr.split(COMMA);
	
	        if (params.length == 2) {
	            String dateFormat = params[0];
	            String monthExpr = params[1];
	            Integer addMonth = calculate(monthExpr);
	            Date targetDate = addMonths(date, addMonth);
	
	            return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	        }
	
	        throw new RuntimeException("expression not valid");
	    }
	
	    /**
	     * calculate time expression
	     *
	     * @param expression expresstion
	     * @param date       date
	     * @return calculate time expression with date,format
	     */
	    public static Map.Entry<Date, String> calcMinutes(String expression, Date date) {
	        if (expression.contains("+")) {
	            int index = expression.lastIndexOf('+');
	
	            if (Character.isDigit(expression.charAt(index + 1))) {
	                String addMinuteExpr = expression.substring(index + 1);
	                Date targetDate = addMinutes(date, calcMinutes(addMinuteExpr));
	                String dateFormat = expression.substring(0, index);
	
	                return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	            }
	        } else if (expression.contains("-")) {
	            int index = expression.lastIndexOf('-');
	
	            if (Character.isDigit(expression.charAt(index + 1))) {
	                String addMinuteExpr = expression.substring(index + 1);
	                Date targetDate = addMinutes(date, 0 - calcMinutes(addMinuteExpr));
	                String dateFormat = expression.substring(0, index);
	
	                return new AbstractMap.SimpleImmutableEntry<>(targetDate, dateFormat);
	            }
	
	            // yyyy-MM-dd/HH:mm:ss
	            return new AbstractMap.SimpleImmutableEntry<>(date, expression);
	        }
	
	        // $[HHmmss]
	        return new AbstractMap.SimpleImmutableEntry<>(date, expression);
	    }
	
	    /**
	     * calculate need minutes
	     *
	     * @param minuteExpression minute expression
	     * @return calculate need minutes
	     */
	    public static Integer calcMinutes(String minuteExpression) {
	        int index = minuteExpression.indexOf('/');
	
	        String calcExpression;
	
	        if (index == -1) {
	            calcExpression = String.format("60*24*(%s)", minuteExpression);
	        } else {
	
	            calcExpression = String.format("60*24*(%s)%s", minuteExpression.substring(0, index),
	                    minuteExpression.substring(index));
	        }
	
	        return calculate(calcExpression);
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parser;
	
	import java.util.HashMap;
	import java.util.HashSet;
	import java.util.Map;
	import java.util.Properties;
	import java.util.Set;
	
	import lombok.extern.slf4j.Slf4j;
	
	/**
	 * Utility class for working with Strings that have placeholder values in them. A placeholder takes the form
	 * {@code ${name}}. Using {@code PropertyPlaceholderHelper} these placeholders can be substituted for
	 * user-supplied values. <p> Values for substitution can be supplied using a {@link Properties} instance or
	 * using a {@link PlaceholderResolver}.
	 *
	 * @author Juergen Hoeller
	 * @author Rob Harrop
	 * @since 3.0
	 */
	@Slf4j
	public class PropertyPlaceholderHelper {
	
	    private static final Map<String, String> wellKnownSimplePrefixes = new HashMap<String, String>(4);
	
	    static {
	        wellKnownSimplePrefixes.put("}", "{");
	        wellKnownSimplePrefixes.put("]", "[");
	        wellKnownSimplePrefixes.put(")", "(");
	    }
	
	    private final String placeholderPrefix;
	
	    private final String placeholderSuffix;
	
	    private final String simplePrefix;
	
	    private final String valueSeparator;
	
	    private final boolean ignoreUnresolvablePlaceholders;
	
	    /**
	     * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.
	     * Unresolvable placeholders are ignored.
	     * @param placeholderPrefix the prefix that denotes the start of a placeholder
	     * @param placeholderSuffix the suffix that denotes the end of a placeholder
	     */
	    public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix) {
	        this(placeholderPrefix, placeholderSuffix, null, true);
	    }
	
	    /**
	     * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.
	     * @param placeholderPrefix the prefix that denotes the start of a placeholder
	     * @param placeholderSuffix the suffix that denotes the end of a placeholder
	     * @param valueSeparator the separating character between the placeholder variable
	     * and the associated default value, if any
	     * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should
	     * be ignored ({@code true}) or cause an exception ({@code false})
	     */
	    public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,
	                                     String valueSeparator, boolean ignoreUnresolvablePlaceholders) {
	
	        notNull(placeholderPrefix, "'placeholderPrefix' must not be null");
	        notNull(placeholderSuffix, "'placeholderSuffix' must not be null");
	        this.placeholderPrefix = placeholderPrefix;
	        this.placeholderSuffix = placeholderSuffix;
	        String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);
	        if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {
	            this.simplePrefix = simplePrefixForSuffix;
	        } else {
	            this.simplePrefix = this.placeholderPrefix;
	        }
	        this.valueSeparator = valueSeparator;
	        this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;
	    }
	
	    /**
	     * Replaces all placeholders of format {@code ${name}} with the corresponding
	     * property from the supplied {@link Properties}.
	     * @param value the value containing the placeholders to be replaced
	     * @param properties the {@code Properties} to use for replacement
	     * @return the supplied value with placeholders replaced inline
	     */
	    public String replacePlaceholders(String value, final Properties properties) {
	        notNull(properties, "'properties' must not be null");
	        return replacePlaceholders(value, new PlaceholderResolver() {
	
	            @Override
	            public String resolvePlaceholder(String placeholderName) {
	                return properties.getProperty(placeholderName);
	            }
	        });
	    }
	
	    /**
	     * Replaces all placeholders of format {@code ${name}} with the value returned
	     * from the supplied {@link PlaceholderResolver}.
	     * @param value the value containing the placeholders to be replaced
	     * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement
	     * @return the supplied value with placeholders replaced inline
	     */
	    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {
	        notNull(value, "'value' must not be null");
	        return parseStringValue(value, placeholderResolver, new HashSet<String>());
	    }
	
	    protected String parseStringValue(
	                                      String value, PlaceholderResolver placeholderResolver,
	                                      Set<String> visitedPlaceholders) {
	
	        StringBuilder result = new StringBuilder(value);
	
	        int startIndex = value.indexOf(this.placeholderPrefix);
	        while (startIndex != -1) {
	            int endIndex = findPlaceholderEndIndex(result, startIndex);
	            if (endIndex != -1) {
	                String placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);
	                String originalPlaceholder = placeholder;
	                if (!visitedPlaceholders.add(originalPlaceholder)) {
	                    throw new IllegalArgumentException(
	                            "Circular placeholder reference '" + originalPlaceholder + "' in property definitions");
	                }
	                // Recursive invocation, parsing placeholders contained in the placeholder key.
	                placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);
	                // Now obtain the value for the fully resolved key...
	                String propVal = placeholderResolver.resolvePlaceholder(placeholder);
	                if (propVal == null && this.valueSeparator != null) {
	                    int separatorIndex = placeholder.indexOf(this.valueSeparator);
	                    if (separatorIndex != -1) {
	                        String actualPlaceholder = placeholder.substring(0, separatorIndex);
	                        String defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());
	                        propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);
	                        if (propVal == null) {
	                            propVal = defaultValue;
	                        }
	                    }
	                }
	                if (propVal != null) {
	                    // Recursive invocation, parsing placeholders contained in the
	                    // previously resolved placeholder value.
	                    propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);
	                    result.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);
	                    if (log.isTraceEnabled()) {
	                        log.trace("Resolved placeholder '" + placeholder + "'");
	                    }
	                    startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());
	                } else if (this.ignoreUnresolvablePlaceholders) {
	                    // Proceed with unprocessed value.
	                    startIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());
	                } else {
	                    throw new IllegalArgumentException("Could not resolve placeholder '"
	                            + placeholder + "'" + " in value \"" + value + "\"");
	                }
	                visitedPlaceholders.remove(originalPlaceholder);
	            } else {
	                startIndex = -1;
	            }
	        }
	
	        return result.toString();
	    }
	
	    private int findPlaceholderEndIndex(CharSequence buf, int startIndex) {
	        int index = startIndex + this.placeholderPrefix.length();
	        int withinNestedPlaceholder = 0;
	        while (index < buf.length()) {
	            if (substringMatch(buf, index, this.placeholderSuffix)) {
	                if (withinNestedPlaceholder > 0) {
	                    withinNestedPlaceholder--;
	                    index = index + this.placeholderSuffix.length();
	                } else {
	                    return index;
	                }
	            } else if (substringMatch(buf, index, this.simplePrefix)) {
	                withinNestedPlaceholder++;
	                index = index + this.simplePrefix.length();
	            } else {
	                index++;
	            }
	        }
	        return -1;
	    }
	
	    /**
	     * Strategy interface used to resolve replacement values for placeholders contained in Strings.
	     */
	    public interface PlaceholderResolver {
	
	        /**
	         * Resolve the supplied placeholder name to the replacement value.
	         * @param placeholderName the name of the placeholder to resolve
	         * @return the replacement value, or {@code null} if no replacement is to be made
	         */
	        String resolvePlaceholder(String placeholderName);
	    }
	
	    /**
	     * Test whether the given string matches the given substring
	     * at the given index.
	     * @param str the original string (or StringBuilder)
	     * @param index the index in the original string to start matching against
	     * @param substring the substring to match at the given index
	     * @return whether the given string matches the given substring
	     */
	    public static boolean substringMatch(CharSequence str, int index, CharSequence substring) {
	        for (int j = 0; j < substring.length(); j++) {
	            int i = index + j;
	            if (i >= str.length() || str.charAt(i) != substring.charAt(j)) {
	                return false;
	            }
	        }
	        return true;
	    }
	
	    /**
	     * Assert that an object is not {@code null}.
	     * <pre class="code">Assert.notNull(clazz, "The class must not be null");</pre>
	     * @param object the object to check
	     * @param message the exception message to use if the assertion fails
	     * @throws IllegalArgumentException if the object is {@code null}
	     */
	    public static void notNull(Object object, String message) {
	        if (object == null) {
	            throw new IllegalArgumentException(message);
	        }
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parameters;
	
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	import org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext;
	import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
	import org.apache.dolphinscheduler.plugin.task.api.enums.ResourceType;
	import org.apache.dolphinscheduler.plugin.task.api.model.Property;
	import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
	import org.apache.dolphinscheduler.plugin.task.api.parameters.resource.DataSourceParameters;
	import org.apache.dolphinscheduler.plugin.task.api.parameters.resource.ResourceParametersHelper;
	import org.apache.dolphinscheduler.plugin.task.api.utils.VarPoolUtils;
	
	import org.apache.commons.collections4.CollectionUtils;
	import org.apache.commons.collections4.MapUtils;
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.ArrayList;
	import java.util.LinkedHashMap;
	import java.util.List;
	import java.util.Map;
	import java.util.Objects;
	import java.util.stream.Collectors;
	
	import lombok.Getter;
	import lombok.Setter;
	import lombok.extern.slf4j.Slf4j;
	
	import com.fasterxml.jackson.databind.JsonNode;
	import com.fasterxml.jackson.databind.node.ArrayNode;
	import com.google.common.collect.Lists;
	
	@Getter
	@Slf4j
	public abstract class AbstractParameters implements IParameters {
	
	    @Setter
	    public List<Property> localParams;
	
	    public List<Property> varPool = new ArrayList<>();
	
	    @Override
	    public abstract boolean checkParameters();
	
	    @Override
	    public List<ResourceInfo> getResourceFilesList() {
	        return new ArrayList<>();
	    }
	
	    public Map<String, Property> getLocalParametersMap() {
	        Map<String, Property> localParametersMaps = new LinkedHashMap<>();
	        if (localParams != null) {
	            for (Property property : localParams) {
	                localParametersMaps.put(property.getProp(), property);
	            }
	        }
	        return localParametersMaps;
	    }
	
	    public K8sTaskExecutionContext generateK8sTaskExecutionContext(ResourceParametersHelper parametersHelper,
	                                                                   int datasource) {
	        DataSourceParameters dataSourceParameters =
	                (DataSourceParameters) parametersHelper.getResourceParameters(ResourceType.DATASOURCE, datasource);
	        K8sTaskExecutionContext k8sTaskExecutionContext = new K8sTaskExecutionContext();
	        k8sTaskExecutionContext.setConnectionParams(
	                Objects.nonNull(dataSourceParameters) ? dataSourceParameters.getConnectionParams() : null);
	        return k8sTaskExecutionContext;
	    }
	
	    /**
	     * get input local parameters map if the param direct is IN
	     *
	     * @return parameters map
	     */
	    public Map<String, Property> getInputLocalParametersMap() {
	        Map<String, Property> localParametersMaps = new LinkedHashMap<>();
	        if (localParams != null) {
	            for (Property property : localParams) {
	                // The direct of some tasks is empty, default IN
	                if (property.getDirect() == null || Objects.equals(Direct.IN, property.getDirect())) {
	                    localParametersMaps.put(property.getProp(), property);
	                }
	            }
	        }
	        return localParametersMaps;
	    }
	
	    /**
	     * get varPool map
	     *
	     * @return parameters map
	     */
	    public Map<String, Property> getVarPoolMap() {
	        Map<String, Property> varPoolMap = new LinkedHashMap<>();
	        if (varPool != null) {
	            for (Property property : varPool) {
	                varPoolMap.put(property.getProp(), property);
	            }
	        }
	        return varPoolMap;
	    }
	
	    public void setVarPool(String varPool) {
	        if (StringUtils.isEmpty(varPool)) {
	            this.varPool = new ArrayList<>();
	        } else {
	            this.varPool = JSONUtils.toList(varPool, Property.class);
	        }
	    }
	
	    public void dealOutParam(Map<String, String> taskOutputParams) {
	        List<Property> outProperty = getOutProperty(localParams);
	        if (CollectionUtils.isEmpty(outProperty)) {
	            return;
	        }
	        if (CollectionUtils.isNotEmpty(outProperty) && MapUtils.isNotEmpty(taskOutputParams)) {
	            // Inject the value
	            for (Property info : outProperty) {
	                String value = taskOutputParams.get(info.getProp());
	                if (value != null) {
	                    info.setValue(value);
	                }
	            }
	        }
	
	        varPool = VarPoolUtils.mergeVarPool(Lists.newArrayList(varPool, outProperty));
	    }
	
	    protected List<Property> getOutProperty(List<Property> params) {
	        if (CollectionUtils.isEmpty(params)) {
	            return new ArrayList<>();
	        }
	        return params.stream()
	                .filter(info -> info.getDirect() == Direct.OUT)
	                .collect(Collectors.toList());
	    }
	
	    public List<Map<String, String>> getListMapByString(String json) {
	        List<Map<String, String>> allParams = new ArrayList<>();
	        ArrayNode paramsByJson = JSONUtils.parseArray(json);
	        for (JsonNode jsonNode : paramsByJson) {
	            Map<String, String> param = JSONUtils.toMap(jsonNode.toString());
	            allParams.add(param);
	        }
	        return allParams;
	    }
	
	    public ResourceParametersHelper getResources() {
	        return new ResourceParametersHelper();
	    }
	
	    public void addPropertyToValPool(Property property) {
	        varPool.removeIf(p -> p.getProp().equals(property.getProp()));
	        varPool.add(property);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api;
	
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	import org.apache.dolphinscheduler.plugin.task.api.model.Property;
	import org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo;
	import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
	
	import java.util.Map;
	import java.util.StringJoiner;
	import java.util.concurrent.LinkedBlockingQueue;
	import java.util.regex.Matcher;
	
	import lombok.Getter;
	import lombok.Setter;
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	public abstract class AbstractTask {
	
	    @Getter
	    @Setter
	    protected Map<String, String> taskOutputParams;
	
	    /**
	     * taskExecutionContext
	     **/
	    protected TaskExecutionContext taskRequest;
	
	    /**
	     * SHELL process pid
	     */
	    protected int processId;
	
	    /**
	     * other resource manager appId , for example : YARN etc
	     */
	    protected String appIds;
	
	    /**
	     * exit code
	     */
	    protected volatile int exitStatusCode = -1;
	
	    protected boolean needAlert = false;
	
	    protected TaskAlertInfo taskAlertInfo;
	
	    /**
	     * constructor
	     *
	     * @param taskExecutionContext taskExecutionContext
	     */
	    protected AbstractTask(TaskExecutionContext taskExecutionContext) {
	        this.taskRequest = taskExecutionContext;
	    }
	
	    /**
	     * init task
	     */
	    public void init() {
	    }
	
	    // todo: return TaskResult rather than store the result in Task
	    public abstract void handle(TaskCallBack taskCallBack) throws TaskException;
	
	    public abstract void cancel() throws TaskException;
	
	    /**
	     * get exit status code
	     *
	     * @return exit status code
	     */
	    public int getExitStatusCode() {
	        return exitStatusCode;
	    }
	
	    public void setExitStatusCode(int exitStatusCode) {
	        this.exitStatusCode = exitStatusCode;
	    }
	
	    public int getProcessId() {
	        return processId;
	    }
	
	    public void setProcessId(int processId) {
	        this.processId = processId;
	    }
	
	    public String getAppIds() {
	        return appIds;
	    }
	
	    public void setAppIds(String appIds) {
	        this.appIds = appIds;
	    }
	
	    public boolean getNeedAlert() {
	        return needAlert;
	    }
	
	    public void setNeedAlert(boolean needAlert) {
	        this.needAlert = needAlert;
	    }
	
	    public TaskAlertInfo getTaskAlertInfo() {
	        return taskAlertInfo;
	    }
	
	    public void setTaskAlertInfo(TaskAlertInfo taskAlertInfo) {
	        this.taskAlertInfo = taskAlertInfo;
	    }
	
	    /**
	     * get task parameters
	     *
	     * @return AbstractParameters
	     */
	    public abstract AbstractParameters getParameters();
	
	    /**
	     * get exit status according to exitCode
	     *
	     * @return exit status
	     */
	    public TaskExecutionStatus getExitStatus() {
	        switch (getExitStatusCode()) {
	            case TaskConstants.EXIT_CODE_SUCCESS:
	                return TaskExecutionStatus.SUCCESS;
	            case TaskConstants.EXIT_CODE_KILL:
	                return TaskExecutionStatus.KILL;
	            default:
	                return TaskExecutionStatus.FAILURE;
	        }
	    }
	
	    /**
	     * log handle
	     *
	     * @param logs log list
	     */
	    public void logHandle(LinkedBlockingQueue<String> logs) {
	
	        StringJoiner joiner = new StringJoiner("
	\t");
	        while (!logs.isEmpty()) {
	            joiner.add(logs.poll());
	        }
	        log.info(" -> {}", joiner);
	    }
	
	    /**
	     * regular expressions match the contents between two specified strings
	     *
	     * @param content content
	     * @param sqlParamsMap sql params map
	     * @param paramsPropsMap params props map
	     */
	    public void setSqlParamsMap(String content, Map<Integer, Property> sqlParamsMap,
	                                Map<String, Property> paramsPropsMap, int taskInstanceId) {
	        if (paramsPropsMap == null) {
	            return;
	        }
	
	        Matcher m = TaskConstants.SQL_PARAMS_PATTERN.matcher(content);
	        int index = 1;
	        while (m.find()) {
	
	            String paramName = m.group(TaskConstants.GROUP_NAME1);
	            if (paramName == null) {
	                paramName = m.group(TaskConstants.GROUP_NAME2);
	            }
	
	            Property prop = paramsPropsMap.get(paramName);
	
	            if (prop == null) {
	                log.error(
	                        "setSqlParamsMap: No Property with paramName: {} is found in paramsPropsMap of task instance"
	                                + " with id: {}. So couldn't put Property in sqlParamsMap.",
	                        paramName, taskInstanceId);
	            } else {
	                sqlParamsMap.put(index, prop);
	                index++;
	                log.info(
	                        "setSqlParamsMap: Property with paramName: {} put in sqlParamsMap of content {} successfully.",
	                        paramName, content);
	            }
	
	        }
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.resource;
	
	import static com.google.common.base.Preconditions.checkNotNull;
	
	import java.util.HashMap;
	import java.util.Map;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	import lombok.ToString;
	
	@ToString
	public class ResourceContext {
	
	    /**
	     * ResourceAbsolutePathInStorage -> ResourceItem
	     */
	    private final Map<String, ResourceItem> resourceItemMap;
	
	    public ResourceContext() {
	        this.resourceItemMap = new HashMap<>();
	    }
	
	    public void addResourceItem(ResourceItem resourceItem) {
	        checkNotNull(resourceItem);
	        resourceItemMap.put(resourceItem.getResourceAbsolutePathInStorage(), resourceItem);
	    }
	
	    public ResourceItem getResourceItem(String resourceAbsolutePathInStorage) {
	        ResourceItem resourceItem = resourceItemMap.get(resourceAbsolutePathInStorage);
	        if (resourceItem == null) {
	            throw new IllegalArgumentException("Cannot find the resourceItem: " + resourceAbsolutePathInStorage);
	        }
	        return resourceItem;
	    }
	
	    @Data
	    @Builder
	    @AllArgsConstructor
	    @NoArgsConstructor
	    public static class ResourceItem {
	
	        private String resourceAbsolutePathInStorage;
	        private String resourceAbsolutePathInLocal;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api;
	
	import org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.List;
	
	public abstract class AbstractRemoteTask extends AbstractTask {
	
	    /**
	     * constructor
	     *
	     * @param taskExecutionContext taskExecutionContext
	     */
	    protected AbstractRemoteTask(TaskExecutionContext taskExecutionContext) {
	        super(taskExecutionContext);
	    }
	
	    @Override
	    public void cancel() throws TaskException {
	        this.cancelApplication();
	    }
	
	    public abstract List<String> getApplicationIds() throws TaskException;
	
	    public abstract void cancelApplication() throws TaskException;
	
	    /**
	     * If appIds is empty, submit a new remote application; otherwise, just track application status.
	     *
	     * @param taskCallBack
	     * @throws TaskException
	     */
	    @Override
	    public void handle(TaskCallBack taskCallBack) throws TaskException {
	        // if appIds is not empty, just track application status, avoid resubmitting remote task
	        if (StringUtils.isNotEmpty(taskRequest.getAppIds())) {
	            setAppIds(taskRequest.getAppIds());
	            trackApplicationStatus();
	            return;
	        }
	
	        // submit a remote application
	        submitApplication();
	
	        if (StringUtils.isNotEmpty(getAppIds())) {
	            taskRequest.setAppIds(getAppIds());
	            // callback to update remote application info
	            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));
	        }
	
	        // keep tracking application status
	        trackApplicationStatus();
	    }
	
	    /**
	     * submit a new remote application and get application info
	     *
	     * @return
	     * @throws TaskException
	     */
	    public abstract void submitApplication() throws TaskException;
	
	    /**
	     * keep checking application status
	     * @throws TaskException
	     */
	    public abstract void trackApplicationStatus() throws TaskException;
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.loop;
	
	import org.apache.dolphinscheduler.plugin.task.api.AbstractRemoteTask;
	import org.apache.dolphinscheduler.plugin.task.api.TaskCallBack;
	import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
	import org.apache.dolphinscheduler.plugin.task.api.TaskException;
	import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
	import org.apache.dolphinscheduler.plugin.task.api.model.ApplicationInfo;
	import org.apache.dolphinscheduler.plugin.task.api.utils.RetryUtils;
	
	import java.time.Duration;
	
	import javax.annotation.Nullable;
	
	import lombok.NonNull;
	import lombok.extern.slf4j.Slf4j;
	
	/**
	 * This class is the base class for all loop task type.
	 * <p>
	 * The loop task type means, we will submit a task, and loop the task status until the task is finished.
	 */
	@Slf4j
	public abstract class BaseLoopTaskExecutor extends AbstractRemoteTask {
	
	    /**
	     * cancel flag
	     */
	    protected volatile boolean cancel = false;
	
	    /**
	     * The task instance info will be set when task has submitted successful.
	     */
	    protected @Nullable LoopTaskInstanceInfo loopTaskInstanceInfo;
	
	    protected BaseLoopTaskExecutor(@NonNull TaskExecutionContext taskExecutionContext) {
	        super(taskExecutionContext);
	    }
	
	    @Override
	    public void handle(TaskCallBack taskCallBack) throws TaskException {
	        try {
	            final long loopInterval = getTaskInstanceStatusQueryInterval().toMillis();
	            loopTaskInstanceInfo = submitLoopTask();
	            this.setAppIds(loopTaskInstanceInfo.getTaskInstanceId());
	            taskCallBack.updateRemoteApplicationInfo(taskRequest.getTaskInstanceId(), new ApplicationInfo(getAppIds()));
	
	            // loop the task status until the task is finished or task has been canceled.
	            // we use retry utils here to avoid the task status query failure due to network failure.
	            // the default retry policy is 3 times, and the interval is 1 second.
	            LoopTaskInstanceStatus loopTaskInstanceStatus = null;
	            while (!cancel) {
	                loopTaskInstanceStatus = RetryUtils.retryFunction(() -> queryTaskInstanceStatus(loopTaskInstanceInfo));
	                if (loopTaskInstanceStatus.isFinished()) {
	                    break;
	                }
	                Thread.sleep(loopInterval);
	            }
	            if (loopTaskInstanceStatus != null && loopTaskInstanceStatus.isSuccess()) {
	                setExitStatusCode(TaskConstants.EXIT_CODE_SUCCESS);
	                log.info("The task instance: {} execute successfully.", appIds);
	            } else {
	                setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);
	                log.info("The task instance: {} is execute failure.", appIds);
	            }
	        } catch (InterruptedException e) {
	            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);
	            log.error("The current loop thread has been interrupted", e);
	            Thread.currentThread().interrupt();
	            throw new TaskException("The current loop thread has been interrupted");
	        } catch (TaskException ex) {
	            // print the error message with task log.
	            log.error("Loop task execute error", ex);
	            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);
	            throw ex;
	        } catch (Exception ex) {
	            setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);
	            log.error("Loop task execute error", ex);
	            throw new TaskException("Loop task execute error", ex);
	        }
	    }
	
	    /**
	     * Submit the loop task, if submit failed, directly throw exception
	     */
	    public abstract @NonNull LoopTaskInstanceInfo submitLoopTask() throws TaskException;
	
	    /**
	     * Query the loop task status, if query failed, directly throw exception
	     */
	    public abstract @NonNull LoopTaskInstanceStatus queryTaskInstanceStatus(@NonNull LoopTaskInstanceInfo taskInstanceInfo) throws TaskException;
	
	    /**
	     * Get the interval time to query the loop task status
	     */
	    public @NonNull Duration getTaskInstanceStatusQueryInterval() {
	        return TaskConstants.DEFAULT_LOOP_STATUS_INTERVAL;
	    }
	
	    /**
	     * Cancel the loop task, if cancel failed, directly throw exception
	     */
	    public abstract void cancelLoopTaskInstance(@Nullable LoopTaskInstanceInfo taskInstanceInfo) throws TaskException;
	
	    @Override
	    public void cancelApplication() throws TaskException {
	        this.cancel = true;
	        cancelLoopTaskInstance(loopTaskInstanceInfo);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality;
	
	import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
	import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
	import org.apache.dolphinscheduler.plugin.task.api.parameters.dataquality.spark.SparkParameters;
	import org.apache.dolphinscheduler.plugin.task.api.utils.MapUtils;
	
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Map;
	
	import lombok.extern.slf4j.Slf4j;
	
	/**
	 * DataQualityParameters
	 */
	@Slf4j
	public class DataQualityParameters extends AbstractParameters {
	
	    /**
	     * rule id
	     */
	    private int ruleId;
	    /**
	     * rule input entry value map
	     */
	    private Map<String, String> ruleInputParameter;
	    /**
	     * spark parameters
	     */
	    private SparkParameters sparkParameters;
	
	    public int getRuleId() {
	        return ruleId;
	    }
	
	    public void setRuleId(int ruleId) {
	        this.ruleId = ruleId;
	    }
	
	    public Map<String, String> getRuleInputParameter() {
	        return ruleInputParameter;
	    }
	
	    public void setRuleInputParameter(Map<String, String> ruleInputParameter) {
	        this.ruleInputParameter = ruleInputParameter;
	    }
	
	    /**
	     * In this function ,we need more detailed check every parameter,
	     * if the parameter is non-conformant will return false
	     * @return boolean result
	     */
	    @Override
	    public boolean checkParameters() {
	
	        if (ruleId == 0) {
	            log.error("rule id is null");
	            return false;
	        }
	
	        if (MapUtils.isEmpty(ruleInputParameter)) {
	            log.error("rule input parameter is empty");
	            return false;
	        }
	
	        return sparkParameters != null;
	    }
	
	    @Override
	    public List<ResourceInfo> getResourceFilesList() {
	        return new ArrayList<>();
	    }
	
	    public SparkParameters getSparkParameters() {
	        return sparkParameters;
	    }
	
	    public void setSparkParameters(SparkParameters sparkParameters) {
	        this.sparkParameters = sparkParameters;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.utils;
	
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COLON;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DOUBLE_SLASH;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.EQUAL_SIGN;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.QUESTION;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SEMICOLON;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.SINGLE_SLASH;
	import static org.apache.dolphinscheduler.plugin.task.api.utils.DataQualityConstants.MYSQL;
	import static org.apache.dolphinscheduler.plugin.task.api.utils.DataQualityConstants.POSTGRESQL;
	
	import org.apache.dolphinscheduler.plugin.task.api.model.JdbcInfo;
	import org.apache.dolphinscheduler.spi.enums.DbType;
	
	import org.apache.commons.lang3.StringUtils;
	
	import java.util.HashMap;
	import java.util.Map;
	
	/**
	 * JdbcUrlParser
	 */
	public class JdbcUrlParser {
	
	    private JdbcUrlParser() {
	        throw new IllegalStateException("Utility class");
	    }
	
	    public static DbType getDbType(String datasourceType) {
	        switch (datasourceType.toUpperCase()) {
	            case MYSQL:
	                return DbType.MYSQL;
	            case POSTGRESQL:
	                return DbType.POSTGRESQL;
	            default:
	                return null;
	        }
	    }
	
	    public static JdbcInfo getJdbcInfo(String jdbcUrl) {
	
	        JdbcInfo jdbcInfo = new JdbcInfo();
	
	        int pos;
	        int pos1;
	        int pos2;
	        String tempUri;
	
	        if (jdbcUrl == null || !jdbcUrl.startsWith("jdbc:") || (pos1 = jdbcUrl.indexOf(COLON, 5)) == -1) {
	            return null;
	        }
	
	        String driverName = jdbcUrl.substring(5, pos1);
	        String params = "";
	        String host = "";
	        String database = "";
	        String port = "";
	        if (((pos2 = jdbcUrl.indexOf(SEMICOLON, pos1)) == -1) && ((pos2 = jdbcUrl.indexOf(QUESTION, pos1)) == -1)) {
	            tempUri = jdbcUrl.substring(pos1 + 1);
	        } else {
	            tempUri = jdbcUrl.substring(pos1 + 1, pos2);
	            params = jdbcUrl.substring(pos2 + 1);
	        }
	
	        if (tempUri.startsWith(DOUBLE_SLASH)) {
	            if ((pos = tempUri.indexOf(SINGLE_SLASH, 2)) != -1) {
	                host = tempUri.substring(2, pos);
	                database = tempUri.substring(pos + 1);
	
	                if ((pos = host.indexOf(COLON)) != -1) {
	                    port = host.substring(pos + 1);
	                    host = host.substring(0, pos);
	                }
	            }
	        } else {
	            database = tempUri;
	        }
	
	        if (StringUtils.isEmpty(database)) {
	            return null;
	        }
	
	        if (database.contains(QUESTION)) {
	            database = database.substring(0, database.indexOf(QUESTION));
	        }
	
	        if (database.contains(SEMICOLON)) {
	            database = database.substring(0, database.indexOf(SEMICOLON));
	        }
	
	        jdbcInfo.setDriverName(driverName);
	        jdbcInfo.setHost(host);
	        jdbcInfo.setPort(port);
	        jdbcInfo.setDatabase(database);
	
	        if (StringUtils.isNotEmpty(params)) {
	            Map<String, String> others = new HashMap<>();
	            String[] paramList = params.split("&");
	            for (String param : paramList) {
	                // handle bad params
	                if (StringUtils.isEmpty(param) || !param.contains(EQUAL_SIGN)) {
	                    continue;
	                }
	                String[] kv = param.split(EQUAL_SIGN);
	                others.put(kv[0], kv[1]);
	            }
	            jdbcInfo.setParams(others);
	        }
	
	        String address = "jdbc:" + driverName + "://" + host + COLON + port;
	        jdbcInfo.setAddress(address);
	        jdbcInfo.setJdbcUrl(address + SINGLE_SLASH + database);
	
	        return jdbcInfo;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.shell;
	
	import org.apache.dolphinscheduler.common.utils.FileUtils;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import org.apache.commons.collections4.CollectionUtils;
	import org.apache.commons.lang3.StringUtils;
	
	import java.io.IOException;
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.nio.file.Paths;
	import java.nio.file.StandardOpenOption;
	import java.util.ArrayList;
	import java.util.Collection;
	import java.util.Collections;
	import java.util.List;
	import java.util.stream.Collectors;
	
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	public abstract class BaseWindowsShellInterceptorBuilder<T extends BaseWindowsShellInterceptorBuilder<T, Y>, Y extends BaseShellInterceptor>
	        extends
	            BaseShellInterceptorBuilder<T, Y> {
	
	    protected void generateShellScript() throws IOException {
	        List<String> finalScripts = new ArrayList<>();
	        // add shell header
	        finalScripts.add(shellHeader());
	        finalScripts.add("cd /d %~dp0");
	        // add system env
	        finalScripts.addAll(systemEnvScript());
	        // add custom env
	        finalScripts.addAll(customEnvScript());
	        // add k8s config
	        finalScripts.addAll(k8sConfig());
	        // add shell body
	        finalScripts.add(shellBody());
	        // create shell file
	        String finalScript = finalScripts.stream().collect(Collectors.joining(System.lineSeparator()));
	        Path shellAbsolutePath = shellAbsolutePath();
	        FileUtils.createFileWith755(shellAbsolutePath);
	        Files.write(shellAbsolutePath, finalScript.getBytes(), StandardOpenOption.APPEND);
	        log.info("Final Shell file is : 
	{}", finalScript);
	    }
	
	    private String shellBody() {
	        if (CollectionUtils.isEmpty(scripts)) {
	            return StringUtils.EMPTY;
	        }
	        String scriptBody = scripts
	                .stream()
	                .collect(Collectors.joining(System.lineSeparator()));
	        return ParameterUtils.convertParameterPlaceholders(scriptBody, propertyMap);
	    }
	
	    private Collection<String> k8sConfig() {
	        log.warn("k8s config is not supported in windows");
	        return Collections.emptyList();
	    }
	
	    protected List<String> generateBootstrapCommand() {
	        if (sudoEnable) {
	            log.warn("sudo is not supported in windows");
	        }
	        // todo: support tenant in widnows
	        List<String> bootstrapCommand = new ArrayList<>();
	        bootstrapCommand.add(shellInterpreter());
	        bootstrapCommand.add(shellAbsolutePath().toString());
	        return bootstrapCommand;
	    }
	
	    protected abstract String shellHeader();
	
	    protected abstract String shellInterpreter();
	
	    protected abstract String shellExtension();
	
	    private List<String> systemEnvScript() {
	        if (CollectionUtils.isEmpty(systemEnvs)) {
	            return Collections.emptyList();
	        }
	        return systemEnvs.stream()
	                .map(systemEnv -> "call " + systemEnv)
	                .collect(Collectors.toList());
	    }
	
	    private List<String> customEnvScript() {
	        if (CollectionUtils.isEmpty(customEnvScripts)) {
	            return Collections.emptyList();
	        }
	        return customEnvScripts;
	    }
	
	    private Path shellAbsolutePath() {
	        return Paths.get(shellDirectory, shellName + shellExtension());
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseShellInterceptor.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.shell;
	
	import java.io.File;
	import java.io.IOException;
	import java.util.List;
	
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	public abstract class BaseShellInterceptor implements IShellInterceptor {
	
	    protected final String workingDirectory;
	    protected final List<String> executeCommands;
	
	    protected BaseShellInterceptor(List<String> executeCommands, String workingDirectory) {
	        this.executeCommands = executeCommands;
	        this.workingDirectory = workingDirectory;
	    }
	
	    @Override
	    public Process execute() throws IOException {
	        // init process builder
	        ProcessBuilder processBuilder = new ProcessBuilder();
	        // setting up a working directory
	        processBuilder.directory(new File(workingDirectory));
	        // merge error information to standard output stream
	        processBuilder.redirectErrorStream(true);
	        processBuilder.command(executeCommands);
	        log.info("Executing shell command : {}", String.join(" ", executeCommands));
	        return processBuilder.start();
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/log/TaskLogDiscriminator.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.log;
	
	import org.apache.dolphinscheduler.plugin.task.api.utils.LogUtils;
	
	import lombok.extern.slf4j.Slf4j;
	
	import org.slf4j.MDC;
	
	import ch.qos.logback.classic.spi.ILoggingEvent;
	import ch.qos.logback.core.sift.AbstractDiscriminator;
	
	/**
	 * Task Log Discriminator
	 */
	@Slf4j
	public class TaskLogDiscriminator extends AbstractDiscriminator<ILoggingEvent> {
	
	    private String key;
	
	    private String logBase;
	
	    @Override
	    public String getDiscriminatingValue(ILoggingEvent event) {
	        String taskInstanceLogPath = MDC.get(LogUtils.TASK_INSTANCE_LOG_FULL_PATH_MDC_KEY);
	        if (taskInstanceLogPath == null) {
	            log.error("The task instance log path is null, please check the logback configuration, log: {}", event);
	        }
	        return taskInstanceLogPath;
	    }
	
	    @Override
	    public void start() {
	        started = true;
	    }
	
	    @Override
	    public String getKey() {
	        return key;
	    }
	
	    public void setKey(String key) {
	        this.key = key;
	    }
	
	    public String getLogBase() {
	        return logBase;
	    }
	
	    public void setLogBase(String logBase) {
	        this.logBase = logBase;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.utils;
	
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
	import org.apache.dolphinscheduler.plugin.task.api.model.Property;
	
	import java.util.List;
	import java.util.Map;
	import java.util.stream.Collectors;
	
	/**
	 * property utils
	 */
	public class PropertyUtils {
	
	    private PropertyUtils() {
	        throw new IllegalStateException("PropertyUtils class");
	    }
	
	    /**
	     * startParams transform propertyList
	     *
	     * @param startParams startParams
	     * @return startParamList
	     */
	    public static List<Property> startParamsTransformPropertyList(String startParams) {
	        List<Property> startParamList = null;
	        if (startParams != null) {
	            try {
	                Map<String, String> startParamMap = JSONUtils.toMap(startParams);
	                startParamList = startParamMap.entrySet().stream()
	                        .map(entry -> new Property(entry.getKey(), Direct.IN, DataType.VARCHAR, entry.getValue()))
	                        .collect(Collectors.toList());
	            } catch (Exception ignore) {
	                startParamList = JSONUtils.toList(startParams, Property.class);
	            }
	        }
	        return startParamList;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PlaceholderUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parser;
	
	import java.util.Map;
	
	import lombok.extern.slf4j.Slf4j;
	
	/**
	 * placeholder utils
	 */
	@Slf4j
	public class PlaceholderUtils {
	
	    /**
	     * Prefix of the position to be replaced
	     */
	    public static final String PLACEHOLDER_PREFIX = "${";
	
	    /**
	     * The suffix of the position to be replaced
	     */
	
	    public static final String PLACEHOLDER_SUFFIX = "}";
	
	    /**
	     * Replaces all placeholders of format {@code ${name}} with the value returned
	     * from the supplied {@link PropertyPlaceholderHelper.PlaceholderResolver}.
	     *
	     * @param value the value containing the placeholders to be replaced
	     * @param paramsMap placeholder data dictionary
	     * @param ignoreUnresolvablePlaceholders ignoreUnresolvablePlaceholders
	     * @return the supplied value with placeholders replaced inline
	     */
	    public static String replacePlaceholders(String value,
	                                             Map<String, String> paramsMap,
	                                             boolean ignoreUnresolvablePlaceholders) {
	        // replacement tool， parameter key will be replaced by value,if can't match , will throw an exception
	        PropertyPlaceholderHelper strictHelper = getPropertyPlaceholderHelper(false);
	
	        // Non-strict replacement tool implementation, when the position to be replaced does not get the corresponding
	        // value, the current position is ignored, and the next position is replaced.
	        PropertyPlaceholderHelper nonStrictHelper = getPropertyPlaceholderHelper(true);
	
	        PropertyPlaceholderHelper helper = (ignoreUnresolvablePlaceholders ? nonStrictHelper : strictHelper);
	
	        // the PlaceholderResolver to use for replacement
	        return helper.replacePlaceholders(value, new PropertyPlaceholderResolver(value, paramsMap));
	    }
	
	    /**
	     * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.
	     * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should
	     * be ignored ({@code true}) or cause an exception ({@code false})
	     * @return PropertyPlaceholderHelper
	     */
	    public static PropertyPlaceholderHelper getPropertyPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {
	
	        return new PropertyPlaceholderHelper(PLACEHOLDER_PREFIX, PLACEHOLDER_SUFFIX, null,
	                ignoreUnresolvablePlaceholders);
	    }
	
	    /**
	     * Placeholder replacement resolver
	     */
	    private static class PropertyPlaceholderResolver implements PropertyPlaceholderHelper.PlaceholderResolver {
	
	        private final String value;
	
	        private final Map<String, String> paramsMap;
	
	        public PropertyPlaceholderResolver(String value, Map<String, String> paramsMap) {
	            this.value = value;
	            this.paramsMap = paramsMap;
	        }
	
	        @Override
	        public String resolvePlaceholder(String placeholderName) {
	            try {
	                return paramsMap.get(placeholderName);
	            } catch (Exception ex) {
	                log.error("resolve placeholder '{}' in [ {} ]", placeholderName, value, ex);
	                return null;
	            }
	        }
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.parameters;
	
	import org.apache.dolphinscheduler.plugin.task.api.enums.DependentRelation;
	import org.apache.dolphinscheduler.plugin.task.api.model.DependentTaskModel;
	
	import org.apache.commons.collections4.CollectionUtils;
	
	import java.util.List;
	
	import lombok.AllArgsConstructor;
	import lombok.Builder;
	import lombok.Data;
	import lombok.NoArgsConstructor;
	
	@Data
	@Builder
	@NoArgsConstructor
	@AllArgsConstructor
	public class ConditionsParameters extends AbstractParameters {
	
	    private ConditionDependency dependence;
	
	    private ConditionResult conditionResult;
	
	    @Override
	    public boolean checkParameters() {
	        if (dependence == null || CollectionUtils.isEmpty(dependence.getDependTaskList())) {
	            return false;
	        }
	        if (conditionResult == null || CollectionUtils.isEmpty(conditionResult.getSuccessNode())
	                || CollectionUtils.isEmpty(conditionResult.getFailedNode())) {
	            return false;
	        }
	        return true;
	    }
	
	    @Data
	    @Builder
	    @NoArgsConstructor
	    @AllArgsConstructor
	    public static class ConditionDependency {
	
	        private List<DependentTaskModel> dependTaskList;
	
	        private DependentRelation relation;
	    }
	
	    @Data
	    @Builder
	    @NoArgsConstructor
	    @AllArgsConstructor
	    public static class ConditionResult {
	
	        private boolean conditionSuccess;
	
	        private List<Long> successNode;
	
	        private List<Long> failedNode;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.model;
	
	import org.apache.dolphinscheduler.plugin.task.api.enums.DependResult;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import lombok.Data;
	
	/**
	 * dependent item
	 */
	@Data
	public class DependentItem {
	
	    private long projectCode;
	    private long definitionCode;
	    private long depTaskCode;
	    private String cycle;
	    private String dateValue;
	    private DependResult dependResult;
	    private TaskExecutionStatus status;
	    private Boolean parameterPassing = false;
	
	    public String getKey() {
	        return String.format("%d-%d-%s-%s",
	                getDefinitionCode(),
	                getDepTaskCode(),
	                getCycle(),
	                getDateValue());
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.utils;
	
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.LOG_LINES;
	
	import org.apache.dolphinscheduler.plugin.task.api.TaskException;
	
	import java.util.List;
	
	import lombok.extern.slf4j.Slf4j;
	import io.fabric8.kubernetes.api.model.Pod;
	import io.fabric8.kubernetes.api.model.batch.v1.Job;
	import io.fabric8.kubernetes.client.Config;
	import io.fabric8.kubernetes.client.KubernetesClient;
	import io.fabric8.kubernetes.client.KubernetesClientBuilder;
	import io.fabric8.kubernetes.client.Watch;
	import io.fabric8.kubernetes.client.Watcher;
	
	@Slf4j
	public class K8sUtils {
	
	    private KubernetesClient client;
	
	    public void createJob(String namespace, Job job) {
	        try {
	            client.batch()
	                    .v1()
	                    .jobs()
	                    .inNamespace(namespace)
	                    .create(job);
	        } catch (Exception e) {
	            throw new TaskException("fail to create job", e);
	        }
	    }
	
	    public void deleteJob(String jobName, String namespace) {
	        try {
	            client.batch()
	                    .v1()
	                    .jobs()
	                    .inNamespace(namespace)
	                    .withName(jobName)
	                    .delete();
	        } catch (Exception e) {
	            throw new TaskException("fail to delete job", e);
	        }
	    }
	
	    public Boolean jobExist(String jobName, String namespace) {
	        try {
	            Job job = client.batch().v1().jobs().inNamespace(namespace).withName(jobName).get();
	            return job != null;
	        } catch (Exception e) {
	            throw new TaskException("fail to check job: ", e);
	        }
	    }
	
	    public Watch createBatchJobWatcher(String jobName, Watcher<Job> watcher) {
	        try {
	            return client.batch()
	                    .v1()
	                    .jobs()
	                    .withName(jobName)
	                    .watch(watcher);
	        } catch (Exception e) {
	            throw new TaskException("fail to register batch job watcher", e);
	        }
	    }
	
	    public String getPodLog(String jobName, String namespace) {
	        try {
	            List<Pod> podList = client.pods().inNamespace(namespace).list().getItems();
	            String podName = null;
	            for (Pod pod : podList) {
	                podName = pod.getMetadata().getName();
	                if (podName.contains("-") && jobName.equals(podName.substring(0, podName.lastIndexOf("-")))) {
	                    break;
	                }
	            }
	            return client.pods().inNamespace(namespace)
	                    .withName(podName)
	                    .tailingLines(LOG_LINES)
	                    .getLog(Boolean.TRUE);
	        } catch (Exception e) {
	            log.error("fail to getPodLog", e);
	            log.error("response bodies : {}", e.getMessage());
	        }
	        return null;
	    }
	
	    public void buildClient(String configYaml) {
	        try {
	            Config config = Config.fromKubeconfig(configYaml);
	            client = new KubernetesClientBuilder().withConfig(config).build();
	        } catch (Exception e) {
	            throw new TaskException("fail to build k8s ApiClient", e);
	        }
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.utils;
	
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.APPID_COLLECT;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COMMA;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DEFAULT_COLLECT_WAY;
	import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_SET_K8S;
	
	import org.apache.dolphinscheduler.common.utils.OSUtils;
	import org.apache.dolphinscheduler.common.utils.PropertyUtils;
	import org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext;
	import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
	import org.apache.dolphinscheduler.plugin.task.api.TaskException;
	import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
	import org.apache.dolphinscheduler.plugin.task.api.am.ApplicationManager;
	import org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManager;
	import org.apache.dolphinscheduler.plugin.task.api.am.KubernetesApplicationManagerContext;
	import org.apache.dolphinscheduler.plugin.task.api.am.YarnApplicationManagerContext;
	import org.apache.dolphinscheduler.plugin.task.api.enums.ResourceManagerType;
	import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
	
	import org.apache.commons.collections4.CollectionUtils;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.commons.lang3.SystemUtils;
	
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.HashMap;
	import java.util.List;
	import java.util.Map;
	import java.util.Objects;
	import java.util.ServiceLoader;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	
	import lombok.NonNull;
	import lombok.extern.slf4j.Slf4j;
	import io.fabric8.kubernetes.client.dsl.LogWatch;
	
	@Slf4j
	public final class ProcessUtils {
	
	    private ProcessUtils() {
	        throw new IllegalStateException("Utility class");
	    }
	
	    private static final Map<ResourceManagerType, ApplicationManager> applicationManagerMap = new HashMap<>();
	
	    static {
	        ServiceLoader.load(ApplicationManager.class)
	                .forEach(applicationManager -> applicationManagerMap.put(applicationManager.getResourceManagerType(),
	                        applicationManager));
	    }
	
	    /**
	     * Initialization regularization, solve the problem of pre-compilation performance,
	     * avoid the thread safety problem of multi-thread operation
	     */
	    private static final Pattern MACPATTERN = Pattern.compile("-[+|-][-|=]\\s(\\d+)");
	
	    /**
	     * Expression of PID recognition in Windows scene
	     */
	    private static final Pattern WINDOWSPATTERN = Pattern.compile("(\\d+)");
	
	    /**
	     * Expression of PID recognition in Linux scene
	     */
	    private static final Pattern LINUXPATTERN = Pattern.compile("\\((\\d+)\\)");
	
	    /**
	     * kill tasks according to different task types.
	     */
	    @Deprecated
	    public static boolean kill(@NonNull TaskExecutionContext request) {
	        try {
	            log.info("Begin kill task instance, processId: {}", request.getProcessId());
	            int processId = request.getProcessId();
	            if (processId == 0) {
	                log.error("Task instance kill failed, processId is not exist");
	                return false;
	            }
	
	            String cmd = String.format("kill -9 %s", getPidsStr(processId));
	            cmd = OSUtils.getSudoCmd(request.getTenantCode(), cmd);
	            log.info("process id:{}, cmd:{}", processId, cmd);
	
	            OSUtils.exeCmd(cmd);
	            log.info("Success kill task instance, processId: {}", request.getProcessId());
	            return true;
	        } catch (Exception e) {
	            log.error("Kill task instance error, processId: {}", request.getProcessId(), e);
	            return false;
	        }
	    }
	
	    /**
	     * get pids str.
	     *
	     * @param processId process id
	     * @return pids pid String
	     * @throws Exception exception
	     */
	    public static String getPidsStr(int processId) throws Exception {
	
	        String rawPidStr;
	
	        // pstree pid get sub pids
	        if (SystemUtils.IS_OS_MAC) {
	            rawPidStr = OSUtils.exeCmd(String.format("%s -sp %d", TaskConstants.PSTREE, processId));
	        } else if (SystemUtils.IS_OS_LINUX) {
	            rawPidStr = OSUtils.exeCmd(String.format("%s -p %d", TaskConstants.PSTREE, processId));
	        } else {
	            rawPidStr = OSUtils.exeCmd(String.format("%s -p %d", TaskConstants.PSTREE, processId));
	        }
	
	        return parsePidStr(rawPidStr);
	    }
	
	    public static String parsePidStr(String rawPidStr) {
	
	        log.info("prepare to parse pid, raw pid string: {}", rawPidStr);
	        ArrayList<String> allPidList = new ArrayList<>();
	        Matcher mat = null;
	        if (SystemUtils.IS_OS_MAC) {
	            if (StringUtils.isNotEmpty(rawPidStr)) {
	                mat = MACPATTERN.matcher(rawPidStr);
	            }
	        } else if (SystemUtils.IS_OS_LINUX) {
	            if (StringUtils.isNotEmpty(rawPidStr)) {
	                mat = LINUXPATTERN.matcher(rawPidStr);
	            }
	        } else {
	            if (StringUtils.isNotEmpty(rawPidStr)) {
	                mat = WINDOWSPATTERN.matcher(rawPidStr);
	            }
	        }
	        if (null != mat) {
	            while (mat.find()) {
	                allPidList.add(mat.group(1));
	            }
	        }
	        return String.join(" ", allPidList).trim();
	    }
	
	    /**
	     * cancel k8s / yarn application
	     *
	     * @param taskExecutionContext
	     * @return
	     */
	    public static void cancelApplication(TaskExecutionContext taskExecutionContext) {
	        try {
	            if (Objects.nonNull(taskExecutionContext.getK8sTaskExecutionContext())) {
	                if (!TASK_TYPE_SET_K8S.contains(taskExecutionContext.getTaskType())) {
	                    // Set empty container name for Spark on K8S task
	                    applicationManagerMap.get(ResourceManagerType.KUBERNETES)
	                            .killApplication(new KubernetesApplicationManagerContext(
	                                    taskExecutionContext.getK8sTaskExecutionContext(),
	                                    taskExecutionContext.getTaskAppId(), ""));
	                }
	            } else {
	                String host = taskExecutionContext.getHost();
	                String executePath = taskExecutionContext.getExecutePath();
	                String tenantCode = taskExecutionContext.getTenantCode();
	                List<String> appIds;
	                if (StringUtils.isNotEmpty(taskExecutionContext.getAppIds())) {
	                    // is failover
	                    appIds = Arrays.asList(taskExecutionContext.getAppIds().split(COMMA));
	                } else {
	                    String logPath = taskExecutionContext.getLogPath();
	                    String appInfoPath = taskExecutionContext.getAppInfoPath();
	                    if (logPath == null || appInfoPath == null || executePath == null || tenantCode == null) {
	                        log.error(
	                                "Kill yarn job error, the input params is illegal, host: {}, logPath: {}, appInfoPath: {}, executePath: {}, tenantCode: {}",
	                                host, logPath, appInfoPath, executePath, tenantCode);
	                        throw new TaskException("Cancel application failed!");
	                    }
	                    log.info("Get appIds from worker {}, taskLogPath: {}", host, logPath);
	                    appIds = LogUtils.getAppIds(logPath, appInfoPath,
	                            PropertyUtils.getString(APPID_COLLECT, DEFAULT_COLLECT_WAY));
	                    taskExecutionContext.setAppIds(String.join(TaskConstants.COMMA, appIds));
	                }
	                if (CollectionUtils.isEmpty(appIds)) {
	                    log.info("The appId is empty");
	                    return;
	                }
	                ApplicationManager applicationManager = applicationManagerMap.get(ResourceManagerType.YARN);
	                applicationManager.killApplication(new YarnApplicationManagerContext(executePath, tenantCode, appIds));
	            }
	        } catch (Exception e) {
	            log.error("Cancel application failed: {}", e.getMessage());
	        }
	    }
	
	    /**
	     * get k8s application status
	     *
	     * @param k8sTaskExecutionContext
	     * @param taskAppId
	     * @return
	     */
	    public static TaskExecutionStatus getApplicationStatus(K8sTaskExecutionContext k8sTaskExecutionContext,
	                                                           String taskAppId) {
	        if (Objects.isNull(k8sTaskExecutionContext)) {
	            return TaskExecutionStatus.SUCCESS;
	        }
	        KubernetesApplicationManager applicationManager =
	                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);
	        return applicationManager
	                .getApplicationStatus(new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId, ""));
	    }
	
	    /**
	     * get driver pod logs
	     *
	     * @param k8sTaskExecutionContext
	     * @param taskAppId
	     * @return
	     */
	    public static LogWatch getPodLogWatcher(K8sTaskExecutionContext k8sTaskExecutionContext, String taskAppId,
	                                            String containerName) {
	        KubernetesApplicationManager applicationManager =
	                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);
	
	        return applicationManager
	                .getPodLogWatcher(
	                        new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId, containerName));
	    }
	
	    public static void removeK8sClientCache(String taskAppId) {
	        KubernetesApplicationManager applicationManager =
	                (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);
	        applicationManager.removeCache(taskAppId);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.shell;
	
	import org.apache.dolphinscheduler.common.utils.FileUtils;
	import org.apache.dolphinscheduler.common.utils.PropertyUtils;
	import org.apache.dolphinscheduler.plugin.task.api.utils.AbstractCommandExecutorConstants;
	import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
	
	import org.apache.commons.collections4.CollectionUtils;
	import org.apache.commons.lang3.StringUtils;
	
	import java.io.IOException;
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.nio.file.Paths;
	import java.nio.file.StandardOpenOption;
	import java.util.ArrayList;
	import java.util.Collections;
	import java.util.List;
	import java.util.stream.Collectors;
	
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	public abstract class BaseLinuxShellInterceptorBuilder<T extends BaseLinuxShellInterceptorBuilder<T, Y>, Y extends BaseShellInterceptor>
	        extends
	            BaseShellInterceptorBuilder<T, Y> {
	
	    protected void generateShellScript() throws IOException {
	        List<String> finalScripts = new ArrayList<>();
	        // add shell header
	        finalScripts.add(shellHeader());
	        finalScripts.add("BASEDIR=$(cd `dirname $0`; pwd)");
	        finalScripts.add("cd $BASEDIR");
	        // add system env
	        finalScripts.addAll(systemEnvScript());
	        // add custom env
	        finalScripts.addAll(customEnvScript());
	        // add k8s config
	        finalScripts.addAll(k8sConfig());
	        // add shell body
	        finalScripts.add(shellBody());
	        // create shell file
	        String finalScript = finalScripts.stream().collect(Collectors.joining(System.lineSeparator()));
	        Path shellAbsolutePath = shellAbsolutePath();
	        FileUtils.createFileWith755(shellAbsolutePath);
	        Files.write(shellAbsolutePath, finalScript.getBytes(), StandardOpenOption.APPEND);
	        log.info(
	                "Final Shell file is: 
	****************************** Script Content *****************************************************************"
	                        +
	                        "{}" +
	                        "
	****************************** Script Content *****************************************************************",
	                finalScript);
	    }
	
	    protected List<String> generateBootstrapCommand() {
	        if (sudoEnable) {
	            return bootstrapCommandInSudoMode();
	        }
	        return bootstrapCommandInNormalMode();
	    }
	
	    protected abstract String shellHeader();
	
	    protected abstract String shellInterpreter();
	
	    protected abstract String shellExtension();
	
	    private List<String> systemEnvScript() {
	        if (CollectionUtils.isEmpty(systemEnvs)) {
	            return Collections.emptyList();
	        }
	        return systemEnvs
	                .stream()
	                .map(systemEnv -> "source " + systemEnv).collect(Collectors.toList());
	    }
	
	    private List<String> customEnvScript() {
	        if (CollectionUtils.isEmpty(customEnvScripts)) {
	            return Collections.emptyList();
	        }
	        return customEnvScripts;
	    }
	
	    private List<String> k8sConfig() throws IOException {
	        if (StringUtils.isEmpty(k8sConfigYaml)) {
	            return Collections.emptyList();
	        }
	        Path kubeConfigPath = Paths.get(FileUtils.getKubeConfigPath(shellDirectory));
	        FileUtils.createFileWith755(kubeConfigPath);
	        Files.write(kubeConfigPath, k8sConfigYaml.getBytes(), StandardOpenOption.APPEND);
	        log.info("Created kubernetes configuration file: {}.", kubeConfigPath);
	        return Collections.singletonList("export KUBECONFIG=" + kubeConfigPath);
	    }
	
	    private String shellBody() {
	        if (CollectionUtils.isEmpty(scripts)) {
	            return StringUtils.EMPTY;
	        }
	        String scriptBody = scripts
	                .stream()
	                .collect(Collectors.joining(System.lineSeparator()));
	        scriptBody = scriptBody.replaceAll("\\r\
	", System.lineSeparator());
	        return ParameterUtils.convertParameterPlaceholders(scriptBody, propertyMap);
	    }
	
	    private Path shellAbsolutePath() {
	        return Paths.get(shellDirectory, shellName + shellExtension());
	    }
	
	    private List<String> bootstrapCommandInSudoMode() {
	        if (PropertyUtils.getBoolean(AbstractCommandExecutorConstants.TASK_RESOURCE_LIMIT_STATE, false)) {
	            return bootstrapCommandInResourceLimitMode();
	        }
	        List<String> bootstrapCommand = new ArrayList<>();
	        bootstrapCommand.add("sudo");
	        if (StringUtils.isNotBlank(runUser)) {
	            bootstrapCommand.add("-u");
	            bootstrapCommand.add(runUser);
	        }
	        bootstrapCommand.add("-i");
	        bootstrapCommand.add(shellAbsolutePath().toString());
	        return bootstrapCommand;
	    }
	
	    private List<String> bootstrapCommandInNormalMode() {
	        List<String> bootstrapCommand = new ArrayList<>();
	        bootstrapCommand.add(shellInterpreter());
	        bootstrapCommand.add(shellAbsolutePath().toString());
	        return bootstrapCommand;
	    }
	
	    private List<String> bootstrapCommandInResourceLimitMode() {
	        List<String> bootstrapCommand = new ArrayList<>();
	        bootstrapCommand.add("sudo");
	        bootstrapCommand.add("systemd-run");
	        bootstrapCommand.add("-q");
	        bootstrapCommand.add("--scope");
	
	        if (cpuQuota == -1) {
	            bootstrapCommand.add("-p");
	            bootstrapCommand.add("CPUQuota=");
	        } else {
	            bootstrapCommand.add("-p");
	            bootstrapCommand.add(String.format("CPUQuota=%s%%", cpuQuota));
	        }
	
	        // use `man systemd.resource-control` to find available parameter
	        if (memoryQuota == -1) {
	            bootstrapCommand.add("-p");
	            bootstrapCommand.add(String.format("MemoryLimit=%s", "infinity"));
	        } else {
	            bootstrapCommand.add("-p");
	            bootstrapCommand.add(String.format("MemoryLimit=%sM", memoryQuota));
	        }
	
	        bootstrapCommand.add(String.format("--uid=%s", runUser));
	        return bootstrapCommand;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *    http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.dolphinscheduler.plugin.task.api.utils;
	
	import org.apache.dolphinscheduler.common.utils.JSONUtils;
	import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
	import org.apache.dolphinscheduler.plugin.task.api.model.Property;
	
	import org.apache.commons.collections4.CollectionUtils;
	
	import java.util.ArrayList;
	import java.util.HashMap;
	import java.util.List;
	import java.util.Map;
	import java.util.stream.Collectors;
	
	import lombok.experimental.UtilityClass;
	import lombok.extern.slf4j.Slf4j;
	
	@Slf4j
	@UtilityClass
	public class VarPoolUtils {
	
	    public List<Property> deserializeVarPool(String varPoolJson) {
	        return JSONUtils.toList(varPoolJson, Property.class);
	    }
	
	    /**
	     * @see #mergeVarPool(List)
	     */
	    public String mergeVarPoolJsonString(List<String> varPoolJsons) {
	        if (CollectionUtils.isEmpty(varPoolJsons)) {
	            return null;
	        }
	        List<List<Property>> varPools = varPoolJsons.stream()
	                .map(VarPoolUtils::deserializeVarPool)
	                .collect(Collectors.toList());
	        List<Property> finalVarPool = mergeVarPool(varPools);
	        return JSONUtils.toJsonString(finalVarPool);
	    }
	
	    /**
	     * Merge the given two varpools, and return the merged varpool.
	     * If the two varpools have the same property({@link Property#getProp()} and {@link Property#getDirect()} is same), the value of the property in varpool2 will be used.
	     * // todo: we may need to consider the datatype of the property
	     */
	    public List<Property> mergeVarPool(List<List<Property>> varPools) {
	        if (CollectionUtils.isEmpty(varPools)) {
	            return null;
	        }
	        if (varPools.size() == 1) {
	            return varPools.get(0);
	        }
	        Map<String, Property> result = new HashMap<>();
	        for (List<Property> varPool : varPools) {
	            if (CollectionUtils.isEmpty(varPool)) {
	                continue;
	            }
	            for (Property property : varPool) {
	                if (!Direct.OUT.equals(property.getDirect())) {
	                    log.info("The direct should be OUT in varPool, but got {}", property.getDirect());
	                    continue;
	                }
	                result.put(property.getProp(), property);
	            }
	        }
	        return new ArrayList<>(result.values());
	    }
	
	    public String subtractVarPoolJson(String varPool, List<String> subtractVarPool) {
	        List<Property> varPoolList = deserializeVarPool(varPool);
	        List<List<Property>> subtractVarPoolList = subtractVarPool.stream()
	                .map(VarPoolUtils::deserializeVarPool)
	                .collect(Collectors.toList());
	        List<Property> finalVarPool = subtractVarPool(varPoolList, subtractVarPoolList);
	        return JSONUtils.toJsonString(finalVarPool);
	    }
	
	    /**
	     * Return the subtracted varpool, which key is in varPool but not in subtractVarPool.
	     */
	    public List<Property> subtractVarPool(List<Property> varPool, List<List<Property>> subtractVarPool) {
	        if (CollectionUtils.isEmpty(varPool)) {
	            return null;
	        }
	        if (CollectionUtils.isEmpty(subtractVarPool)) {
	            return varPool;
	        }
	        Map<String, Property> subtractVarPoolMap = new HashMap<>();
	        for (List<Property> properties : subtractVarPool) {
	            for (Property property : properties) {
	                subtractVarPoolMap.put(property.getProp(), property);
	            }
	        }
	        List<Property> result = new ArrayList<>();
	        for (Property property : varPool) {
	            if (!subtractVarPoolMap.containsKey(property.getProp())) {
	                result.add(property);
	            }
	        }
	        return result;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java:
			[
				fromLine:"				27",
				toLine:"				27",
				oldContent:"
				    private AlertGroup alertGroup;				
",
				newContent:"
				    private Integer alertGroupId;				
",
,
				fromLine:"				33",
				toLine:"				33",
				oldContent:"
				        return alertGroup.getId();				
",
				newContent:"
				        return alertGroupId;				
",
,
				fromLine:"				37",
				toLine:"				37",
				oldContent:"
				        this.alertGroup = new AlertGroup(alertGroupId);				
",
				newContent:"
				        this.alertGroupId = alertGroupId;				
",
,

			],
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.3:compile (default-compile) on project dolphinscheduler-api: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ScheduleRequest.java:[10,13] cannot find symbol
	[ERROR]   symbol:   class WarningType
	[ERROR]   location: class org.apache.dolphinscheduler.api.controller.ScheduleRequest
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ScheduleRequest.java:[12,13] cannot find symbol
	[ERROR]   symbol:   class FailureStrategy
	[ERROR]   location: class org.apache.dolphinscheduler.api.controller.ScheduleRequest
	[ERROR] /root/data_clump_solver/cloned_projects/dolphinscheduler/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ScheduleRequest.java:[13,13] cannot find symbol
	[ERROR]   symbol:   class Priority
	[ERROR]   location: class org.apache.dolphinscheduler.api.controller.ScheduleRequest
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :dolphinscheduler-api
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ScheduleRequest.java
	package org.apache.dolphinscheduler.api.controller;
	
	import org.apache.dolphinscheduler.dao.entity.User;
	
	public class ScheduleRequest {
	    private User loginUser;
	    private long projectCode;
	    private long workflowDefinitionCode;
	    private String schedule;
	    private WarningType warningType;
	    private int warningGroupId;
	    private FailureStrategy failureStrategy;
	    private Priority workflowInstancePriority;
	    private String workerGroup;
	    private String tenantCode;
	    private Long environmentCode;
	
	    // constructor, getters and setters
	}
		
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.1",
