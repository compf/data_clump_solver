"{
    "refactorings": {
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java": [
            {
                "fromLine": 22,
                "toLine": 22,
                "oldContent": "import org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo;",
                "newContent": "// import org.apache.dolphinscheduler.plugin.task.api.model.TaskAlertInfo;"
            },
            {
                "fromLine": 63,
                "toLine": 63,
                "oldContent": "    protected TaskAlertInfo taskAlertInfo;",
                "newContent": "//    protected TaskAlertInfo taskAlertInfo;"
            },
            {
                "fromLine": 122,
                "toLine": 122,
                "oldContent": "    protected TaskAlertInfo taskAlertInfo;",
                "newContent": "//    protected TaskAlertInfo taskAlertInfo;"
            },
            {
                "fromLine": 126,
                "toLine": 126,
                "oldContent": "    public TaskAlertInfo getTaskAlertInfo() {",
                "newContent": "//    public TaskAlertInfo getTaskAlertInfo() {"
            },
            {
                "fromLine": 130,
                "toLine": 130,
                "oldContent": "    public void setTaskAlertInfo(TaskAlertInfo taskAlertInfo) {",
                "newContent": "//    public void setTaskAlertInfo(TaskAlertInfo taskAlertInfo) {"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java": [
            {
                "fromLine": 1,
                "toLine": 1,
                "oldContent": "class TaskAlertInfo {",
                "newContent": "// class TaskAlertInfo {"
            },
            {
                "fromLine": 2,
                "toLine": 2,
                "oldContent": "    private String title;",
                "newContent": "//    private String title;"
            },
            {
                "fromLine": 3,
                "toLine": 3,
                "oldContent": "    private String content;",
                "newContent": "//    private String content;"
            },
            {
                "fromLine": 4,
                "toLine": 4,
                "oldContent": "    private Integer alertGroupId;",
                "newContent": "//    private Integer alertGroupId;"
            },
            {
                "fromLine": 6,
                "toLine": 6,
                "oldContent": "    // Constructor, getters, and setters",
                "newContent": "//    // Constructor, getters, and setters"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/TimePlaceholderUtils.java": [
            {
                "fromLine": 326,
                "toLine": 326,
                "oldContent": "                log.error(\"resolve placeholder '{}' in [ {} ]\", placeholderName, value, ex);",
                "newContent": "//                log.error(\"resolve placeholder '{}' in [ {} ]\", placeholderName, value, ex);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java": [
            {
                "fromLine": 161,
                "toLine": 161,
                "oldContent": "                    log.trace(\"Resolved placeholder '\" + placeholder + \"'\");",
                "newContent": "//                    log.trace(\"Resolved placeholder '\" + placeholder + \"'\");"
            },
            {
                "fromLine": 162,
                "toLine": 162,
                "oldContent": "                    startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());",
                "newContent": "//                    startIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java": [
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "                localParametersMaps.put(property.getProp(), property);",
                "newContent": "//                localParametersMaps.put(property.getProp(), property);"
            },
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "        k8sTaskExecutionContext.setConnectionParams(",
                "newContent": "//        k8sTaskExecutionContext.setConnectionParams("
            },
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "                if (property.getDirect() == null || Objects.equals(Direct.IN, property.getDirect())) {",
                "newContent": "//                if (property.getDirect() == null || Objects.equals(Direct.IN, property.getDirect())) {"
            },
            {
                "fromLine": 97,
                "toLine": 97,
                "oldContent": "                    localParametersMaps.put(property.getProp(), property);",
                "newContent": "//                    localParametersMaps.put(property.getProp(), property);"
            },
            {
                "fromLine": 113,
                "toLine": 113,
                "oldContent": "                varPoolMap.put(property.getProp(), property);",
                "newContent": "//                varPoolMap.put(property.getProp(), property);"
            },
            {
                "fromLine": 135,
                "toLine": 135,
                "oldContent": "                if (value != null) {",
                "newContent": "//                if (value != null) {"
            },
            {
                "fromLine": 137,
                "toLine": 137,
                "oldContent": "                    info.setValue(value);",
                "newContent": "//                    info.setValue(value);"
            },
            {
                "fromLine": 142,
                "toLine": 142,
                "oldContent": "        varPool = VarPoolUtils.mergeVarPool(Lists.newArrayList(varPool, outProperty));",
                "newContent": "//        varPool = VarPoolUtils.mergeVarPool(Lists.newArrayList(varPool, outProperty));"
            },
            {
                "fromLine": 150,
                "toLine": 150,
                "oldContent": "                if (info.getDirect() == Direct.OUT) {",
                "newContent": "//                if (info.getDirect() == Direct.OUT) {"
            },
            {
                "fromLine": 169,
                "toLine": 169,
                "oldContent": "                if (!Direct.OUT.equals(property.getDirect())) {",
                "newContent": "//                if (!Direct.OUT.equals(property.getDirect())) {"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java": [
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "        resourceItemMap.put(resourceItem.getResourceAbsolutePathInStorage(), resourceItem);",
                "newContent": "//        resourceItemMap.put(resourceItem.getResourceAbsolutePathInStorage(), resourceItem);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractRemoteTask.java": [
            {
                "fromLine": 55,
                "toLine": 55,
                "oldContent": "    protected abstract List<String> getApplicationIds() throws TaskException;",
                "newContent": "//    protected abstract List<String> getApplicationIds() throws TaskException;"
            },
            {
                "fromLine": 56,
                "toLine": 56,
                "oldContent": "    protected abstract void cancelApplication() throws TaskException;",
                "newContent": "//    protected abstract void cancelApplication() throws TaskException;"
            },
            {
                "fromLine": 65,
                "toLine": 65,
                "oldContent": "    public abstract void submitApplication() throws TaskException;",
                "newContent": "//    public abstract void submitApplication() throws TaskException;"
            },
            {
                "fromLine": 67,
                "toLine": 67,
                "oldContent": "    public abstract void trackApplicationStatus() throws TaskException;",
                "newContent": "//    public abstract void trackApplicationStatus() throws TaskException;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/BaseLoopTaskExecutor.java": [
            {
                "fromLine": 63,
                "toLine": 63,
                "oldContent": "    protected abstract @NonNull LoopTaskInstanceInfo submitLoopTask() throws TaskException;",
                "newContent": "//    protected abstract @NonNull LoopTaskInstanceInfo submitLoopTask() throws TaskException;"
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "    public abstract void cancelLoopTaskInstance(@Nullable LoopTaskInstanceInfo taskInstanceInfo) throws TaskException;",
                "newContent": "//    public abstract void cancelLoopTaskInstance(@Nullable LoopTaskInstanceInfo taskInstanceInfo) throws TaskException;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/dataquality/DataQualityParameters.java": [
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "    private int ruleId;",
                "newContent": "//    private int ruleId;"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "        if (ruleId == 0) {",
                "newContent": "//        if (ruleId == 0) {"
            },
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "        return sparkParameters != null;",
                "newContent": "//        return sparkParameters != null;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/JdbcUrlParser.java": [
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "        jdbcInfo.setDriverName(driverName);",
                "newContent": "//        jdbcInfo.setDriverName(driverName);"
            },
            {
                "fromLine": 109,
                "toLine": 109,
                "oldContent": "        jdbcInfo.setHost(host);",
                "newContent": "//        jdbcInfo.setHost(host);"
            },
            {
                "fromLine": 110,
                "toLine": 110,
                "oldContent": "        jdbcInfo.setPort(port);",
                "newContent": "//        jdbcInfo.setPort(port);"
            },
            {
                "fromLine": 111,
                "toLine": 111,
                "oldContent": "        jdbcInfo.setDatabase(database);",
                "newContent": "//        jdbcInfo.setDatabase(database);"
            },
            {
                "fromLine": 124,
                "toLine": 124,
                "oldContent": "        jdbcInfo.setParams(others);",
                "newContent": "//        jdbcInfo.setParams(others);"
            },
            {
                "fromLine": 128,
                "toLine": 128,
                "oldContent": "        jdbcInfo.setAddress(address);",
                "newContent": "//        jdbcInfo.setAddress(address);"
            },
            {
                "fromLine": 129,
                "toLine": 129,
                "oldContent": "        jdbcInfo.setJdbcUrl(address + SINGLE_SLASH + database);",
                "newContent": "//        jdbcInfo.setJdbcUrl(address + SINGLE_SLASH + database);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseWindowsShellInterceptorBuilder.java": [
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "        log.info(\"Final Shell file is : \n{}\", finalScript);",
                "newContent": "//        log.info(\"Final Shell file is : \n{}\", finalScript);"
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "            log.warn(\"sudo is not supported in windows\");",
                "newContent": "//            log.warn(\"sudo is not supported in windows\");"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "        log.info(\"Executing shell command : {}\", String.join(\" \", executeCommands));",
                "newContent": "//        log.info(\"Executing shell command : {}\", String.join(\" \", executeCommands));"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseShellInterceptor.java": [
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        log.info(\"Executing shell command : {}\", String.join(\" \", executeCommands));",
                "newContent": "//        log.info(\"Executing shell command : {}\", String.join(\" \", executeCommands));"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/log/TaskLogDiscriminator.java": [
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "        log.error(\"The task instance log path is null, please check the logback configuration, log: {}\", event);",
                "newContent": "//        log.error(\"The task instance log path is null, please check the logback configuration, log: {}\", event);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/PropertyUtils.java": [
            {
                "fromLine": 50,
                "toLine": 50,
                "oldContent": "                        .map(entry -> new Property(entry.getKey(), Direct.IN, DataType.VARCHAR, entry.getValue()))",
                "newContent": "//                        .map(entry -> new Property(entry.getKey(), Direct.IN, DataType.VARCHAR, entry.getValue()))"
            },
            {
                "fromLine": 51,
                "toLine": 51,
                "oldContent": "                        .collect(Collectors.toList());",
                "newContent": "//                        .collect(Collectors.toList());"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PlaceholderUtils.java": [
            {
                "fromLine": 97,
                "toLine": 97,
                "oldContent": "                log.error(\"resolve placeholder '{}' in [ {} ]\", placeholderName, value, ex);",
                "newContent": "//                log.error(\"resolve placeholder '{}' in [ {} ]\", placeholderName, value, ex);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/ConditionsParameters.java": [
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "    private ConditionDependency dependence;",
                "newContent": "//    private ConditionDependency dependence;"
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "    private ConditionResult conditionResult;",
                "newContent": "//    private ConditionResult conditionResult;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java": [
            {
                "fromLine": 42,
                "toLine": 42,
                "oldContent": "    private long projectCode;",
                "newContent": "//    private long projectCode;"
            },
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "    private long definitionCode;",
                "newContent": "//    private long definitionCode;"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "    private long depTaskCode;",
                "newContent": "//    private long depTaskCode;"
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "    private String cycle;",
                "newContent": "//    private String cycle;"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "    private String dateValue;",
                "newContent": "//    private String dateValue;"
            },
            {
                "fromLine": 48,
                "toLine": 48,
                "oldContent": "    private DependResult dependResult;",
                "newContent": "//    private DependResult dependResult;"
            },
            {
                "fromLine": 49,
                "toLine": 49,
                "oldContent": "    private TaskExecutionStatus status;",
                "newContent": "//    private TaskExecutionStatus status;"
            },
            {
                "fromLine": 50,
                "toLine": 50,
                "oldContent": "    private Boolean parameterPassing = false;",
                "newContent": "//    private Boolean parameterPassing = false;"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java": [
            {
                "fromLine": 101,
                "toLine": 101,
                "oldContent": "            log.error(\"fail to getPodLog\", e);",
                "newContent": "//            log.error(\"fail to getPodLog\", e);"
            },
            {
                "fromLine": 102,
                "toLine": 102,
                "oldContent": "            log.error(\"response bodies : {}\", e.getMessage());",
                "newContent": "//            log.error(\"response bodies : {}\", e.getMessage());"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java": [
            {
                "fromLine": 93,
                "toLine": 93,
                "oldContent": "            log.error(\"Task instance kill failed, processId is not exist\");",
                "newContent": "//            log.error(\"Task instance kill failed, processId is not exist\");"
            },
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "           
{
    "refactorings": {
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java": [
            {
                "fromLine": 94,
                "toLine": 94,
                "oldContent": "            return false;",
                "newContent": "//            return false;"
            },
            {
                "fromLine": 96,
                "toLine": 96,
                "oldContent": "            log.info(\"Success kill task instance, processId: {}\", request.getProcessId());",
                "newContent": "//            log.info(\"Success kill task instance, processId: {}\", request.getProcessId());"
            },
            {
                "fromLine": 101,
                "toLine": 101,
                "oldContent": "            log.info(\"Begin kill task instance, processId: {}\", request.getProcessId());",
                "newContent": "//            log.info(\"Begin kill task instance, processId: {}\", request.getProcessId());"
            },
            {
                "fromLine": 102,
                "toLine": 102,
                "oldContent": "            log.error(\"Kill task instance error, processId: {}\", request.getProcessId(), e);",
                "newContent": "//            log.error(\"Kill task instance error, processId: {}\", request.getProcessId(), e);"
            },
            {
                "fromLine": 105,
                "toLine": 105,
                "oldContent": "            log.error(\"Kill yarn job error, the input params is illegal, host: {}, logPath: {}, appInfoPath: {}, executePath: {}, tenantCode: {}\",",
                "newContent": "//            log.error(\"Kill yarn job error, the input params is illegal, host: {}, logPath: {}, appInfoPath: {}, executePath: {}, tenantCode: {}\","
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "            log.info(\"Get appIds from worker {}, taskLogPath: {}\", host, logPath);",
                "newContent": "//            log.info(\"Get appIds from worker {}, taskLogPath: {}\", host, logPath);"
            },
            {
                "fromLine": 138,
                "toLine": 138,
                "oldContent": "            log.error(\"Cancel application failed: {}\", e.getMessage());",
                "newContent": "//            log.error(\"Cancel application failed: {}\", e.getMessage());"
            },
            {
                "fromLine": 170,
                "toLine": 170,
                "oldContent": "            log.error(\"Cancel application failed\", e);",
                "newContent": "//            log.error(\"Cancel application failed\", e);"
            },
            {
                "fromLine": 183,
                "toLine": 183,
                "oldContent": "            log.error(\"fail to build k8s ApiClient\", e);",
                "newContent": "//            log.error(\"fail to build k8s ApiClient\", e);"
            },
            {
                "fromLine": 195,
                "toLine": 195,
                "oldContent": "            log.error(\"fail to register batch job watcher\", e);",
                "newContent": "//            log.error(\"fail to register batch job watcher\", e);"
            },
            {
                "fromLine": 201,
                "toLine": 201,
                "oldContent": "            log.error(\"fail to create job\", e);",
                "newContent": "//            log.error(\"fail to create job\", e);"
            },
            {
                "fromLine": 205,
                "toLine": 205,
                "oldContent": "            log.error(\"fail to delete job\", e);",
                "newContent": "//            log.error(\"fail to delete job\", e);"
            },
            {
                "fromLine": 208,
                "toLine": 208,
                "oldContent": "            log.error(\"fail to check job: \", e);",
                "newContent": "//            log.error(\"fail to check job: \", e);"
            },
            {
                "fromLine": 227,
                "toLine": 227,
                "oldContent": "            log.error(\"fail to getPodLog\", e);",
                "newContent": "//            log.error(\"fail to getPodLog\", e);"
            },
            {
                "fromLine": 244,
                "toLine": 244,
                "oldContent": "            log.error(\"fail to build k8s ApiClient\", e);",
                "newContent": "//            log.error(\"fail to build k8s ApiClient\", e);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java": [
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "        log.info(\"Final Shell file is: \n****************************** Script Content *****************************************************************\" +",
                "newContent": "//        log.info(\"Final Shell file is: \n****************************** Script Content *****************************************************************\" +"
            },
            {
                "fromLine": 108,
                "toLine": 108,
                "oldContent": "        log.info(\"Created kubernetes configuration file: {}.\", kubeConfigPath);",
                "newContent": "//        log.info(\"Created kubernetes configuration file: {}.\", kubeConfigPath);"
            }
        ],
        "dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/VarPoolUtils.java": [
            {
                "fromLine": 51,
                "toLine": 51,
                "oldContent": "    public List<Property> deserializeVarPool(String varPoolJson) {",
                "newContent": "//    public List<Property> deserializeVarPool(String varPoolJson) {"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "    public String mergeVarPoolJsonString(List<String> varPoolJsons) {",
                "newContent": "//    public String mergeVarPoolJsonString(List<String> varPoolJsons) {"
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "        List<List<Property>> varPools = varPoolJsons.stream()",
                "newContent": "//        List<List<Property>> varPools = varPoolJsons.stream()"
            }
        ]
    },
    "extractedClasses": {}
}"