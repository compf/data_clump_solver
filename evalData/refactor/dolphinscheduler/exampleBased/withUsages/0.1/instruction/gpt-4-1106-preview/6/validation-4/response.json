{
    "refactorings": {
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "@TableField(value = \"warning_type\")",
                "newContent": ""
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 144,
                "toLine": 146,
                "oldContent": "        this.host = hostInfo.getHost();\n        this.startTime = hostInfo.getStartTime();\n        this.executePath = hostInfo.getExecutePath();",
                "newContent": "        this.host = host;\n        this.startTime = startTime;\n        this.executePath = executePath;"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 169,
                "toLine": 169,
                "oldContent": "@Deprecated",
                "newContent": ""
            },
            {
                "fromLine": 172,
                "toLine": 173,
                "oldContent": "    private WorkflowDefinition workflowDefinition;",
                "newContent": ""
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();",
                "newContent": "    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());",
                "newContent": "    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());",
                "newContent": "    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "        if (StringUtils.isEmpty(addrList)) {",
                "newContent": "        if (StringUtils.isEmpty(workerGroup.getAddrList())) {"
            },
            {
                "fromLine": 57,
                "toLine": 57,
                "oldContent": "        return Lists.newArrayList(addrList.split(\",\"));",
                "newContent": "        return Lists.newArrayList(workerGroup.getAddrList().split(\",\"));"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        mybatisMapper.delete(new QueryWrapper<>(new Session(userId)));",
                "newContent": "        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        return mybatisMapper.selectList(new QueryWrapper<>(new Session(userId)));",
                "newContent": "        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getName(), pluginDefine.getType());",
                "newContent": "        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != 0) {",
                "newContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {"
            },
            {
                "fromLine": 65,
                "toLine": 65,
                "oldContent": "                    return pluginDefine.getId().intValue();",
                "newContent": "                    return pluginDefine.getId();"
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getName(),",
                "newContent": "                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),"
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "        if (!Objects.equals(currPluginDefine.getParams(), pluginDefine.getParams())) {",
                "newContent": "        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {"
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());",
                "newContent": "            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "            currPluginDefine.setParams(pluginDefine.getParams());",
                "newContent": "            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());"
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "        return pluginDefineMapper.selectById(pluginDefineId);",
                "newContent": "        return pluginDefineMapper.selectById(pluginDefineId);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 34,
                "toLine": 34,
                "oldContent": "",
                "newContent": "        super(workflowDefinition);"
            },
            {
                "fromLine": 38,
                "toLine": 38,
                "oldContent": "",
                "newContent": "        super(workflowDefinition);"
            },
            {
                "fromLine": 39,
                "toLine": 39,
                "oldContent": "        this.setCode(workflowDefinition.getCode());",
                "newContent": ""
            },
            {
                "fromLine": 40,
                "toLine": 40,
                "oldContent": "        this.setName(workflowDefinition.getName());",
                "newContent": ""
            },
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        this.setVersion(workflowDefinition.getVersion());",
                "newContent": ""
            },
            {
                "fromLine": 42,
                "toLine": 42,
                "oldContent": "        this.setReleaseState(workflowDefinition.getReleaseState());",
                "newContent": ""
            },
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "        this.setProjectCode(workflowDefinition.getProjectCode());",
                "newContent": ""
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "        this.setDescription(workflowDefinition.getDescription());",
                "newContent": ""
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "        this.setGlobalParams(workflowDefinition.getGlobalParams());",
                "newContent": ""
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        this.setGlobalParamList(workflowDefinition.getGlobalParamList());",
                "newContent": ""
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {}
}