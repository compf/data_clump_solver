{
    "refactorings": {
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "    private WarningType warningType;",
                "newContent": ""
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 143,
                "toLine": 143,
                "oldContent": "    public void init(TaskInstanceHostInfo hostInfo) {",
                "newContent": "    public void init(String host, Date startTime, String executePath) {"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 115,
                "toLine": 115,
                "oldContent": "                                                            WorkflowInstanceQuery workflowInstanceQuery);",
                "newContent": "                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowInstance.java": [
            {
                "fromLine": 172,
                "toLine": 173,
                "oldContent": "    private WorkflowDefinition workflowDefinition;",
                "newContent": ""
            },
            {
                "fromLine": 221,
                "toLine": 228,
                "oldContent": "    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));",
                "newContent": "    public void setStateWithDesc(WorkflowExecutionStatus state, String stateDesc) {\n        this.setState(state);\n        if (StringUtils.isEmpty(this.getStateHistory())) {\n            stateDescList = new ArrayList<>();\n        } else if (stateDescList == null) {\n            stateDescList = JSONUtils.toList(this.getStateHistory(), StateDesc.class);\n        }\n        stateDescList.add(new StateDesc(new Date(), state, stateDesc));"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelation.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();",
                "newContent": "    public WorkflowTaskRelation(WorkflowTaskRelationLog processTaskRelationLog) {\n        this.name = processTaskRelationLog.getName();\n        this.workflowDefinitionVersion = processTaskRelationLog.getWorkflowDefinitionVersion();\n        this.projectCode = processTaskRelationLog.getProjectCode();\n        this.workflowDefinitionCode = processTaskRelationLog.getWorkflowDefinitionCode();\n        this.preTaskCode = processTaskRelationLog.getPreTaskCode();\n        this.preTaskVersion = processTaskRelationLog.getPreTaskVersion();\n        this.postTaskCode = processTaskRelationLog.getPostTaskCode();\n        this.postTaskVersion = processTaskRelationLog.getPostTaskVersion();\n        this.conditionType = processTaskRelationLog.getConditionType();"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowTaskRelationLog.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());",
                "newContent": "    public WorkflowTaskRelationLog(WorkflowTaskRelation workflowTaskRelation) {\n        super();\n        this.setName(workflowTaskRelation.getName());\n        this.setWorkflowDefinitionCode(workflowTaskRelation.getWorkflowDefinitionCode());\n        this.setWorkflowDefinitionVersion(workflowTaskRelation.getWorkflowDefinitionVersion());\n        this.setProjectCode(workflowTaskRelation.getProjectCode());\n        this.setPreTaskCode(workflowTaskRelation.getPreTaskCode());\n        this.setPreTaskVersion(workflowTaskRelation.getPreTaskVersion());\n        this.setPostTaskCode(workflowTaskRelation.getPostTaskCode());\n        this.setPostTaskVersion(workflowTaskRelation.getPostTaskVersion());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java": [
            {
                "fromLine": 101,
                "toLine": 110,
                "oldContent": "    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());",
                "newContent": "    public TaskDefinitionLog(TaskDefinition taskDefinition) {\n        super();\n        this.setCode(taskDefinition.getCode());\n        this.setVersion(taskDefinition.getVersion());\n        this.setName(taskDefinition.getName());\n        this.setDescription(taskDefinition.getDescription());\n        this.setUserId(taskDefinition.getUserId());\n        this.setUserName(taskDefinition.getUserName());\n        this.setWorkerGroup(taskDefinition.getWorkerGroup());\n        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/WorkerGroupUtils.java": [
            {
                "fromLine": 53,
                "toLine": 53,
                "oldContent": "        String addrList = workerGroup.getAddrList();",
                "newContent": ""
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/SessionDaoImpl.java": [
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        mybatisMapper.delete(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "        mybatisMapper.delete(new QueryWrapper<>(new Session(userId)));"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        return mybatisMapper.selectList(new QueryWrapper<>(Session.builder().userId(userId).build()));",
                "newContent": "        return mybatisMapper.selectList(new QueryWrapper<>(new Session(userId)));"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java": [
            {
                "fromLine": 57,
                "toLine": 57,
                "oldContent": "        requireNonNull(pluginDefine.getPluginName(), \"pluginName is null\");",
                "newContent": ""
            },
            {
                "fromLine": 58,
                "toLine": 58,
                "oldContent": "        requireNonNull(pluginDefine.getPluginType(), \"pluginType is null\");",
                "newContent": ""
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(), pluginDefine.getPluginType());",
                "newContent": "        PluginDefine currPluginDefine =\n                pluginDefineMapper.queryByNameAndType(pluginDefine.getName(), pluginDefine.getType());"
            },
            {
                "fromLine": 64,
                "toLine": 64,
                "oldContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != null) {",
                "newContent": "                if (pluginDefineMapper.insert(pluginDefine) == 1 && pluginDefine.getId() != 0) {"
            },
            {
                "fromLine": 65,
                "toLine": 65,
                "oldContent": "                    return pluginDefine.getId();",
                "newContent": "                    return pluginDefine.getId().intValue();"
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getPluginName(),",
                "newContent": "                currPluginDefine = pluginDefineMapper.queryByNameAndType(pluginDefine.getName(),"
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "        if (!Objects.equals(currPluginDefine.getPluginParams(), pluginDefine.getPluginParams())) {",
                "newContent": "        if (!Objects.equals(currPluginDefine.getParams(), pluginDefine.getParams())) {"
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());",
                "newContent": "            currPluginDefine.setUpdateTime(pluginDefine.getUpdateTime());"
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "            currPluginDefine.setPluginParams(pluginDefine.getPluginParams());",
                "newContent": "            currPluginDefine.setParams(pluginDefine.getParams());"
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "        return pluginDefineMapper.selectById(pluginDefineId);",
                "newContent": "        return pluginDefineMapper.selectById(pluginDefineId);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkflowDefinitionLog.java": [
            {
                "fromLine": 35,
                "toLine": 35,
                "oldContent": "        super();",
                "newContent": ""
            },
            {
                "fromLine": 38,
                "toLine": 38,
                "oldContent": "        super();",
                "newContent": ""
            },
            {
                "fromLine": 39,
                "toLine": 39,
                "oldContent": "        this.setCode(workflowDefinition.getCode());",
                "newContent": "        this.setCode(workflowDefinition.getCode());"
            },
            {
                "fromLine": 40,
                "toLine": 40,
                "oldContent": "        this.setName(workflowDefinition.getName());",
                "newContent": "        this.setName(workflowDefinition.getName());"
            },
            {
                "fromLine": 41,
                "toLine": 41,
                "oldContent": "        this.setVersion(workflowDefinition.getVersion());",
                "newContent": "        this.setVersion(workflowDefinition.getVersion());"
            },
            {
                "fromLine": 42,
                "toLine": 42,
                "oldContent": "        this.setReleaseState(workflowDefinition.getReleaseState());",
                "newContent": "        this.setReleaseState(workflowDefinition.getReleaseState());"
            },
            {
                "fromLine": 43,
                "toLine": 43,
                "oldContent": "        this.setProjectCode(workflowDefinition.getProjectCode());",
                "newContent": "        this.setProjectCode(workflowDefinition.getProjectCode());"
            },
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "        this.setDescription(workflowDefinition.getDescription());",
                "newContent": "        this.setDescription(workflowDefinition.getDescription());"
            },
            {
                "fromLine": 45,
                "toLine": 45,
                "oldContent": "        this.setGlobalParams(workflowDefinition.getGlobalParams());",
                "newContent": "        this.setGlobalParams(workflowDefinition.getGlobalParams());"
            },
            {
                "fromLine": 46,
                "toLine": 46,
                "oldContent": "        this.setGlobalParamList(workflowDefinition.getGlobalParamList());",
                "newContent": "        this.setGlobalParamList(workflowDefinition.getGlobalParamList());"
            },
            {
                "fromLine": 47,
                "toLine": 47,
                "oldContent": "        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());",
                "newContent": "        this.setGlobalParamMap(workflowDefinition.getGlobalParamMap());"
            }
        ]
    },
    "extractedClasses": {}
}