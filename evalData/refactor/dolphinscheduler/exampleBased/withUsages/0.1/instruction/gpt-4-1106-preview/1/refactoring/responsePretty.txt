"
{
    "refactorings": {
        "dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ExecutorPage.java": [
            {
                "fromLine": 35,
                "toLine": 43,
                "oldContent": "public HttpResponse startWorkflowInstance(User loginUser,\n                                              long projectCode,\n                                              long workflowDefinitionCode,\n                                              String scheduleTime,\n                                              FailureStrategy failureStrategy,\n                                              WarningType warningType) {",
                "newContent": "public HttpResponse startWorkflowInstance(StartWorkflowInstanceParams params) {"
            },
            {
                "fromLine": 44,
                "toLine": 50,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowDefinitionCode\", workflowDefinitionCode);\n        params.put(\"scheduleTime\", scheduleTime);\n        params.put(\"failureStrategy\", failureStrategy);\n        params.put(\"warningType\", warningType);",
                "newContent": "        params.put(\"loginUser\", params.getLoginUser());\n        params.put(\"workflowDefinitionCode\", params.getWorkflowDefinitionCode());\n        params.put(\"scheduleTime\", params.getScheduleTime());\n        params.put(\"failureStrategy\", params.getFailureStrategy());\n        params.put(\"warningType\", params.getWarningType());"
            },
            {
                "fromLine": 63,
                "toLine": 71,
                "oldContent": "public HttpResponse executeTask(User loginUser, long projectCode, int workflowInstanceId, String startNodeList,\n                                    TaskDependType taskDependType) {",
                "newContent": "public HttpResponse executeTask(ExecuteTaskParams params) {"
            },
            {
                "fromLine": 72,
                "toLine": 76,
                "oldContent": "        params.put(\"loginUser\", loginUser);\n        params.put(\"workflowInstanceId\", workflowInstanceId);\n        params.put(\"startNodeList\", startNodeList);\n        params.put(\"taskDependType\", taskDependType);",
                "newContent": "        params.put(\"loginUser\", params.getLoginUser());\n        params.put(\"workflowInstanceId\", params.getWorkflowInstanceId());\n        params.put(\"startNodeList\", params.getStartNodeList());\n        params.put(\"taskDependType\", params.getTaskDependType());"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkflowInstanceMapper.java": [
            {
                "fromLine": 112,
                "toLine": 126,
                "oldContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            @Param(\"projectCode\") Long projectCode,\n                                                            @Param(\"workflowDefinitionCode\") Long workflowDefinitionCode,\n                                                            @Param(\"searchVal\") String searchVal,\n                                                            @Param(\"executorName\") String executorName,\n                                                            @Param(\"states\") int[] statusArray,\n                                                            @Param(\"host\") String host,\n                                                            @Param(\"startTime\") Date startTime,\n                                                            @Param(\"endTime\") Date endTime);",
                "newContent": "IPage<WorkflowInstance> queryWorkflowInstanceListPaging(Page<WorkflowInstance> page,\n                                                            WorkflowInstanceListPagingParams params);"
            },
            {
                "fromLine": 128,
                "toLine": 128,
                "oldContent": "",
                "newContent": "    /**\n     * Set params for queryWorkflowInstanceListPaging.\n     *\n     * @param params params\n     * @return Map of params\n     */\n    default Map<String, Object> setQueryWorkflowInstanceListPagingParams(WorkflowInstanceListPagingParams params) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"projectCode\", params.getProjectCode());\n        map.put(\"workflowDefinitionCode\", params.getWorkflowDefinitionCode());\n        map.put(\"searchVal\", params.getSearchVal());\n        map.put(\"executorName\", params.getExecutorName());\n        map.put(\"states\", params.getStatusArray());\n        map.put(\"host\", params.getHost());\n        map.put(\"startTime\", params.getStartTime());\n        map.put(\"endTime\", params.getEndTime());\n        return map;\n    }\n"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java": [
            {
                "fromLine": 92,
                "toLine": 94,
                "oldContent": "    public void init(String host, Date startTime, String executePath) {\n        this.host = host;\n        this.startTime = startTime;",
                "newContent": "    public void init(TaskInstanceInitParams params) {\n        this.host = params.getHost();\n        this.startTime = params.getStartTime();"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java": [
            {
                "fromLine": 29,
                "toLine": 33,
                "oldContent": "    Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result createProjectParameter(ProjectParameterCreateParams params);"
            },
            {
                "fromLine": 35,
                "toLine": 39,
                "oldContent": "    Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,\n                                  String projectParameterValue, String projectParameterDataType);",
                "newContent": "    Result updateProjectParameter(ProjectParameterUpdateParams params);"
            },
            {
                "fromLine": 41,
                "toLine": 43,
                "oldContent": "    Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result deleteProjectParametersByCode(ProjectParameterDeleteParams params);"
            },
            {
                "fromLine": 45,
                "toLine": 47,
                "oldContent": "    Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);",
                "newContent": "    Result batchDeleteProjectParametersByCodes(ProjectParameterBatchDeleteParams params);"
            },
            {
                "fromLine": 49,
                "toLine": 53,
                "oldContent": "    Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,\n                                           String searchVal, String projectParameterDataType);",
                "newContent": "    Result queryProjectParameterListPaging(ProjectParameterListPagingParams params);"
            },
            {
                "fromLine": 55,
                "toLine": 57,
                "oldContent": "    Result queryProjectParameterByCode(User loginUser, long projectCode, long code);",
                "newContent": "    Result queryProjectParameterByCode(ProjectParameterQueryByCodeParams params);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectParameterController.java": [
            {
                "fromLine": 72,
                "toLine": 80,
                "oldContent": "        return projectParameterService.createProjectParameter(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterCreateParams params = new ProjectParameterCreateParams(loginUser, projectCode, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n        return projectParameterService.createProjectParameter(params);"
            },
            {
                "fromLine": 94,
                "toLine": 102,
                "oldContent": "        return projectParameterService.updateProjectParameter(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);",
                "newContent": "        ProjectParameterUpdateParams params = new ProjectParameterUpdateParams(loginUser, projectCode, code, projectParameterName,\n                projectParameterValue, projectParameterDataType);\n        return projectParameterService.updateProjectParameter(params);"
            },
            {
                "fromLine": 114,
                "toLine": 118,
                "oldContent": "        return projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, code);",
                "newContent": "        ProjectParameterDeleteParams params = new ProjectParameterDeleteParams(loginUser, projectCode, code);\n        return projectParameterService.deleteProjectParametersByCode(params);"
            },
            {
                "fromLine": 130,
                "toLine": 134,
                "oldContent": "        return projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, codes);",
                "newContent": "        ProjectParameterBatchDeleteParams params = new ProjectParameterBatchDeleteParams(loginUser, projectCode, codes);\n        return projectParameterService.batchDeleteProjectParametersByCodes(params);"
            },
            {
                "fromLine": 146,
                "toLine": 152,
                "oldContent": "        return projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);",
                "newContent": "        ProjectParameterListPagingParams params = new ProjectParameterListPagingParams(loginUser, projectCode, pageSize, pageNo,\n                searchVal, projectParameterDataType);\n        return projectParameterService.queryProjectParameterListPaging(params);"
            },
            {
                "fromLine": 164,
                "toLine": 168,
                "oldContent": "        return projectParameterService.queryProjectParameterByCode(loginUser, projectCode, code);",
                "newContent": "        ProjectParameterQueryByCodeParams params = new ProjectParameterQueryByCodeParams(loginUser, projectCode, code);\n        return projectParameterService.queryProjectParameterByCode(params);"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectParameterControllerTest.java": [
            {
                "fromLine": 30,
                "toLine": 34,
                "oldContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.any(),\n                Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.createProjectParameter(Mockito.any(ProjectParameterCreateParams.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 40,
                "toLine": 44,
                "oldContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.updateProjectParameter(Mockito.any(ProjectParameterUpdateParams.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 50,
                "toLine": 52,
                "oldContent": "        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.deleteProjectParametersByCode(Mockito.any(ProjectParameterDeleteParams.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 60,
                "toLine": 62,
                "oldContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(), Mockito.anyLong(),\n                Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.batchDeleteProjectParametersByCodes(Mockito.any(ProjectParameterBatchDeleteParams.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 70,
                "toLine": 72,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyInt(), Mockito.anyInt(), Mockito.any(), Mockito.any())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterListPaging(Mockito.any(ProjectParameterListPagingParams.class))).thenReturn(getSuccessResult());"
            },
            {
                "fromLine": 80,
                "toLine": 82,
                "oldContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(), Mockito.anyLong(),\n                Mockito.anyLong())).thenReturn(getSuccessResult());",
                "newContent": "        Mockito.when(projectParameterService.queryProjectParameterByCode(Mockito.any(ProjectParameterQueryByCodeParams.class))).thenReturn(getSuccessResult());"
            }
        ],
        "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java": [
            {
                "fromLine": 37,
                "toLine": 41,
                "oldContent": "        Result result = projectParameterService.createProjectParameter(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterCreateParams createParams = new ProjectParameterCreateParams(loginUser, projectCode, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Result result = projectParameterService.createProjectParameter(createParams);"
            },
            {
                "fromLine": 53,
                "toLine": 57,
                "oldContent": "        Result result = projectParameterService.updateProjectParameter(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());",
                "newContent": "        ProjectParameterUpdateParams updateParams = new ProjectParameterUpdateParams(loginUser, projectCode, 1, \"key\", \"value\",\n                DataType.VARCHAR.name());\n        Result result = projectParameterService.updateProjectParameter(updateParams);"
            },
            {
                "fromLine": 69,
                "toLine": 71,
                "oldContent": "        Result result = projectParameterService.deleteProjectParametersByCode(loginUser, projectCode, 1);",
                "newContent": "        ProjectParameterDeleteParams deleteParams = new ProjectParameterDeleteParams(loginUser, projectCode, 1);\n        Result result = projectParameterService.deleteProjectParametersByCode(deleteParams);"
            },
            {
                "fromLine": 85,
                "toLine": 87,
                "oldContent": "        Result result = projectParameterService.queryProjectParameterByCode(loginUser, projectCode, 1);",
                "newContent": "        ProjectParameterQueryByCodeParams queryParams = new ProjectParameterQueryByCodeParams(loginUser, projectCode, 1);\n        Result result = projectParameterService.queryProjectParameterByCode(queryParams);"
            },
            {
                "fromLine": 101,
                "toLine": 103,
                "oldContent": "        Result result =\n                projectParameterService.queryProjectParameterListPaging(loginUser, projectCode, pageSize, pageNo, null,",
                "newContent": "        ProjectParameterListPagingParams pagingParams = new ProjectParameterListPagingParams(loginUser, projectCode, pageSize, pageNo, null,\n                DataType.VARCHAR.name());\n        Result result = projectParameterService.queryProjectParameterListPaging(pagingParams);"
            },
            {
                "fromLine": 115,
                "toLine": 117,
                "oldContent": "        projectParameterService.batchDeleteProjectParametersByCodes(loginUser, projectCode, \"1\");",
                "newContent": "        ProjectParameterBatchDeleteParams batchDeleteParams = new ProjectParameterBatchDeleteParams(loginUser, projectCode, \"1\");\n        projectParameterService.batchDeleteProjectParametersByCodes(batchDeleteParams);"
            }
        ],
        "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java": [
            {
                "fromLine": 81,
                "toLine": 97,
                "oldContent": "        Map<String, Object> result = schedulerService.insertSchedule(\n                loginUser,\n                projectCode,\n                workflowDefinitionCode,\n                schedule,\n                warningType,\n                warningGroupId,\n                failureStrategy,\n                workflowInstancePriority,\n                workerGroup,\n                tenantCode,\n                environmentCode);\n\n        return returnDataList(result);",
                "newContent": "        ScheduleCreateParams createParams = new ScheduleCreateParams(loginUser, projectCode, workflowDefinitionCode, schedule, warningType,\n                warningGroupId, failureStrategy, workerGroup, tenantCode, environmentCode, workflowInstancePriority);\n        Map<String, Object> result = schedulerService.insertSchedule(createParams);\n        return returnDataList(result);"
            },
            {
                "fromLine": 111,
                "toLine": 127,
                "oldContent": "        Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);",
                "newContent": "        ScheduleUpdateParams updateParams = new ScheduleUpdateParams(loginUser, projectCode, id, schedule, warningType, warningGroupId,\n                failureStrategy, workerGroup, tenantCode, environmentCode, workflowInstancePriority);\n        Map<String, Object> result = schedulerService.updateSchedule(updateParams);\n        return returnDataList(result);"
            },
            {
                "fromLine": 235,
                "toLine": 251,
                "oldContent": "        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(loginUser, projectCode,\n                workflowDefinitionCode, schedule,\n                warningType, warningGroupId, failureStrategy, workflowInstancePriority, workerGroup, tenantCode,\n                environmentCode);\n        return returnDataList(result);",
                "newContent": "        ScheduleUpdateByWorkflowDefinitionCodeParams updateByWorkflowDefinitionCodeParams = new ScheduleUpdateByWorkflowDefinitionCodeParams(loginUser, projectCode,\n                workflowDefinitionCode, schedule, warningType, warningGroupId, failureStrategy, workerGroup, tenantCode, environmentCode, workflowInstancePriority);\n        Map<String, Object> result = schedulerService.updateScheduleByWorkflowDefinitionCode(updateByWorkflowDefinitionCodeParams);\n        return returnDataList(result);"
            }
        ],
        "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Alert.java": [
            {
                "fromLine": 33,
                "toLine": 33,
                "oldContent": "    private String title;",
                "newContent": "    private String title;\n\n    public void setTitleAndContent(TaskAlertInfo taskAlertInfo) {\n        this.title = taskAlertInfo.getTitle();\n        this.content = taskAlertInfo.getContent();\n    }"
            }
        ]
    },
    "extractedClasses": {
        "StartWorkflowInstanceParams.java": "public class StartWorkflowInstanceParams {\n\n    private User loginUser;\n    private long projectCode;\n    private long workflowDefinitionCode;\n    private String scheduleTime;\n   
    {"failureStrategy\": FailureStrategy;\n    private WarningType warningType;\n\n    public StartWorkflowInstanceParams(User loginUser, long projectCode, long workflowDefinitionCode, String scheduleTime, FailureStrategy failureStrategy, WarningType warningType) {\n        this.loginUser = loginUser;\n        this.projectCode = projectCode;\n        this.workflowDefinitionCode = workflowDefinitionCode;\n        this.scheduleTime = scheduleTime;\n        this.failureStrategy = failureStrategy;\n        this.warningType = warningType;\n    }\n\n    // Getters and Setters\n}\n"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   "