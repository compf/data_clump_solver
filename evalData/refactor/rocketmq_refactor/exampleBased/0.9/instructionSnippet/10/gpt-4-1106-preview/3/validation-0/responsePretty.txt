refactorings:
{
	store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		930",
		toLine:"		950",
		oldContent:"
		                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());
		                    } finally {
		                        if (bufferConsumeQueue != null) {
		                            bufferConsumeQueue.release();
		                        }
		                    }
		                }
		
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		                }
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));
		                getResult.setSuggestPullingFromSlave(diff > memory);
		            }
		        } else {
		            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;
		            nextBeginOffset = nextOffsetCorrection(offset, 0);		
",
		newContent:"
		                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());
		                    } finally {
		                        if (bufferConsumeQueue != null) {
		                            bufferConsumeQueue.release();
		                        }
		                    }
		                }
		
		                // Removed the following line because the method recordDiskFallBehindSize is removed
		                // long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                // brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));
		                getResult.setSuggestPullingFromSlave(diff > memory);
		            }
		        } else {
		            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;
		            nextBeginOffset = nextOffsetCorrection(offset, 0);		
",
,

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		99",
		toLine:"		191",
		oldContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);
		
		        // ... More code with references to Stats constants ...
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,
		            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
		        this.statsTable.put(PRODUCER_REGISTER_TIME,
		            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
		
		        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
		
		        // ... Rest of the method ...
		    }
				
",
		newContent:"
		    public void init() {
		        // Initialization of MomentStatsItemSet objects removed because their constants are removed from Stats class
		
		        // ... Code that initializes other StatsItemSet objects ...
		
		        // Initialization of Consumer and Producer Register Time and Channel Activity-related StatsItemSet objects are removed because their constants are removed
		    }
				
",
,

	],

}
extractedClasses:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:"
	// The refactored Stats class now does not contain any constants since they were removed or refactored out.	
",

}
