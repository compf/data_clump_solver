refactorings:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
	[

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		71",
		oldContent:"
		    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
		    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
		    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
		    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
		    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
		    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
		
		    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;
		
		    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
		    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
		    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;
		    // For commercial
		    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
		    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
		    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
		    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
		    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;
		
		    // Send message latency		
",
		newContent:"
				
",
,
		fromLine:"		108",
		toLine:"		115",
		oldContent:"
		    public static final String INNER_RT = "INNER_RT";
		
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    // Pull Message Latency
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
		
		    // Consumer Register Time		
",
		newContent:"
				
",
,
		fromLine:"		583",
		toLine:"		594",
		oldContent:"
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);		
",
		newContent:"
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId, final long fallBehind) {
		        final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group, queueId);
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId, final long fallBehind) {
		        final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group, queueId);
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		16",
		toLine:"		51",
		oldContent:"
				
",
		newContent:"
				
",
,
		fromLine:"		299",
		toLine:"		303",
		oldContent:"
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {		
",
		newContent:"
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        StatsKey statsKey = new StatsKey(topic, group, queueId);
		        long brokerOffset = messageStore.getMaxOffsetInQueue(statsKey.getTopic(), statsKey.getQueueId());
		        if (brokerOffset < 0) {		
",
,
		fromLine:"		438",
		toLine:"		442",
		oldContent:"
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;
				
",
		newContent:"
		    public long calculateMessageCount(StatsKey statsKey, long from, long to) {
		        long count = to - from;
				
",
,

	],

}
extractedClasses:
{
	store/src/main/java/org/apache/rocketmq/store/stats/StatsKeyBuilder.java:"
	package org.apache.rocketmq.store.stats;
	
	class StatsKeyBuilder {
	
	    static String buildStatsKey(String topic, String group, int queueId) {
	        return topic + "-" + group + "-" + queueId;
	    }
	
	}	
",

}
