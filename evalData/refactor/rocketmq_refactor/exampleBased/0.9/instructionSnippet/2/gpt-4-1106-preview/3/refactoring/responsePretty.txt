refactorings:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
	[

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		71",
		oldContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.Stats;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		
		public class BrokerStatsManager {
		
		    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
		    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
		    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
		    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
		    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
		    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
		
		    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;
		
		    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
		    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
		    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;
		    // For commercial
		    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
		    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
		    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
		    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
		    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;
		
		    // Send message latency		
",
		newContent:"
		 */
		// No changes necessary as the fields are already using references from the Stats class.		
",
,
		fromLine:"		108",
		toLine:"		115",
		oldContent:"
		    public static final String INNER_RT = "INNER_RT";
		
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    // Pull Message Latency
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
		
		    // Consumer Register Time		
",
		newContent:"
		 */
		// No changes necessary as the fields are already using references from the Stats class.		
",
,
		fromLine:"		583",
		toLine:"		594",
		oldContent:"
		    }
		
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);		
",
		newContent:"
		 */
		// No changes necessary as the methods do not contain a data clump that needs to be refactored.		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		16",
		toLine:"		51",
		oldContent:"
		 */
		package org.apache.rocketmq.broker.metrics;
		
		import java.util.Map;
		import java.util.Set;
		import java.util.function.Consumer;
		import java.util.stream.Collectors;
		import org.apache.rocketmq.broker.BrokerController;
		import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
		import org.apache.rocketmq.broker.client.ConsumerManager;
		import org.apache.rocketmq.broker.filter.ConsumerFilterData;
		import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
		import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
		import org.apache.rocketmq.broker.processor.PopBufferMergeService;
		import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
		import org.apache.rocketmq.broker.sub.SubscriptionGroupManager;
		import org.apache.rocketmq.broker.topic.TopicConfigManager;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.KeyBuilder;
		import org.apache.rocketmq.common.MixAll;
		import org.apache.rocketmq.common.Pair;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.constant.PermName;
		import org.apache.rocketmq.common.filter.ExpressionType;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
		import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
		import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
		import org.apache.rocketmq.store.DefaultMessageFilter;
		import org.apache.rocketmq.store.MessageStore;
				
",
		newContent:"
		// No changes necessary as there is no data clump detected that requires refactoring.		
",
,
		fromLine:"		299",
		toLine:"		303",
		oldContent:"
		    }
		
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {		
",
		newContent:"
		    }
		
		    public Pair<Long, Long> getConsumerLagStats(ConsumerLagQuery query) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(query.getTopic(), query.getQueueId());
		        if (brokerOffset < 0) {		
",
,
		fromLine:"		438",
		toLine:"		442",
		oldContent:"
		    }
		
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;
				
",
		newContent:"
		    }
		
		    // Method does not need refactoring as it does not contain a data clump.		
",
,

	],

}
extractedClasses:
{
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagQuery.java:"
	package org.apache.rocketmq.broker.metrics;
	
	public class ConsumerLagQuery {
	    private String group;
	    private String topic;
	    private int queueId;
	    private boolean isPop;
	
	    public ConsumerLagQuery(String group, String topic, int queueId, boolean isPop) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.isPop = isPop;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public boolean isPop() {
	        return isPop;
	    }
	}
		
",

}
