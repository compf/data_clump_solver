"{
    "refactorings": {
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [],
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 71,
                "oldContent": "public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n    public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n    public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;",
                "newContent": ""
            },
            {
                "fromLine": 108,
                "toLine": 115,
                "oldContent": "public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;",
                "newContent": ""
            },
            {
                "fromLine": 583,
                "toLine": 594,
                "oldContent": "public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);",
                "newContent": "public void recordDiskFallBehind(final String group, final String topic, final int queueId, final long fallBehindTime, final long fallBehindSize) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehindTime);\n        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehindSize);\n    }"
            }
        ],
        "broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java": [
            {
                "fromLine": 16,
                "toLine": 51,
                "oldContent": "package org.apache.rocketmq.broker.metrics;\n\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.client.ConsumerGroupInfo;\nimport org.apache.rocketmq.broker.client.ConsumerManager;\nimport org.apache.rocketmq.broker.filter.ConsumerFilterData;\nimport org.apache.rocketmq.broker.filter.ConsumerFilterManager;\nimport org.apache.rocketmq.broker.filter.ExpressionMessageFilter;\nimport org.apache.rocketmq.broker.offset.ConsumerOffsetManager;\nimport org.apache.rocketmq.broker.processor.PopBufferMergeService;\nimport org.apache.rocketmq.broker.processor.PopInflightMessageCounter;\nimport org.apache.rocketmq.broker.sub.SubscriptionGroupManager;\nimport org.apache.rocketmq.broker.topic.TopicConfigManager;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.KeyBuilder;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.constant.PermName;\nimport org.apache.rocketmq.common.filter.ExpressionType;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.remoting.protocol.filter.FilterAPI;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.store.DefaultMessageFilter;\nimport org.apache.rocketmq.store.MessageStore;\n\n",
                "newContent": ""
            },
            {
                "fromLine": 299,
                "toLine": 303,
                "oldContent": "public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {\n        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);\n        if (brokerOffset < 0) {",
                "newContent": ""
            },
            {
                "fromLine": 438,
                "toLine": 442,
                "oldContent": "public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {\n        long count = to - from;\n",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {
        "common/src/main/java/org/apache/rocketmq/common/stats/DiskFallBehindInfo.java": "package org.apache.rocketmq.common.stats;\n\npublic class DiskFallBehindInfo {\n    private long fallBehindTime;\n    private long fallBehindSize;\n\n    public DiskFallBehindInfo(long fallBehindTime, long fallBehindSize) {\n        this.fallBehindTime = fallBehindTime;\n        this.fallBehindSize = fallBehindSize;\n    }\n\n    public long getFallBehindTime() {\n        return fallBehindTime;\n    }\n\n    public long getFallBehindSize() {\n        return fallBehindSize;\n    }\n}"
    }
}"