refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		590",
		toLine:"		641",
		oldContent:"
		    }
		
		    private String buildStatsKey(String... components) {
		        return String.join("@", components);
		    }
		
		    public void incDLQStatValue(final String key, final String owner, final String group, final String topic, final String type, final int incValue) {
		        final String statsKey = buildStatsKey(owner, topic, group, type);
		        this.statsTable.get(key).addValue(statsKey, incValue, 1);
		    }
		
		    public void incCommercialValue(final String key, final String owner, final String group, final String topic, final String type, final int incValue) {
		        final String statsKey = buildStatsKey(owner, topic, group, type);
		        this.statsTable.get(key).addValue(statsKey, incValue, 1);
		    }
		
		    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf, final String instanceId, final String group, final String topic, final String msgType, final int incValue) {
		        final String statsKey = buildStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group, msgType);
		        this.statsTable.get(key).addValue(statsKey, incValue, 1);
		    }
		
		    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf, final String instanceId, final String group, final String topic, final String msgType, final String flowlimitThreshold, final int incValue) {
		        final String statsKey = buildStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group, msgType, flowlimitThreshold);
		        this.statsTable.get(key).addValue(statsKey, incValue, 1);
		    }
		
		    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic, final String group, final String msgType, final long... incValues) {
		        final String key = buildStatsKey(owner, instanceId, topic, group, msgType);
		        this.accountStatManager.inc(statType, key, incValues);
		    }
		
		    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic, final String group, final String msgType, final String flowlimitThreshold, final long... incValues) {
		        final String key = buildStatsKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
		        this.accountStatManager.inc(statType, key, incValues);
		    }
		
		    public String buildAccountStatKey(final String owner, final String instanceId, final String topic, final String group, final String msgType) {
		        final String sep = "|";
		        return String.format("%s%s%s%s%s%s%s", owner, sep, instanceId, sep, topic, sep, group, sep, msgType);
		    }
		
		    public String buildAccountStatKey(final String owner, final String instanceId, final String topic, final String group, final String msgType, String flowlimitThreshold) {
		        final String sep = "|";
		        return String.format("%s%s%s%s%s%s%s%s%s", owner, sep, instanceId, sep, topic, sep, group, sep, msgType, sep, flowlimitThreshold);
		    }
		
		    public String[] splitAccountStatKey(final String accountStatKey) {
		        final String sep = "\\|";
		        return accountStatKey.split(sep);
		    }
		
		    private StatisticsKindMeta createStatisticsKindMeta(String name, String itemNames, String key, String formatter,		
",
		newContent:"
		    }
		
		    // Other methods here
		
		    public String[] splitAccountStatKey(final String accountStatKey) {
		        final String sep = "\\|";
		        return accountStatKey.split(sep);
		    }
		
		    // Create a StatisticsKindMeta object
		    private StatisticsKindMeta createStatisticsKindMeta(String name, String itemNames, String key,
		        StatisticsItemFormatter formatter, Logger log, long interval) {
		        final BrokerConfig brokerConfig = this.brokerConfig;
		        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
		        // Create StatisticsKindMeta object and set properties
		        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
		        kindMeta.setName(name);
		        kindMeta.setItemNames(itemNames);
		        kindMeta.setScheduledPrinter(
		            new StatisticsItemScheduledIncrementPrinter(
		                "Stat In One Minute: ",
		                printer,
		                executorService,
		                new StatisticsItemScheduledPrinter.InitialDelay() {
		                    @Override
		                    public long get() {
		                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
		                    }
		                },
		                interval,
		                new StatisticsItemScheduledIncrementPrinter.Valve() {
		                    @Override
		                    public boolean enabled() {
		                        return brokerConfig != null && brokerConfig.isAccountStatsEnable();
		                    }
		                }
		            )
		        );
		        return kindMeta;
		    }		
",
,

	],

}
extractedClasses:
{

}
