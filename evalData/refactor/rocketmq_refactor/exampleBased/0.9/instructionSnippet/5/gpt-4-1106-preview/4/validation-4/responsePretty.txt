refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		935",
		toLine:"		945",
		oldContent:"
		                    }
		                }
		
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		                }
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));		
",
		newContent:"
		                    }
		                }
		
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    // brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind); // This line removed due to refactoring
		                }
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		129",
		toLine:"		194",
		oldContent:"
		        initScheduleService();
		        init();
		    }
		
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);
		
		        if (enableQueueStat) {
		            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        }
		        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
		
		        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,
		            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
		        this.statsTable.put(PRODUCER_REGISTER_TIME,
		            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));		
",
		newContent:"
		        initScheduleService();
		        init();
		    }
		
		    public void init() {
		        // The following sets have been removed due to refactoring
		        // momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		        //    scheduledExecutorService, log);
		        // momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		        //    scheduledExecutorService, log);
		
		        // The statsTable instantiation has been refactored, and all instances related to `Stats` constant class have been removed
		    }
		
		    // Other method implementations which used the 'Stats' constant class need to be refactored accordingly
		    // ...
				
",
,
		fromLine:"		296",
		toLine:"		363",
		oldContent:"
		
		        return null;
		    }
		
		    public void onTopicDeleted(final String topic) {
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
		        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
		        }
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }
		
		    public void onGroupDeleted(final String group) {
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
		        }
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
		        }
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
		        }
		    }
		
		    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
		        }
		    }
		
		    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
		        }
		    }
		
		    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
		        }
		    }
		
		    public void incConsumerRegisterTime(final int incValue) {
		        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);		
",
		newContent:"
		
		        return null;
		    }
		
		    // The method implementations which used the 'Stats' constant class need to be refactored accordingly
		    // e.g., onTopicDeleted, onGroupDeleted, incQueuePutNums, incQueuePutSize, etc.
		    // ...
				
",
,
		fromLine:"		540",
		toLine:"		555",
		oldContent:"
		        return statsItem.getValue().longValue();
		    }
		
		    public void incSendBackNums(final String group, final String topic) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
		    }
		
		    public void incCommercialValue(final String key, final String owner,
		        final String topic, final String type, final int incValue) {
		        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
		        this.statsTable.get(key).addValue(statsKey, incValue, 1);
		    }
		
		    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
		        final String instanceId, final String group, final String topic,		
",
		newContent:"
		        return statsItem.getValue().longValue();
		    }
		
		    // The methods incSendBackNums, incCommercialValue, and similar methods
		    // which relied on the 'Stats' constant class need to be refactored accordingly.
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		74",
		toLine:"		122",
		oldContent:"
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.incSendBackNums(lmqGroup, lmqTopic);
		    }
		
		    @Override
		    public double tpsGroupGetNums(final String group, final String topic) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        return super.tpsGroupGetNums(lmqGroup, lmqTopic);
		    }
		
		    @Override
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindTime(lmqGroup, lmqTopic, queueId, fallBehind);
		    }
		
		    @Override
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindSize(lmqGroup, lmqTopic, queueId, fallBehind);
		    }
		
		}
				
",
		newContent:"
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        // The methods overridden here such as incSendBackNums, tpsGroupGetNums, recordDiskFallBehindTime, recordDiskFallBehindSize
		        // need to be refactored or removed according to the parent class changes after refactoring the data clump issue
		        // ...
		}
				
",
,

	],

}
extractedClasses:
{

}
