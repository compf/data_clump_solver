refactorings:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
	[
		fromLine:"		16",
		toLine:"		51",
		oldContent:"
		 */
		package org.apache.rocketmq.common.stats;
		
		public class Stats {
		
		    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
		    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
		    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
		    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
		    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
		    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
		    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
		    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
		    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
		    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
		    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
		    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
		    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
		    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
		    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
		    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
		    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
		    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
		    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
		    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
		    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
		    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
		
		    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
		    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
		    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
		}
				
",
		newContent:
{
// Content of stats related constants have been removed.
// This class is now empty and has been deprecated.

/**
 * @deprecated use BrokerStatsMetric instead
 */
@Deprecated
public class Stats 
				
}
,

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		74",
		oldContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		// imports omitted
		
		public class BrokerStatsManager {
		
		    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
		    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
		    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
		    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
		    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
		    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
		
		    // Other deprecated fields...
		
		    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
		    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
		    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
		    // Other fields...
		}		
",
		newContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		// imports omitted
		
		public class BrokerStatsManager {
		
		    // Deprecated fields have been removed. Use BrokerStatsMetric instead.
		
		    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
		    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
		    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
		    // Other fields...
		}		
",
,
		fromLine:"		105",
		toLine:"		118",
		oldContent:"
		    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
		    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
		    public static final String RT = "RT";
		    public static final String INNER_RT = "INNER_RT";
		
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    // Pull Message Latency
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
		
		    // Consumer Register Time
		    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
		    // Producer Register Time
		    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";		
",
		newContent:"
		    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
		    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
		    public static final String RT = "RT";
		    public static final String INNER_RT = "INNER_RT";
		
		    // Deprecated fields have been removed. Use BrokerStatsMetric for lag related metrics.
		
		    // Consumer Register Time
		    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
		    // Producer Register Time
		    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";		
",
,
		fromLine:"		580",
		toLine:"		597",
		oldContent:"
		    public double tpsGroupGetNums(final String group, final String topic) {
		        final String statsKey = buildStatsKey(topic, group);
		        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
		    }
		
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void incDLQStatValue(final String key, final String owner, final String group,		
",
		newContent:"
		    public double tpsGroupGetNums(final String group, final String topic) {
		        final String statsKey = buildStatsKey(topic, group);
		        // GROUP_GET_NUMS constant removed. Use BrokerStatsMetric instead.
		        // Old code removed...
		    }
		
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        // Deprecated method. Use BrokerStatsMetric.recordDiskFallBehindTime instead.
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        // Deprecated method. Use BrokerStatsMetric.recordDiskFallBehindSize instead.
		    }
		
		    public void incDLQStatValue(final String key, final String owner, final String group,		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		16",
		toLine:"		51",
		oldContent:"
		 */
		package org.apache.rocketmq.broker.metrics;
		
		// imports omitted
		
		public class ConsumerLagCalculator {
		    // class content...
		}		
",
		newContent:"
		 */
		package org.apache.rocketmq.broker.metrics;
		
		// imports omitted
		
		public class ConsumerLagCalculator {
		    // Deprecated class. Use BrokerStatsMetric instead.
		    // Old content has been removed.
		}		
",
,
		fromLine:"		296",
		toLine:"		306",
		oldContent:"
		        }
		
		        return new Pair<>(total, earliestUnconsumedTimestamp);
		    }
		
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {
		            brokerOffset = 0;
		        }
				
",
		newContent:"
		        }
		
		        // Deprecated method. Use BrokerStatsMetric.getConsumerLagStats instead.
		        /*
		        return new Pair<>(total, earliestUnconsumedTimestamp);
		        */
		        return null;
		    }
				
",
,
		fromLine:"		435",
		toLine:"		445",
		oldContent:"
		            storeTimeStamp = storeTimeStamp > 0 ? storeTimeStamp : Long.MAX_VALUE;
		        }
		        return storeTimeStamp;
		    }
		
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;
		
		        if (brokerConfig.isEstimateAccumulation() && to > from) {
		            SubscriptionData subscriptionData = null;
		            if (brokerConfig.isUseStaticSubscription()) {		
",
		newContent:"
		            storeTimeStamp = storeTimeStamp > 0 ? storeTimeStamp : Long.MAX_VALUE;
		        }
		        // Deprecated method. Use BrokerStatsMetric.calculateMessageCount instead.
		        /*
		        return storeTimeStamp;
		        */
		        return -1;
		    }
				
",
,

	],

}
extractedClasses:
{

}
