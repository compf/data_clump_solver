refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		41",
		oldContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.constant.StatsConstants;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
				
",
		newContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		// Removed incorrect import for StatsConstants
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
				
",
,
		fromLine:"		108",
		toLine:"		133",
		oldContent:"
		    private final String clusterName;
		    private final boolean enableQueueStat;
		    private MomentStatsItemSet momentStatsItemSetFallSize;
		    private MomentStatsItemSet momentStatsItemSetFallTime;
		
		    private final StatisticsManager accountStatManager;
		    private StateGetter producerStateGetter;
		    private StateGetter consumerStateGetter;
		
		    private BrokerConfig brokerConfig;
		
		    public BrokerStatsManager(BrokerConfig brokerConfig) {
		        this.brokerConfig = brokerConfig;
		        this.clusterName = brokerConfig.getBrokerClusterName();
		        this.enableQueueStat = brokerConfig.isEnableQueueStat();
		        this.accountStatManager = new StatisticsManager();
		        initializeScheduledExecutors();
		        initializeStatsItems();
		    }
		
		    public BrokerStatsManager(BrokerConfig brokerConfig) {
		        this.brokerConfig = brokerConfig;
		        this.enableQueueStat = brokerConfig.isEnableDetailStat();
		        initScheduleService();
		        this.clusterName = brokerConfig.getBrokerClusterName();
		        init();		
",
		newContent:"
		    private final String clusterName;
		    private final boolean enableQueueStat;
		    private MomentStatsItemSet momentStatsItemSetFallSize;
		    private MomentStatsItemSet momentStatsItemSetFallTime;
		
		    private final StatisticsManager accountStatManager;
		    private StateGetter producerStateGetter;
		    private StateGetter consumerStateGetter;
		
		    private BrokerConfig brokerConfig;
		
		    // Removed duplicate constructor
		    // Corrected the constructor to initialize all the required fields and components
		    public BrokerStatsManager(BrokerConfig brokerConfig) {
		        this.brokerConfig = brokerConfig;
		        this.clusterName = brokerConfig.getBrokerClusterName();
		        this.enableQueueStat = brokerConfig.isEnableQueueStat();
		        this.accountStatManager = new StatisticsManager();
		        init();
		    }
				
",
,
		fromLine:"		140",
		toLine:"		218",
		oldContent:"
		        init();
		    }
		
		    public void init() {
		        // Initialization with extracted constants
		        momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);
		
		        if (enableQueueStat) {
		            this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        }
		        // Other constants refactored into StatsConstants class
		        this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_ACK_NUMS, new StatsItemSet(StatsConstants.GROUP_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_CK_NUMS, new StatsItemSet(StatsConstants.GROUP_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.TOPIC_PUT_LATENCY, new StatsItemSet(StatsConstants.TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.DLQ_PUT_NUMS, new StatsItemSet(StatsConstants.DLQ_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_ACK_NUMS, new StatsItemSet(StatsConstants.BROKER_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_CK_NUMS, new StatsItemSet(StatsConstants.BROKER_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(StatsConstants.BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(StatsConstants.BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		
		        this.statsTable.put(StatsConstants.SNDBCK2DLQ_TIMES,
		            new StatsItemSet(StatsConstants.SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
		
		        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor,		
",
,
		fromLine:"		308",
		toLine:"		361",
		content:"
		
		        return null;
		    }
		
		    public void onTopicDeleted(final String topic) {
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
		        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
		        }
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }
		
		    public void onGroupDeleted(final String group) {
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
		        }
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
		        }
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
		        }
		    }
		
		    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
		        }
		    }
		
		    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {		
",
,

	],

}
