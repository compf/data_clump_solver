refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		134",
		toLine:"		139",
		oldContent:"
		momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
		newContent:"
		momentStatsItemSetFallSize = new MomentStatsItemSet("GROUP_GET_FALL_SIZE",
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet("GROUP_GET_FALL_TIME",
		            scheduledExecutorService, log);		
",
,
		fromLine:"		141",
		toLine:"		159",
		oldContent:"
		this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));		
",
		newContent:"
		this.statsTable.put("QUEUE_PUT_NUMS", new StatsItemSet("QUEUE_PUT_NUMS", this.scheduledExecutorService, log));
		            this.statsTable.put("QUEUE_PUT_SIZE", new StatsItemSet("QUEUE_PUT_SIZE", this.scheduledExecutorService, log));
		            this.statsTable.put("QUEUE_GET_NUMS", new StatsItemSet("QUEUE_GET_NUMS", this.scheduledExecutorService, log));
		            this.statsTable.put("QUEUE_GET_SIZE", new StatsItemSet("QUEUE_GET_SIZE", this.scheduledExecutorService, log));		
",
,
		fromLine:"		160",
		toLine:"		160",
		oldContent:"
				
",
		newContent:"
		this.statsTable.put("TOPIC_PUT_NUMS", new StatsItemSet("TOPIC_PUT_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("TOPIC_PUT_SIZE", new StatsItemSet("TOPIC_PUT_SIZE", this.scheduledExecutorService, log));
		        this.statsTable.put("GROUP_GET_NUMS", new StatsItemSet("GROUP_GET_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("GROUP_GET_SIZE", new StatsItemSet("GROUP_GET_SIZE", this.scheduledExecutorService, log));
		        this.statsTable.put("GROUP_GET_LATENCY", new StatsItemSet("GROUP_GET_LATENCY", this.scheduledExecutorService, log));
		        this.statsTable.put("SNDBCK_PUT_NUMS", new StatsItemSet("SNDBCK_PUT_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("BROKER_PUT_NUMS", new StatsItemSet("BROKER_PUT_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("BROKER_GET_NUMS", new StatsItemSet("BROKER_GET_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("GROUP_GET_FROM_DISK_NUMS", new StatsItemSet("GROUP_GET_FROM_DISK_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("GROUP_GET_FROM_DISK_SIZE", new StatsItemSet("GROUP_GET_FROM_DISK_SIZE", this.scheduledExecutorService, log));
		        this.statsTable.put("BROKER_GET_FROM_DISK_NUMS", new StatsItemSet("BROKER_GET_FROM_DISK_NUMS", this.scheduledExecutorService, log));
		        this.statsTable.put("BROKER_GET_FROM_DISK_SIZE", new StatsItemSet("BROKER_GET_FROM_DISK_SIZE", this.scheduledExecutorService, log));
		        this.statsTable.put("COMMERCIAL_SEND_TIMES", new StatsItemSet("COMMERCIAL_SEND_TIMES", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_RCV_TIMES", new StatsItemSet("COMMERCIAL_RCV_TIMES", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_SEND_SIZE", new StatsItemSet("COMMERCIAL_SEND_SIZE", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_RCV_SIZE", new StatsItemSet("COMMERCIAL_RCV_SIZE", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_RCV_EPOLLS", new StatsItemSet("COMMERCIAL_RCV_EPOLLS", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_SNDBCK_TIMES", new StatsItemSet("COMMERCIAL_SNDBCK_TIMES", this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put("COMMERCIAL_PERM_FAILURES", new StatsItemSet("COMMERCIAL_PERM_FAILURES", this.commercialExecutor, COMMERCIAL_LOG));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		94",
		toLine:"		101",
		oldContent:"
		final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;		
",
		newContent:"
		final long fallBehind) {
		        String lmqGroup = queueStatsId.getGroup();
		        String lmqTopic = queueStatsId.getTopic();
		        if (MixAll.isLmq(queueStatsId.getGroup())) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(queueStatsId.getTopic())) {
		            lmqTopic = MixAll.LMQ_PREFIX;		
",
,
		fromLine:"		106",
		toLine:"		113",
		oldContent:"
		final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;		
",
		newContent:"
		final long fallBehind) {
		        String lmqGroup = queueStatsId.getGroup();
		        String lmqTopic = queueStatsId.getTopic();
		        if (MixAll.isLmq(queueStatsId.getGroup())) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(queueStatsId.getTopic())) {
		            lmqTopic = MixAll.LMQ_PREFIX;		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/main/java/org/apache/rocketmq/common/stats/QueueStatsId.java:"
	package org.apache.rocketmq.common.stats;
	
	public class QueueStatsId {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	
	    public QueueStatsId(String group, String topic, int queueId) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	}
		
",

}
