refactorings:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
	[
		fromLine:"		20",
		toLine:"		47",
		oldContent:"
		
		    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
		    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
		    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
		    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
		    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
		    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
		    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
		    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
		    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
		    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
		    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
		    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
		    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
		    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
		    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
		    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
		    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
		    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
		    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
		    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
		    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
		    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
		
		    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
		    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
		    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
		}		
",
		newContent:"
				
",
,

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		44",
		toLine:"		70",
		oldContent:"
		
		    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
		    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
		    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
		    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
		    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
		    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
		
		    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;
		
		    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
		    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
		    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
		    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;
		    // For commercial
		    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
		    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
		    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
		    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
		    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
		    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;
				
",
		newContent:"
				
",
,
		fromLine:"		109",
		toLine:"		114",
		oldContent:"
		
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    // Pull Message Latency
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
				
",
		newContent:"
				
",
,
		fromLine:"		584",
		toLine:"		587",
		oldContent:"
		
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);		
",
		newContent:"
		
		    public void recordDiskFallBehindTime(final FallBehindInfo fallBehindInfo) {
		        final String statsKey = buildStatsKey(fallBehindInfo);		
",
,
		fromLine:"		590",
		toLine:"		593",
		oldContent:"
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);		
",
		newContent:"
		
		    public void recordDiskFallBehindSize(final FallBehindInfo fallBehindInfo) {
		        final String statsKey = buildStatsKey(fallBehindInfo);		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		300",
		toLine:"		302",
		oldContent:"
		
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);		
",
		newContent:"
		
		    public Pair<Long, Long> getConsumerLagStats(ConsumerLagQuery query) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(query.getTopic(), query.getQueueId());		
",
,
		fromLine:"		439",
		toLine:"		441",
		oldContent:"
		
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;		
",
		newContent:"
		
		    public long calculateMessageCount(MessageCountQuery query) {
		        long count = query.getTo() - query.getFrom();		
",
,

	],

}
extractedClasses:
{
	store/src/main/java/org/apache/rocketmq/store/stats/FallBehindInfo.java:"
	package org.apache.rocketmq.store.stats;
	
	public class FallBehindInfo {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final long fallBehind;
	
	    public FallBehindInfo(String group, String topic, int queueId, long fallBehind) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.fallBehind = fallBehind;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public long getFallBehind() {
	        return fallBehind;
	    }
	}	
",
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagQuery.java:"
	package org.apache.rocketmq.broker.metrics;
	
	public class ConsumerLagQuery {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final boolean isPop;
	
	    public ConsumerLagQuery(String group, String topic, int queueId, boolean isPop) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.isPop = isPop;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public boolean isPop() {
	        return isPop;
	    }
	}	
",
	broker/src/main/java/org/apache/rocketmq/broker/metrics/MessageCountQuery.java:"
	package org.apache.rocketmq.broker.metrics;
	
	public class MessageCountQuery {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final long from;
	    private final long to;
	
	    public MessageCountQuery(String group, String topic, int queueId, long from, long to) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.from = from;
	        this.to = to;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public long getFrom() {
	        return from;
	    }
	
	    public long getTo() {
	        return to;
	    }
	}	
",

}
