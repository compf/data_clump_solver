"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 939,
                "toLine": 941,
                "oldContent": "brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);",
                "newContent": "brokerStatsManager.recordDiskFallBehindSize(new DiskFallBehindKey(group, topic, queueId), fallBehind);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 134,
                "toLine": 139,
                "oldContent": "momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);",
                "newContent": "momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);"
            },
            {
                "fromLine": 141,
                "toLine": 159,
                "oldContent": "this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));",
                "newContent": "this.statsTable.put(StatsItemKey.QUEUE_PUT_NUMS, new StatsItemSet(StatsItemKey.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));"
            }
            ,
            {
                "fromLine": 176,
                "toLine": 191,
                "oldContent": "this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));",
                "newContent": "this.statsTable.put(StatsItemKey.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(StatsItemKey.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java": [
            {
                "fromLine": 91,
                "toLine": 93,
                "oldContent": "public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,",
                "newContent": "public void recordDiskFallBehindTime(final DiskFallBehindKey key,"
            },
            {
                "fromLine": 102,
                "toLine": 107,
                "oldContent": "super.recordDiskFallBehindTime(lmqGroup, lmqTopic, queueId, fallBehind);",
                "newContent": "super.recordDiskFallBehindTime(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);"
            },
            {
                "fromLine": 116,
                "toLine": 118,
                "oldContent": "super.recordDiskFallBehindSize(lmqGroup, lmqTopic, queueId, fallBehind);",
                "newContent": "super.recordDiskFallBehindSize(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);"
            }
        ]
    },
    "extractedClasses": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/StatsItemKey.java": "package org.apache.rocketmq.store.stats;\n\npublic enum StatsItemKey {\n    QUEUE_PUT_NUMS(\"QUEUE_PUT_NUMS\"),\n    QUEUE_PUT_SIZE(\"QUEUE_PUT_SIZE\"),\n    QUEUE_GET_NUMS(\"QUEUE_GET_NUMS\"),\n    QUEUE_GET_SIZE(\"QUEUE_GET_SIZE\"),\n    TOPIC_PUT_NUMS(\"TOPIC_PUT_NUMS\"),\n    TOPIC_PUT_SIZE(\"TOPIC_PUT_SIZE\"),\n    GROUP_GET_NUMS(\"GROUP_GET_NUMS\"),\n    GROUP_GET_SIZE(\"GROUP_GET_SIZE\"),\n    SNDBCK_PUT_NUMS(\"SNDBCK_PUT_NUMS\"),\n    BROKER_PUT_NUMS(\"BROKER_PUT_NUMS\"),\n    BROKER_GET_NUMS(\"BROKER_GET_NUMS\"),\n    GROUP_GET_FROM_DISK_NUMS(\"GROUP_GET_FROM_DISK_NUMS\"),\n    GROUP_GET_FROM_DISK_SIZE(\"GROUP_GET_FROM_DISK_SIZE\"),\n    BROKER_GET_FROM_DISK_NUMS(\"BROKER_GET_FROM_DISK_NUMS\"),\n    BROKER_GET_FROM_DISK_SIZE(\"BROKER_GET_FROM_DISK_SIZE\"),\n    COMMERCIAL_SEND_TIMES(\"COMMERCIAL_SEND_TIMES\"),\n    COMMERCIAL_SNDBCK_TIMES(\"COMMERCIAL_SNDBCK_TIMES\"),\n    COMMERCIAL_RCV_TIMES(\"COMMERCIAL_RCV_TIMES\"),\n    COMMERCIAL_RCV_EPOLLS(\"COMMERCIAL_RCV_EPOLLS\"),\n    COMMERCIAL_SEND_SIZE(\"COMMERCIAL_SEND_SIZE\"),\n    COMMERCIAL_RCV_SIZE(\"COMMERCIAL_RCV_SIZE\"),\n    COMMERCIAL_PERM_FAILURES(\"COMMERCIAL_PERM_FAILURES\"),\n\n    GROUP_GET_FALL_SIZE(\"GROUP_GET_FALL_SIZE\"),\n    GROUP_GET_FALL_TIME(\"GROUP_GET_FALL_TIME\"),\n    GROUP_GET_LATENCY(\"GROUP_GET_LATENCY\");\n\n    private final String key;\n\n    StatsItemKey(String key) {\n        this.key = key;\n    }\n\n    public String getKey() {\n        return key;\n    }\n\n    public static StatsItemKey fromString(String text) {\n        if (text != null) {\n          for (StatsItemKey b : StatsItemKey.values()) {\n            if (text.equalsIgnoreCase(b.key)) {\n              return b;\n            }\n          }\n        }\n        return null;\n      }\n}\n"
    }
}"