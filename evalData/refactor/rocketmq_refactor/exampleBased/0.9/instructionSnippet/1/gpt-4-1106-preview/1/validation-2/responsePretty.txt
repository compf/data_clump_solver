"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 42,
                "oldContent": "import java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;",
                "newContent": "import org.apache.rocketmq.common.stats.StatsKey;\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java": [
            {
                "fromLine": 91,
                "toLine": 114,
                "oldContent": " public void recordDiskFallBehindTime(final StatsKey statsKey, final long fallBehind) {\n        String lmqGroup = statsKey.getGroup();\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);\n        super.recordDiskFallBehindTime(statsKey, fallBehind);\n    }\n    public void recordDiskFallBehindSize(final StatsKey statsKey, final long fallBehind) {\n        String lmqGroup = statsKey.getGroup();\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);\n        super.recordDiskFallBehindSize(statsKey, fallBehind);",
                "newContent": " public void recordDiskFallBehindTime(final String group, final String topic, final int queueId, final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);\n        super.recordDiskFallBehindTime(statsKey, fallBehind);\n    }\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId, final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);\n        super.recordDiskFallBehindSize(statsKey, fallBehind);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 116,
                "oldContent": "import com.google.common.collect.Sets;\nimport com.google.common.hash.Hashing;\nimport io.openmessaging.storage.dledger.entry.DLedgerEntry;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.Inet6Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.function.Supplier;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.rocketmq.common.AbstractBrokerRunnable;\nimport org.apache.rocketmq.common.BoundaryType;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.BrokerIdentity;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.SystemClock;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.attribute.CQType;\nimport org.apache.rocketmq.common.attribute.CleanupPolicy;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBatch;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.running.RunningStats;\nimport org.apache.rocketmq.common.sysflag MessageSysFlag;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.CleanupPolicyUtils;\nimport org.apache.rocketmq.common.utils.QueueTypeUtils;\nimport org.apache.rocketmq.common.utils.ServiceProvider;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;\nimport org.apache.rocketmq.store.config.BrokerRole;\nimport org.apache.rocketmq.store.config.FlushDiskType;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\nimport org.apache.rocketmq.store.dledger.DLedgerCommitLog;\nimport org.apache.rocketmq.store.ha.DefaultHAService;\nimport org.apache.rocketmq.store.ha.HAService;\nimport org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;\nimport org.apache.rocketmq.store.hook.PutMessageHook;\nimport org.apache.rocketmq.store.hook.SendMessageBackHook;\nimport org.apache.rocketmq.store.index.IndexService;\nimport org.apache.rocketmq.store.index.QueryOffsetResult;\nimport org.apache.rocketmq.store.kv.CommitLogDispatcherCompaction;\nimport org.apache.rocketmq.store.kv.CompactionService;\nimport org.apache.rocketmq.store.kv.CompactionStore;\nimport org.apache.rocketmq.store.logfile.MappedFile;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStore;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\n",
                "newContent": "import org.apache.rocketmq.common.stats.StatsKey;\nimport com.google.common.collect.Sets;\nimport com.google.common.hash.Hashing;\nimport io.openmessaging.storage.dledger.entry.DLedgerEntry;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.Inet6Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\n"
            }
        ]
    },
    "extractedClasses": {}
}"