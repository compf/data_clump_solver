refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		42",
		oldContent:"
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.Stats;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;		
",
		newContent:"
		import org.apache.rocketmq.common.stats.StatsKey;
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.Stats;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		91",
		toLine:"		114",
		oldContent:"
		 public void recordDiskFallBehindTime(final StatsKey statsKey, final long fallBehind) {
		        String lmqGroup = statsKey.getGroup();
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);
		        super.recordDiskFallBehindTime(statsKey, fallBehind);
		    }
		    public void recordDiskFallBehindSize(final StatsKey statsKey, final long fallBehind) {
		        String lmqGroup = statsKey.getGroup();
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);
		        super.recordDiskFallBehindSize(statsKey, fallBehind);		
",
		newContent:"
		 public void recordDiskFallBehindTime(final String group, final String topic, final int queueId, final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);
		        super.recordDiskFallBehindTime(statsKey, fallBehind);
		    }
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId, final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        StatsKey statsKey = new StatsKey(lmqGroup, lmqTopic, queueId);
		        super.recordDiskFallBehindSize(statsKey, fallBehind);		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		16",
		toLine:"		116",
		oldContent:"
		import com.google.common.collect.Sets;
		import com.google.common.hash.Hashing;
		import io.openmessaging.storage.dledger.entry.DLedgerEntry;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
		import java.io.File;
		import java.io.IOException;
		import java.io.RandomAccessFile;
		import java.net.Inet6Address;
		import java.net.InetSocketAddress;
		import java.net.SocketAddress;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileLock;
		import java.nio.charset.StandardCharsets;
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Map;
		import java.util.Objects;
		import java.util.Optional;
		import java.util.Set;
		import java.util.concurrent.CompletableFuture;
		import java.util.concurrent.ConcurrentHashMap;
		import java.util.concurrent.ConcurrentLinkedQueue;
		import java.util.concurrent.ConcurrentMap;
		import java.util.concurrent.ConcurrentSkipListMap;
		import java.util.concurrent.ExecutionException;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.LinkedBlockingQueue;
		import java.util.concurrent.ScheduledExecutorService;
		import java.util.concurrent.ThreadPoolExecutor;
		import java.util.concurrent.TimeUnit;
		import java.util.concurrent.TimeoutException;
		import java.util.concurrent.atomic.AtomicInteger;
		import java.util.concurrent.atomic.AtomicLong;
		import java.util.function.Supplier;
		import org.apache.commons.lang3.StringUtils;
		import org.apache.rocketmq.common.AbstractBrokerRunnable;
		import org.apache.rocketmq.common.BoundaryType;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.BrokerIdentity;
		import org.apache.rocketmq.common.MixAll;
		import org.apache.rocketmq.common.Pair;
		import org.apache.rocketmq.common.ServiceThread;
		import org.apache.rocketmq.common.SystemClock;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.attribute.CQType;
		import org.apache.rocketmq.common.attribute.CleanupPolicy;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.message.MessageConst;
		import org.apache.rocketmq.common.message.MessageDecoder;
		import org.apache.rocketmq.common.message.MessageExt;
		import org.apache.rocketmq.common.message.MessageExtBatch;
		import org.apache.rocketmq.common.message.MessageExtBrokerInner;
		import org.apache.rocketmq.common.running.RunningStats;
		import org.apache.rocketmq.common.sysflag MessageSysFlag;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
		import org.apache.rocketmq.common.utils.QueueTypeUtils;
		import org.apache.rocketmq.common.utils.ServiceProvider;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
		import org.apache.rocketmq.store.config.BrokerRole;
		import org.apache.rocketmq.store.config.FlushDiskType;
		import org.apache.rocketmq.store.config.MessageStoreConfig;
		import org.apache.rocketmq.store.config.StorePathConfigHelper;
		import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
		import org.apache.rocketmq.store.ha.DefaultHAService;
		import org.apache.rocketmq.store.ha.HAService;
		import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
		import org.apache.rocketmq.store.hook.PutMessageHook;
		import org.apache.rocketmq.store.hook.SendMessageBackHook;
		import org.apache.rocketmq.store.index.IndexService;
		import org.apache.rocketmq.store.index.QueryOffsetResult;
		import org.apache.rocketmq.store.kv.CommitLogDispatcherCompaction;
		import org.apache.rocketmq.store.kv.CompactionService;
		import org.apache.rocketmq.store.kv.CompactionStore;
		import org.apache.rocketmq.store.logfile.MappedFile;
		import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
		import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
		import org.apache.rocketmq.store.queue.ConsumeQueueStore;
		import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
				
",
		newContent:"
		import org.apache.rocketmq.common.stats.StatsKey;
		import com.google.common.collect.Sets;
		import com.google.common.hash.Hashing;
		import io.openmessaging.storage.dledger.entry.DLedgerEntry;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
		import java.io.File;
		import java.io.IOException;
		import java.io.RandomAccessFile;
		import java.net.Inet6Address;
		import java.net.InetSocketAddress;
		import java.net.SocketAddress;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileLock;
		import java.nio.charset.StandardCharsets;
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.HashMap;
		import java.util.HashSet;
				
",
,

	],

}
extractedClasses:
{

}
