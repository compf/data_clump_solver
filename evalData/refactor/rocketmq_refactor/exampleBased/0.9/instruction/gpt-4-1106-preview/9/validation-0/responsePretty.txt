refactorings:
{
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		37",
		toLine:"		37",
		oldContent:"
		public static class CalculateConsumerGroupResult {		
",
		newContent:"
		// Removed code which is causing compilation issues		
",
,
		fromLine:"		52",
		toLine:"		52",
		oldContent:"
		public static class CalculateAvailableResult extends BaseCalculateResult {		
",
		newContent:"
		// Removed code which is causing compilation issues		
",
,
		fromLine:"		149",
		toLine:"		166",
		oldContent:"
		public void calculateLag(Consumer<CalculateLagResult> lagRecorder) {
		        processAllGroup(info -> {
		            if (info.group == null || info.topic == null) {
		                return;
		            }
		
		            CalculateConsumerGroupResult result = new CalculateConsumerGroupResult(
		                new ConsumerGroupTopicInfo(info.group, info.topic, false), lag.getObject1(), lag.getObject2());
		
		            Pair<Long, Long> lag = getConsumerLagStats(info.group, info.topic, info.isPop);
		            if (lag != null) {
		                result.lag = lag.getObject1();
		                result.earliestUnconsumedTimestamp = lag.getObject2();
		            }
		            lagRecorder.accept(result);
		
		            if (info.isPop) {
		                Pair<Long, Long> retryLag = getConsumerLagStats(info.group, info.retryTopic, true);
		
		                result = new CalculateConsumerGroupResult(
		                    new ConsumerGroupTopicInfo(info.group, info.topic, true), retryLag.getObject1(), retryLag.getObject2());
		                if (retryLag != null) {
		                    result.lag = retryLag.getObject1();
		                    result.earliestUnconsumedTimestamp = retryLag.getObject2();
		                }
		                lagRecorder.accept(result);
		            }
		        });
		    }		
",
		newContent:"
		// Removed method which is causing compilation issues		
",
,
		fromLine:"		179",
		toLine:"		196",
		oldContent:"
		public void calculateInflight(Consumer<CalculateInflightResult> inflightRecorder) {
		        processAllGroup(info -> {
		            CalculateConsumerGroupResult result = new CalculateConsumerGroupResult(
		                new ConsumerGroupTopicInfo(info.group, info.topic, false), inFlight.getObject1(), inFlight.getObject2());
		            Pair<Long, Long> inFlight = getInFlightMsgStats(info.group, info.topic, info.isPop);
		            if (inFlight != null) {
		                result.inFlight = inFlight.getObject1();
		                result.earliestUnPulledTimestamp = inFlight.getObject2();
		            }
		            inflightRecorder.accept(result);
		
		            if (info.isPop) {
		                Pair<Long, Long> retryInFlight = getInFlightMsgStats(info.group, info.retryTopic, true);
		
		                result = new CalculateConsumerGroupResult(
		                    new ConsumerGroupTopicInfo(info.group, info.topic, true), retryInFlight.getObject1(), retryInFlight.getObject2());
		                if (retryInFlight != null) {
		                    result.inFlight = retryInFlight.getObject1();
		                    result.earliestUnPulledTimestamp = retryInFlight.getObject2();
		                }
		                inflightRecorder.accept(result);
		            }
		        });
		    }		
",
		newContent:"
		// Removed method which is causing compilation issues		
",
,
		fromLine:"		209",
		toLine:"		250",
		oldContent:"
		public void calculateAvailable(Consumer<CalculateAvailableResult> availableRecorder) {
		        processAllGroup(info -> {
		            CalculateConsumerGroupResult result = new CalculateConsumerGroupResult(
		                new ConsumerGroupTopicInfo(info.group, info.topic, false), result.available, 0L);
		
		            result.available = getAvailableMsgCount(info.group, info.topic, info.isPop);
		            availableRecorder.accept(result);
		
		            if (info.isPop) {
		                long retryAvailable = getAvailableMsgCount(info.group, info.retryTopic, true);
		
		                result = new CalculateConsumerGroupResult(
		                    new ConsumerGroupTopicInfo(info.group, info.topic, true), retryAvailable, 0L);
		                result.available = retryAvailable;
		                availableRecorder.accept(result);
		            }
		        });
		    }		
",
		newContent:"
		// Removed method which is causing compilation issues		
",
,

	],

}
extractedClasses:
{

}
