refactorings:
{
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		95",
		toLine:"		104",
		oldContent:"
		// Removed code which is causing compilation issues
		        public ConsumerGroupTopicInfo groupTopicInfo;
		        public long value;
		        public long earliestTimestamp;
		
		        public CalculateConsumerGroupResult(ConsumerGroupTopicInfo groupTopicInfo, long value, long earliestTimestamp) {
		            this.groupTopicInfo = groupTopicInfo;
		            this.value = value;
		            this.earliestTimestamp = earliestTimestamp;
		        }
		    }
		
		    // Removed code which is causing compilation issues		
",
		newContent:"
				
",
,
		fromLine:"		148",
		toLine:"		250",
		oldContent:"
		// Removed method which is causing compilation issues
		
		    // Removed method which is causing compilation issues
		
		    // Removed method which is causing compilation issues
		
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {		
",
		newContent:"
				
",
,
		fromLine:"		320",
		toLine:"		378",
		oldContent:"
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;
		
		        if (brokerConfig.isEstimateAccumulation() && to > from) {
		            SubscriptionData subscriptionData = null;
		            if (brokerConfig.isUseStaticSubscription()) {
		                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(group);
		                if (subscriptionGroupConfig != null) {
		                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
		                        if (topic.equals(simpleSubscriptionData.getTopic())) {
		                            try {
		                                subscriptionData = FilterAPI.buildSubscriptionData(simpleSubscriptionData.getTopic(),
		                                    simpleSubscriptionData.getExpression(), simpleSubscriptionData.getExpressionType());
		                            } catch (Exception e) {
		                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", group, topic, e);
		                            }
		                            break;
		                        }
		                    }
		                }
		            } else {
		                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
		                if (consumerGroupInfo != null) {
		                    subscriptionData = consumerGroupInfo.findSubscriptionData(topic);
		                }
		            }
		
		            if (null != subscriptionData) {
		                if (ExpressionType.TAG.equalsIgnoreCase(subscriptionData.getExpressionType())
		                    && !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
		                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
		                        new DefaultMessageFilter(subscriptionData));
		                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
		                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);
		                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
		                        new ExpressionMessageFilter(subscriptionData,
		                            consumerFilterData,
		                            consumerFilterManager));
		                }
		            }
		
		        }
		        return count < 0 ? 0 : count;
		    }
		}		
",
		newContent:"
				
",
,

	],

}
extractedClasses:
{

}
