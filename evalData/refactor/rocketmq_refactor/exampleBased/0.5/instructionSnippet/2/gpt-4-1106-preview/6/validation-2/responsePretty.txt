refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java:
	[
		fromLine:"		17",
		toLine:"		40",
		oldContent:"
		
		package org.apache.rocketmq.store.stats;
		
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.junit.After;
		import org.junit.Assert;
		import org.junit.Before;
		import org.junit.Test;
		
		import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;
		import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;
		import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;
		import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;
		import static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;
		import static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;
		import static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;
		import static org.assertj.core.api.Assertions.assertThat;
				
",
		newContent:"
		
		package org.apache.rocketmq.store.stats;
		
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.junit.After;
		import org.junit.Assert;
		import org.junit.Before;
		import org.junit.Test;
		
		import static org.apache.rocketmq.common.stats.StatsConstants.BROKER_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_FALL_SIZE;
		import static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_FALL_TIME;
		import static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_LATENCY;
		import static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_SIZE;
		import static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_GET_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_GET_SIZE;
		import static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_PUT_SIZE;
		import static org.apache.rocketmq.common.stats.StatsConstants.SNDBCK_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.TOPIC_PUT_NUMS;
		import static org.apache.rocketmq.common.stats.StatsConstants.TOPIC_PUT_SIZE;
		import static org.assertj.core.api.Assertions.assertThat;
				
",
,
		fromLine:"		67",
		toLine:"		73",
		oldContent:"
		        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));
		        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);
		        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);
		        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);
		        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);
		    }
				
",
,
		fromLine:"		76",
		toLine:"		80",
		oldContent:"
		        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));
		        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);
		    }
				
",
,
		fromLine:"		83",
		toLine:"		87",
		oldContent:"
		        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);
		        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);
		        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		90",
		toLine:"		94",
		oldContent:"
		        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);
		        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);
		        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		96",
		toLine:"		102",
		oldContent:"
		    public void testIncTopicPutNums() {
		        brokerStatsManager.incTopicPutNums(TOPIC);
		        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);
		        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);
		        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);
		    }
				
",
		newContent:"
		    public void testIncTopicPutNums() {
		        brokerStatsManager.incTopicPutNums(TOPIC);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);
		        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);
		    }
				
",
,
		fromLine:"		104",
		toLine:"		108",
		oldContent:"
		    public void testIncTopicPutSize() {
		        brokerStatsManager.incTopicPutSize(TOPIC, 2);
		        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);
		    }
				
",
		newContent:"
		    public void testIncTopicPutSize() {
		        brokerStatsManager.incTopicPutSize(TOPIC, 2);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);
		    }
				
",
,
		fromLine:"		111",
		toLine:"		115",
		oldContent:"
		        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		118",
		toLine:"		122",
		oldContent:"
		        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);
		        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		125",
		toLine:"		129",
		oldContent:"
		        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);
		        String statsKey = String.format("%d@%s@%s", 1, TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);
		        String statsKey = String.format("%d@%s@%s", 1, TOPIC, GROUP_NAME);
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		131",
		toLine:"		135",
		oldContent:"
		    public void testIncBrokerPutNums() {
		        brokerStatsManager.incBrokerPutNums();
		        assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
		newContent:"
		    public void testIncBrokerPutNums() {
		        brokerStatsManager.incBrokerPutNums();
		        assertThat(brokerStatsManager.getStatsItem(StatsConstants.BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);
		    }
				
",
,
		fromLine:"		151",
		toLine:"		166",
		oldContent:"
		        brokerStatsManager.onTopicDeleted(TOPIC);
		
		        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));
		        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + "@" + QUEUE_ID));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + "@" + QUEUE_ID));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, "1@" + TOPIC + "@" + GROUP_NAME));
		    }
				
",
		newContent:"
		        brokerStatsManager.onTopicDeleted(TOPIC);
		
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_SIZE, TOPIC));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, TOPIC + "@" + QUEUE_ID));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_SIZE, TOPIC + "@" + QUEUE_ID));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_TIME, "1@" + TOPIC + "@" + GROUP_NAME));
		    }
				
",
,
		fromLine:"		178",
		toLine:"		189",
		oldContent:"
		        brokerStatsManager.onGroupDeleted(GROUP_NAME);
		
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, "1@" + TOPIC + "@" + GROUP_NAME));
		    }
				
",
		newContent:"
		        brokerStatsManager.onGroupDeleted(GROUP_NAME);
		
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));
		        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_TIME, "1@" + TOPIC + "@" + GROUP_NAME));
		    }
				
",
,

	],

}
