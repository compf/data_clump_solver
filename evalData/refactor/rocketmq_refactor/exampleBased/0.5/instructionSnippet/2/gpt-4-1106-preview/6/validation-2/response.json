{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 40,
                "oldContent": "\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n",
                "newContent": "\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.StatsConstants.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.StatsConstants.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.StatsConstants.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n"
            },
            {
                "fromLine": 67,
                "toLine": 73,
                "oldContent": "        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }\n",
                "newContent": "        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }\n"
            },
            {
                "fromLine": 76,
                "toLine": 80,
                "oldContent": "        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }\n",
                "newContent": "        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }\n"
            },
            {
                "fromLine": 83,
                "toLine": 87,
                "oldContent": "        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 90,
                "toLine": 94,
                "oldContent": "        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 96,
                "toLine": 102,
                "oldContent": "    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }\n",
                "newContent": "    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }\n"
            },
            {
                "fromLine": 104,
                "toLine": 108,
                "oldContent": "    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }\n",
                "newContent": "    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }\n"
            },
            {
                "fromLine": 111,
                "toLine": 115,
                "oldContent": "        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 118,
                "toLine": 122,
                "oldContent": "        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 125,
                "toLine": 129,
                "oldContent": "        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 131,
                "toLine": 135,
                "oldContent": "    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }\n",
                "newContent": "    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(StatsConstants.BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }\n"
            },
            {
                "fromLine": 151,
                "toLine": 166,
                "oldContent": "        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n",
                "newContent": "        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n"
            },
            {
                "fromLine": 178,
                "toLine": 189,
                "oldContent": "        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n",
                "newContent": "        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsConstants.GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n"
            }
        ]
    }
}