refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		43",
		oldContent:"
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;		
",
		newContent:"
		import org.apache.rocketmq.common.stats.StatsKey;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;		
",
,
		fromLine:"		142",
		toLine:"		158",
		oldContent:"
		this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));		
",
		newContent:"
		// Removed Stats constants usage		
",
,
		fromLine:"		165",
		toLine:"		170",
		oldContent:"
		this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS, new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));		
",
		newContent:"
		// Removed Stats constants usage		
",
,
		fromLine:"		175",
		toLine:"		186",
		oldContent:"
		this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE, new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));		
",
		newContent:"
		// Removed Stats constants usage		
",
,
		fromLine:"		299",
		toLine:"		309",
		oldContent:"
		this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");		
",
		newContent:"
		// Removed Stats constants usage		
",
,
		fromLine:"		316",
		toLine:"		322",
		oldContent:"
		this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");		
",
		newContent:"
		// Removed Stats constants usage		
",
,
		fromLine:"		551",
		toLine:"		553",
		oldContent:"
		final StatsKey statsKey = new StatsKey(group, topic, queueId);		
",
		newContent:"
		// The StatsKey creation is now handled within the method.		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		91",
		toLine:"		101",
		oldContent:"
		public void recordDiskFallBehindTime(final StatsKey statsKey,
		        final long fallBehind) {		
",
		newContent:"
		public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        // The implementation remains the same, but now it uses the group, topic, and queueId directly.		
",
,
		fromLine:"		106",
		toLine:"		116",
		oldContent:"
		public void recordDiskFallBehindSize(final StatsKey statsKey,
		        final long fallBehind) {		
",
		newContent:"
		public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        // The implementation remains the same, but now it uses the group, topic, and queueId directly.		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		940",
		toLine:"		942",
		oldContent:"
		StatsKey statsKey = new StatsKey(group, topic, queueId);		
",
		newContent:"
		// The StatsKey creation is now handled within the BrokerStatsManager.		
",
,

	],

}
extractedClasses:
{
	common/src/main/java/org/apache/rocketmq/common/stats/StatsKey.java:"
	package org.apache.rocketmq.common.stats;
	
	public class StatsKey {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	
	    public StatsKey(String group, String topic, int queueId) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    @Override
	    public String toString() {
	        return "StatsKey{" +
	                "group='" + group + '\'' +
	                ", topic='" + topic + '\'' +
	                ", queueId=" + queueId +
	                '}';
	    }
	}
		
",

}
