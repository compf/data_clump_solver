refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java:
	[
		fromLine:"		297",
		toLine:"		299",
		oldContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp);		
",
		newContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(new org.apache.rocketmq.store.stats.DiskFallBehindStats(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java:
	[
		fromLine:"		805",
		toLine:"		807",
		oldContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,
		            this.brokerController.getMessageStore().now() - storeTimestamp);		
",
		newContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(new org.apache.rocketmq.store.stats.DiskFallBehindStats(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		285",
		toLine:"		287",
		oldContent:"
		Pair<Long, Long> pair = getConsumerLagStats(group, topic, queueId, isPop);		
",
		newContent:"
		Pair<Long, Long> pair = getConsumerLagStats(new ConsumerLagStatsRequest(group, topic, queueId, isPop));		
",
,
		fromLine:"		305",
		toLine:"		310",
		oldContent:"
		if (isPop) {
		            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
		            if (pullOffset < 0) {
		                pullOffset = offsetManager.queryOffset(group, topic, queueId);
		            }		
",
		newContent:"
		if (isPop) {
		            long pullOffset = popBufferMergeService.getLatestOffset(request.getTopic(), request.getGroup(), request.getQueueId());
		            if (pullOffset < 0) {
		                pullOffset = offsetManager.queryOffset(request.getGroup(), request.getTopic(), request.getQueueId());
		            }		
",
,
		fromLine:"		313",
		toLine:"		318",
		oldContent:"
		long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
		            long lag = calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset) + inFlightNum;
		            long consumerOffset = pullOffset - inFlightNum;
		            long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
		            return new Pair<>(lag, consumerStoreTimeStamp);		
",
		newContent:"
		long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(request.getTopic(), request.getGroup(), request.getQueueId());
		            long lag = calculateMessageCount(new MessageCountRequest(request.getGroup(), request.getTopic(), request.getQueueId(), pullOffset, brokerOffset)) + inFlightNum;
		            long consumerOffset = pullOffset - inFlightNum;
		            long consumerStoreTimeStamp = getStoreTimeStamp(request.getTopic(), request.getQueueId(), consumerOffset);
		            return new Pair<>(lag, consumerStoreTimeStamp);		
",
,
		fromLine:"		320",
		toLine:"		322",
		oldContent:"
		long consumerOffset = offsetManager.queryOffset(group, topic, queueId);		
",
		newContent:"
		long consumerOffset = offsetManager.queryOffset(request.getGroup(), request.getTopic(), request.getQueueId());		
",
,
		fromLine:"		325",
		toLine:"		328",
		oldContent:"
		long lag = calculateMessageCount(group, topic, queueId, consumerOffset, brokerOffset);
		        long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
		        return new Pair<>(lag, consumerStoreTimeStamp);		
",
		newContent:"
		long lag = calculateMessageCount(new MessageCountRequest(request.getGroup(), request.getTopic(), request.getQueueId(), consumerOffset, brokerOffset));
		        long consumerStoreTimeStamp = getStoreTimeStamp(request.getTopic(), request.getQueueId(), consumerOffset);
		        return new Pair<>(lag, consumerStoreTimeStamp);		
",
,
		fromLine:"		380",
		toLine:"		382",
		oldContent:"
		long inflight = calculateMessageCount(group, topic, queueId, commitOffset, pullOffset);
		        long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);		
",
		newContent:"
		long inflight = calculateMessageCount(new MessageCountRequest(group, topic, queueId, commitOffset, pullOffset));
		        long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);		
",
,
		fromLine:"		426",
		toLine:"		428",
		oldContent:"
		return calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset);		
",
		newContent:"
		return calculateMessageCount(new MessageCountRequest(group, topic, queueId, pullOffset, brokerOffset));		
",
,
		fromLine:"		440",
		toLine:"		448",
		oldContent:"
		if (brokerConfig.isEstimateAccumulation() && to > from) {
		            SubscriptionData subscriptionData = null;
		            if (brokerConfig.isUseStaticSubscription()) {
		                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(group);
		                if (subscriptionGroupConfig != null) {
		                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
		                        if (topic.equals(simpleSubscriptionData.getTopic())) {
		                            try {		
",
		newContent:"
		if (brokerConfig.isEstimateAccumulation() && request.getTo() > request.getFrom()) {
		            SubscriptionData subscriptionData = null;
		            if (brokerConfig.isUseStaticSubscription()) {
		                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(request.getGroup());
		                if (subscriptionGroupConfig != null) {
		                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
		                        if (request.getTopic().equals(simpleSubscriptionData.getTopic())) {
		                            try {		
",
,
		fromLine:"		451",
		toLine:"		453",
		oldContent:"
		} catch (Exception e) {
		                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", group, topic, e);
		                            }		
",
		newContent:"
		} catch (Exception e) {
		                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", request.getGroup(), request.getTopic(), e);
		                            }		
",
,
		fromLine:"		458",
		toLine:"		462",
		oldContent:"
		} else {
		                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
		                if (consumerGroupInfo != null) {
		                    subscriptionData = consumerGroupInfo.findSubscriptionData(topic);
		                }		
",
		newContent:"
		} else {
		                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(request.getGroup(), true);
		                if (consumerGroupInfo != null) {
		                    subscriptionData = consumerGroupInfo.findSubscriptionData(request.getTopic());
		                }		
",
,
		fromLine:"		467",
		toLine:"		473",
		oldContent:"
		&& !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
		                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
		                        new DefaultMessageFilter(subscriptionData));
		                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
		                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);
		                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
		                        new ExpressionMessageFilter(subscriptionData,		
",
		newContent:"
		&& !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
		                    count = messageStore.estimateMessageCount(request.getTopic(), request.getQueueId(), request.getFrom(), request.getTo(),
		                        new DefaultMessageFilter(subscriptionData));
		                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
		                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(request.getTopic(), request.getGroup());
		                    count = messageStore.estimateMessageCount(request.getTopic(), request.getQueueId(), request.getFrom(), request.getTo(),
		                        new ExpressionMessageFilter(subscriptionData,		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java:
	[
		fromLine:"		217",
		toLine:"		219",
		oldContent:"
		brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,
		                        brokerController.getMessageStore().now() - foundList.get(foundList.size() - 1).getStoreTimestamp());		
",
		newContent:"
		brokerController.getBrokerStatsManager().recordDiskFallBehindTime(new org.apache.rocketmq.store.stats.DiskFallBehindStats(group, topic, queueId, brokerController.getMessageStore().now() - foundList.get(foundList.size() - 1).getStoreTimestamp()));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java:
	[
		fromLine:"		144",
		toLine:"		146",
		oldContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,
		                        this.brokerController.getMessageStore().now() - foundList.get(foundList.size() - 1)		
",
		newContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(new org.apache.rocketmq.store.stats.DiskFallBehindStats(group, topic, queueId, this.brokerController.getMessageStore().now() - foundList.get(foundList.size() - 1).getStoreTimestamp()));		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java:
	[
		fromLine:"		266",
		toLine:"		268",
		oldContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp);		
",
		newContent:"
		this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(new org.apache.rocketmq.store.stats.DiskFallBehindStats(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp));		
",
,

	],

}
