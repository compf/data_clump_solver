refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		134",
		toLine:"		139",
		oldContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
		newContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(StatsItemKey.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(StatsItemKey.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
,
		fromLine:"		141",
		toLine:"		159",
		oldContent:"
		        if (enableQueueStat) {
		            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        }
		        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));		
",
		newContent:"
		        if (enableQueueStat) {
		            this.statsTable.put(StatsItemKey.QUEUE_PUT_NUMS, new StatsItemSet(StatsItemKey.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsItemKey.QUEUE_PUT_SIZE, new StatsItemSet(StatsItemKey.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsItemKey.QUEUE_GET_NUMS, new StatsItemSet(StatsItemKey.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(StatsItemKey.QUEUE_GET_SIZE, new StatsItemSet(StatsItemKey.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        }
		        this.statsTable.put(StatsItemKey.TOPIC_PUT_NUMS, new StatsItemSet(StatsItemKey.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.TOPIC_PUT_SIZE, new StatsItemSet(StatsItemKey.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.GROUP_GET_NUMS, new StatsItemSet(StatsItemKey.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.GROUP_GET_SIZE, new StatsItemSet(StatsItemKey.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.GROUP_GET_LATENCY, new StatsItemSet(StatsItemKey.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.SNDBCK_PUT_NUMS, new StatsItemSet(StatsItemKey.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.BROKER_PUT_NUMS, new StatsItemSet(StatsItemKey.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(StatsItemKey.BROKER_GET_NUMS, new StatsItemSet(StatsItemKey.BROKER_GET_NUMS, this.scheduledExecutorService, log));		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/StatsItemKey.java:"
	package org.apache.rocketmq.store.stats;
	
	public class StatsItemKey {
	    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
	    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
	    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
	    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
	    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
	    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
	    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
	    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
	    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
	    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
	    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
	    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
	    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
	    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
	}
		
",

}
