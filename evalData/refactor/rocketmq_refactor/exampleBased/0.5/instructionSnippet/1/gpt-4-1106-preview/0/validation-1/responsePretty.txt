refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		16",
		toLine:"		116",
		oldContent:"
		import com.google.common.collect.Sets;
		import com.google.common.hash.Hashing;
		import io.openmessaging.storage.dledger.entry.DLedgerEntry;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
		import java.io.File;
		import java.io.IOException;
		import java.io.RandomAccessFile;
		import java.net.Inet6Address;
		import java.net.InetSocketAddress;
		import java.net.SocketAddress;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileLock;
		import java.nio.charset.StandardCharsets;
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Map;
		import java.util.Objects;
		import java.util.Optional;
		import java.util.Set;
		import java.util.concurrent.CompletableFuture;
		import java.util.concurrent.ConcurrentHashMap;
		import java.util.concurrent.ConcurrentLinkedQueue;
		import java.util.concurrent.ConcurrentMap;
		import java.util.concurrent.ConcurrentSkipListMap;
		import java.util.concurrent.ExecutionException;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.LinkedBlockingQueue;
		import java.util.concurrent.ScheduledExecutorService;
		import java.util.concurrent.ThreadPoolExecutor;
		import java.util.concurrent.TimeUnit;
		import java.util.concurrent.TimeoutException;
				
",
		newContent:"
		import com.google.common.collect.Sets;
		import com.google.common.hash.Hashing;
		import io.openmessaging.storage.dledger.entry.DLedgerEntry;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
		import java.io.File;
		import java.io.IOException;
		import java.io.RandomAccessFile;
		import java.net.Inet6Address;
		import java.net.InetSocketAddress;
		import java.net.SocketAddress;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileLock;
		import java.nio.charset.StandardCharsets;
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Map;
		import java.util.Objects;
		import java.util.Optional;
		import java.util.Set;
		import java.util.concurrent.CompletableFuture;
		import java.util.concurrent.ConcurrentHashMap;
		import java.util.concurrent.ConcurrentLinkedQueue;
		import java.util.concurrent.ConcurrentMap;
		import java.util.concurrent.ConcurrentSkipListMap;
		import java.util.concurrent.ExecutionException;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.LinkedBlockingQueue;
		import java.util.concurrent.ScheduledExecutorService;
		import java.util.concurrent.ThreadPoolExecutor;
		import java.util.concurrent.TimeUnit;
		import java.util.concurrent.TimeoutException;
		import org.apache.rocketmq.store.stats.DiskFallBehindKey;
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		134",
		toLine:"		139",
		oldContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
		newContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		94",
		toLine:"		104",
		oldContent:"
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindTime(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);
		    }		
",
		newContent:"
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindTime(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);
		    }		
",
,
		fromLine:"		108",
		toLine:"		118",
		oldContent:"
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindSize(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);
		    }		
",
		newContent:"
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindSize(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);
		    }		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/DiskFallBehindKey.java:"
	package org.apache.rocketmq.store.stats;
	
	public class DiskFallBehindKey {
	
	    private final String group;
	    private final String topic;
	    private final int queueId;
	
	    public DiskFallBehindKey(String group, String topic, int queueId) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	}
		
",

}
