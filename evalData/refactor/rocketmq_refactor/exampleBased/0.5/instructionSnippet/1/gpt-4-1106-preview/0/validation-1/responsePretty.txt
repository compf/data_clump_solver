"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 116,
                "oldContent": "import com.google.common.collect.Sets;\nimport com.google.common.hash.Hashing;\nimport io.openmessaging.storage.dledger.entry.DLedgerEntry;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.Inet6Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n",
                "newContent": "import com.google.common.collect.Sets;\nimport com.google.common.hash.Hashing;\nimport io.openmessaging.storage.dledger.entry.DLedgerEntry;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.Inet6Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport org.apache.rocketmq.store.stats.DiskFallBehindKey;\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 134,
                "toLine": 139,
                "oldContent": "    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);",
                "newContent": "    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java": [
            {
                "fromLine": 94,
                "toLine": 104,
                "oldContent": "        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindTime(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);\n    }",
                "newContent": "        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindTime(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);\n    }"
            },
            {
                "fromLine": 108,
                "toLine": 118,
                "oldContent": "        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindSize(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);\n    }",
                "newContent": "        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindSize(new DiskFallBehindKey(lmqGroup, lmqTopic, queueId), fallBehind);\n    }"
            }
        ]
    },
    "extractedClasses": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/DiskFallBehindKey.java": "package org.apache.rocketmq.store.stats;\n\npublic class DiskFallBehindKey {\n\n    private final String group;\n    private final String topic;\n    private final int queueId;\n\n    public DiskFallBehindKey(String group, String topic, int queueId) {\n        this.group = group;\n        this.topic = topic;\n        this.queueId = queueId;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getTopic() {\n        return topic;\n    }\n\n    public int getQueueId() {\n        return queueId;\n    }\n}\n"
    }
}"