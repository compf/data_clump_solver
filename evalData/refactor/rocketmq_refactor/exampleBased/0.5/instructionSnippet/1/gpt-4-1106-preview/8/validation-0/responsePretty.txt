refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		134",
		toLine:"		139",
		oldContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
		newContent:"
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);		
",
,
		fromLine:"		550",
		toLine:"		562",
		oldContent:"
		        final String statsKey = buildStatsKey(topic, group);
		        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
		    }
		
		    public void recordDiskFallBehindTime(final TopicQueueGroup topicQueueGroup) {
		        final String statsKey = buildStatsKey(topicQueueGroup.getQueueId(), topicQueueGroup.getTopic(), topicQueueGroup.getGroup());
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final TopicQueueGroup topicQueueGroup) {
		        final String statsKey = buildStatsKey(topicQueueGroup.getQueueId(), topicQueueGroup.getTopic(), topicQueueGroup.getGroup());
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }		
",
		newContent:"
		        final String statsKey = buildStatsKey(topic, group);
		        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
		    }
		
		    public void recordDiskFallBehindTime(final TopicQueueGroup topicQueueGroup, final long fallBehind) {
		        final String statsKey = buildStatsKey(topicQueueGroup.getQueueId(), topicQueueGroup.getTopic(), topicQueueGroup.getGroup());
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final TopicQueueGroup topicQueueGroup, final long fallBehind) {
		        final String statsKey = buildStatsKey(topicQueueGroup.getQueueId(), topicQueueGroup.getTopic(), topicQueueGroup.getGroup());
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		939",
		toLine:"		941",
		oldContent:"
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		                }		
",
		newContent:"
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    TopicQueueGroup topicQueueGroup = new TopicQueueGroup(topic, queueId, group);
		                    brokerStatsManager.recordDiskFallBehindSize(topicQueueGroup, fallBehind);
		                }		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		91",
		toLine:"		93",
		oldContent:"
		
		    @Override
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,		
",
		newContent:"
		
		    @Override
		    public void recordDiskFallBehindTime(final TopicQueueGroup topicQueueGroup, final long fallBehind,		
",
,
		fromLine:"		102",
		toLine:"		107",
		oldContent:"
		        }
		        super.recordDiskFallBehindTime(lmqGroup, lmqTopic, queueId, fallBehind);
		    }
		
		    @Override
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,		
",
		newContent:"
		        }
		        TopicQueueGroup topicQueueGroup = new TopicQueueGroup(lmqTopic, queueId, lmqGroup);
		        super.recordDiskFallBehindTime(topicQueueGroup, fallBehind);
		    }
		
		    @Override
		    public void recordDiskFallBehindSize(final TopicQueueGroup topicQueueGroup, final long fallBehind,		
",
,
		fromLine:"		116",
		toLine:"		118",
		oldContent:"
		        }
		        super.recordDiskFallBehindSize(lmqGroup, lmqTopic, queueId, fallBehind);
		    }		
",
		newContent:"
		        }
		        TopicQueueGroup topicQueueGroup = new TopicQueueGroup(lmqTopic, queueId, lmqGroup);
		        super.recordDiskFallBehindSize(topicQueueGroup, fallBehind);
		    }		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/main/java/org/apache/rocketmq/common/TopicQueueGroup.java:"
	package org.apache.rocketmq.common;
	
	public class TopicQueueGroup {
	    private final String topic;
	    private final int queueId;
	    private final String group;
	
	    public TopicQueueGroup(String topic, int queueId, String group) {
	        this.topic = topic;
	        this.queueId = queueId;
	        this.group = group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    @Override
	    public String toString() {
	        return "TopicQueueGroup{" +
	            "topic='" + topic + '\'' +
	            ", queueId=" + queueId +
	            ", group='" + group + '\'' +
	            '}';
	    }
	}
		
",

}
