refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		16",
		toLine:"		117",
		oldContent:"
		 */
		package org.apache.rocketmq.store;
		
		import com.google.common.collect.Sets;
		import com.google.common.hash.Hashing;
		import io.openmessaging.storage.dledger.entry.DLedgerEntry;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
		import java.io.File;
		import java.io.IOException;
		import java.io.RandomAccessFile;
		import java.net.Inet6Address;
		import java.net.InetSocketAddress;
		import java.net.SocketAddress;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileLock;
		import java.nio.charset.StandardCharsets;
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Map;
		import java.util.Objects;
		import java.util.Optional;
		import java.util.Set;
		import java.util.concurrent.CompletableFuture;
		import java.util.concurrent.ConcurrentHashMap;
		import java.util.concurrent.ConcurrentLinkedQueue;
		import java.util.concurrent.ConcurrentMap;
		import java.util.concurrent.ConcurrentSkipListMap;
		import java.util.concurrent.ExecutionException;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.LinkedBlockingQueue;
		import java.util.concurrent.ScheduledExecutorService;
		import java.util.concurrent.ThreadPoolExecutor;
		import java.util.concurrent.TimeUnit;
		import java.util.concurrent.TimeoutException;
		import java.util.concurrent.atomic.AtomicInteger;
		import java.util.concurrent.atomic.AtomicLong;
		import java.util.function.Supplier;
		import org.apache.commons.lang3.StringUtils;
		import org.apache.rocketmq.common.AbstractBrokerRunnable;
		import org.apache.rocketmq.common.BoundaryType;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.BrokerIdentity;
		import org.apache.rocketmq.common.MixAll;
		import org.apache.rocketmq.common.Pair;
		import org.apache.rocketmq.common.ServiceThread;
		import org.apache.rocketmq.common.SystemClock;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.attribute.CQType;
		import org.apache.rocketmq.common.attribute.CleanupPolicy;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.message.MessageConst;
		import org.apache.rocketmq.common.message.MessageDecoder;
		import org.apache.rocketmq.common.message.MessageExt;
		import org.apache.rocketmq.common.message.MessageExtBatch;
		import org.apache.rocketmq.common.message.MessageExtBrokerInner;
		import org.apache.rocketmq.common.running.RunningStats;
		import org.apache.rocketmq.common.sysflag.MessageSysFlag;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
		import org.apache.rocketmq.common.utils.QueueTypeUtils;
		import org.apache.rocketmq.common.utils.ServiceProvider;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
		import org.apache.rocketmq.store.config.BrokerRole;
		import org.apache.rocketmq.store.config.FlushDiskType;
		import org.apache.rocketmq.store.config.MessageStoreConfig;
		import org.apache.rocketmq.store.config.StorePathConfigHelper;
		import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
		import org.apache.rocketmq.store.ha.DefaultHAService;
		import org.apache.rocketmq.store.ha.HAService;
		import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
		import org.apache.rocketmq.store.hook.PutMessageHook;
		import org.apache.rocketmq.store.hook.SendMessageBackHook;
		import org.apache.rocketmq.store.index.IndexService;
		import org.apache.rocketmq.store.index.QueryOffsetResult;
		import org.apache.rocketmq.store.kv.CommitLogDispatcherCompaction;
		import org.apache.rocketmq.store.kv.CompactionService;
		import org.apache.rocketmq.store.kv.CompactionStore;
		import org.apache.rocketmq.store.logfile.MappedFile;
		import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
		import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
		import org.apache.rocketmq.store.queue.ConsumeQueueStore;
		import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
		import org.apache.rocketmq.store.queue.CqUnit;
		import org.apache.rocketmq.store.queue.ReferredIterator;
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
		import org.apache.rocketmq.store.timer.TimerMessageStore;
		import org.apache.rocketmq.store.util.PerfCounter;
		import org.rocksdb.RocksDBException;
		
		public class DefaultMessageStore implements MessageStore {		
",
		newContent:"
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
				
",
,
		fromLine:"		153",
		toLine:"		163",
		oldContent:"
		
		    protected final RunningFlags runningFlags = new RunningFlags();
		    private final SystemClock systemClock = new SystemClock();
		
		    private final ScheduledExecutorService scheduledExecutorService;
		    private final BrokerStatsManager brokerStatsManager;
		    private final MessageArrivingListener messageArrivingListener;
		    private final BrokerConfig brokerConfig;
		
		    private volatile boolean shutdown = true;
		    protected boolean notifyMessageArriveInBatch = false;		
",
		newContent:"
				
",
,
		fromLine:"		210",
		toLine:"		220",
		oldContent:"
		    private ConcurrentMap<String, TopicConfig> topicConfigTable;
		
		    private final ScheduledExecutorService scheduledCleanQueueExecutorService =
		        ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("StoreCleanQueueScheduledThread"));
		
		    public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,
		        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws IOException {
		        this.messageArrivingListener = messageArrivingListener;
		        this.brokerConfig = brokerConfig;
		        this.messageStoreConfig = messageStoreConfig;
		        this.aliveReplicasNum = messageStoreConfig.getTotalReplicas();		
",
		newContent:"
				
",
,
		fromLine:"		1999",
		toLine:"		2009",
		oldContent:"
		
		    public void setStateMachineVersion(long stateMachineVersion) {
		        this.stateMachineVersion = stateMachineVersion;
		    }
		
		    public BrokerStatsManager getBrokerStatsManager() {
		        return brokerStatsManager;
		    }
		
		    public BrokerConfig getBrokerConfig() {
		        return brokerConfig;		
",
		newContent:"
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java:
	[
		fromLine:"		16",
		toLine:"		75",
		oldContent:"
		 */
		package org.apache.rocketmq.store.timer;
		
		import com.conversantmedia.util.concurrent.DisruptorBlockingQueue;
		import java.io.File;
		import java.io.IOException;
		import java.nio.ByteBuffer;
		import java.sql.Timestamp;
		import java.text.SimpleDateFormat;
		import java.util.ArrayList;
		import java.util.Date;
		import java.util.HashMap;
		import java.util.HashSet;
		import java.util.Iterator;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Map;
		import java.util.Random;
		import java.util.Set;
		import java.util.concurrent.BlockingQueue;
		import java.util.concurrent.ConcurrentSkipListSet;
		import java.util.concurrent.CountDownLatch;
		import java.util.concurrent.LinkedBlockingDeque;
		import java.util.concurrent.ScheduledExecutorService;
		import java.util.concurrent.TimeUnit;
		import java.util.concurrent.atomic.AtomicInteger;
		import java.util.function.Function;
		import io.opentelemetry.api.common.Attributes;
		import org.apache.commons.collections.CollectionUtils;
		import org.apache.commons.lang3.math.NumberUtils;
		import org.apache.rocketmq.common.ServiceThread;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.TopicFilterType;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.message.MessageAccessor;
		import org.apache.rocketmq.common.message.MessageClientIDSetter;
		import org.apache.rocketmq.common.message.MessageConst;
		import org.apache.rocketmq.common.message.MessageDecoder;
		import org.apache.rocketmq.common.message.MessageExt;
		import org.apache.rocketmq.common.message.MessageExtBrokerInner;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.store.DefaultMessageStore;
		import org.apache.rocketmq.store.MessageStore;
		import org.apache.rocketmq.store.PutMessageResult;
		import org.apache.rocketmq.store.SelectMappedBufferResult;
		import org.apache.rocketmq.store.config.BrokerRole;
		import org.apache.rocketmq.store.config.MessageStoreConfig;
		import org.apache.rocketmq.store.logfile.MappedFile;
		import org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant;
		import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
		import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
		import org.apache.rocketmq.store.queue.CqUnit;
		import org.apache.rocketmq.store.queue.ReferredIterator;
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
		import org.apache.rocketmq.store.util.PerfCounter;
				
",
		newContent:"
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
				
",
,
		fromLine:"		154",
		toLine:"		169",
		oldContent:"
		    private boolean dequeueStatusChangeFlag = false;
		    private long shouldStartTime;
		
		    // True if current store is master or current brokerId is equal to the minimum brokerId of the replica group in slaveActingMaster mode.
		    protected volatile boolean shouldRunningDequeue;
		    private final BrokerStatsManager brokerStatsManager;
		    private Function<MessageExtBrokerInner, PutMessageResult> escapeBridgeHook;
		
		    public TimerMessageStore(final MessageStore messageStore, final MessageStoreConfig storeConfig,
		        TimerCheckpoint timerCheckpoint, TimerMetrics timerMetrics,
		        final BrokerStatsManager brokerStatsManager) throws IOException {
		
		        this.messageStore = messageStore;
		        this.storeConfig = storeConfig;
		        this.commitLogFileSize = storeConfig.getMappedFileSizeCommitLog();
		        this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();		
",
		newContent:"
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/MessageStore.java:
	[
		fromLine:"		16",
		toLine:"		48",
		oldContent:"
		 */
		package org.apache.rocketmq.store;
		
		import java.nio.ByteBuffer;
		import java.util.HashMap;
		import java.util.LinkedList;
		import java.util.List;
		import java.util.Set;
		import java.util.concurrent.CompletableFuture;
		import java.util.function.Supplier;
		import org.apache.rocketmq.common.BoundaryType;
		import org.apache.rocketmq.common.Pair;
		import org.apache.rocketmq.common.SystemClock;
		import org.apache.rocketmq.common.message.MessageExt;
		import org.apache.rocketmq.common.message.MessageExtBatch;
		import org.apache.rocketmq.common.message.MessageExtBrokerInner;
		import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
		import org.apache.rocketmq.store.config.MessageStoreConfig;
		import org.apache.rocketmq.store.ha.HAService;
		import org.apache.rocketmq.store.hook.PutMessageHook;
		import org.apache.rocketmq.store.hook.SendMessageBackHook;
		import org.apache.rocketmq.store.logfile.MappedFile;
		import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
		import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
		import org.apache.rocketmq.store.timer.TimerMessageStore;
		import org.apache.rocketmq.store.util.PerfCounter;
		import org.rocksdb.RocksDBException;
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import io.opentelemetry.sdk.metrics.InstrumentSelector;
		import io.opentelemetry.sdk.metrics.ViewBuilder;
				
",
		newContent:"
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
				
",
,
		fromLine:"		600",
		toLine:"		610",
		oldContent:"
		    /**
		     * Get BrokerStatsManager of the messageStore.
		     *
		     * @return BrokerStatsManager.
		     */
		    BrokerStatsManager getBrokerStatsManager();
		
		    /**
		     * Will be triggered when a new message is appended to commit log.
		     *
		     * @param msg           the msg that is appended to commit log		
",
		newContent:"
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/RocksDBMessageStore.java:
	[
		fromLine:"		16",
		toLine:"		47",
		oldContent:"
		 */
		package org.apache.rocketmq.store;
		
		import java.io.IOException;
		import java.util.concurrent.ConcurrentHashMap;
		import java.util.concurrent.ConcurrentMap;
		import java.util.function.Supplier;
		
		import io.opentelemetry.api.common.AttributesBuilder;
		import io.opentelemetry.api.metrics.Meter;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.store.config.MessageStoreConfig;
		import org.apache.rocketmq.store.config.StorePathConfigHelper;
		import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
		import org.apache.rocketmq.store.metrics.RocksDBStoreMetricsManager;
		import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
		import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
		import org.apache.rocketmq.store.queue.RocksDBConsumeQueue;
		import org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore;
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
		import org.rocksdb.RocksDBException;
		
		public class RocksDBMessageStore extends DefaultMessageStore {
		
		    public RocksDBMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,
		        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws
		        IOException {
		        super(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig, topicConfigTable);
		        notifyMessageArriveInBatch = true;
		    }		
",
		newContent:"
		import org.apache.rocketmq.store.stats.BrokerStatsManager;
				
",
,

	],

}
