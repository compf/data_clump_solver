{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 117,
                "oldContent": " */\npackage org.apache.rocketmq.store;\n\nimport com.google.common.collect.Sets;\nimport com.google.common.hash.Hashing;\nimport io.openmessaging.storage.dledger.entry.DLedgerEntry;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.Inet6Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.function.Supplier;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.rocketmq.common.AbstractBrokerRunnable;\nimport org.apache.rocketmq.common.BoundaryType;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.BrokerIdentity;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.SystemClock;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.attribute.CQType;\nimport org.apache.rocketmq.common.attribute.CleanupPolicy;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBatch;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.running.RunningStats;\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.CleanupPolicyUtils;\nimport org.apache.rocketmq.common.utils.QueueTypeUtils;\nimport org.apache.rocketmq.common.utils.ServiceProvider;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;\nimport org.apache.rocketmq.store.config.BrokerRole;\nimport org.apache.rocketmq.store.config.FlushDiskType;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\nimport org.apache.rocketmq.store.dledger.DLedgerCommitLog;\nimport org.apache.rocketmq.store.ha.DefaultHAService;\nimport org.apache.rocketmq.store.ha.HAService;\nimport org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;\nimport org.apache.rocketmq.store.hook.PutMessageHook;\nimport org.apache.rocketmq.store.hook.SendMessageBackHook;\nimport org.apache.rocketmq.store.index.IndexService;\nimport org.apache.rocketmq.store.index.QueryOffsetResult;\nimport org.apache.rocketmq.store.kv.CommitLogDispatcherCompaction;\nimport org.apache.rocketmq.store.kv.CompactionService;\nimport org.apache.rocketmq.store.kv.CompactionStore;\nimport org.apache.rocketmq.store.logfile.MappedFile;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStore;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.queue.CqUnit;\nimport org.apache.rocketmq.store.queue.ReferredIterator;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.apache.rocketmq.store.timer.TimerMessageStore;\nimport org.apache.rocketmq.store.util.PerfCounter;\nimport org.rocksdb.RocksDBException;\n\npublic class DefaultMessageStore implements MessageStore {",
                "newContent": "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n"
            },
            {
                "fromLine": 153,
                "toLine": 163,
                "oldContent": "\n    protected final RunningFlags runningFlags = new RunningFlags();\n    private final SystemClock systemClock = new SystemClock();\n\n    private final ScheduledExecutorService scheduledExecutorService;\n    private final BrokerStatsManager brokerStatsManager;\n    private final MessageArrivingListener messageArrivingListener;\n    private final BrokerConfig brokerConfig;\n\n    private volatile boolean shutdown = true;\n    protected boolean notifyMessageArriveInBatch = false;",
                "newContent": ""
            },
            {
                "fromLine": 210,
                "toLine": 220,
                "oldContent": "    private ConcurrentMap<String, TopicConfig> topicConfigTable;\n\n    private final ScheduledExecutorService scheduledCleanQueueExecutorService =\n        ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"StoreCleanQueueScheduledThread\"));\n\n    public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws IOException {\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.messageStoreConfig = messageStoreConfig;\n        this.aliveReplicasNum = messageStoreConfig.getTotalReplicas();",
                "newContent": ""
            },
            {
                "fromLine": 1999,
                "toLine": 2009,
                "oldContent": "\n    public void setStateMachineVersion(long stateMachineVersion) {\n        this.stateMachineVersion = stateMachineVersion;\n    }\n\n    public BrokerStatsManager getBrokerStatsManager() {\n        return brokerStatsManager;\n    }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 75,
                "oldContent": " */\npackage org.apache.rocketmq.store.timer;\n\nimport com.conversantmedia.util.concurrent.DisruptorBlockingQueue;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Function;\nimport io.opentelemetry.api.common.Attributes;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.TopicFilterType;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageClientIDSetter;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.SelectMappedBufferResult;\nimport org.apache.rocketmq.store.config.BrokerRole;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.logfile.MappedFile;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.CqUnit;\nimport org.apache.rocketmq.store.queue.ReferredIterator;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.apache.rocketmq.store.util.PerfCounter;\n",
                "newContent": "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n"
            },
            {
                "fromLine": 154,
                "toLine": 169,
                "oldContent": "    private boolean dequeueStatusChangeFlag = false;\n    private long shouldStartTime;\n\n    // True if current store is master or current brokerId is equal to the minimum brokerId of the replica group in slaveActingMaster mode.\n    protected volatile boolean shouldRunningDequeue;\n    private final BrokerStatsManager brokerStatsManager;\n    private Function<MessageExtBrokerInner, PutMessageResult> escapeBridgeHook;\n\n    public TimerMessageStore(final MessageStore messageStore, final MessageStoreConfig storeConfig,\n        TimerCheckpoint timerCheckpoint, TimerMetrics timerMetrics,\n        final BrokerStatsManager brokerStatsManager) throws IOException {\n\n        this.messageStore = messageStore;\n        this.storeConfig = storeConfig;\n        this.commitLogFileSize = storeConfig.getMappedFileSizeCommitLog();\n        this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/MessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 48,
                "oldContent": " */\npackage org.apache.rocketmq.store;\n\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Supplier;\nimport org.apache.rocketmq.common.BoundaryType;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.SystemClock;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBatch;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.ha.HAService;\nimport org.apache.rocketmq.store.hook.PutMessageHook;\nimport org.apache.rocketmq.store.hook.SendMessageBackHook;\nimport org.apache.rocketmq.store.logfile.MappedFile;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.apache.rocketmq.store.timer.TimerMessageStore;\nimport org.apache.rocketmq.store.util.PerfCounter;\nimport org.rocksdb.RocksDBException;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\n",
                "newContent": "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n"
            },
            {
                "fromLine": 600,
                "toLine": 610,
                "oldContent": "    /**\n     * Get BrokerStatsManager of the messageStore.\n     *\n     * @return BrokerStatsManager.\n     */\n    BrokerStatsManager getBrokerStatsManager();\n\n    /**\n     * Will be triggered when a new message is appended to commit log.\n     *\n     * @param msg           the msg that is appended to commit log",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/RocksDBMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 47,
                "oldContent": " */\npackage org.apache.rocketmq.store;\n\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.metrics.RocksDBStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueue;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.rocksdb.RocksDBException;\n\npublic class RocksDBMessageStore extends DefaultMessageStore {\n\n    public RocksDBMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws\n        IOException {\n        super(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig, topicConfigTable);\n        notifyMessageArriveInBatch = true;\n    }",
                "newContent": "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/plugin/AbstractPluginMessageStore.java": [
            {
                "fromLine": 17,
                "toLine": 64,
                "oldContent": "\npackage org.apache.rocketmq.store.plugin;\n\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Supplier;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.SystemClock;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBatch;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;\nimport org.apache.rocketmq.store.AllocateMappedFileService;\nimport org.apache.rocketmq.store.AppendMessageResult;\nimport org.apache.rocketmq.store.CommitLog;\nimport org.apache.rocketmq.store.CommitLogDispatcher;\nimport org.apache.rocketmq.store.DispatchRequest;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.MessageFilter;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.QueryMessageResult;\nimport org.apache.rocketmq.store.RunningFlags;\nimport org.apache.rocketmq.store.SelectMappedBufferResult;\nimport org.apache.rocketmq.store.StoreCheckpoint;\nimport org.apache.rocketmq.store.StoreStatsService;\nimport org.apache.rocketmq.store.TransientStorePool;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.ha.HAService;\nimport org.apache.rocketmq.store.hook.PutMessageHook;\nimport org.apache.rocketmq.store.hook.SendMessageBackHook;\nimport org.apache.rocketmq.store.logfile.MappedFile;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.apache.rocketmq.store.timer.TimerMessageStore;\nimport org.apache.rocketmq.store.util.PerfCounter;\nimport org.rocksdb.RocksDBException;\n\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.ViewBuilder;\n",
                "newContent": "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n"
            },
            {
                "fromLine": 331,
                "toLine": 341,
                "oldContent": "    public ConsumeQueueInterface findConsumeQueue(String topic, int queueId) {\n        return next.find
{
                "toLine": 341,
                "oldContent": "    public ConsumeQueueInterface findConsumeQueue(String topic, int queueId) {\n        return next.findConsumeQueue(topic, queueId);\n    }\n\n    @Override\n    public BrokerStatsManager getBrokerStatsManager() {\n        return next.getBrokerStatsManager();\n    }\n\n    @Override\n    public int remainTransientStoreBufferNumbs() {",
                "newContent": ""
            }
        
       
        
    