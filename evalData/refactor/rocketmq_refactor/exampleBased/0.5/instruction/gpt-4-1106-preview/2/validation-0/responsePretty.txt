refactorings:
{
	broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java:
	[
		fromLine:"		100",
		toLine:"		100",
		oldContent:"
		this.consumerLagCalculator = new ConsumerLagCalculator(brokerController);		
",
		newContent:"
		this.consumerLagCalculator = new ConsumerLagCalculator(brokerController, new BrokerStatHelper());		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		279",
		toLine:"		285",
		oldContent:"
		        return brokerStatHelper.getConsumerLagStats(group, topic, isPop, topicConfigManager, messageStore);
		        long total = 0L;
		        long earliestUnconsumedTimestamp = Long.MAX_VALUE;
		
		        ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		306",
		toLine:"		322",
		oldContent:"
		        return brokerStatHelper.getConsumerLagStats(group, topic, queueId, isPop, offsetManager, popBufferMergeService, popInflightMessageCounter, messageStore);
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {
		            brokerOffset = 0;
		        }
		
		        ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		338",
		toLine:"		344",
		oldContent:"
		        return brokerStatHelper.getInFlightMsgStats(group, topic, isPop, topicConfigManager, messageStore);
		        long total = 0L;
		        long earliestUnPulledTimestamp = Long.MAX_VALUE;
		
		        ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		365",
		toLine:"		381",
		oldContent:"
		        return brokerStatHelper.getInFlightMsgStats(group, topic, queueId, isPop, offsetManager, popBufferMergeService, popInflightMessageCounter, messageStore);
		        if (isPop) {
		            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
		            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
		            if (pullOffset < 0) {
		                pullOffset = offsetManager.queryOffset(group, topic, queueId);
		            }
		            ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		395",
		toLine:"		401",
		oldContent:"
		        return brokerStatHelper.getAvailableMsgCount(group, topic, isPop, topicConfigManager, messageStore);
		        long total = 0L;
		
		        if (group == null || topic == null) {
		            return total;
		        }
		
		        ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		415",
		toLine:"		421",
		oldContent:"
		        return brokerStatHelper.getAvailableMsgCount(group, topic, queueId, isPop, offsetManager, popBufferMergeService, messageStore);
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {
		            brokerOffset = 0;
		        }
		
		        ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		441",
		toLine:"		443",
		oldContent:"
		        return brokerStatHelper.getStoreTimeStamp(topic, queueId, offset, messageStore);
		        long storeTimeStamp = Long.MAX_VALUE;
		        if (offset >= 0) {
		            ... // The rest of the original method content		
",
		newContent:"
				
",
,
		fromLine:"		451",
		toLine:"		471",
		oldContent:"
		        return brokerStatHelper.calculateMessageCount(group, topic, queueId, from, to, brokerConfig, consumerManager, consumerFilterManager, messageStore);
		        long count = to - from;
		
		        if (brokerConfig.isEstimateAccumulation() && to > from) {
		            ... // The rest of the original method content		
",
		newContent:"
				
",
,

	],

}
extractedClasses:
{
	broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerStatHelper.java:"
	package org.apache.rocketmq.broker.metrics;
	
	public class BrokerStatHelper {
	    // This class contains refactored methods from ConsumerLagCalculator
	    // Methods should match the ones called in ConsumerLagCalculator
	}
		
",

}
