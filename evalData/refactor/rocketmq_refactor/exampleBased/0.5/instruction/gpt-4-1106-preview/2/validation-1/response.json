{
    "refactorings": {
        "broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java": [
            {
                "fromLine": 279,
                "toLine": 285,
                "oldContent": "        if (group == null || topic == null) {\n            return new Pair<>(total, earliestUnconsumedTimestamp);\n        }\n\n        ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getConsumerLagStats(group, topic, isPop);"
            },
            {
                "fromLine": 306,
                "toLine": 322,
                "oldContent": "        if (isPop) {\n            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);\n            if (pullOffset < 0) {\n                pullOffset = offsetManager.queryOffset(group, topic, queueId);\n            ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getConsumerLagStats(group, topic, queueId, isPop);"
            },
            {
                "fromLine": 338,
                "toLine": 344,
                "oldContent": "        if (group == null || topic == null) {\n            return new Pair<>(total, earliestUnPulledTimestamp);\n        }\n        ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getInFlightMsgStats(group, topic, isPop);"
            },
            {
                "fromLine": 365,
                "toLine": 381,
                "oldContent": "        if (isPop) {\n            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);\n            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);\n            if (pullOffset < 0) {\n                pullOffset = offsetManager.queryOffset(group, topic, queueId);\n            ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getInFlightMsgStats(group, topic, queueId, isPop);"
            },
            {
                "fromLine": 395,
                "toLine": 401,
                "oldContent": "        if (group == null || topic == null) {\n            return total;\n        }\n        ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getAvailableMsgCount(group, topic, isPop);"
            },
            {
                "fromLine": 415,
                "toLine": 421,
                "oldContent": "        if (isPop) {\n            pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);\n            if (pullOffset < 0) {\n                pullOffset = offsetManager.queryOffset(group, topic, queueId);\n            ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getAvailableMsgCount(group, topic, queueId, isPop);"
            },
            {
                "fromLine": 441,
                "toLine": 443,
                "oldContent": "        long storeTimeStamp = Long.MAX_VALUE;\n        if (offset >= 0) {\n            ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.getStoreTimeStamp(topic, queueId, offset);"
            },
            {
                "fromLine": 451,
                "toLine": 471,
                "oldContent": "        long count = to - from;\n\n        if (brokerConfig.isEstimateAccumulation() && to > from) {\n            ... // The rest of the original method content",
                "newContent": "        return brokerStatHelper.calculateMessageCount(group, topic, queueId, from, to);"
            }
        ]
    },
    "extractedClasses": {
        "broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerStatHelper.java": "package org.apache.rocketmq.broker.metrics;\n\npublic class BrokerStatHelper {\n    // This class contains refactored methods from ConsumerLagCalculator\n    // Methods should match the ones called in ConsumerLagCalculator\n}\n"
    }
}