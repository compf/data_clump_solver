"
{
    "refactorings": {
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 23,
                "toLine": 62,
                "oldContent": "public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\"; ... // and all other constants",
                "newContent": ""
            }
        ],
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 42,
                "toLine": 86,
                "oldContent": "@Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS; ... // and all other deprecated constants",
                "newContent": ""
            }
        ],
        "broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java": [
            {
                "fromLine": 39,
                "toLine": 39,
                "oldContent": "private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);",
                "newContent": "private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n\n    private final BrokerStatHelper brokerStatHelper;"
            },
            {
                "fromLine": 67,
                "toLine": 67,
                "oldContent": "    public ConsumerLagCalculator(BrokerController brokerController) {",
                "newContent": "    public ConsumerLagCalculator(BrokerController brokerController, BrokerStatHelper brokerStatHelper) {"
            },
            {
                "fromLine": 80,
                "toLine": 80,
                "oldContent": "        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();",
                "newContent": "        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();\n        this.brokerStatHelper = brokerStatHelper;"
            },
            {
                "fromLine": 208,
                "toLine": 208,
                "oldContent": "    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {",
                "newContent": "    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {\n        return brokerStatHelper.getConsumerLagStats(group, topic, isPop, topicConfigManager, messageStore);"
            },
            {
                "fromLine": 226,
                "toLine": 226,
                "oldContent": "    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {",
                "newContent": "    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {\n        return brokerStatHelper.getConsumerLagStats(group, topic, queueId, isPop, offsetManager, popBufferMergeService, popInflightMessageCounter, messageStore);"
            },
            {
                "fromLine": 243,
                "toLine": 243,
                "oldContent": "    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {",
                "newContent": "    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {\n        return brokerStatHelper.getInFlightMsgStats(group, topic, isPop, topicConfigManager, messageStore);"
            },
            {
                "fromLine": 261,
                "toLine": 261,
                "oldContent": "    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {",
                "newContent": "    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {\n        return brokerStatHelper.getInFlightMsgStats(group, topic, queueId, isPop, offsetManager, popBufferMergeService, popInflightMessageCounter, messageStore);"
            },
            {
                "fromLine": 281,
                "toLine": 281,
                "oldContent": "    public long getAvailableMsgCount(String group, String topic, boolean isPop) {",
                "newContent": "    public long getAvailableMsgCount(String group, String topic, boolean isPop) {\n        return brokerStatHelper.getAvailableMsgCount(group, topic, isPop, topicConfigManager, messageStore);"
            },
            {
                "fromLine": 296,
                "toLine": 296,
                "oldContent": "    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {",
                "newContent": "    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {\n        return brokerStatHelper.getAvailableMsgCount(group, topic, queueId, isPop, offsetManager, popBufferMergeService, messageStore);"
            },
            {
                "fromLine": 313,
                "toLine": 313,
                "oldContent": "    public long getStoreTimeStamp(String topic, int queueId, long offset) {",
                "newContent": "    public long getStoreTimeStamp(String topic, int queueId, long offset) {\n        return brokerStatHelper.getStoreTimeStamp(topic, queueId, offset, messageStore);"
            },
            {
                "fromLine": 323,
                "toLine": 323,
                "oldContent": "    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {",
                "newContent": "    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {\n        return brokerStatHelper.calculateMessageCount(group, topic, queueId, from, to, brokerConfig, consumerManager, consumerFilterManager, messageStore);"
            }
        ]
    },
    "extractedClasses": {
        "common/src/main/java/org/apache/rocketmq/common/stats/StatsItemKeys.java": "package org.apache.rocketmq.common.stats;\n\npublic class StatsItemKeys {\n    // This class replaces the constants in the Stats class\n}\n",
        "broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerStatHelper.java": "package org.apache.rocketmq.broker.metrics;\n\npublic class BrokerStatHelper {\n    // This class contains refactored methods from ConsumerLagCalculator\n}\n"
    }
}"