"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 78,
                "oldContent": " */\npackage org.apache.rocketmq.store.stats;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";\n    public static final String GROUP_CK_NUMS = \"GROUP_CK_NUMS\";\n    public static final String DLQ_PUT_NUMS = \"DLQ_PUT_NUMS\";\n    public static final String BROKER_ACK_NUMS = \"BROKER_ACK_NUMS\";\n    public static final String BROKER_CK_NUMS = \"BROKER_CK_NUMS\";\n    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC\";",
                "newContent": " */\npackage org.apache.rocketmq.store.stats;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";\n    public static final String GROUP_CK_NUMS = \"GROUP_CK_NUMS\";\n    public static final String DLQ_PUT_NUMS = \"DLQ_PUT_NUMS\";\n    public static final String BROKER_ACK_NUMS = \"BROKER_ACK_NUMS\";\n    public static final String BROKER_CK_NUMS = \"BROKER_CK_NUMS\";\n    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC\";"
            },
            {
                "fromLine": 99,
                "toLine": 122,
                "oldContent": "    public static final String MSG_SIZE = \"MSG_SIZE\";\n    public static final String SUCCESS_MSG_NUM = \"SUCCESS_MSG_NUM\";\n    public static final String FAILURE_MSG_NUM = \"FAILURE_MSG_NUM\";\n    public static final String COMMERCIAL_MSG_NUM = \"COMMERCIAL_MSG_NUM\";\n    public static final String SUCCESS_REQ_NUM = \"SUCCESS_REQ_NUM\";\n    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time\n    public static final String PRODUCER_REGISTER_TIME = \"PRODUCER_REGISTER_TIME\";\n    public static final String CHANNEL_ACTIVITY = \"CHANNEL_ACTIVITY\";\n    public static final String CHANNEL_ACTIVITY_CONNECT = \"CONNECT\";\n    public static final String CHANNEL_ACTIVITY_IDLE = \"IDLE\";\n    public static final String CHANNEL_ACTIVITY_EXCEPTION = \"EXCEPTION\";",
                "newContent": "    public static final String MSG_SIZE = \"MSG_SIZE\";\n    public static final String SUCCESS_MSG_NUM = \"SUCCESS_MSG_NUM\";\n    public static final String FAILURE_MSG_NUM = \"FAILURE_MSG_NUM\";\n    public static final String COMMERCIAL_MSG_NUM = \"COMMERCIAL_MSG_NUM\";\n    public static final String SUCCESS_REQ_NUM = \"SUCCESS_REQ_NUM\";\n    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time\n    public static final String PRODUCER_REGISTER_TIME = \"PRODUCER_REGISTER_TIME\";\n    public static final String CHANNEL_ACTIVITY = \"CHANNEL_ACTIVITY\";\n    public static final String CHANNEL_ACTIVITY_CONNECT = \"CONNECT\";\n    public static final String CHANNEL_ACTIVITY_IDLE = \"IDLE\";\n    public static final String CHANNEL_ACTIVITY_EXCEPTION = \"EXCEPTION\";"
            }
        ],
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 10,
                "toLine": 55,
                "oldContent": " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.common.stats;\n\npublic class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}\n",
                "newContent": " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.common.stats;\n\npublic class Stats {\n\n}\n"
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 15,
                "toLine": 47,
                "oldContent": " * limitations under the License.\n */\n\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BrokerStatsManagerTest {\n    private BrokerStatsManager brokerStatsManager;\n\n    private static final String TOPIC = \"TOPIC_TEST\";\n    private static final Integer QUEUE_ID = 0;\n    private static final String GROUP_NAME = \"GROUP_TEST\";\n    private static final String CLUSTER_NAME = \"DefaultCluster\";",
                "newContent": " * limitations under the License.\n */\n\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BrokerStatsManagerTest {\n    private BrokerStatsManager brokerStatsManager;\n\n    private static final String TOPIC = \"TOPIC_TEST\";\n    private static final Integer QUEUE_ID = 0;\n    private static final String GROUP_NAME = \"GROUP_TEST\";\n    private static final String CLUSTER_NAME = \"DefaultCluster\";"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 16,
                "toLine": 56,
                "oldContent": " */\npackage org.apache.rocketmq.broker.processor;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.transaction.OperationResult;\nimport org.apache.rocketmq.broker.transaction.TransactionMetrics;\nimport org.apache.rocketmq.broker.transaction.TransactionalMessageService;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.remoting.netty.NettyClientConfig;\nimport org.apache.rocketmq.remoting.netty.NettyServerConfig;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;\nimport org.apache.rocketmq.store.AppendMessageResult;\nimport org.apache.rocketmq.store.AppendMessageStatus;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.PutMessageStatus;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.nio.charset.StandardCharsets;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n",
                "newContent": " */\npackage org.apache.rocketmq.broker.processor;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.transaction.OperationResult;\nimport org.apache.rocketmq.broker.transaction.TransactionMetrics;\nimport org.apache.rocketmq.broker.transaction.TransactionalMessageService;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.rem
{
    "refactorings": {
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 94,
                "toLine": 129,
                "oldContent": "        return response;\n    }\n\n    @Test\n    public void testProcessRequest() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_NotType() throws RemotingCommandException {\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response).isNull();\n    }\n",
                "newContent": "        return response;\n    }\n\n    @Test\n    public void testProcessRequest() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n    }\n\n    @Test\n    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n    }\n\n    @Test\n    public void testProcessRequest_NotType() throws RemotingCommandException {\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response).isNull();\n    }\n"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 17,
                "toLine": 67,
                "oldContent": "\npackage org.apache.rocketmq.broker.schedule;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.failover.EscapeBridge;\nimport org.apache.rocketmq.broker.util.HookUtils;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.store.ConsumeQueueExt;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.GetMessageStatus;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n\npublic class ScheduleMessageServiceTest {\n\n    private BrokerController brokerController;\n    private ScheduleMessageService scheduleMessageService;\n",
                "newContent": "\npackage org.apache.rocketmq.broker.schedule;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.failover.EscapeBridge;\nimport org.apache.rocketmq.broker.util.HookUtils;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.store.ConsumeQueueExt;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.GetMessageStatus;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n\npublic class ScheduleMessageServiceTest {\n\n    private BrokerController brokerController;\n    private ScheduleMessageService scheduleMessageService;\n"
            },
            {
                "fromLine": 188,
                "toLine": 208,
                "oldContent": "        offsetTable = (ConcurrentMap<Integer, Long>) field.get(scheduleMessageService);\n\n        for (long offset : offsetTable.values()) {\n            assertEquals(0, offset);\n        }\n    }\n\n    @Test\n    public void testDeliverDelayedMessageTimerTask() throws Exception {\n        assertThat(messageStore.getMessageStoreConfig().isEnableScheduleMessageStats()).isTrue();\n\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic)).isNull();\n\n        MessageExtBrokerInner msg = buildMessage();\n        int realQueueId = msg.getQueueId();\n        // set delayLevel,and send delay message\n        msg.setDelayTimeLevel(delayLevel);\n        HookUtils.handleScheduleMessage(brokerController, msg);\n        PutMessageResult result = messageStore.putMessage(msg);\n        assertThat(result.isOk()).isTrue();\n",
                "newContent": "        offsetTable = (ConcurrentMap<Integer, Long>) field.get(scheduleMessageService);\n\n        for (long offset : offsetTable.values()) {\n            assertEquals(0, offset);\n        }\n    }\n\n    @Test\n    public void testDeliverDelayedMessageTimerTask() throws Exception {\n        assertThat(messageStore.getMessageStoreConfig().isEnableScheduleMessageStats()).isTrue();\n\n        MessageExtBrokerInner msg = buildMessage();\n        int realQueueId = msg.getQueueId();\n        // set delayLevel,and send delay message\n        msg.setDelayTimeLevel(delayLevel);\n        HookUtils.handleScheduleMessage(brokerController, msg);\n        PutMessageResult result = messageStore.putMessage(msg);\n        assertThat(result.isOk()).isTrue();\n"
            },
            {
                "fromLine": 218,
                "toLine": 240,
                "oldContent": "\n        // timer run maybe delay, then consumer message again\n        // and wait offsetTable\n        TimeUnit.SECONDS.sleep(15);\n        scheduleMessageService.buildRunningStats(new HashMap<>());\n\n        messageResult = getMessage(realQueueId, offset);\n        // now,found the message\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n\n        // get the stats change\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());\n\n        // get the message body\n        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();\n        for (ByteBuffer bb : byteBufferList) {\n            byteBuffer.put(bb);\n        }\n\n        // warp and decode the message",
                "newContent": "\n        // timer run maybe delay, then consumer message again\n        // and wait offsetTable\n        TimeUnit.SECONDS.sleep(15);\n        scheduleMessageService.buildRunningStats(new HashMap<>());\n\n        messageResult = getMessage(realQueueId, offset);\n        // now,found the message\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n\n        // get the message body\n        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();\n        for (ByteBuffer bb : byteBufferList) {\n            byteBuffer.put(bb);\n        }\n\n        // warp and decode the message"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 16,
                "toLine": 49,
                "oldContent": " */\npackage org.apache.rocketmq.tools.command.export;\n\nimport com.alibaba.fastjson.JSON;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.Connection;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\nimport org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;\n",
                "newContent": " */\npackage org.apache.rocketmq.tools.command.export;\n\nimport com.alibaba.fastjson.JSON;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.Connection;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\nimport org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;\n"
            },
            {
                "fromLine": 176,
                "toLine": 204,
                "oldContent": "    private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt defaultMQAdminExt, String brokerAddr,\n        Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap,\n        SubscriptionGroupWrapper subscriptionGroupWrapper)\n        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n        TopicConfigSerializeWrapper topicConfigSerializeWrapper = defaultMQAdminExt.getUserTopicConfig(\n            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        try {\n            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();\n        //disk use ratio\n        Map<String, Object> diskRatioMap = new HashMap<>();\n        diskRatioMap.put(\"commitLogDiskRatio\", kvTable.getTable().get(\"commitLogDiskRatio\"));\n        diskRatioMap.put(\"consumeQueueDiskRatio\", kvTable.getTable().get(\"consumeQueueDiskRatio\"));\n        runtimeQuotaMap.put(\"diskRatio\", diskRatioMap);",
                "newContent": "    private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt defaultMQAdminExt, String brokerAddr,\n        Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap,\n        SubscriptionGroupWrapper subscriptionGroupWrapper)\n        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n        TopicConfigSerializeWrapper topicConfigSerializeWrapper = defaultMQAdminExt.getUserTopicConfig(\n            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        BrokerStatsData scheduleStatsData = null;\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();\n        //disk use ratio\n        Map<String, Object> diskRatioMap = new HashMap<>();\n        diskRatioMap.put(\"commitLogDiskRatio
{
    "refactorings": {
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 176,
                "toLine": 204,
                "oldContent": "    private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt defaultMQAdminExt, String brokerAddr,\n        Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap,\n        SubscriptionGroupWrapper subscriptionGroupWrapper)\n        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n        TopicConfigSerializeWrapper topicConfigSerializeWrapper = defaultMQAdminExt.getUserTopicConfig(\n            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        try {\n            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();\n        //disk use ratio\n        Map<String, Object> diskRatioMap = new HashMap<>();\n        diskRatioMap.put(\"commitLogDiskRatio\", kvTable.getTable().get(\"commitLogDiskRatio\"));\n        diskRatioMap.put(\"consumeQueueDiskRatio\", kvTable.getTable().get(\"consumeQueueDiskRatio\"));\n        runtimeQuotaMap.put(\"diskRatio\", diskRatioMap);",
                "newContent": "    private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt defaultMQAdminExt, String brokerAddr,\n        Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap,\n        SubscriptionGroupWrapper subscriptionGroupWrapper)\n        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n        TopicConfigSerializeWrapper topicConfigSerializeWrapper = defaultMQAdminExt.getUserTopicConfig(\n            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        BrokerStatsData scheduleStatsData = null;\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();\n        //disk use ratio\n        Map<String, Object> diskRatioMap = new HashMap<>();\n        diskRatioMap.put(\"commitLogDiskRatio\", kvTable.getTable().get(\"commitLogDiskRatio\"));\n        diskRatioMap.put(\"consumeQueueDiskRatio\", kvTable.getTable().get(\"consumeQueueDiskRatio\"));\n        runtimeQuotaMap.put(\"diskRatio\", diskRatioMap);"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 17,
                "toLine": 39,
                "oldContent": "\npackage org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.body.TopicList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\n",
                "newContent": "\npackage org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.body.TopicList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\n"
            },
            {
                "fromLine": 44,
                "toLine": 83,
                "oldContent": "\n        GroupList groupList = admin.queryTopicConsumeByWho(topic);\n\n        double inTPS = 0;\n\n        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }\n            }\n        }\n\n        if (groupList != null && !groupList.getGroupList().isEmpty()) {\n\n            for (String group : groupList.getGroupList()) {\n                double outTPS = 0;\n                long outMsgCntToday = 0;\n\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n\n                long accumulate = 0;\n                try {",
                "newContent": "\n        GroupList groupList = admin.queryTopicConsumeByWho(topic);\n\n        double inTPS = 0;\n\n        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }\n            }\n        }\n\n        if (groupList != null && !groupList.getGroupList().isEmpty()) {\n\n            for (String group : groupList.getGroupList()) {\n                double outTPS = 0;\n                long outMsgCntToday = 0;\n\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n\n                long accumulate = 0;\n                try {"
            }
        ]
    },
    "extractedClasses": {}
}"