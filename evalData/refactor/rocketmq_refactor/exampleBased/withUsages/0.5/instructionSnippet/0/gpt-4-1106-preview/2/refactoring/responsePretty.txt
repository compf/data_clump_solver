"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 44,
                "toLine": 49,
                "oldContent": "@Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 51,
                "toLine": 52,
                "oldContent": "@Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 54,
                "toLine": 60,
                "oldContent": "@Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 62,
                "toLine": 68,
                "oldContent": "@Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;",
                "newContent": ""
            },
            {
                "fromLine": 109,
                "toLine": 110,
                "oldContent": "@Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;",
                "newContent": ""
            },
            {
                "fromLine": 112,
                "toLine": 112,
                "oldContent": "// Pull Message Latency",
                "newContent": ""
            },
            {
                "fromLine": 165,
                "toLine": 165,
                "oldContent": "public void init() {",
                "newContent": "public void init(StatsManager statsManager) {"
            },
            {
                "fromLine": 172,
                "toLine": 175,
                "oldContent": "if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));",
                "newContent": "if (enableQueueStat) {\n            statsManager.registerStatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log);\n            statsManager.registerStatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log);\n            statsManager.registerStatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 177,
                "toLine": 180,
                "oldContent": "}\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));",
                "newContent": "}\n        statsManager.registerStatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 183,
                "toLine": 183,
                "oldContent": "this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));",
                "newContent": "statsManager.registerStatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 185,
                "toLine": 185,
                "oldContent": "this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));",
                "newContent": "statsManager.registerStatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 187,
                "toLine": 188,
                "oldContent": "this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));",
                "newContent": "statsManager.registerStatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 195,
                "toLine": 202,
                "oldContent": "new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,",
                "newContent": "statsManager.registerStatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log);\n        statsManager.registerStatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE,"
            },
            {
                "fromLine": 207,
                "toLine": 220,
                "oldContent": "this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,",
                "newContent": "statsManager.registerStatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG);\n        statsManager.registerStatsItemSet(Stats.COMMERCIAL_PERM_FAILURES,"
            }
        ]
    },
    "extractedClasses": {
        "common/src/main/java/org/apache/rocketmq/common/stats/StatsManager.java": "package org.apache.rocketmq.common.stats;\n\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.apache.rocketmq.logging.InternalLogger;\n\npublic class StatsManager {\n\n    private final ConcurrentHashMap<String, StatsItemSet> statsTable = new ConcurrentHashMap<>();\n\n    public void registerStatsItemSet(String statsKey, ScheduledExecutorService scheduledExecutorService, InternalLogger log) {\n        statsTable.put(statsKey, new StatsItemSet(statsKey, scheduledExecutorService, log));\n    }\n\n    // Other methods for managing statistics might be added here.\n\n}"
    }
}"