"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 44,
                "toLine": 49,
                "oldContent": "@Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 51,
                "toLine": 52,
                "oldContent": "@Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 54,
                "toLine": 60,
                "oldContent": "@Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;",
                "newContent": ""
            },
            {
                "fromLine": 62,
                "toLine": 68,
                "oldContent": "@Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;",
                "newContent": ""
            },
            {
                "fromLine": 109,
                "toLine": 110,
                "oldContent": "@Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;",
                "newContent": ""
            },
            {
                "fromLine": 112,
                "toLine": 112,
                "oldContent": "// Pull Message Latency",
                "newContent": ""
            },
            {
                "fromLine": 165,
                "toLine": 165,
                "oldContent": "public void init() {",
                "newContent": "public void init() {\n        StatsManager statsManager = new StatsManager(this.scheduledExecutorService, log);"
            },
            {
                "fromLine": 172,
                "toLine": 180,
                "oldContent": "if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));",
                "newContent": "statsManager.registerStatsItemSets(enableQueueStat);"
            },
            {
                "fromLine": 183,
                "toLine": 183,
                "oldContent": "this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));",
                "newContent": ""
            },
            {
                "fromLine": 185,
                "toLine": 185,
                "oldContent": "this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));",
                "newContent": ""
            },
            {
                "fromLine": 187,
                "toLine": 202,
                "oldContent": "this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,",
                "newContent": ""
            },
            {
                "fromLine": 207,
                "toLine": 220,
                "oldContent": "this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,",
                "newContent": ""
            },
            {
                "fromLine": 332,
                "toLine": 343,
                "oldContent": "public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");",
                "newContent": "public void onTopicDeleted(final String topic) {\n        statsManager.deleteStatsByTopic(topic, enableQueueStat);"
            },
            {
                "fromLine": 349,
                "toLine": 356,
                "oldContent": "public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");",
                "newContent": "public void onGroupDeleted(final String group) {\n        statsManager.deleteStatsByGroup(group, enableQueueStat);"
            },
            {
                "fromLine": 363,
                "toLine": 363,
                "oldContent": "if (enableQueueStat) {",
                "newContent": ""
            },
            {
                "fromLine": 369,
                "toLine": 369,
                "oldContent": "if (enableQueueStat) {",
                "newContent": ""
            },
            {
                "fromLine": 375,
                "toLine": 375,
                "oldContent": "if (enableQueueStat) {",
                "newContent": ""
            },
            {
                "fromLine": 382,
                "toLine": 382,
                "oldContent": "final String statsKey = buildStatsKey(topic, queueId, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, queueId, group);"
            },
            {
                "fromLine": 389,
                "toLine": 389,
                "oldContent": "final String statsKey = buildStatsKey(topic, queueId, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, queueId, group);"
            },
            {
                "fromLine": 418,
                "toLine": 418,
                "oldContent": "public void incTopicPutNums(final String topic) {",
                "newContent": "public void incTopicPutNums(final String topic) {\n        statsManager.incrementStatsItem(Stats.TOPIC_PUT_NUMS, topic, 1);"
            },
            {
                "fromLine": 422,
                "toLine": 422,
                "oldContent": "public void incTopicPutNums(final String topic, int num, int times) {",
                "newContent": "public void incTopicPutNums(final String topic, int num, int times) {\n        statsManager.incrementStatsItem(Stats.TOPIC_PUT_NUMS, topic, num);"
            },
            {
                "fromLine": 426,
                "toLine": 426,
                "oldContent": "public void incTopicPutSize(final String topic, final int size) {",
                "newContent": "public void incTopicPutSize(final String topic, final int size) {\n        statsManager.incrementStatsItem(Stats.TOPIC_PUT_SIZE, topic, size);"
            },
            {
                "fromLine": 431,
                "toLine": 431,
                "oldContent": "final String statsKey = buildStatsKey(topic, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group);"
            },
            {
                "fromLine": 490,
                "toLine": 490,
                "oldContent": "final String statsKey = buildStatsKey(topic, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group);"
            },
            {
                "fromLine": 500,
                "toLine": 500,
                "oldContent": "}",
                "newContent": ""
            },
            {
                "fromLine": 515,
                "toLine": 515,
                "oldContent": "public void incBrokerPutNums() {",
                "newContent": "public void incBrokerPutNums() {\n        statsManager.incrementStatsItem(Stats.BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName(), 1);"
            },
            {
                "fromLine": 519,
                "toLine": 519,
                "oldContent": "public void incBrokerPutNums(final String topic, final int incValue) {",
                "newContent": "public void incBrokerPutNums(final String topic, final int incValue) {\n        statsManager.incrementStatsItem(Stats.BROKER_PUT_NUMS, topic, incValue);"
            },
            {
                "fromLine": 524,
                "toLine": 524,
                "oldContent": "public void incBrokerGetNums(final String topic, final int incValue) {",
                "newContent": "public void incBrokerGetNums(final String topic, final int incValue) {\n        statsManager.incrementStatsItem(Stats.BROKER_GET_NUMS, topic, incValue);"
            },
            {
                "fromLine": 576,
                "toLine": 576,
                "oldContent": "final String statsKey = buildStatsKey(topic, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group);"
            },
            {
                "fromLine": 581,
                "toLine": 581,
                "oldContent": "final String statsKey = buildStatsKey(topic, group);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(topic, group);"
            },
            {
                "fromLine": 624,
                "toLine": 624,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 627,
                "toLine": 627,
                "oldContent": "final long... incValues) {",
                "newContent": "final long... incValues) {\n        statsManager.incrementStatsItem(statsKey, incValues);"
            },
            {
                "fromLine": 634,
                "toLine": 634,
                "oldContent": "final long... incValues) {",
                "newContent": "final long... incValues) {\n        statsManager.incrementStatsItem(statsKey, incValues);"
            },
            {
                "fromLine": 699,
                "toLine": 699,
                "oldContent": "",
                "newContent": ""
            },
            {
                "fromLine": 704,
                "toLine": 708,
                "oldContent": "StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(owner, instanceId, topic, group);"
            }
        ],
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 20,
                "toLine": 45,
                "oldContent": "public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";",
                "newContent": ""
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 40,
                "oldContent": "package org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats
{
    "refactorings": {
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, QUEUE_ID);"
            },
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);",
                "newContent": "statsManager.incrementStatsItem(Stats.QUEUE_PUT_NUMS, statsKey, 2);"
            },
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, QUEUE_ID);"
            },
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, QUEUE_ID, GROUP_NAME);"
            },
            {
                "fromLine": 91,
                "toLine": 91,
                "oldContent": "final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);",
                "newContent": "final String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, QUEUE_ID, GROUP_NAME);"
            },
            {
                "fromLine": 97,
                "toLine": 97,
                "oldContent": "brokerStatsManager.incTopicPutNums(TOPIC);",
                "newContent": "statsManager.incrementStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC, 1);"
            },
            {
                "fromLine": 99,
                "toLine": 99,
                "oldContent": "brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);",
                "newContent": "statsManager.incrementStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC, 2);"
            },
            {
                "fromLine": 105,
                "toLine": 105,
                "oldContent": "brokerStatsManager.incTopicPutSize(TOPIC, 2);",
                "newContent": "statsManager.incrementStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC, 2);"
            },
            {
                "fromLine": 112,
                "toLine": 112,
                "oldContent": "String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, GROUP_NAME);"
            },
            {
                "fromLine": 119,
                "toLine": 119,
                "oldContent": "String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(TOPIC, GROUP_NAME);"
            },
            {
                "fromLine": 126,
                "toLine": 126,
                "oldContent": "String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(1, TOPIC, GROUP_NAME);"
            },
            {
                "fromLine": 132,
                "toLine": 132,
                "oldContent": "brokerStatsManager.incBrokerPutNums();",
                "newContent": "statsManager.incrementStatsItem(Stats.BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName(), 1);"
            },
            {
                "fromLine": 152,
                "toLine": 163,
                "oldContent": "Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));",
                "newContent": "Assert.assertNull(statsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(statsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));"
            },
            {
                "fromLine": 179,
                "toLine": 186,
                "oldContent": "Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));",
                "newContent": "Assert.assertNull(statsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(statsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 104,
                "toLine": 106,
                "oldContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);",
                "newContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(statsManager.getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(statsManager.getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);"
            },
            {
                "fromLine": 117,
                "toLine": 119,
                "oldContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);",
                "newContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(statsManager.getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(statsManager.getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 228,
                "toLine": 230,
                "oldContent": "// get the stats change\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);",
                "newContent": "// get the stats change\n        assertThat(statsManager.getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(statsManager.getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 186,
                "toLine": 186,
                "oldContent": "transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,",
                "newContent": "transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr, Stats.TRANSACTION_PUT_NUMS);"
            },
            {
                "fromLine": 194,
                "toLine": 194,
                "oldContent": "scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,",
                "newContent": "scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr, Stats.SCHEDULE_PUT_NUMS);"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "try {",
                "newContent": "try {\n            StatsManager statsManager = new StatsManager(null, null); // Mock for the purpose of the test"
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "String statsKey = String.format(\"%s@%s\", topic, group);",
                "newContent": "String statsKey = StatsKeyBuilder.buildStatsKey(topic, group);"
            }
        ]
    },
    "extractedClasses": {
        "org/apache/rocketmq/store/stats/StatsManager.java": "package org.apache.rocketmq.store.stats;\n\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\n\npublic class StatsManager {\n    private final ScheduledExecutorService scheduledExecutorService;\n    private final InternalLogger log;\n\n    public StatsManager(ScheduledExecutorService scheduledExecutorService, InternalLogger log) {\n        this.scheduledExecutorService = scheduledExecutorService;\n        this.log = log;\n    }\n\n    // Methods to interact with stats, like registerStatsItemSets, incrementStatsItem, deleteStatsByTopic, deleteStatsByGroup, getStatsItem, etc.\n}",
        "org/apache/rocketmq/store/stats/StatsKeyBuilder.java": "package org.apache.rocketmq.store.stats;\n\npublic class StatsKeyBuilder {\n    public static String buildStatsKey(String... parts) {\n        // Implementation to build a stats key from parts\n    }\n}"
    }
}"