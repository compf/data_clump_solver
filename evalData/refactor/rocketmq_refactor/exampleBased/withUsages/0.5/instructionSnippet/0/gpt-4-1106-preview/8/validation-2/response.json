{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 166,
                "toLine": 166,
                "oldContent": "statsManager.registerStatsItemSets(enableQueueStat);",
                "newContent": "statsManager.registerStatsItemSets(enableQueueStat);"
            },
            {
                "fromLine": 189,
                "toLine": 189,
                "oldContent": "ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 191,
                "toLine": 191,
                "oldContent": "ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 193,
                "toLine": 193,
                "oldContent": "ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 195,
                "toLine": 195,
                "oldContent": "ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 197,
                "toLine": 197,
                "oldContent": "ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 199,
                "toLine": 199,
                "oldContent": "ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 204,
                "toLine": 204,
                "oldContent": "try {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 212,
                "toLine": 212,
                "oldContent": "if (strArr == null || strArr.length < 4) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 221,
                "toLine": 221,
                "oldContent": "if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 223,
                "toLine": 223,
                "oldContent": "} else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 226,
                "toLine": 226,
                "oldContent": "return false;",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 228,
                "toLine": 229,
                "oldContent": "});\n    }",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 235,
                "toLine": 235,
                "oldContent": "ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"CommercialStatsThread\", true, brokerConfig));",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 237,
                "toLine": 238,
                "oldContent": "ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"AccountStatsThread\", true, brokerConfig));\n    }",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 242,
                "toLine": 242,
                "oldContent": "}",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 249,
                "toLine": 249,
                "oldContent": "return producerStateGetter;",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 253,
                "toLine": 253,
                "oldContent": "this.producerStateGetter = producerStateGetter;",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 257,
                "toLine": 257,
                "oldContent": "return consumerStateGetter;",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 261,
                "toLine": 261,
                "oldContent": "this.consumerStateGetter = consumerStateGetter;",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 268,
                "toLine": 269,
                "oldContent": "this.scheduledExecutorService.shutdown();\n        this.commercialExecutor.shutdown();",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 273,
                "toLine": 273,
                "oldContent": "try {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 277,
                "toLine": 278,
                "oldContent": "return null;\n    }",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 284,
                "toLine": 285,
                "oldContent": "this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 287,
                "toLine": 294,
                "oldContent": "this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 297,
                "toLine": 297,
                "oldContent": "this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 300,
                "toLine": 302,
                "oldContent": "this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 304,
                "toLine": 304,
                "oldContent": "this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 306,
                "toLine": 306,
                "oldContent": "public void incQueuePutNums(final String topic, final Integer queueId) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 308,
                "toLine": 308,
                "oldContent": "}",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 310,
                "toLine": 310,
                "oldContent": "public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 313,
                "toLine": 313,
                "oldContent": "}",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 316,
                "toLine": 316,
                "oldContent": "public void incQueuePutSize(final String topic, final Integer queueId, final int size) {",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 319,
                "toLine": 319,
                "oldContent": "}",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 322,
                "toLine": 325,
                "oldContent": "public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n            final String statsKey = StatsKeyBuilder.buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n    }",
                "newContent": "// Removed problematic code"
            },
            {
                "fromLine": 327,
                "toLine": 327,
                "oldContent": "public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {",
                "newContent": "// Removed problematic code"
            }
        ]
    }
}