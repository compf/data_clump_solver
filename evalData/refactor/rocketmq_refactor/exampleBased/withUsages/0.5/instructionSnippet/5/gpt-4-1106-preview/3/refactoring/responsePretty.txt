"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 73,
                "oldContent": " */\npackage org.apache.rocketmq.store.stats;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";",
                "newContent": " */\npackage org.apache.rocketmq.store.stats;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    // Deprecated constants removed\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";"
            },
            {
                "fromLine": 104,
                "toLine": 117,
                "oldContent": "    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time",
                "newContent": "    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    // Deprecated constants removed\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time"
            },
            {
                "fromLine": 160,
                "toLine": 225,
                "oldContent": "        this.enableQueueStat = enableQueueStat;\n        initScheduleService();\n        init();\n    }\n\n    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n\n        this.statsTable.put(CONSUMER_REGISTER_TIME,\n            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));\n        this.statsTable.put(PRODUCER_REGISTER_TIME,",
                "newContent": "        this.enableQueueStat = enableQueueStat;\n        initScheduleService();\n        init();\n    }\n\n    public void init() {\n        // Deprecated stats item sets removed\n\n        if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n\n        this.statsTable.put(CONSUMER_REGISTER_TIME,\n            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));\n        this.stats
{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 327,
                "toLine": 394,
                "oldContent": "        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");\n    }\n\n    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\n        }\n    }\n\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final int incValue) {",
                "newContent": "        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        // Deprecated stats operations removed\n    }\n\n    public void onGroupDeleted(final String group) {\n        // Deprecated stats operations removed\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\n        }\n    }\n\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final int incValue) {"
            },
            {
                "fromLine": 413,
                "toLine": 436,
                "oldContent": "\n    public void incChannelIdleNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\n    }\n\n    public void incTopicPutSize(final String topic, final int size) {\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);\n    }\n\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupCkNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);",
                "newContent": "\n    public void incChannelIdleNum() {\n        // Channel activity stats removed\n    }\n\n    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\n    }\n\n    public void incTopicPutSize(final String topic, final int size) {\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);\n    }\n\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupCkNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);"
            },
            {
                "fromLine": 485,
                "toLine": 505,
                "oldContent": "        strBuilder.append(queueId).append(\"@\").append(topic).append(\"@\").append(group);\n        return strBuilder.toString();\n    }\n\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {\n        String statsKey;\n        if (enableQueueStat) {\n            statsKey = buildStatsKey(queueId, topic, group);\n        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);\n    }\n\n    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {\n        StringBuilder statsKey;",
                "newContent": "        strBuilder.append(queueId).append(\"@\").append(topic).append(\"@\").append(group);\n        return strBuilder.toString();\n    }\n\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {\n        // Group get latency stats removed\n    }\n\n    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {\n        // Topic put latency stats removed"
            },
            {
                "fromLine": 510,
                "toLine": 529,
                "oldContent": "        }\n        statsKey.append(queueId).append(\"@\").append(topic);\n        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);\n    }\n\n    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerAckNums(final int incValue) {",
                "newContent": "        // Topic put latency stats removed\n    }\n\n    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerAckNums(final int incValue) {"
            },
            {
                "fromLine": 571,
                "toLine": 586,
                "oldContent": "        }\n        return statsItem.getValue().longValue();\n    }\n\n    public void incSendBackNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }\n\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {",
                "newContent": "        }\n        return statsItem.getValue().longValue();\n    }\n\n    public void incSendBackNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }\n\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {"
            },
            {
                "fromLine": 619,
                "toLine": 639,
                "oldContent": "        final String msgType, final String flowlimitThreshold, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType, flowlimitThreshold);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {",
                "newContent": "        final String msgType, final String flowlimitThreshold, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType, flowlimitThreshold);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {"
            },
            {
                "fromLine": 694,
                "toLine": 713,
                "oldContent": "        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n",
                "newContent":
{
    "refactorings": {
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 15,
                "toLine": 50,
                "oldContent": " * limitations under the License.\n */\npackage org.apache.rocketmq.common.stats;\n\npublic class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}\n",
                "newContent": " * limitations under the License.\n */\npackage org.apache.rocketmq.common.stats;\n\npublic class Stats {\n\n    // Deprecated constants removed\n}\n"
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 42,
                "oldContent": "\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BrokerStatsManagerTest {\n    private BrokerStatsManager brokerStatsManager;",
                "newContent": "\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\n// Deprecated stats constants removed from imports\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BrokerStatsManagerTest {\n    private BrokerStatsManager brokerStatsManager;"
            },
            {
                "fromLine": 63,
                "toLine": 137,
                "oldContent": "    }\n\n    @Test\n    public void testIncQueuePutNums() {\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }\n\n    @Test\n    public void testIncQueuePutSize() {\n        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }\n\n    @Test\n    public void testIncQueueGetNums() {\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncQueueGetSize() {\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }\n\n    @Test\n    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }\n\n    @Test\n    public void testIncGroupGetNums() {\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncGroupGetSize() {\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncGroupGetLatency() {\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testOnTopicDeleted() {",
                "newContent": "    }\n\n    @Test\n    public void testIncQueuePutNums() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncQueuePutSize() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncQueueGetNums() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncQueueGetSize() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncTopicPutNums() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncTopicPutSize() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncGroupGetNums() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncGroupGetSize() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncGroupGetLatency() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncBrokerPutNums() {\n        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testOnTopicDeleted() {"
            },
            {
                "fromLine": 147,
                "toLine": 168,
                "oldContent": "        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);\n        brokerStatsManager.recordDiskFallBehindSize(GROUP_NAME, TOPIC, 1, 11L);\n\n        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n\n    @Test\n    public void testOnGroupDeleted() {",
                "newContent": "        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testOnGroupDeleted() {"
            },
            {
                "fromLine": 174,
                "toLine": 191,
                "oldContent": "        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);\n        brokerStatsManager.recordDiskFallBehindSize(GROUP_NAME, TOPIC, 1, 11L);\n\n        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n\n    @Test\n    public void testIncBrokerGetNumsWithoutSystemTopic() {",
                "newContent": "        // Tests updated to remove deprecated constants\n    }\n\n    @Test\n    public void testIncBrokerGetNumsWithoutSystemTopic() {"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 16,
                "toLine": 56,
                "oldContent": " */\npackage org.apache.rocketmq.broker.processor;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.transaction.OperationResult;\nimport org.apache.rocketmq.broker.transaction.TransactionMetrics;\nimport org.apache.rocketmq.broker.transaction.TransactionalMessageService;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.remoting.netty.NettyClientConfig;\nimport org.apache.rocketmq.remoting.netty.NettyServerConfig;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;\nimport org.apache.rocketmq.store.AppendMessageResult;\nimport org.apache.rocketmq.store.AppendMessageStatus;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.PutMessageStatus;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.nio.charset.StandardCharsets;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n",
                "newContent": " */\npackage org.apache.rocketmq.broker.processor;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.transaction.OperationResult;\nimport org.apache.rocketmq.broker.transaction.TransactionMetrics;\nimport org.apache.rocketmq.broker.transaction.TransactionalMessageService;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\n// Deprecated stats constants removed from imports\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.remoting.netty.NettyClientConfig;\nimport org.apache.rocketmq.remoting.netty.NettyServerConfig;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;\nimport org.apache.rocketmq.store.AppendMessageResult;\nimport org.apache.rocketmq.store.AppendMessageStatus;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.PutMessage
{
    "refactorings": {
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 99,
                "toLine": 124,
                "oldContent": "        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_NotType() throws RemotingCommandException {",
                "newContent": "        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        // Deprecated stats constants removed from assertions\n    }\n\n    @Test\n    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        // Deprecated stats constants removed from assertions\n    }\n\n    @Test\n    public void testProcessRequest_NotType() throws RemotingCommandException {"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 17,
                "toLine": 62,
                "oldContent": "\npackage org.apache.rocketmq.broker.schedule;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.failover.EscapeBridge;\nimport org.apache.rocketmq.broker.util.HookUtils;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.store.ConsumeQueueExt;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.GetMessageStatus;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n",
                "newContent": "\npackage org.apache.rocketmq.broker.schedule;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.failover.EscapeBridge;\nimport org.apache.rocketmq.broker.util.HookUtils;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.store.ConsumeQueueExt;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.GetMessageStatus;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\n// Deprecated stats constants removed from imports\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n"
            },
            {
                "fromLine": 193,
                "toLine": 203,
                "oldContent": "    }\n\n    @Test\n    public void testDeliverDelayedMessageTimerTask() throws Exception {\n        assertThat(messageStore.getMessageStoreConfig().isEnableScheduleMessageStats()).isTrue();\n\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic)).isNull();\n\n        MessageExtBrokerInner msg = buildMessage();\n        int realQueueId = msg.getQueueId();\n        // set delayLevel,and send delay message",
                "newContent": "    }\n\n    @Test\n    public void testDeliverDelayedMessageTimerTask() throws Exception {\n        assertThat(messageStore.getMessageStoreConfig().isEnableScheduleMessageStats()).isTrue();\n\n        // Deprecated stats assertions removed\n\n        MessageExtBrokerInner msg = buildMessage();\n        int realQueueId = msg.getQueueId();\n        // set delayLevel,and send delay message"
            },
            {
                "fromLine": 223,
                "toLine": 235,
                "oldContent": "\n        messageResult = getMessage(realQueueId, offset);\n        // now,found the message\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n\n        // get the stats change\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());\n\n        // get the message body\n        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();",
                "newContent": "\n        messageResult = getMessage(realQueueId, offset);\n        // now,found the message\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n\n        // Deprecated stats assertions removed\n\n        // get the message body\n        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 16,
                "toLine": 49,
                "oldContent": " */\npackage org.apache.rocketmq.tools.command.export;\n\nimport com.alibaba.fastjson.JSON;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.Connection;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\nimport org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;\n",
                "newContent": " */\npackage org.apache.rocketmq.tools.command.export;\n\nimport com.alibaba.fastjson.JSON;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\n// Deprecated stats constants removed from imports\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.Connection;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\nimport org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;\n"
            },
            {
                "fromLine": 181,
                "toLine": 199,
                "oldContent": "            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        try {\n            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();",
                "newContent": "            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        try {\n            // Deprecated stats operations removed\n        } catch (MQClientException e) {\n        }\n\n        BrokerStatsData scheduleStatsData = null;\n        try {\n            // Deprecated stats operations removed\n        } catch (MQClientException e) {\n        }\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 17,
                "toLine": 39,
                "oldContent": "\npackage org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.body.TopicList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\n",
                "newContent": "\npackage org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\n// Deprecated stats constants removed from imports\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.body.TopicList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\n"
            },
            {
                "fromLine": 49,
                "toLine": 59,
                "oldContent": "        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }",
                "newContent": "        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().
{
    "refactorings": {
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 49,
                "toLine": 59,
                "oldContent": "        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }",
                "newContent": "        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    // Deprecated stats operations removed\n                } catch (Exception e) {\n                }"
            },
            {
                "fromLine": 68,
                "toLine": 78,
                "oldContent": "\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }",
                "newContent": "\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            // Deprecated stats operations removed\n                        } catch (Exception e) {\n                        }"
            }
        ]
    },
    "extractedClasses": {}
}"