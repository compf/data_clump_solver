"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/MessageStore.java": [
            {
                "fromLine": 0,
                "toLine": 0,
                "oldContent": "",
                "newContent": "package org.apache.rocketmq.store;\n\n"
            },
            {
                "fromLine": 564,
                "toLine": 576,
                "oldContent": "     * @return Consume queue.\n     */\n    ConsumeQueueInterface findConsumeQueue(String topic, int queueId);\n\n\n     * @param result        append message result\n     * @param commitLogFile commit log file\n     */\n    void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile);\n\n    /**\n     * Will be triggered when a new dispatch request is sent to message store.\n     *",
                "newContent": ""
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/plugin/AbstractPluginMessageStore.java": [
            {
                "fromLine": 0,
                "toLine": 0,
                "oldContent": "",
                "newContent": "package org.apache.rocketmq.store.plugin;\n\n"
            },
            {
                "fromLine": 280,
                "toLine": 519,
                "oldContent": "        return next.getConsumeQueue(topic, queueId);\n    }\n\n    @Override\n\n        return next.remainTransientStoreBufferNumbs();\n    }\n\n    @Override\n    public long remainHowManyDataToCommit() {\n        return next.remainHowManyDataToCommit();\n    }\n\n    @Override\n    public long remainHowManyDataToFlush() {\n        return next.remainHowManyDataToFlush();\n    }\n\n    @Override\n    public DispatchRequest checkMessageAndReturnSize(final ByteBuffer byteBuffer, final boolean checkCRC,\n        final boolean checkDupInfo, final boolean readBody) {\n        return next.checkMessageAndReturnSize(byteBuffer, checkCRC, checkDupInfo, readBody);\n    }\n\n    @Override\n    public long getStateMachineVersion() {\n        return next.getStateMachineVersion();\n    }\n\n    @Override\n    public PutMessageResult putMessages(MessageExtBatch messageExtBatch) {\n        return next.putMessages(messageExtBatch);\n    }\n\n    @Override\n    public HARuntimeInfo getHARuntimeInfo() {\n        return next.getHARuntimeInfo();\n    }\n\n    @Override\n    public boolean getLastMappedFile(long startOffset) {\n        return next.getLastMappedFile(startOffset);\n    }\n\n    @Override\n    public void updateHaMasterAddress(String newAddr) {\n        next.updateHaMasterAddress(newAddr);\n    }\n\n    @Override\n    public void updateMasterAddress(String newAddr) {\n        next.updateMasterAddress(newAddr);\n    }\n\n    @Override\n    public long slaveFallBehindMuch() {\n        return next.slaveFallBehindMuch();\n    }\n\n    @Override\n    public long getFlushedWhere() {\n        return next.getFlushedWhere();\n    }\n\n    @Override\n    public MessageStore getMasterStoreInProcess() {\n        return next.getMasterStoreInProcess();\n    }\n\n    @Override\n    public void setMasterStoreInProcess(MessageStore masterStoreInProcess) {\n        next.setMasterStoreInProcess(masterStoreInProcess);\n    }\n\n    @Override\n    public boolean getData(long offset, int size, ByteBuffer byteBuffer) {\n        return next.getData(offset, size, byteBuffer);\n    }\n\n    @Override\n    public void setAliveReplicaNumInGroup(int aliveReplicaNums) {\n        next.setAliveReplicaNumInGroup(aliveReplicaNums);\n    }\n\n    @Override\n    public int getAliveReplicaNumInGroup() {\n        return next.getAliveReplicaNumInGroup();\n    }\n\n    @Override\n    public void wakeupHAClient() {\n        next.wakeupHAClient();\n    }\n\n    @Override\n    public long getMasterFlushedOffset() {\n        return next.getMasterFlushedOffset();\n    }\n\n    @Override\n    public long getBrokerInitMaxOffset() {\n        return next.getBrokerInitMaxOffset();\n    }\n\n    @Override\n    public void setMasterFlushedOffset(long masterFlushedOffset) {\n        next.setMasterFlushedOffset(masterFlushedOffset);\n    }\n\n    @Override\n    public void setBrokerInitMaxOffset(long brokerInitMaxOffset) {\n        next.setBrokerInitMaxOffset(brokerInitMaxOffset);\n    }\n\n    @Override\n    public byte[] calcDeltaChecksum(long from, long to) {\n        return next.calcDeltaChecksum(from, to);\n    }\n\n    @Override\n    public HAService getHaService() {\n        return next.getHaService();\n    }\n\n    @Override\n    public boolean truncateFiles(long offsetToTruncate) throws RocksDBException {\n        return next.truncateFiles(offsetToTruncate);\n    }\n\n    @Override\n    public boolean isOffsetAligned(long offset) {\n        return next.isOffsetAligned(offset);\n    }\n\n    @Override\n    public RunningFlags getRunningFlags() {\n        return next.getRunningFlags();\n    }\n\n    @Override\n    public void setSendMessageBackHook(SendMessageBackHook sendMessageBackHook) {\n        next.setSendMessageBackHook(sendMessageBackHook);\n    }\n\n    @Override\n    public SendMessageBackHook getSendMessageBackHook() {\n        return next.getSendMessageBackHook();\n    }\n\n    @Override\n    public GetMessageResult getMessage(String group, String topic, int queueId, long offset,\n        int maxMsgNums, int maxTotalMsgSize, MessageFilter messageFilter) {\n        return next.getMessage(group, topic, queueId, offset, maxMsgNums, maxTotalMsgSize, messageFilter);\n    }\n\n    @Override\n    public CompletableFuture<GetMessageResult> getMessageAsync(String group, String topic,\n        int queueId, long offset, int maxMsgNums, int maxTotalMsgSize,\n        MessageFilter messageFilter) {\n        return next.getMessageAsync(group, topic, queueId, offset, maxMsgNums, maxTotalMsgSize, messageFilter);\n    }\n\n    @Override\n    public MessageExt lookMessageByOffset(long commitLogOffset, int size) {\n        return next.lookMessageByOffset(commitLogOffset, size);\n    }\n\n    @Override\n    public List<SelectMappedBufferResult> getBulkCommitLogData(long offset, int size) {\n        return next.getBulkCommitLogData(offset, size);\n    }\n\n    @Override\n    public void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile) {\n        next.onCommitLogAppend(msg, result, commitLogFile);\n    }\n\n    @Override\n    public void onCommitLogDispatch(DispatchRequest dispatchRequest, boolean doDispatch, MappedFile commitLogFile,\n        boolean isRecover, boolean isFileEnd) throws RocksDBException {\n        next.onCommitLogDispatch(dispatchRequest, doDispatch, commitLogFile, isRecover, isFileEnd);\n    }\n\n    @Override\n    public MessageStoreConfig getMessageStoreConfig() {\n        return next.getMessageStoreConfig();\n    }\n\n    @Override\n    public StoreStatsService getStoreStatsService() {\n        return next.getStoreStatsService();\n    }\n\n    @Override\n    public StoreCheckpoint getStoreCheckpoint() {\n        return next.getStoreCheckpoint();\n    }\n\n    @Override\n    public SystemClock getSystemClock() {\n        return next.getSystemClock();\n    }\n\n    @Override\n    public CommitLog getCommitLog() {\n        return next.getCommitLog();\n    }\n\n    @Override\n    public TransientStorePool getTransientStorePool() {\n        return next.getTransientStorePool();\n    }\n\n    @Override\n    public AllocateMappedFileService getAllocateMappedFileService() {\n        return next.getAllocateMappedFileService();\n    }\n\n    @Override\n    public void truncateDirtyLogicFiles(long phyOffset) throws RocksDBException {\n        next.truncateDirtyLogicFiles(phyOffset);\n    }\n\n    @Override\n    public void unlockMappedFile(MappedFile unlockMappedFile) {\n        next.unlockMappedFile(unlockMappedFile);\n    }\n\n    @Override\n    public PerfCounter.Ticks getPerfCounter() {\n        return next.getPerfCounter();\n    }\n\n    @Override\n    public ConsumeQueueStoreInterface getQueueStore() {\n        return next.getQueueStore();\n    }\n\n    @Override\n    public boolean isSyncDiskFlush() {",
                "newContent": ""
            }
        ]
    }
}"