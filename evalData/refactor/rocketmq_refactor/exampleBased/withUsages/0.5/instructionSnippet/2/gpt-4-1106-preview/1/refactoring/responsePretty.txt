"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 70,
                "oldContent": "public class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n",
                "newContent": "public class BrokerStatsManager {\n"
            },
            {
                "fromLine": 107,
                "toLine": 114,
                "oldContent": "    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n",
                "newContent": "    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n"
            },
            {
                "fromLine": 163,
                "toLine": 190,
                "oldContent": "    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n",
                "newContent": "    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n            this.statsTable.put(StatsItemKey.QUEUE_PUT_NUMS.getKey(), new StatsItemSet(StatsItemKey.QUEUE_PUT_NUMS.getKey(), this.scheduledExecutorService, log));\n            this.statsTable.put(StatsItemKey.QUEUE_PUT_SIZE.getKey(), new StatsItemSet(StatsItemKey.QUEUE_PUT_SIZE.getKey(), this.scheduledExecutorService, log));\n            this.statsTable.put(StatsItemKey.QUEUE_GET_NUMS.getKey(), new StatsItemSet(StatsItemKey.QUEUE_GET_NUMS.getKey(), this.scheduledExecutorService, log));\n            this.statsTable.put(StatsItemKey.QUEUE_GET_SIZE.getKey(), new StatsItemSet(StatsItemKey.QUEUE_GET_SIZE.getKey(), this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(StatsItemKey.TOPIC_PUT_NUMS.getKey(), new StatsItemSet(StatsItemKey.TOPIC_PUT_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.TOPIC_PUT_SIZE.getKey(), new StatsItemSet(StatsItemKey.TOPIC_PUT_SIZE.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.GROUP_GET_NUMS.getKey(), new StatsItemSet(StatsItemKey.GROUP_GET_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.GROUP_GET_SIZE.getKey(), new StatsItemSet(StatsItemKey.GROUP_GET_SIZE.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.GROUP_GET_LATENCY.getKey(), new StatsItemSet(StatsItemKey.GROUP_GET_LATENCY.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.SNDBCK_PUT_NUMS.getKey(), new StatsItemSet(StatsItemKey.SNDBCK_PUT_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.BROKER_PUT_NUMS.getKey(), new StatsItemSet(StatsItemKey.BROKER_PUT_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.BROKER_GET_NUMS.getKey(), new StatsItemSet(StatsItemKey.BROKER_GET_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n"
            },
            {
                "fromLine": 193,
                "toLine": 222,
                "oldContent": "            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n",
                "newContent": "            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.GROUP_GET_FROM_DISK_NUMS.getKey(),\n            new StatsItemSet(StatsItemKey.GROUP_GET_FROM_DISK_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.GROUP_GET_FROM_DISK_SIZE.getKey(),\n            new StatsItemSet(StatsItemKey.GROUP_GET_FROM_DISK_SIZE.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.BROKER_GET_FROM_DISK_NUMS.getKey(),\n            new StatsItemSet(StatsItemKey.BROKER_GET_FROM_DISK_NUMS.getKey(), this.scheduledExecutorService, log));\n        this.statsTable.put(StatsItemKey.BROKER_GET_FROM_DISK_SIZE.getKey(),\n            new StatsItemSet(StatsItemKey.BROKER_GET_FROM_DISK_SIZE.getKey(), this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(StatsItemKey.COMMERCIAL_SEND_TIMES.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_SEND_TIMES.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_RCV_TIMES.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_RCV_TIMES.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_SEND_SIZE.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_SEND_SIZE.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_RCV_SIZE.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_RCV_SIZE.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_RCV_EPOLLS.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_RCV_EPOLLS.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_SNDBCK_TIMES.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_SNDBCK_TIMES.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(StatsItemKey.COMMERCIAL_PERM_FAILURES.getKey(),\n            new StatsItemSet(StatsItemKey.COMMERCIAL_PERM_FAILURES.getKey(), this.commercialExecutor, COMMERCIAL_LOG));\n"
            },
            {
                "fromLine": 330,
                "toLine": 345,
                "oldContent": "    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");",
                "newContent": "    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(StatsItemKey.TOPIC_PUT_NUMS.getKey()).delValue(topic);\n        this.statsTable.get(StatsItemKey.TOPIC_PUT_SIZE.getKey()).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(StatsItemKey.QUEUE_PUT_NUMS.getKey()).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(StatsItemKey.QUEUE_PUT_SIZE.getKey()).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(StatsItemKey.GROUP_GET_NUMS.getKey()).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(StatsItemKey.GROUP_GET_SIZE.getKey()).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(StatsItemKey.QUEUE_GET_NUMS.getKey()).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(StatsItemKey.QUEUE_GET_SIZE.getKey()).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(StatsItemKey.SNDBCK_PUT_NUMS.getKey()).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(StatsItemKey.GROUP_GET_LATENCY.getKey()).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");"
            },
            {
                "fromLine": 347,
                "toLine": 358,
                "oldContent": "    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.G
{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 347,
                "toLine": 358,
                "oldContent": "    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");",
                "newContent": "    public void onGroupDeleted(final String group) {\n        this.statsTable.get(StatsItemKey.GROUP_GET_NUMS.getKey()).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(StatsItemKey.GROUP_GET_SIZE.getKey()).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(StatsItemKey.QUEUE_GET_NUMS.getKey()).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(StatsItemKey.QUEUE_GET_SIZE.getKey()).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(StatsItemKey.SNDBCK_PUT_NUMS.getKey()).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(StatsItemKey.GROUP_GET_LATENCY.getKey()).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");"
            },
            {
                "fromLine": 361,
                "toLine": 365,
                "oldContent": "\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }",
                "newContent": "\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(StatsItemKey.QUEUE_PUT_NUMS.getKey()).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }"
            },
            {
                "fromLine": 367,
                "toLine": 371,
                "oldContent": "\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\n        }",
                "newContent": "\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(StatsItemKey.QUEUE_PUT_NUMS.getKey()).addValue(buildStatsKey(topic, queueId), num, times);\n        }"
            },
            {
                "fromLine": 373,
                "toLine": 377,
                "oldContent": "\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\n        }",
                "newContent": "\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(StatsItemKey.QUEUE_PUT_SIZE.getKey()).addValue(buildStatsKey(topic, queueId), size, 1);\n        }"
            },
            {
                "fromLine": 380,
                "toLine": 384,
                "oldContent": "    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }",
                "newContent": "    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(StatsItemKey.QUEUE_GET_NUMS.getKey()).addValue(statsKey, incValue, 1);\n        }"
            },
            {
                "fromLine": 387,
                "toLine": 391,
                "oldContent": "    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }",
                "newContent": "    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(StatsItemKey.QUEUE_GET_SIZE.getKey()).addValue(statsKey, incValue, 1);\n        }"
            },
            {
                "fromLine": 416,
                "toLine": 433,
                "oldContent": "    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\n    }\n\n    public void incTopicPutSize(final String topic, final int size) {\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);\n    }\n\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }",
                "newContent": "    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(StatsItemKey.TOPIC_PUT_NUMS.getKey()).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(StatsItemKey.TOPIC_PUT_NUMS.getKey()).addValue(topic, num, times);\n    }\n\n    public void incTopicPutSize(final String topic, final int size) {\n        this.statsTable.get(StatsItemKey.TOPIC_PUT_SIZE.getKey()).addValue(topic, size, 1);\n    }\n\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(StatsItemKey.GROUP_GET_NUMS.getKey()).addValue(statsKey, incValue, 1);\n    }"
            },
            {
                "fromLine": 488,
                "toLine": 492,
                "oldContent": "\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }",
                "newContent": "\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(StatsItemKey.GROUP_GET_SIZE.getKey()).addValue(statsKey, incValue, 1);\n    }"
            },
            {
                "fromLine": 498,
                "toLine": 502,
                "oldContent": "        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);\n    }",
                "newContent": "        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(StatsItemKey.GROUP_GET_LATENCY.getKey()).addRTValue(statsKey, incValue, 1);\n    }"
            },
            {
                "fromLine": 513,
                "toLine": 526,
                "oldContent": "    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);",
                "newContent": "    public void incBrokerPutNums() {\n        this.statsTable.get(StatsItemKey.BROKER_PUT_NUMS.getKey()).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(StatsItemKey.BROKER_PUT_NUMS.getKey()).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(StatsItemKey.BROKER_GET_NUMS.getKey()).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);"
            },
            {
                "fromLine": 574,
                "toLine": 583,
                "oldContent": "\n    public void incSendBackNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }",
                "newContent": "\n    public void incSendBackNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(StatsItemKey.SNDBCK_PUT_NUMS.getKey()).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        return this.statsTable.get(StatsItemKey.GROUP_GET_NUMS.getKey()).getStatsDataInMinute(statsKey).getTps();\n    }"
            },
            {
                "fromLine": 622,
                "toLine": 629,
                "oldContent": "        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);",
                "newContent": "        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);"
            },
            {
                "fromLine": 632,
                "toLine": 636,
                "oldContent": "    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);",
                "newContent": "    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);"
            },
            {
                "fromLine": 697,
                "toLine": 710,
                "oldContent": "        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);",
                "newContent": "        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);"
            }
        ],
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 16,
                "toLine": 47,
                "oldContent": "public class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}",
                "
{
    "refactorings": {
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 16,
                "toLine": 47,
                "oldContent": "public class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}",
                "newContent": "public class Stats {\n\n    // Removed all static final String fields\n}"
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 40,
                "oldContent": "import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n",
                "newContent": "import static org.assertj.core.api.Assertions.assertThat;\n"
            },
            {
                "fromLine": 66,
                "toLine": 72,
                "oldContent": "    public void testIncQueuePutNums() {\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }",
                "newContent": "    public void testIncQueuePutNums() {\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_PUT_NUMS.getKey(), statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_PUT_NUMS.getKey(), statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }"
            },
            {
                "fromLine": 75,
                "toLine": 79,
                "oldContent": "    public void testIncQueuePutSize() {\n        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }",
                "newContent": "    public void testIncQueuePutSize() {\n        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_PUT_SIZE.getKey(), statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }"
            },
            {
                "fromLine": 82,
                "toLine": 86,
                "oldContent": "    public void testIncQueueGetNums() {\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    public void testIncQueueGetNums() {\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_NUMS.getKey(), statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 89,
                "toLine": 93,
                "oldContent": "    public void testIncQueueGetSize() {\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    public void testIncQueueGetSize() {\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_SIZE.getKey(), statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 95,
                "toLine": 101,
                "oldContent": "    @Test\n    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }",
                "newContent": "    @Test\n    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }"
            },
            {
                "fromLine": 103,
                "toLine": 107,
                "oldContent": "    @Test\n    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }",
                "newContent": "    @Test\n    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.TOPIC_PUT_SIZE.getKey(), TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }"
            },
            {
                "fromLine": 110,
                "toLine": 114,
                "oldContent": "    public void testIncGroupGetNums() {\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    public void testIncGroupGetNums() {\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_NUMS.getKey(), statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 117,
                "toLine": 121,
                "oldContent": "    public void testIncGroupGetSize() {\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    public void testIncGroupGetSize() {\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_SIZE.getKey(), statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 124,
                "toLine": 128,
                "oldContent": "    public void testIncGroupGetLatency() {\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    public void testIncGroupGetLatency() {\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_LATENCY.getKey(), statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 130,
                "toLine": 134,
                "oldContent": "    @Test\n    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }",
                "newContent": "    @Test\n    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getKey(), CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 150,
                "toLine": 165,
                "oldContent": "\n        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }",
                "newContent": "\n        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.TOPIC_PUT_SIZE.getKey(), TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_PUT_NUMS.getKey(), TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_PUT_SIZE.getKey(), TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_SIZE.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_NUMS.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_SIZE.getKey(), TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_NUMS.getKey(), TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.SNDBCK_PUT_NUMS.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_LATENCY.getKey(), \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }"
            },
            {
                "fromLine": 177,
                "toLine": 188,
                "oldContent": "\n        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"
{
    "refactorings": {
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 177,
                "toLine": 188,
                "oldContent": "\n        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }",
                "newContent": "\n        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_SIZE.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_NUMS.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_SIZE.getKey(), TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.QUEUE_GET_NUMS.getKey(), TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.SNDBCK_PUT_NUMS.getKey(), TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(StatsItemKey.GROUP_GET_LATENCY.getKey(), \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 16,
                "toLine": 56,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;\n",
                "newContent": ""
            },
            {
                "fromLine": 102,
                "toLine": 108,
                "oldContent": "        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }",
                "newContent": "        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getKey(), brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_SIZE.getKey(), TOPIC).getValue().sum()).isEqualTo(1L);\n    }"
            },
            {
                "fromLine": 115,
                "toLine": 121,
                "oldContent": "        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }",
                "newContent": "        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getKey(), brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_SIZE.getKey(), TOPIC).getValue().sum()).isEqualTo(1L);\n    }"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 17,
                "toLine": 62,
                "oldContent": "import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\n",
                "newContent": ""
            },
            {
                "fromLine": 196,
                "toLine": 200,
                "oldContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic)).isNull();\n",
                "newContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), topic)).isNull();\n"
            },
            {
                "fromLine": 226,
                "toLine": 232,
                "oldContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());\n",
                "newContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getKey(), brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getKey(), topic).getValue().sum()).isEqualTo(1L);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_SIZE.getKey(), topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());\n"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 16,
                "toLine": 49,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;\n",
                "newContent": ""
            },
            {
                "fromLine": 184,
                "toLine": 188,
                "oldContent": "            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);",
                "newContent": "            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                StatsItemKey.TOPIC_PUT_NUMS.getKey(),\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);"
            },
            {
                "fromLine": 192,
                "toLine": 196,
                "oldContent": "        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {",
                "newContent": "        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                StatsItemKey.TOPIC_PUT_NUMS.getKey(), TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 17,
                "toLine": 39,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;\n",
                "newContent": ""
            },
            {
                "fromLine": 52,
                "toLine": 56,
                "oldContent": "                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();",
                "newContent": "                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, StatsItemKey.TOPIC_PUT_NUMS.getKey(), topic);\n                    inTPS += bsd.getStatsMinute().getTps();"
            },
            {
                "fromLine": 71,
                "toLine": 75,
                "oldContent": "                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();",
                "newContent": "                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, StatsItemKey.GROUP_GET_NUMS.getKey(), statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();"
            }
        ]
    },
    "extractedClasses": {
        "common/src/main/java/org/apache/rocketmq/common/stats/StatsItemKey.java": "public enum StatsItemKey {\n    QUEUE_PUT_NUMS(\"QUEUE_PUT_NUMS\"),\n    QUEUE_PUT_SIZE(\"QUEUE_PUT_SIZE\"),\n    QUEUE_GET_NUMS(\"QUEUE_GET_NUMS\"),\n    QUEUE_GET_SIZE(\"QUEUE_GET_SIZE\"),\n    TOPIC_PUT_NUMS(\"TOPIC_PUT_NUMS\"),\n    TOPIC_PUT_SIZE(\"TOPIC_PUT_SIZE\"),\n    GROUP_GET_NUMS(\"GROUP_GET_NUMS\"),\n    GROUP_GET_SIZE(\"GROUP_GET_SIZE\"),\n    SNDBCK_PUT_NUMS(\"SNDBCK_PUT_NUMS\"),\n    BROKER_PUT_NUMS(\"BROKER_PUT_NUMS\"),\n    BROKER_GET_NUMS(\"BROKER_GET_NUMS\"),\n    GROUP_GET_FROM_DISK_NUMS(\"GROUP_GET_FROM_DISK_NUMS\"),\n    GROUP_GET_FROM_DISK_SIZE(\"GROUP_GET_FROM_DISK_SIZE\"),\n    BROKER_GET_FROM_DISK_NUMS(\"BROKER_GET_FROM_DISK_NUMS\"),\n    BROKER_GET_FROM_DISK_SIZE(\"BROKER_GET_FROM_DISK_SIZE\"),\n    COMMERCIAL_SEND_TIMES(\"COMMERCIAL_SEND_TIMES\"),\n    COMMERCIAL_SNDBCK_TIMES(\"COMMERCIAL_SNDBCK_TIMES\"),\n    COMMERCIAL_RCV_TIMES(\"COMMERCIAL_RCV_TIMES\"),\n    COMMERCIAL_RCV_EPOLLS(\"COMMERCIAL_RCV_EPOLLS\"),\n    COMMERCIAL_SEND_SIZE(\"COMMERCIAL_SEND_SIZE\"),\n    COMMERCIAL_RCV_SIZE(\"COMMERCIAL_RCV_SIZE\"),\n    COMMERCIAL_PERM_FAILURES(\"COMMERCIAL_PERM_FAILURES\"),\n    GROUP_GET_FALL_SIZE(\"GROUP_GET_FALL_SIZE\"),\n    GROUP_GET_FALL_TIME(\"GROUP_GET_FALL_TIME\"),\n    GROUP_GET_LATENCY(\"GROUP_GET_LATENCY\");\n\n    private final String key;\n\n    StatsItemKey(String key) {\n        this.key = key;\n    }\n\n    public String getKey() {\n        return key;\n    }\n}\n"
    }
}"