"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 16,
                "toLine": 70,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;",
                "newContent": ""
            },
            {
                "fromLine": 107,
                "toLine": 114,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;",
                "newContent": ""
            },
            {
                "fromLine": 163,
                "toLine": 190,
                "oldContent": "this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));",
                "newContent": ""
            },
            {
                "fromLine": 193,
                "toLine": 222,
                "oldContent": "this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));",
                "newContent": ""
            },
            {
                "fromLine": 330,
                "toLine": 345,
                "oldContent": "this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);",
                "newContent": ""
            },
            {
                "fromLine": 347,
                "toLine": 358,
                "oldContent": "this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");",
                "newContent": ""
            },
            {
                "fromLine": 361,
                "toLine": 365,
                "oldContent": "this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);",
                "newContent": ""
            },
            {
                "fromLine": 367,
                "toLine": 371,
                "oldContent": "this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);",
                "newContent": ""
            },
            {
                "fromLine": 373,
                "toLine": 377,
                "oldContent": "this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);",
                "newContent": ""
            },
            {
                "fromLine": 380,
                "toLine": 384,
                "oldContent": "this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);",
                "newContent": ""
            },
            {
                "fromLine": 387,
                "toLine": 391,
                "oldContent": "this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);",
                "newContent": ""
            },
            {
                "fromLine": 416,
                "toLine": 433,
                "oldContent": "this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);",
                "newContent": ""
            },
            {
                "fromLine": 488,
                "toLine": 492,
                "oldContent": "this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);",
                "newContent": ""
            },
            {
                "fromLine": 498,
                "toLine": 502,
                "oldContent": "this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);",
                "newContent": ""
            },
            {
                "fromLine": 513,
                "toLine": 526,
                "oldContent": "this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);",
                "newContent": ""
            },
            {
                "fromLine": 574,
                "toLine": 583,
                "oldContent": "this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);",
                "newContent": ""
            },
            {
                "fromLine": 622,
                "toLine": 629,
                "oldContent": "this.statsTable.get(key).addValue(statsKey, incValue, 1);",
                "newContent": ""
            },
            {
                "fromLine": 632,
                "toLine": 636,
                "oldContent": "this.accountStatManager.inc(statType, key, incValues);",
                "newContent": ""
            },
            {
                "fromLine": 697,
                "toLine": 710,
                "oldContent": "final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);",
                "newContent": ""
            }
        ],
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 16,
                "toLine": 47,
                "oldContent": "public class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}",
                "newContent": ""
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 40,
                "oldContent": "import static org.apache.rocketmq.common.stats.Stats.*;",
                "newContent": ""
            },
            {
                "fromLine": 66,
                "toLine": 72,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 75,
                "toLine": 79,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);",
                "newContent": ""
            },
            {
                "fromLine": 82,
                "toLine": 86,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 89,
                "toLine": 93,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 95,
                "toLine": 101,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 103,
                "toLine": 107,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);",
                "newContent": ""
            },
            {
                "fromLine": 110,
                "toLine": 114,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 117,
                "toLine": 121,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 124,
                "toLine": 128,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 130,
                "toLine": 134,
                "oldContent": "assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);",
                "newContent": ""
            },
            {
                "fromLine": 150,
                "toLine": 165,
                "oldContent": "Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));",
                "newContent": ""
            },
            {
                "fromLine": 177,
                "toLine": 188,
                "oldContent": "Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));",
                "newContent": ""
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 16,
                "toLine": 56,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;",
                "newContent": ""
            },
            {
                "fromLine": 102,
                "toLine": 108,
                "oldContent": "assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);",
                "newContent": ""
            },
            {
                "fromLine": 115,
                "toLine": 121,
                "oldContent": "assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);",
                "newContent": ""
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 17,
                "toLine": 62,
                "oldContent": "import static org.apache.rocketmq.common.stats.Stats.*;",
                "newContent": ""
            },
            {
                "fromLine": 196,
                "toLine": 200,
                "oldContent": "assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic)).isNull();",
                "newContent": ""
            },
            {
                "fromLine": 226,
                "toLine": 232,
                "oldContent": "assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 16,
                "toLine": 49,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;",
                "newContent": ""
            },
            {
                "fromLine": 184,
                "toLine": 188,
                "oldContent": "transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);",
                "newContent": ""
            },
            {
                "fromLine": 192,
                "toLine": 196,
                "oldContent": "scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 17,
                "toLine": 39,
                "oldContent": "import org.apache.rocketmq.common.stats.Stats;",
                "newContent": ""
            },
            {
                "fromLine": 52,
                "toLine": 56,
                "oldContent": "BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);",
                "newContent": ""
            },
            {
                "fromLine": 71,
                "toLine": 75,
                "oldContent": "BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {}
}"