"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 84,
                "toLine": 84,
                "oldContent": "    private StateGetter producerStateGetter;",
                "newContent": ""
            },
            {
                "fromLine": 86,
                "toLine": 86,
                "oldContent": "    private StateGetter consumerStateGetter;",
                "newContent": ""
            },
            {
                "fromLine": 98,
                "toLine": 98,
                "oldContent": "    private final StatisticsManager accountStatManager = new StatisticsManager();",
                "newContent": ""
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {",
                "newContent": ""
            },
            {
                "fromLine": 118,
                "toLine": 151,
                "oldContent": "            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = null;\n                try {\n                    strArr = splitAccountStatKey(item.getStatObject());\n                } catch (Exception e) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n\n                // TODO ugly\n                if (strArr == null || strArr.length < 4) {\n                    return false;\n                }\n\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n\n                String kind = item.getStatKind();\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });",
                "newContent": ""
            },
            {
                "fromLine": 285,
                "toLine": 285,
                "oldContent": "    public StateGetter getProducerStateGetter() {",
                "newContent": ""
            },
            {
                "fromLine": 289,
                "toLine": 289,
                "oldContent": "    public void setProducerStateGetter(StateGetter producerStateGetter) {",
                "newContent": ""
            },
            {
                "fromLine": 293,
                "toLine": 293,
                "oldContent": "        this.producerStateGetter = producerStateGetter;",
                "newContent": ""
            },
            {
                "fromLine": 297,
                "toLine": 297,
                "oldContent": "    public StateGetter getConsumerStateGetter() {",
                "newContent": ""
            },
            {
                "fromLine": 301,
                "toLine": 301,
                "oldContent": "    public void setConsumerStateGetter(StateGetter consumerStateGetter) {",
                "newContent": ""
            },
            {
                "fromLine": 305,
                "toLine": 305,
                "oldContent": "        this.consumerStateGetter = consumerStateGetter;",
                "newContent": ""
            },
            {
                "fromLine": 313,
                "toLine": 313,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 314,
                "toLine": 314,
                "oldContent": "            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 315,
                "toLine": 315,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 316,
                "toLine": 316,
                "oldContent": "            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 317,
                "toLine": 317,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 318,
                "toLine": 318,
                "oldContent": "            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 319,
                "toLine": 319,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 320,
                "toLine": 320,
                "oldContent": "            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 321,
                "toLine": 321,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 322,
                "toLine": 322,
                "oldContent": "            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 323,
                "toLine": 323,
                "oldContent": "        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(",
                "newContent": ""
            },
            {
                "fromLine": 324,
                "toLine": 324,
                "oldContent": "            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));",
                "newContent": ""
            },
            {
                "fromLine": 326,
                "toLine": 326,
                "oldContent": "    public interface StateGetter {",
                "newContent": ""
            },
            {
                "fromLine": 327,
                "toLine": 328,
                "oldContent": "        boolean online(String instanceId, String group, String topic);\n    }",
                "newContent": ""
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 59,
                "toLine": 59,
                "oldContent": "        brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),",
                "newContent": ""
            },
            {
                "fromLine": 60,
                "toLine": 60,
                "oldContent": "            new MessageStoreConfig(), null);",
                "newContent": ""
            },
            {
                "fromLine": 61,
                "toLine": 61,
                "oldContent": "        brokerController.setMessageStore(messageStore);",
                "newContent": ""
            },
            {
                "fromLine": 62,
                "toLine": 62,
                "oldContent": "        brokerController.setTransactionalMessageService(transactionMsgService);",
                "newContent": ""
            },
            {
                "fromLine": 63,
                "toLine": 63,
                "oldContent": "        endTransactionProcessor = new EndTransactionProcessor(brokerController);",
                "newContent": ""
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 68,
                "toLine": 68,
                "oldContent": "        brokerController = Mockito.mock(BrokerController.class);",
                "newContent": ""
            },
            {
                "fromLine": 69,
                "toLine": 69,
                "oldContent": "        Mockito.when(brokerController.getMessageStore()).thenReturn(messageStore);",
                "newContent": ""
            },
            {
                "fromLine": 70,
                "toLine": 70,
                "oldContent": "        Mockito.when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);",
                "newContent": ""
            },
            {
                "fromLine": 71,
                "toLine": 71,
                "oldContent": "        Mockito.when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);",
                "newContent": ""
            },
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "        Mockito.when(brokerController.peekMasterBroker()).thenReturn(brokerController);",
                "newContent": ""
            },
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "        Mockito.when(brokerController.getBrokerStatsManager()).thenReturn(manager);",
                "newContent": ""
            },
            {
                "fromLine": 74,
                "toLine": 74,
                "oldContent": "        EscapeBridge escapeBridge = new EscapeBridge(brokerController);",
                "newContent": ""
            },
            {
                "fromLine": 75,
                "toLine": 75,
                "oldContent": "        Mockito.when(brokerController.getEscapeBridge()).thenReturn(escapeBridge);",
                "newContent": ""
            },
            {
                "fromLine": 76,
                "toLine": 76,
                "oldContent": "        scheduleMessageService = new ScheduleMessageService(brokerController);",
                "newContent": ""
            },
            {
                "fromLine": 77,
                "toLine": 77,
                "oldContent": "        scheduleMessageService.load();",
                "newContent": ""
            },
            {
                "fromLine": 78,
                "toLine": 78,
                "oldContent": "        scheduleMessageService.start();",
                "newContent": ""
            },
            {
                "fromLine": 79,
                "toLine": 79,
                "oldContent": "        Mockito.when(brokerController.getScheduleMessageService()).thenReturn(scheduleMessageService);",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 44,
                "toLine": 44,
                "oldContent": "        return \"Export metrics.\";",
                "newContent": ""
            },
            {
                "fromLine": 52,
                "toLine": 52,
                "oldContent": "        opt.setRequired(true);",
                "newContent": ""
            },
            {
                "fromLine": 54,
                "toLine": 54,
                "oldContent": "        opt.setRequired(false);",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 72,
                "toLine": 72,
                "oldContent": "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {
        "store/src/main/java/org/apache/rocketmq/store/stats/StateGetter.java": "package org.apache.rocketmq.store.stats;\n\npublic interface StateGetter {\n    boolean online(String instanceId, String group, String topic);\n}\n",
        "store/src/main/java/org/apache/rocketmq/store/stats/AccountStatsManager.java": "package org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.Utils;\nimport org.apache.rocketmq.common.stats.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager.StateGetter;\n\nimport java.util.Map;\n\npublic class AccountStatsManager {\n\n    private final StatisticsManager statisticsManager;\n    private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;\n\n    public AccountStatsManager() {\n        this.statisticsManager = new StatisticsManager();\n    }\n\n    public void addStats(String key, String[] itemNames, String[] kinds, Map<String, Long> values) {\n        for (String kind : kinds) {\n            this.statisticsManager.inc(kind, key, values.get(kind));\n        }\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n\n    public void addKindMeta(StatisticsKindMeta kindMeta) {\n        this.statisticsManager.addStatisticsKindMeta(kindMeta);\n    }\n\n    public void setOnlineChecker() {\n        this.statisticsManager.setStatisticsItemStateGetter(item -> {\n            String[] strArr = Utils.split(item.getStatObject(), '|');\n            if (strArr.length < 4) {\n                return false;\n            }\n            String instanceId = strArr[1];\n            String topic = strArr[2];\n            String group = strArr[3];\n            if (BrokerStatsManager.ACCOUNT_SEND.equals(item.getStatKind()) || BrokerStatsManager.ACCOUNT_SEND_REJ.equals(item.getStatKind())) {\n                return producerStateGetter.online(instanceId, group, topic);\n            } else if (BrokerStatsManager.ACCOUNT_RCV.equals(item.getStatKind()) || BrokerStatsManager.ACCOUNT_SEND_BACK.equals(item.getStatKind()) || BrokerStatsManager.ACCOUNT_SEND_BACK_TO_DLQ.equals(item.getStatKind()) || BrokerStatsManager.ACCOUNT_REV_REJ.equals(item.getStatKind())) {\n                return consumerStateGetter.online(instanceId, group, topic);\n            }\n            return false;\n        });\n    }\n\n    public void buildRunningStats(Map<String, String> stats) {\n        this.statisticsManager.buildRunningStats(stats);\n    }\n\n    public static long compute24HourSum(StatisticsItem item) {\n        return BrokerStatsManager.compute24HourSum(item);\n    }\n}\n"
    }
}"