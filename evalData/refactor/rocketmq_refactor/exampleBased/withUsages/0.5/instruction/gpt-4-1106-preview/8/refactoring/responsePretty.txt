"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 189,
                "toLine": 191,
                "oldContent": "private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;",
                "newContent": "private StateGetterInfo stateGetterInfo;"
            },
            {
                "fromLine": 243,
                "toLine": 243,
                "oldContent": "    public StateGetter getProducerStateGetter() {",
                "newContent": "    public StateGetter getProducerStateGetter() {\n        return stateGetterInfo.getProducerStateGetter();"
            },
            {
                "fromLine": 247,
                "toLine": 247,
                "oldContent": "    public void setProducerStateGetter(StateGetter producerStateGetter) {",
                "newContent": "    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        stateGetterInfo.setProducerStateGetter(producerStateGetter);"
            },
            {
                "fromLine": 251,
                "toLine": 251,
                "oldContent": "    public StateGetter getConsumerStateGetter() {",
                "newContent": "    public StateGetter getConsumerStateGetter() {\n        return stateGetterInfo.getConsumerStateGetter();"
            },
            {
                "fromLine": 255,
                "toLine": 255,
                "oldContent": "    public void setConsumerStateGetter(StateGetter consumerStateGetter) {",
                "newContent": "    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        stateGetterInfo.setConsumerStateGetter(consumerStateGetter);"
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 81,
                "toLine": 81,
                "oldContent": "    private DefaultMessageStore messageStore;",
                "newContent": "    private DefaultMessageStore messageStore;\n    private MessageStoreConfig messageStoreConfig;\n    private BrokerConfig brokerConfig;"
            },
            {
                "fromLine": 82,
                "toLine": 82,
                "oldContent": "    private MessageStoreConfig messageStoreConfig;",
                "newContent": ""
            },
            {
                "fromLine": 83,
                "toLine": 83,
                "oldContent": "    private BrokerConfig brokerConfig;",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 115,
                "toLine": 115,
                "oldContent": "        Map<String, Map<String, Map<String, Object>>> evaluateReportMap = new HashMap<>();",
                "newContent": "        Map<String, Map<String, Map<String, Object>>> evaluateReportMap = new HashMap<>();\n        ExportMetricsInfo exportMetricsInfo = new ExportMetricsInfo();"
            },
            {
                "fromLine": 116,
                "toLine": 116,
                "oldContent": "        Map<String, Double> totalTpsMap = new HashMap<>();",
                "newContent": "        exportMetricsInfo.initTotalMap();"
            },
            {
                "fromLine": 117,
                "toLine": 117,
                "oldContent": "        Map<String, Long> totalOneDayNumMap = new HashMap<>();",
                "newContent": ""
            },
            {
                "fromLine": 118,
                "toLine": 118,
                "oldContent": "        initTotalMap(totalTpsMap, totalOneDayNumMap);",
                "newContent": ""
            },
            {
                "fromLine": 152,
                "toLine": 152,
                "oldContent": "                            totalTpsMap,",
                "newContent": "                            exportMetricsInfo.getTotalTpsMap(),"
            },
            {
                "fromLine": 153,
                "toLine": 153,
                "oldContent": "                            totalOneDayNumMap, subscriptionGroupWrapper));",
                "newContent": "                            exportMetricsInfo.getTotalOneDayNumMap(), subscriptionGroupWrapper));"
            },
            {
                "fromLine": 175,
                "toLine": 175,
                "oldContent": "            Map<String, Object> totalData = new HashMap<>();",
                "newContent": "            Map<String, Object> totalData = exportMetricsInfo.getTotalData();"
            },
            {
                "fromLine": 176,
                "toLine": 176,
                "oldContent": "            totalData.put(\"totalTps\", totalTpsMap);",
                "newContent": ""
            },
            {
                "fromLine": 177,
                "toLine": 177,
                "oldContent": "            totalData.put(\"totalOneDayNum\", totalOneDayNumMap);",
                "newContent": ""
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 106,
                "toLine": 106,
                "oldContent": "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));",
                "newContent": "        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n        StatsAllSubCommandHelper helper = new StatsAllSubCommandHelper();"
            },
            {
                "fromLine": 116,
                "toLine": 116,
                "oldContent": "                printTopicDetail(defaultMQAdminExt, topic, activeTopic);",
                "newContent": "                helper.printTopicDetail(defaultMQAdminExt, topic, activeTopic);"
            },
            {
                "fromLine": 136,
                "toLine": 136,
                "oldContent": "        if (bsd.getStatsDay().getSum() != 0) {",
                "newContent": "        if (bsd.getStatsDay().getSum() != 0) {\n            return bsd.getStatsDay().getSum();\n        }\n\n        if (bsd.getStatsHour().getSum() != 0) {\n            return bsd.getStatsHour().getSum();\n        }\n\n        if (bsd.getStatsMinute().getSum() != 0) {\n            return bsd.getStatsMinute().getSum();\n        }\n\n        return 0;\n    }\n\n    public static void printTopicDetail(final DefaultMQAdminExt admin, final String topic, final boolean activeTopic)\n        throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n        TopicRouteData topicRouteData = admin.examineTopicRouteInfo(topic);\n\n        GroupList groupList = admin.queryTopicConsumeByWho(topic);\n\n        double inTPS = 0;\n\n        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }\n            }\n        }\n\n        if (groupList != null && !groupList.getGroupList().isEmpty()) {\n\n            for (String group : groupList.getGroupList()) {\n                double outTPS = 0;\n                long outMsgCntToday = 0;\n\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n\n                long accumulate = 0;\n                try {\n                    ConsumeStats consumeStats = admin.examineConsumeStats(group, topic);\n                    if (consumeStats != null) {\n                        accumulate = consumeStats.computeTotalDiff();\n                        if (accumulate < 0) {\n                            accumulate = 0;\n                        }\n                    }\n                } catch (Exception e) {\n                }\n\n                if (!activeTopic || inMsgCntToday > 0 ||\n                    outMsgCntToday > 0) {\n\n                    System.out.printf(\"%-64s  %-64s %12d %11.2f %11.2f %14d %14d%n\",\n                        UtilAll.frontStringAtLeast(topic, 64),\n                        UtilAll.frontStringAtLeast(group, 64),\n                        accumulate,\n                        inTPS,\n                        outTPS,\n                        inMsgCntToday,\n                        outMsgCntToday\n                    );\n                }\n            }\n        } else {\n            if (!activeTopic || inMsgCntToday > 0) {\n\n                System.out.printf(\"%-64s  %-64s %12d %11.2f %11s %14d %14s%n\",\n                    UtilAll.frontStringAtLeast(topic, 64),\n                    \"\",\n                    0,\n                    inTPS,\n                    \"\",\n                    inMsgCntToday,\n                    \"NO_CONSUMER\"\n                );\n            }\n        }\n    }",
                "newContent": ""
            }
        ]
    },
    "extractedClasses": {
        "store/src/main/java/org/apache/rocketmq/store/stats/StateGetterInfo.java": "package org.apache.rocketmq.store.stats;\n\npublic class StateGetterInfo {\n\n    private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;\n\n    public StateGetter getProducerStateGetter() {\n        return producerStateGetter;\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public StateGetter getConsumerStateGetter() {\n        return consumerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n}",
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsInfo.java": "package org.apache.rocketmq.tools.command.export;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExportMetricsInfo {\n\n    private Map<String, Double> totalTpsMap = new HashMap<>();\n    private Map<String, Long> totalOneDayNumMap = new HashMap<>();\n\n    public void initTotalMap() {\n        totalTpsMap.put(\"totalNormalInTps\", 0.0);\n        totalTpsMap.put(\"totalNormalOutTps\", 0.0);\n        totalTpsMap.put(\"totalTransInTps\", 0.0);\n        totalTpsMap.put(\"totalScheduleInTps\", 0.0);\n\n        totalOneDayNumMap.put(\"normalOneDayInNum\", 0L);\n        totalOneDayNumMap.put(\"normalOneDayOutNum\", 0L);\n        totalOneDayNumMap.put(\"transOneDayInNum\", 0L);\n        totalOneDayNumMap.put(\"scheduleOneDayInNum\", 0L);\n    }\n\n    public Map<String, Double> getTotalTpsMap() {\n        return totalTpsMap;\n    }\n\n    public Map<String, Long> getTotalOneDayNumMap() {\n        return totalOneDayNumMap;\n    }\n\n    public Map<String, Object> getTotalData() {\n        Map<String, Object> totalData = new HashMap<>();\n        totalData.put(\"totalTps\", totalTpsMap);\n        totalData.put(\"totalOneDayNum\", totalOneDayNumMap);\n        return totalData;\n    }\n}",
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommandHelper.java": "package org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommandException;\n\npublic class StatsAllSubCommandHelper {\n\n    public static long compute24HourSum(BrokerStatsData bsd) {\n        if (bsd.getStatsDay().getSum() != 0) {\n            return bsd.getStatsDay().getSum();\n        }\n\n        if (bsd.getStatsHour().getSum() != 0) {\n            return bsd.getStatsHour().getSum();\n        }\n\n        if (bsd.getStatsMinute().getSum() != 0) {\n            return bsd.getStatsMinute().getSum();\n        }\n\n        return 0;\n    }\n\n    public static void printTopicDetail(final DefaultMQAdminExt admin, final String topic, final boolean activeTopic)\n        throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n        TopicRouteData topicRouteData = admin.examineTopicRouteInfo(topic);\n\n        GroupList groupList = admin.queryTopicConsumeByWho(topic);\n\n        double inTPS = 0;\n\n        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }\n            }\n        }\n\n        if (groupList != null && !groupList.getGroupList().isEmpty()) {\n\n            for (String group : groupList.getGroupList()) {\n                double outTPS = 0;\n                long outMsgCntToday = 0;\n\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n\n                long accumulate = 0;\n                try {\n                    ConsumeStats consumeStats = admin.examineConsumeStats(group, topic);\n                    if (consumeStats != null) {\n                        accumulate = consumeStats.computeTotalDiff();\n                        if (accumulate < 0) {\n                            accumulate = 0;\n                        }\n                    }\n                } catch (Exception e) {\n                }\n\n                if (!activeTopic || inMsgCntToday > 0 ||\n                    outMsgCntToday > 0) {\n\n                    System.out.printf(\"%-64s  %-64s %12d %11.2f %11.2f %14d %14d%n\",\n                        UtilAll.frontStringAtLeast(topic, 64),\n                        UtilAll.frontStringAtLeast(group, 64),\n                        accumulate,\n                        inTPS,\n                        outTPS,\n                        inMsgCntToday,\n                        outMsgCntToday\n                    );\n                }\n            }\n        } else {\n            if (!activeTopic || inMsgCntToday > 0) {\n\n                System.out.printf(\"%-64s  %-64s %12d %11.2f %11s %14d %14s%n\",\n                    UtilAll.frontStringAtLeast(topic, 64),\n                    \"\",\n                    0,\n                    inTPS,\n                    \"\",\n                    inMsgCntToday,\n                    \"NO_CONSUMER\"\n                );\n            }\n        }\n    }\n}"
    }
}"