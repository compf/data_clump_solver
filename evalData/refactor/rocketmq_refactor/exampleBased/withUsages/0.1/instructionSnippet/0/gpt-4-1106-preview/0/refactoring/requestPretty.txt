messages:
[
	content:"
	
	I will provide you code snippets of one or more Java  files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	system	
",
,
	content:
{
			acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.acl.common;
			
			import java.nio.charset.Charset;
			import java.nio.charset.StandardCharsets;
			import javax.crypto.Mac;
			import javax.crypto.spec.SecretKeySpec;
			import org.apache.commons.codec.binary.Base64;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public static String calSignature(String data, String key) throws AclException {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        Charset charset) throws AclException {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        try {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public static String calSignature(byte[] data, String key) throws AclException {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        Charset charset) throws AclException {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        try {			
",
,

		],
		acl/src/test/java/org/apache/rocketmq/acl/plain/AclTestHelper.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.acl.plain;
			
			import com.google.common.base.Preconditions;
			import com.google.common.base.Splitter;
			
			import java.io.BufferedInputStream;
			import java.io.BufferedOutputStream;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStream;
			import java.nio.file.Files;
			import java.util.UUID;
			import java.util.Iterator;
			import org.junit.Assert;
			import org.springframework.core.io.Resource;
			import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			        throws IOException {
			        Preconditions.checkNotNull(flag);			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        boolean found = false;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			            String current = iterator.next();			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			                if (into) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        byte[] buffer = new byte[4096];			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			            try (InputStream inputStream = resource.getInputStream()) {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/ProxyStartupTest.java:
		[
			fromLine:"			17",
			toLine:"			57",
			content:"
			
			package org.apache.rocketmq.proxy;
			
			import com.google.common.base.Preconditions;
			import com.google.common.base.Splitter;
			import io.opentelemetry.sdk.OpenTelemetrySdk;
			import java.io.BufferedInputStream;
			import java.io.BufferedOutputStream;
			import java.io.File;
			import java.io.IOException;
			import java.io.InputStream;
			import java.nio.charset.StandardCharsets;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.util.Iterator;
			import java.util.UUID;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerStartup;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.proxy.config.Configuration;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.DefaultMessagingProcessor;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.MockedStatic;
			import org.mockito.Mockito;
			import org.springframework.core.io.Resource;
			import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
			
			import static org.apache.rocketmq.proxy.config.ConfigurationManager.RMQ_PROXY_HOME;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertSame;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.mockStatic;
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            try (InputStream inputStream = resource.getInputStream()) {			
",
,
			fromLine:"			85",
			toLine:"			87",
			content:"
			
			    private void copyTo(String path, InputStream src, File dstDir, String flag) throws IOException {
			        Preconditions.checkNotNull(flag);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        boolean found = false;			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			            String current = iterator.next();			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        byte[] buffer = new byte[4096];			
",
,

		],
		acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java:
		[
			fromLine:"			17",
			toLine:"			45",
			content:"
			
			package org.apache.rocketmq.acl.plain;
			
			import org.apache.rocketmq.acl.common.AclClientRPCHook;
			import org.apache.rocketmq.acl.common.AclConstants;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.common.AclConfig;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.junit.Assert;
			import org.junit.Test;
			
			import java.io.File;
			import java.io.IOException;
			import java.lang.reflect.Field;
			import java.nio.ByteBuffer;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.util.Collections;
			import java.util.LinkedList;
			import java.util.List;
						
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			        AclClientRPCHook producerHook = new AclClientRPCHook(producerCredential);
			        validateSendMessage(RequestCode.SEND_MESSAGE, DEFAULT_TOPIC, producerHook, "", plainAccessValidator);			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			        try {			
",
,
			fromLine:"			172",
			toLine:"			173",
			content:"
			        AclClientRPCHook producerHook = new AclClientRPCHook(producerCredential);
			        validateSendMessage(RequestCode.SEND_MESSAGE, DEFAULT_TOPIC, producerHook, "", plainAccessValidator);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        AclClientRPCHook consumerHook = new AclClientRPCHook(consumerCredential);			
",
,
			fromLine:"			184",
			toLine:"			186",
			content:"
			        AclClientRPCHook dummyHook = new AclClientRPCHook(unmatchedCredential);
			        validateSendMessage(RequestCode.SEND_MESSAGE, DEFAULT_TOPIC, dummyHook, DEFAULT_GLOBAL_WHITE_ADDR, plainAccessValidator);
			        validateSendMessage(RequestCode.SEND_MESSAGE_V2, DEFAULT_TOPIC, dummyHook, DEFAULT_GLOBAL_WHITE_ADDR, plainAccessValidator);			
",
,
			fromLine:"			189",
			toLine:"			191",
			content:"
			        //recheck after reloading
			        validateSendMessage(RequestCode.SEND_MESSAGE, DEFAULT_TOPIC, producerHook, "", plainAccessValidator);
			        validateSendMessage(RequestCode.SEND_MESSAGE_V2, DEFAULT_TOPIC, producerHook, "", plainAccessValidator);			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			            pullMessageRequestHeader);			
",
,
			fromLine:"			243",
			toLine:"			245",
			content:"
			        try {
			            PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(
			                RemotingCommand.decode(buf), remoteAddr);			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
						
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
						
",
,
			fromLine:"			274",
			toLine:"			276",
			content:"
			        try {
			            PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(
			                RemotingCommand.decode(buf), remoteAddr);			
",
,

		],
		acl/src/test/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyTest.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.acl.plain;
			
			import org.apache.rocketmq.acl.common.AclException;
			import org.junit.Assert;
			import org.junit.Test;
						
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			        RemoteAddressStrategy remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			        remoteAddressStrategy = remoteAddressStrategyFactory.getRemoteAddressStrategy(plainAccessResource);			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
						
",
,
			fromLine:"			316",
			toLine:"			318",
			content:"
			        for (int i = -10; i < 300; i++) {
			            plainAccessResource.setWhiteRemoteAddress(head + i);
			            boolean match = remoteAddressStrategy.match(plainAccessResource);			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
						
",
,
			fromLine:"			331",
			toLine:"			333",
			content:"
			        for (int i = -10; i < 300; i++) {
			            newHead = head + i;
			            if (i >= start && i <= end) {			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
						
",
,
			fromLine:"			344",
			toLine:"			345",
			content:"
			            String hex = Integer.toHexString(i);
			            plainAccessResource.setWhiteRemoteAddress(head + hex);			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			            int endNum = Integer.parseInt(end, 16);			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/plain/RemoteAddressStrategyFactory.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.acl.plain;
			
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.commons.validator.routines.InetAddressValidator;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			                        this.index = StringUtils.split(preAddress, ":").length;			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			                    }			
",
,
			fromLine:"			191",
			toLine:"			194",
			content:"
			                String[] valueArray = StringUtils.split(value, "-");
			                this.start = Integer.parseInt(valueArray[0]);
			                this.end = Integer.parseInt(valueArray[1]);
			                if (!(AclUtils.isScope(end) && AclUtils.isScope(start) && start <= end)) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            }			
",
,
			fromLine:"			212",
			toLine:"			215",
			content:"
			                String[] valueArray = StringUtils.split(value, "-");
			                this.start = Integer.parseInt(valueArray[0], 16);
			                this.end = Integer.parseInt(valueArray[1], 16);
			                if (!(AclUtils.isIPv6Scope(end) && AclUtils.isIPv6Scope(start) && start <= end)) {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			            }			
",
,
			fromLine:"			222",
			toLine:"			223",
			content:"
			        private void setValue(int start, int end) {
			            this.start = start;			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			            if (validator.isValidInet4Address(netAddress)) {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			                    if (index == 3) {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			                    } else if (index == 2) {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			                    } else {			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			                    Integer address = Integer.valueOf(value);			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			                netAddress = AclUtils.expandIP(netAddress, 8).toUpperCase();			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			                    Integer address = Integer.parseInt(value, 16);			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/model/User.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.model;
			
			import org.apache.rocketmq.auth.authentication.enums.SubjectType;
			import org.apache.rocketmq.auth.authentication.enums.UserStatus;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.common.constant.CommonConstants;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			50",
			content:"
			        User user = new User();
			        user.setUsername(username);
			        user.setPassword(password);			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getSubjectKey() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public String getUsername() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setUsername(String username) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public String getPassword() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public void setPassword(String password) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public UserType getUserType() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setUserType(UserType userType) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/manager/AuthenticationMetadataManagerImpl.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.manager;
			
			import com.alibaba.fastjson2.JSON;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.authentication.enums.UserStatus;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authentication.provider.AuthenticationMetadataProvider;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.authorization.provider.AuthorizationMetadataProvider;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			                SessionCredentials credentials = JSON.parseObject(authConfig.getInnerClientAuthenticationCredentials(), SessionCredentials.class);			
",
,

		],
		auth/src/test/java/org/apache/rocketmq/auth/authentication/manager/AuthenticationMetadataManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.manager;
			
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.auth.helper.AuthTestHelper;
			import org.apache.rocketmq.common.MixAll;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			126",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import com.google.common.collect.Sets;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.LongAdder;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManager;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Environment;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
			import org.apache.rocketmq.broker.subscription.RocksDBSubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.RocksDBTopicConfigManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.TopicQueueId;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.CreateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAllTopicConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListAclsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListUsersRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResumeCheckHalfMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.stats.BrokerStats;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anySet;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    @Mock			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    @Mock			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    @Spy			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    @Mock			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    @Mock			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			    private Set<String> systemTopicSet;			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    @Mock			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			    @Mock			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    @Mock			
",
,
			fromLine:"			174",
			toLine:"			176",
			content:"
			    public void init() throws Exception {
			        brokerController.setMessageStore(messageStore);
			        brokerController.setAuthenticationMetadataManager(authenticationMetadataManager);			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
						
",
,
			fromLine:"			188",
			toLine:"			191",
			content:"
			            TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC,
			            this.brokerController.getBrokerConfig().getBrokerClusterName(),
			            this.brokerController.getBrokerConfig().getBrokerClusterName() + "_" + MixAll.REPLY_TOPIC_POSTFIX);
			        if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {			
",
,
			fromLine:"			193",
			toLine:"			194",
			content:"
			        }
			        when(handlerContext.channel()).thenReturn(channel);			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			199",
			content:"
			
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig(topic));			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			        }
			        if (brokerController.getSubscriptionGroupManager() != null) {			
",
,
			fromLine:"			210",
			toLine:"			211",
			content:"
			        }
			        if (brokerController.getTopicConfigManager() != null) {			
",
,
			fromLine:"			213",
			toLine:"			214",
			content:"
			        }
			        if (brokerController.getConsumerOffsetManager() != null) {			
",
,
			fromLine:"			222",
			toLine:"			223",
			content:"
			        }
			        RocksDBTopicConfigManager rocksDBTopicConfigManager = new RocksDBTopicConfigManager(brokerController);			
",
,
			fromLine:"			231",
			toLine:"			232",
			content:"
			        }
			        RocksDBSubscriptionGroupManager rocksDBSubscriptionGroupManager = new RocksDBSubscriptionGroupManager(brokerController);			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        RemotingCommand request = createUpdateBrokerConfigCommand();			
",
,
			fromLine:"			246",
			toLine:"			247",
			content:"
			        RemotingCommand request = createResumeCheckHalfMessageCommand();
			        when(messageStore.selectOneMessageByOffset(any(Long.class))).thenReturn(createSelectMappedBufferResult());			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			            RemotingCommand request = buildCreateTopicRequest(topic);			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        RemotingCommand request = buildCreateTopicRequest(topic);			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        request = buildCreateTopicRequest(topic);			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			            RemotingCommand request = buildDeleteTopicRequest(topic);			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			        RemotingCommand request = buildDeleteTopicRequest(topic);			
",
,
			fromLine:"			313",
			toLine:"			314",
			content:"
			
			        topicConfigManager = mock(TopicConfigManager.class);			
",
,
			fromLine:"			321",
			toLine:"			322",
			content:"
			        topicConfigTable.put(KeyBuilder.buildPopRetryTopic(anotherTopic, "cid2", brokerConfig.isEnableRetryTopicV2()), new TopicConfig());
			        when(topicConfigManager.getTopicConfigTable()).thenReturn(topicConfigTable);			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			            final String selectTopic = invocation.getArgument(0);			
",
,
			fromLine:"			327",
			toLine:"			328",
			content:"
			
			        when(brokerController.getConsumerOffsetManager()).thenReturn(consumerOffsetManager);			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			        RemotingCommand request = buildDeleteTopicRequest(topic);			
",
,
			fromLine:"			334",
			toLine:"			336",
			content:"
			
			        verify(topicConfigManager).deleteTopicConfig(topic);
			        verify(topicConfigManager).deleteTopicConfig(KeyBuilder.buildPopRetryTopic(topic, "cid1", brokerConfig.isEnableRetryTopicV2()));			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_TOPIC_CONFIG, getAllTopicConfigResponseHeader);			
",
,
			fromLine:"			358",
			toLine:"			360",
			content:"
			    public void testUpdateBrokerConfig() throws Exception {
			        handlerContext = mock(ChannelHandlerContext.class);
			        channel = mock(Channel.class);			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			        socketAddress = mock(SocketAddress.class);			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        request.setBody(bodyMap.toString().getBytes());			
",
,
			fromLine:"			374",
			toLine:"			374",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_CONFIG, null);			
",
,
			fromLine:"			420",
			toLine:"			422",
			content:"
			    public void testSearchOffsetByTimestamp() throws Exception {
			        messageStore = mock(MessageStore.class);
			        when(messageStore.getOffsetInQueueByTime(anyString(), anyInt(), anyLong(), any(BoundaryType.class))).thenReturn(Long.MIN_VALUE);			
",
,
			fromLine:"			431",
			toLine:"			431",
			content:"
			        request.addExtField("timestamp", System.currentTimeMillis() + "");			
",
,
			fromLine:"			437",
			toLine:"			439",
			content:"
			    public void testGetMaxOffset() throws Exception {
			        messageStore = mock(MessageStore.class);
			        when(messageStore.getMaxOffsetInQueue(anyString(), anyInt())).thenReturn(Long.MIN_VALUE);			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			        request.addExtField("queueId", "0");			
",
,
			fromLine:"			450",
			toLine:"			452",
			content:"
			    public void testGetMinOffset() throws Exception {
			        messageStore = mock(MessageStore.class);
			        when(messageStore.getMinOffsetInQueue(anyString(), anyInt())).thenReturn(Long.MIN_VALUE);			
",
,
			fromLine:"			457",
			toLine:"			457",
			content:"
			        request.addExtField("queueId", "0");			
",
,
			fromLine:"			463",
			toLine:"			464",
			content:"
			    public void testGetEarliestMsgStoretime() throws Exception {
			        messageStore = mock(MessageStore.class);			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
			        request.addExtField("queueId", "0");			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			        brokerStats = mock(BrokerStats.class);			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_RUNTIME_INFO, null);			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
			        request.setBody(JSON.toJSON(lockBatchRequestBody).toString().getBytes());			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
			        request.setBody(JSON.toJSON(unlockBatchRequestBody).toString().getBytes());			
",
,
			fromLine:"			526",
			toLine:"			526",
			content:"
			        request.setBody(JSON.toJSON(subscriptionGroupConfig).toString().getBytes());			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_SUBSCRIPTIONGROUP_CONFIG, null);			
",
,
			fromLine:"			554",
			toLine:"			554",
			content:"
			        request.addExtField("removeOffset", "true");			
",
,
			fromLine:"			562",
			toLine:"			562",
			content:"
			        request.addExtField("topic", "topicTest");			
",
,
			fromLine:"			564",
			toLine:"			565",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.TOPIC_NOT_EXIST);
			        topicConfigManager = mock(TopicConfigManager.class);			
",
,
			fromLine:"			568",
			toLine:"			569",
			content:"
			        topicConfig.setTopicName("topicTest");
			        when(topicConfigManager.selectTopicConfig(anyString())).thenReturn(topicConfig);			
",
,
			fromLine:"			578",
			toLine:"			578",
			content:"
			        consumerManager = mock(ConsumerManager.class);			
",
,
			fromLine:"			581",
			toLine:"			581",
			content:"
			        when(consumerManager.getConsumerGroupInfo(anyString())).thenReturn(consumerGroupInfo);			
",
,
			fromLine:"			589",
			toLine:"			589",
			content:"
			        request.addExtField("producerGroup", "ProducerGroupId");			
",
,
			fromLine:"			596",
			toLine:"			596",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_PRODUCER_INFO, null);			
",
,
			fromLine:"			605",
			toLine:"			605",
			content:"
			        request.addExtField("consumerGroup", "GID-test");			
",
,
			fromLine:"			611",
			toLine:"			612",
			content:"
			    public void testGetAllConsumerOffset() throws RemotingCommandException {
			        consumerOffsetManager = mock(ConsumerOffsetManager.class);			
",
,
			fromLine:"			614",
			toLine:"			614",
			content:"
			        ConsumerOffsetManager consumerOffset = new ConsumerOffsetManager();			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_CONSUMER_OFFSET, null);			
",
,
			fromLine:"			623",
			toLine:"			623",
			content:"
			        defaultMessageStore = mock(DefaultMessageStore.class);			
",
,
			fromLine:"			625",
			toLine:"			626",
			content:"
			//        when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
			        when(brokerController.getScheduleMessageService()).thenReturn(scheduleMessageService);			
",
,
			fromLine:"			628",
			toLine:"			628",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_DELAY_OFFSET, null);			
",
,
			fromLine:"			645",
			toLine:"			645",
			content:"
						
",
,
			fromLine:"			652",
			toLine:"			652",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			661",
			toLine:"			661",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			678",
			toLine:"			678",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			680",
			toLine:"			680",
			content:"
			        request.setBody(JSON.toJSONBytes(userInfo));			
",
,
			fromLine:"			690",
			toLine:"			690",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			692",
			toLine:"			692",
			content:"
			        request.setBody(JSON.toJSONBytes(userInfo));			
",
,
			fromLine:"			696",
			toLine:"			696",
			content:"
			        when(authenticationMetadataManager.isSuperUser(eq("rocketmq"))).thenReturn(CompletableFuture.completedFuture(false));			
",
,
			fromLine:"			704",
			toLine:"			705",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(null));
			        when(authenticationMetadataManager.getUser(eq("abc"))).thenReturn(CompletableFuture.completedFuture(User.of("abc", "123", UserType.NORMAL)));			
",
,
			fromLine:"			713",
			toLine:"			713",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			        request.setBody(JSON.toJSONBytes(userInfo));			
",
,
			fromLine:"			725",
			toLine:"			725",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
			        request.setBody(JSON.toJSONBytes(userInfo));			
",
,
			fromLine:"			731",
			toLine:"			731",
			content:"
			        when(authenticationMetadataManager.isSuperUser(eq("rocketmq"))).thenReturn(CompletableFuture.completedFuture(false));			
",
,
			fromLine:"			739",
			toLine:"			740",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(null));
			        when(authenticationMetadataManager.getUser(eq("abc"))).thenReturn(CompletableFuture.completedFuture(User.of("abc", "123", UserType.NORMAL)));			
",
,
			fromLine:"			748",
			toLine:"			748",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			758",
			toLine:"			758",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			762",
			toLine:"			762",
			content:"
			        when(authenticationMetadataManager.isSuperUser(eq("rocketmq"))).thenReturn(CompletableFuture.completedFuture(false));			
",
,
			fromLine:"			768",
			toLine:"			768",
			content:"
			    public void testGetUser() throws RemotingCommandException {			
",
,
			fromLine:"			776",
			toLine:"			776",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
			    public void testListUser() throws RemotingCommandException {			
",
,
			fromLine:"			794",
			toLine:"			794",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			813",
			toLine:"			813",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			815",
			toLine:"			815",
			content:"
			        request.setBody(JSON.toJSONBytes(aclInfo));			
",
,
			fromLine:"			831",
			toLine:"			831",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			833",
			toLine:"			833",
			content:"
			        request.setBody(JSON.toJSONBytes(aclInfo));			
",
,
			fromLine:"			849",
			toLine:"			849",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			855",
			toLine:"			855",
			content:"
			    public void testGetAcl() throws RemotingCommandException {			
",
,
			fromLine:"			864",
			toLine:"			864",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			876",
			toLine:"			876",
			content:"
			    public void testListAcl() throws RemotingCommandException {			
",
,
			fromLine:"			885",
			toLine:"			885",
			content:"
			        request.makeCustomHeaderToNet();			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/context/DefaultAuthorizationContext.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.context;
			
			import java.util.Collections;
			import java.util.List;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.common.action.Action;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			        DefaultAuthorizationContext context = new DefaultAuthorizationContext();
			        context.setSubject(subject);			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        context.setActions(Collections.singletonList(action));			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			48",
			content:"
			        DefaultAuthorizationContext context = new DefaultAuthorizationContext();
			        context.setSubject(subject);
			        context.setResource(resource);
			        context.setActions(actions);			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public String getSubjectKey() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public String getResourceKey() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public Subject getSubject() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setSubject(Subject subject) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public Resource getResource() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public void setResource(Resource resource) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public List<Action> getActions() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setActions(List<Action> actions) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public String getSourceIp() {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void setSourceIp(String sourceIp) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/builder/DefaultAuthorizationContextBuilder.java:
		[
			fromLine:"			16",
			toLine:"			77",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.builder;
			
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ClientType;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.Subscription;
			import apache.rocketmq.v2.SubscriptionEntry;
			import apache.rocketmq.v2.TelemetryCommand;
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import io.netty.channel.ChannelHandlerContext;
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.collections.MapUtils;
			import org.apache.commons.lang3.ArrayUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.context.DefaultAuthorizationContext;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.constant.CommonConstants;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.resource.ResourcePattern;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.RequestHeaderRegistry;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			                    topic = Resource.ofTopic(fields.get(TOPIC));			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			                        }			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			                        topic = Resource.ofTopic(fields.get(TOPIC));			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			                        }			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			                        topic = Resource.ofTopic(fields.get(B));			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			                        topic = Resource.ofTopic(fields.get(TOPIC));			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			                    group = Resource.ofGroup(fields.get(GROUP));			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			                        topic = Resource.ofTopic(fields.get(TOPIC));			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			                    group = Resource.ofGroup(fields.get(CONSUMER_GROUP));			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			                    topic = Resource.ofTopic(fields.get(TOPIC));			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			                        group = Resource.ofGroup(data.getGroupName());			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			                            topic = Resource.ofTopic(subscriptionData.getTopic());			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			                        group = Resource.ofGroup(unregisterClientRequestHeader.getConsumerGroup());			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			                    group = Resource.ofGroup(getConsumerListByGroupRequestHeader.getConsumerGroup());			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			                        topic = Resource.ofTopic(queryConsumerOffsetRequestHeader.getTopic());			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			                    group = Resource.ofGroup(queryConsumerOffsetRequestHeader.getConsumerGroup());			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			                        topic = Resource.ofTopic(updateConsumerOffsetRequestHeader.getTopic());			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			                    group = Resource.ofGroup(updateConsumerOffsetRequestHeader.getConsumerGroup());			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			                    group = Resource.ofGroup(lockBatchRequestBody.getConsumerGroup());			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			                            topic = Resource.ofTopic(messageQueue.getTopic());			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			                    group = Resource.ofGroup(unlockBatchRequestBody.getConsumerGroup());			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			                            topic = Resource.ofTopic(messageQueue.getTopic());			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			                            resource = Resource.ofGroup(resourceValue);			
",
,
			fromLine:"			367",
			toLine:"			368",
			content:"
			                        } else {
			                            resource = Resource.of(resourceType, resourceValue, ResourcePattern.LITERAL);			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			        if (CollectionUtils.isEmpty(result) && resource != null) {			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			        String sourceIp = StringUtils.substringBefore(metadata.get(GrpcConstants.REMOTE_ADDRESS), CommonConstants.COLON);			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			        String sourceIp = StringUtils.substringBefore(metadata.get(GrpcConstants.REMOTE_ADDRESS), CommonConstants.COLON);			
",
,
			fromLine:"			484",
			toLine:"			484",
			content:"
			        String sourceIp = StringUtils.substringBefore(metadata.get(GrpcConstants.REMOTE_ADDRESS), CommonConstants.COLON);			
",
,

		],
		auth/src/test/java/org/apache/rocketmq/auth/authorization/AuthorizationEvaluatorTest.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.context.AuthorizationContext;
			import org.apache.rocketmq.auth.authorization.context.DefaultAuthorizationContext;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManager;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.auth.helper.AuthTestHelper;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.action.Action;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        // acl sourceIp is null			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        sourceIp = "192.168.0.1";			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        sourceIp = "192.168.0.1";			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			            String sourceIp = "10.10.0.1";			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        // decision is deny			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
						
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
						
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
						
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
						
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
						
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			            String sourceIp = "192.168.0.1";			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/model/Acl.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.model;
			
			import com.google.common.collect.Lists;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.common.action.Action;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        acl.setSubject(subject);			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/model/Policy.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.model;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Objects;
			import java.util.stream.Collectors;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        Decision decision) {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			        policy.setPolicyType(policyType);
			        List<PolicyEntry> entries = resources.stream()			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            } else {			
",
,

		],
		auth/src/test/java/org/apache/rocketmq/auth/helper/AuthTestHelper.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.auth.helper;
			
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.stream.Collectors;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.provider.DefaultAuthenticationProvider;
			import org.apache.rocketmq.auth.authentication.provider.LocalAuthenticationMetadataProvider;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Environment;
			import org.apache.rocketmq.auth.authorization.model.Policy;
			import org.apache.rocketmq.auth.authorization.model.PolicyEntry;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.auth.authorization.provider.DefaultAuthorizationProvider;
			import org.apache.rocketmq.auth.authorization.provider.LocalAuthorizationMetadataProvider;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        Decision decision) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			        String sourceIps, Decision decision) {
			        Subject subject = Subject.of(subjectKey);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        Decision decision) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        Decision decision) {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			            .map(Resource::of).collect(Collectors.toList());			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			        Environment environment = null;
			        if (StringUtils.isNotBlank(sourceIps)) {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        }			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/model/PolicyEntry.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.model;
			
			import java.util.List;
			import java.util.stream.Collectors;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			39",
			content:"
			        PolicyEntry policyEntry = new PolicyEntry();
			        policyEntry.setResource(resource);
			        policyEntry.setActions(actions);
			        policyEntry.setEnvironment(environment);			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			        Decision decision) {
			        this.setActions(actions);
			        this.setEnvironment(environment);			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public boolean isMatchResource(Resource resource) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public boolean isMatchAction(List<Action> actions) {			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			        return actions.stream()
			            .anyMatch(action -> this.actions.contains(action)			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public boolean isMatchEnvironment(Environment environment) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        }			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String toResourceStr() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        }			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public List<String> toActionsStr() {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        }			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public Resource getResource() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setResource(Resource resource) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public List<Action> getActions() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setActions(List<Action> actions) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public Environment getEnvironment() {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public void setEnvironment(Environment environment) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    public Decision getDecision() {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    public void setDecision(Decision decision) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/migration/AuthMigrator.java:
		[
			fromLine:"			16",
			toLine:"			50",
			content:"
			 */
			package org.apache.rocketmq.auth.migration;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Objects;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclConstants;
			import org.apache.rocketmq.acl.plain.PlainPermissionManager;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManager;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Policy;
			import org.apache.rocketmq.auth.authorization.model.PolicyEntry;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.AclConfig;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.constant.CommonConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.resource.ResourcePattern;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			                Decision decision = parseDecision(perm);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			                Decision decision = parseDecision(perm);			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            String topicPerm = StringUtils.trim(config.getDefaultTopicPerm());			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			            Decision decision = parseDecision(topicPerm);			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			            String groupPerm = StringUtils.trim(config.getDefaultGroupPerm());			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			            Decision decision = parseDecision(groupPerm);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/auth/converter/AclConverter.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.broker.auth.converter;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.stream.Collectors;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Environment;
			import org.apache.rocketmq.auth.authorization.model.Policy;
			import org.apache.rocketmq.auth.authorization.model.PolicyEntry;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/model/Resource.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.model;
			
			import com.alibaba.fastjson2.annotation.JSONField;
			import java.util.List;
			import java.util.Objects;
			import java.util.stream.Collectors;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.ResourcePattern;
			import org.apache.rocketmq.common.constant.CommonConstants;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public static Resource ofCluster(String clusterName) {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    public static Resource ofTopic(String topicName) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        }			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			54",
			toLine:"			56",
			content:"
			        Resource resource = new Resource();
			        resource.resourceType = resourceType;
			        resource.resourceName = resourceName;			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        if (StringUtils.equals(resourceKey, CommonConstants.ASTERISK)) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        }			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public String getResourceKey() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        }			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			            case ANY:			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            case LITERAL:			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            case PREFIXED:			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public boolean isMatch(Resource resource) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        }			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        }			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			            case LITERAL:			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			            case PREFIXED:			
",
,
			fromLine:"			134",
			toLine:"			136",
			content:"
			        Resource resource = (Resource) o;
			        return resourceType == resource.resourceType
			            && Objects.equals(resourceName, resource.resourceName)			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public ResourceType getResourceType() {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    public void setResourceType(ResourceType resourceType) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			    public String getResourceName() {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public void setResourceName(String resourceName) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public ResourcePattern getResourcePattern() {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public void setResourcePattern(ResourcePattern resourcePattern) {			
",
,

		],
		auth/src/test/java/org/apache/rocketmq/auth/authorization/manager/AuthorizationMetadataManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.manager;
			
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.enums.Decision;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Policy;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.auth.helper.AuthTestHelper;
			import org.apache.rocketmq.common.MixAll;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            try {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			        this.authenticationMetadataManager.createUser(user2).join();			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        this.authorizationMetadataManager.deleteAcl(Subject.of("User:test"), PolicyType.CUSTOM, Resource.ofTopic("test")).join();			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
						
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java:
		[
			fromLine:"			16",
			toLine:"			179",
			content:"
			 */
			package org.apache.rocketmq.broker;
			
			import com.google.common.annotations.VisibleForTesting;
			import com.google.common.collect.Lists;
			import java.io.IOException;
			import java.net.InetSocketAddress;
			import java.util.AbstractMap;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Optional;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import java.util.function.Function;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.acl.AccessValidator;
			import org.apache.rocketmq.acl.plain.PlainAccessValidator;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManager;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.auth.migration.AuthMigrator;
			import org.apache.rocketmq.broker.auth.pipeline.AuthenticationPipeline;
			import org.apache.rocketmq.broker.auth.pipeline.AuthorizationPipeline;
			import org.apache.rocketmq.broker.client.ClientHousekeepingService;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.client.DefaultConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.broker.client.net.Broker2Client;
			import org.apache.rocketmq.broker.client.rebalance.RebalanceLockManager;
			import org.apache.rocketmq.broker.coldctr.ColdDataCgCtrService;
			import org.apache.rocketmq.broker.coldctr.ColdDataPullRequestHoldService;
			import org.apache.rocketmq.broker.controller.ReplicasManager;
			import org.apache.rocketmq.broker.dledger.DLedgerRoleChangeHandler;
			import org.apache.rocketmq.broker.failover.EscapeBridge;
			import org.apache.rocketmq.broker.filter.CommitLogDispatcherCalcBitMap;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.broker.latency.BrokerFastFailure;
			import org.apache.rocketmq.broker.longpolling.LmqPullRequestHoldService;
			import org.apache.rocketmq.broker.longpolling.NotifyMessageArrivingListener;
			import org.apache.rocketmq.broker.longpolling.PullRequestHoldService;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;
			import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
			import org.apache.rocketmq.broker.offset.BroadcastOffsetManager;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.broker.offset.ConsumerOrderInfoManager;
			import org.apache.rocketmq.broker.offset.LmqConsumerOffsetManager;
			import org.apache.rocketmq.broker.offset.RocksDBConsumerOffsetManager;
			import org.apache.rocketmq.broker.offset.RocksDBLmqConsumerOffsetManager;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.broker.plugin.BrokerAttachedPlugin;
			import org.apache.rocketmq.broker.processor.AckMessageProcessor;
			import org.apache.rocketmq.broker.processor.AdminBrokerProcessor;
			import org.apache.rocketmq.broker.processor.ChangeInvisibleTimeProcessor;
			import org.apache.rocketmq.broker.processor.ClientManageProcessor;
			import org.apache.rocketmq.broker.processor.ConsumerManageProcessor;
			import org.apache.rocketmq.broker.processor.EndTransactionProcessor;
			import org.apache.rocketmq.broker.processor.NotificationProcessor;
			import org.apache.rocketmq.broker.processor.PeekMessageProcessor;
			import org.apache.rocketmq.broker.processor.PollingInfoProcessor;
			import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
			import org.apache.rocketmq.broker.processor.PopMessageProcessor;
			import org.apache.rocketmq.broker.processor.PullMessageProcessor;
			import org.apache.rocketmq.broker.processor.QueryAssignmentProcessor;
			import org.apache.rocketmq.broker.processor.QueryMessageProcessor;
			import org.apache.rocketmq.broker.processor.ReplyMessageProcessor;
			import org.apache.rocketmq.broker.processor.SendMessageProcessor;
			import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
			import org.apache.rocketmq.broker.slave.SlaveSynchronize;
			import org.apache.rocketmq.broker.subscription.LmqSubscriptionGroupManager;
			import org.apache.rocketmq.broker.subscription.RocksDBLmqSubscriptionGroupManager;
			import org.apache.rocketmq.broker.subscription.RocksDBSubscriptionGroupManager;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.LmqTopicConfigManager;
			import org.apache.rocketmq.broker.topic.RocksDBLmqTopicConfigManager;
			import org.apache.rocketmq.broker.topic.RocksDBTopicConfigManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.broker.topic.TopicQueueMappingCleanService;
			import org.apache.rocketmq.broker.topic.TopicQueueMappingManager;
			import org.apache.rocketmq.broker.topic.TopicRouteInfoManager;
			import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;
			import org.apache.rocketmq.broker.transaction.TransactionMetricsFlushService;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
			import org.apache.rocketmq.broker.transaction.queue.DefaultTransactionalMessageCheckListener;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageBridge;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageServiceImpl;
			import org.apache.rocketmq.broker.util.HookUtils;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.stats.MomentStatsItem;
			import org.apache.rocketmq.common.utils.ServiceProvider;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.Configuration;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.common.TlsMode;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
			import org.apache.rocketmq.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.RequestHeaderRegistry;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
			import org.apache.rocketmq.srvutil.FileWatchService;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageArrivingListener;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.RocksDBMessageStore;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
			import org.apache.rocketmq.store.hook.PutMessageHook;
			import org.apache.rocketmq.store.hook.SendMessageBackHook;
			import org.apache.rocketmq.store.plugin.MessageStoreFactory;
			import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
			import org.apache.rocketmq.store.stats.BrokerStats;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.apache.rocketmq.store.stats.LmqBrokerStatsManager;
			import org.apache.rocketmq.store.timer.TimerCheckpoint;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.timer.TimerMetrics;
						
",
,
			fromLine:"			185",
			toLine:"			186",
			content:"
			
			    protected final BrokerConfig brokerConfig;			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    private final NettyClientConfig nettyClientConfig;			
",
,
			fromLine:"			329",
			toLine:"			330",
			content:"
			    ) {
			        this.brokerConfig = brokerConfig;			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        this.nettyClientConfig = nettyClientConfig;			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
			        this.setStoreHost(new InetSocketAddress(this.getBrokerConfig().getBrokerIP1(), getListenPort()));			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			        this.broadcastOffsetManager = new BroadcastOffsetManager(this);			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			        this.consumerIdsChangeListener = new DefaultConsumerIdsChangeListener(this);			
",
,
			fromLine:"			381",
			toLine:"			384",
			content:"
			
			        this.sendThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getSendThreadPoolQueueCapacity());
			        this.putThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getPutThreadPoolQueueCapacity());
			        this.pullThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getPullThreadPoolQueueCapacity());			
",
,
			fromLine:"			386",
			toLine:"			394",
			content:"
			
			        this.ackThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getAckThreadPoolQueueCapacity());
			        this.replyThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getReplyThreadPoolQueueCapacity());
			        this.queryThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getQueryThreadPoolQueueCapacity());
			        this.clientManagerThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getClientManagerThreadPoolQueueCapacity());
			        this.consumerManagerThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getConsumerManagerThreadPoolQueueCapacity());
			        this.heartbeatThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getHeartbeatThreadPoolQueueCapacity());
			        this.endTransactionThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getEndTransactionPoolQueueCapacity());
			        this.adminBrokerThreadPoolQueue = new LinkedBlockingQueue<>(this.brokerConfig.getAdminBrokerThreadPoolQueueCapacity());			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
			            brokerConfigPath,			
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			
			        this.brokerMemberGroup = new BrokerMemberGroup(this.brokerConfig.getBrokerClusterName(), this.brokerConfig.getBrokerName());			
",
,
			fromLine:"			439",
			toLine:"			439",
			content:"
						
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			    public BrokerConfig getBrokerConfig() {			
",
,
			fromLine:"			457",
			toLine:"			457",
			content:"
			    public NettyServerConfig getNettyServerConfig() {			
",
,
			fromLine:"			477",
			toLine:"			478",
			content:"
			    protected void initializeRemotingServer() throws CloneNotSupportedException {
			        this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.clientHousekeepingService);			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
						
",
,
			fromLine:"			496",
			toLine:"			498",
			content:"
			
			        this.sendMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getSendMessageThreadPoolNums(),			
",
,
			fromLine:"			504",
			toLine:"			506",
			content:"
			
			        this.pullMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getPullMessageThreadPoolNums(),			
",
,
			fromLine:"			512",
			toLine:"			514",
			content:"
			
			        this.litePullMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getLitePullMessageThreadPoolNums(),			
",
,
			fromLine:"			520",
			toLine:"			522",
			content:"
			
			        this.putMessageFutureExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getPutMessageFutureThreadPoolNums(),			
",
,
			fromLine:"			528",
			toLine:"			530",
			content:"
			
			        this.ackMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getAckMessageThreadPoolNums(),			
",
,
			fromLine:"			536",
			toLine:"			538",
			content:"
			
			        this.queryMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getQueryMessageThreadPoolNums(),			
",
,
			fromLine:"			544",
			toLine:"			546",
			content:"
			
			        this.adminBrokerExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getAdminBrokerThreadPoolNums(),			
",
,
			fromLine:"			552",
			toLine:"			554",
			content:"
			
			        this.clientManageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getClientManageThreadPoolNums(),			
",
,
			fromLine:"			560",
			toLine:"			562",
			content:"
			
			        this.heartbeatExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getHeartbeatThreadPoolNums(),			
",
,
			fromLine:"			568",
			toLine:"			570",
			content:"
			
			        this.consumerManageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getConsumerManageThreadPoolNums(),			
",
,
			fromLine:"			576",
			toLine:"			578",
			content:"
			
			        this.replyMessageExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getProcessReplyMessageThreadPoolNums(),			
",
,
			fromLine:"			584",
			toLine:"			586",
			content:"
			
			        this.endTransactionExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getEndTransactionThreadPoolNums(),			
",
,
			fromLine:"			592",
			toLine:"			594",
			content:"
			
			        this.loadBalanceExecutor = ThreadUtils.newThreadPoolExecutor(
			            this.brokerConfig.getLoadBalanceProcessorThreadPoolNums(),			
",
,
			fromLine:"			632",
			toLine:"			632",
			content:"
			            }			
",
,
			fromLine:"			683",
			toLine:"			686",
			content:"
			
			        if (!messageStoreConfig.isEnableDLegerCommitLog() && !messageStoreConfig.isDuplicationEnable() && !brokerConfig.isEnableControllerMode()) {
			            if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) {
			                if (this.messageStoreConfig.getHaMasterAddress() != null && this.messageStoreConfig.getHaMasterAddress().length() >= HA_ADDRESS_MIN_LENGTH) {			
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			                            //timer checkpoint, latency-sensitive, so sync it more frequently			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
						
",
,
			fromLine:"			736",
			toLine:"			736",
			content:"
						
",
,
			fromLine:"			738",
			toLine:"			738",
			content:"
			            this.updateNamesrvAddr();			
",
,
			fromLine:"			750",
			toLine:"			750",
			content:"
			            }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);			
",
,
			fromLine:"			761",
			toLine:"			761",
			content:"
			                }			
",
,
			fromLine:"			766",
			toLine:"			767",
			content:"
			    private void updateNamesrvAddr() {
			        if (this.brokerConfig.isFetchNameSrvAddrByDnsLookup()) {			
",
,
			fromLine:"			769",
			toLine:"			769",
			content:"
			        } else {			
",
,
			fromLine:"			787",
			toLine:"			788",
			content:"
			            DefaultMessageStore defaultMessageStore;
			            if (this.messageStoreConfig.isEnableRocksDBStore()) {			
",
,
			fromLine:"			790",
			toLine:"			790",
			content:"
			            } else {			
",
,
			fromLine:"			793",
			toLine:"			793",
			content:"
						
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			            MessageStorePluginContext context = new MessageStorePluginContext(			
",
,
			fromLine:"			806",
			toLine:"			810",
			content:"
			            this.messageStore = MessageStoreFactory.build(context, defaultMessageStore);
			            this.messageStore.getDispatcherList().addFirst(new CommitLogDispatcherCalcBitMap(this.brokerConfig, this.consumerFilterManager));
			            if (messageStoreConfig.isTimerWheelEnable()) {
			                this.timerCheckpoint = new TimerCheckpoint(BrokerPathConfigHelper.getTimerCheckPath(messageStoreConfig.getStorePathRootDir()));
			                TimerMetrics timerMetrics = new TimerMetrics(BrokerPathConfigHelper.getTimerMetricsPath(messageStoreConfig.getStorePathRootDir()));			
",
,
			fromLine:"			840",
			toLine:"			840",
			content:"
						
",
,
			fromLine:"			850",
			toLine:"			850",
			content:"
						
",
,
			fromLine:"			1009",
			toLine:"			1009",
			content:"
			    private void initialAcl() {			
",
,
			fromLine:"			1074",
			toLine:"			1081",
			content:"
			
			        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendMessageProcessor, this.sendMessageExecutor);
			        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendMessageProcessor, this.sendMessageExecutor);
			        this.remotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendMessageProcessor, this.sendMessageExecutor);
			        this.remotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendMessageProcessor, this.sendMessageExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendMessageProcessor, this.sendMessageExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendMessageProcessor, this.sendMessageExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendMessageProcessor, this.sendMessageExecutor);			
",
,
			fromLine:"			1085",
			toLine:"			1086",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.PULL_MESSAGE, this.pullMessageProcessor, this.pullMessageExecutor);			
",
,
			fromLine:"			1091",
			toLine:"			1091",
			content:"
			         */			
",
,
			fromLine:"			1095",
			toLine:"			1095",
			content:"
			         */			
",
,
			fromLine:"			1100",
			toLine:"			1101",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);			
",
,
			fromLine:"			1103",
			toLine:"			1104",
			content:"
			
			        this.remotingServer.registerProcessor(RequestCode.BATCH_ACK_MESSAGE, this.ackMessageProcessor, this.ackMessageExecutor);			
",
,
			fromLine:"			1108",
			toLine:"			1109",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.CHANGE_MESSAGE_INVISIBLETIME, this.changeInvisibleTimeProcessor, this.ackMessageExecutor);			
",
,
			fromLine:"			1113",
			toLine:"			1113",
			content:"
			         */			
",
,
			fromLine:"			1118",
			toLine:"			1118",
			content:"
			         */			
",
,
			fromLine:"			1126",
			toLine:"			1129",
			content:"
			
			        this.remotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE, replyMessageProcessor, replyMessageExecutor);
			        this.remotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE_V2, replyMessageProcessor, replyMessageExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE, replyMessageProcessor, replyMessageExecutor);			
",
,
			fromLine:"			1135",
			toLine:"			1136",
			content:"
			        NettyRequestProcessor queryProcessor = new QueryMessageProcessor(this);
			        this.remotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);			
",
,
			fromLine:"			1138",
			toLine:"			1139",
			content:"
			
			        this.fastRemotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);			
",
,
			fromLine:"			1144",
			toLine:"			1146",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.HEART_BEAT, clientManageProcessor, this.heartbeatExecutor);
			        this.remotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientManageProcessor, this.clientManageExecutor);			
",
,
			fromLine:"			1148",
			toLine:"			1150",
			content:"
			
			        this.fastRemotingServer.registerProcessor(RequestCode.HEART_BEAT, clientManageProcessor, this.heartbeatExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientManageProcessor, this.clientManageExecutor);			
",
,
			fromLine:"			1156",
			toLine:"			1158",
			content:"
			        ConsumerManageProcessor consumerManageProcessor = new ConsumerManageProcessor(this);
			        this.remotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);
			        this.remotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);			
",
,
			fromLine:"			1160",
			toLine:"			1162",
			content:"
			
			        this.fastRemotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);			
",
,
			fromLine:"			1167",
			toLine:"			1170",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.QUERY_ASSIGNMENT, queryAssignmentProcessor, loadBalanceExecutor);
			        this.fastRemotingServer.registerProcessor(RequestCode.QUERY_ASSIGNMENT, queryAssignmentProcessor, loadBalanceExecutor);
			        this.remotingServer.registerProcessor(RequestCode.SET_MESSAGE_REQUEST_MODE, queryAssignmentProcessor, loadBalanceExecutor);			
",
,
			fromLine:"			1175",
			toLine:"			1176",
			content:"
			         */
			        this.remotingServer.registerProcessor(RequestCode.END_TRANSACTION, endTransactionProcessor, this.endTransactionExecutor);			
",
,
			fromLine:"			1200",
			toLine:"			1200",
			content:"
			    public void protectBroker() {			
",
,
			fromLine:"			1203",
			toLine:"			1203",
			content:"
			                final long fallBehindBytes = next.getValue().getValue().get();			
",
,
			fromLine:"			1300",
			toLine:"			1300",
			content:"
			    public MessageStoreConfig getMessageStoreConfig() {			
",
,
			fromLine:"			1589",
			toLine:"			1590",
			content:"
			    protected void unregisterBrokerAll() {
			        this.brokerOuterAPI.unregisterBrokerAll(			
",
,
			fromLine:"			1592",
			toLine:"			1593",
			content:"
			            this.getBrokerAddr(),
			            this.brokerConfig.getBrokerName(),			
",
,
			fromLine:"			1597",
			toLine:"			1597",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			1622",
			toLine:"			1623",
			content:"
			            // In test scenarios where it is up to OS to pick up an available port, set the listening port back to config
			            if (null != nettyServerConfig && 0 == nettyServerConfig.getListenPort()) {			
",
,
			fromLine:"			1704",
			toLine:"			1704",
			content:"
						
",
,
			fromLine:"			1706",
			toLine:"			1706",
			content:"
						
",
,
			fromLine:"			1716",
			toLine:"			1717",
			content:"
			
			        if (!isIsolated && !this.messageStoreConfig.isEnableDLegerCommitLog() && !this.messageStoreConfig.isDuplicationEnable()) {			
",
,
			fromLine:"			1733",
			toLine:"			1733",
			content:"
			                    }			
",
,
			fromLine:"			1738",
			toLine:"			1738",
			content:"
			            }			
",
,
			fromLine:"			1740",
			toLine:"			1740",
			content:"
						
",
,
			fromLine:"			1752",
			toLine:"			1752",
			content:"
			                }			
",
,
			fromLine:"			1755",
			toLine:"			1755",
			content:"
						
",
,
			fromLine:"			1759",
			toLine:"			1759",
			content:"
						
",
,
			fromLine:"			1789",
			toLine:"			1789",
			content:"
			            }			
",
,
			fromLine:"			1798",
			toLine:"			1798",
			content:"
			            tmpTopic = new TopicConfig(topicConfig);			
",
,
			fromLine:"			1800",
			toLine:"			1800",
			content:"
			        }			
",
,
			fromLine:"			1825",
			toLine:"			1825",
			content:"
			                                topicConfig.getPerm()			
",
,
			fromLine:"			1862",
			toLine:"			1863",
			content:"
			
			            if (this.brokerConfig.isEnableSplitRegistration()			
",
,
			fromLine:"			1876",
			toLine:"			1876",
			content:"
			            buildSerializeWrapper(topicConfigTable, topicQueueMappingInfoMap);			
",
,
			fromLine:"			1878",
			toLine:"			1881",
			content:"
			            this.getBrokerAddr(),
			            this.brokerConfig.getBrokerName(),
			            this.brokerConfig.getBrokerId(),
			            this.brokerConfig.getRegisterBrokerTimeoutMills(),			
",
,
			fromLine:"			1893",
			toLine:"			1894",
			content:"
			        }
			        List<RegisterBrokerResult> registerBrokerResultList = this.brokerOuterAPI.registerBrokerAll(			
",
,
			fromLine:"			1896",
			toLine:"			1897",
			content:"
			            this.getBrokerAddr(),
			            this.brokerConfig.getBrokerName(),			
",
,
			fromLine:"			1902",
			toLine:"			1905",
			content:"
			            oneway,
			            this.brokerConfig.getRegisterBrokerTimeoutMills(),
			            this.brokerConfig.isEnableSlaveActingMaster(),
			            this.brokerConfig.isCompressedRegister(),			
",
,
			fromLine:"			1912",
			toLine:"			1912",
			content:"
			    protected void sendHeartbeat() {			
",
,
			fromLine:"			1916",
			toLine:"			1919",
			content:"
			
			        if (this.brokerConfig.isEnableSlaveActingMaster()) {
			            if (this.brokerConfig.isCompatibleWithOldNameSrv()) {
			                this.brokerOuterAPI.sendHeartbeatViaDataVersion(			
",
,
			fromLine:"			1921",
			toLine:"			1923",
			content:"
			                    this.getBrokerAddr(),
			                    this.brokerConfig.getBrokerName(),
			                    this.brokerConfig.getBrokerId(),			
",
,
			fromLine:"			1925",
			toLine:"			1925",
			content:"
			                    this.getTopicConfigManager().getDataVersion(),			
",
,
			fromLine:"			1927",
			toLine:"			1928",
			content:"
			            } else {
			                this.brokerOuterAPI.sendHeartbeat(			
",
,
			fromLine:"			1930",
			toLine:"			1933",
			content:"
			                    this.getBrokerAddr(),
			                    this.brokerConfig.getBrokerName(),
			                    this.brokerConfig.getBrokerId(),
			                    this.brokerConfig.getSendHeartbeatTimeoutMillis(),			
",
,
			fromLine:"			1941",
			toLine:"			1941",
			content:"
			            brokerMemberGroup = this.getBrokerOuterAPI()			
",
,
			fromLine:"			1947",
			toLine:"			1947",
			content:"
			        if (brokerMemberGroup == null || brokerMemberGroup.getBrokerAddrs().size() == 0) {			
",
,
			fromLine:"			1959",
			toLine:"			1959",
			content:"
			    private int calcAliveBrokerNumInGroup(Map<Long, String> brokerAddrTable) {			
",
,
			fromLine:"			1984",
			toLine:"			1984",
			content:"
						
",
,
			fromLine:"			1992",
			toLine:"			1992",
			content:"
			        TopicConfigSerializeWrapper topicConfigWrapper = this.getTopicConfigManager().buildTopicConfigSerializeWrapper();			
",
,
			fromLine:"			2005",
			toLine:"			2005",
			content:"
			        BrokerController.LOG.info("{} start service, min broker id is {}, min broker addr: {}",			
",
,
			fromLine:"			2009",
			toLine:"			2010",
			content:"
			
			        this.changeSpecialServiceStatus(this.brokerConfig.getBrokerId() == minBrokerId);			
",
,
			fromLine:"			2016",
			toLine:"			2016",
			content:"
			    public void startServiceWithoutCondition() {			
",
,
			fromLine:"			2018",
			toLine:"			2019",
			content:"
			
			        this.changeSpecialServiceStatus(this.brokerConfig.getBrokerId() == MixAll.MASTER_ID);			
",
,
			fromLine:"			2052",
			toLine:"			2052",
			content:"
			        boolean needSyncMasterFlushOffset = this.messageStore.getMasterFlushedOffset() == 0			
",
,
			fromLine:"			2080",
			toLine:"			2080",
			content:"
						
",
,
			fromLine:"			2083",
			toLine:"			2083",
			content:"
			        LOG.info("Min broker changed, old: {}-{}, new {}-{}",			
",
,
			fromLine:"			2085",
			toLine:"			2086",
			content:"
			
			        this.minBrokerIdInGroup = minBrokerId;			
",
,
			fromLine:"			2088",
			toLine:"			2088",
			content:"
						
",
,
			fromLine:"			2090",
			toLine:"			2090",
			content:"
						
",
,
			fromLine:"			2095",
			toLine:"			2095",
			content:"
						
",
,
			fromLine:"			2097",
			toLine:"			2097",
			content:"
			            // master online			
",
,
			fromLine:"			2107",
			toLine:"			2107",
			content:"
			    public void updateMinBroker(long minBrokerId, String minBrokerAddr) {			
",
,
			fromLine:"			2115",
			toLine:"			2115",
			content:"
			                        }			
",
,
			fromLine:"			2124",
			toLine:"			2124",
			content:"
						
",
,
			fromLine:"			2126",
			toLine:"			2126",
			content:"
			        String masterHaAddr) {			
",
,
			fromLine:"			2130",
			toLine:"			2131",
			content:"
			                    try {
			                        if (minBrokerId != this.minBrokerIdInGroup) {			
",
,
			fromLine:"			2192",
			toLine:"			2192",
			content:"
			    public MessageStore getMessageStoreByBrokerName(String brokerName) {			
",
,
			fromLine:"			2199",
			toLine:"			2199",
			content:"
			    public BrokerIdentity getBrokerIdentity() {			
",
,
			fromLine:"			2201",
			toLine:"			2202",
			content:"
			            return new BrokerIdentity(
			                brokerConfig.getBrokerClusterName(), brokerConfig.getBrokerName(),			
",
,
			fromLine:"			2205",
			toLine:"			2206",
			content:"
			            return new BrokerIdentity(
			                brokerConfig.getBrokerClusterName(), brokerConfig.getBrokerName(),			
",
,
			fromLine:"			2243",
			toLine:"			2243",
			content:"
			    public String getHAServerAddr() {			
",
,
			fromLine:"			2418",
			toLine:"			2418",
			content:"
			    public long getMinBrokerIdInGroup() {			
",
,
			fromLine:"			2422",
			toLine:"			2422",
			content:"
			    public BrokerController peekMasterBroker() {			
",
,
			fromLine:"			2430",
			toLine:"			2430",
			content:"
			    public int getListenPort() {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java:
		[
			fromLine:"			16",
			toLine:"			217",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.JSONObject;
			import com.google.common.collect.Sets;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.io.UnsupportedEncodingException;
			import java.net.UnknownHostException;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.AccessValidator;
			import org.apache.rocketmq.acl.plain.PlainAccessValidator;
			import org.apache.rocketmq.auth.authentication.enums.UserType;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.enums.PolicyType;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Resource;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.auth.converter.AclConverter;
			import org.apache.rocketmq.broker.auth.converter.UserConverter;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.controller.ReplicasManager;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.plugin.BrokerAttachedPlugin;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.LockCallback;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UnlockCallback;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.AttributeParser;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.constant.FIleReadaheadMode;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageId;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.stats.StatsItem;
			import org.apache.rocketmq.common.stats.StatsSnapshot;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
			import org.apache.rocketmq.filter.util.BitsArray;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsItem;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeQueueData;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeTimeSpanBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryCorrectionOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.QuerySubscriptionResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.CloneGroupOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateAccessConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteAccessConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteSubscriptionGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAllProducerInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAllTopicConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerAclConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsInBrokerHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerStatusRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetProducerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetSubscriptionGroupConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicStatsInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListAclsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListUsersRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotifyBrokerRoleChangedRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotifyMinBrokerIdChangeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeQueueRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeTimeSpanRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryCorrectionOffsetHeader;
			import org.apache.rocketmq.remoting.protocol.header.QuerySubscriptionByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicConsumeByWhoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicsByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetMasterFlushOffsetHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResumeCheckHalfMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateGroupForbiddenRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewBrokerStatsDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupForbidden;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.remoting.rpc.RpcClientUtils;
			import org.apache.rocketmq.remoting.rpc.RpcException;
			import org.apache.rocketmq.remoting.rpc.RpcRequest;
			import org.apache.rocketmq.remoting.rpc.RpcResponse;
			import org.apache.rocketmq.store.ConsumeQueueExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			import org.apache.rocketmq.store.timer.TimerCheckpoint;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.util.LibC;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
						
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
			        if (requestHeader.getReadable() != null) {			
",
,
			fromLine:"			445",
			toLine:"			445",
			content:"
			        groupForbidden.setTopic(topic);			
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			                response.setRemark(null);			
",
,
			fromLine:"			689",
			toLine:"			689",
			content:"
			                response.setRemark(null);			
",
,
			fromLine:"			724",
			toLine:"			724",
			content:"
			                response.setRemark(null);			
",
,
			fromLine:"			1059",
			toLine:"			1059",
			content:"
			                if (mappingDetail.getBname().equals(item.getBname())) {			
",
,
			fromLine:"			1109",
			toLine:"			1109",
			content:"
						
",
,
			fromLine:"			1331",
			toLine:"			1331",
			content:"
			        Set<MessageQueue> lockOKMQSet = new HashSet<>();			
",
,
			fromLine:"			1418",
			toLine:"			1418",
			content:"
			        if (requestBody.isOnlyThisBroker() || !this.brokerController.getBrokerConfig().isLockInStrictMode()) {			
",
,
			fromLine:"			1476",
			toLine:"			1476",
			content:"
			        for (int queueId = 0; queueId < topicConfig.getReadQueueNums(); queueId++) {			
",
,
			fromLine:"			1487",
			toLine:"			1487",
			content:"
			            }			
",
,
			fromLine:"			1580",
			toLine:"			1580",
			content:"
			            if (max > 0) {			
",
,
			fromLine:"			1740",
			toLine:"			1740",
			content:"
						
",
,
			fromLine:"			1752",
			toLine:"			1752",
			content:"
						
",
,
			fromLine:"			1761",
			toLine:"			1761",
			content:"
			                if (timeOffset >= 0) {			
",
,
			fromLine:"			1880",
			toLine:"			1880",
			content:"
			            Long offset = requestHeader.getOffset();			
",
,
			fromLine:"			1890",
			toLine:"			1890",
			content:"
			        }			
",
,
			fromLine:"			1894",
			toLine:"			1896",
			content:"
			
			    private Long searchOffsetByTimestamp(String topic, int queueId, long timestamp) {
			        if (timestamp < 0) {			
",
,
			fromLine:"			1898",
			toLine:"			1898",
			content:"
			        } else {			
",
,
			fromLine:"			1905",
			toLine:"			1907",
			content:"
			     *
			     * @param topic     Required, not null.
			     * @param group     Required, not null.			
",
,
			fromLine:"			1909",
			toLine:"			1909",
			content:"
			     *                  would get reset.			
",
,
			fromLine:"			1911",
			toLine:"			1911",
			content:"
			     *                  binary search is performed to locate target offset.			
",
,
			fromLine:"			1914",
			toLine:"			1914",
			content:"
			     */			
",
,
			fromLine:"			1926",
			toLine:"			1926",
			content:"
			        // Reset offset for all queues belonging to the specified topic			
",
,
			fromLine:"			1929",
			toLine:"			1930",
			content:"
			            response.setCode(ResponseCode.TOPIC_NOT_EXIST);
			            response.setRemark("Topic " + topic + " does not exist");			
",
,
			fromLine:"			1934",
			toLine:"			1934",
			content:"
						
",
,
			fromLine:"			1936",
			toLine:"			1937",
			content:"
			            response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);
			            response.setRemark("Group " + group + " does not exist");			
",
,
			fromLine:"			1941",
			toLine:"			1945",
			content:"
			
			        if (queueId >= 0) {
			            if (null != offset && -1 != offset) {
			                long min = brokerController.getMessageStore().getMinOffsetInQueue(topic, queueId);
			                long max = brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);			
",
,
			fromLine:"			1948",
			toLine:"			1948",
			content:"
			                    response.setRemark(			
",
,
			fromLine:"			1952",
			toLine:"			1952",
			content:"
			            } else {			
",
,
			fromLine:"			1954",
			toLine:"			1954",
			content:"
			            }			
",
,
			fromLine:"			1957",
			toLine:"			1958",
			content:"
			            for (int index = 0; index < topicConfig.getReadQueueNums(); index++) {
			                offset = searchOffsetByTimestamp(topic, index, timestamp);			
",
,
			fromLine:"			1971",
			toLine:"			1971",
			content:"
			            brokerController.getConsumerOffsetManager()			
",
,
			fromLine:"			1978",
			toLine:"			1979",
			content:"
			        for (Map.Entry<Integer, Long> entry : queueOffsetMap.entrySet()) {
			            brokerController.getPopInflightMessageCounter().clearInFlightMessageNum(topic, group, entry.getKey());			
",
,
			fromLine:"			1982",
			toLine:"			1982",
			content:"
						
",
,
			fromLine:"			2090",
			toLine:"			2090",
			content:"
			            long max = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);			
",
,
			fromLine:"			2094",
			toLine:"			2094",
			content:"
			            long consumeTime;			
",
,
			fromLine:"			2097",
			toLine:"			2097",
			content:"
			            if (consumerOffset > 0) {			
",
,
			fromLine:"			2105",
			toLine:"			2105",
			content:"
			            if (consumerOffset < maxBrokerOffset) {			
",
,
			fromLine:"			2277",
			toLine:"			2277",
			content:"
						
",
,
			fromLine:"			2389",
			toLine:"			2389",
			content:"
			                    }			
",
,
			fromLine:"			2401",
			toLine:"			2401",
			content:"
			                    if (timeOffset >= 0) {			
",
,
			fromLine:"			2736",
			toLine:"			2736",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java:
		[
			fromLine:"			16",
			toLine:"			150",
			content:"
			 */
			package org.apache.rocketmq.broker.out;
			
			import com.alibaba.fastjson2.JSON;
			import java.io.UnsupportedEncodingException;
			import java.net.InetAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclClientRPCHook;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.LockCallback;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UnlockCallback;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.namesrv.DefaultTopAddressing;
			import org.apache.rocketmq.common.namesrv.TopAddressing;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			import org.apache.rocketmq.remoting.rpc.RpcClient;
			import org.apache.rocketmq.remoting.rpc.RpcClientImpl;
			import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
			import org.apache.rocketmq.store.timer.TimerCheckpoint;
			import org.apache.rocketmq.store.timer.TimerMetrics;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
			import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_MASTER_STILL_EXIST;
						
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        RemotingCommand response = null;			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			        RemotingCommand response;			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
						
",
,
			fromLine:"			340",
			toLine:"			343",
			content:"
			            final QueryDataVersionRequestHeader requestHeader = new QueryDataVersionRequestHeader();
			            requestHeader.setBrokerAddr(brokerAddr);
			            requestHeader.setBrokerName(brokerName);
			            requestHeader.setBrokerId(brokerId);			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			            for (final String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			                        try {			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
						
",
,
			fromLine:"			373",
			toLine:"			375",
			content:"
			        final BrokerHeartbeatRequestHeader requestHeader = new BrokerHeartbeatRequestHeader();
			        requestHeader.setClusterName(clusterName);
			        requestHeader.setBrokerAddr(brokerAddr);			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			            for (final String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			                        try {			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
						
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
						
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
						
",
,
			fromLine:"			453",
			toLine:"			462",
			content:"
			        final BrokerIdentity brokerIdentity) {
			        return registerBrokerAll(clusterName,
			            brokerAddr,
			            brokerName,
			            brokerId,
			            haServerAddr,
			            topicConfigWrapper,
			            filterServerList,
			            oneway, timeoutMills,
			            enableActingMaster,			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			            null,			
",
,
			fromLine:"			471",
			toLine:"			480",
			content:"
			     *
			     * @param clusterName
			     * @param brokerAddr
			     * @param brokerName
			     * @param brokerId
			     * @param haServerAddr
			     * @param topicConfigWrapper
			     * @param filterServerList
			     * @param oneway
			     * @param timeoutMills			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			     */			
",
,
			fromLine:"			503",
			toLine:"			508",
			content:"
			            final RegisterBrokerRequestHeader requestHeader = new RegisterBrokerRequestHeader();
			            requestHeader.setBrokerAddr(brokerAddr);
			            requestHeader.setBrokerId(brokerId);
			            requestHeader.setBrokerName(brokerName);
			            requestHeader.setClusterName(clusterName);
			            requestHeader.setHaServerAddr(haServerAddr);			
",
,
			fromLine:"			510",
			toLine:"			511",
			content:"
			            requestHeader.setCompressed(false);
			            if (heartbeatTimeoutMillis != null) {			
",
,
			fromLine:"			515",
			toLine:"			517",
			content:"
			            RegisterBrokerBody requestBody = new RegisterBrokerBody();
			            requestBody.setTopicConfigSerializeWrapper(TopicConfigAndMappingSerializeWrapper.from(topicConfigWrapper));
			            requestBody.setFilterServerList(filterServerList);			
",
,
			fromLine:"			522",
			toLine:"			522",
			content:"
			            for (final String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			526",
			toLine:"			526",
			content:"
			                        try {			
",
,
			fromLine:"			542",
			toLine:"			543",
			content:"
			            try {
			                if (!countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS)) {			
",
,
			fromLine:"			565",
			toLine:"			565",
			content:"
			            try {			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
						
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
						
",
,
			fromLine:"			603",
			toLine:"			603",
			content:"
			                try {			
",
,
			fromLine:"			612",
			toLine:"			612",
			content:"
						
",
,
			fromLine:"			620",
			toLine:"			623",
			content:"
			        UnRegisterBrokerRequestHeader requestHeader = new UnRegisterBrokerRequestHeader();
			        requestHeader.setBrokerAddr(brokerAddr);
			        requestHeader.setBrokerId(brokerId);
			        requestHeader.setBrokerName(brokerName);			
",
,
			fromLine:"			626",
			toLine:"			626",
			content:"
						
",
,
			fromLine:"			636",
			toLine:"			636",
			content:"
						
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
			                    try {			
",
,
			fromLine:"			697",
			toLine:"			697",
			content:"
						
",
,
			fromLine:"			710",
			toLine:"			710",
			content:"
			            for (final String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			715",
			toLine:"			718",
			content:"
			                            QueryDataVersionRequestHeader requestHeader = new QueryDataVersionRequestHeader();
			                            requestHeader.setBrokerAddr(brokerAddr);
			                            requestHeader.setBrokerId(brokerId);
			                            requestHeader.setBrokerName(brokerName);			
",
,
			fromLine:"			720",
			toLine:"			721",
			content:"
			                            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_DATA_VERSION, requestHeader);
			                            request.setBody(topicConfigWrapper.getDataVersion().encode());			
",
,
			fromLine:"			732",
			toLine:"			732",
			content:"
			                                        nameServerDataVersion = DataVersion.decode(body, DataVersion.class);			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
			                            }			
",
,
			fromLine:"			755",
			toLine:"			755",
			content:"
			            try {			
",
,
			fromLine:"			768",
			toLine:"			768",
			content:"
						
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
						
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
						
",
,
			fromLine:"			821",
			toLine:"			821",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_CONSUMER_OFFSET, null);			
",
,
			fromLine:"			838",
			toLine:"			838",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_DELAY_OFFSET, null);			
",
,
			fromLine:"			855",
			toLine:"			855",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_SUBSCRIPTIONGROUP_CONFIG, null);			
",
,
			fromLine:"			876",
			toLine:"			876",
			content:"
						
",
,
			fromLine:"			880",
			toLine:"			882",
			content:"
			        GetMaxOffsetRequestHeader requestHeader = new GetMaxOffsetRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);			
",
,
			fromLine:"			885",
			toLine:"			885",
			content:"
						
",
,
			fromLine:"			900",
			toLine:"			900",
			content:"
						
",
,
			fromLine:"			903",
			toLine:"			904",
			content:"
			        GetMinOffsetRequestHeader requestHeader = new GetMinOffsetRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			907",
			toLine:"			907",
			content:"
						
",
,
			fromLine:"			930",
			toLine:"			930",
			content:"
			        request.setBody(requestBody.encode());			
",
,
			fromLine:"			970",
			toLine:"			970",
			content:"
						
",
,
			fromLine:"			1002",
			toLine:"			1002",
			content:"
						
",
,
			fromLine:"			1006",
			toLine:"			1008",
			content:"
			
			        RemotingCommand request = buildSendMessageRequest(msg, group);
			        RemotingCommand response = this.remotingClient.invokeSync(brokerAddr, request, timeoutMillis);			
",
,
			fromLine:"			1011",
			toLine:"			1011",
			content:"
						
",
,
			fromLine:"			1014",
			toLine:"			1014",
			content:"
			        long timeoutMillis) {			
",
,
			fromLine:"			1017",
			toLine:"			1017",
			content:"
			        CompletableFuture<SendResult> cf = new CompletableFuture<>();			
",
,
			fromLine:"			1019",
			toLine:"			1019",
			content:"
			        try {			
",
,
			fromLine:"			1028",
			toLine:"			1028",
			content:"
			                    try {			
",
,
			fromLine:"			1141",
			toLine:"			1141",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1144",
			toLine:"			1144",
			content:"
						
",
,
			fromLine:"			1147",
			toLine:"			1147",
			content:"
			        GetRouteInfoRequestHeader requestHeader = new GetRouteInfoRequestHeader();			
",
,
			fromLine:"			1151",
			toLine:"			1151",
			content:"
						
",
,
			fromLine:"			1155",
			toLine:"			1156",
			content:"
			            case ResponseCode.TOPIC_NOT_EXIST: {
			                if (allowTopicNotExist) {			
",
,
			fromLine:"			1176",
			toLine:"			1176",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_CLUSTER_INFO, null);			
",
,
			fromLine:"			1191",
			toLine:"			1191",
			content:"
			        InvokeCallback invokeCallback) throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException, RemotingTooMuchRequestException, RemotingConnectException {			
",
,
			fromLine:"			1211",
			toLine:"			1211",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_MESSAGE_REQUEST_MODE, null);			
",
,
			fromLine:"			1226",
			toLine:"			1226",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_METADATA_INFO, null);			
",
,
			fromLine:"			1237",
			toLine:"			1237",
			content:"
			     */			
",
,
			fromLine:"			1243",
			toLine:"			1243",
			content:"
						
",
,
			fromLine:"			1245",
			toLine:"			1246",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ALTER_SYNC_STATE_SET, requestHeader);
			        request.setBody(new SyncStateSet(newSyncStateSet, syncStateSetEpoch).encode());			
",
,
			fromLine:"			1260",
			toLine:"			1260",
			content:"
			     */			
",
,
			fromLine:"			1264",
			toLine:"			1264",
			content:"
						
",
,
			fromLine:"			1266",
			toLine:"			1266",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, requestHeader);			
",
,
			fromLine:"			1280",
			toLine:"			1280",
			content:"
						
",
,
			fromLine:"			1282",
			toLine:"			1282",
			content:"
			        final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1284",
			toLine:"			1284",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_NEXT_BROKER_ID, requestHeader);			
",
,
			fromLine:"			1292",
			toLine:"			1292",
			content:"
						
",
,
			fromLine:"			1294",
			toLine:"			1294",
			content:"
			        final Long brokerId, final String registerCheckCode, final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1296",
			toLine:"			1296",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_APPLY_BROKER_ID, requestHeader);			
",
,
			fromLine:"			1304",
			toLine:"			1304",
			content:"
						
",
,
			fromLine:"			1307",
			toLine:"			1307",
			content:"
			        final String controllerAddress) throws Exception {			
",
,
			fromLine:"			1309",
			toLine:"			1309",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_REGISTER_BROKER, requestHeader);			
",
,
			fromLine:"			1326",
			toLine:"			1326",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_REPLICA_INFO, requestHeader);			
",
,
			fromLine:"			1342",
			toLine:"			1342",
			content:"
			     */			
",
,
			fromLine:"			1354",
			toLine:"			1354",
			content:"
			        final int electionPriority) {			
",
,
			fromLine:"			1359",
			toLine:"			1364",
			content:"
			        final BrokerHeartbeatRequestHeader requestHeader = new BrokerHeartbeatRequestHeader();
			        requestHeader.setClusterName(clusterName);
			        requestHeader.setBrokerAddr(brokerAddr);
			        requestHeader.setBrokerName(brokerName);
			        requestHeader.setEpoch(epoch);
			        requestHeader.setMaxOffset(maxOffset);			
",
,
			fromLine:"			1367",
			toLine:"			1368",
			content:"
			        requestHeader.setElectionPriority(electionPriority);
			        requestHeader.setBrokerId(brokerId);			
",
,
			fromLine:"			1374",
			toLine:"			1374",
			content:"
			                try {			
",
,
			fromLine:"			1376",
			toLine:"			1376",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			1382",
			toLine:"			1382",
			content:"
						
",
,
			fromLine:"			1386",
			toLine:"			1391",
			content:"
			        PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);
			        requestHeader.setQueueOffset(offset);
			        requestHeader.setMaxMsgNums(maxNums);			
",
,
			fromLine:"			1398",
			toLine:"			1398",
			content:"
			        requestHeader.setExpressionType(ExpressionType.TAG);			
",
,
			fromLine:"			1402",
			toLine:"			1402",
			content:"
			        CompletableFuture<PullResult> pullResultFuture = new CompletableFuture<>();			
",
,
			fromLine:"			1411",
			toLine:"			1412",
			content:"
			                try {
			                    PullResultExt pullResultExt = processPullResponse(response, brokerAddr);			
",
,
			fromLine:"			1461",
			toLine:"			1461",
			content:"
			            ByteBuffer byteBuffer = ByteBuffer.wrap(pullResult.getMessageBinary());			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/controller/ReplicasManager.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.broker.controller;
			
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.EpochEntry;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
			import org.apache.rocketmq.store.ha.autoswitch.BrokerMetadata;
			import org.apache.rocketmq.store.ha.autoswitch.TempBrokerMetadata;
			
			import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_BROKER_METADATA_NOT_EXIST;
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    private final ExecutorService scanExecutor;			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    private final AutoSwitchHAService haService;			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    private final String brokerAddress;			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			101",
			content:"
			
			    private Set<Long> syncStateSet;
			    private int syncStateSetEpoch = 0;
			    private String masterAddress = "";			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			    public ReplicasManager(final BrokerController brokerController) {
			        this.brokerController = brokerController;			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        this.executorService = ThreadUtils.newThreadPoolExecutor(3, new ThreadFactoryImpl("ReplicasManager_ExecutorService_", brokerController.getBrokerIdentity()));			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        this.haService = (AutoSwitchHAService) brokerController.getMessageStore().getHaService();			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        this.availableControllerAddresses = new ConcurrentHashMap<>();			
",
,
			fromLine:"			117",
			toLine:"			118",
			content:"
			        this.brokerAddress = brokerController.getBrokerAddr();
			        this.brokerMetadata = new BrokerMetadata(this.brokerController.getMessageStoreConfig().getStorePathBrokerIdentity());			
",
,
			fromLine:"			199",
			toLine:"			200",
			content:"
			            this.sendHeartbeatToController();
			            if (this.masterBrokerId != null || brokerElect()) {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			        final Integer syncStateSetEpoch, final Set<Long> syncStateSet) throws Exception {			
",
,
			fromLine:"			238",
			toLine:"			241",
			content:"
			        synchronized (this) {
			            if (newMasterEpoch > this.masterEpoch) {
			                LOGGER.info("Begin to change to master, brokerName:{}, replicas:{}, new Epoch:{}", this.brokerConfig.getBrokerName(), this.brokerAddress, newMasterEpoch);
			                this.masterEpoch = newMasterEpoch;			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			                    this.haService.changeToMasterWhenLastRoleIsMaster(newMasterEpoch);			
",
,
			fromLine:"			263",
			toLine:"			265",
			content:"
			
			                this.brokerController.getBrokerConfig().setBrokerId(MixAll.MASTER_ID);
			                this.brokerController.getMessageStoreConfig().setBrokerRole(BrokerRole.SYNC_MASTER);			
",
,
			fromLine:"			268",
			toLine:"			269",
			content:"
			                // Change record
			                this.masterAddress = this.brokerAddress;			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        synchronized (this) {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			                LOGGER.info("Begin to change to slave, brokerName={}, brokerId={}, newMasterBrokerId={}, newMasterAddress={}, newMasterEpoch={}",			
",
,
			fromLine:"			286",
			toLine:"			287",
			content:"
			
			                this.masterEpoch = newMasterEpoch;			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			                    this.haService.changeToSlaveWhenMasterNotChange(newMasterAddress, newMasterEpoch);			
",
,
			fromLine:"			299",
			toLine:"			300",
			content:"
			                // Change config(compatibility problem)
			                this.brokerController.getMessageStoreConfig().setBrokerRole(BrokerRole.SLAVE);			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			                // The brokerId in brokerConfig just means its role(master[0] or slave[>=1])			
",
,
			fromLine:"			305",
			toLine:"			306",
			content:"
			                // Change record
			                this.masterAddress = newMasterAddress;			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
						
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			            try {			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            } catch (final Throwable e) {			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			            LOGGER.info("Change broker [id:{}][address:{}] to {}, newMasterBrokerId:{}, newMasterAddress:{}, newMasterEpoch:{}, syncStateSetEpoch:{}",			
",
,
			fromLine:"			338",
			toLine:"			341",
			content:"
			        synchronized (this) {
			            if (newSyncStateSetEpoch > this.syncStateSetEpoch) {
			                LOGGER.info("SyncStateSet changed from {} to {}", this.syncStateSet, newSyncStateSet);
			                this.syncStateSetEpoch = newSyncStateSetEpoch;			
",
,
			fromLine:"			352",
			toLine:"			353",
			content:"
			            }
			            this.brokerController.getSlaveSynchronize().setMasterAddr(this.masterAddress);			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			                    if (System.currentTimeMillis() - lastSyncTimeMs > 10 * 1000) {			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			                    //timer checkpoint, latency-sensitive, so sync it more frequently			
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
			            }			
",
,
			fromLine:"			377",
			toLine:"			378",
			content:"
			        try {
			            Pair<ElectMasterResponseHeader, Set<Long>> tryElectResponsePair = this.brokerOuterAPI.brokerElect(this.controllerLeaderAddress, this.brokerConfig.getBrokerClusterName(),			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			            if (StringUtils.isNotEmpty(controllerAddress)) {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			                    controllerAddress,			
",
,
			fromLine:"			408",
			toLine:"			408",
			content:"
			                    this.brokerAddress,			
",
,
			fromLine:"			410",
			toLine:"			415",
			content:"
			                    this.brokerControllerId,
			                    this.brokerConfig.getSendHeartbeatTimeoutMillis(),
			                    this.brokerConfig.isInBrokerContainer(), this.getLastEpoch(),
			                    this.brokerController.getMessageStore().getMaxPhyOffset(),
			                    this.brokerController.getMessageStore().getConfirmOffset(),
			                    this.brokerConfig.getControllerHeartBeatTimeoutMills(),			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			                this.registerState = RegisterState.REGISTERED;			
",
,
			fromLine:"			487",
			toLine:"			487",
			content:"
			        try {			
",
,
			fromLine:"			506",
			toLine:"			506",
			content:"
			        try {			
",
,
			fromLine:"			522",
			toLine:"			522",
			content:"
			        try {			
",
,
			fromLine:"			540",
			toLine:"			540",
			content:"
			        try {			
",
,
			fromLine:"			560",
			toLine:"			560",
			content:"
			        try {			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			        if (this.registerState == RegisterState.CREATE_TEMP_METADATA_FILE_DONE) {			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
			                LOGGER.error("The clusterName: {} in broker temp metadata is different from the clusterName: {} in broker config",			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			            }			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			                LOGGER.error("The brokerName: {} in broker temp metadata is different from the brokerName: {} in broker config",			
",
,
			fromLine:"			623",
			toLine:"			623",
			content:"
			        if (this.registerState == RegisterState.CREATE_METADATA_FILE_DONE) {			
",
,
			fromLine:"			625",
			toLine:"			625",
			content:"
			                LOGGER.error("The clusterName: {} in broker metadata is different from the clusterName: {} in broker config",			
",
,
			fromLine:"			628",
			toLine:"			628",
			content:"
			            }			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			                LOGGER.error("The brokerName: {} in broker metadata is different from the brokerName: {} in broker config",			
",
,
			fromLine:"			643",
			toLine:"			643",
			content:"
			            try {			
",
,
			fromLine:"			651",
			toLine:"			651",
			content:"
			                    // Check if master changed			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			                        }			
",
,
			fromLine:"			672",
			toLine:"			672",
			content:"
			            } catch (final MQBrokerException exception) {			
",
,
			fromLine:"			682",
			toLine:"			682",
			content:"
			            } catch (final Exception e) {			
",
,
			fromLine:"			684",
			toLine:"			684",
			content:"
			            }			
",
,
			fromLine:"			696",
			toLine:"			696",
			content:"
			            if (flag) {			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
			            try {			
",
,
			fromLine:"			737",
			toLine:"			737",
			content:"
			        this.checkSyncStateSetTaskFuture = this.scheduledService.scheduleAtFixedRate(this::checkSyncStateSetAndDoReport, 3 * 1000,			
",
,
			fromLine:"			745",
			toLine:"			745",
			content:"
			            synchronized (this) {			
",
,
			fromLine:"			747",
			toLine:"			747",
			content:"
			                    // Check if syncStateSet changed			
",
,
			fromLine:"			760",
			toLine:"			760",
			content:"
			        try {			
",
,
			fromLine:"			766",
			toLine:"			766",
			content:"
			            LOGGER.error("Error happen when change SyncStateSet, broker:{}, masterAddress:{}, masterEpoch:{}, oldSyncStateSet:{}, newSyncStateSet:{}, syncStateSetEpoch:{}",			
",
,
			fromLine:"			791",
			toLine:"			791",
			content:"
			            scanExecutor.submit(() -> {			
",
,
			fromLine:"			804",
			toLine:"			805",
			content:"
			    private void updateControllerAddr() {
			        if (brokerConfig.isFetchControllerAddrByDnsLookup()) {			
",
,
			fromLine:"			810",
			toLine:"			810",
			content:"
			        } else {			
",
,
			fromLine:"			822",
			toLine:"			822",
			content:"
			    public BrokerRole getBrokerRole() {			
",
,
			fromLine:"			830",
			toLine:"			830",
			content:"
			    public SyncStateSet getSyncStateSet() {			
",
,
			fromLine:"			838",
			toLine:"			838",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			842",
			toLine:"			842",
			content:"
			    public int getMasterEpoch() {			
",
,
			fromLine:"			878",
			toLine:"			879",
			content:"
			    public void setFenced(boolean fenced) {
			        this.brokerController.setIsolated(fenced);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/BrokerOuterAPITest.java:
		[
			fromLine:"			17",
			toLine:"			73",
			content:"
			
			package org.apache.rocketmq.broker;
			
			import com.google.common.base.Predicate;
			import com.google.common.collect.Iterables;
			import com.google.common.collect.Lists;
			import io.netty.channel.ChannelHandlerContext;
			import java.lang.reflect.Field;
			import java.lang.reflect.Method;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Assert;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.ArgumentMatchers;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.argThat;
			import static org.mockito.ArgumentMatchers.isNull;
			import static org.mockito.AdditionalMatchers.or;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			81",
			toLine:"			84",
			content:"
			    private MessageStore messageStore;
			    private String clusterName = "clusterName";
			    private String brokerName = "brokerName";
			    private String brokerAddr = "brokerAddr";			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			        when(nettyRemotingClient.getNameServerAddressList()).thenReturn(Lists.asList(nameserver1, nameserver2, new String[] {nameserver3}));
			        when(nettyRemotingClient.invokeSync(anyString(), any(RemotingCommand.class), anyLong())).thenReturn(response);			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        });			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        when(nettyRemotingClient.getAvailableNameSrvList()).thenReturn(Lists.asList(nameserver1, nameserver2, new String[] {nameserver3}));			
",
,
			fromLine:"			173",
			toLine:"			175",
			content:"
			        });
			        List<RegisterBrokerResult> registerBrokerResultList = brokerOuterAPI.registerBrokerAll(clusterName, brokerAddr,
			            brokerName,			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        final ArgumentCaptor<Long> timeoutMillisCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			203",
			toLine:"			204",
			content:"
			            timeoutMillisCaptor.capture())).thenReturn(response);
			        when(nettyRemotingClient.invokeSync(ArgumentMatchers.eq(nameserver3), any(RemotingCommand.class), anyLong())).thenThrow(RemotingTimeoutException.class);			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
						
",
,

		],
		container/src/test/java/org/apache/rocketmq/container/BrokerContainerTest.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.container;
			
			import java.io.File;
			import java.io.IOException;
			import java.lang.reflect.Field;
			import java.nio.file.Files;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.Set;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.ArgumentMatchers;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.entry;
			import static org.mockito.Mockito.anyBoolean;
			import static org.mockito.Mockito.anyInt;
			import static org.mockito.Mockito.anyLong;
			import static org.mockito.Mockito.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			
			public class BrokerContainerTest {
			    private static final List<File> TMP_FILE_LIST = new ArrayList<>();
			    private static final Random RANDOM = new Random();			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        ArgumentCaptor<BrokerIdentity> brokerIdentityCaptor = ArgumentCaptor.forClass(BrokerIdentity.class);			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			            file = Files.createTempDirectory(prefix).toFile();			
",
,
			fromLine:"			338",
			toLine:"			340",
			content:"
			    public static int generatePort(int base, int range) {
			        int result = base + RANDOM.nextInt(range);
			        while (PORTS_IN_USE.contains(result) || PORTS_IN_USE.contains(result - 2)) {			
",
,
			fromLine:"			342",
			toLine:"			343",
			content:"
			        }
			        PORTS_IN_USE.add(result);			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			    public void destroy() {			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			        ArgumentCaptor<BrokerIdentity> brokerIdentityCaptor = ArgumentCaptor.forClass(BrokerIdentity.class);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/MQClientAPIImpl.java:
		[
			fromLine:"			16",
			toLine:"			246",
			content:"
			 */
			package org.apache.rocketmq.client.impl;
			
			import com.alibaba.fastjson.JSON;
			import java.io.UnsupportedEncodingException;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.BitSet;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.commons.lang3.ArrayUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.OffsetNotFoundException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.rpchook.NamespaceRpcHook;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.AttributeParser;
			import org.apache.rocketmq.common.constant.FIleReadaheadMode;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueAssignment;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.common.namesrv.DefaultTopAddressing;
			import org.apache.rocketmq.common.namesrv.NameServerUpdateCallback;
			import org.apache.rocketmq.common.namesrv.TopAddressing;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.common.HeartbeatV2Result;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.BatchAck;
			import org.apache.rocketmq.remoting.protocol.body.BatchAckMessageRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.CheckClientRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.ClusterAclVersionInfo;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
			import org.apache.rocketmq.remoting.protocol.body.GetConsumerStatusBody;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeTimeSpanBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryCorrectionOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.QuerySubscriptionResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.SetMessageRequestModeRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.AddBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.CloneGroupOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateAccessConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteAccessConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteSubscriptionGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.GetAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetAllProducerInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerAclConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsInBrokerHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerStatusRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetProducerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetSubscriptionGroupConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicStatsInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicsByClusterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListAclsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ListUsersRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeQueueRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeTimeSpanRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryCorrectionOffsetHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QuerySubscriptionByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicConsumeByWhoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicsByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.RemoveBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetMasterFlushOffsetHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResumeCheckHalfMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateAclRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateGroupForbiddenRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateUserRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewBrokerStatsDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.AddWritePermOfBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.AddWritePermOfBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteTopicFromNamesrvRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVListByNamespaceRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.PutKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.WipeWritePermOfBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.WipeWritePermOfBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupForbidden;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
			import org.apache.rocketmq.remoting.rpchook.StreamTypeRPCHook;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
						
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
			        this.remotingClient.registerRPCHook(new DynamicalExtFieldRPCHook());			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
						
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
						
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
						
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
						
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
						
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
						
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
						
",
,
			fromLine:"			355",
			toLine:"			357",
			content:"
			        QueryAssignmentRequestBody requestBody = new QueryAssignmentRequestBody();
			        requestBody.setTopic(topic);
			        requestBody.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			        requestBody.setMessageModel(messageModel);			
",
,
			fromLine:"			364",
			toLine:"			365",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
						
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
						
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			406",
			toLine:"			414",
			content:"
			        CreateTopicRequestHeader requestHeader = new CreateTopicRequestHeader();
			        requestHeader.setTopic(topicConfig.getTopicName());
			        requestHeader.setDefaultTopic(defaultTopic);
			        requestHeader.setReadQueueNums(topicConfig.getReadQueueNums());
			        requestHeader.setWriteQueueNums(topicConfig.getWriteQueueNums());
			        requestHeader.setPerm(topicConfig.getPerm());
			        requestHeader.setTopicFilterType(topicConfig.getTopicFilterType().name());
			        requestHeader.setTopicSysFlag(topicConfig.getTopicSysFlag());
			        requestHeader.setOrder(topicConfig.isOrder());			
",
,
			fromLine:"			418",
			toLine:"			419",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
						
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
						
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
						
",
,
			fromLine:"			486",
			toLine:"			487",
			content:"
			        UpdateGlobalWhiteAddrsConfigRequestHeader requestHeader = new UpdateGlobalWhiteAddrsConfigRequestHeader();
			        requestHeader.setGlobalWhiteAddrs(globalWhiteAddrs);			
",
,
			fromLine:"			491",
			toLine:"			491",
			content:"
						
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
						
",
,
			fromLine:"			538",
			toLine:"			538",
			content:"
						
",
,
			fromLine:"			548",
			toLine:"			548",
			content:"
			    ) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			551",
			toLine:"			551",
			content:"
						
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			        RemotingCommand request = null;			
",
,
			fromLine:"			571",
			toLine:"			571",
			content:"
			            if (sendSmartMsg) {			
",
,
			fromLine:"			574",
			toLine:"			574",
			content:"
			            } else {			
",
,
			fromLine:"			577",
			toLine:"			579",
			content:"
			        } else {
			            if (sendSmartMsg || msg instanceof MessageBatch) {
			                SendMessageRequestHeaderV2 requestHeaderV2 = SendMessageRequestHeaderV2.createSendMessageRequestHeaderV2(requestHeader);			
",
,
			fromLine:"			581",
			toLine:"			581",
			content:"
			            } else {			
",
,
			fromLine:"			584",
			toLine:"			584",
			content:"
			        }			
",
,
			fromLine:"			586",
			toLine:"			586",
			content:"
						
",
,
			fromLine:"			588",
			toLine:"			588",
			content:"
			            case ONEWAY:			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			                long costTimeAsync = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			596",
			toLine:"			597",
			content:"
			                }
			                this.sendMessageAsync(addr, brokerName, msg, timeoutMillis - costTimeAsync, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			601",
			toLine:"			601",
			content:"
			                long costTimeSync = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			604",
			toLine:"			604",
			content:"
			                }			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
						
",
,
			fromLine:"			620",
			toLine:"			620",
			content:"
			    ) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			622",
			toLine:"			622",
			content:"
			        assert response != null;			
",
,
			fromLine:"			633",
			toLine:"			633",
			content:"
						
",
,
			fromLine:"			649",
			toLine:"			649",
			content:"
			        try {			
",
,
			fromLine:"			658",
			toLine:"			658",
			content:"
			                    long cost = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			660",
			toLine:"			663",
			content:"
			                        try {
			                            SendResult sendResult = MQClientAPIImpl.this.processSendResponse(brokerName, msg, response, addr);
			                            if (context != null && sendResult != null) {
			                                context.setSendResult(sendResult);			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
						
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
			                    try {			
",
,
			fromLine:"			675",
			toLine:"			677",
			content:"
			                        assert sendResult != null;
			                        if (context != null) {
			                            context.setSendResult(sendResult);			
",
,
			fromLine:"			681",
			toLine:"			681",
			content:"
			                        try {			
",
,
			fromLine:"			685",
			toLine:"			685",
			content:"
						
",
,
			fromLine:"			687",
			toLine:"			689",
			content:"
			                    } catch (Exception e) {
			                        producer.updateFaultItem(brokerName, System.currentTimeMillis() - beginStartTime, true, true);
			                        onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			695",
			toLine:"			695",
			content:"
			                public void operationFail(Throwable throwable) {			
",
,
			fromLine:"			699",
			toLine:"			700",
			content:"
			                        MQClientException ex = new MQClientException("send request failed", throwable);
			                        onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			703",
			toLine:"			704",
			content:"
			                        MQClientException ex = new MQClientException("wait response timeout, cost=" + cost, throwable);
			                        onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			708",
			toLine:"			709",
			content:"
			                        boolean needRetry = !(throwable instanceof RemotingTooMuchRequestException);
			                        onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			715",
			toLine:"			717",
			content:"
			            long cost = System.currentTimeMillis() - beginStartTime;
			            producer.updateFaultItem(brokerName, cost, true, false);
			            onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			721",
			toLine:"			721",
			content:"
						
",
,
			fromLine:"			737",
			toLine:"			740",
			content:"
			        if (needRetry && tmp <= timesTotal) {
			            String retryBrokerName = brokerName;//by default, it will send to the same broker
			            if (topicPublishInfo != null) { //select one message queue accordingly, in order to determine which broker to send
			                MessageQueue mqChosen = producer.selectOneMessageQueue(topicPublishInfo, brokerName, false);			
",
,
			fromLine:"			742",
			toLine:"			743",
			content:"
			            }
			            String addr = instance.findBrokerAddressInPublish(retryBrokerName);			
",
,
			fromLine:"			745",
			toLine:"			747",
			content:"
			                retryBrokerName, e);
			            request.setOpaque(RemotingCommand.createNewRequestId());
			            sendMessageAsync(addr, retryBrokerName, msg, timeoutMillis, request, sendCallback, topicPublishInfo, instance,			
",
,
			fromLine:"			750",
			toLine:"			752",
			content:"
			
			            if (context != null) {
			                context.setException(e);			
",
,
			fromLine:"			756",
			toLine:"			756",
			content:"
			            try {			
",
,
			fromLine:"			762",
			toLine:"			762",
			content:"
						
",
,
			fromLine:"			787",
			toLine:"			787",
			content:"
			            default: {			
",
,
			fromLine:"			795",
			toLine:"			795",
			content:"
			        //If namespace not null , reset Topic without namespace.			
",
,
			fromLine:"			800",
			toLine:"			800",
			content:"
						
",
,
			fromLine:"			802",
			toLine:"			803",
			content:"
			
			        String uniqMsgId = MessageClientIDSetter.getUniqID(msg);			
",
,
			fromLine:"			806",
			toLine:"			806",
			content:"
			            StringBuilder sb = new StringBuilder();			
",
,
			fromLine:"			825",
			toLine:"			825",
			content:"
						
",
,
			fromLine:"			839",
			toLine:"			839",
			content:"
						
",
,
			fromLine:"			844",
			toLine:"			844",
			content:"
			            case ASYNC:			
",
,
			fromLine:"			847",
			toLine:"			847",
			content:"
			            case SYNC:			
",
,
			fromLine:"			856",
			toLine:"			856",
			content:"
						
",
,
			fromLine:"			861",
			toLine:"			861",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.POP_MESSAGE, requestHeader);			
",
,
			fromLine:"			870",
			toLine:"			870",
			content:"
			                try {			
",
,
			fromLine:"			883",
			toLine:"			883",
			content:"
						
",
,
			fromLine:"			889",
			toLine:"			889",
			content:"
			    ) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			892",
			toLine:"			892",
			content:"
						
",
,
			fromLine:"			902",
			toLine:"			902",
			content:"
			        Map<String, BatchAck> batchAckMap = new HashMap<>();			
",
,
			fromLine:"			913",
			toLine:"			914",
			content:"
			                BatchAck newBatchAck = new BatchAck();
			                newBatchAck.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			930",
			toLine:"			930",
			content:"
			        requestBody.setAcks(new ArrayList<>(batchAckMap.values()));			
",
,
			fromLine:"			933",
			toLine:"			933",
			content:"
						
",
,
			fromLine:"			939",
			toLine:"			939",
			content:"
			    ) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			942",
			toLine:"			942",
			content:"
						
",
,
			fromLine:"			950",
			toLine:"			951",
			content:"
			        RemotingCommand request;
			        if (requestHeader != null) {			
",
,
			fromLine:"			954",
			toLine:"			955",
			content:"
			            request = RemotingCommand.createRequestCommand(RequestCode.BATCH_ACK_MESSAGE, null);
			            if (requestBody != null) {			
",
,
			fromLine:"			958",
			toLine:"			958",
			content:"
			        }			
",
,
			fromLine:"			972",
			toLine:"			972",
			content:"
			                }			
",
,
			fromLine:"			977",
			toLine:"			977",
			content:"
			            public void operationFail(Throwable throwable) {			
",
,
			fromLine:"			982",
			toLine:"			982",
			content:"
						
",
,
			fromLine:"			990",
			toLine:"			990",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CHANGE_MESSAGE_INVISIBLETIME, requestHeader);			
",
,
			fromLine:"			1005",
			toLine:"			1006",
			content:"
			                        ackResult.setExtraInfo(ExtraInfoUtil
			                            .buildExtraInfo(requestHeader.getOffset(), responseHeader.getPopTime(), responseHeader.getInvisibleTime(),			
",
,
			fromLine:"			1024",
			toLine:"			1024",
			content:"
						
",
,
			fromLine:"			1030",
			toLine:"			1030",
			content:"
			    ) throws RemotingException, InterruptedException {			
",
,
			fromLine:"			1039",
			toLine:"			1040",
			content:"
			                try {
			                    PullResult pullResult = MQClientAPIImpl.this.processPullResponse(response, addr);			
",
,
			fromLine:"			1042",
			toLine:"			1042",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			1048",
			toLine:"			1048",
			content:"
			            public void operationFail(Throwable throwable) {			
",
,
			fromLine:"			1053",
			toLine:"			1053",
			content:"
						
",
,
			fromLine:"			1058",
			toLine:"			1058",
			content:"
			    ) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1060",
			toLine:"			1060",
			content:"
			        assert response != null;			
",
,
			fromLine:"			1100",
			toLine:"			1100",
			content:"
			                ByteBuffer byteBuffer = ByteBuffer.wrap(response.getBody());			
",
,
			fromLine:"			1146",
			toLine:"			1146",
			content:"
			                    if (!map.containsKey(messageExt.getTopic() + messageExt.getQueueId())) {			
",
,
			fromLine:"			1167",
			toLine:"			1167",
			content:"
			                            queueIdKey = ExtraInfoUtil.getStartOffsetInfoMapKey(topic, MixAll.LMQ_QUEUE_ID);			
",
,
			fromLine:"			1175",
			toLine:"			1175",
			content:"
			                            messageExt.getProperties().put(MessageConst.PROPERTY_POP_CK,			
",
,
			fromLine:"			1180",
			toLine:"			1180",
			content:"
			                            queueIdKey = ExtraInfoUtil.getStartOffsetInfoMapKey(messageExt.getTopic(), messageExt.getQueueId());			
",
,
			fromLine:"			1187",
			toLine:"			1187",
			content:"
			                            messageExt.getProperties().put(MessageConst.PROPERTY_POP_CK,			
",
,
			fromLine:"			1247",
			toLine:"			1247",
			content:"
						
",
,
			fromLine:"			1250",
			toLine:"			1250",
			content:"
			        ViewMessageRequestHeader requestHeader = new ViewMessageRequestHeader();			
",
,
			fromLine:"			1254",
			toLine:"			1255",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1271",
			toLine:"			1271",
			content:"
						
",
,
			fromLine:"			1275",
			toLine:"			1275",
			content:"
			    @Deprecated			
",
,
			fromLine:"			1279",
			toLine:"			1281",
			content:"
			        SearchOffsetRequestHeader requestHeader = new SearchOffsetRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);			
",
,
			fromLine:"			1284",
			toLine:"			1285",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1297",
			toLine:"			1297",
			content:"
						
",
,
			fromLine:"			1300",
			toLine:"			1300",
			content:"
						
",
,
			fromLine:"			1304",
			toLine:"			1304",
			content:"
			        // default return lower boundary offset when there are more than one offsets.			
",
,
			fromLine:"			1307",
			toLine:"			1307",
			content:"
						
",
,
			fromLine:"			1311",
			toLine:"			1314",
			content:"
			        SearchOffsetRequestHeader requestHeader = new SearchOffsetRequestHeader();
			        requestHeader.setTopic(messageQueue.getTopic());
			        requestHeader.setQueueId(messageQueue.getQueueId());
			        requestHeader.setBrokerName(messageQueue.getBrokerName());			
",
,
			fromLine:"			1317",
			toLine:"			1318",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.SEARCH_OFFSET_BY_TIMESTAMP, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1330",
			toLine:"			1330",
			content:"
						
",
,
			fromLine:"			1333",
			toLine:"			1333",
			content:"
						
",
,
			fromLine:"			1336",
			toLine:"			1338",
			content:"
			        GetMaxOffsetRequestHeader requestHeader = new GetMaxOffsetRequestHeader();
			        requestHeader.setTopic(messageQueue.getTopic());
			        requestHeader.setQueueId(messageQueue.getQueueId());			
",
,
			fromLine:"			1341",
			toLine:"			1342",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1355",
			toLine:"			1355",
			content:"
						
",
,
			fromLine:"			1358",
			toLine:"			1358",
			content:"
						
",
,
			fromLine:"			1364",
			toLine:"			1364",
			content:"
			        GetConsumerListByGroupRequestHeader requestHeader = new GetConsumerListByGroupRequestHeader();			
",
,
			fromLine:"			1367",
			toLine:"			1368",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1382",
			toLine:"			1382",
			content:"
						
",
,
			fromLine:"			1385",
			toLine:"			1385",
			content:"
						
",
,
			fromLine:"			1388",
			toLine:"			1390",
			content:"
			        GetMinOffsetRequestHeader requestHeader = new GetMinOffsetRequestHeader();
			        requestHeader.setTopic(messageQueue.getTopic());
			        requestHeader.setQueueId(messageQueue.getQueueId());			
",
,
			fromLine:"			1393",
			toLine:"			1394",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1407",
			toLine:"			1407",
			content:"
						
",
,
			fromLine:"			1418",
			toLine:"			1418",
			content:"
						
",
,
			fromLine:"			1442",
			toLine:"			1442",
			content:"
						
",
,
			fromLine:"			1461",
			toLine:"			1461",
			content:"
						
",
,
			fromLine:"			1466",
			toLine:"			1466",
			content:"
			    ) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1468",
			toLine:"			1469",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1479",
			toLine:"			1479",
			content:"
						
",
,
			fromLine:"			1482",
			toLine:"			1482",
			content:"
						
",
,
			fromLine:"			1488",
			toLine:"			1488",
			content:"
			        InterruptedException {			
",
,
			fromLine:"			1490",
			toLine:"			1490",
			content:"
						
",
,
			fromLine:"			1493",
			toLine:"			1493",
			content:"
						
",
,
			fromLine:"			1500",
			toLine:"			1501",
			content:"
			        request.setLanguage(clientConfig.getLanguage());
			        request.setBody(heartbeatData.encode());			
",
,
			fromLine:"			1511",
			toLine:"			1511",
			content:"
						
",
,
			fromLine:"			1514",
			toLine:"			1514",
			content:"
						
",
,
			fromLine:"			1521",
			toLine:"			1522",
			content:"
			        request.setLanguage(clientConfig.getLanguage());
			        request.setBody(heartbeatData.encode());			
",
,
			fromLine:"			1538",
			toLine:"			1538",
			content:"
						
",
,
			fromLine:"			1546",
			toLine:"			1548",
			content:"
			        final UnregisterClientRequestHeader requestHeader = new UnregisterClientRequestHeader();
			        requestHeader.setClientID(clientID);
			        requestHeader.setProducerGroup(producerGroup);			
",
,
			fromLine:"			1551",
			toLine:"			1551",
			content:"
						
",
,
			fromLine:"			1561",
			toLine:"			1561",
			content:"
						
",
,
			fromLine:"			1573",
			toLine:"			1573",
			content:"
			        request.setRemark(remark);			
",
,
			fromLine:"			1585",
			toLine:"			1585",
			content:"
			        request.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, isUnqiueKey.toString());			
",
,
			fromLine:"			1594",
			toLine:"			1594",
			content:"
			        request.setBody(heartbeat.encode());			
",
,
			fromLine:"			1598",
			toLine:"			1598",
			content:"
						
",
,
			fromLine:"			1610",
			toLine:"			1610",
			content:"
						
",
,
			fromLine:"			1613",
			toLine:"			1613",
			content:"
			        requestHeader.setOffset(msg.getCommitLogOffset());			
",
,
			fromLine:"			1616",
			toLine:"			1616",
			content:"
			        requestHeader.setMaxReconsumeTimes(maxConsumeRetryTimes);			
",
,
			fromLine:"			1618",
			toLine:"			1619",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1629",
			toLine:"			1629",
			content:"
						
",
,
			fromLine:"			1639",
			toLine:"			1639",
			content:"
			        request.setBody(requestBody.encode());			
",
,
			fromLine:"			1665",
			toLine:"			1665",
			content:"
			        if (oneway) {			
",
,
			fromLine:"			1668",
			toLine:"			1668",
			content:"
			            RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			1681",
			toLine:"			1681",
			content:"
						
",
,
			fromLine:"			1685",
			toLine:"			1685",
			content:"
			        GetTopicStatsInfoRequestHeader requestHeader = new GetTopicStatsInfoRequestHeader();			
",
,
			fromLine:"			1689",
			toLine:"			1690",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1700",
			toLine:"			1700",
			content:"
						
",
,
			fromLine:"			1703",
			toLine:"			1703",
			content:"
						
",
,
			fromLine:"			1706",
			toLine:"			1706",
			content:"
			        MQBrokerException {			
",
,
			fromLine:"			1709",
			toLine:"			1709",
			content:"
						
",
,
			fromLine:"			1714",
			toLine:"			1715",
			content:"
			        GetConsumeStatsRequestHeader requestHeader = new GetConsumeStatsRequestHeader();
			        requestHeader.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			1719",
			toLine:"			1720",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1730",
			toLine:"			1730",
			content:"
						
",
,
			fromLine:"			1733",
			toLine:"			1733",
			content:"
						
",
,
			fromLine:"			1738",
			toLine:"			1738",
			content:"
			        GetProducerConnectionListRequestHeader requestHeader = new GetProducerConnectionListRequestHeader();			
",
,
			fromLine:"			1742",
			toLine:"			1743",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1752",
			toLine:"			1752",
			content:"
						
",
,
			fromLine:"			1762",
			toLine:"			1762",
			content:"
						
",
,
			fromLine:"			1775",
			toLine:"			1775",
			content:"
						
",
,
			fromLine:"			1780",
			toLine:"			1780",
			content:"
			        GetConsumerConnectionListRequestHeader requestHeader = new GetConsumerConnectionListRequestHeader();			
",
,
			fromLine:"			1784",
			toLine:"			1785",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			1794",
			toLine:"			1794",
			content:"
						
",
,
			fromLine:"			1802",
			toLine:"			1802",
			content:"
						
",
,
			fromLine:"			1821",
			toLine:"			1821",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.ADD_BROKER, requestHeader);			
",
,
			fromLine:"			1834",
			toLine:"			1834",
			content:"
						
",
,
			fromLine:"			1838",
			toLine:"			1840",
			content:"
			        RemoveBrokerRequestHeader requestHeader = new RemoveBrokerRequestHeader();
			        requestHeader.setBrokerClusterName(clusterName);
			        requestHeader.setBrokerName(brokerName);			
",
,
			fromLine:"			1843",
			toLine:"			1843",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.REMOVE_BROKER, requestHeader);			
",
,
			fromLine:"			1856",
			toLine:"			1856",
			content:"
						
",
,
			fromLine:"			1859",
			toLine:"			1859",
			content:"
			        MQBrokerException, MQClientException, UnsupportedEncodingException {			
",
,
			fromLine:"			1863",
			toLine:"			1863",
			content:"
						
",
,
			fromLine:"			1867",
			toLine:"			1867",
			content:"
			            RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			1876",
			toLine:"			1876",
			content:"
						
",
,
			fromLine:"			1885",
			toLine:"			1885",
			content:"
						
",
,
			fromLine:"			1898",
			toLine:"			1898",
			content:"
						
",
,
			fromLine:"			1901",
			toLine:"			1901",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_COLD_DATA_FLOW_CTR_CONFIG, null);			
",
,
			fromLine:"			1904",
			toLine:"			1905",
			content:"
			            request.setBody(str.getBytes(MixAll.DEFAULT_CHARSET));
			            RemotingCommand response = this.remotingClient.invokeSync(			
",
,
			fromLine:"			1917",
			toLine:"			1917",
			content:"
						
",
,
			fromLine:"			1920",
			toLine:"			1923",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.REMOVE_COLD_DATA_FLOW_CTR_CONFIG, null);
			        if (consumerGroup != null && consumerGroup.length() > 0) {
			            request.setBody(consumerGroup.getBytes(MixAll.DEFAULT_CHARSET));
			            RemotingCommand response = this.remotingClient.invokeSync(			
",
,
			fromLine:"			1938",
			toLine:"			1938",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_COLD_DATA_FLOW_CTR_INFO, null);			
",
,
			fromLine:"			1959",
			toLine:"			1959",
			content:"
			        request.setExtFields(extFields);			
",
,
			fromLine:"			1979",
			toLine:"			1979",
			content:"
						
",
,
			fromLine:"			1995",
			toLine:"			1995",
			content:"
						
",
,
			fromLine:"			2000",
			toLine:"			2000",
			content:"
			        throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			2003",
			toLine:"			2003",
			content:"
						
",
,
			fromLine:"			2006",
			toLine:"			2006",
			content:"
			        GetRouteInfoRequestHeader requestHeader = new GetRouteInfoRequestHeader();			
",
,
			fromLine:"			2009",
			toLine:"			2009",
			content:"
						
",
,
			fromLine:"			2013",
			toLine:"			2014",
			content:"
			            case ResponseCode.TOPIC_NOT_EXIST: {
			                if (allowTopicNotExist) {			
",
,
			fromLine:"			2035",
			toLine:"			2035",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_TOPIC_LIST_FROM_NAMESERVER, null);			
",
,
			fromLine:"			2058",
			toLine:"			2058",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.WIPE_WRITE_PERM_OF_BROKER, requestHeader);			
",
,
			fromLine:"			2081",
			toLine:"			2081",
			content:"
						
",
,
			fromLine:"			2095",
			toLine:"			2095",
			content:"
						
",
,
			fromLine:"			2098",
			toLine:"			2098",
			content:"
			        DeleteTopicRequestHeader requestHeader = new DeleteTopicRequestHeader();			
",
,
			fromLine:"			2100",
			toLine:"			2101",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_BROKER, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2114",
			toLine:"			2114",
			content:"
						
",
,
			fromLine:"			2117",
			toLine:"			2117",
			content:"
			        DeleteTopicFromNamesrvRequestHeader requestHeader = new DeleteTopicFromNamesrvRequestHeader();			
",
,
			fromLine:"			2119",
			toLine:"			2119",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_NAMESRV, requestHeader);			
",
,
			fromLine:"			2132",
			toLine:"			2132",
			content:"
						
",
,
			fromLine:"			2136",
			toLine:"			2137",
			content:"
			        DeleteTopicFromNamesrvRequestHeader requestHeader = new DeleteTopicFromNamesrvRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			2139",
			toLine:"			2139",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_NAMESRV, requestHeader);			
",
,
			fromLine:"			2152",
			toLine:"			2152",
			content:"
						
",
,
			fromLine:"			2156",
			toLine:"			2157",
			content:"
			        DeleteSubscriptionGroupRequestHeader requestHeader = new DeleteSubscriptionGroupRequestHeader();
			        requestHeader.setGroupName(groupName);			
",
,
			fromLine:"			2160",
			toLine:"			2160",
			content:"
						
",
,
			fromLine:"			2174",
			toLine:"			2174",
			content:"
						
",
,
			fromLine:"			2177",
			toLine:"			2178",
			content:"
			        GetKVConfigRequestHeader requestHeader = new GetKVConfigRequestHeader();
			        requestHeader.setNamespace(namespace);			
",
,
			fromLine:"			2181",
			toLine:"			2181",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_KV_CONFIG, requestHeader);			
",
,
			fromLine:"			2196",
			toLine:"			2196",
			content:"
						
",
,
			fromLine:"			2199",
			toLine:"			2201",
			content:"
			        PutKVConfigRequestHeader requestHeader = new PutKVConfigRequestHeader();
			        requestHeader.setNamespace(namespace);
			        requestHeader.setKey(key);			
",
,
			fromLine:"			2209",
			toLine:"			2209",
			content:"
			            for (String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			2226",
			toLine:"			2226",
			content:"
						
",
,
			fromLine:"			2229",
			toLine:"			2230",
			content:"
			        DeleteKVConfigRequestHeader requestHeader = new DeleteKVConfigRequestHeader();
			        requestHeader.setNamespace(namespace);			
",
,
			fromLine:"			2238",
			toLine:"			2238",
			content:"
			            for (String namesrvAddr : nameServerAddressList) {			
",
,
			fromLine:"			2260",
			toLine:"			2260",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_KVLIST_BY_NAMESPACE, requestHeader);			
",
,
			fromLine:"			2273",
			toLine:"			2273",
			content:"
						
",
,
			fromLine:"			2276",
			toLine:"			2276",
			content:"
			        throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			2279",
			toLine:"			2279",
			content:"
						
",
,
			fromLine:"			2284",
			toLine:"			2288",
			content:"
			        ResetOffsetRequestHeader requestHeader = new ResetOffsetRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setGroup(group);
			        requestHeader.setQueueId(queueId);
			        requestHeader.setTimestamp(timestamp);			
",
,
			fromLine:"			2292",
			toLine:"			2293",
			content:"
			
			        RemotingCommand response = remotingClient.invokeSync(			
",
,
			fromLine:"			2313",
			toLine:"			2313",
			content:"
						
",
,
			fromLine:"			2317",
			toLine:"			2320",
			content:"
			        ResetOffsetRequestHeader requestHeader = new ResetOffsetRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setGroup(group);
			        requestHeader.setTimestamp(timestamp);			
",
,
			fromLine:"			2325",
			toLine:"			2325",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.INVOKE_BROKER_TO_RESET_OFFSET, requestHeader);			
",
,
			fromLine:"			2328",
			toLine:"			2329",
			content:"
			        }
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2345",
			toLine:"			2345",
			content:"
						
",
,
			fromLine:"			2350",
			toLine:"			2352",
			content:"
			        GetConsumerStatusRequestHeader requestHeader = new GetConsumerStatusRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setGroup(group);			
",
,
			fromLine:"			2355",
			toLine:"			2356",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.INVOKE_BROKER_TO_GET_CONSUMER_STATUS, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2372",
			toLine:"			2372",
			content:"
						
",
,
			fromLine:"			2376",
			toLine:"			2376",
			content:"
			        QueryTopicConsumeByWhoRequestHeader requestHeader = new QueryTopicConsumeByWhoRequestHeader();			
",
,
			fromLine:"			2379",
			toLine:"			2380",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_TOPIC_CONSUME_BY_WHO, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2390",
			toLine:"			2390",
			content:"
						
",
,
			fromLine:"			2393",
			toLine:"			2393",
			content:"
						
",
,
			fromLine:"			2397",
			toLine:"			2397",
			content:"
			        QueryTopicsByConsumerRequestHeader requestHeader = new QueryTopicsByConsumerRequestHeader();			
",
,
			fromLine:"			2400",
			toLine:"			2401",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_TOPICS_BY_CONSUMER, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2414",
			toLine:"			2414",
			content:"
						
",
,
			fromLine:"			2419",
			toLine:"			2420",
			content:"
			        QuerySubscriptionByConsumerRequestHeader requestHeader = new QuerySubscriptionByConsumerRequestHeader();
			        requestHeader.setGroup(group);			
",
,
			fromLine:"			2423",
			toLine:"			2424",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_SUBSCRIPTION_BY_CONSUMER, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2438",
			toLine:"			2438",
			content:"
						
",
,
			fromLine:"			2443",
			toLine:"			2444",
			content:"
			        QueryConsumeTimeSpanRequestHeader requestHeader = new QueryConsumeTimeSpanRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			2447",
			toLine:"			2448",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_CONSUME_TIME_SPAN, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2458",
			toLine:"			2458",
			content:"
						
",
,
			fromLine:"			2466",
			toLine:"			2466",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_TOPICS_BY_CLUSTER, requestHeader);			
",
,
			fromLine:"			2486",
			toLine:"			2486",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_NS, null);			
",
,
			fromLine:"			2513",
			toLine:"			2513",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_BROKER, null);			
",
,
			fromLine:"			2535",
			toLine:"			2535",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CLEAN_EXPIRED_CONSUMEQUEUE, null);			
",
,
			fromLine:"			2551",
			toLine:"			2551",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_EXPIRED_COMMITLOG, null);			
",
,
			fromLine:"			2568",
			toLine:"			2568",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CLEAN_UNUSED_TOPIC, null);			
",
,
			fromLine:"			2581",
			toLine:"			2581",
			content:"
						
",
,
			fromLine:"			2585",
			toLine:"			2587",
			content:"
			        GetConsumerRunningInfoRequestHeader requestHeader = new GetConsumerRunningInfoRequestHeader();
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setClientId(clientId);			
",
,
			fromLine:"			2591",
			toLine:"			2592",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2609",
			toLine:"			2609",
			content:"
						
",
,
			fromLine:"			2616",
			toLine:"			2619",
			content:"
			        ConsumeMessageDirectlyResultRequestHeader requestHeader = new ConsumeMessageDirectlyResultRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setClientId(clientId);			
",
,
			fromLine:"			2623",
			toLine:"			2624",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2641",
			toLine:"			2641",
			content:"
						
",
,
			fromLine:"			2646",
			toLine:"			2647",
			content:"
			        QueryCorrectionOffsetHeader requestHeader = new QueryCorrectionOffsetHeader();
			        requestHeader.setCompareGroup(group);			
",
,
			fromLine:"			2658",
			toLine:"			2659",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_CORRECTION_OFFSET, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2678",
			toLine:"			2678",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_UNIT_TOPIC_LIST, null);			
",
,
			fromLine:"			2708",
			toLine:"			2708",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_HAS_UNIT_SUB_TOPIC_LIST, null);			
",
,
			fromLine:"			2737",
			toLine:"			2737",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST, null);			
",
,
			fromLine:"			2763",
			toLine:"			2763",
			content:"
						
",
,
			fromLine:"			2767",
			toLine:"			2770",
			content:"
			        CloneGroupOffsetRequestHeader requestHeader = new CloneGroupOffsetRequestHeader();
			        requestHeader.setSrcGroup(srcGroup);
			        requestHeader.setDestGroup(destGroup);
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			2772",
			toLine:"			2773",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CLONE_GROUP_OFFSET, requestHeader);
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			2786",
			toLine:"			2786",
			content:"
						
",
,
			fromLine:"			2790",
			toLine:"			2791",
			content:"
			        ViewBrokerStatsDataRequestHeader requestHeader = new ViewBrokerStatsDataRequestHeader();
			        requestHeader.setStatsName(statsName);			
",
,
			fromLine:"			2795",
			toLine:"			2795",
			content:"
			        RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			2816",
			toLine:"			2816",
			content:"
						
",
,
			fromLine:"			2820",
			toLine:"			2820",
			content:"
			        GetConsumeStatsInBrokerHeader requestHeader = new GetConsumeStatsInBrokerHeader();			
",
,
			fromLine:"			2824",
			toLine:"			2824",
			content:"
			        RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			2845",
			toLine:"			2845",
			content:"
			        RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			2857",
			toLine:"			2857",
			content:"
						
",
,
			fromLine:"			2861",
			toLine:"			2861",
			content:"
			        GetSubscriptionGroupConfigRequestHeader header = new GetSubscriptionGroupConfigRequestHeader();			
",
,
			fromLine:"			2864",
			toLine:"			2864",
			content:"
			        RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			2873",
			toLine:"			2873",
			content:"
			        }			
",
,
			fromLine:"			2881",
			toLine:"			2881",
			content:"
						
",
,
			fromLine:"			2913",
			toLine:"			2913",
			content:"
			        for (String nameServer : invokeNameServers) {			
",
,
			fromLine:"			2943",
			toLine:"			2943",
			content:"
			        for (String nameServer : invokeNameServers) {			
",
,
			fromLine:"			2956",
			toLine:"			2956",
			content:"
						
",
,
			fromLine:"			2963",
			toLine:"			2967",
			content:"
			        QueryConsumeQueueRequestHeader requestHeader = new QueryConsumeQueueRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);
			        requestHeader.setIndex(index);
			        requestHeader.setCount(count);			
",
,
			fromLine:"			2970",
			toLine:"			2970",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_CONSUME_QUEUE, requestHeader);			
",
,
			fromLine:"			2981",
			toLine:"			2981",
			content:"
						
",
,
			fromLine:"			2989",
			toLine:"			2990",
			content:"
			        CheckClientRequestBody requestBody = new CheckClientRequestBody();
			        requestBody.setClientId(clientId);			
",
,
			fromLine:"			2995",
			toLine:"			2995",
			content:"
						
",
,
			fromLine:"			3004",
			toLine:"			3004",
			content:"
						
",
,
			fromLine:"			3007",
			toLine:"			3008",
			content:"
			        ResumeCheckHalfMessageRequestHeader requestHeader = new ResumeCheckHalfMessageRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			3012",
			toLine:"			3013",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			3025",
			toLine:"			3025",
			content:"
						
",
,
			fromLine:"			3032",
			toLine:"			3033",
			content:"
			        SetMessageRequestModeRequestBody requestBody = new SetMessageRequestModeRequestBody();
			        requestBody.setTopic(topic);			
",
,
			fromLine:"			3035",
			toLine:"			3035",
			content:"
			        requestBody.setMode(mode);			
",
,
			fromLine:"			3038",
			toLine:"			3038",
			content:"
						
",
,
			fromLine:"			3045",
			toLine:"			3045",
			content:"
						
",
,
			fromLine:"			3049",
			toLine:"			3049",
			content:"
			        GetTopicConfigRequestHeader header = new GetTopicConfigRequestHeader();			
",
,
			fromLine:"			3053",
			toLine:"			3053",
			content:"
			        RemotingCommand response = this.remotingClient			
",
,
			fromLine:"			3070",
			toLine:"			3070",
			content:"
						
",
,
			fromLine:"			3074",
			toLine:"			3082",
			content:"
			        CreateTopicRequestHeader requestHeader = new CreateTopicRequestHeader();
			        requestHeader.setTopic(topicConfig.getTopicName());
			        requestHeader.setDefaultTopic(defaultTopic);
			        requestHeader.setReadQueueNums(topicConfig.getReadQueueNums());
			        requestHeader.setWriteQueueNums(topicConfig.getWriteQueueNums());
			        requestHeader.setPerm(topicConfig.getPerm());
			        requestHeader.setTopicFilterType(topicConfig.getTopicFilterType().name());
			        requestHeader.setTopicSysFlag(topicConfig.getTopicSysFlag());
			        requestHeader.setOrder(topicConfig.isOrder());			
",
,
			fromLine:"			3086",
			toLine:"			3087",
			content:"
			
			        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(this.clientConfig.isVipChannelEnabled(), addr),			
",
,
			fromLine:"			3114",
			toLine:"			3114",
			content:"
						
",
,
			fromLine:"			3135",
			toLine:"			3135",
			content:"
						
",
,
			fromLine:"			3151",
			toLine:"			3151",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_HA_STATUS, null);			
",
,
			fromLine:"			3168",
			toLine:"			3168",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_METADATA_INFO, null);			
",
,
			fromLine:"			3187",
			toLine:"			3187",
			content:"
			        request.setBody(body);			
",
,
			fromLine:"			3202",
			toLine:"			3202",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_EPOCH_CACHE, null);			
",
,
			fromLine:"			3227",
			toLine:"			3227",
			content:"
			        for (String controller : invokeControllerServers) {			
",
,
			fromLine:"			3253",
			toLine:"			3253",
			content:"
			        for (String controller : controllers) {			
",
,
			fromLine:"			3269",
			toLine:"			3269",
			content:"
						
",
,
			fromLine:"			3274",
			toLine:"			3274",
			content:"
			        //get controller leader address			
",
,
			fromLine:"			3278",
			toLine:"			3278",
			content:"
			        final String leaderAddress = controllerMetaData.getControllerLeaderAddress();			
",
,
			fromLine:"			3281",
			toLine:"			3281",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, electRequestHeader);			
",
,
			fromLine:"			3295",
			toLine:"			3295",
			content:"
						
",
,
			fromLine:"			3300",
			toLine:"			3300",
			content:"
			        //get controller leader address			
",
,
			fromLine:"			3305",
			toLine:"			3305",
			content:"
						
",
,
			fromLine:"			3308",
			toLine:"			3308",
			content:"
						
",
,
			fromLine:"			3320",
			toLine:"			3321",
			content:"
			
			    public void createUser(String addr, UserInfo userInfo, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3323",
			toLine:"			3324",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_CREATE_USER, requestHeader);
			        request.setBody(RemotingSerializable.encode(userInfo));			
",
,
			fromLine:"			3336",
			toLine:"			3337",
			content:"
			
			    public void updateUser(String addr, UserInfo userInfo, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3339",
			toLine:"			3340",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_UPDATE_USER, requestHeader);
			        request.setBody(RemotingSerializable.encode(userInfo));			
",
,
			fromLine:"			3352",
			toLine:"			3353",
			content:"
			
			    public void deleteUser(String addr, String username, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3355",
			toLine:"			3355",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_DELETE_USER, requestHeader);			
",
,
			fromLine:"			3367",
			toLine:"			3368",
			content:"
			
			    public UserInfo getUser(String addr, String username, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3370",
			toLine:"			3370",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_GET_USER, requestHeader);			
",
,
			fromLine:"			3385",
			toLine:"			3385",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_LIST_USER, requestHeader);			
",
,
			fromLine:"			3397",
			toLine:"			3398",
			content:"
			
			    public void createAcl(String addr, AclInfo aclInfo, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3400",
			toLine:"			3401",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_CREATE_ACL, requestHeader);
			        request.setBody(RemotingSerializable.encode(aclInfo));			
",
,
			fromLine:"			3413",
			toLine:"			3414",
			content:"
			
			    public void updateAcl(String addr, AclInfo aclInfo, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3416",
			toLine:"			3417",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_UPDATE_ACL, requestHeader);
			        request.setBody(RemotingSerializable.encode(aclInfo));			
",
,
			fromLine:"			3429",
			toLine:"			3430",
			content:"
			
			    public void deleteAcl(String addr, String subject, String resource, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3432",
			toLine:"			3432",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_DELETE_ACL, requestHeader);			
",
,
			fromLine:"			3444",
			toLine:"			3445",
			content:"
			
			    public AclInfo getAcl(String addr, String subject, long millis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			3447",
			toLine:"			3447",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_GET_ACL, requestHeader);			
",
,
			fromLine:"			3462",
			toLine:"			3462",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.AUTH_LIST_ACL, requestHeader);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtImpl.java:
		[
			fromLine:"			16",
			toLine:"			125",
			content:"
			 */
			package org.apache.rocketmq.tools.admin;
			
			import com.alibaba.fastjson.JSON;
			import java.io.UnsupportedEncodingException;
			import java.text.MessageFormat;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Properties;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.admin.MQAdminExtInner;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.common.namesrv.NamesrvUtil;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.admin.RollbackStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.ClusterAclVersionInfo;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateGroupForbiddenRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupForbidden;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.tools.admin.api.BrokerOperatorResult;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.admin.api.TrackType;
			import org.apache.rocketmq.tools.admin.common.AdminToolHandler;
			import org.apache.rocketmq.tools.admin.common.AdminToolResult;
			import org.apache.rocketmq.tools.admin.common.AdminToolsResultCodeEnum;
			import org.apache.rocketmq.tools.command.CommandUtil;
						
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			    @Override			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        long brokerId) throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			        Properties properties) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, UnsupportedEncodingException, InterruptedException, MQBrokerException, MQClientException {			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			        TopicConfig config) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			        String globalWhiteAddrs) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			    @Override			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			        String aclFileFullPath) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			        String topic) throws InterruptedException, MQBrokerException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			                                if (addr != null) {			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			        String topic) throws RemotingException, MQClientException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			445",
			toLine:"			445",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			497",
			toLine:"			497",
			content:"
			    @Override			
",
,
			fromLine:"			499",
			toLine:"			499",
			content:"
			        long timeoutMillis) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			                                if (addr != null) {			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			        }			
",
,
			fromLine:"			623",
			toLine:"			623",
			content:"
			            if (StringUtils.isNotBlank(addr)) {			
",
,
			fromLine:"			640",
			toLine:"			640",
			content:"
			        ConsumerConnection result =			
",
,
			fromLine:"			660",
			toLine:"			660",
			content:"
			            if (StringUtils.isNotBlank(addr)) {			
",
,
			fromLine:"			696",
			toLine:"			696",
			content:"
			    @Override			
",
,
			fromLine:"			702",
			toLine:"			702",
			content:"
			        String key) throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			728",
			toLine:"			728",
			content:"
			        for (String addr : addrs) {			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
			                    try {			
",
,
			fromLine:"			773",
			toLine:"			773",
			content:"
			        for (String addr : addrs) {			
",
,
			fromLine:"			780",
			toLine:"			780",
			content:"
			        String groupName) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			784",
			toLine:"			784",
			content:"
			    @Override			
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
			        boolean removeOffset) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			790",
			toLine:"			790",
			content:"
			    @Override			
",
,
			fromLine:"			792",
			toLine:"			792",
			content:"
			        String value) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			798",
			toLine:"			798",
			content:"
			        String key) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			802",
			toLine:"			802",
			content:"
			    @Override			
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			        boolean force) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			813",
			toLine:"			813",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			819",
			toLine:"			819",
			content:"
						
",
,
			fromLine:"			823",
			toLine:"			823",
			content:"
			        List<RollbackStats> rollbackStatsList = new ArrayList<>();			
",
,
			fromLine:"			829",
			toLine:"			829",
			content:"
			            OffsetWrapper offsetWrapper = entry.getValue();			
",
,
			fromLine:"			831",
			toLine:"			831",
			content:"
			                hasConsumed = true;			
",
,
			fromLine:"			837",
			toLine:"			837",
			content:"
			        if (!hasConsumed) {			
",
,
			fromLine:"			839",
			toLine:"			839",
			content:"
			            for (int i = 0; i < queueData.getReadQueueNums(); i++) {			
",
,
			fromLine:"			844",
			toLine:"			844",
			content:"
						
",
,
			fromLine:"			852",
			toLine:"			852",
			content:"
			    @Override			
",
,
			fromLine:"			854",
			toLine:"			854",
			content:"
			        boolean isForce) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			858",
			toLine:"			858",
			content:"
			    @Override			
",
,
			fromLine:"			861",
			toLine:"			861",
			content:"
			        try {			
",
,
			fromLine:"			864",
			toLine:"			864",
			content:"
			            if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			    @Override			
",
,
			fromLine:"			877",
			toLine:"			877",
			content:"
			            public AdminToolResult doExecute() throws Exception {			
",
,
			fromLine:"			896",
			toLine:"			896",
			content:"
			                                if (addr != null) {			
",
,
			fromLine:"			906",
			toLine:"			906",
			content:"
			                                    try {			
",
,
			fromLine:"			909",
			toLine:"			909",
			content:"
			                                    } catch (Exception e2) {			
",
,
			fromLine:"			917",
			toLine:"			917",
			content:"
			                                    failureList.add(addr);			
",
,
			fromLine:"			921",
			toLine:"			921",
			content:"
			                                failureList.add(addr);			
",
,
			fromLine:"			941",
			toLine:"			941",
			content:"
						
",
,
			fromLine:"			943",
			toLine:"			943",
			content:"
			        boolean isC) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			950",
			toLine:"			950",
			content:"
			                if (addr != null) {			
",
,
			fromLine:"			960",
			toLine:"			960",
			content:"
						
",
,
			fromLine:"			964",
			toLine:"			965",
			content:"
			        long resetOffset;
			        if (timestamp == -1) {			
",
,
			fromLine:"			967",
			toLine:"			967",
			content:"
			        } else {			
",
,
			fromLine:"			978",
			toLine:"			978",
			content:"
						
",
,
			fromLine:"			986",
			toLine:"			986",
			content:"
			            requestHeader.setBrokerName(queue.getBrokerName());			
",
,
			fromLine:"			992",
			toLine:"			992",
			content:"
			    @Override			
",
,
			fromLine:"			994",
			toLine:"			994",
			content:"
			        String clientAddr) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			999",
			toLine:"			999",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1010",
			toLine:"			1010",
			content:"
			        if (isCluster) {			
",
,
			fromLine:"			1014",
			toLine:"			1014",
			content:"
			            try {			
",
,
			fromLine:"			1036",
			toLine:"			1036",
			content:"
			            }			
",
,
			fromLine:"			1048",
			toLine:"			1048",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1062",
			toLine:"			1062",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1079",
			toLine:"			1079",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1107",
			toLine:"			1107",
			content:"
			                                if (addr != null) {			
",
,
			fromLine:"			1133",
			toLine:"			1133",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1158",
			toLine:"			1158",
			content:"
			                                if (addr != null) {			
",
,
			fromLine:"			1291",
			toLine:"			1291",
			content:"
			    @Override			
",
,
			fromLine:"			1293",
			toLine:"			1293",
			content:"
			        boolean jstack) throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			1297",
			toLine:"			1297",
			content:"
			    @Override			
",
,
			fromLine:"			1299",
			toLine:"			1299",
			content:"
			        boolean metrics) throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			1306",
			toLine:"			1306",
			content:"
			                if (addr != null) {			
",
,
			fromLine:"			1314",
			toLine:"			1314",
			content:"
			    @Override			
",
,
			fromLine:"			1316",
			toLine:"			1316",
			content:"
			        final String topic, final String msgId) throws RemotingException, MQClientException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1318",
			toLine:"			1318",
			content:"
			        if (msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX) == null) {			
",
,
			fromLine:"			1321",
			toLine:"			1321",
			content:"
			            MessageClientExt msgClient = (MessageClientExt) msg;			
",
,
			fromLine:"			1568",
			toLine:"			1568",
			content:"
			    @Override			
",
,
			fromLine:"			1570",
			toLine:"			1570",
			content:"
			        boolean isOffline) throws RemotingException, MQClientException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1576",
			toLine:"			1576",
			content:"
			            if (addr != null) {			
",
,
			fromLine:"			1582",
			toLine:"			1582",
			content:"
			    @Override			
",
,
			fromLine:"			1584",
			toLine:"			1584",
			content:"
			        String statsKey) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException {			
",
,
			fromLine:"			1594",
			toLine:"			1594",
			content:"
			    @Override			
",
,
			fromLine:"			1596",
			toLine:"			1596",
			content:"
			        long timeoutMillis) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException {			
",
,
			fromLine:"			1667",
			toLine:"			1667",
			content:"
			    @Override			
",
,
			fromLine:"			1669",
			toLine:"			1669",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			1673",
			toLine:"			1673",
			content:"
			    @Override			
",
,
			fromLine:"			1675",
			toLine:"			1675",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			1679",
			toLine:"			1679",
			content:"
			    @Override			
",
,
			fromLine:"			1682",
			toLine:"			1682",
			content:"
			        final boolean force) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1710",
			toLine:"			1710",
			content:"
			    @Override			
",
,
			fromLine:"			1713",
			toLine:"			1713",
			content:"
						
",
,
			fromLine:"			1725",
			toLine:"			1725",
			content:"
			        requestHeader.setBrokerName(mq.getBrokerName());			
",
,
			fromLine:"			1741",
			toLine:"			1741",
			content:"
			    @Override			
",
,
			fromLine:"			1744",
			toLine:"			1744",
			content:"
			        String consumerGroup) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {			
",
,
			fromLine:"			1752",
			toLine:"			1752",
			content:"
			        if (msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX) == null) {			
",
,
			fromLine:"			1755",
			toLine:"			1755",
			content:"
			            MessageClientExt msgClient = (MessageClientExt) msg;			
",
,
			fromLine:"			1760",
			toLine:"			1760",
			content:"
			    @Override			
",
,
			fromLine:"			1763",
			toLine:"			1763",
			content:"
			        final long timeoutMillis) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {			
",
,
			fromLine:"			1768",
			toLine:"			1768",
			content:"
			    @Override			
",
,
			fromLine:"			1770",
			toLine:"			1770",
			content:"
			        final long timeoutMillis) throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1773",
			toLine:"			1773",
			content:"
						
",
,
			fromLine:"			1776",
			toLine:"			1776",
			content:"
						
",
,
			fromLine:"			1780",
			toLine:"			1780",
			content:"
			    @Override			
",
,
			fromLine:"			1784",
			toLine:"			1785",
			content:"
			        requestHeader.setConsumerGroup(consumeGroup);
			        requestHeader.setTopic(topicName);			
",
,
			fromLine:"			1787",
			toLine:"			1787",
			content:"
			        requestHeader.setCommitOffset(resetOffset);			
",
,
			fromLine:"			1790",
			toLine:"			1790",
			content:"
			            Map<MessageQueue, Long> result = mqClientInstance.getMQClientAPIImpl()			
",
,
			fromLine:"			1833",
			toLine:"			1833",
			content:"
			    @Override			
",
,
			fromLine:"			1835",
			toLine:"			1835",
			content:"
			                                                                          String brokerName, Long brokerId) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1856",
			toLine:"			1856",
			content:"
			        for (String addr : addrs) {			
",
,
			fromLine:"			1876",
			toLine:"			1876",
			content:"
			    @Override			
",
,
			fromLine:"			1879",
			toLine:"			1879",
			content:"
			        throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1890",
			toLine:"			1890",
			content:"
			        UnsupportedEncodingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1897",
			toLine:"			1897",
			content:"
			        UnsupportedEncodingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1916",
			toLine:"			1916",
			content:"
			        UserInfo userInfo) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1920",
			toLine:"			1922",
			content:"
			    @Override
			    public void createUser(String brokerAddr, String username, String password, String userType) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {
			        UserInfo userInfo = UserInfo.of(username, password, userType);			
",
,
			fromLine:"			1926",
			toLine:"			1926",
			content:"
			    @Override			
",
,
			fromLine:"			1928",
			toLine:"			1929",
			content:"
			        String password, String userType, String userStatus) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {
			        UserInfo userInfo = UserInfo.of(username, password, userType, userStatus);			
",
,
			fromLine:"			1934",
			toLine:"			1934",
			content:"
			    public void updateUser(String brokerAddr, UserInfo userInfo) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1940",
			toLine:"			1940",
			content:"
			        String username) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1946",
			toLine:"			1946",
			content:"
			        String username) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1956",
			toLine:"			1956",
			content:"
			    @Override			
",
,
			fromLine:"			1958",
			toLine:"			1959",
			content:"
			        List<String> sourceIps, String decision) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {
			        AclInfo aclInfo = AclInfo.of(subject, resources, actions, sourceIps, decision);			
",
,
			fromLine:"			1964",
			toLine:"			1964",
			content:"
			    public void createAcl(String brokerAddr, AclInfo aclInfo) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1968",
			toLine:"			1968",
			content:"
			    @Override			
",
,
			fromLine:"			1970",
			toLine:"			1971",
			content:"
			        List<String> sourceIps, String decision) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {
			        AclInfo aclInfo = AclInfo.of(subject, resources, actions, sourceIps, decision);			
",
,
			fromLine:"			1976",
			toLine:"			1976",
			content:"
			    public void updateAcl(String brokerAddr, AclInfo aclInfo) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1981",
			toLine:"			1981",
			content:"
			    public void deleteAcl(String brokerAddr, String subject, String resource) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1986",
			toLine:"			1986",
			content:"
			    public AclInfo getAcl(String brokerAddr, String subject) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/BrokerHeartbeatManager.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.controller;
			
			import io.netty.channel.Channel;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerLiveInfo;
			import org.apache.rocketmq.controller.impl.heartbeat.DefaultBrokerHeartbeatManager;
			import org.apache.rocketmq.controller.impl.heartbeat.RaftBrokerHeartBeatManager;
			
			import java.util.Map;
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			     */			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			     */			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			     */			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/processor/ControllerRequestProcessor.java:
		[
			fromLine:"			16",
			toLine:"			70",
			content:"
			 */
			package org.apache.rocketmq.controller.processor;
			
			import com.google.common.base.Stopwatch;
			import io.netty.channel.ChannelHandlerContext;
			import io.opentelemetry.api.common.Attributes;
			import java.io.UnsupportedEncodingException;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			
			import java.util.concurrent.TimeoutException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.BrokerHeartbeatManager;
			import org.apache.rocketmq.controller.ControllerManager;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsConstant;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.RoleChangeNotifyEntry;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
			
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_REQUEST_HANDLE_STATUS;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_REQUEST_TYPE;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_APPLY_BROKER_ID;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.BROKER_HEARTBEAT;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CLEAN_BROKER_DATA;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_ALTER_SYNC_STATE_SET;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_ELECT_MASTER;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_GET_METADATA_INFO;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_GET_REPLICA_INFO;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_GET_SYNC_STATE_DATA;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_REGISTER_BROKER;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.GET_CONTROLLER_CONFIG;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.CONTROLLER_GET_NEXT_BROKER_ID;
			import static org.apache.rocketmq.remoting.protocol.RequestCode.UPDATE_CONTROLLER_CONFIG;
						
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			        }			
",
,

		],
		controller/src/test/java/org/apache/rocketmq/controller/impl/DefaultBrokerHeartbeatManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.controller.impl;
			
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.controller.BrokerHeartbeatManager;
			import org.apache.rocketmq.controller.impl.heartbeat.DefaultBrokerHeartbeatManager;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        });			
",
,

		],
		controller/src/test/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			65",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.manager;
			
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.controller.elect.ElectPolicy;
			import org.apache.rocketmq.controller.elect.impl.DefaultElectPolicy;
			import org.apache.rocketmq.controller.helper.BrokerValidPredicate;
			import org.apache.rocketmq.controller.impl.event.ControllerResult;
			import org.apache.rocketmq.controller.impl.event.ElectMasterEvent;
			import org.apache.rocketmq.controller.impl.event.EventMessage;
			import org.apache.rocketmq.controller.impl.heartbeat.DefaultBrokerHeartbeatManager;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.lang.reflect.Field;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.TreeMap;
			
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_BROKER_NAME;
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_CLUSTER_NAME;
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_IP;
			import static org.junit.Assert.assertArrayEquals;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertNotEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        // Get next brokerId			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        Long nextBrokerId = nextBrokerIdResult.getResponse().getNextBrokerId();			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        // Apply brokerId			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        // check it in state machine			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        assertNotNull(replicaIdentity);			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        assertEquals(exceptBrokerId, replicaIdentity.getBrokerId());			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        // register success			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        boolean isFirstTryElect, boolean expectToBeElected) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			145",
			content:"
			
			        final GetReplicaInfoResponseHeader replicaInfoBefore = this.replicasInfoManager.getReplicaInfo(new GetReplicaInfoRequestHeader(brokerName)).getResponse();			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        // Try elect itself as a master			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
						
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			160",
			toLine:"			161",
			content:"
			            assertEquals(1, response.getSyncStateSetEpoch().intValue());
			            assertEquals(brokerAddress, response.getMasterAddress());			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			            // check it in state machine			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			            assertEquals(1, replicaInfoAfter.getMasterEpoch().intValue());			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			            // failed because now master still exist			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            }			
",
,
			fromLine:"			182",
			toLine:"			186",
			content:"
			
			                if (expectToBeElected) {
			                    assertEquals(brokerAddress, response.getMasterAddress());
			                    assertEquals(brokerId, response.getMasterBrokerId());
			                    assertEquals(brokerAddress, replicaInfoAfter.getMasterAddress());			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        final AlterSyncStateSetRequestHeader alterRequest =			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        final ControllerResult<AlterSyncStateSetResponseHeader> result = this.replicasInfoManager.alterSyncStateSet(alterRequest,			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
						
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			
			        assertArrayEquals(syncStateSet.getSyncStateSet().toArray(), newSyncStateSet.toArray());			
",
,
			fromLine:"			220",
			toLine:"			225",
			content:"
			    public void mockMetaData() {
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[0], 1L, null);
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[1], 2L, null);
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[2], 3L, null);
			        brokerElectMaster(DEFAULT_CLUSTER_NAME, 1L, DEFAULT_BROKER_NAME, DEFAULT_IP[0], true, true);
			        brokerElectMaster(DEFAULT_CLUSTER_NAME, 2L, DEFAULT_BROKER_NAME, DEFAULT_IP[1], false, false);			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        newSyncStateSet.add(3L);			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    public void mockHeartbeatDataMasterStillAlive() {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			            1, 1L, -1L, 0);			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			            1, 2L, -1L, 0);			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			    public void mockHeartbeatDataHigherEpoch() {			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			            1, 3L, -1L, 0);			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			            1, 2L, -1L, 0);			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			    public void mockHeartbeatDataHigherOffset() {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			            1, 3L, -1L, 0);			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			            1, 2L, -1L, 0);			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			    public void mockHeartbeatDataHigherPriority() {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			            1, 3L, -1L, 3);			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			            1, 3L, -1L, 2);			
",
,
			fromLine:"			284",
			toLine:"			289",
			content:"
			    public void testRegisterWithMasterExistResp() {
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[0], 1L, null);
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[1], 2L, null);
			        brokerElectMaster(DEFAULT_CLUSTER_NAME, 1L, DEFAULT_BROKER_NAME, DEFAULT_IP[0], true, true);
			        brokerElectMaster(DEFAULT_CLUSTER_NAME, 2L, DEFAULT_BROKER_NAME, DEFAULT_IP[1], false, false);
			        registerNewBroker(DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[2], 3L, 1L);			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			        // If now only broker-3 alive, it will be elected to be a new master			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			        final ElectMasterRequestHeader request = ElectMasterRequestHeader.ofControllerTrigger(DEFAULT_BROKER_NAME);			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			        final ElectMasterRequestHeader request = ElectMasterRequestHeader.ofControllerTrigger(DEFAULT_BROKER_NAME);			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			        final ElectMasterRequestHeader request = ElectMasterRequestHeader.ofControllerTrigger(DEFAULT_BROKER_NAME);			
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			        final ElectMasterRequestHeader request = new ElectMasterRequestHeader(DEFAULT_BROKER_NAME);			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			        brokerSet.add(3L);			
",
,
			fromLine:"			388",
			toLine:"			388",
			content:"
			        // test admin try to elect a assignedMaster, but it isn't alive			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			        // test admin try to elect a assignedMaster but old master still alive, and the old master is equals to assignedMaster			
",
,
			fromLine:"			401",
			toLine:"			401",
			content:"
			        // admin successful elect a assignedMaster.			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			        newSyncStateSet.add(1L);			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/DefaultBrokerHeartbeatManager.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.heartbeat;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Optional;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.controller.BrokerHeartbeatManager;
			import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			
			public class DefaultBrokerHeartbeatManager implements BrokerHeartbeatManager {			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			
			    private ScheduledExecutorService scheduledService;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    private final Map<BrokerIdentityInfo/* brokerIdentity*/, BrokerLiveInfo> brokerLiveTable;			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public DefaultBrokerHeartbeatManager(final ControllerConfig controllerConfig) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        this.brokerLiveTable = new ConcurrentHashMap<>(256);			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void start() {			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			    public void shutdown() {
			        this.scheduledService.shutdown();			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			    public void initialize() {
			        this.scheduledService = ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("DefaultBrokerHeartbeatManager_scheduledService_"));			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        try {			
",
,
			fromLine:"			87",
			toLine:"			89",
			content:"
			                    }
			                    this.executor.submit(() ->
			                        notifyBrokerInActive(next.getKey().getClusterName(), next.getValue().getBrokerName(), next.getValue().getBrokerId()));			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			97",
			toLine:"			99",
			content:"
			
			    private void notifyBrokerInActive(String clusterName, String brokerName, Long brokerId) {
			        for (BrokerLifecycleListener listener : this.brokerLifecycleListeners) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public void registerBrokerLifecycleListener(BrokerLifecycleListener listener) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    @Override			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        Integer electionPriority) {			
",
,
			fromLine:"			114",
			toLine:"			119",
			content:"
			        BrokerLiveInfo prev = this.brokerLiveTable.get(brokerIdentityInfo);
			        int realEpoch = Optional.ofNullable(epoch).orElse(-1);
			        long realBrokerId = Optional.ofNullable(brokerId).orElse(-1L);
			        long realMaxOffset = Optional.ofNullable(maxOffset).orElse(-1L);
			        long realConfirmOffset = Optional.ofNullable(confirmOffset).orElse(-1L);
			        long realTimeoutMillis = Optional.ofNullable(timeoutMillis).orElse(DEFAULT_BROKER_CHANNEL_EXPIRED_TIME);			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			            this.brokerLiveTable.put(brokerIdentityInfo,
			                new BrokerLiveInfo(brokerName,			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                    realElectionPriority));			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            if (entry.getValue().getChannel() == channel) {			
",
,
			fromLine:"			152",
			toLine:"			153",
			content:"
			                addrInfo = entry.getKey();
			                this.executor.submit(() ->			
",
,
			fromLine:"			163",
			toLine:"			164",
			content:"
			    @Override
			    public BrokerLiveInfo getBrokerLiveInfo(String clusterName, String brokerName, Long brokerId) {			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			    @Override
			    public boolean isBrokerActive(String clusterName, String brokerName, Long brokerId) {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        this.brokerLiveTable.keySet().stream()			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/RaftBrokerHeartBeatManager.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.heartbeat;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.TypeReference;
			import io.netty.channel.Channel;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.BrokerHeartbeatManager;
			import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
			import org.apache.rocketmq.controller.impl.JRaftController;
			import org.apache.rocketmq.controller.impl.task.BrokerCloseChannelRequest;
			import org.apache.rocketmq.controller.impl.task.CheckNotActiveBrokerRequest;
			import org.apache.rocketmq.controller.impl.task.GetBrokerLiveInfoRequest;
			import org.apache.rocketmq.controller.impl.task.GetBrokerLiveInfoResponse;
			import org.apache.rocketmq.controller.impl.task.RaftBrokerHeartBeatEventRequest;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Optional;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.TimeoutException;
			
			public class RaftBrokerHeartBeatManager implements BrokerHeartbeatManager {			
",
,
			fromLine:"			55",
			toLine:"			58",
			content:"
			    private JRaftController controller;
			    private final List<BrokerLifecycleListener> brokerLifecycleListeners = new ArrayList<>();
			    private final ScheduledExecutorService scheduledService;
			    private final ExecutorService executor;			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			    public RaftBrokerHeartBeatManager(ControllerConfig controllerConfig) {
			        this.scheduledService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("RaftBrokerHeartbeatManager_scheduledService_"));
			        this.executor = Executors.newFixedThreadPool(2, new ThreadFactoryImpl("RaftBrokerHeartbeatManager_executorService_"));			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void start() {			
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			    public void shutdown() {
			        this.scheduledService.shutdown();			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void registerBrokerLifecycleListener(BrokerLifecycleListener listener) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    @Override			
",
,
			fromLine:"			107",
			toLine:"			115",
			content:"
			
			        BrokerIdentityInfo brokerIdentityInfo = new BrokerIdentityInfo(clusterName, brokerName, brokerId);
			        int realEpoch = Optional.ofNullable(epoch).orElse(-1);
			        long realBrokerId = Optional.ofNullable(brokerId).orElse(-1L);
			        long realMaxOffset = Optional.ofNullable(maxOffset).orElse(-1L);
			        long realConfirmOffset = Optional.ofNullable(confirmOffset).orElse(-1L);
			        long realTimeoutMillis = Optional.ofNullable(timeoutMillis).orElse(DEFAULT_BROKER_CHANNEL_EXPIRED_TIME);
			        int realElectionPriority = Optional.ofNullable(electionPriority).orElse(Integer.MAX_VALUE);
			        BrokerLiveInfo liveInfo = new BrokerLiveInfo(brokerName,			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			            realConfirmOffset);			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        } catch (ExecutionException | InterruptedException | TimeoutException | RuntimeException e) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        BrokerIdentityInfo brokerIdentityInfo = brokerChannelIdentityInfoMap.get(channel);			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			                }			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			            } catch (ExecutionException | InterruptedException | TimeoutException | RuntimeException e) {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			        if (!controller.isLeaderState()) {			
",
,
			fromLine:"			190",
			toLine:"			191",
			content:"
			        // if has not received any heartbeat from broker, we do not need to scan
			        if (this.firstReceivedHeartbeatTime + controllerConfig.getJraftConfig().getjRaftScanWaitTimeoutMs() < System.currentTimeMillis()) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			222",
			content:"
			                    }
			                    this.executor.submit(() -> notifyBrokerInActive(brokerIdentityInfo.getClusterName(), brokerIdentityInfo.getBrokerName(), brokerIdentityInfo.getBrokerId()));			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			231",
			toLine:"			233",
			content:"
			    @Override
			    public BrokerLiveInfo getBrokerLiveInfo(String clusterName, String brokerName, Long brokerId) {
			        log.info("get broker live info, clusterName: {}, brokerName: {}, brokerId: {}", clusterName, brokerName, brokerId);			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			    @Override			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			        try {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        } catch (RuntimeException e) {			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			        brokerLiveInfoMap.keySet().stream()			
",
,
			fromLine:"			271",
			toLine:"			274",
			content:"
			
			    private void notifyBrokerInActive(String clusterName, String brokerName, Long brokerId) {
			        log.info("Broker {}-{}-{} inactive", clusterName, brokerName, brokerId);
			        for (BrokerLifecycleListener listener : this.brokerLifecycleListeners) {			
",
,

		],
		namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java:
		[
			fromLine:"			16",
			toLine:"			67",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import com.google.common.collect.Sets;
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.common.sysflag.TopicSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.header.NotifyMinBrokerIdChangeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
						
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			        final Channel channel) {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
						
",
,
			fromLine:"			242",
			toLine:"			243",
			content:"
			            //init or update the cluster info
			            Set<String> brokerNames = ConcurrentHashMapUtils.computeIfAbsent((ConcurrentHashMap<String, Set<String>>) this.clusterAddrTable, clusterName, k -> new HashSet<>());			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			251",
			content:"
			                registerFirst = true;
			                brokerData = new BrokerData(clusterName, brokerName, new HashMap<>());			
",
,
			fromLine:"			254",
			toLine:"			256",
			content:"
			
			            boolean isOldVersionBroker = enableActingMaster == null;
			            brokerData.setEnableActingMaster(!isOldVersionBroker && enableActingMaster);			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			            //The same IP:PORT must only have one record in brokerAddrTable			
",
,
			fromLine:"			275",
			toLine:"			277",
			content:"
			            //If Local brokerId stateVersion bigger than the registering one,
			            String oldBrokerAddr = brokerAddrsMap.get(brokerId);
			            if (null != oldBrokerAddr && !oldBrokerAddr.equals(brokerAddr)) {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			                    long oldStateVersion = oldBrokerInfo.getDataVersion().getStateVersion();			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			                                "Old BrokerAddr:{}, Old Version:{}, New BrokerAddr:{}, New Version:{}.",			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			                        //Remove the rejected brokerAddr from brokerLiveTable.			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
						
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			                log.warn("Can't register topicConfigWrapper={} because broker[{}]={} has not registered.",			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
						
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
						
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			            boolean isPrimeSlave = !isOldVersionBroker && !isMaster			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
						
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			                ConcurrentMap<String, TopicConfig> tcTable =			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
						
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			                    if (namesrvConfig.isDeleteTopicWithBrokerRegistration() && topicQueueMappingInfoMap.isEmpty()) {			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			                            Map<String, QueueData> queueDataMap = topicQueueTable.get(toDeleteTopic);			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			                            if (removedQD != null) {			
",
,
			fromLine:"			338",
			toLine:"			339",
			content:"
			                    for (Map.Entry<String, TopicConfig> entry : tcTable.entrySet()) {
			                        if (registerFirst || this.isTopicConfigChanged(clusterName, brokerAddr,			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			                            }			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
						
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			369",
			toLine:"			372",
			content:"
			                    System.currentTimeMillis(),
			                    timeoutMillis == null ? DEFAULT_BROKER_CHANNEL_EXPIRED_TIME : timeoutMillis,
			                    topicConfigWrapper == null ? new DataVersion() : topicConfigWrapper.getDataVersion(),
			                    channel,			
",
,
			fromLine:"			374",
			toLine:"			374",
			content:"
			            if (null == prevBrokerLiveInfo) {			
",
,
			fromLine:"			377",
			toLine:"			378",
			content:"
			
			            if (filterServerList != null) {			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			                } else {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
						
",
,
			fromLine:"			388",
			toLine:"			388",
			content:"
			                if (masterAddr != null) {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
						
",
,
			fromLine:"			440",
			toLine:"			441",
			content:"
			        final DataVersion dataVersion) {
			        DataVersion prev = queryBrokerTopicConfig(clusterName, brokerAddr);			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
						
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
			        final DataVersion dataVersion, String brokerName, String topic) {			
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			        }			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			        // The topicQueueTable already contains the broker			
",
,
			fromLine:"			556",
			toLine:"			556",
			content:"
						
",
,
			fromLine:"			562",
			toLine:"			565",
			content:"
			        UnRegisterBrokerRequestHeader unRegisterBrokerRequest = new UnRegisterBrokerRequestHeader();
			        unRegisterBrokerRequest.setClusterName(clusterName);
			        unRegisterBrokerRequest.setBrokerAddr(brokerAddr);
			        unRegisterBrokerRequest.setBrokerName(brokerName);			
",
,
			fromLine:"			933",
			toLine:"			933",
			content:"
			        for (String brokerAddr : brokerAddrsNotify) {			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerNewTest.java:
		[
			fromLine:"			17",
			toLine:"			52",
			content:"
			
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import com.google.common.collect.Sets;
			import io.netty.channel.Channel;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.List;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Spy;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.spy;
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        registerBrokerWithNormalTopic(BrokerBasicInfo.defaultBroker(), "TestTopic", "TestTopic1", "TestTopic2");			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic1").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			        // Master Down			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        // Switch slave to master			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			        // Old master switch to slave			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
						
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0)			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0)			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        final BrokerBasicInfo masterBroker = BrokerBasicInfo.defaultBroker();			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
						
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0)			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        final BrokerBasicInfo masterBroker = BrokerBasicInfo.defaultBroker();			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        final BrokerBasicInfo slaveBroker = BrokerBasicInfo.slaveBroker();			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
						
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
						
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			        final BrokerBasicInfo brokerInfo = BrokerBasicInfo.defaultBroker();			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            DEFAULT_ADDR,			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
						
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			            DEFAULT_ADDR,			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
						
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			            DEFAULT_ADDR,			
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
						
",
,
			fromLine:"			436",
			toLine:"			436",
			content:"
			        assertThat(orderRoute.getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			        assertThat(orderRoute.getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
			                assertThat(brokerData.getBrokerAddrs()).containsOnlyKeys(MixAll.MASTER_ID);			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			                assertThat(brokerData.getBrokerAddrs()).containsKeys(MixAll.MASTER_ID, (long) slave1.brokerId);			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
			        assertThat(orderRoute.getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			        assertThat(orderRoute.getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			576",
			toLine:"			576",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			583",
			toLine:"			583",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			        // Switch slave to master			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			619",
			toLine:"			619",
			content:"
			        // Old master switch to slave			
",
,
			fromLine:"			624",
			toLine:"			624",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerAddrs())			
",
,
			fromLine:"			667",
			toLine:"			667",
			content:"
			        assertThat(routeInfoManager.pickupTopicRouteData("TestTopic").getBrokerDatas().get(0).getBrokerName())			
",
,
			fromLine:"			680",
			toLine:"			680",
			content:"
						
",
,
			fromLine:"			689",
			toLine:"			689",
			content:"
						
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			        // Add TestTopic1 and cancel all the topics with broker un-registration			
",
,
			fromLine:"			706",
			toLine:"			706",
			content:"
						
",
,
			fromLine:"			784",
			toLine:"			784",
			content:"
			        TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();			
",
,
			fromLine:"			787",
			toLine:"			790",
			content:"
			
			        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker(
			            brokerInfo.clusterName,
			            brokerInfo.brokerAddr,			
",
,
			fromLine:"			795",
			toLine:"			795",
			content:"
			            null,			
",
,
			fromLine:"			812",
			toLine:"			814",
			content:"
			    static class BrokerBasicInfo {
			        String clusterName;
			        String brokerName;			
",
,
			fromLine:"			817",
			toLine:"			817",
			content:"
			        int brokerId;			
",
,
			fromLine:"			819",
			toLine:"			819",
			content:"
						
",
,
			fromLine:"			826",
			toLine:"			826",
			content:"
			            dataVersion.setTimestamp(System.currentTimeMillis());			
",
,
			fromLine:"			838",
			toLine:"			840",
			content:"
			            UnRegisterBrokerRequestHeader unRegisterBrokerRequest = new UnRegisterBrokerRequestHeader();
			            unRegisterBrokerRequest.setBrokerAddr(brokerAddr);
			            unRegisterBrokerRequest.setBrokerName(brokerName);			
",
,
			fromLine:"			855",
			toLine:"			855",
			content:"
			        BrokerBasicInfo name(String name) {			
",
,
			fromLine:"			860",
			toLine:"			860",
			content:"
			        BrokerBasicInfo cluster(String name) {			
",
,
			fromLine:"			865",
			toLine:"			865",
			content:"
			        BrokerBasicInfo addr(String addr) {			
",
,
			fromLine:"			880",
			toLine:"			880",
			content:"
			        BrokerBasicInfo enableActingMaster(boolean enableActingMaster) {			
",
,

		],
		namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java:
		[
			fromLine:"			16",
			toLine:"			71",
			content:"
			 */
			package org.apache.rocketmq.namesrv.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.io.UnsupportedEncodingException;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MQVersion.Version;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.namesrv.NamesrvUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicsByClusterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.AddWritePermOfBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.AddWritePermOfBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteTopicFromNamesrvRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVListByNamespaceRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.PutKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.WipeWritePermOfBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.WipeWritePermOfBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
						
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
						
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
						
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
						
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/processor/RequestProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			59",
			content:"
			 */
			package org.apache.rocketmq.namesrv.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.lang.reflect.Field;
			import java.lang.reflect.Modifier;
			import java.net.InetSocketAddress;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Properties;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetKVConfigResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.PutKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.assertj.core.util.Maps;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void testProcessRequest_GetKVConfigReturnNotNull() throws RemotingCommandException {			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			    public void testProcessRequest_DeleteKVConfig() throws RemotingCommandException {			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			        assertThat(remotingCommand.getCode()).isEqualTo(ResponseCode.QUERY_NOT_FOUND);			
",
,
			fromLine:"			624",
			toLine:"			624",
			content:"
			        Channel channel = mock(Channel.class);			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/GetRouteInfoBenchmark.java:
		[
			fromLine:"			17",
			toLine:"			48",
			content:"
			
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.Random;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.openjdk.jmh.annotations.Benchmark;
			import org.openjdk.jmh.annotations.BenchmarkMode;
			import org.openjdk.jmh.annotations.Fork;
			import org.openjdk.jmh.annotations.Measurement;
			import org.openjdk.jmh.annotations.Mode;
			import org.openjdk.jmh.annotations.OutputTimeUnit;
			import org.openjdk.jmh.annotations.Scope;
			import org.openjdk.jmh.annotations.Setup;
			import org.openjdk.jmh.annotations.State;
			import org.openjdk.jmh.annotations.TearDown;
			import org.openjdk.jmh.annotations.Threads;
			import org.openjdk.jmh.annotations.Warmup;
			
			import static org.mockito.Mockito.mock;
						
",
,
			fromLine:"			52",
			toLine:"			54",
			content:"
			public class GetRouteInfoBenchmark {
			    private RouteInfoManager routeInfoManager;
			    private String[] topicList = new String[40000];			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            final String topic = RandomStringUtils.randomAlphabetic(32) + i;			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			                final String brokerAddr = "127.0.0.1:500" + i * j;			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			                            topicConfig.setWriteQueueNums(8);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			                            topicConfig.setOrder(false);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    public void tearDown() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void pickupTopicRouteData() {			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RegisterBrokerBenchmark.java:
		[
			fromLine:"			17",
			toLine:"			48",
			content:"
			
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.Random;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.openjdk.jmh.annotations.Benchmark;
			import org.openjdk.jmh.annotations.BenchmarkMode;
			import org.openjdk.jmh.annotations.Fork;
			import org.openjdk.jmh.annotations.Measurement;
			import org.openjdk.jmh.annotations.Mode;
			import org.openjdk.jmh.annotations.OutputTimeUnit;
			import org.openjdk.jmh.annotations.Scope;
			import org.openjdk.jmh.annotations.Setup;
			import org.openjdk.jmh.annotations.State;
			import org.openjdk.jmh.annotations.TearDown;
			import org.openjdk.jmh.annotations.Threads;
			import org.openjdk.jmh.annotations.Warmup;
			
			import static org.mockito.Mockito.mock;
						
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			public class RegisterBrokerBenchmark {
			    private RouteInfoManager routeInfoManager;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    private DataVersion[] dataVersions = new DataVersion[32];			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setup() throws InterruptedException {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            final String topic = RandomStringUtils.randomAlphabetic(32) + i;			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			                    topicConfig.setWriteQueueNums(8);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			                    topicConfig.setOrder(false);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        for (int i = 0; i < 32; i++) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                public void run() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void tearDown() {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import io.netty.channel.Channel;
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        routeInfoManager.printAllPeriodically();			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			            Channel channel = mock(Channel.class);			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        Channel channel = mock(Channel.class);			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerTestBase.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import io.netty.channel.Channel;
			import io.netty.channel.embedded.EmbeddedChannel;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            // avoid object reference copy			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			            // avoid object reference copy			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        brokerData.getBrokerAddrs().forEach((brokerId, brokerAddr) -> {			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			                    brokerAddr, // set ha server address the same as brokerAddr
			                    new ConcurrentHashMap<>(topicConfigTable),			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        for (Map.Entry<Long, String> entry : brokerData.getBrokerAddrs().entrySet()) {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			            String address = brokerAddrs.remove(brokerId);			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();			
",
,
			fromLine:"			145",
			toLine:"			148",
			content:"
			        Channel channel = new EmbeddedChannel();
			        return routeInfoManager.registerBroker(clusterName,
			                brokerAddr,
			                brokerName,			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			                "",			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			                topicConfigSerializeWrapper,			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java:
		[
			fromLine:"			17",
			toLine:"			74",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Random;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.commons.lang3.builder.EqualsBuilder;
			import org.apache.commons.lang3.builder.HashCodeBuilder;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.TransactionCheckListener;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.container.BrokerContainer;
			import org.apache.rocketmq.container.BrokerContainerConfig;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.HAConnection;
			import org.apache.rocketmq.store.ha.HAConnectionState;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.junit.Assert;
			import org.junit.BeforeClass;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			    private static final AtomicBoolean CLUSTER_SET_UP = new AtomicBoolean(false);
			    private static final List<File> TMP_FILE_LIST = new ArrayList<>();			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			93",
			content:"
			    protected static final int COMMIT_LOG_SIZE = 128 * 1024;
			    protected static final int INDEX_NUM = 1000;			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    protected static ConcurrentMap<BrokerConfigLite, BrokerController> isolatedBrokers = new ConcurrentHashMap<>();			
",
,
			fromLine:"			153",
			toLine:"			155",
			content:"
			        // Create three broker groups, two contains two replicas, another contains three replicas
			        master1With3Replicas = createAndAddMaster(brokerContainer1, new BrokerGroupConfig(), BROKER_INDEX.getAndIncrement());
			        master2With3Replicas = createAndAddMaster(brokerContainer2, new BrokerGroupConfig(), BROKER_INDEX.getAndIncrement());			
",
,
			fromLine:"			157",
			toLine:"			159",
			content:"
			
			        createAndAddSlave(1, brokerContainer1, master3With3Replicas);
			        createAndAddSlave(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			161",
			toLine:"			163",
			content:"
			
			        createAndAddSlave(2, brokerContainer1, master2With3Replicas);
			        createAndAddSlave(2, brokerContainer2, master3With3Replicas);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			            file = Files.createTempDirectory(prefix).toFile();			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
						
",
,
			fromLine:"			320",
			toLine:"			322",
			content:"
			    private static int generatePort(int base, int range) {
			        int result = base + RANDOM.nextInt(range);
			        while (PORTS_IN_USE.contains(result) || PORTS_IN_USE.contains(result - 2)) {			
",
,
			fromLine:"			324",
			toLine:"			325",
			content:"
			        }
			        PORTS_IN_USE.add(result);			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			        MessageStoreConfig storeConfig = new MessageStoreConfig();			
",
,
			fromLine:"			338",
			toLine:"			340",
			content:"
			        brokerConfig.setEnablePropertyFilter(true);
			        brokerConfig.setEnableSlaveActingMaster(brokerGroupConfig.enableSlaveActingMaster);
			        brokerConfig.setEnableRemoteEscape(brokerGroupConfig.enableRemoteEscape);			
",
,
			fromLine:"			352",
			toLine:"			353",
			content:"
			        storeConfig.setMappedFileSizeCommitLog(COMMIT_LOG_SIZE);
			        storeConfig.setMaxIndexNum(INDEX_NUM);			
",
,
			fromLine:"			367",
			toLine:"			368",
			content:"
			            brokerController.start();
			            TMP_FILE_LIST.add(new File(brokerController.getTopicConfigManager().configFilePath()));			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
						
",
,
			fromLine:"			421",
			toLine:"			423",
			content:"
			        BrokerConfig slaveBrokerConfig = new BrokerConfig();
			        slaveBrokerConfig.setBrokerName(master.getBrokerConfig().getBrokerName());
			        slaveBrokerConfig.setBrokerId(slaveBrokerId);			
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
			        slaveBrokerConfig.setLockInStrictMode(true);			
",
,
			fromLine:"			443",
			toLine:"			443",
			content:"
			            storeConfig.setStorePathCommitLog(baseDir + File.separator + "commitlog");			
",
,
			fromLine:"			445",
			toLine:"			449",
			content:"
			            storeConfig.setMappedFileSizeCommitLog(COMMIT_LOG_SIZE);
			            storeConfig.setMaxIndexNum(INDEX_NUM);
			            storeConfig.setMaxHashSlotNum(INDEX_NUM * 4);
			            storeConfig.setTotalReplicas(master.getMessageStoreConfig().getTotalReplicas());
			            storeConfig.setInSyncReplicas(master.getMessageStoreConfig().getInSyncReplicas());			
",
,
			fromLine:"			457",
			toLine:"			458",
			content:"
			        try {
			            BrokerController brokerController = brokerContainer.addBroker(slaveBrokerConfig, storeConfig);			
",
,
			fromLine:"			460",
			toLine:"			461",
			content:"
			            brokerController.start();
			            TMP_FILE_LIST.add(new File(brokerController.getTopicConfigManager().configFilePath()));			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
						
",
,
			fromLine:"			471",
			toLine:"			472",
			content:"
			        BrokerController master) throws Exception {
			        BrokerIdentity brokerIdentity = new BrokerIdentity(master.getBrokerConfig().getBrokerClusterName(),			
",
,
			fromLine:"			474",
			toLine:"			474",
			content:"
						
",
,
			fromLine:"			527",
			toLine:"			527",
			content:"
			        // UnRegister the specific broker immediately			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			        await().atMost(Duration.ofMinutes(1)).until(() -> namesrvController.getRouteInfoManager()			
",
,
			fromLine:"			585",
			toLine:"			587",
			content:"
			        boolean autoReplicas = true;
			        boolean enableSlaveActingMaster = true;
			        boolean enableRemoteEscape = true;			
",
,
			fromLine:"			598",
			toLine:"			599",
			content:"
			            this.autoReplicas = autoReplicas;
			            this.enableSlaveActingMaster = enableSlaveActingMaster;			
",
,
			fromLine:"			604",
			toLine:"			607",
			content:"
			    static class BrokerConfigLite {
			        private String clusterName;
			        private String brokerName;
			        private String brokerAddr;			
",
,
			fromLine:"			611",
			toLine:"			614",
			content:"
			            final long brokerId) {
			            this.clusterName = clusterName;
			            this.brokerName = brokerName;
			            this.brokerAddr = brokerAddr;			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			        public String getClusterName() {			
",
,
			fromLine:"			622",
			toLine:"			622",
			content:"
			        public String getBrokerName() {			
",
,
			fromLine:"			626",
			toLine:"			626",
			content:"
			        public String getBrokerAddr() {			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			        public long getBrokerId() {			
",
,
			fromLine:"			644",
			toLine:"			647",
			content:"
			            return new EqualsBuilder()
			                .append(clusterName, lite.clusterName)
			                .append(brokerName, lite.brokerName)
			                .append(brokerAddr, lite.brokerAddr)			
",
,
			fromLine:"			654",
			toLine:"			657",
			content:"
			            return new HashCodeBuilder(17, 37)
			                .append(clusterName)
			                .append(brokerName)
			                .append(brokerAddr)			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerBrokerRegisterTest.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			
			public class RouteInfoManagerBrokerRegisterTest extends RouteInfoManagerTestBase {
			    private static RouteInfoManager routeInfoManager;
			    public static String clusterName = "cluster";
			    public static String brokerPrefix = "broker";
			    public static String topicPrefix = "topic";
			    public static int brokerPerName = 3;			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			50",
			content:"
			    public void setup() {
			        routeInfoManager = new RouteInfoManager(new NamesrvConfig(), null);
			        cluster = registerCluster(routeInfoManager,
			            clusterName,
			            brokerPrefix,
			            brokerNameNumber,
			            brokerPerName,			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			
			        for (BrokerData bd : cluster.brokerDataMap.values()) {			
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			    public void testMasterChangeFromSlave() {
			        String topicName = getTopicName(topicPrefix, 0);			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			        String originMasterAddr = getBrokerAddr(clusterName, brokerName, MixAll.MASTER_ID);			
",
,
			fromLine:"			93",
			toLine:"			95",
			content:"
			        // master changed
			        String newMasterAddr = getBrokerAddr(clusterName, brokerName, 1);
			        registerBrokerWithTopicConfig(routeInfoManager,			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            newMasterAddr,			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			112",
			toLine:"			113",
			content:"
			    public void testUnregisterBroker() {
			        String topicName = getTopicName(topicPrefix, 0);			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExt.java:
		[
			fromLine:"			16",
			toLine:"			77",
			content:"
			 */
			package org.apache.rocketmq.tools.admin;
			
			import java.io.UnsupportedEncodingException;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.RollbackStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.ClusterAclVersionInfo;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupForbidden;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.tools.admin.api.BrokerOperatorResult;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.admin.common.AdminToolResult;
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    @Override			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    @Override			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			    @Override			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			    @Override			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        RemotingConnectException {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    @Override			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			        String aclFileFullPath) throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			    @Override			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {			
",
,
			fromLine:"			373",
			toLine:"			374",
			content:"
			    @Override
			    public void putKVConfig(String namespace, String key, String value) {			
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			    @Override			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			        MQClientException {			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			    @Override			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			        InterruptedException, MQClientException {			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			    @Override			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
			    @Override			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
						
",
,
			fromLine:"			459",
			toLine:"			459",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			463",
			toLine:"			463",
			content:"
			    @Override			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			        InterruptedException, MQClientException {			
",
,
			fromLine:"			470",
			toLine:"			470",
			content:"
			    @Override			
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
			        final long timestamp) {			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			    @Override			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
			        MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			565",
			toLine:"			565",
			content:"
			    @Override			
",
,
			fromLine:"			568",
			toLine:"			568",
			content:"
			        MQClientException, InterruptedException {			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			    @Override			
",
,
			fromLine:"			575",
			toLine:"			575",
			content:"
			        MQClientException, InterruptedException {			
",
,
			fromLine:"			579",
			toLine:"			579",
			content:"
			    @Override			
",
,
			fromLine:"			581",
			toLine:"			581",
			content:"
			        final String topic, final String msgId) throws RemotingException, MQClientException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			599",
			toLine:"			599",
			content:"
			    @Override			
",
,
			fromLine:"			602",
			toLine:"			602",
			content:"
			        MQClientException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
			    @Override			
",
,
			fromLine:"			609",
			toLine:"			609",
			content:"
			        RemotingSendRequestException, RemotingTimeoutException, MQClientException, InterruptedException {			
",
,
			fromLine:"			619",
			toLine:"			619",
			content:"
			    @Override			
",
,
			fromLine:"			622",
			toLine:"			622",
			content:"
			        RemotingTimeoutException, MQClientException, InterruptedException {			
",
,
			fromLine:"			713",
			toLine:"			713",
			content:"
			    @Override			
",
,
			fromLine:"			716",
			toLine:"			717",
			content:"
			        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQClientException {
			        return this.defaultMQAdminExtImpl.queryConsumeQueue(			
",
,
			fromLine:"			729",
			toLine:"			729",
			content:"
			    @Override			
",
,
			fromLine:"			733",
			toLine:"			733",
			content:"
			        RemotingConnectException, MQClientException {			
",
,
			fromLine:"			737",
			toLine:"			737",
			content:"
			    @Override			
",
,
			fromLine:"			740",
			toLine:"			740",
			content:"
			        boolean force) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			745",
			toLine:"			745",
			content:"
			    @Override			
",
,
			fromLine:"			748",
			toLine:"			748",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			752",
			toLine:"			752",
			content:"
			    @Override			
",
,
			fromLine:"			755",
			toLine:"			755",
			content:"
			        throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			787",
			toLine:"			787",
			content:"
						
",
,
			fromLine:"			790",
			toLine:"			790",
			content:"
						
",
,
			fromLine:"			821",
			toLine:"			821",
			content:"
			    @Override			
",
,
			fromLine:"			823",
			toLine:"			823",
			content:"
			                                                                          String brokerName, Long brokerId) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			827",
			toLine:"			827",
			content:"
			    @Override			
",
,
			fromLine:"			829",
			toLine:"			829",
			content:"
			        String brokerControllerIdsToClean, boolean isCleanLivingBroker) throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			867",
			toLine:"			868",
			content:"
			    @Override
			    public void createUser(String brokerAddr, String username, String password, String userType) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			    @Override			
",
,
			fromLine:"			874",
			toLine:"			874",
			content:"
			        String password, String userType, String userStatus) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			902",
			toLine:"			902",
			content:"
			    @Override			
",
,
			fromLine:"			904",
			toLine:"			904",
			content:"
			        List<String> sourceIps, String decision) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			913",
			toLine:"			913",
			content:"
			    @Override			
",
,
			fromLine:"			915",
			toLine:"			915",
			content:"
			        List<String> sourceIps, String decision) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, MQBrokerException, InterruptedException {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.container.BrokerContainer;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        try {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/container/RemoveBrokerSubCommand.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.tools.command.container;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            }			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminExt.java:
		[
			fromLine:"			16",
			toLine:"			73",
			content:"
			 */
			package org.apache.rocketmq.tools.admin;
			
			import java.io.UnsupportedEncodingException;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import org.apache.rocketmq.client.MQAdmin;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.RollbackStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.ClusterAclVersionInfo;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.EpochEntryCache;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupForbidden;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.tools.admin.api.BrokerOperatorResult;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.admin.common.AdminToolResult;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
						
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
						
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
						
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
						
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
						
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
						
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
						
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
						
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
						
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
						
",
,
			fromLine:"			359",
			toLine:"			364",
			content:"
			     *
			     * @param brokerAddr    broker ip address
			     * @param topic         topic
			     * @param queueId       id of queue
			     * @param index         start offset
			     * @param count         how many			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			     */			
",
,
			fromLine:"			374",
			toLine:"			374",
			content:"
						
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			    @Deprecated			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
						
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
						
",
,
			fromLine:"			447",
			toLine:"			450",
			content:"
			     *
			     * @param controllerAddr controller address
			     * @param clusterName    cluster name
			     * @param brokerName     broker name			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			     */			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			     */			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
						
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
						
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
						
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/MQClientAPIImplTest.java:
		[
			fromLine:"			16",
			toLine:"			100",
			content:"
			 */
			package org.apache.rocketmq.client.impl;
			
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.Collections;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CountDownLatch;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueAssignment;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.AddWritePermOfBrokerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.assertj.core.api.Assertions;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentMatchers;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.doThrow;
						
",
,
			fromLine:"			108",
			toLine:"			112",
			content:"
			
			    private String brokerAddr = "127.0.0.1";
			    private String brokerName = "DefaultBroker";
			    private String clusterName = "DefaultCluster";
			    private static String group = "FooBarGroup";			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:
{
    private Message msg = new Message("FooBar", new byte[] );						
}
,
			fromLine:"			125",
			toLine:"			126",
			content:"
			    public void testSendMessageOneWay_Success() throws RemotingException, InterruptedException, MQBrokerException {
			        doNothing().when(remotingClient).invokeOneway(anyString(), any(RemotingCommand.class), anyLong());			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    public void testSendMessageOneWay_WithException() throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        try {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        try {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			            }			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			            }			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        try {			
",
,
			fromLine:"			200",
			toLine:"			201",
			content:"
			    public void testSendMessageAsync_Success() throws RemotingException, InterruptedException, MQBrokerException {
			        doNothing().when(remotingClient).invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			            }			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			        sendMessageContext.setProducer(new DefaultMQProducerImpl(new DefaultMQProducer()));			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        doThrow(new RemotingTimeoutException("Remoting Exception in Test")).when(remotingClient)			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			        sendMessageContext.setProducer(new DefaultMQProducerImpl(new DefaultMQProducer()));			
",
,
			fromLine:"			253",
			toLine:"			254",
			content:"
			        doThrow(new InterruptedException("Interrupted Exception in Test")).when(remotingClient)
			            .invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			            }			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        try {			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			            }			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			        try {			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			            }			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			        try {			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			            }			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			        try {			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			            }			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
						
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
			            }			
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
						
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
			            }			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			        msg.getProperties().put("MSG_TYPE", "reply");			
",
,
			fromLine:"			424",
			toLine:"			425",
			content:"
			            }
			        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());			
",
,
			fromLine:"			449",
			toLine:"			449",
			content:"
			                StringBuilder startOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			                StringBuilder msgOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			                message.setBody("body".getBytes());			
",
,
			fromLine:"			475",
			toLine:"			475",
			content:"
			            }			
",
,
			fromLine:"			477",
			toLine:"			477",
			content:"
			        final CountDownLatch done = new CountDownLatch(1);			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
			                StringBuilder startOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			                StringBuilder msgOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			                message.setBody("body".getBytes());			
",
,
			fromLine:"			546",
			toLine:"			546",
			content:"
			            }			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			        requestHeader.setTopic(lmqTopic);			
",
,
			fromLine:"			597",
			toLine:"			597",
			content:"
			                StringBuilder startOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			600",
			toLine:"			600",
			content:"
			                StringBuilder msgOffsetInfo = new StringBuilder(64);			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			                message.setBody("body".getBytes());			
",
,
			fromLine:"			624",
			toLine:"			624",
			content:"
			            }			
",
,
			fromLine:"			628",
			toLine:"			628",
			content:"
			        requestHeader.setTopic(lmqTopic);			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
			            }			
",
,
			fromLine:"			671",
			toLine:"			671",
			content:"
			        final CountDownLatch done = new CountDownLatch(1);			
",
,
			fromLine:"			705",
			toLine:"			705",
			content:"
			            }			
",
,
			fromLine:"			709",
			toLine:"			709",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();			
",
,
			fromLine:"			713",
			toLine:"			713",
			content:"
			        requestHeader.setInvisibleTime(10 * 1000L);			
",
,
			fromLine:"			741",
			toLine:"			741",
			content:"
			            }			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
						
",
,
			fromLine:"			758",
			toLine:"			758",
			content:"
			            }			
",
,
			fromLine:"			760",
			toLine:"			760",
			content:"
						
",
,
			fromLine:"			775",
			toLine:"			775",
			content:"
			            }			
",
,
			fromLine:"			777",
			toLine:"			777",
			content:"
						
",
,
			fromLine:"			799",
			toLine:"			799",
			content:"
			                message.setBody("body".getBytes());			
",
,
			fromLine:"			807",
			toLine:"			807",
			content:"
			            }			
",
,
			fromLine:"			809",
			toLine:"			810",
			content:"
			
			        MessageExt messageExt = mqClientAPI.viewMessage(brokerAddr, "topic", 100L, 10000);			
",
,
			fromLine:"			828",
			toLine:"			828",
			content:"
			            }			
",
,
			fromLine:"			830",
			toLine:"			830",
			content:"
						
",
,
			fromLine:"			849",
			toLine:"			849",
			content:"
			            }			
",
,
			fromLine:"			851",
			toLine:"			851",
			content:"
						
",
,
			fromLine:"			870",
			toLine:"			870",
			content:"
			            }			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
						
",
,
			fromLine:"			891",
			toLine:"			891",
			content:"
			            }			
",
,
			fromLine:"			893",
			toLine:"			893",
			content:"
						
",
,
			fromLine:"			914",
			toLine:"			914",
			content:"
			            }			
",
,
			fromLine:"			916",
			toLine:"			916",
			content:"
						
",
,
			fromLine:"			934",
			toLine:"			934",
			content:"
			            }			
",
,
			fromLine:"			936",
			toLine:"			936",
			content:"
						
",
,
			fromLine:"			956",
			toLine:"			957",
			content:"
			            }
			        }).when(remotingClient).invokeSync(anyString(), any(RemotingCommand.class), anyLong());			
",
,
			fromLine:"			1041",
			toLine:"			1042",
			content:"
			        requestHeader.setBornTimestamp(System.currentTimeMillis());
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			1065",
			toLine:"			1065",
			content:"
			            }			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/BrokerIdentity.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.common;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.commons.lang3.builder.EqualsBuilder;
			import org.apache.commons.lang3.builder.HashCodeBuilder;
			import org.apache.rocketmq.common.annotation.ImportantField;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import java.net.InetAddress;
			import java.net.UnknownHostException;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    @ImportantField			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    @ImportantField			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    // Broker start by BrokerStartup is false, start or add by BrokerContainer is true			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public BrokerIdentity(String brokerClusterName, String brokerName, long brokerId) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        this.brokerClusterName = brokerClusterName;			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public BrokerIdentity(String brokerClusterName, String brokerName, long brokerId, boolean isInBrokerContainer) {			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			        this.brokerClusterName = brokerClusterName;
			        this.brokerId = brokerId;			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setBrokerName(final String brokerName) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public long getBrokerId() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void setBrokerId(final long brokerId) {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public boolean isInBrokerContainer() {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public void setInBrokerContainer(boolean inBrokerContainer) {			
",
,
			fromLine:"			118",
			toLine:"			119",
			content:"
			    public String getCanonicalName() {
			        return isBrokerContainer ? "BrokerContainer" : String.format("%s_%s_%d", brokerClusterName, brokerName,			
",
,
			fromLine:"			139",
			toLine:"			140",
			content:"
			        return new EqualsBuilder()
			            .append(brokerId, identity.brokerId)			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			        return new HashCodeBuilder(17, 37)			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            .append(brokerClusterName)			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/BrokerLiveInfo.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.heartbeat;
			
			import io.netty.channel.Channel;
			import java.io.Serializable;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
			    private static final long serialVersionUID = 3612173344946510993L;			
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    private Channel channel;			
",
,
			fromLine:"			30",
			toLine:"			33",
			content:"
			    private long lastUpdateTimestamp;
			    private int epoch;
			    private long maxOffset;
			    private long confirmOffset;			
",
,
			fromLine:"			37",
			toLine:"			39",
			content:"
			        long heartbeatTimeoutMillis, Channel channel, int epoch, long maxOffset, Integer electionPriority) {
			        this.brokerName = brokerName;
			        this.brokerAddr = brokerAddr;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        this.channel = channel;
			        this.epoch = epoch;
			        this.electionPriority = electionPriority;			
",
,
			fromLine:"			51",
			toLine:"			53",
			content:"
			        long confirmOffset) {
			        this.brokerName = brokerName;
			        this.brokerAddr = brokerAddr;			
",
,
			fromLine:"			57",
			toLine:"			60",
			content:"
			        this.channel = channel;
			        this.epoch = epoch;
			        this.maxOffset = maxOffset;
			        this.electionPriority = electionPriority;			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			        return "BrokerLiveInfo{" +
			            "brokerName='" + brokerName + '\'' +			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            ", channel=" + channel +			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			            ", lastUpdateTimestamp=" + lastUpdateTimestamp +
			            ", epoch=" + epoch +
			            ", maxOffset=" + maxOffset +			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public long getBrokerId() {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public void setBrokerId(long brokerId) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public int getEpoch() {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public void setEpoch(int epoch) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public long getMaxOffset() {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void setMaxOffset(long maxOffset) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void setConfirmOffset(long confirmOffset) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public void setElectionPriority(Integer electionPriority) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public Integer getElectionPriority() {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public long getConfirmOffset() {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/ClusterAclVersionInfo.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import java.util.Map;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setClusterName(String clusterName) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/EpochEntryCache.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import java.util.List;
			import org.apache.rocketmq.remoting.protocol.EpochEntry;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			
			public class EpochEntryCache extends RemotingSerializable {
			    private String clusterName;
			    private String brokerName;			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    private List<EpochEntry> epochList;			
",
,
			fromLine:"			30",
			toLine:"			32",
			content:"
			    public EpochEntryCache(String clusterName, String brokerName, long brokerId, List<EpochEntry> epochList, long maxOffset) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			        this.epochList = epochList;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public long getBrokerId() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setBrokerId(long brokerId) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public long getMaxOffset() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setMaxOffset(long maxOffset) {			
",
,
			fromLine:"			80",
			toLine:"			82",
			content:"
			        return "EpochEntryCache{" +
			            "clusterName='" + clusterName + '\'' +
			            ", brokerName='" + brokerName + '\'' +			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			            ", epochList=" + epochList +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetBrokerAclConfigResponseHeader.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setClusterName(String clusterName) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/BrokerHeartbeatRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.namesrv;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNullable			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNullable			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @CFNullable			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @CFNullable			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    @CFNullable			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public Integer getEpoch() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setEpoch(Integer epoch) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public Long getMaxOffset() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setMaxOffset(Long maxOffset) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public Long getConfirmOffset() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setConfirmOffset(Long confirmOffset) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    public Integer getElectionPriority() {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public void setElectionPriority(Integer electionPriority) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/QueryDataVersionRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.namesrv;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/RegisterBrokerRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.namesrv;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @CFNullable			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @CFNullable			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public String getHaServerAddr() {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public void setHaServerAddr(String haServerAddr) {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public Long getHeartbeatTimeoutMillis() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void setHeartbeatTimeoutMillis(Long heartbeatTimeoutMillis) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public boolean isCompressed() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setCompressed(boolean compressed) {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public Boolean getEnableActingMaster() {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public void setEnableActingMaster(Boolean enableActingMaster) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/UnRegisterBrokerRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.namesrv;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerGroupInfo.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			        new ConcurrentHashMap<>(16);
			    private volatile ConsumeType consumeType;
			    private volatile MessageModel messageModel;			
",
,
			fromLine:"			50",
			toLine:"			52",
			content:"
			        this.groupName = groupName;
			        this.consumeType = consumeType;
			        this.messageModel = messageModel;			
",
,
			fromLine:"			129",
			toLine:"			131",
			content:"
			     * @param infoNew Channel info of new client.
			     * @param consumeType consume type of new client.
			     * @param messageModel message consuming model (CLUSTERING/BROADCASTING) of new client.			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			     */			
",
,
			fromLine:"			137",
			toLine:"			139",
			content:"
			        boolean updated = false;
			        this.consumeType = consumeType;
			        this.messageModel = messageModel;			
",
,
			fromLine:"			145",
			toLine:"			146",
			content:"
			            if (null == prev) {
			                log.info("new consumer connected, group: {} {} {} channel: {}", this.groupName, consumeType,			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			            } else if (sub.getSubVersion() > old.getSubVersion()) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    public ConsumeType getConsumeType() {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			    public void setConsumeType(ConsumeType consumeType) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    public MessageModel getMessageModel() {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			    public void setMessageModel(MessageModel messageModel) {			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			    public ConsumeFromWhere getConsumeFromWhere() {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerManager.java:
		[
			fromLine:"			16",
			toLine:"			40",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			            if (clientChannelInfo != null) {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			                            next.getKey());			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			158",
			content:"
			    // compensate consumer info for consumer without heartbeat
			    public void compensateBasicConsumerInfo(String group, ConsumeType consumeType, MessageModel messageModel) {
			        ConsumerGroupInfo consumerGroupInfo = consumerCompensationTable.computeIfAbsent(group, ConsumerGroupInfo::new);
			        consumerGroupInfo.setConsumeType(consumeType);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
						
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			        final Set<SubscriptionData> subList, boolean isNotifyConsumerIdsChangedEnable) {
			        return registerConsumer(group, clientChannelInfo, consumeType, messageModel, consumeFromWhere, subList,			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        long start = System.currentTimeMillis();			
",
,
			fromLine:"			180",
			toLine:"			183",
			content:"
			        if (null == consumerGroupInfo) {
			            callConsumerIdsChangeListener(ConsumerGroupEvent.CLIENT_REGISTER, group, clientChannelInfo,
			                subList.stream().map(SubscriptionData::getTopic).collect(Collectors.toSet()));
			            ConsumerGroupInfo tmp = new ConsumerGroupInfo(group, consumeType, messageModel, consumeFromWhere);			
",
,
			fromLine:"			188",
			toLine:"			189",
			content:"
			        boolean r1 =
			            consumerGroupInfo.updateChannel(clientChannelInfo, consumeType, messageModel,			
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			        boolean r2 = false;
			        if (updateSubscription) {			
",
,
			fromLine:"			196",
			toLine:"			197",
			content:"
			        if (r1 || r2) {
			            if (isNotifyConsumerIdsChangedEnable) {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
						
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
						
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			        long start = System.currentTimeMillis();			
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			        if (null == consumerGroupInfo) {
			            ConsumerGroupInfo tmp = new ConsumerGroupInfo(group, consumeType, messageModel, consumeFromWhere);			
",
,
			fromLine:"			218",
			toLine:"			220",
			content:"
			        }
			        boolean updateChannelRst = consumerGroupInfo.updateChannel(clientChannelInfo, consumeType, messageModel, consumeFromWhere);
			        if (updateChannelRst && isNotifyConsumerIdsChangedEnable) {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
						
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        boolean isNotifyConsumerIdsChangedEnable) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        if (null != consumerGroupInfo) {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			            if (removed) {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			            if (consumerGroupInfo.getChannelInfoTable().isEmpty()) {			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			                if (remove != null) {			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
						
",
,
			fromLine:"			244",
			toLine:"			245",
			content:"
			            }
			            if (isNotifyConsumerIdsChangedEnable) {			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			                        RemotingHelper.parseChannelRemoteAddr(clientChannelInfo.getChannel()), group);			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
						
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			            try {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.sysflag.TopicSysFlag;
			import org.apache.rocketmq.filter.FilterFactory;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.CheckClientRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			            String newTopic = MixAll.getRetryTopic(consumerData.getGroupName());			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
						
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			            String newTopic = MixAll.getRetryTopic(consumerData.getGroupName());			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			            if (heartbeatData.isWithoutSub()) {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			            } else {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			                }			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/client/ConsumerManagerScannerTest.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFuture;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    private ConsumerManager consumerManager;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    private String clientId = "clientId";			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @Mock			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void init() {			
",
,
			fromLine:"			74",
			toLine:"			76",
			content:"
			    private static class ConsumerIdsChangeListenerData {
			        private ConsumerGroupEvent event;
			        private String group;			
",
,
			fromLine:"			79",
			toLine:"			81",
			content:"
			        public ConsumerIdsChangeListenerData(ConsumerGroupEvent event, String group, Object[] args) {
			            this.event = event;
			            this.group = group;			
",
,
			fromLine:"			87",
			toLine:"			89",
			content:"
			    public void testClientUnregisterEventInDoChannelCloseEvent() {
			        assertThat(consumerManager.registerConsumer(
			            group,			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			102",
			content:"
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).size()).isEqualTo(1);
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0]).isInstanceOf(ClientChannelInfo.class);
			        ClientChannelInfo clientChannelInfo = (ClientChannelInfo) groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0];			
",
,
			fromLine:"			107",
			toLine:"			109",
			content:"
			    public void testClientUnregisterEventInUnregisterConsumer() {
			        assertThat(consumerManager.registerConsumer(
			            group,			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			120",
			toLine:"			122",
			content:"
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).size()).isEqualTo(1);
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0]).isInstanceOf(ClientChannelInfo.class);
			        ClientChannelInfo clientChannelInfo = (ClientChannelInfo) groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0];			
",
,
			fromLine:"			127",
			toLine:"			129",
			content:"
			    public void testClientUnregisterEventInScanNotActiveChannel() {
			        assertThat(consumerManager.registerConsumer(
			            group,			
",
,
			fromLine:"			136",
			toLine:"			137",
			content:"
			        )).isTrue();
			        clientInfo.setLastUpdateTimestamp(0);			
",
,
			fromLine:"			141",
			toLine:"			143",
			content:"
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).size()).isEqualTo(1);
			        assertThat(groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0]).isInstanceOf(ClientChannelInfo.class);
			        ClientChannelInfo clientChannelInfo = (ClientChannelInfo) groupEventListMap.get(ConsumerGroupEvent.CLIENT_UNREGISTER).get(0).args[0];			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/client/ConsumerManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.net.Broker2Client;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.assertj.core.api.Assertions;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        subList.add(subscriptionData);			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        // unregister			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        subList.add(subscriptionData);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/AckMessageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			71",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.net.Broker2Client;
			import org.apache.rocketmq.broker.failover.EscapeBridge;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BatchAck;
			import org.apache.rocketmq.remoting.protocol.body.BatchAckMessageRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.BitSet;
			import java.util.Collections;
			
			import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    @Mock			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    @Spy			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    @Mock			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    @Mock			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    @Mock			
",
,
			fromLine:"			85",
			toLine:"			87",
			content:"
			
			    private String topic = "FooBar";
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    @Mock			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			    public void init() throws IllegalAccessException, NoSuchFieldException {
			        clientInfo = new ClientChannelInfo(channel, "127.0.0.1", LanguageCode.JAVA, 0);			
",
,
			fromLine:"			100",
			toLine:"			102",
			content:"
			        field.setAccessible(true);
			        field.set(brokerController, broker2Client);
			        EscapeBridge escapeBridge = new EscapeBridge(brokerController);			
",
,
			fromLine:"			104",
			toLine:"			107",
			content:"
			        Channel mockChannel = mock(Channel.class);
			        when(handlerContext.channel()).thenReturn(mockChannel);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
			        ConsumerData consumerData = createConsumerData(group, topic);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                consumerData.getGroupName(),			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                false);			
",
,
			fromLine:"			117",
			toLine:"			118",
			content:"
			
			        when(messageStore.getMinOffsetInQueue(anyString(), anyInt())).thenReturn(MIN_OFFSET_IN_QUEUE);			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
						
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public void testProcessRequest_Success() throws RemotingCommandException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			        when(popBufferMergeService.addAk(anyInt(), any())).thenReturn(false);			
",
,
			fromLine:"			136",
			toLine:"			137",
			content:"
			        String brokerName = "test_broker";
			        String extraInfo = ExtraInfoUtil.buildExtraInfo(queueOffset, popTime, invisibleTime, reviveQid,			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			        AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        requestHeader.setOffset(MIN_OFFSET_IN_QUEUE + 1);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, null);			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			        request.makeCustomHeaderToNet();			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			            AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			            AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			            AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.BATCH_ACK_MESSAGE, null);			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			            request.setBody(reqBody.encode());			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			            request.setBody(reqBody.encode());			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			            when(popBufferMergeService.addAk(anyInt(), any())).thenReturn(true);			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			            long ackOffset = MIN_OFFSET_IN_QUEUE + 10;			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			            when(popBufferMergeService.addAk(anyInt(), any())).thenReturn(false);			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			            PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, null);			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			            long ackOffset = MIN_OFFSET_IN_QUEUE + 10;			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			            when(popBufferMergeService.addAk(anyInt(), any())).thenReturn(true);			
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			            bAck1.setConsumerGroup(MixAll.DEFAULT_CONSUMER_GROUP);			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            request.makeCustomHeaderToNet();			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			            when(popBufferMergeService.addAk(anyInt(), any())).thenReturn(false);			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			            PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, null);			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			            bAck1.setConsumerGroup(MixAll.DEFAULT_CONSUMER_GROUP);			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			            request.makeCustomHeaderToNet();			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.lang.reflect.Field;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.net.Broker2Client;
			import org.apache.rocketmq.broker.failover.EscapeBridge;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    @Spy			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    @Mock			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    @Mock			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    @Mock			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			
			    private String topic = "FooBar";
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    @Mock			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    @Mock			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public void init() throws IllegalAccessException, NoSuchFieldException {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        ebField.setAccessible(true);			
",
,
			fromLine:"			93",
			toLine:"			97",
			content:"
			        Channel mockChannel = mock(Channel.class);
			        when(handlerContext.channel()).thenReturn(mockChannel);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
			        ConsumerData consumerData = createConsumerData(group, topic);
			        clientInfo = new ClientChannelInfo(channel, "127.0.0.1", LanguageCode.JAVA, 0);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			            false);			
",
,
			fromLine:"			117",
			toLine:"			118",
			content:"
			        String brokerName = "test_broker";
			        String extraInfo = ExtraInfoUtil.buildExtraInfo(queueOffset, popTime, invisibleTime, reviveQid,			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        requestHeader.setOffset(queueOffset);			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        request.makeCustomHeaderToNet();			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/ClientManageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			56",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.UUID;
			import java.util.List;
			import java.util.ArrayList;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    @Spy			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    @Mock			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    @Mock			
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			
			    private ClientChannelInfo clientChannelInfo;
			    private String clientId = UUID.randomUUID().toString();
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			73",
			toLine:"			76",
			content:"
			    public void init() {
			        when(handlerContext.channel()).thenReturn(channel);
			        clientManageProcessor = new ClientManageProcessor(brokerController);
			        clientChannelInfo = new ClientChannelInfo(channel, clientId, LanguageCode.JAVA, 100);			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			
			        ConsumerData consumerData = PullMessageProcessorTest.createConsumerData(group, topic);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			91",
			toLine:"			92",
			content:"
			    public void processRequest_UnRegisterProducer() throws Exception {
			        brokerController.getProducerManager().registerProducer(group, clientChannelInfo);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        assertThat(channelMap).isNotNull();			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        RemotingCommand request = createUnRegisterProducerCommand();			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public void processRequest_UnRegisterConsumer() throws RemotingCommandException {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        RemotingCommand request = createUnRegisterConsumerCommand();			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        RemotingCommand request = createHeartbeatCommand(false, "topicA");			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        assertThat(Boolean.parseBoolean(response.getExtFields().get(MixAll.IS_SUB_CHANGE))).isFalse();			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			        RemotingCommand requestSimple = createHeartbeatCommand(true, "topicA");			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        assertThat(Boolean.parseBoolean(responseSimple.getExtFields().get(MixAll.IS_SUB_CHANGE))).isFalse();			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        request = createHeartbeatCommand(false, "topicB");			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        assertThat(Boolean.parseBoolean(response.getExtFields().get(MixAll.IS_SUB_CHANGE))).isTrue();			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        requestSimple = createHeartbeatCommand(true, "topicB");			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        assertThat(Boolean.parseBoolean(responseSimple.getExtFields().get(MixAll.IS_SUB_CHANGE))).isFalse();			
",
,
			fromLine:"			163",
			toLine:"			164",
			content:"
			        UnregisterClientRequestHeader requestHeader = new UnregisterClientRequestHeader();
			        requestHeader.setClientID(clientId);			
",
,
			fromLine:"			174",
			toLine:"			175",
			content:"
			        UnregisterClientRequestHeader requestHeader = new UnregisterClientRequestHeader();
			        requestHeader.setClientID(clientId);			
",
,
			fromLine:"			202",
			toLine:"			203",
			content:"
			        HeartbeatData heartbeatData = new HeartbeatData();
			        heartbeatData.setClientID(this.clientId);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/PopBufferMergeServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    @Spy			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    @Mock			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    @Mock			
",
,
			fromLine:"			55",
			toLine:"			59",
			content:"
			    @Mock
			    private DefaultMessageStore messageStore;
			    private ScheduleMessageService scheduleMessageService;
			    private ClientChannelInfo clientChannelInfo;
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			63",
			toLine:"			67",
			content:"
			    public void init() throws Exception {
			        FieldUtils.writeField(brokerController.getBrokerConfig(), "enablePopBufferMerge", true, true);
			        brokerController.setMessageStore(messageStore);
			        popMessageProcessor = new PopMessageProcessor(brokerController);
			        scheduleMessageService = new ScheduleMessageService(brokerController);			
",
,
			fromLine:"			69",
			toLine:"			72",
			content:"
			        Channel mockChannel = mock(Channel.class);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
			        clientChannelInfo = new ClientChannelInfo(mockChannel);
			        ConsumerData consumerData = createConsumerData(group, topic);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        Assume.assumeFalse(MixAll.isWindows());			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			        ck.setStartOffset(offset);
			        ck.setCId(group);			
",
,
			fromLine:"			110",
			toLine:"			111",
			content:"
			        ackMsg.setStartOffset(offset);
			        ackMsg.setConsumerGroup(group);			
",
,
			fromLine:"			115",
			toLine:"			116",
			content:"
			        try {
			            assertThat(popBufferMergeService.addCk(ck, reviveQid, ackOffset, nextBeginOffset)).isTrue();			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			            assertThat(popBufferMergeService.addAk(reviveQid, ackMsg)).isTrue();			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/PopMessageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.embedded.EmbeddedChannel;
			import java.nio.ByteBuffer;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			public class PopMessageProcessorTest {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    @Spy			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			    @Mock
			    private ChannelHandlerContext handlerContext;			
",
,
			fromLine:"			67",
			toLine:"			70",
			content:"
			    @Mock
			    private DefaultMessageStore messageStore;
			    private ClientChannelInfo clientChannelInfo;
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			74",
			toLine:"			81",
			content:"
			    public void init() {
			        brokerController.setMessageStore(messageStore);
			        brokerController.getBrokerConfig().setEnablePopBufferMerge(true);
			        popMessageProcessor = new PopMessageProcessor(brokerController);
			        when(handlerContext.channel()).thenReturn(embeddedChannel);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig(topic));
			        clientChannelInfo = new ClientChannelInfo(embeddedChannel);
			        ConsumerData consumerData = createConsumerData(group, topic);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			93",
			toLine:"			94",
			content:"
			    public void testProcessRequest_TopicNotExist() throws RemotingCommandException {
			        when(messageStore.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        final RemotingCommand request = createPopMsgCommand();			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.TOPIC_NOT_EXIST);			
",
,
			fromLine:"			105",
			toLine:"			106",
			content:"
			        GetMessageResult getMessageResult = createGetMessageResult(1);
			        when(messageStore.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			        final RemotingCommand request = createPopMsgCommand();
			        popMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			        getMessageResult.setStatus(GetMessageStatus.MESSAGE_WAS_REMOVING);
			        when(messageStore.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());			
",
,
			fromLine:"			123",
			toLine:"			124",
			content:"
			        final RemotingCommand request = createPopMsgCommand();
			        popMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			133",
			toLine:"			134",
			content:"
			        getMessageResult.setStatus(GetMessageStatus.NO_MESSAGE_IN_QUEUE);
			        when(messageStore.getMessageStoreConfig()).thenReturn(new MessageStoreConfig());			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        final RemotingCommand request = createPopMsgCommand();			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        messageStoreConfig.setTimerWheelEnable(false);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        final RemotingCommand request = createPopMsgCommand();			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			        requestHeader.setQueueId(-1);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/PullMessageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			66",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.embedded.EmbeddedChannel;
			import java.lang.reflect.Method;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    @Spy			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			    @Mock
			    private ChannelHandlerContext handlerContext;			
",
,
			fromLine:"			76",
			toLine:"			79",
			content:"
			    @Mock
			    private MessageStore messageStore;
			    private ClientChannelInfo clientChannelInfo;
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			83",
			toLine:"			92",
			content:"
			    public void init() {
			        brokerController.setMessageStore(messageStore);
			        SubscriptionGroupManager subscriptionGroupManager = new SubscriptionGroupManager(brokerController);
			        pullMessageProcessor = new PullMessageProcessor(brokerController);
			        when(brokerController.getPullMessageProcessor()).thenReturn(pullMessageProcessor);
			        when(handlerContext.channel()).thenReturn(embeddedChannel);
			        when(brokerController.getSubscriptionGroupManager()).thenReturn(subscriptionGroupManager);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
			        clientChannelInfo = new ClientChannelInfo(embeddedChannel);
			        ConsumerData consumerData = createConsumerData(group, topic);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void testProcessRequest_TopicNotExist() throws RemotingCommandException {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.TOPIC_NOT_EXIST);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public void testProcessRequest_SubNotExist() throws RemotingCommandException {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        request.addExtField("subVersion", String.valueOf(101));			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        GetMessageResult getMessageResult = createGetMessageResult();			
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);
			        pullMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        GetMessageResult getMessageResult = createGetMessageResult();			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);
			        pullMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			173",
			toLine:"			174",
			content:"
			        assertThat(messageContext[0]).isNotNull();
			        assertThat(messageContext[0].getConsumerGroup()).isEqualTo(group);			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        getMessageResult.setStatus(GetMessageStatus.MESSAGE_WAS_REMOVING);			
",
,
			fromLine:"			185",
			toLine:"			186",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);
			        pullMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			        getMessageResult.setStatus(GetMessageStatus.NO_MESSAGE_IN_QUEUE);			
",
,
			fromLine:"			198",
			toLine:"			199",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);
			        pullMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			    public void test_LitePullRequestForbidden() throws Exception {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        RemotingCommand remotingCommand = createPullMsgCommand(RequestCode.LITE_PULL_MESSAGE);			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			        GetMessageResult getMessageResult = createGetMessageResult();			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);
			        pullMessageProcessor.processRequest(handlerContext, request);			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			        requestHeader.setCommitOffset(123L);			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        requestHeader.setSubscription("*");			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/QueryAssignmentProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.google.common.collect.ImmutableSet;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.topic.TopicRouteInfoManager;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragelyByCircle;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueConsistentHash;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.SetMessageRequestModeRequestBody;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    @Spy			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    @Mock			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    @Mock			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    @Mock			
",
,
			fromLine:"			77",
			toLine:"			80",
			content:"
			    private String broker = "defaultBroker";
			    private String topic = "FooBar";
			    private String group = "FooBarGroup";
			    private String clientId = "127.0.0.1";			
",
,
			fromLine:"			84",
			toLine:"			91",
			content:"
			    public void init() throws IllegalAccessException, NoSuchFieldException {
			        clientInfo = new ClientChannelInfo(channel, "127.0.0.1", LanguageCode.JAVA, 0);
			        brokerController.setMessageStore(messageStore);
			        doReturn(topicRouteInfoManager).when(brokerController).getTopicRouteInfoManager();
			        when(topicRouteInfoManager.getTopicSubscribeInfo(topic)).thenReturn(ImmutableSet.of(new MessageQueue(topic, "broker-1", 0), new MessageQueue(topic, "broker-2", 1)));
			        queryAssignmentProcessor = new QueryAssignmentProcessor(brokerController);
			        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());
			        ConsumerData consumerData = createConsumerData(group, topic);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			            consumerData.getGroupName(),			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void testQueryAssignment() throws Exception {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        final RemotingCommand request = createQueryAssignmentRequest();			
",
,
			fromLine:"			114",
			toLine:"			116",
			content:"
			    public void testSetMessageRequestMode_Success() throws Exception {
			        brokerController.getProducerManager().registerProducer(group, clientInfo);
			        final RemotingCommand request = createSetMessageRequestModeRequest(topic);			
",
,
			fromLine:"			122",
			toLine:"			124",
			content:"
			    public void testSetMessageRequestMode_RetryTopic() throws Exception {
			        brokerController.getProducerManager().registerProducer(group, clientInfo);
			        final RemotingCommand request = createSetMessageRequestModeRequest(MixAll.RETRY_GROUP_TOPIC_PREFIX + topic);			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			        for (int mqSize = 0; mqSize < testNum; mqSize++) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			                    List<MessageQueue> allocateResult =			
",
,
			fromLine:"			196",
			toLine:"			198",
			content:"
			        QueryAssignmentRequestBody requestBody = new QueryAssignmentRequestBody();
			        requestBody.setTopic(topic);
			        requestBody.setConsumerGroup(group);			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			        requestBody.setTopic(topic);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncer.java:
		[
			fromLine:"			17",
			toLine:"			49",
			content:"
			
			package org.apache.rocketmq.proxy.service.sysmessage;
			
			import com.alibaba.fastjson.JSON;
			import io.netty.channel.Channel;
			import java.nio.charset.StandardCharsets;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			124",
			toLine:"			126",
			content:"
			                        consumerGroup,
			                        consumeType,
			                        messageModel,			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			                    log.error("heartbeat register broadcast failed. group:{}, clientChannelInfo:{}, consumeType:{}, messageModel:{}, consumeFromWhere:{}, subList:{}",			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			            log.error("heartbeat submit register broadcast failed. group:{}, clientChannelInfo:{}, consumeType:{}, messageModel:{}, consumeFromWhere:{}, subList:{}",			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                if (data.getHeartbeatType().equals(HeartbeatType.REGISTER)) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			                } else {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerTest.java:
		[
			fromLine:"			17",
			toLine:"			94",
			content:"
			
			package org.apache.rocketmq.proxy.service.sysmessage;
			
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.FilterType;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Subscription;
			import apache.rocketmq.v2.SubscriptionEntry;
			import com.google.common.collect.Sets;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelId;
			import java.time.Duration;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcClientChannel;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
			import org.apache.rocketmq.proxy.remoting.channel.RemotingChannel;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.assertj.core.util.Lists;
			import org.jetbrains.annotations.NotNull;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotSame;
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.never;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    @Mock			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    @Mock			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    @Mock			
",
,
			fromLine:"			109",
			toLine:"			113",
			content:"
			
			    private String clientId;
			    private final String remoteAddress = "10.152.39.53:9768";
			    private final String localAddress = "11.193.0.1:1210";
			    private final String clusterName = "cluster";			
",
,
			fromLine:"			118",
			toLine:"			119",
			content:"
			        super.before();
			        this.clientId = RandomStringUtils.randomAlphabetic(10);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			            queueData.setPerm(6);			
",
,
			fromLine:"			130",
			toLine:"			131",
			content:"
			            BrokerData brokerData = new BrokerData();
			            brokerData.setCluster(clusterName);			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			            MessageQueueView messageQueueView = new MessageQueueView("foo", topicRouteData, null);			
",
,
			fromLine:"			148",
			toLine:"			149",
			content:"
			            proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
			            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			            grpcClientChannel,			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        doReturn(CompletableFuture.completedFuture(sendResult)).when(this.mqClientAPIExt)			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			            .build();			
",
,
			fromLine:"			176",
			toLine:"			177",
			content:"
			
			        HeartbeatSyncer heartbeatSyncer = new HeartbeatSyncer(topicRouteService, adminService, consumerManager, mqClientAPIFactory, null);			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			        heartbeatSyncer.consumeMessage(Lists.newArrayList(convertFromMessage(messageArgumentCaptor.getValue())), null);			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        ArgumentCaptor<ClientChannelInfo> syncChannelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        ArgumentCaptor<ClientChannelInfo> syncUnRegisterChannelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			        RemotingProxyOutClient remotingProxyOutClient = mock(RemotingProxyOutClient.class);			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			            remotingChannel,			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        );			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			            remotingChannel2,			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			            doReturn(CompletableFuture.completedFuture(okSendResult)).when(this.mqClientAPIExt)			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
						
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			            );			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			            heartbeatSyncer.consumeMessage(convertFromMessage(messageArgumentCaptor.getAllValues()), null);			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
			            ArgumentCaptor<ClientChannelInfo> syncChannelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			            doReturn(CompletableFuture.completedFuture(okSendResult)).when(this.mqClientAPIExt)			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			            ArgumentCaptor<ClientChannelInfo> syncUnRegisterChannelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			        RemotingProxyOutClient remotingProxyOutClient = mock(RemotingProxyOutClient.class);			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			            remotingChannel,			
",
,
			fromLine:"			347",
			toLine:"			348",
			content:"
			            proxyRelayService, grpcClientSettingsManager, grpcChannelManager,
			            ProxyContext.create().setRemoteAddress(remoteAddress).setLocalAddress(localAddress),			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			            grpcClientChannel,			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			    private void testProcessConsumerGroupEvent(String consumerGroup, ClientChannelInfo clientChannelInfo) {			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			        doReturn(CompletableFuture.completedFuture(okSendResult)).when(this.mqClientAPIExt)			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
						
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			        ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			408",
			toLine:"			408",
			content:"
			        public MockChannel(String channelId) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/ClientProcessor.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import io.netty.channel.Channel;
			import java.util.Set;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    ) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    ) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    ) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			82",
			content:"
			    ) {
			        this.serviceManager.getConsumerManager().registerConsumer(
			            consumerGroup,
			            clientChannelInfo,
			            consumeType,
			            messageModel,
			            consumeFromWhere,			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			            false,			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    ) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    ) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ClusterConsumerManager.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.proxy.service.client;
			
			import java.util.Set;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.proxy.service.sysmessage.HeartbeatSyncer;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @Override			
",
,
			fromLine:"			48",
			toLine:"			50",
			content:"
			        Set<SubscriptionData> subList, boolean isNotifyConsumerIdsChangedEnable, boolean updateSubscription) {
			        this.heartbeatSyncer.onConsumerRegister(group, clientChannelInfo, consumeType, messageModel, consumeFromWhere, subList);
			        return super.registerConsumer(group, clientChannelInfo, consumeType, messageModel, consumeFromWhere, subList,			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        this.heartbeatSyncer.onConsumerUnRegister(group, clientChannelInfo);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ConsumerIdsChangeListener.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
						
",
,
			fromLine:"			20",
			toLine:"			20",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/DefaultConsumerIdsChangeListener.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.Collection;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			
			public class DefaultConsumerIdsChangeListener implements ConsumerIdsChangeListener {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public DefaultConsumerIdsChangeListener(BrokerController brokerController) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			    @Override
			    public void handle(ConsumerGroupEvent event, String group, Object... args) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        }			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            case CHANGE:			
",
,
			fromLine:"			69",
			toLine:"			71",
			content:"
			                }
			                List<Channel> channels = (List<Channel>) args[0];
			                if (channels != null && brokerController.getBrokerConfig().isNotifyConsumerIdsChangedEnable()) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                        for (Channel chl : channels) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			                    } else {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            case UNREGISTER:			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			            case REGISTER:			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			                }
			                Collection<SubscriptionData> subscriptionDataList = (Collection<SubscriptionData>) args[0];			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			            default:			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            try {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			                    for (Channel chl : channelList) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public void shutdown() {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			64",
			content:"
			
			package org.apache.rocketmq.proxy.service.receipt;
			
			import io.netty.channel.Channel;
			import io.netty.channel.local.LocalChannel;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.state.StateEventListener;
			import org.apache.rocketmq.proxy.common.RenewEvent;
			import org.apache.rocketmq.proxy.common.ContextVariable;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.common.ReceiptHandleGroup;
			import org.apache.rocketmq.proxy.common.RenewStrategyPolicy;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.common.ReceiptHandleGroupKey;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.stubbing.Answer;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			74",
			toLine:"			76",
			content:"
			    private static final ProxyContext PROXY_CONTEXT = ProxyContext.create();
			    private static final String GROUP = "group";
			    private static final String TOPIC = "topic";			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			                ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			            .reviveQueueId(1)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        Mockito.doNothing().when(consumerManager).appendConsumerIdsChangeListener(Mockito.any(ConsumerIdsChangeListener.class));			
",
,
			fromLine:"			127",
			toLine:"			129",
			content:"
			        Channel channel = new LocalChannel();
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(new SubscriptionGroupConfig());			
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			146",
			toLine:"			147",
			content:"
			                .reviveQueueId(1)
			                .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			                .build().encode();			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			                RECONSUME_TIMES);			
",
,
			fromLine:"			156",
			toLine:"			158",
			content:"
			        }
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(new SubscriptionGroupConfig());			
",
,
			fromLine:"			162",
			toLine:"			163",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), handleArgumentCaptor.capture(), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);			
",
,
			fromLine:"			174",
			toLine:"			175",
			content:"
			        SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(groupConfig);			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			            .reviveQueueId(1)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			198",
			toLine:"			199",
			content:"
			
			        Mockito.when(messagingProcessor.changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			204",
			toLine:"			205",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat(r -> r.getInvisibleTime() == INVISIBLE_TIME), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			209",
			toLine:"			210",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.argThat(r -> r.getInvisibleTime() == newInvisibleTime), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			217",
			toLine:"			218",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        Mockito.when(consumerManager.findChannel(Mockito.eq(GROUP), Mockito.eq(channel))).thenReturn(Mockito.mock(ClientChannelInfo.class));			
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			
			        Mockito.when(messagingProcessor.changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			240",
			toLine:"			241",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.times(3))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			247",
			toLine:"			248",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        Mockito.when(consumerManager.findChannel(Mockito.eq(GROUP), Mockito.eq(channel))).thenReturn(Mockito.mock(ClientChannelInfo.class));			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			        ackResultFuture.completeExceptionally(new ProxyException(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, "error"));
			        Mockito.when(messagingProcessor.changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			271",
			toLine:"			272",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        Mockito.when(consumerManager.findChannel(Mockito.eq(GROUP), Mockito.eq(channel))).thenReturn(Mockito.mock(ClientChannelInfo.class));			
",
,
			fromLine:"			289",
			toLine:"			290",
			content:"
			                .reviveQueueId(1)
			                .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			315",
			toLine:"			316",
			content:"
			                return futureList.get(count.getAndIncrement());
			            }).when(messagingProcessor).changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			341",
			toLine:"			342",
			content:"
			            .reviveQueueId(1)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			            .build().encode();			
",
,
			fromLine:"			350",
			toLine:"			351",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);			
",
,
			fromLine:"			353",
			toLine:"			354",
			content:"
			        SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(groupConfig);			
",
,
			fromLine:"			358",
			toLine:"			359",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			375",
			toLine:"			376",
			content:"
			            .reviveQueueId(1)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			            .build().encode();			
",
,
			fromLine:"			384",
			toLine:"			387",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);
			        Mockito.when(consumerManager.findChannel(Mockito.eq(GROUP), Mockito.eq(channel))).thenReturn(Mockito.mock(ClientChannelInfo.class));
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(null);			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(0))			
",
,
			fromLine:"			411",
			toLine:"			412",
			content:"
			            .reviveQueueId(1)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			            .build().encode();			
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);			
",
,
			fromLine:"			422",
			toLine:"			423",
			content:"
			        SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();
			        Mockito.when(metadataService.getSubscriptionGroupConfig(Mockito.any(), Mockito.eq(GROUP))).thenReturn(groupConfig);			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(0))			
",
,
			fromLine:"			433",
			toLine:"			434",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);			
",
,
			fromLine:"			436",
			toLine:"			436",
			content:"
			        SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();			
",
,
			fromLine:"			439",
			toLine:"			439",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(0))			
",
,
			fromLine:"			446",
			toLine:"			447",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);			
",
,
			fromLine:"			449",
			toLine:"			449",
			content:"
			        SubscriptionGroupConfig groupConfig = new SubscriptionGroupConfig();			
",
,
			fromLine:"			452",
			toLine:"			453",
			content:"
			        Mockito.verify(messagingProcessor, Mockito.timeout(1000).times(1))
			            .changeInvisibleTime(Mockito.any(ProxyContext.class), Mockito.any(ReceiptHandle.class), Mockito.eq(MESSAGE_ID),			
",
,
			fromLine:"			461",
			toLine:"			462",
			content:"
			        Channel channel = PROXY_CONTEXT.getVal(ContextVariable.CHANNEL);
			        receiptHandleManager.addReceiptHandle(PROXY_CONTEXT, channel, GROUP, MSG_ID, messageReceiptHandle);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PopMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			97",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.FileRegion;
			import io.opentelemetry.api.common.Attributes;
			import java.nio.ByteBuffer;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map.Entry;
			import java.util.Objects;
			import java.util.Random;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentSkipListSet;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.longpolling.PollingHeader;
			import org.apache.rocketmq.broker.longpolling.PollingResult;
			import org.apache.rocketmq.broker.longpolling.PopLongPollingService;
			import org.apache.rocketmq.broker.longpolling.PopRequest;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.pagecache.ManyMessageTransfer;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.BatchAckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_RETRY;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_REQUEST_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESPONSE_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
			
			public class PopMessageProcessor implements NettyRequestProcessor {			
",
,
			fromLine:"			99",
			toLine:"			102",
			content:"
			        LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
			    private final BrokerController brokerController;
			    private final Random random = new Random(System.currentTimeMillis());
			    String reviveTopic;			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			112",
			content:"
			    public PopMessageProcessor(final BrokerController brokerController) {
			        this.brokerController = brokerController;
			        this.reviveTopic = PopAckConstants.buildClusterReviveTopic(this.brokerController.getBrokerConfig().getBrokerClusterName());			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        this.queueLockManager = new QueueLockManager();			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public PopLongPollingService getPopLongPollingService() {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public ConcurrentLinkedHashMap<String, ConcurrentSkipListSet<PopRequest>> getPollingMap() {			
",
,
			fromLine:"			168",
			toLine:"			171",
			content:"
			
			    public void notifyLongPollingRequestIfNeed(String topic, String group, int queueId) {
			        long popBufferOffset = this.brokerController.getPopMessageProcessor().getPopBufferMergeService().getLatestOffset(topic, group, queueId);
			        long consumerOffset = this.brokerController.getConsumerOffsetManager().queryOffset(group, topic, queueId);			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			        if (maxOffset > offset) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			                // notify pop queue			
",
,
			fromLine:"			179",
			toLine:"			182",
			content:"
			            }
			            this.brokerController.getNotificationProcessor().notifyMessageArriving(topic, queueId);
			            if (this.brokerController.getBrokerConfig().isEnablePopLog()) {
			                POP_LOGGER.info("notify long polling request. topic:{}, group:{}, queueId:{}, success:{}",			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public void notifyMessageArriving(final String topic, final int queueId) {			
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			
			    public boolean notifyMessageArriving(final String topic, final String cid, final int queueId) {			
",
,
			fromLine:"			198",
			toLine:"			201",
			content:"
			        throws RemotingCommandException {
			        final long beginTimeMills = this.brokerController.getMessageStore().now();
			        request.addExtFieldIfNotExist(BORN_TIME, String.valueOf(System.currentTimeMillis()));
			        if (Objects.equals(request.getExtFields().get(BORN_TIME), "0")) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			222",
			content:"
			
			        if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			            response.setRemark(String.format("the broker[%s] pop message is timeout too much",			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        }			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			            response.setRemark(String.format("the broker[%s] pop message is forbidden",			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			            response.setRemark(String.format("the broker[%s] pop message's num is greater than 32",			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
						
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			            response.setRemark(String.format("the broker[%s] pop message is forbidden because timerWheelEnable is false",			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			        TopicConfig topicConfig =			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			                channel.remoteAddress());			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			        SubscriptionGroupConfig subscriptionGroupConfig =			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
						
",
,
			fromLine:"			297",
			toLine:"			298",
			content:"
			            try {
			                SubscriptionData subscriptionData = FilterAPI.build(requestHeader.getTopic(), requestHeader.getExp(), requestHeader.getExpType());			
",
,
			fromLine:"			302",
			toLine:"			303",
			content:"
			                String retryTopic = KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2());
			                SubscriptionData retrySubscriptionData = FilterAPI.build(retryTopic, SubscriptionData.SUB_ALL, requestHeader.getExpType());			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			                if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
			                    if (consumerFilterData == null) {			
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			                messageFilter = new ExpressionMessageFilter(subscriptionData, consumerFilterData,			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			331",
			toLine:"			332",
			content:"
			            try {
			                SubscriptionData subscriptionData = FilterAPI.build(requestHeader.getTopic(), "*", ExpressionType.TAG);			
",
,
			fromLine:"			336",
			toLine:"			337",
			content:"
			                String retryTopic = KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2());
			                SubscriptionData retrySubscriptionData = FilterAPI.build(retryTopic, "*", ExpressionType.TAG);			
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
						
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			        } else {			
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
			                String retryTopic = KeyBuilder.buildPopRetryTopicV1(requestHeader.getTopic(), requestHeader.getConsumerGroup());			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			                String retryTopic = KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2());			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			            // read all queue			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			            getMessageFuture = getMessageFuture.thenCompose(restNum ->			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			                String retryTopicV1 = KeyBuilder.buildPopRetryTopicV1(requestHeader.getTopic(), requestHeader.getConsumerGroup());			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			                String retryTopic = KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2());			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			                    // all queue pop can not notify specified queue pop, and vice versa			
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
			            } else {			
",
,
			fromLine:"			437",
			toLine:"			438",
			content:"
			                case ResponseCode.SUCCESS:
			                    if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			                            requestHeader.getTopic(), requestHeader.getQueueId());			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			                            requestHeader.getTopic(), requestHeader.getQueueId(),			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			                                    if (!future.isSuccess()) {			
",
,
			fromLine:"			465",
			toLine:"			465",
			content:"
			                        } catch (Throwable e) {			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			            return finalResponse;			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
						
",
,
			fromLine:"			486",
			toLine:"			490",
			content:"
			            for (int i = 0; i < topicConfig.getReadQueueNums(); i++) {
			                int queueId = (randomQ + i) % topicConfig.getReadQueueNums();
			                getMessageFuture = getMessageFuture.thenCompose(restNum ->
			                    popMsgFromQueue(topicConfig.getTopicName(), requestHeader.getAttemptId(), isRetry,
			                        getMessageResult, requestHeader, queueId, restNum, reviveQid, channel, popTime, messageFilter,			
",
,
			fromLine:"			493",
			toLine:"			493",
			content:"
			        }			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,
			fromLine:"			500",
			toLine:"			502",
			content:"
			        StringBuilder msgOffsetInfo, StringBuilder orderCountInfo, int randomQ, CompletableFuture<Long> getMessageFuture) {
			        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);
			        return popMsgFromTopic(topicConfig, isRetry, getMessageResult, requestHeader, reviveQid, channel, popTime,			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
						
",
,
			fromLine:"			510",
			toLine:"			512",
			content:"
			        String lockKey =
			            topic + PopAckConstants.SPLIT + requestHeader.getConsumerGroup() + PopAckConstants.SPLIT + queueId;
			        boolean isOrder = requestHeader.isOrder();			
",
,
			fromLine:"			516",
			toLine:"			517",
			content:"
			        if (!queueLockManager.tryLock(lockKey)) {
			            restNum = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId) - offset + restNum;			
",
,
			fromLine:"			521",
			toLine:"			524",
			content:"
			
			        if (isPopShouldStop(topic, requestHeader.getConsumerGroup(), queueId)) {
			            POP_LOGGER.warn("Too much msgs unacked, then stop poping. topic={}, group={}, queueId={}", topic, requestHeader.getConsumerGroup(), queueId);
			            restNum = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId) - offset + restNum;			
",
,
			fromLine:"			530",
			toLine:"			530",
			content:"
			            future.whenComplete((result, throwable) -> queueLockManager.unLock(lockKey));			
",
,
			fromLine:"			532",
			toLine:"			534",
			content:"
			                true, lockKey, true);
			            if (isOrder && brokerController.getConsumerOrderInfoManager().checkBlock(attemptId, topic,
			                requestHeader.getConsumerGroup(), queueId, requestHeader.getInvisibleTime())) {			
",
,
			fromLine:"			539",
			toLine:"			542",
			content:"
			            if (isOrder) {
			                this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNum(
			                    topic,
			                    requestHeader.getConsumerGroup(),			
",
,
			fromLine:"			546",
			toLine:"			548",
			content:"
			
			            if (getMessageResult.getMessageMapedList().size() >= requestHeader.getMaxMsgNums()) {
			                restNum = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId) - offset + restNum;			
",
,
			fromLine:"			552",
			toLine:"			553",
			content:"
			        } catch (Exception e) {
			            POP_LOGGER.error("Exception in popMsgFromQueue", e);			
",
,
			fromLine:"			557",
			toLine:"			557",
			content:"
						
",
,
			fromLine:"			560",
			toLine:"			562",
			content:"
			        long finalOffset = offset;
			        return this.brokerController.getMessageStore()
			            .getMessageAsync(requestHeader.getConsumerGroup(), topic, queueId, offset,			
",
,
			fromLine:"			574",
			toLine:"			574",
			content:"
			                    // because offset in PopBuffer is not committed.			
",
,
			fromLine:"			576",
			toLine:"			577",
			content:"
			                        lockKey, atomicOffset.get(), result.getNextBeginOffset());
			                    this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(), requestHeader.getConsumerGroup(), topic,			
",
,
			fromLine:"			579",
			toLine:"			580",
			content:"
			                    atomicOffset.set(result.getNextBeginOffset());
			                    return this.brokerController.getMessageStore().getMessageAsync(requestHeader.getConsumerGroup(), topic, queueId, atomicOffset.get(),			
",
,
			fromLine:"			585",
			toLine:"			585",
			content:"
			                if (result == null) {			
",
,
			fromLine:"			589",
			toLine:"			590",
			content:"
			                if (!result.getMessageMapedList().isEmpty()) {
			                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(requestHeader.getTopic(), result.getMessageCount());			
",
,
			fromLine:"			592",
			toLine:"			592",
			content:"
			                        result.getMessageCount());			
",
,
			fromLine:"			596",
			toLine:"			599",
			content:"
			                    Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                        .put(LABEL_TOPIC, requestHeader.getTopic())
			                        .put(LABEL_CONSUMER_GROUP, requestHeader.getConsumerGroup())
			                        .put(LABEL_IS_SYSTEM, TopicValidator.isSystemTopic(requestHeader.getTopic()) || MixAll.isSysConsumerGroup(requestHeader.getConsumerGroup()))			
",
,
			fromLine:"			605",
			toLine:"			610",
			content:"
			                    if (isOrder) {
			                        this.brokerController.getConsumerOrderInfoManager().update(requestHeader.getAttemptId(), isRetry, topic,
			                            requestHeader.getConsumerGroup(),
			                            queueId, popTime, requestHeader.getInvisibleTime(), result.getMessageQueueOffset(),
			                            orderCountInfo);
			                        this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(),			
",
,
			fromLine:"			612",
			toLine:"			612",
			content:"
			                    } else {			
",
,
			fromLine:"			616",
			toLine:"			617",
			content:"
			                    }
			                    ExtraInfoUtil.buildStartOffsetInfo(startOffsetInfo, topic, queueId, finalOffset);			
",
,
			fromLine:"			624",
			toLine:"			625",
			content:"
			                    && result.getNextBeginOffset() > -1) {
			                    popBufferMergeService.addCkMock(requestHeader.getConsumerGroup(), topic, queueId, finalOffset,			
",
,
			fromLine:"			631",
			toLine:"			631",
			content:"
			                atomicRestNum.set(result.getMaxOffset() - result.getNextBeginOffset() + atomicRestNum.get());			
",
,
			fromLine:"			634",
			toLine:"			635",
			content:"
			                    // We should not recode buffer when popResponseReturnActualRetryTopic is true or topic is not retry topic
			                    if (brokerController.getBrokerConfig().isPopResponseReturnActualRetryTopic() || !isRetry) {			
",
,
			fromLine:"			637",
			toLine:"			637",
			content:"
			                    } else {			
",
,
			fromLine:"			642",
			toLine:"			643",
			content:"
			                            try {
			                                String ckInfo = ExtraInfoUtil.buildExtraInfo(finalOffset, popTime, requestHeader.getInvisibleTime(),			
",
,
			fromLine:"			647",
			toLine:"			647",
			content:"
			                                // Set retry message topic to origin topic and clear message store size to recode			
",
,
			fromLine:"			654",
			toLine:"			654",
			content:"
			                                    new SelectMappedBufferResult(mapedBuffer.getStartOffset(), buffer, encode.length, null);			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			                            } catch (Exception e) {			
",
,
			fromLine:"			661",
			toLine:"			664",
			content:"
			                }
			                this.brokerController.getPopInflightMessageCounter().incrementInFlightMessageNum(
			                    topic,
			                    requestHeader.getConsumerGroup(),			
",
,
			fromLine:"			670",
			toLine:"			670",
			content:"
			                if (throwable != null) {			
",
,
			fromLine:"			676",
			toLine:"			678",
			content:"
			
			    private boolean isPopShouldStop(String topic, String group, int queueId) {
			        return brokerController.getBrokerConfig().isEnablePopMessageThreshold() &&			
",
,
			fromLine:"			681",
			toLine:"			681",
			content:"
						
",
,
			fromLine:"			684",
			toLine:"			684",
			content:"
						
",
,
			fromLine:"			686",
			toLine:"			686",
			content:"
			        if (offset < 0) {			
",
,
			fromLine:"			690",
			toLine:"			690",
			content:"
			        if (checkResetOffset) {			
",
,
			fromLine:"			704",
			toLine:"			704",
			content:"
						
",
,
			fromLine:"			706",
			toLine:"			707",
			content:"
			        long offset;
			        if (ConsumeInitMode.MIN == initMode) {			
",
,
			fromLine:"			709",
			toLine:"			711",
			content:"
			        } else {
			            if (this.brokerController.getBrokerConfig().isInitPopOffsetByCheckMsgInMem() &&
			                this.brokerController.getMessageStore().getMinOffsetInQueue(topic, queueId) <= 0 &&			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			                // pop last one,then commit offset.			
",
,
			fromLine:"			721",
			toLine:"			723",
			content:"
			            }
			            if (init) {
			                this.brokerController.getConsumerOffsetManager().commitOffset(			
",
,
			fromLine:"			732",
			toLine:"			732",
			content:"
						
",
,
			fromLine:"			737",
			toLine:"			738",
			content:"
			        msgInner.setBornTimestamp(System.currentTimeMillis());
			        msgInner.setBornHost(this.brokerController.getStoreHost());			
",
,
			fromLine:"			746",
			toLine:"			746",
			content:"
						
",
,
			fromLine:"			753",
			toLine:"			759",
			content:"
			        ck.setNum((byte) getMessageTmpResult.getMessageMapedList().size());
			        ck.setPopTime(popTime);
			        ck.setInvisibleTime(requestHeader.getInvisibleTime());
			        ck.setStartOffset(offset);
			        ck.setCId(requestHeader.getConsumerGroup());
			        ck.setTopic(topic);
			        ck.setQueueId(queueId);			
",
,
			fromLine:"			761",
			toLine:"			761",
			content:"
			        for (Long msgQueueOffset : getMessageTmpResult.getMessageQueueOffset()) {			
",
,
			fromLine:"			764",
			toLine:"			765",
			content:"
			
			        final boolean addBufferSuc = this.popBufferMergeService.addCk(			
",
,
			fromLine:"			771",
			toLine:"			772",
			content:"
			        }
			        return this.popBufferMergeService.addCkJustOffset(			
",
,
			fromLine:"			776",
			toLine:"			777",
			content:"
			
			    private Long resetPopOffset(String topic, String group, int queueId) {			
",
,
			fromLine:"			779",
			toLine:"			779",
			content:"
			        Long resetOffset =			
",
,
			fromLine:"			781",
			toLine:"			781",
			content:"
			        if (resetOffset != null) {			
",
,
			fromLine:"			783",
			toLine:"			784",
			content:"
			            this.getPopBufferMergeService().clearOffsetQueue(lockKey);
			            this.brokerController.getConsumerOffsetManager()			
",
,
			fromLine:"			789",
			toLine:"			789",
			content:"
						
",
,
			fromLine:"			791",
			toLine:"			791",
			content:"
			        final int queueId) {			
",
,
			fromLine:"			795",
			toLine:"			795",
			content:"
			        try {			
",
,
			fromLine:"			802",
			toLine:"			802",
			content:"
			        } finally {			
",
,
			fromLine:"			805",
			toLine:"			806",
			content:"
			
			        this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,			
",
,
			fromLine:"			846",
			toLine:"			846",
			content:"
			        public String buildLockKey(String topic, String consumerGroup, int queueId) {			
",
,
			fromLine:"			850",
			toLine:"			850",
			content:"
			        public boolean tryLock(String topic, String consumerGroup, int queueId) {			
",
,
			fromLine:"			887",
			toLine:"			887",
			content:"
			                    iterator.remove();			
",
,
			fromLine:"			899",
			toLine:"			899",
			content:"
			        public void unLock(String topic, String consumerGroup, int queueId) {			
",
,
			fromLine:"			911",
			toLine:"			912",
			content:"
			        public String getServiceName() {
			            if (PopMessageProcessor.this.brokerController.getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			923",
			toLine:"			923",
			content:"
			                    int count = cleanUnusedLock(60000);			
",
,
			fromLine:"			925",
			toLine:"			925",
			content:"
			                } catch (Exception e) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			81",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.List;
			import java.util.Objects;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.coldctr.ColdDataPullRequestHoldService;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.broker.filter.ExpressionForRetryMessageFilter;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.longpolling.PullRequest;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;
			import org.apache.rocketmq.broker.plugin.PullMessageResultHandler;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.remoting.protocol.ForbiddenType;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.RequestSource;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.remoting.rpc.RpcClientUtils;
			import org.apache.rocketmq.remoting.rpc.RpcRequest;
			import org.apache.rocketmq.remoting.rpc.RpcResponse;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
			
			public class PullMessageProcessor implements NettyRequestProcessor {
			    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    private PullMessageResultHandler pullMessageResultHandler;			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public PullMessageProcessor(final BrokerController brokerController) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			            RpcRequest rpcRequest = new RpcRequest(RequestCode.PULL_MESSAGE, requestHeader, null);			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
			        RemotingCommand request) throws RemotingCommandException {			
",
,
			fromLine:"			293",
			toLine:"			294",
			content:"
			    public boolean rejectRequest() {
			        if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
						
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        throws RemotingCommandException {			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			        final PullMessageRequestHeader requestHeader =			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
						
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
						
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
						
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			            response.setRemark(String.format("the broker[%s] pulling message is forbidden",			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
						
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			            response.setRemark(			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			        SubscriptionGroupConfig subscriptionGroupConfig =			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
						
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
						
",
,
			fromLine:"			369",
			toLine:"			370",
			content:"
			            String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
			                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
						
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			            case PROXY_FOR_BROADCAST:			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			            case PROXY_FOR_STREAM:			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			            default:			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			            try {			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			                if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
			            ConsumerGroupInfo consumerGroupInfo =			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			            if (null == consumerGroupInfo) {			
",
,
			fromLine:"			431",
			toLine:"			431",
			content:"
						
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			            if (null == subscriptionData) {			
",
,
			fromLine:"			449",
			toLine:"			449",
			content:"
			            if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			            if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			                if (consumerFilterData.getClientVersion() < requestHeader.getSubVersion()) {			
",
,
			fromLine:"			474",
			toLine:"			474",
			content:"
			        if (!ExpressionType.isTagType(subscriptionData.getExpressionType())			
",
,
			fromLine:"			481",
			toLine:"			481",
			content:"
			        MessageFilter messageFilter;			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			            messageFilter = new ExpressionForRetryMessageFilter(subscriptionData, consumerFilterData,			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			            messageFilter = new ExpressionMessageFilter(subscriptionData, consumerFilterData,			
",
,
			fromLine:"			489",
			toLine:"			492",
			content:"
			
			        final MessageStore messageStore = brokerController.getMessageStore();
			        if (this.brokerController.getMessageStore() instanceof DefaultMessageStore) {
			            DefaultMessageStore defaultMessageStore = (DefaultMessageStore)this.brokerController.getMessageStore();			
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			                if (isMsgLogicCold) {			
",
,
			fromLine:"			505",
			toLine:"			507",
			content:"
			                        if (brokerAllowFlowCtrSuspend) {  // second arrived, which will not be held
			                            PullRequest pullRequest = new PullRequest(request, channel, 1000,
			                                this.brokerController.getMessageStore().now(), requestHeader.getQueueOffset(), subscriptionData, messageFilter);			
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
						
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			        int queueId = requestHeader.getQueueId();			
",
,
			fromLine:"			531",
			toLine:"			531",
			content:"
			        } else {			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			                RemotingCommand finalResponse = response;			
",
,
			fromLine:"			547",
			toLine:"			548",
			content:"
			                        }
			                        brokerController.getColdDataCgCtrService().coldAcc(requestHeader.getConsumerGroup(), result.getColdDataSum());			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			                            result,			
",
,
			fromLine:"			552",
			toLine:"			552",
			content:"
			                            requestHeader,			
",
,
			fromLine:"			555",
			toLine:"			555",
			content:"
			                            subscriptionGroupConfig,			
",
,
			fromLine:"			562",
			toLine:"			562",
			content:"
			                    })			
",
,
			fromLine:"			568",
			toLine:"			568",
			content:"
						
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
			                getMessageResult,			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			                requestHeader,			
",
,
			fromLine:"			575",
			toLine:"			575",
			content:"
			                subscriptionGroupConfig,			
",
,
			fromLine:"			586",
			toLine:"			586",
			content:"
			    public boolean hasConsumeMessageHook() {			
",
,
			fromLine:"			591",
			toLine:"			592",
			content:"
			     * Composes the header of the response message to be sent back to the client
			     * @param requestHeader - the header of the request message			
",
,
			fromLine:"			594",
			toLine:"			595",
			content:"
			     * @param topicSysFlag - the system flag of the topic
			     * @param subscriptionGroupConfig - configuration of the subscription group			
",
,
			fromLine:"			598",
			toLine:"			598",
			content:"
			     */			
",
,
			fromLine:"			601",
			toLine:"			604",
			content:"
			        String clientAddress) {
			        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
			        response.setRemark(getMessageResult.getStatus().name());
			        responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());			
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
			        // this does not need to be modified since it's not an accurate value under logical queue.			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			        responseHeader.setTopicSysFlag(topicSysFlag);			
",
,
			fromLine:"			610",
			toLine:"			610",
			content:"
						
",
,
			fromLine:"			612",
			toLine:"			612",
			content:"
			            case FOUND:			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			            case NO_MATCHED_MESSAGE:			
",
,
			fromLine:"			620",
			toLine:"			621",
			content:"
			            case NO_MESSAGE_IN_QUEUE:
			                if (0 != requestHeader.getQueueOffset()) {			
",
,
			fromLine:"			623",
			toLine:"			628",
			content:"
			                    // XXX: warn and notify me
			                    LOGGER.info("the broker stores no queue data, fix the request offset {} to {}, Topic: {} QueueId: {} Consumer Group: {}",
			                        requestHeader.getQueueOffset(),
			                        getMessageResult.getNextBeginOffset(),
			                        requestHeader.getTopic(),
			                        requestHeader.getQueueId(),			
",
,
			fromLine:"			631",
			toLine:"			631",
			content:"
			                } else {			
",
,
			fromLine:"			636",
			toLine:"			636",
			content:"
			            case OFFSET_OVERFLOW_ONE:			
",
,
			fromLine:"			639",
			toLine:"			639",
			content:"
			            case OFFSET_OVERFLOW_BADLY:			
",
,
			fromLine:"			641",
			toLine:"			642",
			content:"
			                // XXX: warn and notify me
			                LOGGER.info("the request offset: {} over flow badly, fix to {}, broker max offset: {}, consumer: {}",			
",
,
			fromLine:"			645",
			toLine:"			647",
			content:
{
            case OFFSET_RESET:
                response.setCode(ResponseCode.PULL_OFFSET_MOVED);
                LOGGER.info("The queue under pulling was previously reset to start from ",						
}
,
			fromLine:"			650",
			toLine:"			653",
			content:"
			            case OFFSET_TOO_SMALL:
			                response.setCode(ResponseCode.PULL_OFFSET_MOVED);
			                LOGGER.info("the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}",
			                    requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueOffset(),			
",
,
			fromLine:"			660",
			toLine:"			660",
			content:"
						
",
,
			fromLine:"			662",
			toLine:"			663",
			content:"
			            // consume too slow ,redirect to another machine
			            if (getMessageResult.isSuggestPullingFromSlave()) {			
",
,
			fromLine:"			667",
			toLine:"			667",
			content:"
			            else {			
",
,
			fromLine:"			673",
			toLine:"			678",
			content:"
			
			        if (this.brokerController.getBrokerConfig().getBrokerId() != MixAll.MASTER_ID && !getMessageResult.isSuggestPullingFromSlave()) {
			            if (this.brokerController.getMinBrokerIdInGroup() == MixAll.MASTER_ID) {
			                LOGGER.debug("slave redirect pullRequest to master, topic: {}, queueId: {}, consumer group: {}, next: {}, min: {}, max: {}",
			                    requestHeader.getTopic(),
			                    requestHeader.getQueueId(),			
",
,
			fromLine:"			684",
			toLine:"			685",
			content:"
			                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);
			                if (!getMessageResult.getStatus().equals(GetMessageStatus.FOUND)) {			
",
,
			fromLine:"			692",
			toLine:"			692",
			content:"
						
",
,
			fromLine:"			695",
			toLine:"			698",
			content:"
			        if (this.hasConsumeMessageHook()) {
			            String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);
			            String authType = request.getExtFields().get(BrokerStatsManager.ACCOUNT_AUTH_TYPE);
			            String ownerParent = request.getExtFields().get(BrokerStatsManager.ACCOUNT_OWNER_PARENT);			
",
,
			fromLine:"			701",
			toLine:"			703",
			content:"
			            ConsumeMessageContext context = new ConsumeMessageContext();
			            context.setConsumerGroup(requestHeader.getConsumerGroup());
			            context.setTopic(requestHeader.getTopic());			
",
,
			fromLine:"			707",
			toLine:"			707",
			content:"
			            context.setAccountOwnerSelf(ownerSelf);			
",
,
			fromLine:"			711",
			toLine:"			712",
			content:"
			                case ResponseCode.SUCCESS:
			                    int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
			                    context.setCommercialRcvTimes(incValue);			
",
,
			fromLine:"			720",
			toLine:"			722",
			content:"
			                    context.setRcvStat(BrokerStatsManager.StatsType.RCV_SUCCESS);
			                    context.setRcvMsgNum(getMessageResult.getMessageCount());
			                    context.setRcvMsgSize(getMessageResult.getBufferTotalSize());			
",
,
			fromLine:"			726",
			toLine:"			726",
			content:"
			                case ResponseCode.PULL_NOT_FOUND:			
",
,
			fromLine:"			754",
			toLine:"			754",
			content:"
						
",
,
			fromLine:"			765",
			toLine:"			765",
			content:"
			        long nextOffset, String clientAddress) {			
",
,
			fromLine:"			772",
			toLine:"			772",
			content:"
			        if (storeOffsetEnable) {			
",
,
			fromLine:"			781",
			toLine:"			781",
			content:"
			                boolean brokerAllowFlowCtrSuspend = !(request.getExtFields() != null && request.getExtFields().containsKey(ColdDataPullRequestHoldService.NO_SUSPEND_KEY));			
",
,
			fromLine:"			787",
			toLine:"			787",
			content:"
			                    try {			
",
,
			fromLine:"			789",
			toLine:"			791",
			content:"
			                            if (!future.isSuccess()) {
			                                LOGGER.error("processRequestWrapper response to {} failed", channel.remoteAddress(), future.cause());
			                                LOGGER.error(request.toString());			
",
,
			fromLine:"			795",
			toLine:"			797",
			content:"
			                    } catch (Throwable e) {
			                        LOGGER.error("processRequestWrapper process request over, but response failed", e);
			                        LOGGER.error(request.toString());			
",
,
			fromLine:"			801",
			toLine:"			801",
			content:"
			            } catch (RemotingCommandException e1) {			
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			        };			
",
,
			fromLine:"			808",
			toLine:"			808",
			content:"
			    public void registerConsumeMessageHook(List<ConsumeMessageHook> consumeMessageHookList) {			
",
,
			fromLine:"			822",
			toLine:"			822",
			content:"
						
",
,
			fromLine:"			825",
			toLine:"			825",
			content:"
						
",
,
			fromLine:"			830",
			toLine:"			831",
			content:"
			        boolean proxyPullBroadcast = Objects.equals(
			            RequestSource.PROXY_FOR_BROADCAST.getValue(), requestHeader.getRequestSource());			
",
,
			fromLine:"			834",
			toLine:"			836",
			content:"
			        if (isBroadcast(proxyPullBroadcast, consumerGroupInfo)) {
			            long offset = requestHeader.getQueueOffset();
			            if (ResponseCode.PULL_OFFSET_MOVED == response.getCode()) {			
",
,
			fromLine:"			840",
			toLine:"			840",
			content:"
			            if (proxyPullBroadcast) {			
",
,
			fromLine:"			842",
			toLine:"			842",
			content:"
			            } else {			
",
,
			fromLine:"			848",
			toLine:"			849",
			content:"
			            }
			            this.brokerController.getBroadcastOffsetManager()			
",
,
			fromLine:"			856",
			toLine:"			856",
			content:"
			     */			
",
,
			fromLine:"			859",
			toLine:"			859",
			content:"
						
",
,
			fromLine:"			863",
			toLine:"			863",
			content:"
						
",
,
			fromLine:"			865",
			toLine:"			865",
			content:"
			        boolean proxyPullBroadcast = Objects.equals(			
",
,
			fromLine:"			870",
			toLine:"			870",
			content:"
			            if (proxyPullBroadcast) {			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			            } else {			
",
,
			fromLine:"			879",
			toLine:"			880",
			content:"
			
			            return this.brokerController.getBroadcastOffsetManager()			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ProducerChangeListener.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.CopyOnWriteArrayList;
			import org.apache.rocketmq.broker.util.PositiveAtomicCounter;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.body.ProducerInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			                            RemotingHelper.parseChannelRemoteAddr(info.getChannel()), group);			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			                iterator.remove();			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			                            clientChannelInfo.toString(), remoteAddr, group);			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:
{
                            log.info("unregister a producer group[] from groupChannelTable", group);						
}
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			                        clientChannelInfo.toString());			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			                this.groupChannelTable.remove(group);			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
						
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			            try {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.broker.client.net;
			
			import io.netty.channel.Channel;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueForC;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.GetConsumerStatusBody;
			import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBodyForC;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerStatusRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotifyConsumerIdsChangedRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        try {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    ) throws RemotingSendRequestException, RemotingTimeoutException, InterruptedException {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        try {			
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			
			    public RemotingCommand resetOffset(String topic, String group, long timeStamp, boolean isForce) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			            response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			            mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			            long consumerOffset =			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			            long timeStampOffset;			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
						
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			            } else {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			            if (timeStampOffset < 0) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			156",
			toLine:"			158",
			content:"
			        ResetOffsetRequestHeader requestHeader = new ResetOffsetRequestHeader();
			        requestHeader.setTopic(topic);
			        requestHeader.setGroup(group);			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            RemotingCommand.createRequestCommand(RequestCode.RESET_CONSUMER_CLIENT_OFFSET, requestHeader);			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        ConsumerGroupInfo consumerGroupInfo =			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			                    try {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			                        log.info("[reset-offset] reset offset success. topic={}, group={}, clientId={}",			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			                        log.error("[reset-offset] reset offset exception. topic={}, group={} ,error={}",			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			                    RemotingCommand response =			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/offset/OffsetResetIT.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.rocketmq.test.offset;
			
			import java.time.Duration;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.FixMethodOrder;
			import org.junit.Test;
			import org.junit.runners.MethodSorters;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    private RMQNormalListener listener = null;
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    private DefaultMQAdminExt defaultMQAdminExt = null;			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			    public void init() throws MQClientException {
			        topic = initTopic();			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        listener = new RMQNormalListener();
			        producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        ResetOffsetRequestHeader requestHeader = new ResetOffsetRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                .getMqClientInstance().getMQClientAPIImpl()			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			                long brokerOffset = controller.getMessageStore().getMaxOffsetInQueue(topic, messageQueue.getQueueId());
			                long consumerOffset = controller.getConsumerOffsetManager().queryOffset(			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        int msgSize = 100;			
",
,
			fromLine:"			126",
			toLine:"			127",
			content:"
			
			        producer.send(messageQueueMsg.getMsgsWithMQ());			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofMinutes(3)).until(			
",
,
			fromLine:"			133",
			toLine:"			134",
			content:"
			        for (BrokerController controller : brokerControllerList) {
			            defaultMQAdminExt.resetOffsetByQueueId(controller.getBrokerAddr(),			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        long start = System.currentTimeMillis();			
",
,
			fromLine:"			153",
			toLine:"			154",
			content:"
			
			        producer.send(messageQueueMsg.getMsgsWithMQ());			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofMinutes(3)).until(			
",
,
			fromLine:"			161",
			toLine:"			162",
			content:"
			            defaultMQAdminExt.getDefaultMQAdminExtImpl().getMqClientInstance().getMQClientAPIImpl()
			                .invokeBrokerToResetOffset(controller.getBrokerAddr(),			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        int msgSize = 100;			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			
			        producer.send(messageQueueMsg.getMsgsWithMQ());			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofMinutes(3)).until(			
",
,
			fromLine:"			189",
			toLine:"			190",
			content:"
			            ConsumeStats consumeStats = defaultMQAdminExt.getDefaultMQAdminExtImpl().getMqClientInstance()
			                .getMQClientAPIImpl().getConsumeStats(controller.getBrokerAddr(),			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/offset/SkipAccumulationSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.offset;
			
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.RollbackStats;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			            try {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeCommand.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.tools.command.offset;
			
			import java.util.Map;
			import java.util.Objects;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			                long resetOffset = null != offset ? offset :			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                if (resetOffset > 0) {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			            try {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			                if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ResetOffsetRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getGroup() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setGroup(String group) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public long getTimestamp() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setTimestamp(long timestamp) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public boolean isForce() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setForce(boolean isForce) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public Long getOffset() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setOffset(Long offset) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/rebalance/RebalanceLockManager.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.broker.client.rebalance;
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import java.util.HashSet;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			                try {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			                        groupValue = new ConcurrentHashMap<>(32);			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			                        lockEntry = new LockEntry();
			                        lockEntry.setClientId(clientId);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:
{
			"RebalanceLockManager#tryLock: lock a message queue which has not been locked yet, "			
}
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                    if (lockEntry.isExpired()) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:
{
			"RebalanceLockManager#tryLock: try to lock a expired message queue, group={}, mq={}, old "			
}
,
			fromLine:"			91",
			toLine:"			91",
			content:
{
			"RebalanceLockManager#tryLock: message queue has been locked by other client, group={}, "			
}
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			            } catch (InterruptedException e) {
			                log.error("RebalanceLockManager#tryLock: unexpected error, group={}, mq={}, clientId={}", group, mq,			
",
,
			fromLine:"			105",
			toLine:"			106",
			content:"
			
			    private boolean isLocked(final String group, final MessageQueue mq, final String clientId) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        if (groupValue != null) {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            if (lockEntry != null) {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			        final String clientId) {
			        Set<MessageQueue> lockedMqs = new HashSet<>(mqs.size());			
",
,
			fromLine:"			127",
			toLine:"			128",
			content:"
			
			        for (MessageQueue mq : mqs) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			                try {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                        groupValue = new ConcurrentHashMap<>(32);			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			                            lockEntry = new LockEntry();			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:
{
			"RebalanceLockManager#tryLockBatch: lock a message which has not been locked yet, "			
}
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			                        if (lockEntry.isExpired()) {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:
{
			"RebalanceLockManager#tryLockBatch: try to lock a expired message queue, group={}, "			
}
,
			fromLine:"			176",
			toLine:"			177",
			content:"
			                            "RebalanceLockManager#tryLockBatch: message queue has been locked by other client, "
			                                + "group={}, mq={}, locked client id={}, current client id={}", group, mq, oldClientId,			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			            } catch (InterruptedException e) {
			                log.error("RebalanceLockManager#tryBatch: unexpected error, group={}, mqs={}, clientId={}", group, mqs,			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			            try {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			                if (null != groupValue) {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			                        if (null != lockEntry) {			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			                                log.info("RebalanceLockManager#unlockBatch: unlock mq, group={}, clientId={}, mqs={}",			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			                                    "RebalanceLockManager#unlockBatch: mq locked by other client, group={}, locked "
			                                        + "clientId={}, current clientId={}, mqs={}", group, lockEntry.getClientId(),			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			                            log.warn("RebalanceLockManager#unlockBatch: mq not locked, group={}, clientId={}, mq={}",			
",
,
			fromLine:"			216",
			toLine:"			217",
			content:"
			                } else {
			                    log.warn("RebalanceLockManager#unlockBatch: group not exist, group={}, clientId={}, mqs={}", group,			
",
,
			fromLine:"			223",
			toLine:"			224",
			content:"
			        } catch (InterruptedException e) {
			            log.error("RebalanceLockManager#unlockBatch: unexpected error, group={}, mqs={}, clientId={}", group, mqs,			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.rocketmq.broker.failover;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            final BlockingQueue<Runnable> asyncSenderThreadPoolQueue = new LinkedBlockingQueue<>(50000);			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        try {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			                final String brokerAddrToSend = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInPublish(brokerNameToSend);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			                String brokerAddrToSend = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInPublish(brokerNameToSend);			
",
,
			fromLine:"			265",
			toLine:"			266",
			content:"
			
			    public Pair<GetMessageStatus, MessageExt> getMessage(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {			
",
,
			fromLine:"			269",
			toLine:"			270",
			content:"
			
			    public CompletableFuture<Pair<GetMessageStatus, MessageExt>> getMessageAsync(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        if (messageStore != null) {			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			                    if (result == null) {			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			                    }			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			                    if (list == null || list.isEmpty()) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			        } else {			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			                    }			
",
,
			fromLine:"			324",
			toLine:"			325",
			content:"
			
			    protected MessageExt getMessageFromRemote(String topic, long offset, int queueId, String brokerName) {			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			        try {			
",
,
			fromLine:"			332",
			toLine:"			333",
			content:"
			            if (null == brokerAddr) {
			                this.brokerController.getTopicRouteInfoManager().updateTopicRouteInfoFromNameServer(topic, true, false);			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			                if (null == brokerAddr) {			
",
,
			fromLine:"			341",
			toLine:"			342",
			content:"
			
			            return this.brokerController.getBrokerOuterAPI().pullMessageFromSpecificBrokerAsync(brokerName,			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/failover/EscapeBridgeTest.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.rocketmq.broker.failover;
			
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.broker.topic.TopicRouteInfoManager;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.assertj.core.api.Assertions;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        when(brokerController.getTopicRouteInfoManager()).thenReturn(topicRouteInfoManager);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
						
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			    public void getMessageFromRemoteTest() {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public void getMessageFromRemoteAsyncTest() {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PopReviveService.java:
		[
			fromLine:"			16",
			toLine:"			64",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import io.opentelemetry.api.common.Attributes;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.NavigableMap;
			import java.util.TreeMap;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.metrics.PopMetricsManager;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.BatchAckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			
			public class PopReviveService extends ServiceThread {			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			    private int queueId;
			    private BrokerController brokerController;			
",
,
			fromLine:"			77",
			toLine:"			79",
			content:"
			        this.queueId = queueId;
			        this.brokerController = brokerController;
			        this.reviveTopic = reviveTopic;			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			    public String getServiceName() {
			        if (brokerController != null && brokerController.getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        if (!popCheckPoint.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			        msgInner.setSysFlag(messageExt.getSysFlag());
			        msgInner.setBornHost(brokerController.getStoreHost());			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			        addRetryTopicIfNoExit(msgInner.getTopic(), popCheckPoint.getCId());			
",
,
			fromLine:"			130",
			toLine:"			131",
			content:"
			        PopMetricsManager.incPopReviveRetryMessageCount(popCheckPoint, putMessageResult.getPutMessageStatus());
			        if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			            putMessageResult.getAppendMessageResult().getStatus() != AppendMessageStatus.PUT_OK) {			
",
,
			fromLine:"			140",
			toLine:"			143",
			content:"
			        }
			        this.brokerController.getPopInflightMessageCounter().decrementInFlightMessageNum(popCheckPoint);
			        this.brokerController.getBrokerStatsManager().incBrokerPutNums(popCheckPoint.getTopic(), 1);
			        this.brokerController.getBrokerStatsManager().incTopicPutNums(msgInner.getTopic());			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    private void initPopRetryOffset(String topic, String consumerGroup) {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        if (offset < 0) {			
",
,
			fromLine:"			156",
			toLine:"			157",
			content:"
			    private void addRetryTopicIfNoExit(String topic, String consumerGroup) {
			        if (brokerController != null) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            topicConfig.setTopicSysFlag(0);			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    protected List<MessageExt> getReviveMessage(long offset, int queueId) {			
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			        if (reachTail(pullResult, offset)) {
			            if (this.brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        } else if (pullResult.getPullStatus() == PullStatus.OFFSET_ILLEGAL || pullResult.getPullStatus() == PullStatus.NO_MATCHED_MSG) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			            if (!shouldRunPopRevive) {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			            }			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
						
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        String brokerName) {			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
						
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			        boolean deCompressBody) {			
",
,
			fromLine:"			213",
			toLine:"			218",
			content:"
			                    pullStatus = PullStatus.FOUND;
			                    foundList = decodeMsgList(getMessageResult, deCompressBody);
			                    brokerController.getBrokerStatsManager().incGroupGetNums(group, topic, getMessageResult.getMessageCount());
			                    brokerController.getBrokerStatsManager().incGroupGetSize(group, topic, getMessageResult.getBufferTotalSize());
			                    brokerController.getBrokerStatsManager().incBrokerGetNums(topic, getMessageResult.getMessageCount());
			                    brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId,			
",
,
			fromLine:"			221",
			toLine:"			223",
			content:"
			                    Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                        .put(LABEL_TOPIC, topic)
			                        .put(LABEL_CONSUMER_GROUP, group)			
",
,
			fromLine:"			231",
			toLine:"			232",
			content:"
			                    pullStatus = PullStatus.NO_MATCHED_MSG;
			                    POP_LOGGER.debug("no matched message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			235",
			toLine:"			236",
			content:"
			                case NO_MESSAGE_IN_QUEUE:
			                    POP_LOGGER.debug("no new message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			244",
			toLine:"			245",
			content:"
			                    pullStatus = PullStatus.OFFSET_ILLEGAL;
			                    POP_LOGGER.warn("offset illegal. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			260",
			toLine:"			263",
			content:"
			        } else {
			            long maxQueueOffset = brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId);
			            if (maxQueueOffset > offset) {
			                POP_LOGGER.error("get message from store return null. topic={}, groupId={}, requestOffset={}, maxQueueOffset={}",			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			                    if (bb == null) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			                    }			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			                    if (msgExt == null) {			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        long endTime = 0;			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			        consumeReviveObj.oldOffset = oldOffset;			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			            if (!shouldRunPopRevive) {			
",
,
			fromLine:"			318",
			toLine:"			319",
			content:"
			                long old = endTime;
			                long timerDelay = brokerController.getMessageStore().getTimerMessageStore().getDequeueBehind();			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			                }			
",
,
			fromLine:"			343",
			toLine:"			344",
			content:"
			            }
			            if (System.currentTimeMillis() - startScanTime > brokerController.getBrokerConfig().getReviveScanTime()) {			
",
,
			fromLine:"			350",
			toLine:"			351",
			content:"
			                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
			                    if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			365",
			toLine:"			366",
			content:"
			                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
			                    if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			                    if (point == null) {			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			                        } else {			
",
,
			fromLine:"			389",
			toLine:"			390",
			content:"
			                    String raw = new String(messageExt.getBody(), DataConverter.CHARSET_UTF8);
			                    if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
			                    if (point == null) {			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			                            } else {			
",
,
			fromLine:"			429",
			toLine:"			429",
			content:"
			        long ackWaitTime = System.currentTimeMillis() - messageExt.getDeliverTimeMs();			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			            PopCheckPoint mockPoint = createMockCkForAck(ackMsg, messageExt.getQueueOffset());			
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			        ArrayList<PopCheckPoint> sortList = consumeReviveObj.genSortList();			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			        if (sortList.size() != 0) {			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			            if (!shouldRunPopRevive) {			
",
,
			fromLine:"			475",
			toLine:"			476",
			content:"
			            String normalTopic = KeyBuilder.parseNormalTopic(popCheckPoint.getTopic(), popCheckPoint.getCId());
			            if (brokerController.getTopicConfigManager().selectTopicConfig(normalTopic) == null) {			
",
,
			fromLine:"			480",
			toLine:"			481",
			content:"
			            }
			            if (null == brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(popCheckPoint.getCId())) {			
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			            if (!shouldRunPopRevive) {			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
			            }			
",
,
			fromLine:"			513",
			toLine:"			513",
			content:"
			        if (!shouldRunPopRevive) {			
",
,
			fromLine:"			525",
			toLine:"			525",
			content:"
			            long msgOffset = popCheckPoint.ackOffsetByIndex((byte) j);			
",
,
			fromLine:"			530",
			toLine:"			530",
			content:"
			                    if (message == null) {			
",
,
			fromLine:"			564",
			toLine:"			564",
			content:"
			                    if (pair.getObject2()) {			
",
,
			fromLine:"			585",
			toLine:"			586",
			content:"
			        newCk.addDiff(0);
			        MessageExtBrokerInner ckMsg = brokerController.getPopMessageProcessor().buildCkMsg(newCk, queueId);			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			        }			
",
,
			fromLine:"			604",
			toLine:"			604",
			content:"
			        }			
",
,
			fromLine:"			613",
			toLine:"			614",
			content:"
			            try {
			                if (System.currentTimeMillis() < brokerController.getShouldStartTime()) {			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			                }			
",
,
			fromLine:"			620",
			toLine:"			620",
			content:"
			                if (!shouldRunPopRevive) {			
",
,
			fromLine:"			624",
			toLine:"			625",
			content:"
			
			                if (!brokerController.getMessageStore().getMessageStoreConfig().isTimerWheelEnable()) {			
",
,
			fromLine:"			629",
			toLine:"			629",
			content:"
						
",
,
			fromLine:"			634",
			toLine:"			634",
			content:"
			                if (!shouldRunPopRevive) {			
",
,
			fromLine:"			650",
			toLine:"			650",
			content:"
						
",
,
			fromLine:"			654",
			toLine:"			656",
			content:"
			                if (sortList == null || sortList.isEmpty()) {
			                    POP_LOGGER.info("reviveQueueId={}, has no new msg, take a rest {}", queueId, slow);
			                    this.waitForRunning(slow * brokerController.getBrokerConfig().getReviveInterval());			
",
,
			fromLine:"			662",
			toLine:"			662",
			content:"
			            } catch (Throwable e) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.broker.metrics;
			
			import java.util.Map;
			import java.util.Set;
			import java.util.function.Consumer;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.broker.processor.PopBufferMergeService;
			import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.DefaultMessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			
			public class ConsumerLagCalculator {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    private final SubscriptionGroupManager subscriptionGroupManager;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public ConsumerLagCalculator(BrokerController brokerController) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        this.subscriptionGroupManager = brokerController.getSubscriptionGroupManager();			
",
,
			fromLine:"			77",
			toLine:"			79",
			content:"
			    private static class ProcessGroupInfo {
			        public String group;
			        public String topic;			
",
,
			fromLine:"			84",
			toLine:"			86",
			content:"
			            String retryTopic) {
			            this.group = group;
			            this.topic = topic;			
",
,
			fromLine:"			92",
			toLine:"			94",
			content:"
			    public static class BaseCalculateResult {
			        public String group;
			        public String topic;			
",
,
			fromLine:"			97",
			toLine:"			99",
			content:"
			        public BaseCalculateResult(String group, String topic, boolean isRetry) {
			            this.group = group;
			            this.topic = topic;			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			            Set<String> topics;			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			                // skip no perm topic			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			                if (isPop) {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			                    if (retryTopicConfig != null) {			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			                    }			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			                        if (retryTopicConfigV1 != null) {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        processAllGroup(info -> {			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
						
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			222",
			content:"
			
			            if (info.isPop) {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			237",
			content:"
			        processAllGroup(info -> {
			            CalculateInflightResult result = new CalculateInflightResult(info.group, info.topic, false);			
",
,
			fromLine:"			244",
			toLine:"			245",
			content:"
			
			            if (info.isPop) {			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
						
",
,
			fromLine:"			259",
			toLine:"			259",
			content:"
			        processAllGroup(info -> {			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
						
",
,
			fromLine:"			264",
			toLine:"			265",
			content:"
			
			            if (info.isPop) {			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
						
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
						
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
						
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			        } else {			
",
,
			fromLine:"			300",
			toLine:"			301",
			content:"
			
			    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {			
",
,
			fromLine:"			306",
			toLine:"			307",
			content:"
			
			        if (isPop) {			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			            if (pullOffset < 0) {			
",
,
			fromLine:"			314",
			toLine:"			315",
			content:"
			            }
			            long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			            long consumerOffset = pullOffset - inFlightNum;			
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
						
",
,
			fromLine:"			326",
			toLine:"			327",
			content:"
			
			        long lag = calculateMessageCount(group, topic, queueId, consumerOffset, brokerOffset);			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
						
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
						
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
						
",
,
			fromLine:"			342",
			toLine:"			342",
			content:"
			            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			        } else {			
",
,
			fromLine:"			357",
			toLine:"			360",
			content:"
			
			    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {
			        if (isPop) {
			            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			            if (pullOffset < 0) {			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			            if (pullOffset < 0) {			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			            }			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
						
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
						
",
,
			fromLine:"			381",
			toLine:"			382",
			content:"
			
			        long inflight = calculateMessageCount(group, topic, queueId, commitOffset, pullOffset);			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
						
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
						
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
						
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			        } else {			
",
,
			fromLine:"			405",
			toLine:"			406",
			content:"
			
			    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {			
",
,
			fromLine:"			412",
			toLine:"			413",
			content:"
			        long pullOffset;
			        if (isPop) {			
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
			            if (pullOffset < 0) {			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
			        } else {			
",
,
			fromLine:"			427",
			toLine:"			427",
			content:"
						
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
						
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			        long storeTimeStamp = Long.MAX_VALUE;
			        if (offset >= 0) {			
",
,
			fromLine:"			439",
			toLine:"			440",
			content:"
			
			    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
						
",
,
			fromLine:"			444",
			toLine:"			445",
			content:"
			            SubscriptionData subscriptionData = null;
			            if (brokerConfig.isUseStaticSubscription()) {			
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
			                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {			
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			                            try {			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			                            } catch (Exception e) {			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			            } else {			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			                if (consumerGroupInfo != null) {			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
			                    && !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {			
",
,
			fromLine:"			472",
			toLine:"			473",
			content:"
			                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
			                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/BroadcastOffsetManager.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import java.time.Duration;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.ServiceThread;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        BroadcastOffsetData broadcastOffsetData = offsetStoreMap.computeIfAbsent(			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			            if (broadcastTimedOffsetStore == null) {			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			            broadcastTimedOffsetStore.timestamp = System.currentTimeMillis();
			            broadcastTimedOffsetStore.fromProxy = fromProxy;			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			     */			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			        if (broadcastOffsetData == null) {
			            if (fromProxy && requestOffset < 0) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        final AtomicLong offset = new AtomicLong(-1L);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            if (offsetStore == null) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			                // means proxy need a init offset to pull message			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        if (offsetStore != null) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			            storeOffset =			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        if (storeOffset < 0) {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			            } else {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			            queueMinOffset.forEach((queueId, offset) ->			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/BroadcastOffsetManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import java.time.Duration;
			import java.util.HashSet;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.store.MessageStore;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.stubbing.Answer;
			
			import static org.awaitility.Awaitility.await;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        doAnswer((Answer<Long>) mock -> commitOffset.get())			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            return null;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        doAnswer((Answer<Long>) mock -> maxOffset.get())			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        onlineClientIdSet.add("client1");			
",
,
			fromLine:"			91",
			toLine:"			92",
			content:"
			        Assert.assertEquals(-1, offset);
			        broadcastOffsetManager.updateOffset("group", "topic", 0, 10, "client1", false);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        Assert.assertEquals(-1, offset);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        // client1 connect to proxy			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			        Assert.assertEquals(11, offset);
			        broadcastOffsetManager.updateOffset("group", "topic", 0, 11, "client1", true);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        Assert.assertEquals(-1, offset);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        onlineClientIdSet.add("client2");			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			        Assert.assertEquals(12, offset);
			        broadcastOffsetManager.updateOffset("group", "topic", 0, 12, "client2", true);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        Assert.assertEquals(-1, offset);			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        // client1 connect to broker			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			        Assert.assertEquals(12, offset);
			        broadcastOffsetManager.updateOffset("group", "topic", 0, 12, "client1", false);			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        onlineClientIdSet.add("client3");			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        Assert.assertEquals(-1, offset);			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        onlineClientIdSet.add("client1");			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        onlineClientIdSet.add("client1");			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManager.java:
		[
			fromLine:"			16",
			toLine:"			40",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			
			import com.google.common.base.Strings;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			197",
			toLine:"			198",
			content:"
			        // topic@group
			        String key = topic + TOPIC_GROUP_SEPARATOR + group;			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
						
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			            map = new ConcurrentHashMap<>(32);			
",
,
			fromLine:"			208",
			toLine:"			210",
			content:"
			        } else {
			            Long storeOffset = map.put(queueId, offset);
			            if (storeOffset != null && offset < storeOffset) {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
						
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			        // topic@group			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			            key, k -> new ConcurrentHashMap<>(32));			
",
,
			fromLine:"			231",
			toLine:"			233",
			content:"
			     * Otherwise, return the current consume offset in the offset store.
			     * @param group Consumer group
			     * @param topic Topic			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			     */			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        // topic@group			
",
,
			fromLine:"			242",
			toLine:"			243",
			content:"
			            Map<Integer, Long> reset = resetOffsetTable.get(key);
			            if (null != reset && reset.containsKey(queueId)) {			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			        if (null != map) {			
",
,
			fromLine:"			260",
			toLine:"			262",
			content:"
			     * Query pull offset in pullOffsetTable
			     * @param group Consumer group
			     * @param topic Topic			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			     */			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			        // topic@group			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        if (null != map) {			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
			        if (offset == null) {			
",
,
			fromLine:"			360",
			toLine:"			361",
			content:"
			
			    public void cloneOffset(final String srcGroup, final String destGroup, final String topic) {			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			        if (offsets != null) {			
",
,
			fromLine:"			391",
			toLine:"			392",
			content:"
			
			    public void assignResetOffset(String topic, String group, int queueId, long offset) {			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			            LOG.warn("Illegal arguments when assigning reset offset. Topic={}, group={}, queueId={}, offset={}",			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
						
",
,
			fromLine:"			408",
			toLine:"			408",
			content:"
						
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
			        LOG.debug("Reset offset OK. Topic={}, group={}, queueId={}, resetOffset={}",			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			        if (null != currentOffsetMap) {			
",
,
			fromLine:"			422",
			toLine:"			423",
			content:"
			
			    public boolean hasOffsetReset(String topic, String group, int queueId) {			
",
,
			fromLine:"			428",
			toLine:"			428",
			content:"
			        }			
",
,
			fromLine:"			431",
			toLine:"			432",
			content:"
			
			    public Long queryThenEraseResetOffset(String topic, String group, Integer queueId) {			
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
			        } else {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManager.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			39",
			toLine:"			41",
			content:"
			    @Override
			    public long queryOffset(final String group, final String topic, final int queueId) {
			        if (!MixAll.isLmq(group)) {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			        // topic@group			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    @Override			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        final long offset) {
			        if (!MixAll.isLmq(group)) {			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			        // topic@group
			        String key = topic + TOPIC_GROUP_SEPARATOR + group;			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/RocksDBLmqConsumerOffsetManager.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			    @Override
			    public long queryOffset(final String group, final String topic, final int queueId) {
			        if (!MixAll.isLmq(group)) {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        // topic@group			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    @Override			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        final long offset) {
			        if (!MixAll.isLmq(group)) {			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        // topic@group
			        String key = topic + TOPIC_GROUP_SEPARATOR + group;			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/AckMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.BitSet;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.PopMetricsManager;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BatchAck;
			import org.apache.rocketmq.remoting.protocol.body.BatchAckMessageRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.BatchAckMsg;
			
			public class AckMessageProcessor implements NettyRequestProcessor {
			    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
			    private final BrokerController brokerController;			
",
,
			fromLine:"			57",
			toLine:"			61",
			content:"
			    public AckMessageProcessor(final BrokerController brokerController) {
			        this.brokerController = brokerController;
			        this.reviveTopic = PopAckConstants.buildClusterReviveTopic(this.brokerController.getBrokerConfig().getBrokerClusterName());
			        this.popReviveServices = new PopReviveService[this.brokerController.getBrokerConfig().getReviveQueueNum()];
			        for (int i = 0; i < this.brokerController.getBrokerConfig().getReviveQueueNum(); i++) {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			                                          RemotingCommand request) throws RemotingCommandException {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			114",
			toLine:"			116",
			content:"
			        final RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, null);
			        response.setOpaque(request.getOpaque());
			        if (request.getCode() == RequestCode.ACK_MESSAGE) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			            if (null == topicConfig) {			
",
,
			fromLine:"			128",
			toLine:"			129",
			content:"
			                String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
			                        requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());			
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			
			            long minOffset = this.brokerController.getMessageStore().getMinOffsetInQueue(requestHeader.getTopic(), requestHeader.getQueueId());			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			                        requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getOffset(), minOffset, maxOffset);			
",
,
			fromLine:"			146",
			toLine:"			149",
			content:"
			
			            appendAck(requestHeader, null, response, channel, null);
			        } else if (request.getCode() == RequestCode.BATCH_ACK_MESSAGE) {
			            if (request.getBody() != null) {			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			            for (BatchAck bAck : reqBody.getAcks()) {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        } else {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			            if (rqId == KeyBuilder.POP_ORDER_REVIVE_QUEUE) {			
",
,
			fromLine:"			206",
			toLine:"			207",
			content:"
			
			            long minOffset = this.brokerController.getMessageStore().getMinOffsetInQueue(topic, qId);			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			            if (minOffset == -1 || maxOffset == -1) {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			                if (rqId == KeyBuilder.POP_ORDER_REVIVE_QUEUE) {			
",
,
			fromLine:"			237",
			toLine:"			238",
			content:"
			
			        this.brokerController.getBrokerStatsManager().incBrokerAckNums(ackCount);			
",
,
			fromLine:"			248",
			toLine:"			249",
			content:"
			
			        if (this.brokerController.getPopMessageProcessor().getPopBufferMergeService().addAk(rqId, ackMsg)) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();			
",
,
			fromLine:"			265",
			toLine:"			266",
			content:"
			        msgInner.setBornTimestamp(System.currentTimeMillis());
			        msgInner.setBornHost(this.brokerController.getStoreHost());			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			                && putMessageResult.getPutMessageStatus() != PutMessageStatus.SLAVE_NOT_AVAILABLE) {			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        PopMetricsManager.incPopReviveAckPutCount(ackMsg, putMessageResult.getPutMessageStatus());			
",
,
			fromLine:"			281",
			toLine:"			284",
			content:"
			
			    protected void ackOrderly(String topic, String consumeGroup, int qId, long ackOffset, long popTime, long invisibleTime, Channel channel, RemotingCommand response) {
			        String lockKey = topic + PopAckConstants.SPLIT + consumeGroup + PopAckConstants.SPLIT + qId;
			        long oldOffset = this.brokerController.getConsumerOffsetManager().queryOffset(consumeGroup, topic, qId);			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        }			
",
,
			fromLine:"			290",
			toLine:"			291",
			content:"
			        try {
			            oldOffset = this.brokerController.getConsumerOffsetManager().queryOffset(consumeGroup, topic, qId);			
",
,
			fromLine:"			294",
			toLine:"			297",
			content:"
			            }
			            long nextOffset = brokerController.getConsumerOrderInfoManager().commitAndNext(
			                topic, consumeGroup,
			                qId, ackOffset,			
",
,
			fromLine:"			299",
			toLine:"			302",
			content:"
			            if (nextOffset > -1) {
			                if (!this.brokerController.getConsumerOffsetManager().hasOffsetReset(
			                    topic, consumeGroup, qId)) {
			                    this.brokerController.getConsumerOffsetManager().commitOffset(channel.remoteAddress().toString(),			
",
,
			fromLine:"			304",
			toLine:"			307",
			content:"
			                }
			                if (!this.brokerController.getConsumerOrderInfoManager().checkBlock(null, topic,
			                    consumeGroup, qId, invisibleTime)) {
			                    this.brokerController.getPopMessageProcessor().notifyMessageArriving(			
",
,
			fromLine:"			311",
			toLine:"			314",
			content:"
			                String errorInfo = String.format("offset is illegal, key:%s, old:%d, commit:%d, next:%d, %s",
			                    lockKey, oldOffset, ackOffset, nextOffset, channel.remoteAddress());
			                POP_LOGGER.warn(errorInfo);
			                response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			        } finally {			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			        }			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.List;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.rpc.RpcClientUtils;
			import org.apache.rocketmq.remoting.rpc.RpcRequest;
			import org.apache.rocketmq.remoting.rpc.RpcResponse;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
						
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			            // Note, ignoring this update offset request			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			                if (mappingItem.getBname().equals(mappingDetail.getBname())) {			
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			        long offset =			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			            } else if (minOffset <= 0			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PopBufferMergeService.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.LinkedBlockingDeque;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.PopMetricsManager;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.BatchAckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
						
",
,
			fromLine:"			181",
			toLine:"			182",
			content:"
			
			    public long getLatestOffset(String topic, String group, int queueId) {			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			        try {			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			            }			
",
,
			fromLine:"			425",
			toLine:"			428",
			content:"
			     *
			     * @param point
			     * @param reviveQueueId
			     * @param reviveQueueOffset			
",
,
			fromLine:"			431",
			toLine:"			432",
			content:"
			     */
			    public boolean addCkJustOffset(PopCheckPoint point, int reviveQueueId, long reviveQueueOffset, long nextBeginOffset) {			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
						
",
,
			fromLine:"			457",
			toLine:"			463",
			content:"
			        ck.setNum((byte) 0);
			        ck.setPopTime(popTime);
			        ck.setInvisibleTime(invisibleTime);
			        ck.setStartOffset(startOffset);
			        ck.setCId(group);
			        ck.setTopic(topic);
			        ck.setQueueId(queueId);			
",
,
			fromLine:"			465",
			toLine:"			465",
			content:"
						
",
,
			fromLine:"			474",
			toLine:"			474",
			content:"
						
",
,
			fromLine:"			484",
			toLine:"			484",
			content:"
			        long now = System.currentTimeMillis();			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			            if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
			        if (this.counter.get() > brokerController.getBrokerConfig().getPopCkMaxBufferSize()) {			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,
			fromLine:"			634",
			toLine:"			634",
			content:"
			        ackMsg.setPopTime(point.getPopTime());			
",
,
			fromLine:"			674",
			toLine:"			674",
			content:"
			        batchAckMsg.setPopTime(point.getPopTime());			
",
,
			fromLine:"			707",
			toLine:"			707",
			content:"
			        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();			
",
,
			fromLine:"			775",
			toLine:"			775",
			content:"
			    public class PopCheckPointWrapper {			
",
,
			fromLine:"			777",
			toLine:"			777",
			content:"
			        // -1: not stored, >=0: stored, Long.MAX: storing.			
",
,
			fromLine:"			783",
			toLine:"			783",
			content:"
			        private final AtomicInteger toStoreBits;			
",
,
			fromLine:"			791",
			toLine:"			792",
			content:"
			            long nextBeginOffset) {
			            this.reviveQueueId = reviveQueueId;			
",
,
			fromLine:"			796",
			toLine:"			796",
			content:"
			            this.toStoreBits = new AtomicInteger(0);			
",
,
			fromLine:"			805",
			toLine:"			806",
			content:"
			            boolean justOffset) {
			            this.reviveQueueId = reviveQueueId;			
",
,
			fromLine:"			810",
			toLine:"			810",
			content:"
			            this.toStoreBits = new AtomicInteger(0);			
",
,
			fromLine:"			817",
			toLine:"			817",
			content:"
			        public int getReviveQueueId() {			
",
,
			fromLine:"			821",
			toLine:"			821",
			content:"
			        public long getReviveQueueOffset() {			
",
,
			fromLine:"			829",
			toLine:"			829",
			content:"
			        public void setReviveQueueOffset(long reviveQueueOffset) {			
",
,
			fromLine:"			845",
			toLine:"			845",
			content:"
			        public long getNextBeginOffset() {			
",
,
			fromLine:"			867",
			toLine:"			868",
			content:"
			            final StringBuilder sb = new StringBuilder("CkWrap{");
			            sb.append("rq=").append(reviveQueueId);			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			            sb.append(", sBits=").append(toStoreBits);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridge.java:
		[
			fromLine:"			16",
			toLine:"			59",
			content:"
			 */
			package org.apache.rocketmq.broker.transaction.queue;
			
			import io.opentelemetry.api.common.Attributes;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public long fetchConsumeOffset(MessageQueue mq) {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public void updateConsumeOffset(MessageQueue mq, long offset) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        SubscriptionData sub = new SubscriptionData(topic, "*");			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        SubscriptionData sub = new SubscriptionData(topic, "*");			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        SubscriptionData sub) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			                    foundList = decodeMsgList(getMessageResult);			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                        getMessageResult.getMessageCount());			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			                        getMessageResult.getBufferTotalSize());			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			                    }			
",
,
			fromLine:"			149",
			toLine:"			151",
			content:"
			                    Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                        .put(LABEL_TOPIC, topic)
			                        .put(LABEL_CONSUMER_GROUP, group)			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			                    LOGGER.warn("No matched message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			                    LOGGER.warn("No new message. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			                    LOGGER.warn("Offset illegal. GetMessageStatus={}, topic={}, groupId={}, requestOffset={}",			
",
,
			fromLine:"			186",
			toLine:"			187",
			content:"
			        } else {
			            LOGGER.error("Get message from store return null. topic={}, groupId={}, requestOffset={}", topic, group,			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            for (ByteBuffer bb : messageBufferList) {			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
			        if (topicConfig == null) {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/PopReviveServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import java.net.SocketAddress;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    private static final String GROUP = "group";			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    @Mock			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    @Mock			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    @Mock			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    @Mock			
",
,
			fromLine:"			86",
			toLine:"			91",
			content:"
			
			        when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
			        when(brokerController.getConsumerOffsetManager()).thenReturn(consumerOffsetManager);
			        when(brokerController.getMessageStore()).thenReturn(messageStore);
			        when(brokerController.getTopicConfigManager()).thenReturn(topicConfigManager);
			        when(brokerController.getSubscriptionGroupManager()).thenReturn(subscriptionGroupManager);			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			            // put a pair of ck and ack			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			                long popTime = basePopTime + i;			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        ArgumentCaptor<Long> commitOffsetCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
						
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            // put a pair of ck and ack			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                long popTime = basePopTime + i;			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        ArgumentCaptor<Long> commitOffsetCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
						
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			                long popTime = basePopTime + i;			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        ArgumentCaptor<Long> commitOffsetCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
						
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			        PopCheckPoint ck = new PopCheckPoint();
			        ck.setStartOffset(startOffset);			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			        ck.setCId(GROUP);			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			        ck.setBitMap(0);			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			        ackMsg.setConsumerGroup(GROUP);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/LmqConsumerOffsetManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.broker.offset;
			
			import java.io.File;
			import java.util.Map;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.subscription.LmqSubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.LmqTopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Test;
			import org.mockito.Spy;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        assertThat(integerLongMap.get(0)).isEqualTo(10L);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			
			        lmqConsumerOffsetManager.commitOffset("127.0.0.1", lmqGroupName, lmqTopicName, 0, 10L);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/ChangeInvisibleTimeProcessor.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import com.alibaba.fastjson.JSON;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.PopMetricsManager;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			
			public class ChangeInvisibleTimeProcessor implements NettyRequestProcessor {
			    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
			    private final BrokerController brokerController;			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			    public ChangeInvisibleTimeProcessor(final BrokerController brokerController) {
			        this.brokerController = brokerController;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        RemotingCommand request) throws RemotingCommandException {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        boolean brokerAllowSuspend) throws RemotingCommandException {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        response.setCode(ResponseCode.SUCCESS);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        final ChangeInvisibleTimeResponseHeader responseHeader = (ChangeInvisibleTimeResponseHeader) response.readCustomHeader();			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			            String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",
			                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());			
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			        }
			        long minOffset = this.brokerController.getMessageStore().getMinOffsetInQueue(requestHeader.getTopic(), requestHeader.getQueueId());			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        long now = System.currentTimeMillis();			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            && ckResult.getPutMessageStatus() != PutMessageStatus.SLAVE_NOT_AVAILABLE) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        long popTime = ExtraInfoUtil.getPopTime(extraInfo);			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        }			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        try {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			            long nextVisibleTime = System.currentTimeMillis() + requestHeader.getInvisibleTime();			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        } finally {			
",
,
			fromLine:"			174",
			toLine:"			175",
			content:"
			
			        this.brokerController.getBrokerStatsManager().incBrokerAckNums(1);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
						
",
,
			fromLine:"			186",
			toLine:"			187",
			content:"
			        msgInner.setBornTimestamp(System.currentTimeMillis());
			        msgInner.setBornHost(this.brokerController.getStoreHost());			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			            && putMessageResult.getPutMessageStatus() != PutMessageStatus.SLAVE_NOT_AVAILABLE) {			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
						
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			        ck.setNum((byte) 1);			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        ck.setInvisibleTime(requestHeader.getInvisibleTime());			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			        ck.setTopic(requestHeader.getTopic());			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        ck.addDiff(0);			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			        msgInner.setBody(JSON.toJSONString(ck).getBytes(DataConverter.CHARSET_UTF8));			
",
,
			fromLine:"			222",
			toLine:"			223",
			content:"
			        msgInner.setBornTimestamp(System.currentTimeMillis());
			        msgInner.setBornHost(this.brokerController.getStoreHost());			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));			
",
,
			fromLine:"			229",
			toLine:"			230",
			content:"
			
			        if (brokerController.getBrokerConfig().isEnablePopLog()) {			
",
,
			fromLine:"			237",
			toLine:"			238",
			content:"
			            if (putMessageResult.isOk()) {
			                this.brokerController.getBrokerStatsManager().incBrokerCkNums(1);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    @Mock			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    @Spy			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    @Mock			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			
			    private String topic = "FooBar";			
",
,
			fromLine:"			58",
			toLine:"			65",
			content:"
			    public void init() {
			        brokerController.setMessageStore(messageStore);
			        TopicConfigManager topicConfigManager = new TopicConfigManager(brokerController);
			        topicConfigManager.getTopicConfigTable().put(topic, new TopicConfig(topic));
			        when(brokerController.getTopicConfigManager()).thenReturn(topicConfigManager);
			        SubscriptionGroupManager subscriptionGroupManager = new SubscriptionGroupManager(brokerController);
			        subscriptionGroupManager.getSubscriptionGroupTable().put(group, new SubscriptionGroupConfig());
			        when(brokerController.getSubscriptionGroupManager()).thenReturn(subscriptionGroupManager);			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			    public void testUpdateConsumerOffset_InvalidTopic() throws Exception {
			        RemotingCommand request = buildUpdateConsumerOffsetRequest(group, "InvalidTopic", 0, 0);			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			    public void testUpdateConsumerOffset_GroupNotExist() throws Exception {
			        RemotingCommand request = buildUpdateConsumerOffsetRequest("NotExistGroup", topic, 0, 0);			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			89",
			content:"
			        UpdateConsumerOffsetRequestHeader requestHeader = new UpdateConsumerOffsetRequestHeader();
			        requestHeader.setConsumerGroup(group);
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/processor/BaseProcessorTest.java:
		[
			fromLine:"			17",
			toLine:"			45",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import java.nio.charset.StandardCharsets;
			import java.util.Random;
			import java.util.UUID;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.message.MessageService;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.proxy.service.transaction.TransactionService;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.junit.Ignore;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			    protected static MessageExt createMessageExt(String topic, String tags, int reconsumeTimes, long invisibleTime) {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
						
",
,
			fromLine:"			94",
			toLine:"			96",
			content:"
			        MessageExt messageExt = new MessageExt();
			        messageExt.setTopic(topic);
			        messageExt.setTags(tags);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_POP_CK,			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java:
		[
			fromLine:"			17",
			toLine:"			77",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import com.google.common.collect.Sets;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.Executors;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertSame;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyList;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.never;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			99",
			toLine:"			101",
			content:"
			        List<MessageExt> messageExtList = new ArrayList<>();
			        messageExtList.add(createMessageExt(TOPIC, "noMatch", 0, invisibleTime));
			        messageExtList.add(createMessageExt(TOPIC, tag, 0, invisibleTime));			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        PopResult innerPopResult = new PopResult(PopStatus.FOUND, messageExtList);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        ArgumentCaptor<String> ackMessageIdArgumentCaptor = ArgumentCaptor.forClass(String.class);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        ArgumentCaptor<String> toDLQMessageIdArgumentCaptor = ArgumentCaptor.forClass(String.class);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			            ConsumeInitMode.MAX,			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			    public void testAckMessage() throws Throwable {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			        innerAckResult.setStatus(AckStatus.OK);			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        for (int i = 0; i < 3; i++) {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        String errThrowBrokerName = "errThrowBrokerName";			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			        for (int i = 0; i < msgNum; i++) {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			        for (int i = 0; i < msgNum; i++) {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        // for this message, will throw exception in batchAckMessage			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			            return CompletableFuture.completedFuture(ackResult);			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			    public void testChangeInvisibleTime() throws Throwable {			
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
			        innerAckResult.setStatus(AckStatus.OK);			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
						
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], "127.0.0.1"));			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq2)));			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], "127.0.0.1"));			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet()));			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], "127.0.0.1"));			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			        future.completeExceptionally(new MQBrokerException(1, "err"));			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			            .thenReturn(future);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ExtraInfoUtil.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageConst;
			
			public class ExtraInfoUtil {
			    private static final String NORMAL_TOPIC = "0";
			    private static final String RETRY_TOPIC = "1";			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        }			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            return KeyBuilder.buildPopRetryTopicV1(topic, cid);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public static String getRealTopic(String topic, String cid, String retry) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			            return topic;			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            return KeyBuilder.buildPopRetryTopicV1(topic, cid);			
",
,
			fromLine:"			120",
			toLine:"			123",
			content:"
			
			    public static String buildExtraInfo(long ckQueueOffset, long popTime, long invisibleTime, int reviveQid, String topic, String brokerName, int queueId) {
			        String t = getRetry(topic);
			        return ckQueueOffset + MessageConst.KEY_SEPARATOR + popTime + MessageConst.KEY_SEPARATOR + invisibleTime + MessageConst.KEY_SEPARATOR + reviveQid + MessageConst.KEY_SEPARATOR + t			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			128",
			toLine:"			132",
			content:"
			                                        long msgQueueOffset) {
			        String t = getRetry(topic);
			        return ckQueueOffset
			            + MessageConst.KEY_SEPARATOR + popTime + MessageConst.KEY_SEPARATOR + invisibleTime
			            + MessageConst.KEY_SEPARATOR + reviveQid + MessageConst.KEY_SEPARATOR + t			
",
,
			fromLine:"			136",
			toLine:"			138",
			content:"
			
			    public static void buildStartOffsetInfo(StringBuilder stringBuilder, String topic, int queueId, long startOffset) {
			        if (stringBuilder == null) {			
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			
			        if (stringBuilder.length() > 0) {			
",
,
			fromLine:"			145",
			toLine:"			147",
			content:"
			
			        stringBuilder.append(getRetry(topic))
			            .append(MessageConst.KEY_SEPARATOR).append(queueId)			
",
,
			fromLine:"			150",
			toLine:"			152",
			content:"
			
			    public static void buildQueueIdOrderCountInfo(StringBuilder stringBuilder, String topic, int queueId, int orderCount) {
			        if (stringBuilder == null) {			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			
			        if (stringBuilder.length() > 0) {			
",
,
			fromLine:"			159",
			toLine:"			161",
			content:"
			
			        stringBuilder.append(getRetry(topic))
			                .append(MessageConst.KEY_SEPARATOR).append(queueId)			
",
,
			fromLine:"			164",
			toLine:"			166",
			content:"
			
			    public static void buildQueueOffsetOrderCountInfo(StringBuilder stringBuilder, String topic, long queueId, long queueOffset, int orderCount) {
			        if (stringBuilder == null) {			
",
,
			fromLine:"			169",
			toLine:"			170",
			content:"
			
			        if (stringBuilder.length() > 0) {			
",
,
			fromLine:"			173",
			toLine:"			175",
			content:"
			
			        stringBuilder.append(getRetry(topic))
			            .append(MessageConst.KEY_SEPARATOR).append(getQueueOffsetKeyValueKey(queueId, queueOffset))			
",
,
			fromLine:"			178",
			toLine:"			180",
			content:"
			
			    public static void buildMsgOffsetInfo(StringBuilder stringBuilder, String topic, int queueId, List<Long> msgOffsets) {
			        if (stringBuilder == null) {			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			
			        if (stringBuilder.length() > 0) {			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			
			        stringBuilder.append(getRetry(topic))			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        for (int i = 0; i < msgOffsets.size(); i++) {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			            if (i < msgOffsets.size() - 1) {			
",
,
			fromLine:"			297",
			toLine:"			298",
			content:"
			
			    public static String getQueueOffsetMapKey(String topic, long queueId, long queueOffset) {			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			    private static String getRetry(String topic) {			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        if (KeyBuilder.isPopRetryTopicV2(topic)) {			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			        } else if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/message/LocalMessageService.java:
		[
			fromLine:"			16",
			toLine:"			79",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.message;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.BitSet;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.lang3.NotImplementedException;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.service.channel.ChannelManager;
			import org.apache.rocketmq.proxy.service.channel.InvocationContext;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BatchAck;
			import org.apache.rocketmq.remoting.protocol.body.BatchAckMessageRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    @Override			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        }			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			    @Override			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        ConsumerSendMsgBackRequestHeader requestHeader, long timeoutMillis) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        ChannelHandlerContext channelHandlerContext = channel.getChannelHandlerContext();			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			    @Override			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        CompletableFuture<Void> future = new CompletableFuture<>();			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        ChannelHandlerContext channelHandlerContext = channel.getChannelHandlerContext();			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    @Override			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			        PopMessageRequestHeader requestHeader, long timeoutMillis) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			                    ByteBuffer byteBuffer = ByteBuffer.wrap(r.getBody());			
",
,
			fromLine:"			269",
			toLine:"			270",
			content:"
			                        if (!map.containsKey(messageExt.getTopic() + messageExt.getQueueId())) {
			                            map.put(key, ExtraInfoUtil.buildExtraInfo(messageExt.getQueueOffset(), responseHeader.getPopTime(), responseHeader.getInvisibleTime(), responseHeader.getReviveQid(),			
",
,
			fromLine:"			283",
			toLine:"			284",
			content:"
			                            messageExt.getProperties().put(MessageConst.PROPERTY_POP_CK,
			                                ExtraInfoUtil.buildExtraInfo(startOffsetInfo.get(key), responseHeader.getPopTime(), responseHeader.getInvisibleTime(),			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			                    messageExt.setBrokerName(messageExt.getBrokerName());			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			    @Override			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader, long timeoutMillis) {			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        ChannelHandlerContext channelHandlerContext = channel.getChannelHandlerContext();			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			            ackResult.setExtraInfo(ReceiptHandle.builder()			
",
,
			fromLine:"			332",
			toLine:"			335",
			content:"
			                .reviveQueueId(responseHeader.getReviveQid())
			                .topicType(handle.getTopicType())
			                .brokerName(handle.getBrokerName())
			                .queueId(handle.getQueueId())			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			    @Override			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			        AckMessageRequestHeader requestHeader, long timeoutMillis) {			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			        ChannelHandlerContext channelHandlerContext = channel.getChannelHandlerContext();			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			    @Override			
",
,
			fromLine:"			385",
			toLine:"			386",
			content:"
			                BatchAck newBatchAck = new BatchAck();
			                newBatchAck.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			424",
			toLine:"			424",
			content:"
			    @Override			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			    @Override			
",
,
			fromLine:"			436",
			toLine:"			436",
			content:"
			    @Override			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			    @Override			
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
			    @Override			
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
			    @Override			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			    @Override			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			    @Override			
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
			    @Override			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/BaseActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2;
			
			import io.grpc.Metadata;
			import java.time.Duration;
			import java.util.Random;
			import java.util.UUID;
			import org.apache.rocketmq.proxy.common.ContextVariable;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.junit.Ignore;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			    protected static final Random RANDOM = new Random();
			    protected MessagingProcessor messagingProcessor;
			    protected GrpcClientSettingsManager grpcClientSettingsManager;			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			
			    protected static final String REMOTE_ADDR = "192.168.0.1:8080";			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			
			    protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			        super.before();
			        messagingProcessor = mock(MessagingProcessor.class);			
",
,
			fromLine:"			67",
			toLine:"			73",
			content:"
			
			        metadata.put(GrpcConstants.CLIENT_ID, CLIENT_ID);
			        metadata.put(GrpcConstants.LANGUAGE, JAVA);
			        metadata.put(GrpcConstants.REMOTE_ADDRESS, REMOTE_ADDR);
			        metadata.put(GrpcConstants.LOCAL_ADDRESS, LOCAL_ADDR);
			        when(messagingProcessor.getProxyRelayService()).thenReturn(proxyRelayService);
			        when(messagingProcessor.getMetadataService()).thenReturn(metadataService);			
",
,
			fromLine:"			78",
			toLine:"			81",
			content:"
			        return ProxyContext.create()
			            .withVal(ContextVariable.CLIENT_ID, CLIENT_ID)
			            .withVal(ContextVariable.LANGUAGE, JAVA)
			            .withVal(ContextVariable.REMOTE_ADDRESS, REMOTE_ADDR)			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			    protected static String buildReceiptHandle(String topic, long popTime, long invisibleTime) {			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			            RANDOM.nextInt(Integer.MAX_VALUE),
			            popTime,			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            0,			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriterTest.java:
		[
			fromLine:"			17",
			toLine:"			59",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.FilterType;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.Resource;
			import io.grpc.stub.StreamObserver;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        this.streamObserver = mock(StreamObserver.class);			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			        ArgumentCaptor<String> changeInvisibleTimeMsgIdCaptor = ArgumentCaptor.forClass(String.class);
			        doReturn(CompletableFuture.completedFuture(mock(AckResult.class))).when(this.messagingProcessor)			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			        verify(streamObserver, times(4)).onNext(any());
			        verify(this.messagingProcessor, times(1))			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_POP_CK,			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/CommitLog.java:
		[
			fromLine:"			16",
			toLine:"			68",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.net.Inet6Address;
			import java.net.InetSocketAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Optional;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.TimeoutException;
			import java.util.function.Supplier;
			import java.util.stream.Collectors;
			import com.sun.jna.NativeLong;
			import com.sun.jna.Pointer;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.SystemClock;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageVersion;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.MessageExtEncoder.PutMessageThreadLocal;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.HAService;
			import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.util.LibC;
			import org.rocksdb.RocksDBException;
			
			import sun.nio.ch.DirectBuffer;
						
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			    ) {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
						
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			    ) {			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
						
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			        int mappedFileSize = this.defaultMessageStore.getMessageStoreConfig().getMappedFileSizeCommitLog();			
",
,
			fromLine:"			253",
			toLine:"			254",
			content:"
			        if (mappedFile != null) {
			            int pos = (int) (offset % mappedFileSize);			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			            while (true) {			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			                    mappedFileOffset += size;			
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
			                else if (dispatchRequest.isSuccess() && size == 0) {			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
						
",
,
			fromLine:"			409",
			toLine:"			409",
			content:"
			        final boolean checkDupInfo) {			
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			     */			
",
,
			fromLine:"			427",
			toLine:"			427",
			content:"
			            // 1 TOTAL SIZE			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			            // 2 MAGIC CODE			
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
						
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
						
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
						
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
						
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
						
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
						
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
						
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			            if ((sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0) {			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			            } else {			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
						
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			            if ((sysFlag & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0) {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			            } else {			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
						
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
						
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
						
",
,
			fromLine:"			482",
			toLine:"			483",
			content:"
			            if (bodyLen > 0) {
			                if (readBody) {			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
						
",
,
			fromLine:"			499",
			toLine:"			499",
			content:"
			                } else {			
",
,
			fromLine:"			503",
			toLine:"			504",
			content:"
			
			            int topicLen = messageVersion.getTopicLength(byteBuffer);			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
						
",
,
			fromLine:"			514",
			toLine:"			514",
			content:"
			            if (propertiesLength > 0) {			
",
,
			fromLine:"			522",
			toLine:"			522",
			content:"
						
",
,
			fromLine:"			553",
			toLine:"			553",
			content:"
						
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			                    if (expectedCRC > 0) {			
",
,
			fromLine:"			590",
			toLine:"			590",
			content:"
						
",
,
			fromLine:"			723",
			toLine:"			723",
			content:"
			            while (true) {			
",
,
			fromLine:"			734",
			toLine:"			734",
			content:"
			                            if (dispatchRequest.getCommitLogOffset() + size <= this.defaultMessageStore.getCommitLog().getConfirmOffset()) {			
",
,
			fromLine:"			738",
			toLine:"			738",
			content:"
			                        } else {			
",
,
			fromLine:"			745",
			toLine:"			745",
			content:"
			                    else if (size == 0) {			
",
,
			fromLine:"			822",
			toLine:"			823",
			content:"
			
			    protected void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile) {			
",
,
			fromLine:"			1015",
			toLine:"			1015",
			content:"
			                    case PUT_OK:			
",
,
			fromLine:"			1018",
			toLine:"			1018",
			content:"
			                    case END_OF_FILE:			
",
,
			fromLine:"			1033",
			toLine:"			1033",
			content:"
			                        if (AppendMessageStatus.PUT_OK.equals(result.getStatus())) {			
",
,
			fromLine:"			1369",
			toLine:"			1369",
			content:"
						
",
,
			fromLine:"			1372",
			toLine:"			1372",
			content:"
			        try {			
",
,
			fromLine:"			1374",
			toLine:"			1374",
			content:"
			            if (null == mappedFile) {			
",
,
			fromLine:"			1378",
			toLine:"			1378",
			content:"
						
",
,
			fromLine:"			1917",
			toLine:"			1917",
			content:"
			            // PHY OFFSET			
",
,
			fromLine:"			1950",
			toLine:"			1950",
			content:"
			            // Determines whether there is sufficient free space			
",
,
			fromLine:"			1953",
			toLine:"			1953",
			content:"
			                // 1 TOTALSIZE			
",
,
			fromLine:"			1959",
			toLine:"			1959",
			content:"
			                final long beginTimeMills = CommitLog.this.defaultMessageStore.now();			
",
,
			fromLine:"			1961",
			toLine:"			1961",
			content:"
			                return new AppendMessageResult(AppendMessageStatus.END_OF_FILE, wroteOffset,			
",
,
			fromLine:"			1971",
			toLine:"			1971",
			content:"
			            // 7 PHYSICALOFFSET			
",
,
			fromLine:"			1990",
			toLine:"			1990",
			content:"
			            // Write messages to the queue buffer			
",
,
			fromLine:"			2004",
			toLine:"			2004",
			content:"
			            final MessageExtBatch messageExtBatch, PutMessageContext putMessageContext) {			
",
,
			fromLine:"			2006",
			toLine:"			2006",
			content:"
			            //physical offset			
",
,
			fromLine:"			2021",
			toLine:"			2022",
			content:"
			                int msgIdLen = storeHostLength + 8;
			                int batchCount = putMessageContext.getBatchSize();			
",
,
			fromLine:"			2048",
			toLine:"			2048",
			content:"
			                // Determines whether there is sufficient free space			
",
,
			fromLine:"			2051",
			toLine:"			2051",
			content:"
			                    // 1 TOTALSIZE			
",
,
			fromLine:"			2058",
			toLine:"			2060",
			content:"
			                    // Here the length of the specially set maxBlank
			                    byteBuffer.reset(); //ignore the previous appended messages
			                    byteBuffer.put(this.msgStoreItemMemory.array(), 0, 8);			
",
,
			fromLine:"			2082",
			toLine:"			2082",
			content:"
						
",
,
			fromLine:"			2090",
			toLine:"			2090",
			content:"
			            messagesByteBuff.limit(totalMsgLen);			
",
,
			fromLine:"			2221",
			toLine:"			2222",
			content:"
			    @Override
			    public void swapMap(int reserveNum, long forceSwapIntervalMs, long normalSwapIntervalMs) {			
",
,
			fromLine:"			2400",
			toLine:"			2400",
			content:"
			            try {			
",
,
			fromLine:"			2404",
			toLine:"			2404",
			content:"
			                }			
",
,
			fromLine:"			2412",
			toLine:"			2412",
			content:"
			                log.error("isMsgInColdArea group: {}, topic: {}, queueId: {}, offset: {}",			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
		[
			fromLine:"			16",
			toLine:"			116",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import com.google.common.collect.Sets;
			import com.google.common.hash.Hashing;
			import io.openmessaging.storage.dledger.entry.DLedgerEntry;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import java.io.File;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.net.Inet6Address;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.nio.channels.FileLock;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Optional;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentLinkedQueue;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.TimeoutException;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.SystemClock;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.CleanupPolicy;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.running.RunningStats;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.common.utils.ServiceProvider;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.dledger.DLedgerCommitLog;
			import org.apache.rocketmq.store.ha.DefaultHAService;
			import org.apache.rocketmq.store.ha.HAService;
			import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
			import org.apache.rocketmq.store.hook.PutMessageHook;
			import org.apache.rocketmq.store.hook.SendMessageBackHook;
			import org.apache.rocketmq.store.index.IndexService;
			import org.apache.rocketmq.store.index.QueryOffsetResult;
			import org.apache.rocketmq.store.kv.CommitLogDispatcherCompaction;
			import org.apache.rocketmq.store.kv.CompactionService;
			import org.apache.rocketmq.store.kv.CompactionStore;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.ConsumeQueueStore;
			import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.util.PerfCounter;
			import org.rocksdb.RocksDBException;
						
",
,
			fromLine:"			765",
			toLine:"			765",
			content:"
						
",
,
			fromLine:"			770",
			toLine:"			770",
			content:"
			    @Override			
",
,
			fromLine:"			772",
			toLine:"			772",
			content:"
			        final int maxMsgNums, final MessageFilter messageFilter) {			
",
,
			fromLine:"			776",
			toLine:"			776",
			content:"
			    @Override			
",
,
			fromLine:"			778",
			toLine:"			778",
			content:"
			        int queueId, long offset, int maxMsgNums, MessageFilter messageFilter) {			
",
,
			fromLine:"			782",
			toLine:"			782",
			content:"
			    @Override			
",
,
			fromLine:"			794",
			toLine:"			794",
			content:"
						
",
,
			fromLine:"			798",
			toLine:"			798",
			content:"
			        if (Objects.equals(policy, CleanupPolicy.COMPACTION) && messageStoreConfig.isEnableCompaction()) {			
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			        GetMessageStatus status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;			
",
,
			fromLine:"			812",
			toLine:"			812",
			content:"
						
",
,
			fromLine:"			819",
			toLine:"			820",
			content:"
			                status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;
			                nextBeginOffset = nextOffsetCorrection(offset, 0);			
",
,
			fromLine:"			822",
			toLine:"			823",
			content:"
			                status = GetMessageStatus.OFFSET_TOO_SMALL;
			                nextBeginOffset = nextOffsetCorrection(offset, minOffset);			
",
,
			fromLine:"			825",
			toLine:"			826",
			content:"
			                status = GetMessageStatus.OFFSET_OVERFLOW_ONE;
			                nextBeginOffset = nextOffsetCorrection(offset, offset);			
",
,
			fromLine:"			828",
			toLine:"			828",
			content:"
			                status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;			
",
,
			fromLine:"			830",
			toLine:"			830",
			content:"
			            } else {			
",
,
			fromLine:"			833",
			toLine:"			833",
			content:"
						
",
,
			fromLine:"			835",
			toLine:"			835",
			content:"
			                if (maxPullSize > MAX_PULL_MSG_SIZE) {			
",
,
			fromLine:"			848",
			toLine:"			848",
			content:"
			                    try {			
",
,
			fromLine:"			853",
			toLine:"			853",
			content:"
			                            nextBeginOffset = nextOffsetCorrection(nextBeginOffset, this.consumeQueueStore.rollNextFile(consumeQueue, nextBeginOffset));			
",
,
			fromLine:"			867",
			toLine:"			867",
			content:"
						
",
,
			fromLine:"			871",
			toLine:"			871",
			content:"
						
",
,
			fromLine:"			890",
			toLine:"			891",
			content:"
			
			                            if (messageFilter != null			
",
,
			fromLine:"			909",
			toLine:"			909",
			content:"
						
",
,
			fromLine:"			913",
			toLine:"			914",
			content:"
			
			                            if (messageFilter != null			
",
,
			fromLine:"			929",
			toLine:"			929",
			content:"
			                        ERROR_LOG.error("getMessage Failed. cid: {}, topic: {}, queueId: {}, offset: {}, minOffset: {}, maxOffset: {}, {}",			
",
,
			fromLine:"			939",
			toLine:"			939",
			content:"
			                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;			
",
,
			fromLine:"			949",
			toLine:"			949",
			content:"
			            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;			
",
,
			fromLine:"			973",
			toLine:"			973",
			content:"
			    @Override			
",
,
			fromLine:"			975",
			toLine:"			975",
			content:"
			        int queueId, long offset, int maxMsgNums, int maxTotalMsgSize, MessageFilter messageFilter) {			
",
,
			fromLine:"			980",
			toLine:"			980",
			content:"
			    public long getMaxOffsetInQueue(String topic, int queueId) {			
",
,
			fromLine:"			984",
			toLine:"			986",
			content:"
			    @Override
			    public long getMaxOffsetInQueue(String topic, int queueId, boolean committed) {
			        if (committed) {			
",
,
			fromLine:"			991",
			toLine:"			991",
			content:"
			        } else {			
",
,
			fromLine:"			1021",
			toLine:"			1022",
			content:"
			    @Override
			    public long getCommitLogOffsetInQueue(String topic, int queueId, long consumeQueueOffset) {			
",
,
			fromLine:"			1024",
			toLine:"			1024",
			content:"
			        if (consumeQueue != null) {			
",
,
			fromLine:"			1033",
			toLine:"			1034",
			content:"
			    @Override
			    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp) {			
",
,
			fromLine:"			1038",
			toLine:"			1038",
			content:"
			    @Override			
",
,
			fromLine:"			1040",
			toLine:"			1040",
			content:"
			        try {			
",
,
			fromLine:"			1043",
			toLine:"			1043",
			content:"
			            ERROR_LOG.error("getOffsetInQueueByTime Failed. topic: {}, queueId: {}, timestamp: {} boundaryType: {}, {}",			
",
,
			fromLine:"			1185",
			toLine:"			1186",
			content:"
			    @Override
			    public long getMessageStoreTimeStamp(String topic, int queueId, long consumeQueueOffset) {			
",
,
			fromLine:"			1188",
			toLine:"			1188",
			content:"
			        if (logicQueue != null) {			
",
,
			fromLine:"			1197",
			toLine:"			1197",
			content:"
			    @Override			
",
,
			fromLine:"			1199",
			toLine:"			1199",
			content:"
			        long consumeQueueOffset) {			
",
,
			fromLine:"			1233",
			toLine:"			1233",
			content:"
			    @Override			
",
,
			fromLine:"			1239",
			toLine:"			1239",
			content:"
						
",
,
			fromLine:"			1245",
			toLine:"			1245",
			content:
{
			"DefaultMessageStore#appendToCommitLog: failed to append data to commitLog, physical offset={}, data "			
}
,
			fromLine:"			1257",
			toLine:"			1257",
			content:"
			    @Override			
",
,
			fromLine:"			1260",
			toLine:"			1260",
			content:"
						
",
,
			fromLine:"			1263",
			toLine:"			1263",
			content:"
			        for (int i = 0; i < 3; i++) {			
",
,
			fromLine:"			1298",
			toLine:"			1298",
			content:"
						
",
,
			fromLine:"			1306",
			toLine:"			1306",
			content:"
						
",
,
			fromLine:"			1308",
			toLine:"			1308",
			content:"
			        int maxNum, long begin, long end) {			
",
,
			fromLine:"			1439",
			toLine:"			1439",
			content:"
						
",
,
			fromLine:"			1446",
			toLine:"			1446",
			content:"
						
",
,
			fromLine:"			1449",
			toLine:"			1449",
			content:"
			            minOffset = Math.max(minOffset, consumeQueue.getMinOffsetInQueue());			
",
,
			fromLine:"			1451",
			toLine:"			1451",
			content:"
						
",
,
			fromLine:"			1456",
			toLine:"			1456",
			content:"
			            long nextOffset = minOffset;			
",
,
			fromLine:"			1463",
			toLine:"			1463",
			content:"
			                            long offsetPy = cqUnit.getPos();			
",
,
			fromLine:"			1467",
			toLine:"			1467",
			content:"
			                            String msgId =			
",
,
			fromLine:"			1470",
			toLine:"			1470",
			content:"
			                            nextOffset = cqUnit.getQueueOffset() + cqUnit.getBatchNum();			
",
,
			fromLine:"			1489",
			toLine:"			1489",
			content:"
			    @Deprecated			
",
,
			fromLine:"			1493",
			toLine:"			1493",
			content:"
						
",
,
			fromLine:"			1495",
			toLine:"			1495",
			content:"
			        if (consumeQueue != null) {			
",
,
			fromLine:"			1508",
			toLine:"			1509",
			content:"
			    @Override
			    public boolean checkInMemByConsumeOffset(final String topic, final int queueId, long consumeOffset, int batchSize) {			
",
,
			fromLine:"			1511",
			toLine:"			1511",
			content:"
			        if (consumeQueue != null) {			
",
,
			fromLine:"			1516",
			toLine:"			1516",
			content:"
			            long startOffsetPy = firstCQItem.getPos();			
",
,
			fromLine:"			1521",
			toLine:"			1521",
			content:"
						
",
,
			fromLine:"			1534",
			toLine:"			1535",
			content:"
			    @Override
			    public boolean checkInStoreByConsumeOffset(String topic, int queueId, long consumeOffset) {			
",
,
			fromLine:"			1586",
			toLine:"			1586",
			content:"
						
",
,
			fromLine:"			1592",
			toLine:"			1592",
			content:"
						
",
,
			fromLine:"			1655",
			toLine:"			1655",
			content:"
			        for (SelectMappedBufferResult bufferResult : bufferResultList) {			
",
,
			fromLine:"			1689",
			toLine:"			1689",
			content:"
			            try {			
",
,
			fromLine:"			1743",
			toLine:"			1743",
			content:"
						
",
,
			fromLine:"			1746",
			toLine:"			1746",
			content:"
						
",
,
			fromLine:"			1750",
			toLine:"			1750",
			content:"
						
",
,
			fromLine:"			1754",
			toLine:"			1754",
			content:"
						
",
,
			fromLine:"			1759",
			toLine:"			1759",
			content:"
			        if (isInMem) {			
",
,
			fromLine:"			1763",
			toLine:"			1763",
			content:"
						
",
,
			fromLine:"			1765",
			toLine:"			1765",
			content:"
			        } else {			
",
,
			fromLine:"			1769",
			toLine:"			1769",
			content:"
						
",
,
			fromLine:"			1989",
			toLine:"			1989",
			content:"
			    @Override			
",
,
			fromLine:"			1991",
			toLine:"			1991",
			content:"
			        final boolean checkDupInfo, final boolean readBody) {			
",
,
			fromLine:"			2054",
			toLine:"			2055",
			content:"
			    @Override
			    public boolean getData(long offset, int size, ByteBuffer byteBuffer) {			
",
,
			fromLine:"			2088",
			toLine:"			2088",
			content:"
			    @Override			
",
,
			fromLine:"			2093",
			toLine:"			2093",
			content:"
			    @Override			
",
,
			fromLine:"			2095",
			toLine:"			2095",
			content:"
			        boolean isRecover, boolean isFileEnd) throws RocksDBException {			
",
,
			fromLine:"			2274",
			toLine:"			2274",
			content:"
						
",
,
			fromLine:"			2703",
			toLine:"			2703",
			content:"
						
",
,
			fromLine:"			2705",
			toLine:"			2705",
			content:"
						
",
,
			fromLine:"			2707",
			toLine:"			2707",
			content:"
						
",
,
			fromLine:"			2712",
			toLine:"			2714",
			content:"
			        public BatchDispatchRequest(ByteBuffer byteBuffer, int position, int size, long id) {
			            this.byteBuffer = byteBuffer;
			            this.position = position;			
",
,
			fromLine:"			2773",
			toLine:"			2773",
			content:"
			            && DefaultMessageStore.this.messageArrivingListener != null) {			
",
,
			fromLine:"			2838",
			toLine:"			2838",
			content:"
			                        DispatchRequest dispatchRequest =			
",
,
			fromLine:"			2918",
			toLine:"			2918",
			content:"
			                }			
",
,
			fromLine:"			2955",
			toLine:"			2955",
			content:"
			        public MainBatchDispatchRequestService() {			
",
,
			fromLine:"			2971",
			toLine:"			2973",
			content:"
			                        try {
			                            ByteBuffer tmpByteBuffer = task.byteBuffer;
			                            tmpByteBuffer.position(task.position);			
",
,
			fromLine:"			2976",
			toLine:"			2976",
			content:"
			                            while (tmpByteBuffer.hasRemaining()) {			
",
,
			fromLine:"			3094",
			toLine:"			3094",
			content:"
			        public void createBatchDispatchRequest(ByteBuffer byteBuffer, int position, int size) {			
",
,
			fromLine:"			3098",
			toLine:"			3098",
			content:"
			            mappedPageHoldCount.getAndIncrement();			
",
,
			fromLine:"			3277",
			toLine:"			3279",
			content:"
			    @Override
			    public long estimateMessageCount(String topic, int queueId, long from, long to, MessageFilter filter) {
			        if (from < 0) {			
",
,
			fromLine:"			3282",
			toLine:"			3282",
			content:"
						
",
,
			fromLine:"			3286",
			toLine:"			3287",
			content:"
			
			        if (null == filter) {			
",
,
			fromLine:"			3290",
			toLine:"			3290",
			content:"
						
",
,
			fromLine:"			3297",
			toLine:"			3300",
			content:"
			        long minOffset = consumeQueue.getMinOffsetInQueue();
			        if (from < minOffset) {
			            long diff = to - from;
			            from = minOffset;			
",
,
			fromLine:"			3303",
			toLine:"			3304",
			content:"
			
			        long msgCount = consumeQueue.estimateMessageCount(from, to, filter);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/plugin/AbstractPluginMessageStore.java:
		[
			fromLine:"			17",
			toLine:"			64",
			content:"
			
			package org.apache.rocketmq.store.plugin;
			
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.function.Supplier;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.SystemClock;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.store.AllocateMappedFileService;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.CommitLog;
			import org.apache.rocketmq.store.CommitLogDispatcher;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.store.RunningFlags;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.StoreCheckpoint;
			import org.apache.rocketmq.store.StoreStatsService;
			import org.apache.rocketmq.store.TransientStorePool;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.HAService;
			import org.apache.rocketmq.store.hook.PutMessageHook;
			import org.apache.rocketmq.store.hook.SendMessageBackHook;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.util.PerfCounter;
			import org.rocksdb.RocksDBException;
			
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
						
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    @Override			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        int maxMsgNums, final MessageFilter messageFilter) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    @Override			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        int queueId, long offset, int maxMsgNums, MessageFilter messageFilter) {			
",
,
			fromLine:"			146",
			toLine:"			147",
			content:"
			    @Override
			    public long getMaxOffsetInQueue(String topic, int queueId, boolean committed) {			
",
,
			fromLine:"			156",
			toLine:"			157",
			content:"
			    @Override
			    public long getCommitLogOffsetInQueue(String topic, int queueId, long consumeQueueOffset) {			
",
,
			fromLine:"			161",
			toLine:"			162",
			content:"
			    @Override
			    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp) {			
",
,
			fromLine:"			211",
			toLine:"			212",
			content:"
			    @Override
			    public long getMessageStoreTimeStamp(String topic, int queueId, long consumeQueueOffset) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    @Override			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			        long consumeQueueOffset) {			
",
,
			fromLine:"			232",
			toLine:"			233",
			content:"
			    @Override
			    public boolean appendToCommitLog(long startOffset, byte[] data, int dataStart, int dataLength) {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			    @Override			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        long end) {			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			    @Override			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			        int maxNum, long begin, long end) {			
",
,
			fromLine:"			275",
			toLine:"			276",
			content:"
			    @Deprecated
			    public boolean checkInDiskByConsumeOffset(String topic, int queueId, long consumeOffset) {			
",
,
			fromLine:"			280",
			toLine:"			281",
			content:"
			    @Override
			    public boolean checkInMemByConsumeOffset(String topic, int queueId, long consumeOffset, int batchSize) {			
",
,
			fromLine:"			285",
			toLine:"			286",
			content:"
			    @Override
			    public boolean checkInStoreByConsumeOffset(String topic, int queueId, long consumeOffset) {			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			    @Override			
",
,
			fromLine:"			357",
			toLine:"			357",
			content:"
			        final boolean checkDupInfo, final boolean readBody) {			
",
,
			fromLine:"			411",
			toLine:"			412",
			content:"
			    @Override
			    public boolean getData(long offset, int size, ByteBuffer byteBuffer) {			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			    @Override			
",
,
			fromLine:"			488",
			toLine:"			488",
			content:"
			        int maxMsgNums, int maxTotalMsgSize, MessageFilter messageFilter) {			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
			    @Override			
",
,
			fromLine:"			495",
			toLine:"			495",
			content:"
			        MessageFilter messageFilter) {			
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
			    public void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile) {			
",
,
			fromLine:"			514",
			toLine:"			514",
			content:"
			    @Override			
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			        boolean isRecover, boolean isFileEnd) throws RocksDBException {			
",
,
			fromLine:"			635",
			toLine:"			636",
			content:"
			    @Override
			    public long estimateMessageCount(String topic, int queueId, long from, long to, MessageFilter filter) {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/TieredMessageStore.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.tieredstore;
			
			import com.google.common.base.Stopwatch;
			import com.google.common.collect.Sets;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import java.lang.reflect.Constructor;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.plugin.AbstractPluginMessageStore;
			import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
			import org.apache.rocketmq.tieredstore.core.MessageStoreDispatcher;
			import org.apache.rocketmq.tieredstore.core.MessageStoreDispatcherImpl;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFetcher;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFetcherImpl;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFilter;
			import org.apache.rocketmq.tieredstore.core.MessageStoreTopicFilter;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.index.IndexService;
			import org.apache.rocketmq.tieredstore.index.IndexStoreService;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant;
			import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    protected final IndexService indexService;			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    protected final MessageStoreFilter topicFilter;			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        this.context.registerConfiguration(this.storeConfig);			
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			        this.storeExecutor = new MessageStoreExecutor();
			        this.flatFileStore = new FlatFileStore(this.storeConfig, this.metadataStore, this.storeExecutor);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			            MessageStoreUtil.getIndexFilePath(this.storeConfig.getBrokerName()));			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public boolean load() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    public FlatFileStore getFlatFileStore() {			
",
,
			fromLine:"			153",
			toLine:"			154",
			content:"
			
			    public boolean fetchFromCurrentStore(String topic, int queueId, long offset) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    @SuppressWarnings("all")			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			        if (storageLevel.check(MessageStoreConfig.TieredStorageLevel.NOT_IN_DISK)			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			        if (storageLevel.check(MessageStoreConfig.TieredStorageLevel.NOT_IN_MEM)			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    @Override			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        MessageFilter messageFilter) {			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			    @Override			
",
,
			fromLine:"			202",
			toLine:"			203",
			content:"
			        // for system topic, force reading from local store
			        if (topicFilter.filterTopic(topic)) {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
						
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			            log.trace("GetMessageAsync from current store, " +			
",
,
			fromLine:"			211",
			toLine:"			212",
			content:"
			            log.trace("GetMessageAsync from remote store, " +
			                "topic: {}, queue: {}, offset: {}, maxCount: {}", topic, queueId, offset, maxMsgNums);			
",
,
			fromLine:"			216",
			toLine:"			217",
			content:"
			        Stopwatch stopwatch = Stopwatch.createStarted();
			        return fetcher			
",
,
			fromLine:"			222",
			toLine:"			223",
			content:"
			                    .put(TieredStoreMetricsConstant.LABEL_OPERATION, TieredStoreMetricsConstant.OPERATION_API_GET_MESSAGE)
			                    .put(TieredStoreMetricsConstant.LABEL_TOPIC, topic)			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			235",
			content:"
			                                "topic: {}, queue: {}, queue offset: {}, offset range: {}-{}",
			                            result.getStatus(), topic, queueId, offset, result.getMinOffset(), result.getMaxOffset());			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			                            "topic: {}, queue: {}, queue offset: {}, offset range: {}-{}",			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			                    Attributes messagesOutAttributes = TieredStoreMetricsManager.newAttributesBuilder()
			                        .put(TieredStoreMetricsConstant.LABEL_TOPIC, topic)			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			                // Fix min or max offset according next store at last			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			                    log.info("GetMessageAsync result, {}, group: {}, topic: {}, queueId: {}, offset: {}, count:{}",			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			                log.error("GetMessageAsync from tiered store failed", e);			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        long minOffsetInNextStore = next.getMinOffsetInQueue(topic, queueId);			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        Stopwatch stopwatch = Stopwatch.createStarted();			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			    @Override			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			        long consumeQueueOffset) {			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			            Stopwatch stopwatch = Stopwatch.createStarted();			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			                                TieredStoreMetricsConstant.OPERATION_API_GET_TIME_BY_OFFSET)			
",
,
			fromLine:"			339",
			toLine:"			340",
			content:"
			                        log.debug("GetEarliestMessageTimeAsync failed, try to get message time from next store, topic: {}, queue: {}, queue offset: {}",
			                            topic, queueId, consumeQueueOffset);			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			        }			
",
,
			fromLine:"			349",
			toLine:"			350",
			content:"
			    @Override
			    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp) {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			    @Override			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			        boolean isForce = storeConfig.getTieredStorageLevel() == MessageStoreConfig.TieredStorageLevel.FORCE;			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			            Stopwatch stopwatch = Stopwatch.createStarted();			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			                .put(TieredStoreMetricsConstant.LABEL_OPERATION, TieredStoreMetricsConstant.OPERATION_API_GET_OFFSET_BY_TIME)			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			            if (offsetInTieredStore == -1L && !isForce) {			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        }			
",
,
			fromLine:"			373",
			toLine:"			374",
			content:"
			    @Override
			    public QueryMessageResult queryMessage(String topic, String key, int maxNum, long begin, long end) {			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			    @Override			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			        boolean isForce = storeConfig.getTieredStorageLevel() == MessageStoreConfig.TieredStorageLevel.FORCE;			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			            new QueryMessageResult() :			
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
			        int resultSize = result.getMessageBufferList().size();			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			            try {			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			                            .put(TieredStoreMetricsConstant.LABEL_OPERATION, TieredStoreMetricsConstant.OPERATION_API_QUERY_MESSAGE)			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			        super.initMetrics(meter, attributesBuilderSupplier);			
",
,
			fromLine:"			443",
			toLine:"			443",
			content:"
			            metadataStore.iterateQueue(topic, queueMetadata -> {			
",
,
			fromLine:"			459",
			toLine:"			460",
			content:"
			        }
			        if (flatFileStore != null) {			
",
,
			fromLine:"			472",
			toLine:"			473",
			content:"
			        }
			        if (flatFileStore != null) {			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageStoreTest.java:
		[
			fromLine:"			16",
			toLine:"			67",
			content:"
			 */
			package org.apache.rocketmq.tieredstore;
			
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.sdk.OpenTelemetrySdk;
			import java.io.File;
			import java.io.IOException;
			import java.lang.reflect.Field;
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Locale;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.Configuration;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.plugin.MessageStorePluginContext;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFetcher;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtilTest;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mockito;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    private final String storePath = MessageStoreUtilTest.getRandomStorePath();			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			    private TieredMessageStore currentStore;
			    private FlatFileStore flatFileStore;			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        BrokerConfig brokerConfig = new BrokerConfig();			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			            field.setAccessible(true);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        configuration.update(properties);			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			        configuration.update(properties);
			        when(defaultStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(false);			
",
,
			fromLine:"			171",
			toLine:"			172",
			content:"
			
			        when(defaultStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);			
",
,
			fromLine:"			177",
			toLine:"			179",
			content:"
			        configuration.update(properties);
			        Mockito.when(defaultStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(false);
			        Mockito.when(defaultStore.checkInMemByConsumeOffset(anyString(), anyInt(), anyLong(), anyInt())).thenReturn(true);			
",
,
			fromLine:"			181",
			toLine:"			183",
			content:"
			
			        Mockito.when(defaultStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);
			        Mockito.when(defaultStore.checkInMemByConsumeOffset(anyString(), anyInt(), anyLong(), anyInt())).thenReturn(false);			
",
,
			fromLine:"			185",
			toLine:"			187",
			content:"
			
			        Mockito.when(defaultStore.checkInStoreByConsumeOffset(anyString(), anyInt(), anyLong())).thenReturn(true);
			        Mockito.when(defaultStore.checkInMemByConsumeOffset(anyString(), anyInt(), anyLong(), anyInt())).thenReturn(true);			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        configuration.update(properties);			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        // topic filter			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        String groupName = "groupName";			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        // fetch from default			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			        expect.setStatus(GetMessageStatus.NO_MATCHED_LOGIC_QUEUE);			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			        expect.setStatus(GetMessageStatus.OFFSET_OVERFLOW_ONE);			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			        expect.setStatus(GetMessageStatus.OFFSET_OVERFLOW_BADLY);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        expect.setStatus(GetMessageStatus.OFFSET_RESET);			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			    public void testGetMinOffsetInQueue() {			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			    public void testGetEarliestMessageTimeAsync() {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
						
",
,
			fromLine:"			261",
			toLine:"			264",
			content:"
			        configuration.update(properties);
			        when(fetcher.getMessageStoreTimeStampAsync(anyString(), anyInt(), anyLong())).thenReturn(CompletableFuture.completedFuture(1L));
			        when(defaultStore.getMessageStoreTimeStampAsync(anyString(), anyInt(), anyLong())).thenReturn(CompletableFuture.completedFuture(2L));
			        when(defaultStore.getMessageStoreTimeStamp(anyString(), anyInt(), anyLong())).thenReturn(3L);			
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			        configuration.update(properties);			
",
,
			fromLine:"			271",
			toLine:"			272",
			content:"
			
			        Mockito.when(fetcher.getMessageStoreTimeStampAsync(anyString(), anyInt(), anyLong())).thenReturn(CompletableFuture.completedFuture(-1L));			
",
,
			fromLine:"			281",
			toLine:"			282",
			content:"
			
			        Mockito.when(fetcher.getOffsetInQueueByTime(anyString(), anyInt(), anyLong(), eq(BoundaryType.LOWER))).thenReturn(1L);			
",
,
			fromLine:"			284",
			toLine:"			285",
			content:"
			        Mockito.when(defaultStore.getEarliestMessageTime()).thenReturn(100L);
			        Assert.assertEquals(1L, currentStore.getOffsetInQueueByTime(mq.getTopic(), mq.getQueueId(), 1000, BoundaryType.LOWER));			
",
,
			fromLine:"			287",
			toLine:"			289",
			content:"
			
			        Mockito.when(fetcher.getOffsetInQueueByTime(anyString(), anyInt(), anyLong(), eq(BoundaryType.LOWER))).thenReturn(-1L);
			        Assert.assertEquals(-1L, currentStore.getOffsetInQueueByTime(mq.getTopic(), mq.getQueueId(), 0));			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        result1.addMessage(new SelectMappedBufferResult(0, null, 0, null));			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			        result2.addMessage(new SelectMappedBufferResult(0, null, 0, null));			
",
,
			fromLine:"			302",
			toLine:"			304",
			content:"
			        when(defaultStore.getEarliestMessageTime()).thenReturn(100L);
			        Assert.assertEquals(2, currentStore.queryMessage(mq.getTopic(), "key", 32, 0, 99).getMessageMapedList().size());
			        Assert.assertEquals(1, currentStore.queryMessage(mq.getTopic(), "key", 32, 100, 200).getMessageMapedList().size());			
",
,
			fromLine:"			311",
			toLine:"			313",
			content:"
			        currentStore.cleanUnusedTopic(topicSet);
			        Assert.assertNull(flatFileStore.getFlatFile(mq));
			        Assert.assertNull(flatFileStore.getMetadataStore().getTopic(mq.getTopic()));			
",
,
			fromLine:"			321",
			toLine:"			323",
			content:"
			        currentStore.deleteTopics(topicSet);
			        Assert.assertNull(flatFileStore.getFlatFile(mq));
			        Assert.assertNull(flatFileStore.getMetadataStore().getTopic(mq.getTopic()));			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.FileRegion;
			import io.opentelemetry.api.common.Attributes;
			import java.nio.ByteBuffer;
			import java.util.List;
			import java.util.Random;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.pagecache.ManyMessageTransfer;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PeekMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_REQUEST_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESPONSE_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        RemotingCommand request) throws RemotingCommandException {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        final PeekMessageRequestHeader requestHeader =			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			            String errorInfo = String.format("queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]",			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			                    int queueId = (randomQ + i) % retryTopicConfig.getReadQueueNums();			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			                int queueId = (randomQ + i) % topicConfig.getReadQueueNums();			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			            int queueId = requestHeader.getQueueId();			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			                    int queueId = (randomQ + i) % retryTopicConfig.getReadQueueNums();			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			                if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {
			                    final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			                        RemotingCommand finalResponse = response;			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                                Attributes attributes = RemotingMetricsManager.newAttributesBuilder()			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			                                    .build();			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			                                if (!future.isSuccess()) {			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
						
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        long popTime) {			
",
,
			fromLine:"			236",
			toLine:"			239",
			content:"
			        GetMessageResult getMessageTmpResult;
			        long offset = getPopOffset(topic, requestHeader.getConsumerGroup(), queueId);
			        restNum = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, queueId) - offset + restNum;
			        if (getMessageResult.getMessageMapedList().size() >= requestHeader.getMaxMsgNums()) {			
",
,
			fromLine:"			241",
			toLine:"			242",
			content:"
			        }
			        getMessageTmpResult = this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), topic, queueId, offset,			
",
,
			fromLine:"			246",
			toLine:"			247",
			content:"
			            offset = getMessageTmpResult.getNextBeginOffset();
			            getMessageTmpResult = this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), topic, queueId, offset,			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			        if (getMessageTmpResult != null) {			
",
,
			fromLine:"			256",
			toLine:"			257",
			content:"
			                    .build();
			                BrokerMetricsManager.messagesOutTotal.add(getMessageResult.getMessageCount(), attributes);			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			            for (SelectMappedBufferResult mapedBuffer : getMessageTmpResult.getMessageMapedList()) {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        }			
",
,
			fromLine:"			267",
			toLine:"			268",
			content:"
			
			    private long getPopOffset(String topic, String cid, int queueId) {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        if (offset < 0) {			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        long bufferOffset = this.brokerController.getPopMessageProcessor().getPopBufferMergeService()			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
						
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
			        final int queueId) {			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        try {			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			        } finally {			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
						
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/filter/MessageStoreWithFilterTest.java:
		[
			fromLine:"			17",
			toLine:"			58",
			content:"
			
			package org.apache.rocketmq.broker.filter;
			
			import java.io.File;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.CommitLogDispatcher;
			import org.apache.rocketmq.store.ConsumeQueueExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageArrivingListener;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.awaitility.core.ThrowingRunnable;
			import org.junit.After;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			    private static final String MSG = "Once, there was a chance for me!";			
",
,
			fromLine:"			63",
			toLine:"			68",
			content:"
			
			    private static final String TOPIC = "topic";
			    private static final int QUEUE_ID = 0;
			    private static final String STORE_PATH = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
			    private static final int COMMIT_LOG_FILE_SIZE = 1024 * 1024 * 256;
			    private static final int CQ_FILE_SIZE = 300000 * 20;			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        try {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        try {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        }			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			118",
			toLine:"			119",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			133",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
			        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        messageStoreConfig.setMessageIndexEnable(false);			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			
			        messageStoreConfig.setStorePathRootDir(STORE_PATH);			
",
,
			fromLine:"			144",
			toLine:"			145",
			content:"
			    protected DefaultMessageStore gen(ConsumerFilterManager filterManager) throws Exception {
			        MessageStoreConfig messageStoreConfig = buildStoreConfig(			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        for (int i = 0; i < topicCount; i++) {			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
						
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
						
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			        for (int i = 0; i < topicCount; i++) {			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
						
",
,
			fromLine:"			364",
			toLine:"			365",
			content:"
			                for (int i = 0; i < topicCount; i++) {
			                    final String realTopic = TOPIC + i;			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			62",
			content:"
			
			package org.apache.rocketmq.broker.schedule;
			
			import java.io.File;
			import java.lang.reflect.Field;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.failover.EscapeBridge;
			import org.apache.rocketmq.broker.util.HookUtils;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.ConsumeQueueExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageArrivingListener;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mockito;
			
			import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertTrue;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			76",
			toLine:"			79",
			content:"
			
			    private static final String STORE_PATH = System.getProperty("java.io.tmpdir") + File.separator + "schedule_test#" + UUID.randomUUID();
			    private static final int COMMIT_LOG_FILE_SIZE = 1024;
			    private static final int CQ_FILE_SIZE = 10;			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			
			    private static SocketAddress bornHost;			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    static String sendMessage = " ------- schedule message test -------";			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    static String messageGroup = "delayGroupTest";			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        try {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        try {			
",
,
			fromLine:"			109",
			toLine:"			111",
			content:"
			        messageStoreConfig.setMessageDelayLevel(testMessageDelayLevel);
			        messageStoreConfig.setMappedFileSizeCommitLog(COMMIT_LOG_FILE_SIZE);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(CQ_FILE_SIZE);			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			        messageStoreConfig.setEnableConsumeQueueExt(true);
			        messageStoreConfig.setStorePathRootDir(STORE_PATH);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        for (int i = 1; i <= 2; i++) {			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
						
",
,
			fromLine:"			228",
			toLine:"			230",
			content:"
			        // get the stats change
			        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);
			        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			    private GetMessageResult getMessage(int queueId, Long offset) {			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			        MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			295",
			toLine:"			296",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageBridgeTest.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.broker.transaction.queue;
			
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentMatchers;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			    public void testGetHalfMessage() {
			        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(),  ArgumentMatchers.nullable(MessageFilter.class))).thenReturn(createGetMessageResult(GetMessageStatus.NO_MESSAGE_IN_QUEUE));			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			    public void testGetOpMessage() {
			        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(),  ArgumentMatchers.nullable(MessageFilter.class))).thenReturn(createGetMessageResult(GetMessageStatus.NO_MESSAGE_IN_QUEUE));			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        when(messageStore			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			                .thenReturn(createGetMessageResult(GetMessageStatus.FOUND));			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			        when(messageStore			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			                .thenReturn(null);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.net.InetSocketAddress;
			import java.nio.charset.Charset;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.apache.rocketmq.common.message.MessageDecoder.messageProperties2String;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            final int topicLength = topicData.length;			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			                }			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			            final int topicLength = topicData.length;			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			                }			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
						
",
,
			fromLine:"			228",
			toLine:"			230",
			content:"
			            + 8 //Prepared Transaction Offset
			            + 4 + (bodyLength > 0 ? bodyLength : 0) //BODY
			            + 1 + topicLength //TOPIC			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			252",
			content:"
			            + 8 //Prepared Transaction Offset
			            + 4 + (bodyLength > 0 ? bodyLength : 0) //BODY
			            + 1 + topicLength //TOPIC			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java:
		[
			fromLine:"			17",
			toLine:"			71",
			content:"
			
			package org.apache.rocketmq.store;
			
			import com.google.common.collect.Sets;
			import java.io.File;
			import java.io.RandomAccessFile;
			import java.lang.reflect.InvocationTargetException;
			import java.lang.reflect.Method;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.OverlappingFileLockException;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.UUID;
			import java.util.Properties;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.assertj.core.util.Strings;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			73",
			toLine:"			80",
			content:"
			public class DefaultMessageStoreTest {
			    private final String storeMessage = "Once, there was a chance for me!";
			    private final String messageTopic = "FooBar";
			    private int queueTotal = 100;
			    private AtomicInteger queueId = new AtomicInteger(0);
			    private SocketAddress bornHost;
			    private SocketAddress storeHost;
			    private byte[] messageBody;			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			    public void init() throws Exception {
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			
			        messageStore = buildMessageStore();			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        assertTrue(load);			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			    public void test_repeat_restart() throws Exception {
			        queueTotal = 1;			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			    public void destroy() {
			        messageStore.shutdown();			
",
,
			fromLine:"			158",
			toLine:"			159",
			content:"
			        long totalMsgs = ipv4HostMsgs + ipv6HostMsgs;
			        queueTotal = 1;			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        for (long i = 0; i < ipv4HostMsgs; i++) {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			        for (long i = 0; i < ipv6HostMsgs; i++) {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        }			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        int firstOffset = 0;			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			190",
			toLine:"			191",
			content:"
			
			        assertThat(new String(messageExt.getBody())).isEqualTo(buildMessageBodyByOffset(storeMessage, firstOffset));			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
						
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
						
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
						
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
						
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
						
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			        for (int i = minOffsetInQueue; i < consumeQueue.getMaxOffsetInQueue(); i++) {			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			355",
			toLine:"			356",
			content:"
			        //Thread.sleep(10);
			        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);			
",
,
			fromLine:"			378",
			toLine:"			383",
			content:"
			        String topicName = "messagePropertyIsTooLongTest";
			        MessageExtBrokerInner illegalMessage = buildSpecifyLengthPropertyMessage("123".getBytes(StandardCharsets.UTF_8), topicName, Short.MAX_VALUE + 1);
			        assertEquals(messageStore.putMessage(illegalMessage).getPutMessageStatus(), PutMessageStatus.PROPERTIES_SIZE_EXCEEDED);
			        assertEquals(0L, messageStore.getQueueStore().getMaxOffset(topicName, 0).longValue());
			        MessageExtBrokerInner normalMessage = buildSpecifyLengthPropertyMessage("123".getBytes(StandardCharsets.UTF_8), topicName, 100);
			        assertEquals(messageStore.putMessage(normalMessage).getPutMessageStatus(), PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			    private DefaultMessageStore getDefaultMessageStore() {			
",
,
			fromLine:"			390",
			toLine:"			391",
			content:"
			
			    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId) {			
",
,
			fromLine:"			394",
			toLine:"			397",
			content:"
			
			    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId, boolean interval) {
			        AppendMessageResult[] appendMessageResultArray = new AppendMessageResult[totalCount];
			        for (int i = 0; i < totalCount; i++) {			
",
,
			fromLine:"			400",
			toLine:"			402",
			content:"
			            MessageExtBrokerInner msgInner =
			                i < totalCount / 2 ? buildMessage(messageBody.getBytes(), topic) : buildIPv6HostMessage(messageBody.getBytes(), topic);
			            msgInner.setQueueId(queueId);			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
			            assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			449",
			toLine:"			450",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			455",
			toLine:"			455",
			content:"
						
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			        Random random = new Random();			
",
,
			fromLine:"			463",
			toLine:"			463",
			content:"
			        msg.putUserProperty("test", stringBuilder.toString());			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			469",
			toLine:"			470",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
			    private MessageExtBrokerInner buildMessage() {			
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
			        MessageExtBatch msgExtBatch = new MessageExtBatch();			
",
,
			fromLine:"			515",
			toLine:"			515",
			content:"
			        msgExtBatch.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			518",
			toLine:"			519",
			content:"
			        msgExtBatch.setBornTimestamp(System.currentTimeMillis());
			        msgExtBatch.setStoreHost(storeHost);			
",
,
			fromLine:"			526",
			toLine:"			527",
			content:"
			        long totalMsgs = 10;
			        queueTotal = 1;			
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			        }			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
			        int queueId = 0;			
",
,
			fromLine:"			546",
			toLine:"			546",
			content:"
						
",
,
			fromLine:"			551",
			toLine:"			551",
			content:"
			            msg.setQueueId(queueId);			
",
,
			fromLine:"			554",
			toLine:"			554",
			content:"
						
",
,
			fromLine:"			558",
			toLine:"			558",
			content:"
						
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
			        // Disable the dispatcher			
",
,
			fromLine:"			568",
			toLine:"			568",
			content:"
			            msg.setQueueId(queueId);			
",
,
			fromLine:"			571",
			toLine:"			573",
			content:"
			
			        assertThat(messageStore.getMaxOffsetInQueue(messageTopic, queueId)).isEqualTo(firstBatchMessages);
			        assertThat(messageStore.getMaxOffsetInQueue(messageTopic, queueId, true)).isEqualTo(firstBatchMessages);			
",
,
			fromLine:"			577",
			toLine:"			577",
			content:"
			    private MessageExtBrokerInner buildIPv6HostMessage() {			
",
,
			fromLine:"			585",
			toLine:"			585",
			content:"
						
",
,
			fromLine:"			588",
			toLine:"			588",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			603",
			toLine:"			603",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			        //Thread.sleep(100);			
",
,
			fromLine:"			610",
			toLine:"			610",
			content:"
			        String group = "simple";			
",
,
			fromLine:"			614",
			toLine:"			614",
			content:"
						
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			        getMessageResult20.release();			
",
,
			fromLine:"			627",
			toLine:"			627",
			content:"
			        String topic = "recoverTopic";			
",
,
			fromLine:"			632",
			toLine:"			632",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			636",
			toLine:"			636",
			content:"
			        // Thread.sleep(100);//wait for build consumer queue			
",
,
			fromLine:"			638",
			toLine:"			639",
			content:"
			
			        long maxPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			642",
			toLine:"			645",
			content:"
			        //1.just reboot
			        messageStore.shutdown();
			        String storeRootDir = ((DefaultMessageStore) messageStore).getMessageStoreConfig().getStorePathRootDir();
			        messageStore = buildMessageStore(storeRootDir);			
",
,
			fromLine:"			647",
			toLine:"			649",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertTrue(maxPhyOffset == messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			659",
			toLine:"			661",
			content:"
			        //Thread.sleep(100);
			        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
			        long secondLastPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			666",
			toLine:"			666",
			content:"
			        messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
						
",
,
			fromLine:"			671",
			toLine:"			671",
			content:"
			        //damage last message			
",
,
			fromLine:"			674",
			toLine:"			675",
			content:"
			        //reboot
			        messageStore = buildMessageStore(storeRootDir);			
",
,
			fromLine:"			677",
			toLine:"			679",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertTrue(secondLastPhyOffset == messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			686",
			toLine:"			686",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			689",
			toLine:"			691",
			content:"
			        //Thread.sleep(100);
			        StoreTestUtil.waitCommitLogReput((DefaultMessageStore) messageStore);
			        secondLastPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			696",
			toLine:"			697",
			content:"
			        messageExtBrokerInner.setQueueId(0);
			        messageStore.putMessage(messageExtBrokerInner);			
",
,
			fromLine:"			700",
			toLine:"			700",
			content:"
			        //damage last message			
",
,
			fromLine:"			702",
			toLine:"			702",
			content:"
			        //add abort file			
",
,
			fromLine:"			707",
			toLine:"			708",
			content:"
			
			        messageStore = buildMessageStore(storeRootDir);			
",
,
			fromLine:"			710",
			toLine:"			712",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertTrue(secondLastPhyOffset == messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			719",
			toLine:"			719",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			725",
			toLine:"			727",
			content:"
			    public void testStorePathOK() {
			        if (messageStore instanceof DefaultMessageStore) {
			            assertTrue(fileExists(((DefaultMessageStore) messageStore).getStorePathPhysic()));			
",
,
			fromLine:"			760",
			toLine:"			760",
			content:"
			    public void testPutMsgExceedsMaxLength() {			
",
,
			fromLine:"			763",
			toLine:"			763",
			content:"
						
",
,
			fromLine:"			769",
			toLine:"			769",
			content:"
			    public void testPutMsgBatchExceedsMaxLength() {			
",
,
			fromLine:"			780",
			toLine:"			780",
			content:"
			        try {			
",
,
			fromLine:"			788",
			toLine:"			788",
			content:"
			    public void testPutMsgWhenReplicasNotEnough() {			
",
,
			fromLine:"			793",
			toLine:"			794",
			content:"
			        messageStoreConfig.setEnableAutoInSyncReplicas(false);
			        ((DefaultMessageStore) this.messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);			
",
,
			fromLine:"			797",
			toLine:"			797",
			content:"
			        MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			799",
			toLine:"			799",
			content:"
			        assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.IN_SYNC_REPLICAS_NOT_ENOUGH);			
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			    public void testPutMsgWhenAdaptiveDegradation() {			
",
,
			fromLine:"			809",
			toLine:"			810",
			content:"
			        messageStoreConfig.setEnableAutoInSyncReplicas(true);
			        ((DefaultMessageStore) this.messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);			
",
,
			fromLine:"			813",
			toLine:"			813",
			content:"
			        MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			815",
			toLine:"			815",
			content:"
			        assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			821",
			toLine:"			821",
			content:"
			    public void testGetBulkCommitLogData() {			
",
,
			fromLine:"			823",
			toLine:"			823",
			content:"
						
",
,
			fromLine:"			827",
			toLine:"			827",
			content:"
			            MessageExtBrokerInner msg1 = buildMessage();			
",
,
			fromLine:"			835",
			toLine:"			835",
			content:"
			        for (SelectMappedBufferResult bufferResult : bufferResultList) {			
",
,
			fromLine:"			845",
			toLine:"			846",
			content:"
			        MessageExtBrokerInner messageExtBrokerInner = buildMessage();
			        CommitLog commitLog = ((DefaultMessageStore) messageStore).getCommitLog();			
",
,
			fromLine:"			883",
			toLine:"			883",
			content:"
			        MessageExtBrokerInner messageExtBrokerInner = buildMessage();			
",
,
			fromLine:"			887",
			toLine:"			887",
			content:"
			        messageExtBrokerInner.setBody(new byte[originMaxMessageSize + 10]);			
",
,
			fromLine:"			892",
			toLine:"			892",
			content:"
			        messageStoreConfig.setMaxMessageSize(newMaxMessageSize);			
",
,
			fromLine:"			896",
			toLine:"			896",
			content:"
			        messageStoreConfig.setMaxMessageSize(10);			
",
,
			fromLine:"			904",
			toLine:"			904",
			content:"
			    public void testDeleteTopics() {			
",
,
			fromLine:"			906",
			toLine:"			906",
			content:"
			        ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueueInterface>> consumeQueueTable =			
",
,
			fromLine:"			912",
			toLine:"			912",
			content:"
			                ConsumeQueue consumeQueue = new ConsumeQueue(topicName, j, messageStoreConfig.getStorePathRootDir(),			
",
,
			fromLine:"			919",
			toLine:"			919",
			content:"
			        HashSet<String> resultSet = Sets.newHashSet("topic-3", "topic-5");			
",
,
			fromLine:"			926",
			toLine:"			926",
			content:"
			    public void testCleanUnusedTopic() {			
",
,
			fromLine:"			928",
			toLine:"			928",
			content:"
			        ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueueInterface>> consumeQueueTable =			
",
,
			fromLine:"			934",
			toLine:"			934",
			content:"
			                ConsumeQueue consumeQueue = new ConsumeQueue(topicName, j, messageStoreConfig.getStorePathRootDir(),			
",
,
			fromLine:"			941",
			toLine:"			941",
			content:"
			        HashSet<String> resultSet = Sets.newHashSet("topic-3", "topic-5");			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/HATest.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.lang.reflect.Field;
			import java.lang.reflect.InvocationTargetException;
			import java.lang.reflect.Method;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.time.Duration;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.HAConnectionState;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Test;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertArrayEquals;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertTrue;
			
			public class HATest {
			    private final String storeMessage = "Once, there was a chance for me!";
			    private int queueTotal = 100;
			    private AtomicInteger queueId = new AtomicInteger(0);
			    private SocketAddress bornHost;
			    private SocketAddress storeHost;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			    private BrokerStatsManager brokerStatsManager = new BrokerStatsManager("simpleTest", true);
			    private String storePathRootParentDir = System.getProperty("java.io.tmpdir") + File.separator + UUID.randomUUID();			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			    public void init() throws Exception {
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			        masterMessageStoreConfig.setBrokerRole(BrokerRole.SYNC_MASTER);
			        masterMessageStoreConfig.setStorePathRootDir(storePathRootDir + File.separator + "master");			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			        slaveStoreConfig.setBrokerRole(BrokerRole.SLAVE);
			        slaveStoreConfig.setStorePathRootDir(storePathRootDir + File.separator + "slave");			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        buildMessageStoreConfig(slaveStoreConfig);			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        slaveMessageStore = buildMessageStore(slaveStoreConfig, 1L);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        assertTrue(slaveLoad);			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			        long totalMsgs = 10;
			        queueTotal = 1;			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			            Boolean exist = await().atMost(Duration.ofSeconds(5)).until(() -> {			
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			        long totalMsgs = 5;
			        queueTotal = 1;			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			            MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        //wait to let master clean the slave's connection			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			168",
			toLine:"			170",
			content:"
			        long totalMsgs = 5;
			        queueTotal = 1;
			        messageBody = storeMessage.getBytes();			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			            MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			        slaveMessageStore.shutdown();			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
						
",
,
			fromLine:"			204",
			toLine:"			207",
			content:"
			        long totalMsgs = 5;
			        queueTotal = 1;
			        messageBody = storeMessage.getBytes();
			        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			            MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        slaveMessageStore.shutdown();			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        //wait to let master clean the slave's connection			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        for (long i = 0; i < totalMsgs; i++) {			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			
			        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);			
",
,
			fromLine:"			247",
			toLine:"			249",
			content:"
			        slaveMessageStore.destroy();
			        messageStore.shutdown();
			        messageStore.destroy();			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        msg.setTags("TAG1");			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			277",
			toLine:"			278",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/RocksDBMessageStoreTest.java:
		[
			fromLine:"			17",
			toLine:"			76",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.io.RandomAccessFile;
			import java.lang.reflect.InvocationTargetException;
			import java.lang.reflect.Method;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.OverlappingFileLockException;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			
			import com.google.common.collect.Sets;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.assertj.core.util.Strings;
			import org.awaitility.Awaitility;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.fail;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			public class RocksDBMessageStoreTest {
			    private final String storeMessage = "Once, there was a chance for me!";			
",
,
			fromLine:"			81",
			toLine:"			86",
			content:"
			    private final String storeType = StoreType.DEFAULT_ROCKSDB.getStoreType();
			    private int queueTotal = 100;
			    private final AtomicInteger queueId = new AtomicInteger(0);
			    private SocketAddress bornHost;
			    private SocketAddress storeHost;
			    private byte[] messageBody;			
",
,
			fromLine:"			93",
			toLine:"			94",
			content:"
			        }
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			
			        messageStore = buildMessageStore();			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        assertTrue(load);			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			        }
			        queueTotal = 1;			
",
,
			fromLine:"			136",
			toLine:"			137",
			content:"
			        }
			        messageStore.shutdown();			
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			        long totalMessages = ipv4HostMessages + ipv6HostMessages;
			        queueTotal = 1;			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        for (long i = 0; i < ipv4HostMessages; i++) {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			        for (long i = 0; i < ipv6HostMessages; i++) {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
						
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        for (long i = 0; i < totalMessages; i++) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        }			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        int firstOffset = 0;			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			
			        assertThat(new String(messageExt.getBody())).isEqualTo(buildMessageBodyByOffset(storeMessage, firstOffset));			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
						
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			259",
			toLine:"			259",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			        for (AppendMessageResult appendMessageResult : appendMessageResults) {			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
						
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
						
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
						
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			        //Thread.sleep(10);			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			        for (int i = minOffsetInQueue; i < consumeQueue.getMaxOffsetInQueue(); i++) {			
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
			        String topic = "FooBar";			
",
,
			fromLine:"			412",
			toLine:"			413",
			content:"
			        //Thread.sleep(10);
			        StoreTestUtil.waitCommitLogReput((RocksDBMessageStore) messageStore);			
",
,
			fromLine:"			441",
			toLine:"			446",
			content:"
			        String topicName = "messagePropertyIsTooLongTest";
			        MessageExtBrokerInner illegalMessage = buildSpecifyLengthPropertyMessage("123".getBytes(StandardCharsets.UTF_8), topicName, Short.MAX_VALUE + 1);
			        assertEquals(messageStore.putMessage(illegalMessage).getPutMessageStatus(), PutMessageStatus.PROPERTIES_SIZE_EXCEEDED);
			        assertEquals(0L, messageStore.getQueueStore().getMaxOffset(topicName, 0).longValue());
			        MessageExtBrokerInner normalMessage = buildSpecifyLengthPropertyMessage("123".getBytes(StandardCharsets.UTF_8), topicName, 100);
			        assertEquals(messageStore.putMessage(normalMessage).getPutMessageStatus(), PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			    private RocksDBMessageStore getDefaultMessageStore() {			
",
,
			fromLine:"			453",
			toLine:"			454",
			content:"
			
			    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId) {			
",
,
			fromLine:"			457",
			toLine:"			460",
			content:"
			
			    private AppendMessageResult[] putMessages(int totalCount, String topic, int queueId, boolean interval) {
			        AppendMessageResult[] appendMessageResultArray = new AppendMessageResult[totalCount];
			        for (int i = 0; i < totalCount; i++) {			
",
,
			fromLine:"			463",
			toLine:"			465",
			content:"
			            MessageExtBrokerInner msgInner =
			                i < totalCount / 2 ? buildMessage(messageBody.getBytes(), topic) : buildIPv6HostMessage(messageBody.getBytes(), topic);
			            msgInner.setQueueId(queueId);			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			            assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			512",
			toLine:"			513",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
						
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			        Random random = new Random();			
",
,
			fromLine:"			526",
			toLine:"			526",
			content:"
			        msg.putUserProperty("test", stringBuilder.toString());			
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			532",
			toLine:"			533",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			546",
			toLine:"			546",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			566",
			toLine:"			566",
			content:"
			    private MessageExtBrokerInner buildMessage() {			
",
,
			fromLine:"			571",
			toLine:"			571",
			content:"
			        MessageExtBatch msgExtBatch = new MessageExtBatch();			
",
,
			fromLine:"			576",
			toLine:"			576",
			content:"
			        msgExtBatch.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			579",
			toLine:"			580",
			content:"
			        msgExtBatch.setBornTimestamp(System.currentTimeMillis());
			        msgExtBatch.setStoreHost(storeHost);			
",
,
			fromLine:"			590",
			toLine:"			591",
			content:"
			        long totalMessages = 10;
			        queueTotal = 1;			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			        for (long i = 0; i < totalMessages; i++) {			
",
,
			fromLine:"			597",
			toLine:"			597",
			content:"
			        for (long i = 0; i < totalMessages; i++) {			
",
,
			fromLine:"			601",
			toLine:"			601",
			content:"
			        }			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			        int queueId = 0;			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
						
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			            msg.setQueueId(queueId);			
",
,
			fromLine:"			625",
			toLine:"			625",
			content:"
			                .pollInterval(1, TimeUnit.MILLISECONDS)			
",
,
			fromLine:"			628",
			toLine:"			628",
			content:"
			        // Disable the dispatcher			
",
,
			fromLine:"			635",
			toLine:"			635",
			content:"
			            msg.setQueueId(queueId);			
",
,
			fromLine:"			638",
			toLine:"			640",
			content:"
			
			        assertThat(messageStore.getMaxOffsetInQueue(messageTopic, queueId)).isEqualTo(firstBatchMessages);
			        assertThat(messageStore.getMaxOffsetInQueue(messageTopic, queueId, true)).isEqualTo(firstBatchMessages);			
",
,
			fromLine:"			644",
			toLine:"			644",
			content:"
			    private MessageExtBrokerInner buildIPv6HostMessage() {			
",
,
			fromLine:"			652",
			toLine:"			652",
			content:"
						
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			        for (long i = 0; i < totalMessages; i++) {			
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			679",
			toLine:"			679",
			content:"
			                .pollInterval(10, TimeUnit.MILLISECONDS)			
",
,
			fromLine:"			682",
			toLine:"			682",
			content:"
			        String group = "simple";			
",
,
			fromLine:"			686",
			toLine:"			686",
			content:"
						
",
,
			fromLine:"			690",
			toLine:"			690",
			content:"
			        getMessageResult20.release();			
",
,
			fromLine:"			702",
			toLine:"			702",
			content:"
			        String topic = "recoverTopic";			
",
,
			fromLine:"			707",
			toLine:"			707",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			                .atMost(10, TimeUnit.SECONDS)			
",
,
			fromLine:"			717",
			toLine:"			718",
			content:"
			
			        long maxPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			721",
			toLine:"			724",
			content:"
			        //1.just reboot
			        messageStore.shutdown();
			        String storeRootDir = messageStore.getMessageStoreConfig().getStorePathRootDir();
			        messageStore = buildMessageStore(storeRootDir, topic);			
",
,
			fromLine:"			726",
			toLine:"			728",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertEquals(maxPhyOffset, messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			735",
			toLine:"			735",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			742",
			toLine:"			742",
			content:"
			                .atMost(10, TimeUnit.SECONDS)			
",
,
			fromLine:"			744",
			toLine:"			745",
			content:"
			
			        long secondLastPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			751",
			toLine:"			751",
			content:"
			        messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			753",
			toLine:"			753",
			content:"
						
",
,
			fromLine:"			756",
			toLine:"			756",
			content:"
			        // Corrupt the last message			
",
,
			fromLine:"			759",
			toLine:"			760",
			content:"
			        //reboot
			        messageStore = buildMessageStore(storeRootDir, topic);			
",
,
			fromLine:"			762",
			toLine:"			764",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertEquals(secondLastPhyOffset, messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			771",
			toLine:"			771",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			778",
			toLine:"			778",
			content:"
			                .atMost(10, TimeUnit.SECONDS)			
",
,
			fromLine:"			780",
			toLine:"			781",
			content:"
			
			        secondLastPhyOffset = messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			786",
			toLine:"			787",
			content:"
			        messageExtBrokerInner.setQueueId(0);
			        messageStore.putMessage(messageExtBrokerInner);			
",
,
			fromLine:"			790",
			toLine:"			790",
			content:"
			        //Corrupt the last message			
",
,
			fromLine:"			792",
			toLine:"			792",
			content:"
			        //add abort file			
",
,
			fromLine:"			797",
			toLine:"			798",
			content:"
			
			        messageStore = buildMessageStore(storeRootDir, topic);			
",
,
			fromLine:"			800",
			toLine:"			802",
			content:"
			        assertTrue(load);
			        messageStore.start();
			        assertEquals(secondLastPhyOffset, messageStore.getMaxPhyOffset());			
",
,
			fromLine:"			809",
			toLine:"			809",
			content:"
			            messageExtBrokerInner.setQueueId(0);			
",
,
			fromLine:"			818",
			toLine:"			820",
			content:"
			        }
			        if (messageStore instanceof RocksDBMessageStore) {
			            assertTrue(fileExists(((RocksDBMessageStore) messageStore).getStorePathPhysic()));			
",
,
			fromLine:"			856",
			toLine:"			856",
			content:"
			        }			
",
,
			fromLine:"			859",
			toLine:"			859",
			content:"
						
",
,
			fromLine:"			868",
			toLine:"			868",
			content:"
			        }			
",
,
			fromLine:"			879",
			toLine:"			879",
			content:"
			        try {			
",
,
			fromLine:"			891",
			toLine:"			891",
			content:"
			        }			
",
,
			fromLine:"			896",
			toLine:"			897",
			content:"
			        messageStoreConfig.setEnableAutoInSyncReplicas(false);
			        ((RocksDBMessageStore) this.messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);			
",
,
			fromLine:"			900",
			toLine:"			900",
			content:"
			        MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			902",
			toLine:"			902",
			content:"
			        assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.IN_SYNC_REPLICAS_NOT_ENOUGH);			
",
,
			fromLine:"			910",
			toLine:"			910",
			content:"
			        }			
",
,
			fromLine:"			915",
			toLine:"			916",
			content:"
			        messageStoreConfig.setEnableAutoInSyncReplicas(true);
			        ((RocksDBMessageStore) this.messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);			
",
,
			fromLine:"			919",
			toLine:"			919",
			content:"
			        MessageExtBrokerInner msg = buildMessage();			
",
,
			fromLine:"			921",
			toLine:"			921",
			content:"
			        assertThat(result.getPutMessageStatus()).isEqualTo(PutMessageStatus.PUT_OK);			
",
,
			fromLine:"			930",
			toLine:"			930",
			content:"
			        }			
",
,
			fromLine:"			932",
			toLine:"			932",
			content:"
						
",
,
			fromLine:"			936",
			toLine:"			936",
			content:"
			            MessageExtBrokerInner msg1 = buildMessage();			
",
,
			fromLine:"			942",
			toLine:"			942",
			content:"
			        for (SelectMappedBufferResult bufferResult : bufferResultList) {			
",
,
			fromLine:"			955",
			toLine:"			956",
			content:"
			        MessageExtBrokerInner messageExtBrokerInner = buildMessage();
			        CommitLog commitLog = messageStore.getCommitLog();			
",
,
			fromLine:"			996",
			toLine:"			996",
			content:"
			        MessageExtBrokerInner messageExtBrokerInner = buildMessage();			
",
,
			fromLine:"			1000",
			toLine:"			1000",
			content:"
			        messageExtBrokerInner.setBody(new byte[originMaxMessageSize + 10]);			
",
,
			fromLine:"			1005",
			toLine:"			1005",
			content:"
			        messageStoreConfig.setMaxMessageSize(newMaxMessageSize);			
",
,
			fromLine:"			1009",
			toLine:"			1009",
			content:"
			        messageStoreConfig.setMaxMessageSize(10);			
",
,
			fromLine:"			1020",
			toLine:"			1020",
			content:"
			        }			
",
,
			fromLine:"			1022",
			toLine:"			1022",
			content:"
			        ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueueInterface>> consumeQueueTable =			
",
,
			fromLine:"			1028",
			toLine:"			1028",
			content:"
			                ConsumeQueue consumeQueue = new ConsumeQueue(topicName, j, messageStoreConfig.getStorePathRootDir(),			
",
,
			fromLine:"			1035",
			toLine:"			1035",
			content:"
			        HashSet<String> resultSet = Sets.newHashSet("topic-3", "topic-5");			
",
,
			fromLine:"			1045",
			toLine:"			1045",
			content:"
			        }			
",
,
			fromLine:"			1047",
			toLine:"			1047",
			content:"
			        ConcurrentMap<String, ConcurrentMap<Integer, ConsumeQueueInterface>> consumeQueueTable =			
",
,
			fromLine:"			1053",
			toLine:"			1053",
			content:"
			                ConsumeQueue consumeQueue = new ConsumeQueue(topicName, j, messageStoreConfig.getStorePathRootDir(),			
",
,
			fromLine:"			1060",
			toLine:"			1060",
			content:"
			        HashSet<String> resultSet = Sets.newHashSet("topic-3", "topic-5");			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java:
		[
			fromLine:"			16",
			toLine:"			51",
			content:"
			 */
			package org.apache.rocketmq.store.dledger;
			
			import io.openmessaging.storage.dledger.DLedgerServer;
			import io.openmessaging.storage.dledger.store.file.DLedgerMmapFileStore;
			import io.openmessaging.storage.dledger.store.file.MmapFileList;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.UUID;
			import java.util.concurrent.Callable;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.StoreCheckpoint;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.junit.Assert;
			import org.junit.Test;
			import org.junit.Assume;
			import org.apache.rocketmq.common.MixAll;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.apache.rocketmq.store.StoreTestUtil.releaseMmapFilesOnWindows;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			            //Abnormal recover, left some commitlogs			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            //Abnormal recover, left none commitlogs			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			            Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			            //normal recover			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			            Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			            //abnormal recover			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			            Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			164",
			content:"
			        Thread.sleep(1000);
			        doPutMessages(messageStore, topic, 0, messageNumPerQueue, 0);			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			//        truncateAllConsumeQueue(base + File.separator + "consumequeue" + File.separator + topic + File.separator);			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			        Thread.sleep(1000);
			        doGetMessages(messageStore, topic, 0, messageNumPerQueue, 0);			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			        Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			        Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			        Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			        Assert.assertEquals(0, messageStore.dispatchBehindBytes());			
",
,
			fromLine:"			375",
			toLine:"			375",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
						
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			        String group = UUID.randomUUID().toString();			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
						
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java:
		[
			fromLine:"			16",
			toLine:"			40",
			content:"
			 */
			package org.apache.rocketmq.store.dledger;
			
			import io.openmessaging.storage.dledger.DLedgerConfig;
			import io.openmessaging.storage.dledger.DLedgerServer;
			import java.io.File;
			import java.net.UnknownHostException;
			import java.util.Arrays;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.StoreTestBase;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.Assert;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        System.setProperty("dledger.disk.ratio.clean", "0.95");			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			        storeConfig.setMaxIndexNum(100 * 10);
			        storeConfig.setStorePathRootDir(base);			
",
,
			fromLine:"			56",
			toLine:"			58",
			content:"
			        storeConfig.setEnableDLegerCommitLog(true);
			        storeConfig.setdLegerGroup(group);
			        storeConfig.setdLegerPeers(peers);			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			            dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    protected DefaultMessageStore createMessageStore(String base, boolean createAbort) throws Exception {			
",
,
			fromLine:"			123",
			toLine:"			124",
			content:"
			
			    protected void doPutMessages(MessageStore messageStore, String topic, int queueId, int num, long beginLogicsOffset) throws UnknownHostException {			
",
,
			fromLine:"			126",
			toLine:"			128",
			content:"
			            MessageExtBrokerInner msgInner = buildMessage();
			            msgInner.setTopic(topic);
			            msgInner.setQueueId(queueId);			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			            Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());			
",
,
			fromLine:"			134",
			toLine:"			136",
			content:"
			
			    protected void doGetMessages(MessageStore messageStore, String topic, int queueId, int num, long beginLogicsOffset) {
			        for (int i = 0; i < num; i++) {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			            MessageExt messageExt = MessageDecoder.decode(getMessageResult.getMessageBufferList().get(0));			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java:
		[
			fromLine:"			17",
			toLine:"			65",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MappedFileQueue;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.StoreCheckpoint;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Assume;
			import org.junit.Ignore;
			import org.junit.Test;
			import org.rocksdb.RocksDBException;
			
			import java.io.File;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.Random;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicReference;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertTrue;
			
			public class AutoSwitchHATest {			
",
,
			fromLine:"			67",
			toLine:"			71",
			content:"
			    private final int defaultMappedFileSize = 1024 * 1024;
			    private int queueTotal = 100;
			    private AtomicInteger queueId = new AtomicInteger(0);
			    private SocketAddress bornHost;
			    private SocketAddress storeHost;			
",
,
			fromLine:"			84",
			toLine:"			86",
			content:"
			    private String tmpdir = System.getProperty("java.io.tmpdir");
			    private String storePathRootParentDir = (StringUtils.endsWith(tmpdir, File.separator) ? tmpdir : tmpdir + File.separator) + UUID.randomUUID();
			    private String storePathRootDir = storePathRootParentDir + File.separator + "store";			
",
,
			fromLine:"			89",
			toLine:"			93",
			content:"
			    public void init(int mappedFileSize) throws Exception {
			        String brokerName = "AutoSwitchHATest_" + random.nextInt(65535);
			        queueTotal = 1;
			        messageBody = storeMessage.getBytes();
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			97",
			toLine:"			99",
			content:"
			        storeConfig1.setHaSendHeartbeatInterval(1000);
			        storeConfig1.setStorePathRootDir(storePathRootDir + File.separator + brokerName + "#1");
			        storeConfig1.setStorePathCommitLog(storePathRootDir + File.separator + brokerName + "#1" + File.separator + "commitlog");			
",
,
			fromLine:"			108",
			toLine:"			110",
			content:"
			        storeConfig2.setHaSendHeartbeatInterval(1000);
			        storeConfig2.setStorePathRootDir(storePathRootDir + File.separator + brokerName + "#2");
			        storeConfig2.setStorePathCommitLog(storePathRootDir + File.separator + brokerName + "#2" + File.separator + "commitlog");			
",
,
			fromLine:"			123",
			toLine:"			125",
			content:"
			        storeConfig3.setHaSendHeartbeatInterval(1000);
			        storeConfig3.setStorePathRootDir(storePathRootDir + File.separator + brokerName + "#3");
			        storeConfig3.setStorePathCommitLog(storePathRootDir + File.separator + brokerName + "#3" + File.separator + "commitlog");			
",
,
			fromLine:"			145",
			toLine:"			149",
			content:"
			    public void init(int mappedFileSize, boolean allAckInSyncStateSet) throws Exception {
			        String brokerName = "AutoSwitchHATest_" + random.nextInt(65535);
			        queueTotal = 1;
			        messageBody = storeMessage.getBytes();
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			152",
			toLine:"			154",
			content:"
			        storeConfig1.setBrokerRole(BrokerRole.SYNC_MASTER);
			        storeConfig1.setStorePathRootDir(storePathRootDir + File.separator + brokerName + "#1");
			        storeConfig1.setStorePathCommitLog(storePathRootDir + File.separator + brokerName + "#1" + File.separator + "commitlog");			
",
,
			fromLine:"			161",
			toLine:"			163",
			content:"
			        storeConfig2.setBrokerRole(BrokerRole.SLAVE);
			        storeConfig2.setStorePathRootDir(storePathRootDir + File.separator + brokerName + "#2");
			        storeConfig2.setStorePathCommitLog(storePathRootDir + File.separator + brokerName + "#2" + File.separator + "commitlog");			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			            .until(() -> {			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
			        }			
",
,
			fromLine:"			543",
			toLine:"			543",
			content:"
			        msg.setTags("TAG1");			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			548",
			toLine:"			549",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java:
		[
			fromLine:"			17",
			toLine:"			57",
			content:"
			
			package org.apache.rocketmq.store.queue;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.ArrayDeque;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Queue;
			import java.util.Random;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.store.ConsumeQueueExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        for (int i = 0; i < batchNum; i++) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        while (true) {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
						
",
,
			fromLine:"			227",
			toLine:"			228",
			content:"
			        int maxBatchDeleteFilesNum = messageStore.getMessageStoreConfig().getMaxBatchDeleteFilesNum();
			        messageStore.getCommitLog().deleteExpiredFile(1L, 100, 12000, true, maxBatchDeleteFilesNum);			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			        for (int i = -100; i < 100; i += 20) {			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        Assert.assertEquals(timeStart, earliestMessageTime);			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			        Assert.assertEquals(timeMid, messageStoreTime);			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
						
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			        for (int i = -100; i < 100; i += 20) {			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			        Assert.assertEquals(earliestMessageTime, timeStart);			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			        Assert.assertEquals(messageStoreTime, timeMid);			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
						
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			        //get the message Normally			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			        {			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			        {			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			        {			
",
,
			fromLine:"			443",
			toLine:"			443",
			content:"
			        {			
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
			        {			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			        {			
",
,
			fromLine:"			517",
			toLine:"			517",
			content:"
			        };			
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			        // test for illegal offset			
",
,
			fromLine:"			523",
			toLine:"			523",
			content:"
			        Assert.assertEquals(-1, estimation);			
",
,
			fromLine:"			543",
			toLine:"			543",
			content:"
			        };			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			        // test for illegal offset			
",
,
			fromLine:"			549",
			toLine:"			549",
			content:"
			        Assert.assertEquals(-1, estimation);			
",
,
			fromLine:"			551",
			toLine:"			551",
			content:"
			        Assert.assertEquals(-1, estimation);			
",
,
			fromLine:"			573",
			toLine:"			573",
			content:"
			        };			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/timer/TimerMessageStoreTest.java:
		[
			fromLine:"			17",
			toLine:"			68",
			content:"
			
			package org.apache.rocketmq.store.timer;
			
			import java.io.File;
			import java.io.IOException;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.Callable;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageArrivingListener;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			70",
			toLine:"			72",
			content:"
			    private final byte[] msgBody = new byte[1024];
			    private static MessageStore messageStore;
			    private SocketAddress bornHost;			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        String baseDir = StoreTestUtils.createBaseDir();			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			90",
			toLine:"			100",
			content:"
			
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setMappedFileSizeCommitLog(1024 * 1024 * 1024);
			        storeConfig.setMappedFileSizeTimerLog(1024 * 1024 * 1024);
			        storeConfig.setMappedFileSizeConsumeQueue(10240);
			        storeConfig.setMaxHashSlotNum(10000);
			        storeConfig.setMaxIndexNum(100 * 1000);
			        storeConfig.setStorePathRootDir(baseDir);
			        storeConfig.setStorePathCommitLog(baseDir + File.separator + "commitlog");
			        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
			        storeConfig.setTimerInterceptDelayLevel(true);			
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			
			        messageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("TimerTest",false), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        assertTrue(load);			
",
,
			fromLine:"			115",
			toLine:"			116",
			content:"
			        TimerMetrics timerMetrics = new TimerMetrics(rootDir + File.separator + "config" + File.separator + "timermetrics");
			        TimerMessageStore timerMessageStore = new TimerMessageStore(messageStore, storeConfig, timerCheckpoint, timerMetrics, null);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        if (deliverMs > System.currentTimeMillis()) {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
						
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			                transformTimerMessage(timerMessageStore,inner);			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
						
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			            if (putMessageResult == null || !putMessageResult.getPutMessageStatus().equals(PutMessageStatus.WHEEL_TIMER_FLOW_CONTROL)) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			            // Message with delayMs in getSlotIndex(delayMs - precisionMs).			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
						
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			            transformTimerMessage(timerMessageStore,inner);			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
						
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			            }			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			        delMsg.setPropertiesString(MessageDecoder.messageProperties2String(delMsg.getProperties()));			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
						
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			            transformTimerMessage(timerMessageStore,inner);			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			        delMsg.setPropertiesString(MessageDecoder.messageProperties2String(delMsg.getProperties()));			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			            public Boolean call() {			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			                return curr >= delayMs			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			        final int msgNum = 250;			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			            transformTimerMessage(first,inner);			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			            public Boolean call() {			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			                return first.getCommitQueueOffset() == msgNum			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			        assertThat(first.getTimerLog().getMappedFileQueue().getMappedFiles().size())			
",
,
			fromLine:"			404",
			toLine:"			405",
			content:"
			        assertThat(first.getCommitReadTimeMs()).isEqualTo(first.getCurrReadTimeMs());
			        curr = System.currentTimeMillis() / precisionMs * precisionMs;			
",
,
			fromLine:"			413",
			toLine:"			415",
			content:"
			        // Damage the timer wheel, trigger the check physical pos.
			        Slot slot = first.getTimerWheel().getSlot(delayMs - precisionMs);
			        assertNotEquals(-1, slot.timeMs);			
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
			            public Boolean call() {			
",
,
			fromLine:"			452",
			toLine:"			453",
			content:"
			
			        long curr = System.currentTimeMillis() / precisionMs * precisionMs;			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
			    public void testRollMessage() throws Exception {			
",
,
			fromLine:"			474",
			toLine:"			475",
			content:"
			
			        long curr = System.currentTimeMillis() / precisionMs * precisionMs;			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
			        transformTimerMessage(timerMessageStore,inner);			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			        assertEquals(1, Integer.valueOf(msgExt.getProperty(MessageConst.PROPERTY_TIMER_ROLL_TIMES)).intValue());			
",
,
			fromLine:"			491",
			toLine:"			491",
			content:"
			        while (retry-- > 0) {			
",
,
			fromLine:"			515",
			toLine:"			516",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setBornHost(bornHost);			
",
,
			fromLine:"			538",
			toLine:"			538",
			content:"
			        }			
",
,
			fromLine:"			541",
			toLine:"			543",
			content:"
			        }
			        if (null != messageStore) {
			            messageStore.shutdown();			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java:
		[
			fromLine:"			17",
			toLine:"			50",
			content:"
			
			package org.apache.rocketmq.test.autoswitchrole;
			
			import java.io.File;
			import java.io.IOException;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.ServerSocket;
			import java.net.SocketAddress;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Random;
			import java.util.UUID;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			
			import static org.awaitility.Awaitility.await;
			
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			            .until(() -> {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/MessageStore.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.function.Supplier;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.SystemClock;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.HAService;
			import org.apache.rocketmq.store.hook.PutMessageHook;
			import org.apache.rocketmq.store.hook.SendMessageBackHook;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.util.PerfCounter;
			import org.rocksdb.RocksDBException;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
						
",
,
			fromLine:"			118",
			toLine:"			123",
			content:"
			     *
			     * @param group         Consumer group that launches this query.
			     * @param topic         Topic to query.
			     * @param queueId       Queue ID to query.
			     * @param offset        Logical offset to start from.
			     * @param maxMsgNums    Maximum count of messages to query.			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			     */			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			     * Asynchronous get message			
",
,
			fromLine:"			133",
			toLine:"			138",
			content:"
			     *
			     * @param group         Consumer group that launches this query.
			     * @param topic         Topic to query.
			     * @param queueId       Queue ID to query.
			     * @param offset        Logical offset to start from.
			     * @param maxMsgNums    Maximum count of messages to query.			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			     */			
",
,
			fromLine:"			148",
			toLine:"			154",
			content:"
			     *
			     * @param group           Consumer group that launches this query.
			     * @param topic           Topic to query.
			     * @param queueId         Queue ID to query.
			     * @param offset          Logical offset to start from.
			     * @param maxMsgNums      Maximum count of messages to query.
			     * @param maxTotalMsgSize Maximum total msg size of the messages			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			     */			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			     * Asynchronous get message			
",
,
			fromLine:"			164",
			toLine:"			170",
			content:"
			     *
			     * @param group           Consumer group that launches this query.
			     * @param topic           Topic to query.
			     * @param queueId         Queue ID to query.
			     * @param offset          Logical offset to start from.
			     * @param maxMsgNums      Maximum count of messages to query.
			     * @param maxTotalMsgSize Maximum total msg size of the messages			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			     */			
",
,
			fromLine:"			188",
			toLine:"			190",
			content:"
			     *
			     * @param topic     Topic name.
			     * @param queueId   Queue ID.			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			     */			
",
,
			fromLine:"			211",
			toLine:"			213",
			content:"
			     *
			     * @param topic              Topic of the message to lookup.
			     * @param queueId            Queue ID.			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			     */			
",
,
			fromLine:"			221",
			toLine:"			223",
			content:"
			     *
			     * @param topic     Topic of the message.
			     * @param queueId   Queue ID.			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			     */			
",
,
			fromLine:"			231",
			toLine:"			233",
			content:"
			     *
			     * @param topic        Topic of the message.
			     * @param queueId      Queue ID.			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			     */			
",
,
			fromLine:"			336",
			toLine:"			338",
			content:"
			     *
			     * @param topic              message topic.
			     * @param queueId            queue ID.			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			     */			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			     * Asynchronous get the store time of the message specified.			
",
,
			fromLine:"			347",
			toLine:"			349",
			content:"
			     *
			     * @param topic              message topic.
			     * @param queueId            queue ID.			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			     */			
",
,
			fromLine:"			384",
			toLine:"			387",
			content:"
			     *
			     * @param startOffset starting offset.
			     * @param data        data to append.
			     * @param dataStart   the start index of data array			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			     */			
",
,
			fromLine:"			400",
			toLine:"			404",
			content:"
			     *
			     * @param topic  topic of the message.
			     * @param key    message key.
			     * @param maxNum maximum number of the messages possible.
			     * @param begin  begin timestamp.			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			     */			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			     * Asynchronous query messages by given key.			
",
,
			fromLine:"			413",
			toLine:"			417",
			content:"
			     *
			     * @param topic  topic of the message.
			     * @param key    message key.
			     * @param maxNum maximum number of the messages possible.
			     * @param begin  begin timestamp.			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			     */			
",
,
			fromLine:"			475",
			toLine:"			477",
			content:"
			     *
			     * @param topic         topic.
			     * @param queueId       queue ID.			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
			     * @return true if the message is no longer in memory; false otherwise.			
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
			    @Deprecated			
",
,
			fromLine:"			487",
			toLine:"			489",
			content:"
			     *
			     * @param topic         topic.
			     * @param queueId       queue ID.			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
			     */			
",
,
			fromLine:"			497",
			toLine:"			499",
			content:"
			     *
			     * @param topic         topic.
			     * @param queueId       queue ID.			
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			     */			
",
,
			fromLine:"			609",
			toLine:"			611",
			content:"
			     *
			     * @param msg           the msg that is appended to commit log
			     * @param result        append message result			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
			     */			
",
,
			fromLine:"			619",
			toLine:"			619",
			content:"
			     * @param dispatchRequest dispatch request			
",
,
			fromLine:"			621",
			toLine:"			622",
			content:"
			     * @param commitLogFile   commit log file
			     * @param isRecover       is from recover process			
",
,
			fromLine:"			625",
			toLine:"			625",
			content:"
			     */			
",
,
			fromLine:"			776",
			toLine:"			778",
			content:"
			     *
			     * @param offset
			     * @param size			
",
,
			fromLine:"			781",
			toLine:"			781",
			content:"
			     */			
",
,
			fromLine:"			918",
			toLine:"			921",
			content:"
			     *
			     * @param byteBuffer
			     * @param checkCRC
			     * @param checkDupInfo			
",
,
			fromLine:"			924",
			toLine:"			924",
			content:"
			     */			
",
,
			fromLine:"			958",
			toLine:"			962",
			content:"
			     *
			     * @param topic   Topic name
			     * @param queueId Queue ID
			     * @param from    Lower boundary of the range, inclusive.
			     * @param to      Upper boundary of the range, inclusive.			
",
,
			fromLine:"			965",
			toLine:"			965",
			content:"
			     */			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/kv/CompactionLog.java:
		[
			fromLine:"			16",
			toLine:"			70",
			content:"
			 */
			package org.apache.rocketmq.store.kv;
			
			import com.google.common.collect.Lists;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.ArrayUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.CompactionAppendMsgCallback;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MappedFileQueue;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageLock;
			import org.apache.rocketmq.store.PutMessageReentrantLock;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageSpinLock;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.StoreUtil;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.BatchConsumeQueue;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			import org.apache.rocketmq.store.queue.SparseConsumeQueue;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.nio.file.Paths;
			import java.security.DigestException;
			import java.security.MessageDigest;
			import java.security.NoSuchAlgorithmException;
			import java.util.Arrays;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Objects;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.stream.Collectors;
			
			import static org.apache.rocketmq.common.message.MessageDecoder.BLANK_MAGIC_CODE;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    private final String compactionCqFilePath;			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			    private final CompactionAppendMsgCallback endMsgCallback;
			    private final String topic;			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    private TopicPartitionLog replicating;			
",
,
			fromLine:"			99",
			toLine:"			101",
			content:"
			        throws IOException {
			        this.topic = topic;
			        this.queueId = queueId;			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			        this.compactionCqMappedFileSize =
			            messageStoreConfig.getCompactionCqMappedFileSize() / BatchConsumeQueue.CQ_STORE_UNIT_SIZE			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        this.compactionCqFilePath = compactionStore.getCompactionCqPath();        // batch consume queue already separated			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        initLogAndCq(exitOk);			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			            && getLog().isMappedFilesEmpty()) {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
						
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			                log.info("{}:{} message offset {} >= minOffsetInQueue {}, stop pull...",			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        try (MessageFetcher messageFetcher = new MessageFetcher()) {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                    if (currOffset < 0) {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
						
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
						
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
						
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
						
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        if (isInDisk) {			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
						
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			        } else {			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
						
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			        final TopicPartitionLog tpLog) {			
",
,
			fromLine:"			357",
			toLine:"			357",
			content:"
			        final MessageExt msgExt, final TopicPartitionLog tpLog) {			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
			        final DispatchRequest dispatchRequest) {			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			        final DispatchRequest dispatchRequest, final TopicPartitionLog tpLog) {			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
						
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			        // fix duplicate			
",
,
			fromLine:"			384",
			toLine:"			385",
			content:"
			
			        if (StringUtils.isBlank(keys)) {			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
						
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			                    } catch (IOException e) {			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
						
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
			            GetMessageStatus status;			
",
,
			fromLine:"			469",
			toLine:"			470",
			content:"
			                    status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;
			                    nextBeginOffset = nextOffsetCorrection(offset, 0);			
",
,
			fromLine:"			472",
			toLine:"			473",
			content:"
			                    status = GetMessageStatus.OFFSET_OVERFLOW_ONE;
			                    nextBeginOffset = nextOffsetCorrection(offset, offset);			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			                    if (0 == minOffset) {			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
			                    } else {			
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
						
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			                        log.warn("The max pull size is too large maxPullSize={} topic={} queueId={}",			
",
,
			fromLine:"			501",
			toLine:"			501",
			content:
{
                                    + "but access logic queue failed. correct nextBeginOffset to ",						
}
,
			fromLine:"			517",
			toLine:"			517",
			content:"
						
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			                                }			
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			                status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;			
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			            if (GetMessageStatus.FOUND == status) {			
",
,
			fromLine:"			569",
			toLine:"			569",
			content:"
			            } else {			
",
,
			fromLine:"			571",
			toLine:"			572",
			content:"
			            }
			            long elapsedTime = this.defaultMessageStore.getSystemClock().now() - beginTime;			
",
,
			fromLine:"			597",
			toLine:"			597",
			content:"
			            long maxQueueOffsetInFile = getCQ().getMaxMsgOffsetFromFile(mf.getFile().getName());			
",
,
			fromLine:"			618",
			toLine:"			619",
			content:"
			        replaceFiles(compactFiles.toCompactFiles, current, compacting);
			        positionMgr.setOffset(topic, queueId, offsetMap.lastOffset);			
",
,
			fromLine:"			650",
			toLine:"			650",
			content:"
			                    //decode bytebuffer			
",
,
			fromLine:"			653",
			toLine:"			653",
			content:"
			                        ////get key & offset and put to offsetMap			
",
,
			fromLine:"			689",
			toLine:"			689",
			content:"
			                    smb = iterator.next();			
",
,
			fromLine:"			825",
			toLine:"			828",
			content:"
			    static class CompactionAppendMessageCallback implements CompactionAppendMsgCallback {
			        private final String topic;
			        private final int queueId;
			        private final long tagsCode;			
",
,
			fromLine:"			832",
			toLine:"			835",
			content:"
			        public CompactionAppendMessageCallback(MessageExt msgExt, SparseConsumeQueue bcq) {
			            this.topic = msgExt.getTopic();
			            this.queueId =  msgExt.getQueueId();
			            this.tagsCode = MessageExtBrokerInner.tagsString2tagsCode(msgExt.getTags());			
",
,
			fromLine:"			840",
			toLine:"			843",
			content:"
			        public CompactionAppendMessageCallback(String topic, int queueId, long tagsCode, long storeTimestamp, SparseConsumeQueue bcq) {
			            this.topic = topic;
			            this.queueId =  queueId;
			            this.tagsCode = tagsCode;			
",
,
			fromLine:"			853",
			toLine:"			853",
			content:"
			            MappedFile bcqMappedFile = bcq.getMappedFileQueue().getLastMappedFile();			
",
,
			fromLine:"			861",
			toLine:"			861",
			content:"
			                return new AppendMessageResult(AppendMessageStatus.END_OF_FILE,			
",
,
			fromLine:"			874",
			toLine:"			875",
			content:"
			
			            boolean result = bcq.putBatchMessagePositionInfo(physicalOffset, msgLen,			
",
,
			fromLine:"			877",
			toLine:"			877",
			content:"
			            if (!result) {			
",
,
			fromLine:"			879",
			toLine:"			879",
			content:"
			            }			
",
,
			fromLine:"			995",
			toLine:"			995",
			content:"
			                    compactionLog.compactionLogMappedFileSize, null);			
",
,
			fromLine:"			997",
			toLine:"			997",
			content:"
			                    compactionLog.compactionCqFilePath, compactionLog.compactionCqMappedFileSize,			
",
,
			fromLine:"			1001",
			toLine:"			1001",
			content:"
			                    compactionLog.compactionLogMappedFileSize, null);			
",
,
			fromLine:"			1003",
			toLine:"			1003",
			content:"
			                    compactionLog.compactionCqFilePath, compactionLog.compactionCqMappedFileSize,			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/kv/CompactionStore.java:
		[
			fromLine:"			16",
			toLine:"			45",
			content:"
			 */
			package org.apache.rocketmq.store.kv;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Optional;
			import java.util.Random;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.CleanupPolicy;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
						
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        final int maxMsgNums, final int maxTotalMsgSize) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			        } else {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/kv/CompactionPositionMgr.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.store.kv;
			
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			
			import java.io.File;
			import java.util.concurrent.ConcurrentHashMap;
						
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			
			    public void setOffset(String topic, int queueId, final long offset) {			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			
			    public boolean isCompaction(String topic, int queueId, long offset) {			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/kv/CompactionPositionMgrTest.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.store.kv;
			
			import org.junit.Before;
			import org.junit.Rule;
			import org.junit.Test;
			import org.junit.rules.TemporaryFolder;
			
			import java.io.File;
			import java.io.IOException;
			
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        CompactionPositionMgr mgr = new CompactionPositionMgr(file.getAbsolutePath());			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        assertEquals(1, mgr.getOffset("topic1", 1));			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        assertEquals(2, mgr.getOffset("topic1", 1));			
",
,
			fromLine:"			54",
			toLine:"			55",
			content:"
			        CompactionPositionMgr mgr = new CompactionPositionMgr(file.getAbsolutePath());
			        mgr.setOffset("topic1", 1, 2);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStore.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Objects;
			import java.util.Optional;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.FutureTask;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.store.CommitLog;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			
			import static java.lang.String.format;
			import static org.apache.rocketmq.store.config.StorePathConfigHelper.getStorePathBatchConsumeQueue;
			import static org.apache.rocketmq.store.config.StorePathConfigHelper.getStorePathConsumeQueue;
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			    @Override			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    @Override			
",
,
			fromLine:"			175",
			toLine:"			176",
			content:"
			    @Override
			    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp, BoundaryType boundaryType) {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        if (logic != null) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
						
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			236",
			content:"
			            return new ConsumeQueue(
			                topic,
			                queueId,			
",
,
			fromLine:"			241",
			toLine:"			243",
			content:"
			            return new BatchConsumeQueue(
			                topic,
			                queueId,			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			    private ExecutorService buildExecutorService(BlockingQueue<Runnable> blockingQueue, String threadNamePrefix) {			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
						
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			        FileQueueLifeCycle fileQueueLifeCycle = getLifeCycle(consumeQueue.getTopic(), consumeQueue.getQueueId());			
",
,
			fromLine:"			420",
			toLine:"			422",
			content:"
			
			    public void updateQueueOffset(String topic, int queueId, long offset) {
			        String topicQueueKey = topic + "-" + queueId;			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			                lastBuffer.getByteBuffer().mark();			
",
,
			fromLine:"			490",
			toLine:"			490",
			content:"
						
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcher.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.tieredstore.core;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.QueryMessageResult;
						
",
,
			fromLine:"			37",
			toLine:"			39",
			content:"
			     *
			     * @param topic              Message topic.
			     * @param queueId            Queue ID.			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			     */			
",
,
			fromLine:"			47",
			toLine:"			49",
			content:"
			     *
			     * @param topic     Topic of the message.
			     * @param queueId   Queue ID.			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			     */			
",
,
			fromLine:"			57",
			toLine:"			60",
			content:"
			     *
			     * @param group         Consumer group that launches this query.
			     * @param topic         Topic to query.
			     * @param queueId       Queue ID to query.			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			     */			
",
,
			fromLine:"			71",
			toLine:"			75",
			content:"
			     *
			     * @param topic    Topic of the message.
			     * @param key      Message key.
			     * @param maxCount Maximum count of the messages possible.
			     * @param begin    Begin timestamp.			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			     */			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcherImplTest.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.core;
			
			import java.io.IOException;
			import java.time.Duration;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.TieredMessageStore;
			import org.apache.rocketmq.tieredstore.common.GetMessageResultExt;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.awaitility.Awaitility;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			    private String groupName;
			    private MessageQueue mq;
			    private MessageStoreConfig storeConfig;			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			    public void shutdown() throws IOException {
			        if (messageStore != null) {			
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			        dispatcherTest.dispatchFromCommitLogTest();
			        mq = dispatcherTest.mq;
			        messageStore = dispatcherTest.messageStore;			
",
,
			fromLine:"			68",
			toLine:"			71",
			content:"
			
			        storeConfig.setReadAheadCacheEnable(true);
			        fetcher = new MessageStoreFetcherImpl(messageStore);
			        GetMessageResult getMessageResult = fetcher.getMessageAsync(			
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			        getMessageResult = fetcher.getMessageAsync(			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			
			        getMessageResult = fetcher.getMessageAsync(			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			
			        getMessageResult = fetcher.getMessageAsync(			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        // direct			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
						
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			        int size = getMessageResult.getMessageBufferList().get(0).remaining();
			        storeConfig.setReadAheadMessageSizeThreshold(expect * size + 10);			
",
,
			fromLine:"			140",
			toLine:"			142",
			content:"
			
			        storeConfig.setReadAheadMessageCountThreshold(expect);
			        storeConfig.setReadAheadMessageSizeThreshold(expect * size + expect * 2);			
",
,
			fromLine:"			153",
			toLine:"			155",
			content:"
			        this.getMessageFromTieredStoreTest();
			        mq = dispatcherTest.mq;
			        messageStore = dispatcherTest.messageStore;			
",
,
			fromLine:"			157",
			toLine:"			159",
			content:"
			
			        storeConfig.setReadAheadCacheEnable(true);
			        storeConfig.setReadAheadMessageCountThreshold(32);			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        AtomicLong offset = new AtomicLong(100L);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            GetMessageResultExt getMessageResult =			
",
,
			fromLine:"			178",
			toLine:"			180",
			content:"
			        this.getMessageFromTieredStoreTest();
			        mq = dispatcherTest.mq;
			        messageStore = dispatcherTest.messageStore;			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
						
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			201",
			toLine:"			203",
			content:"
			        this.getMessageFromTieredStoreTest();
			        mq = dispatcherTest.mq;
			        messageStore = dispatcherTest.messageStore;			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        // message time is all 11			
",
,
			fromLine:"			208",
			toLine:"			210",
			content:"
			
			        Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 10, BoundaryType.LOWER));
			        Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 11, BoundaryType.LOWER));			
",
,
			fromLine:"			212",
			toLine:"			214",
			content:"
			
			        Assert.assertEquals(100L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 10, BoundaryType.UPPER));
			        Assert.assertEquals(199L, fetcher.getOffsetInQueueByTime(mq.getTopic(), 1, 11, BoundaryType.UPPER));			
",
,
			fromLine:"			220",
			toLine:"			222",
			content:"
			        this.getMessageFromTieredStoreTest();
			        mq = dispatcherTest.mq;
			        messageStore = dispatcherTest.messageStore;			
",
,
			fromLine:"			224",
			toLine:"			225",
			content:"
			
			        QueryMessageResult queryMessageResult = fetcher.queryMessageAsync(			
",
,
			fromLine:"			228",
			toLine:"			229",
			content:"
			
			        queryMessageResult = fetcher.queryMessageAsync(			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexService.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.tieredstore.index;
			
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
						
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			     *
			     * @param topic     The topic of the key.
			     * @param topicId   The ID of the topic.			
",
,
			fromLine:"			35",
			toLine:"			37",
			content:"
			     * @param keySet    The set of keys to be indexed.
			     * @param offset    The offset value of the key.
			     * @param size      The size of the key.			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			     */			
",
,
			fromLine:"			46",
			toLine:"			49",
			content:"
			     *
			     * @param topic     The topic of the key.
			     * @param key       The key to be queried.
			     * @param beginTime The start time of the query range.			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			     */			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexStoreService.java:
		[
			fromLine:"			16",
			toLine:"			51",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.index;
			
			import com.google.common.annotations.VisibleForTesting;
			import com.google.common.base.Stopwatch;
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.nio.file.Paths;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Comparator;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentNavigableMap;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.file.FlatAppendFile;
			import org.apache.rocketmq.tieredstore.file.FlatFileFactory;
			import org.apache.rocketmq.tieredstore.provider.FileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			     */			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			    private final AtomicLong compactTimestamp;
			    private final String filePath;			
",
,
			fromLine:"			73",
			toLine:"			75",
			content:"
			    public IndexStoreService(FlatFileFactory flatFileFactory, String filePath) {
			        this.storeConfig = flatFileFactory.getStoreConfig();
			        this.filePath = filePath;			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        // delete compact file directory			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        // recover local			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			                try {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			                    timeStoreTable.put(indexFile.getTimestamp(), indexFile);			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        // recover remote			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        for (FileSegment fileSegment : flatAppendFile.getFileSegmentList()) {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            timeStoreTable.put(indexFile.getTimestamp(), indexFile);			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			            }			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			            this.currentWriteFile = newStoreFile;			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			    @Override			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			        for (int i = 0; i < 3; i++) {
			            AppendResult result = this.currentWriteFile.putKey(			
",
,
			fromLine:"			206",
			toLine:"			207",
			content:"
			
			        log.error("IndexStoreService put key three times return error, topic: {}, topicId: {}, " +			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			    @Override			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            ConcurrentNavigableMap<Long, IndexFile> pendingMap =			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			                CompletableFuture<Void> completableFuture = entry.getValue()			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			                    .thenAccept(itemList -> itemList.forEach(indexItem -> {			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			                        List<IndexItem> resultList = new ArrayList<>(result.values());			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			        if (IndexFile.IndexStatusEnum.UPLOAD.equals(indexFile.getFileStatus())) {			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			            if (byteBuffer == null) {			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			        if (!result || fileSegment == null || fileSegment.getMinTimestamp() != indexFile.getTimestamp()) {			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        } else {			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        try {			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			        this.compactTimestamp.set(timestamp);			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			            long expireTimestamp = System.currentTimeMillis()			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			        }			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreDispatcherImpl.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.core;
			
			import io.opentelemetry.api.common.Attributes;
			import java.nio.ByteBuffer;
			import java.time.Duration;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.TieredMessageStore;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.file.FlatFileInterface;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.index.IndexService;
			import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant;
			import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			61",
			content:"
			    protected final MessageStore defaultStore;
			    protected final MessageStoreConfig storeConfig;
			    protected final TieredMessageStore messageStore;			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			    public MessageStoreDispatcherImpl(TieredMessageStore messageStore) {
			        this.messageStore = messageStore;			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        this.defaultStore = messageStore.getDefaultStore();			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        this.semaphore = new Semaphore(			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        this.topicFilter = messageStore.getTopicFilter();			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        try {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public void dispatch(DispatchRequest request) {			
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			        }
			        flatFileStore.computeIfAbsent(			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public CompletableFuture<Boolean> doScheduleDispatch(FlatFileInterface flatFile, boolean force) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        // ensure that the data in the cache is directly committed successfully.			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			            if (topicFilter != null && topicFilter.filterTopic(flatFile.getMessageQueue().getTopic())) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			                currentOffset = Math.max(minOffsetInQueue,			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			            if (currentOffset < minOffsetInQueue) {			
",
,
			fromLine:"			156",
			toLine:"			157",
			content:"
			                    topic, queueId, minOffsetInQueue, maxOffsetInQueue, currentOffset);
			                flatFileStore.destroyFile(flatFile.getMessageQueue());			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			            if (currentOffset > maxOffsetInQueue) {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			            if (flatFile.rollingFile(interval)) {			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			            long bufferSize = 0L;
			            long groupCommitSize = storeConfig.getTieredStoreGroupCommitSize();			
",
,
			fromLine:"			189",
			toLine:"			190",
			content:"
			            boolean timeout = MessageFormatUtil.getStoreTimeStamp(message.getByteBuffer()) +
			                storeConfig.getTieredStoreGroupCommitTimeout() < System.currentTimeMillis();			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			            if (!timeout && !bufferFull && !force) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			                    TimeUnit.MINUTES.toMillis(5) < System.currentTimeMillis()) {			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			                } else {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			            // If there are many messages waiting to be uploaded, call the upload logic immediately.			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			            if (success) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			        }			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			    public void run() {			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			        while (!this.isStopped()) {			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        }			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexStoreServiceBenchTest.java:
		[
			fromLine:"			17",
			toLine:"			55",
			content:"
			
			package org.apache.rocketmq.tieredstore.index;
			
			import com.google.common.base.Stopwatch;
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Paths;
			import java.util.Collections;
			import java.util.List;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.LongAdder;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.file.FlatFileFactory;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.junit.Assert;
			import org.junit.Ignore;
			import org.openjdk.jmh.annotations.BenchmarkMode;
			import org.openjdk.jmh.annotations.Fork;
			import org.openjdk.jmh.annotations.Measurement;
			import org.openjdk.jmh.annotations.Mode;
			import org.openjdk.jmh.annotations.OutputTimeUnit;
			import org.openjdk.jmh.annotations.Scope;
			import org.openjdk.jmh.annotations.Setup;
			import org.openjdk.jmh.annotations.State;
			import org.openjdk.jmh.annotations.TearDown;
			import org.openjdk.jmh.annotations.Threads;
			import org.openjdk.jmh.annotations.Warmup;
			import org.openjdk.jmh.results.format.ResultFormatType;
			import org.openjdk.jmh.runner.Runner;
			import org.openjdk.jmh.runner.options.Options;
			import org.openjdk.jmh.runner.options.OptionsBuilder;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			
			    private static final Logger log = LoggerFactory.getLogger(MessageStoreUtil.TIERED_STORE_LOGGER_NAME);
			    private static final String TOPIC_NAME = "TopicTest";			
",
,
			fromLine:"			71",
			toLine:"			79",
			content:"
			        UtilAll.deleteFile(new File("./e96d41b2_IndexService"));
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setBrokerClusterName("IndexService");
			        storeConfig.setBrokerName("IndexServiceBroker");
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.PosixFileSegment");
			        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(500 * 1000);
			        storeConfig.setTieredStoreIndexFileMaxIndexNum(2000 * 1000);
			        MetadataStore metadataStore = new DefaultMetadataStore(storeConfig);			
",
,
			fromLine:"			98",
			toLine:"			99",
			content:"
			        for (int i = 0; i < 100; i++) {
			            AppendResult result = indexStoreService.putKey(			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			        for (int j = 0; j < 10; j++) {
			            for (int i = 0; i < storeConfig.getTieredStoreIndexFileMaxIndexNum(); i++) {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        for (int i = 0; i < queryCount; i++) {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        }			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexStoreServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.index;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Paths;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.file.FlatFileFactory;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			62",
			content:"
			
			    private static final String TOPIC_NAME = "TopicTest";
			    private static final int TOPIC_ID = 123;
			    private static final int QUEUE_ID = 2;
			    private static final long MESSAGE_OFFSET = 666;
			    private static final int MESSAGE_SIZE = 1024;			
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			
			    private String filePath;
			    private MessageStoreConfig storeConfig;			
",
,
			fromLine:"			71",
			toLine:"			80",
			content:"
			    public void init() throws IOException, ClassNotFoundException, NoSuchMethodException {
			        filePath = UUID.randomUUID().toString().replace("-", "").substring(0, 8);
			        String directory = Paths.get(System.getProperty("user.home"), "store_test", filePath).toString();
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setStorePathRootDir(directory);
			        storeConfig.setTieredStoreFilePath(directory);
			        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(5);
			        storeConfig.setTieredStoreIndexFileMaxIndexNum(20);
			        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.PosixFileSegment");
			        MetadataStore metadataStore = new DefaultMetadataStore(storeConfig);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        }			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void basicServiceTest() throws InterruptedException {			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			        for (int i = 0; i < 50; i++) {
			            Assert.assertEquals(AppendResult.SUCCESS, indexService.putKey(			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public void doConvertOldFormatTest() throws IOException {			
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			        long timestamp = indexService.getTimeStoreTable().firstKey();
			        Assert.assertEquals(AppendResult.SUCCESS, indexService.putKey(			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
						
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			128",
			toLine:"			130",
			content:"
			            4, new ThreadFactoryImpl("ConcurrentPutTest"));
			        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(500);
			        storeConfig.setTieredStoreIndexFileMaxIndexNum(2000);			
",
,
			fromLine:"			141",
			toLine:"			143",
			content:"
			                try {
			                    AppendResult result = indexService.putKey(
			                        TOPIC_NAME, TOPIC_ID, QUEUE_ID, Collections.singleton(String.valueOf(index)),			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			    public void restartServiceTest() throws InterruptedException {			
",
,
			fromLine:"			208",
			toLine:"			210",
			content:"
			        for (int i = 0; i < 20; i++) {
			            AppendResult result = indexService.putKey(
			                TOPIC_NAME, TOPIC_ID, QUEUE_ID, Collections.singleton(String.valueOf(i)),			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        indexService.shutdown();			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        long timestamp = System.currentTimeMillis();			
",
,
			fromLine:"			241",
			toLine:"			243",
			content:"
			            for (int j = 0; j < 20 - 1; j++) {
			                AppendResult result = indexService.putKey(
			                    TOPIC_NAME, TOPIC_ID, QUEUE_ID, Collections.singleton(String.valueOf(j)),			
",
,
			fromLine:"			253",
			toLine:"			254",
			content:"
			        for (int i = 0; i < 3; i++) {
			            List<IndexItem> indexItems = indexService.queryAsync(			
",
,
			fromLine:"			257",
			toLine:"			258",
			content:"
			
			            indexItems = indexService.queryAsync(			
",
,
			fromLine:"			261",
			toLine:"			262",
			content:"
			
			            indexItems = indexService.queryAsync(			
",
,
			fromLine:"			269",
			toLine:"			270",
			content:"
			    public void concurrentGetTest() throws InterruptedException {
			        storeConfig.setTieredStoreIndexFileMaxIndexNum(2000);			
",
,
			fromLine:"			275",
			toLine:"			276",
			content:"
			        for (int j = 0; j < fileCount; j++) {
			            for (int i = 0; i < storeConfig.getTieredStoreIndexFileMaxIndexNum(); i++) {			
",
,
			fromLine:"			292",
			toLine:"			293",
			content:"
			                    try {
			                        List<IndexItem> indexItems = indexService.queryAsync(			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexStoreFileTest.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.index;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.file.Paths;
			import java.util.Collections;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.provider.FileSegment;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			43",
			toLine:"			47",
			content:"
			
			    private static final String TOPIC_NAME = "TopicTest";
			    private static final int TOPIC_ID = 123;
			    private static final int QUEUE_ID = 2;
			    private static final long MESSAGE_OFFSET = 666L;			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    private static final String KEY = "MessageKey";			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			
			    private String filePath;			
",
,
			fromLine:"			57",
			toLine:"			65",
			content:"
			    public void init() throws IOException {
			        filePath = UUID.randomUUID().toString().replace("-", "").substring(0, 8);
			        String directory = Paths.get(System.getProperty("user.home"), "store_test", filePath).toString();
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setStorePathRootDir(directory);
			        storeConfig.setTieredStoreFilePath(directory);
			        storeConfig.setTieredStoreIndexFileMaxHashSlotNum(5);
			        storeConfig.setTieredStoreIndexFileMaxIndexNum(20);
			        storeConfig.setTieredBackendServiceProvider("org.apache.rocketmq.tieredstore.provider.PosixFileSegment");			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        }			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        Assert.assertEquals(24, IndexStoreFile.INDEX_ITEM_INDEX);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        long timestamp = System.currentTimeMillis();			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			        // test hash
			        Assert.assertEquals("TopicTest#MessageKey", localFile.buildKey(TOPIC_NAME, KEY));			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        // test calculate position			
",
,
			fromLine:"			125",
			toLine:"			130",
			content:"
			        // not put success
			        Assert.assertEquals(AppendResult.UNKNOWN_ERROR, indexStoreFile.putKey(
			            null, TOPIC_ID, QUEUE_ID, KEY_SET, MESSAGE_OFFSET, MESSAGE_SIZE, timestamp));
			        Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(
			            TOPIC_NAME, TOPIC_ID, QUEUE_ID, null, MESSAGE_OFFSET, MESSAGE_SIZE, timestamp));
			        Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			133",
			toLine:"			135",
			content:"
			        // first item is invalid
			        for (int i = 0; i < storeConfig.getTieredStoreIndexFileMaxIndexNum() - 2; i++) {
			            Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			142",
			toLine:"			145",
			content:"
			
			        Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(
			            TOPIC_NAME, TOPIC_ID, QUEUE_ID, KEY_SET, MESSAGE_OFFSET, MESSAGE_SIZE, timestamp));
			        Assert.assertEquals(AppendResult.FILE_FULL, indexStoreFile.putKey(			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        Assert.assertEquals(1, indexStoreFile.getHashSlotCount());			
",
,
			fromLine:"			158",
			toLine:"			159",
			content:"
			            for (int j = 0; j < 3; j++) {
			                Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        // first item is invalid			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			            executorService.submit(() -> {
			                Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			192",
			toLine:"			193",
			content:"
			        executorService.shutdown();
			        Assert.assertEquals(AppendResult.FILE_FULL, indexStoreFile.putKey(			
",
,
			fromLine:"			202",
			toLine:"			203",
			content:"
			        for (int i = 0; i < indexCount; i++) {
			            Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			        Assert.assertEquals(indexCount, indexStoreFile.getIndexItemCount());			
",
,
			fromLine:"			215",
			toLine:"			216",
			content:"
			        for (int i = 0; i < 10; i++) {
			            Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			        FileSegment fileSegment = new PosixFileSegment(			
",
,
			fromLine:"			233",
			toLine:"			234",
			content:"
			            for (int j = 0; j < 3; j++) {
			                Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(TOPIC_NAME + i,			
",
,
			fromLine:"			237",
			toLine:"			238",
			content:"
			        }
			        List<IndexItem> itemList = indexStoreFile.queryAsync(			
",
,
			fromLine:"			247",
			toLine:"			248",
			content:"
			            for (int j = 0; j < 3; j++) {
			                Assert.assertEquals(AppendResult.SUCCESS, indexStoreFile.putKey(TOPIC_NAME + i,			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        FileSegment fileSegment = new PosixFileSegment(			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
						
",
,
			fromLine:"			263",
			toLine:"			264",
			content:"
			        // change topic
			        List<IndexItem> itemList = indexStoreFile.queryAsync(			
",
,
			fromLine:"			268",
			toLine:"			269",
			content:"
			        // change key
			        itemList = indexStoreFile.queryAsync(			
",
,
			fromLine:"			272",
			toLine:"			273",
			content:"
			
			        itemList = indexStoreFile.queryAsync(			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexStoreFile.java:
		[
			fromLine:"			16",
			toLine:"			55",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.index;
			
			import com.google.common.base.Stopwatch;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.nio.file.Paths;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.Optional;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.provider.FileSegment;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.tieredstore.index.IndexFile.IndexStatusEnum.SEALED;
			import static org.apache.rocketmq.tieredstore.index.IndexFile.IndexStatusEnum.UNSEALED;
			import static org.apache.rocketmq.tieredstore.index.IndexFile.IndexStatusEnum.UPLOAD;
			import static org.apache.rocketmq.tieredstore.index.IndexItem.COMPACT_INDEX_ITEM_SIZE;
			import static org.apache.rocketmq.tieredstore.index.IndexStoreService.FILE_COMPACTED_DIRECTORY_NAME;
			import static org.apache.rocketmq.tieredstore.index.IndexStoreService.FILE_DIRECTORY_NAME;
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public static final int INDEX_ITEM_INDEX = 24;			
",
,
			fromLine:"			88",
			toLine:"			90",
			content:"
			    private final AtomicReference<IndexStatusEnum> fileStatus;
			    private final AtomicLong beginTimestamp = new AtomicLong(-1L);
			    private final AtomicLong endTimestamp = new AtomicLong(-1L);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    private MappedFile mappedFile;			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			            this.getItemPosition(indexItemMaxCount));			
",
,
			fromLine:"			108",
			toLine:"			112",
			content:"
			
			        this.beginTimestamp.set(timestamp);
			        this.endTimestamp.set(byteBuffer.getLong(INDEX_BEGIN_TIME_STAMP));
			        this.hashSlotCount.set(byteBuffer.getInt(INDEX_SLOT_COUNT));
			        this.indexItemCount.set(byteBuffer.getInt(INDEX_ITEM_INDEX));			
",
,
			fromLine:"			120",
			toLine:"			122",
			content:"
			
			        this.beginTimestamp.set(fileSegment.getMinTimestamp());
			        this.endTimestamp.set(fileSegment.getMaxTimestamp());			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        this.indexItemCount.set(storeConfig.getTieredStoreIndexFileMaxIndexNum());			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public long getTimestamp() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public long getEndTimestamp() {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public long getHashSlotCount() {			
",
,
			fromLine:"			162",
			toLine:"			164",
			content:"
			        byteBuffer.putInt(INDEX_MAGIC_CODE, !end ? BEGIN_MAGIC_CODE : END_MAGIC_CODE);
			        byteBuffer.putLong(INDEX_BEGIN_TIME_STAMP, this.beginTimestamp.get());
			        byteBuffer.putLong(INDEX_END_TIME_STAMP, this.endTimestamp.get());			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    protected int getSlotPosition(int slotIndex) {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    protected int getSlotValue(int slotPosition) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    protected int getItemPosition(int itemIndex) {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			    @Override			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
						
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			            for (String key : keySet) {			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			                int slotOldValue = this.getSlotValue(slotPosition);			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			                IndexItem indexItem = new IndexItem(			
",
,
			fromLine:"			218",
			toLine:"			220",
			content:"
			                int itemIndex = this.indexItemCount.incrementAndGet();
			                this.byteBuffer.position(this.getItemPosition(itemIndex));
			                this.byteBuffer.put(indexItem.getByteBuffer());			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			                if (slotOldValue <= INVALID_INDEX) {			
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			                }
			                if (this.endTimestamp.get() < timestamp) {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			                }			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			                log.trace("IndexStoreFile put key, timestamp: {}, topic: {}, key: {}, slot: {}, item: {}, previous item: {}, content: {}",			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			            log.error("IndexStoreFile put key error, topic: {}, topicId: {}, queueId: {}, keySet: {}, offset: {}, " +			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			    @Override			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			            case SEALED:			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			            case UPLOAD:			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
						
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
						
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			                    byte[] bytes = new byte[IndexItem.INDEX_ITEM_SIZE];			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			                        result.add(indexItem);			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			                        "key: {}, hashCode: {}, maxCount: {}, timestamp={}-{}",			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:
{
                log.error("IndexStoreFile query from unsealed mapped file error, timestamp: , " +						
}
,
			fromLine:"			313",
			toLine:"			313",
			content:"
						
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			        Stopwatch stopwatch = Stopwatch.createStarted();			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			                    log.error("IndexStoreFile query from tiered storage return error slot buffer, " +			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			                    log.error("IndexStoreFile query from tiered storage return error item buffer, " +			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			                    IndexItem indexItem = new IndexItem(bytes);			
",
,
			fromLine:"			357",
			toLine:"			358",
			content:"
			                    if (hashCode == indexItem.getHashCode() &&
			                        beginTime <= storeTimestamp && storeTimestamp <= endTime &&			
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
			                        "key: {}, hashCode: {}, maxCount: {}, timestamp={}-{}",			
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			                        "key: {}, hashCode: {}, maxCount: {}, timestamp={}-{}",			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
			        ByteBuffer payloadBuffer = ByteBuffer.wrap(payload);			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			            while (slotValue > INVALID_INDEX && writePosition < fileMaxLength) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/consumer/ReceiptHandle.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.common.consumer;
			
			import java.util.Arrays;
			import java.util.List;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.message.MessageConst;
						
",
,
			fromLine:"			26",
			toLine:"			27",
			content:"
			    private static final String SEPARATOR = MessageConst.KEY_SEPARATOR;
			    public static final String NORMAL_TOPIC = "0";			
",
,
			fromLine:"			29",
			toLine:"			32",
			content:"
			
			    public static final String RETRY_TOPIC_V2 = "2";
			    private final long startOffset;
			    private final long retrieveTime;			
",
,
			fromLine:"			34",
			toLine:"			40",
			content:"
			    private final long nextVisibleTime;
			    private final int reviveQueueId;
			    private final String topicType;
			    private final String brokerName;
			    private final int queueId;
			    private final long offset;
			    private final long commitLogOffset;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    public String encode() {
			        return startOffset + SEPARATOR + retrieveTime + SEPARATOR + invisibleTime + SEPARATOR + reviveQueueId
			            + SEPARATOR + topicType + SEPARATOR + brokerName + SEPARATOR + queueId + SEPARATOR + offset + SEPARATOR			
",
,
			fromLine:"			86",
			toLine:"			88",
			content:"
			        final long commitLogOffset, final String receiptHandle) {
			        this.startOffset = startOffset;
			        this.retrieveTime = retrieveTime;			
",
,
			fromLine:"			90",
			toLine:"			96",
			content:"
			        this.nextVisibleTime = nextVisibleTime;
			        this.reviveQueueId = reviveQueueId;
			        this.topicType = topicType;
			        this.brokerName = brokerName;
			        this.queueId = queueId;
			        this.offset = offset;
			        this.commitLogOffset = commitLogOffset;			
",
,
			fromLine:"			100",
			toLine:"			109",
			content:"
			    public static class ReceiptHandleBuilder {
			        private long startOffset;
			        private long retrieveTime;
			        private long invisibleTime;
			        private int reviveQueueId;
			        private String topicType;
			        private String brokerName;
			        private int queueId;
			        private long offset;
			        private long commitLogOffset;			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder startOffset(final long startOffset) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder retrieveTime(final long retrieveTime) {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder invisibleTime(final long invisibleTime) {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder reviveQueueId(final int reviveQueueId) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder topicType(final String topicType) {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder brokerName(final String brokerName) {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder queueId(final int queueId) {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder offset(final long offset) {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder commitLogOffset(final long commitLogOffset) {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        public ReceiptHandle.ReceiptHandleBuilder receiptHandle(final String receiptHandle) {			
",
,
			fromLine:"			165",
			toLine:"			166",
			content:"
			        public ReceiptHandle build() {
			            return new ReceiptHandle(this.startOffset, this.retrieveTime, this.invisibleTime, this.retrieveTime + this.invisibleTime,			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			        public String toString() {			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    public long getRetrieveTime() {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public int getReviveQueueId() {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			    public String getTopicType() {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			    public long getOffset() {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    public long getCommitLogOffset() {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public String getReceiptHandle() {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    public boolean isRetryTopic() {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			    public String getRealTopic(String topic, String groupName) {			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        }			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/message/MessageQueue.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.common.message;
			
			import java.io.Serializable;
			
			public class MessageQueue implements Comparable<MessageQueue>, Serializable {
			    private static final long serialVersionUID = 6191200464116433425L;
			    private String topic;
			    private String brokerName;			
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			    public MessageQueue(MessageQueue other) {
			        this.topic = other.topic;
			        this.brokerName = other.brokerName;			
",
,
			fromLine:"			37",
			toLine:"			39",
			content:"
			    public MessageQueue(String topic, String brokerName, int queueId) {
			        this.topic = topic;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			70",
			toLine:"			72",
			content:"
			        int result = 1;
			        result = prime * result + ((brokerName == null) ? 0 : brokerName.hashCode());
			        result = prime * result + queueId;			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        MessageQueue other = (MessageQueue) obj;
			        if (brokerName == null) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			                return false;			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			            return false;			
",
,
			fromLine:"			92",
			toLine:"			93",
			content:"
			            return false;
			        if (topic == null) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			                return false;			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public String toString() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/message/MessageQueueForC.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.common.message;
			
			import java.io.Serializable;
						
",
,
			fromLine:"			23",
			toLine:"			27",
			content:"
			
			    private static final long serialVersionUID = 5320967846569962104L;
			    private String topic;
			    private String brokerName;
			    private int queueId;			
",
,
			fromLine:"			30",
			toLine:"			33",
			content:"
			    public MessageQueueForC(String topic, String brokerName, int queueId, long offset) {
			        this.topic = topic;
			        this.brokerName = brokerName;
			        this.queueId = queueId;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public int compareTo(MessageQueueForC o) {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        }			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        }			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        }			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            return 1;			
",
,
			fromLine:"			63",
			toLine:"			65",
			content:"
			        int result = 1;
			        result = prime * result + ((brokerName == null) ? 0 : brokerName.hashCode());
			        result = prime * result + queueId;			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			        MessageQueueForC other = (MessageQueueForC) obj;
			        if (brokerName == null) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                return false;			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			            return false;			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			            return false;
			        if (topic == null) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			                return false;			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			    public String toString() {
			        return "MessageQueueForC [topic=" + topic + ", brokerName=" + brokerName + ", queueId=" + queueId			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public long getOffset() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public void setOffset(long offset) {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/message/LocalMessageServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			81",
			content:"
			
			package org.apache.rocketmq.proxy.service.message;
			
			import java.net.InetSocketAddress;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.processor.AckMessageProcessor;
			import org.apache.rocketmq.broker.processor.ChangeInvisibleTimeProcessor;
			import org.apache.rocketmq.broker.processor.EndTransactionProcessor;
			import org.apache.rocketmq.broker.processor.PopMessageProcessor;
			import org.apache.rocketmq.broker.processor.SendMessageProcessor;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.ContextVariable;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.service.channel.ChannelManager;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.catchThrowableOfType;
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void testSendMessageWriteAndFlush() throws Exception {			
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			        SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			149",
			toLine:"			150",
			content:"
			            SendMessageResponseHeader sendMessageResponseHeader = (SendMessageResponseHeader) response.readCustomHeader();
			            sendMessageResponseHeader.setQueueId(queueId);			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			            sendMessageResponseHeader.setMsgId(offsetMessageId);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
						
",
,
			fromLine:"			162",
			toLine:"			164",
			content:"
			        assertThat(sendResult.getMessageQueue())
			            .isEqualTo(new MessageQueue(topic, brokerControllerMock.getBrokerConfig().getBrokerName(), queueId));
			        assertThat(sendResult.getQueueOffset()).isEqualTo(queueOffset);			
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			    public void testSendBatchMessageWriteAndFlush() throws Exception {
			        Message message1 = new Message(topic, "body1".getBytes(StandardCharsets.UTF_8));			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			        SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
			        requestHeader.setTopic(topic);			
",
,
			fromLine:"			194",
			toLine:"			195",
			content:"
			            SendMessageResponseHeader sendMessageResponseHeader = (SendMessageResponseHeader) response.readCustomHeader();
			            sendMessageResponseHeader.setQueueId(queueId);			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            sendMessageResponseHeader.setMsgId(offsetMessageId);			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
						
",
,
			fromLine:"			206",
			toLine:"			208",
			content:"
			        assertThat(sendResult.getMessageQueue())
			            .isEqualTo(new MessageQueue(topic, brokerControllerMock.getBrokerConfig().getBrokerName(), queueId));
			        assertThat(sendResult.getQueueOffset()).isEqualTo(queueOffset);			
",
,
			fromLine:"			220",
			toLine:"			221",
			content:"
			        SendMessageRequestHeader sendMessageRequestHeader = new SendMessageRequestHeader();
			        sendMessageRequestHeader.setTopic(topic);			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
						
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			        SendMessageRequestHeader sendMessageRequestHeader = new SendMessageRequestHeader();			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        ConsumerSendMsgBackRequestHeader requestHeader = new ConsumerSendMsgBackRequestHeader();			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			        EndTransactionRequestHeader requestHeader = new EndTransactionRequestHeader();			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			        List<Long> messageOffsetList = new ArrayList<>();			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			        byte[] body1 = MessageDecoder.encode(message1, false);			
",
,
			fromLine:"			288",
			toLine:"			289",
			content:"
			        messageOffsetList.add(startOffset + 1);
			        ExtraInfoUtil.buildStartOffsetInfo(startOffsetStringBuilder, topic, queueId, startOffset);			
",
,
			fromLine:"			319",
			toLine:"			320",
			content:"
			        });
			        MessageQueue messageQueue = new MessageQueue(topic, brokerName, queueId);			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			        PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();			
",
,
			fromLine:"			357",
			toLine:"			360",
			content:"
			            .reviveQueueId(reviveQueueId)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)
			            .brokerName(brokerName)
			            .queueId(queueId)			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();			
",
,
			fromLine:"			388",
			toLine:"			391",
			content:"
			            .reviveQueueId(newReviveQueueId)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)
			            .brokerName(brokerName)
			            .queueId(queueId)			
",
,
			fromLine:"			407",
			toLine:"			410",
			content:"
			            .reviveQueueId(reviveQueueId)
			            .topicType(ReceiptHandle.NORMAL_TOPIC)
			            .brokerName(brokerName)
			            .queueId(queueId)			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			        AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			425",
			toLine:"			425",
			content:"
						
",
,
			fromLine:"			427",
			toLine:"			427",
			content:"
			        MessageExt message1 = new MessageExt();			
",
,
			fromLine:"			430",
			toLine:"			431",
			content:"
			        message1.setFlag(0);
			        message1.setQueueId(queueId);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/ConsumeByWho.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import java.util.HashSet;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			24",
			toLine:"			26",
			content:"
			    private HashSet<String> notConsumedGroup = new HashSet<>();
			    private String topic;
			    private int queueId;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public long getOffset() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setOffset(long offset) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/pop/AckMsg.java:
		[
			fromLine:"			16",
			toLine:"			20",
			content:"
			 */
			package org.apache.rocketmq.store.pop;
			
			import com.alibaba.fastjson.annotation.JSONField;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
			    @JSONField(name = "ao", alternateNames = {"ackOffset"})			
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    @JSONField(name = "so", alternateNames = {"startOffset"})			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    @JSONField(name = "c", alternateNames = {"consumerGroup"})			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @JSONField(name = "t", alternateNames = {"topic"})			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @JSONField(name = "q", alternateNames = {"queueId"})			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @JSONField(name = "pt", alternateNames = {"popTime"})			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @JSONField(name = "bn", alternateNames = {"brokerName"})			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public long getAckOffset() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void setAckOffset(long ackOffset) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void setStartOffset(long startOffset) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			102",
			toLine:"			108",
			content:"
			        final StringBuilder sb = new StringBuilder("AckMsg{");
			        sb.append("ackOffset=").append(ackOffset);
			        sb.append(", startOffset=").append(startOffset);
			        sb.append(", consumerGroup='").append(consumerGroup).append('\'');
			        sb.append(", topic='").append(topic).append('\'');
			        sb.append(", queueId=").append(queueId);
			        sb.append(", popTime=").append(popTime);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/pop/PopCheckPoint.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.store.pop;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import java.util.ArrayList;
			import java.util.List;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
			    @JSONField(name = "so")			
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    @JSONField(name = "pt")			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @JSONField(name = "it")			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @JSONField(name = "q")			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @JSONField(name = "t")			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @JSONField(name = "c")			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @JSONField(name = "ro")			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @JSONField(name = "bn")			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public long getReviveOffset() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setReviveOffset(long reviveOffset) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setStartOffset(long startOffset) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public long getReviveTime() {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public String getCId() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public void setCId(String cid) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    public int indexOfAck(long ackOffset) {			
",
,
			fromLine:"			153",
			toLine:"			154",
			content:"
			
			            if (ackOffset - startOffset < num) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        // new version of checkpoint			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        if (queueOffsetDiff == null || queueOffsetDiff.isEmpty()) {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
						
",
,
			fromLine:"			175",
			toLine:"			176",
			content:"
			    public String toString() {
			        return "PopCheckPoint [topic=" + topic + ", cid=" + cid + ", queueId=" + queueId + ", startOffset=" + startOffset + ", bitMap=" + bitMap + ", num=" + num + ", reviveTime=" + getReviveTime()			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.broker.filter;
			
			import java.util.Collection;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.filter.FilterFactory;
			import org.apache.rocketmq.filter.util.BloomFilter;
			import org.apache.rocketmq.filter.util.BloomFilterData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			     */			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        final long clientVersion) {			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			        ConsumerFilterData consumerFilterData = new ConsumerFilterData();
			        consumerFilterData.setTopic(topic);			
",
,
			fromLine:"			88",
			toLine:"			90",
			content:"
			        consumerFilterData.setDeadTime(0);
			        consumerFilterData.setExpression(expression);
			        consumerFilterData.setExpressionType(type);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			            consumerFilterData.setCompiledExpression(			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        for (SubscriptionData subscriptionData : subList) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        final String type, final long clientVersion) {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
						
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			150",
			content:"
			        if (filterDataMapByTopic == null) {
			            FilterDataMapByTopic temp = new FilterDataMapByTopic(topic);			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			            long clientVersion) {			
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			            if (old == null) {			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			                }			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			370",
			toLine:"			371",
			content:"
			                } else {
			                    if (clientVersion <= old.getClientVersion()) {			
",
,
			fromLine:"			373",
			toLine:"			374",
			content:"
			                            log.warn("Ignore consumer({} : {}) filter(concurrent), because of version {} <= {}, but maybe info changed!old={}:{}, ignored={}:{}",
			                                consumerGroup, topic,			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			                                old.getExpressionType(), old.getExpression(),			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			                        }			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			                    } else {			
",
,
			fromLine:"			391",
			toLine:"			392",
			content:"
			            } else {
			                if (clientVersion <= old.getClientVersion()) {			
",
,
			fromLine:"			394",
			toLine:"			395",
			content:"
			                        log.info("Ignore consumer({}:{}) filter, because of version {} <= {}, but maybe info changed!old={}:{}, ignored={}:{}",
			                            consumerGroup, topic,			
",
,
			fromLine:"			397",
			toLine:"			397",
			content:"
			                            old.getExpressionType(), old.getExpression(),			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			                    }			
",
,
			fromLine:"			407",
			toLine:"			408",
			content:"
			
			                boolean change = !old.getExpression().equals(expression) || !old.getExpressionType().equals(type);			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			                }			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			                if (change) {			
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			                        // new expression compile error, remove old, let client report error.			
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			                    }			
",
,
			fromLine:"			425",
			toLine:"			425",
			content:"
						
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
			                } else {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMapTest.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.broker.filter;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.filter.util.BitsArray;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.junit.Test;
			
			import java.util.Collection;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.UUID;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/filter/ConsumerFilterManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.broker.filter;
			
			import java.io.File;
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.Iterator;
			import java.util.List;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        // new version			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        // same version			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        //reAlive			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			                subscriptionDatas.add(			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/offset/LagCalculationIT.java:
		[
			fromLine:"			17",
			toLine:"			55",
			content:"
			
			package org.apache.rocketmq.test.offset;
			
			import java.util.Collections;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.filter.ConsumerFilterData;
			import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.DefaultMessageFilter;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQSqlConsumer;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQBlockListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.FixMethodOrder;
			import org.junit.Test;
			import org.junit.runners.MethodSorters;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			57",
			toLine:"			60",
			content:"
			public class LagCalculationIT extends BaseConf {
			    private static final Logger LOGGER = LoggerFactory.getLogger(LagCalculationIT.class);
			    private RMQNormalProducer producer = null;
			    private RMQNormalConsumer consumer = null;			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			    public void setUp() {
			        topic = initTopic();			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        }			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        blockListener = new RMQBlockListener(false);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        for (BrokerController controller : brokerControllerList) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			                if (mq.getBrokerName().equals(controller.getBrokerConfig().getBrokerName())) {			
",
,
			fromLine:"			92",
			toLine:"			93",
			content:"
			
			                    long consumerOffset = controller.getConsumerOffsetManager().queryOffset(consumer.getConsumerGroup(),			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			                    long pullOffset =
			                        controller.getConsumerOffsetManager().queryPullOffset(consumer.getConsumerGroup(),			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			        waitForFullyDispatched();
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			139",
			toLine:"			141",
			content:"
			        blockListener.setBlock(true);
			        consumer.clearMsg();
			        producer.clearMsg();			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            Pair<Long, Long> lag = getLag(mqs);			
",
,
			fromLine:"			151",
			toLine:"			154",
			content:"
			        blockListener.setBlock(false);
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
			        consumer.shutdown();
			        producer.clearMsg();			
",
,
			fromLine:"			158",
			toLine:"			159",
			content:"
			        Pair<Long, Long> lag = getLag(mqs);
			        assertEquals(producer.getAllMsgBody().size(), (long) lag.getObject1());			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			        RMQBlockListener sqlListener = new RMQBlockListener(true);			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			        RMQBlockListener tagListener = new RMQBlockListener(true);			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        //init subscriptionData & consumerFilterData for sql			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        for (BrokerController controller : brokerControllerList) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			            });			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                if (mq.getBrokerName().equals(controller.getBrokerConfig().getBrokerName())) {			
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			                    long estimateMessageCount = controller.getMessageStore()
			                        .estimateMessageCount(topic, mq.getQueueId(), 0, brokerOffset,			
",
,
			fromLine:"			219",
			toLine:"			220",
			content:"
			                if (mq.getBrokerName().equals(controller.getBrokerConfig().getBrokerName())) {
			                    long brokerOffset = controller.getMessageStore().getMaxOffsetInQueue(topic, mq.getQueueId());			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			                    long estimateMessageCount = controller.getMessageStore()			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterData.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.broker.filter;
			
			import org.apache.commons.lang3.builder.EqualsBuilder;
			import org.apache.commons.lang3.builder.HashCodeBuilder;
			import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
			import org.apache.commons.lang3.builder.ToStringStyle;
			import org.apache.rocketmq.filter.expression.Expression;
			import org.apache.rocketmq.filter.util.BloomFilterData;
			
			import java.util.Collections;
						
",
,
			fromLine:"			33",
			toLine:"			36",
			content:"
			
			    private String consumerGroup;
			    private String topic;
			    private String expression;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    private transient Expression compiledExpression;			
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			    private long deadTime = 0;
			    private BloomFilterData bloomFilterData;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public boolean isDead() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setConsumerGroup(final String consumerGroup) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setTopic(final String topic) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public String getExpression() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void setExpression(final String expression) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getExpressionType() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setExpressionType(final String expressionType) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public long getBornTime() {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public void setBornTime(final long bornTime) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			    public BloomFilterData getBloomFilterData() {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    public void setBloomFilterData(final BloomFilterData bloomFilterData) {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    public long getClientVersion() {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public void setClientVersion(long clientVersion) {			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java:
		[
			fromLine:"			17",
			toLine:"			51",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.lang.reflect.Method;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.awaitility.Awaitility;
			import org.junit.Assert;
			import org.junit.Test;
			import org.mockito.Mockito;
			import org.junit.Assume;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			
			    private static final String MSG = "Once, there was a chance for me!";			
",
,
			fromLine:"			56",
			toLine:"			61",
			content:"
			
			    private static final String TOPIC = "abc";
			    private static final int QUEUE_ID = 0;
			    private static final String STORE_PATH = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
			    private static final int COMMIT_LOG_FILE_SIZE = 1024 * 8;
			    private static final int CQ_FILE_SIZE = 10 * 20;			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        try {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        try {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			128",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
			        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        messageStoreConfig.setMessageIndexEnable(false);			
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			        messageStoreConfig.setHaListenPort(0);
			        messageStoreConfig.setStorePathRootDir(STORE_PATH);			
",
,
			fromLine:"			139",
			toLine:"			140",
			content:"
			    protected DefaultMessageStore gen() throws Exception {
			        MessageStoreConfig messageStoreConfig = buildStoreConfig(			
",
,
			fromLine:"			164",
			toLine:"			165",
			content:"
			    protected DefaultMessageStore genForMultiQueue() throws Exception {
			        MessageStoreConfig messageStoreConfig = buildStoreConfig(			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			219",
			toLine:"			220",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			            }			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
						
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
						
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			            }			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
						
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			            }			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			            ConsumeQueueInterface cq = await().atMost(3, SECONDS).until(() -> {			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			                }			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			            master.destroy();			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			        consumeQueue.correctMinOffset(max * messageSize);			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
						
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			        consumeQueue.correctMinOffset(max * messageSize);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/queue/ConsumeQueueTest.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.Map;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.ConsumeQueueExt;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.Assert;
			import org.junit.Test;
			
			import static java.util.concurrent.TimeUnit.SECONDS;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.fail;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			45",
			toLine:"			50",
			content:"
			
			    private static final String TOPIC = "StoreTest";
			    private static final int QUEUE_ID = 0;
			    private static final String STORE_PATH = "." + File.separator + "unit_test_store";
			    private static final int COMMIT_LOG_FILE_SIZE = 1024 * 8;
			    private static final int CQ_FILE_SIZE = 10 * 20;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			55",
			toLine:"			57",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
			        messageStoreConfig.setMappedFileSizeCommitLog(commitLogFileSize);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(cqFileSize);			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        messageStoreConfig.setMessageIndexEnable(false);			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			
			        messageStoreConfig.setStorePathRootDir(STORE_PATH);			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			    protected DefaultMessageStore gen() throws Exception {
			        MessageStoreConfig messageStoreConfig = buildStoreConfig(			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			            master = gen();			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			            };			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			            // test for illegal offset			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			            Assert.assertEquals(-1, estimation);			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			            }			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			            };			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			            // test for illegal offset			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			            Assert.assertEquals(67, estimation);			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			            Assert.assertEquals(-1, estimation);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			            messageStore.destroy();			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			            messageStore.getMessageStoreConfig().setMaxConsumeQueueScan(20);			
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			            };			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			            messageStore.destroy();			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/PopLongPollingService.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.broker.longpolling;
			
			import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentSkipListSet;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			
			import static org.apache.rocketmq.broker.longpolling.PollingResult.NOT_POLLING;
			import static org.apache.rocketmq.broker.longpolling.PollingResult.POLLING_FULL;
			import static org.apache.rocketmq.broker.longpolling.PollingResult.POLLING_SUC;
			import static org.apache.rocketmq.broker.longpolling.PollingResult.POLLING_TIMEOUT;
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        int i = 0;			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			            if (queueId >= 0) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            }			
",
,
			fromLine:"			171",
			toLine:"			172",
			content:"
			
			    public boolean notifyMessageArriving(final String topic, final String cid, final int queueId) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			                    response.markResponseType();			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			        }			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/NotificationProcessor.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.Objects;
			import java.util.Random;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.longpolling.PollingHeader;
			import org.apache.rocketmq.broker.longpolling.PollingResult;
			import org.apache.rocketmq.broker.longpolling.PopLongPollingService;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.NotificationRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotificationResponseHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			
			public class NotificationProcessor implements NettyRequestProcessor {
			    private static final Logger POP_LOGGER = LoggerFactory.getLogger(LoggerName.ROCKETMQ_POP_LOGGER_NAME);
			    private final BrokerController brokerController;
			    private final Random random = new Random(System.currentTimeMillis());
			    private final PopLongPollingService popLongPollingService;			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			    public NotificationProcessor(final BrokerController brokerController) {
			        this.brokerController = brokerController;			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void notifyMessageArriving(final String topic, final int queueId) {			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			        RemotingCommand request) throws RemotingCommandException {
			        request.addExtFieldIfNotExist(BORN_TIME, String.valueOf(System.currentTimeMillis()));
			        if (Objects.equals(request.getExtFields().get(BORN_TIME), "0")) {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			            response.setCode(ResponseCode.NO_PERMISSION);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        if (null == topicConfig) {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        }			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        boolean needRetry = randomQ % 5 == 0;			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        if (!hasMsg) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        boolean hasMsg;			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        if (Boolean.TRUE.equals(requestHeader.getOrder())) {			
",
,
			fromLine:"			188",
			toLine:"			189",
			content:"
			        }
			        long offset = getPopOffset(targetTopic, requestHeader.getConsumerGroup(), queueId);			
",
,
			fromLine:"			193",
			toLine:"			194",
			content:"
			
			    private long getPopOffset(String topic, String cid, int queueId) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        if (offset < 0) {			
",
,
			fromLine:"			198",
			toLine:"			199",
			content:"
			        }
			        long bufferOffset = this.brokerController.getPopMessageProcessor().getPopBufferMergeService()			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			    public PopLongPollingService getPopLongPollingService() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/KeyBuilder.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.common;
						
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			    public static String buildPollingKey(String topic, String cid, int queueId) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PollingInfoProcessor.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.concurrent.ConcurrentSkipListSet;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.longpolling.PopRequest;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PollingInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PollingInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        }			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldService.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.broker.longpolling;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.SystemClock;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.ConsumeQueueExt;
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                try {			
",
,
			fromLine:"			117",
			toLine:"			118",
			content:"
			
			    public void notifyMessageArriving(final String topic, final int queueId, final long maxOffset) {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                for (PullRequest request : requestList) {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			                    if (newestOffset <= request.getPullFromThisOffset()) {			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                        boolean match = request.getMessageFilter().isMatchedByConsumeQueue(tagsCode,			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			                        // match by bit map, need eval again when properties is not null.
			                        if (match && properties != null) {			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:
{
			"PullRequestHoldService#notifyMessageArriving: failed to execute request when "			
}
,
			fromLine:"			164",
			toLine:"			164",
			content:
{
			"PullRequestHoldService#notifyMessageArriving: failed to execute request when time's "			
}
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotifyMessageArrivingListener.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.broker.longpolling;
			
			import java.util.Map;
			import org.apache.rocketmq.broker.processor.NotificationProcessor;
			import org.apache.rocketmq.broker.processor.PopMessageProcessor;
			import org.apache.rocketmq.store.MessageArrivingListener;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @Override			
",
,
			fromLine:"			38",
			toLine:"			41",
			content:"
			                         long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
			        this.pullRequestHoldService.notifyMessageArriving(topic, queueId, logicOffset, tagsCode,
			            msgStoreTime, filterBitMap, properties);
			        this.popMessageProcessor.notifyMessageArriving(topic, queueId);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/longpolling/PullRequestHoldServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.broker.longpolling;
			
			import io.netty.channel.Channel;
			import java.util.HashMap;
			import java.util.concurrent.Executors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.processor.PullMessageProcessor;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.store.DefaultMessageFilter;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.assertj.core.api.Assertions;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public void notifyMessageArrivingTest() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/LmqPullRequestHoldService.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.broker.longpolling;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            try {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/MessageArrivingListener.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.util.Map;
						
",
,
			fromLine:"			25",
			toLine:"			26",
			content:"
			     * Notify that a new message arrives in a consume queue
			     * @param topic topic name			
",
,
			fromLine:"			28",
			toLine:"			31",
			content:"
			     * @param logicOffset consume queue offset
			     * @param tagsCode message tags hash code
			     * @param msgStoreTime message store time
			     * @param filterBitMap message bloom filter			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			     */			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/metrics/PopMetricsManager.java:
		[
			fromLine:"			16",
			toLine:"			58",
			content:"
			 */
			package org.apache.rocketmq.broker.metrics;
			
			import com.google.common.collect.Lists;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.LongCounter;
			import io.opentelemetry.api.metrics.LongHistogram;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongMeasurement;
			import io.opentelemetry.sdk.metrics.Aggregation;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.View;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import java.time.Duration;
			import java.util.Arrays;
			import java.util.List;
			import java.util.function.Supplier;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.processor.PopBufferMergeService;
			import org.apache.rocketmq.broker.processor.PopReviveService;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.metrics.NopLongCounter;
			import org.apache.rocketmq.common.metrics.NopLongHistogram;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.pop.AckMsg;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.COUNTER_POP_REVIVE_IN_MESSAGE_TOTAL;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.COUNTER_POP_REVIVE_OUT_MESSAGE_TOTAL;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.COUNTER_POP_REVIVE_RETRY_MESSAGES_TOTAL;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.GAUGE_POP_CHECKPOINT_BUFFER_SIZE;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.GAUGE_POP_OFFSET_BUFFER_SIZE;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.GAUGE_POP_REVIVE_LAG;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.GAUGE_POP_REVIVE_LATENCY;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.HISTOGRAM_POP_BUFFER_SCAN_TIME_CONSUME;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.LABEL_PUT_STATUS;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.LABEL_QUEUE_ID;
			import static org.apache.rocketmq.broker.metrics.PopMetricsConstant.LABEL_REVIVE_MESSAGE_TYPE;
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public static void incPopReviveAckPutCount(AckMsg ackMsg, PutMessageStatus status) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public static void incPopReviveCkPutCount(PopCheckPoint checkPoint, PutMessageStatus status) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			167",
			toLine:"			169",
			content:"
			        Attributes attributes = newAttributesBuilder()
			            .put(LABEL_CONSUMER_GROUP, group)
			            .put(LABEL_TOPIC, topic)			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			            .build();			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			    public static void incPopReviveAckGetCount(AckMsg ackMsg, int queueId) {			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			    public static void incPopReviveCkGetCount(PopCheckPoint checkPoint, int queueId) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
						
",
,
			fromLine:"			187",
			toLine:"			190",
			content:"
			        Attributes attributes = builder
			            .put(LABEL_CONSUMER_GROUP, group)
			            .put(LABEL_TOPIC, topic)
			            .put(LABEL_QUEUE_ID, queueId)			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			            .build();			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/SyncConsumerOffsetIT.java:
		[
			fromLine:"			17",
			toLine:"			51",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.nio.charset.StandardCharsets;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.container.BrokerContainer;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Java6Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			    private static DefaultMQPushConsumer mqConsumerThreeReplica;
			    private static final String MSG = "Hello RocketMQ ";			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			
			        mqProducer = createProducer("SyncConsumerOffsetIT_Producer");
			        mqProducer.setSendMsgTimeout(15 * 1000);			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public static void afterClass() {			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			        for (int i = 0; i < msgCount; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			            for (MessageQueue mq : mqSet) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			                    for (MessageQueue mq : mqSet) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoLockManager.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import com.google.common.annotations.VisibleForTesting;
			import com.google.common.base.MoreObjects;
			import com.google.common.base.Objects;
			import io.netty.util.HashedWheelTimer;
			import io.netty.util.Timeout;
			import io.netty.util.Timer;
			import io.netty.util.TimerTask;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			                }			
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			    public void updateLockFreeTimestamp(String topic, String group, int queueId, ConsumerOrderInfoManager.OrderInfo orderInfo) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        try {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            POP_LOGGER.error("unexpect error when updateLockFreeTimestamp. topic:{}, group:{}, queueId:{}, lockFreeTimestamp:{}",			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        try {			
",
,
			fromLine:"			148",
			toLine:"			150",
			content:"
			    private static class Key {
			        private final String topic;
			        private final String group;			
",
,
			fromLine:"			153",
			toLine:"			155",
			content:"
			        public Key(String topic, String group, int queueId) {
			            this.topic = topic;
			            this.group = group;			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            Key key = (Key) o;			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        public int hashCode() {			
",
,
			fromLine:"			178",
			toLine:"			180",
			content:"
			            return MoreObjects.toStringHelper(this)
			                .add("topic", topic)
			                .add("group", group)			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManager.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.broker.offset;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import com.google.common.annotations.VisibleForTesting;
			import com.google.common.base.MoreObjects;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        if (consumerOrderInfoLockManager != null) {			
",
,
			fromLine:"			84",
			toLine:"			89",
			content:"
			     *
			     * @param isRetry is retry topic or not
			     * @param topic topic
			     * @param group group
			     * @param queueId queue id of message
			     * @param popTime the time of pop message			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			     */			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        List<Long> msgQueueOffsetList, StringBuilder orderInfoBuilder) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        if (orderInfo != null) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        } else {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        }			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			                Integer consumedTimes = offsetConsumedCount.getOrDefault(offset, 0);			
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			        // the old pop sdk use queueId to get consumedTimes from orderCountInfo
			        ExtraInfoUtil.buildQueueIdOrderCountInfo(orderInfoBuilder, topic, queueId, minConsumedTimes);			
",
,
			fromLine:"			142",
			toLine:"			143",
			content:"
			
			    public boolean checkBlock(String attemptId, String topic, String group, int queueId, long invisibleTime) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			        }			
",
,
			fromLine:"			161",
			toLine:"			163",
			content:"
			
			    public void clearBlock(String topic, String group, int queueId) {
			        table.computeIfPresent(buildKey(topic, group), (key, val) -> {			
",
,
			fromLine:"			171",
			toLine:"			174",
			content:"
			     *
			     * @param topic topic
			     * @param group group
			     * @param queueId queue id of message			
",
,
			fromLine:"			177",
			toLine:"			178",
			content:"
			     */
			    public long commitAndNext(String topic, String group, int queueId, long queueOffset, long popTime) {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        if (qs == null) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        }			
",
,
			fromLine:"			186",
			toLine:"			187",
			content:"
			        if (orderInfo == null) {
			            log.warn("OrderInfo is null, {}, {}, {}", key, queueOffset, orderInfo);			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        if (o == null || o.isEmpty()) {			
",
,
			fromLine:"			196",
			toLine:"			197",
			content:"
			
			        if (popTime != orderInfo.popTime) {			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			            }			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        if (i >= size) {			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
						
",
,
			fromLine:"			230",
			toLine:"			233",
			content:"
			     *
			     * @param topic topic
			     * @param group group
			     * @param queueId queue id of message			
",
,
			fromLine:"			236",
			toLine:"			237",
			content:"
			     */
			    public void updateNextVisibleTime(String topic, String group, int queueId, long queueOffset, long popTime, long nextVisibleTime) {			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			        if (qs == null) {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        }			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        if (orderInfo == null) {			
",
,
			fromLine:"			249",
			toLine:"			250",
			content:"
			        }
			        if (popTime != orderInfo.popTime) {			
",
,
			fromLine:"			254",
			toLine:"			255",
			content:"
			
			        orderInfo.updateOffsetNextVisibleTime(queueOffset, nextVisibleTime);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.rocketmq.broker.offset;
			
			import java.time.Duration;
			import java.util.Map;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNotSame;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			
			    private static final String TOPIC = "topic";
			    private static final String GROUP = "group";			
",
,
			fromLine:"			54",
			toLine:"			55",
			content:"
			
			    private long popTime;			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			    public void before() {
			        consumerOrderInfoManager = new ConsumerOrderInfoManager();			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void testCommitAndNext() {			
",
,
			fromLine:"			68",
			toLine:"			71",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			77",
			toLine:"			80",
			content:"
			        assertEncodeAndDecode();
			        assertEquals(-2, consumerOrderInfoManager.commitAndNext(
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			            1L,			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			87",
			toLine:"			89",
			content:"
			            null,
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			93",
			toLine:"			96",
			content:"
			
			        assertEquals(2, consumerOrderInfoManager.commitAndNext(
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			            1L,			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			103",
			toLine:"			105",
			content:"
			            null,
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			118",
			toLine:"			121",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			            assertEquals(1, orderInfoMap.size());			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			138",
			toLine:"			141",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			            assertEquals(4, orderInfoMap.size());			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			            for (int i = 1; i <= 3; i++) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			161",
			toLine:"			164",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			            assertEquals(3, orderInfoMap.size());			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			            for (int i = 2; i <= 3; i++) {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			184",
			toLine:"			187",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			            assertEquals(2, orderInfoMap.size());
			            assertEquals(0, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_0)).intValue());			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			205",
			toLine:"			208",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			            assertEquals(1, orderInfoMap.size());			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			228",
			toLine:"			231",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			            );			
",
,
			fromLine:"			239",
			toLine:"			240",
			content:"
			                false,
			                TOPIC,			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			                QUEUE_ID_1,			
",
,
			fromLine:"			250",
			toLine:"			251",
			content:"
			            assertEquals(2, orderInfoMap.size());
			            assertEquals(0, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_0)).intValue());			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			259",
			toLine:"			262",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			            );			
",
,
			fromLine:"			270",
			toLine:"			271",
			content:"
			                false,
			                TOPIC,			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			                QUEUE_ID_1,			
",
,
			fromLine:"			281",
			toLine:"			284",
			content:"
			            assertEquals(4, orderInfoMap.size());
			            assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_0)).intValue());
			            assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_1)).intValue());
			            assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 0L)).intValue());			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			            StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			292",
			toLine:"			295",
			content:"
			                false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			            );			
",
,
			fromLine:"			303",
			toLine:"			304",
			content:"
			                false,
			                TOPIC,			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			                QUEUE_ID_1,			
",
,
			fromLine:"			314",
			toLine:"			318",
			content:"
			            assertEquals(4, orderInfoMap.size());
			            assertEquals(0, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_0)).intValue());
			            assertEquals(2, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_1)).intValue());
			            assertEquals(2, orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 0L)).intValue());
			            assertNull(orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 1L)));			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			        StringBuilder orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			330",
			toLine:"			333",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
						
",
,
			fromLine:"			342",
			toLine:"			342",
			content:"
						
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
						
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
			        orderInfoBuilder = new StringBuilder();			
",
,
			fromLine:"			353",
			toLine:"			356",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
						
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
						
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			        assertEncodeAndDecode();			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			        ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroupConfigConcurrentMap = new ConcurrentHashMap<>();			
",
,
			fromLine:"			390",
			toLine:"			391",
			content:"
			
			        TopicConfig topicConfig = new TopicConfig(TOPIC);			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			        {			
",
,
			fromLine:"			399",
			toLine:"			400",
			content:"
			                "errGroup",
			                QUEUE_ID_0,			
",
,
			fromLine:"			409",
			toLine:"			410",
			content:"
			        {
			            consumerOrderInfoManager.update(null, false,			
",
,
			fromLine:"			412",
			toLine:"			413",
			content:"
			                "errGroup",
			                QUEUE_ID_0,			
",
,
			fromLine:"			423",
			toLine:"			427",
			content:"
			            topicConfig.setReadQueueNums(0);
			            consumerOrderInfoManager.update(null, false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			439",
			toLine:"			443",
			content:"
			            topicConfig.setReadQueueNums(8);
			            consumerOrderInfoManager.update(null, false,
			                TOPIC,
			                GROUP,
			                QUEUE_ID_0,			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			                assertEquals(1, orderInfoMap.size());			
",
,
			fromLine:"			459",
			toLine:"			460",
			content:"
			    private void assertEncodeAndDecode() {
			        ConsumerOrderInfoManager.OrderInfo prevOrderInfo = consumerOrderInfoManager.getTable().values().stream().findFirst()			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
						
",
,
			fromLine:"			464",
			toLine:"			466",
			content:"
			
			        consumerOrderInfoManager.decode(dataEncoded);
			        ConsumerOrderInfoManager.OrderInfo newOrderInfo = consumerOrderInfoManager.getTable().values().stream().findFirst()			
",
,
			fromLine:"			480",
			toLine:"			484",
			content:"
			    public void testLoadFromOldVersionOrderInfoData() {
			        consumerOrderInfoManager.update(null, false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			488",
			toLine:"			489",
			content:"
			            new StringBuilder());
			        ConsumerOrderInfoManager.OrderInfo orderInfo = consumerOrderInfoManager.getTable().values().stream().findFirst()			
",
,
			fromLine:"			495",
			toLine:"			495",
			content:"
						
",
,
			fromLine:"			497",
			toLine:"			498",
			content:"
			
			        consumerOrderInfoManager.decode(dataEncoded);			
",
,
			fromLine:"			501",
			toLine:"			505",
			content:"
			        StringBuilder orderInfoBuilder = new StringBuilder();
			        consumerOrderInfoManager.update(null, false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			512",
			toLine:"			514",
			content:"
			        assertEquals(3, orderInfoMap.size());
			        assertEquals(0, orderInfoMap.get(ExtraInfoUtil.getStartOffsetInfoMapKey(TOPIC, QUEUE_ID_0)).intValue());
			        assertEquals(1, orderInfoMap.get(ExtraInfoUtil.getQueueOffsetMapKey(TOPIC, QUEUE_ID_0, 3)).intValue());			
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			        String attemptId = UUID.randomUUID().toString();			
",
,
			fromLine:"			524",
			toLine:"			527",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			533",
			toLine:"			534",
			content:"
			
			        assertTrue(consumerOrderInfoManager.checkBlock(null, TOPIC, GROUP, QUEUE_ID_0, 3000));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/offset/OffsetResetForPopIT.java:
		[
			fromLine:"			17",
			toLine:"			51",
			content:"
			
			package org.apache.rocketmq.test.offset;
			
			import com.google.common.collect.Lists;
			import java.util.Collections;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    private String group;			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			
			        topic = MQRandomUtils.getRandomTopic();			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			        group = initConsumerGroup();
			        LOGGER.info(String.format("use topic: %s, group: %s", topic, group));			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			            // reset offset by queue			
",
,
			fromLine:"			120",
			toLine:"			121",
			content:"
			        int resetOffset = 4;
			        producer.send(messageCount);			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			        int resetOffset = 2;
			        producer.send(messageCount);			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        resetOffsetInner(resetOffset);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        Assert.assertTrue(brokerController1.getConsumerOrderInfoManager()			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        Assert.assertFalse(brokerController1.getConsumerOrderInfoManager()			
",
,
			fromLine:"			169",
			toLine:"			170",
			content:"
			        int resetOffset = 4;
			        producer.send(messageCount);			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        Assert.assertTrue(brokerController1.getConsumerOrderInfoManager()			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        Assert.assertFalse(brokerController1.getConsumerOrderInfoManager()			
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			        brokerController1.getBrokerConfig().setEnablePopBufferMerge(true);
			        producer.send(messageCount);			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
						
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			        brokerController1.getBrokerConfig().setEnablePopBufferMerge(true);			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        consumer =			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
						
",
,
			fromLine:"			308",
			toLine:"			309",
			content:"
			        for (int i = 0; i < 10; i++) {
			            Message msg = new Message(topic, (String.valueOf(i)).getBytes());			
",
,
			fromLine:"			311",
			toLine:"			312",
			content:"
			        }
			        consumer = new RMQPopConsumer(NAMESRV_ADDR, topic, "*", group, new RMQNormalListener(), 1);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManagerLockFreeNotifyTest.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.broker.offset;
			
			import java.time.Duration;
			import java.util.concurrent.atomic.AtomicBoolean;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.processor.PopMessageProcessor;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.stubbing.Answer;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			39",
			toLine:"			41",
			content:"
			
			    private static final String TOPIC = "topic";
			    private static final String GROUP = "group";			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			
			    private long popTime;			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			            return null;			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        consumerOrderInfoManager = new ConsumerOrderInfoManager(brokerController);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void testConsumeMessageThenNoAck() {			
",
,
			fromLine:"			71",
			toLine:"			74",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			        await().atLeast(Duration.ofSeconds(2)).atMost(Duration.ofSeconds(4)).until(notified::get);			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void testConsumeMessageThenAck() {			
",
,
			fromLine:"			88",
			toLine:"			91",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			96",
			toLine:"			99",
			content:"
			        );
			        consumerOrderInfoManager.commitAndNext(
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            1,			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        await().atMost(Duration.ofSeconds(1)).until(notified::get);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public void testConsumeTheChangeInvisibleLonger() {			
",
,
			fromLine:"			112",
			toLine:"			115",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			120",
			toLine:"			123",
			content:"
			        );
			        consumerOrderInfoManager.updateNextVisibleTime(
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			125",
			toLine:"			126",
			content:"
			            1,
			            popTime,			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        await().atLeast(Duration.ofSeconds(4)).atMost(Duration.ofSeconds(6)).until(notified::get);			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			    public void testConsumeTheChangeInvisibleShorter() {			
",
,
			fromLine:"			137",
			toLine:"			140",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			145",
			toLine:"			148",
			content:"
			        );
			        consumerOrderInfoManager.updateNextVisibleTime(
			            TOPIC,
			            GROUP,			
",
,
			fromLine:"			150",
			toLine:"			151",
			content:"
			            1,
			            popTime,			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        await().atLeast(Duration.ofMillis(500)).atMost(Duration.ofSeconds(2)).until(notified::get);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        ConsumerOrderInfoManager savedConsumerOrderInfoManager = new ConsumerOrderInfoManager();			
",
,
			fromLine:"			163",
			toLine:"			166",
			content:"
			            false,
			            TOPIC,
			            GROUP,
			            QUEUE_ID_0,			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
						
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        await().atLeast(Duration.ofSeconds(2)).atMost(Duration.ofSeconds(4)).until(notified::get);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/DefaultPullMessageResultHandler.java:
		[
			fromLine:"			17",
			toLine:"			67",
			content:"
			
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.FileRegion;
			import io.opentelemetry.api.common.Attributes;
			import java.nio.ByteBuffer;
			import java.util.List;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.longpolling.PullRequest;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.pagecache.ManyMessageTransfer;
			import org.apache.rocketmq.broker.plugin.PullMessageResultHandler;
			import org.apache.rocketmq.common.AbortProcessException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.remoting.protocol.topic.OffsetMovedEvent;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_REQUEST_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESPONSE_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    @Override			
",
,
			fromLine:"			89",
			toLine:"			92",
			content:"
			        PullMessageProcessor processor = brokerController.getPullMessageProcessor();
			        final String clientAddress = RemotingHelper.parseChannelRemoteAddr(channel);
			        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());
			        processor.composeResponseHeader(requestHeader, getMessageResult, topicConfig.getTopicSysFlag(),			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        try {			
",
,
			fromLine:"			96",
			toLine:"			98",
			content:"
			        } catch (AbortProcessException e) {
			            response.setCode(e.getResponseCode());
			            response.setRemark(e.getErrorMessage());			
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			        //rewrite the response for the static topic
			        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        if (rewriteResult != null) {			
",
,
			fromLine:"			108",
			toLine:"			110",
			content:"
			
			        processor.updateBroadcastPulledOffset(requestHeader.getTopic(), requestHeader.getConsumerGroup(),
			            requestHeader.getQueueId(), requestHeader, channel, response, getMessageResult.getNextBeginOffset());			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			116",
			content:"
			            case ResponseCode.SUCCESS:
			                this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),			
",
,
			fromLine:"			118",
			toLine:"			119",
			content:"
			
			                this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
						
",
,
			fromLine:"			125",
			toLine:"			127",
			content:"
			                    Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                        .put(LABEL_TOPIC, requestHeader.getTopic())
			                        .put(LABEL_CONSUMER_GROUP, requestHeader.getConsumerGroup())			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			                        .build();
			                    BrokerMetricsManager.messagesOutTotal.add(getMessageResult.getMessageCount(), attributes);			
",
,
			fromLine:"			133",
			toLine:"			134",
			content:"
			
			                if (!channelIsWritable(channel, requestHeader)) {			
",
,
			fromLine:"			140",
			toLine:"			142",
			content:"
			                if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {
			                    final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());
			                    this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),			
",
,
			fromLine:"			144",
			toLine:"			145",
			content:"
			                        (int) (this.brokerController.getMessageStore().now() - beginTimeMills));
			                    response.setBody(r);			
",
,
			fromLine:"			149",
			toLine:"			151",
			content:"
			                        FileRegion fileRegion =
			                            new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);
			                        RemotingCommand finalResponse = response;			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			                            .addListener((ChannelFutureListener) future -> {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			                                Attributes attributes = RemotingMetricsManager.newAttributesBuilder()			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			                                    .build();			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			                                if (!future.isSuccess()) {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			                        log.error("Error occurred when transferring messages from page cache", e);			
",
,
			fromLine:"			171",
			toLine:"			172",
			content:"
			            case ResponseCode.PULL_NOT_FOUND:
			                final boolean hasSuspendFlag = PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			180",
			toLine:"			183",
			content:"
			
			                    String topic = requestHeader.getTopic();
			                    long offset = requestHeader.getQueueOffset();
			                    int queueId = requestHeader.getQueueId();			
",
,
			fromLine:"			194",
			toLine:"			195",
			content:"
			                    MessageQueue mq = new MessageQueue();
			                    mq.setTopic(requestHeader.getTopic());			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			                    OffsetMovedEvent event = new OffsetMovedEvent();			
",
,
			fromLine:"			201",
			toLine:"			202",
			content:"
			                    event.setMessageQueue(mq);
			                    event.setOffsetRequest(requestHeader.getQueueOffset());			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			                        "PULL_OFFSET_MOVED:correction offset. topic={}, groupId={}, requestOffset={}, newOffset={}, suggestBrokerId={}",			
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			                } else {
			                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			                    log.warn("PULL_OFFSET_MOVED:none correction. topic={}, groupId={}, requestOffset={}, suggestBrokerId={}",			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			            default:			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
						
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
						
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        final int queueId) {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			        try {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        } finally {			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/PopInflightMessageCounter.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			
			    public void incrementInFlightMessageNum(String topic, String group, int queueId, int num) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        }			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			            }			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			                if (counter == null) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			                }			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			    public void decrementInFlightMessageNum(String topic, String group, long popTime, int qId, int delta) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        }			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        }			
",
,
			fromLine:"			77",
			toLine:"			80",
			content:"
			
			    private void decrementInFlightMessageNum(String topic, String group, int queueId, int delta) {
			        topicInFlightMessageNum.computeIfPresent(buildKey(topic, group), (key, queueNum) -> {
			            queueNum.computeIfPresent(queueId, (queueIdKey, counter) -> {			
",
,
			fromLine:"			120",
			toLine:"			122",
			content:"
			
			    public void clearInFlightMessageNum(String topic, String group, int queueId) {
			        topicInFlightMessageNum.computeIfPresent(buildKey(topic, group), (key, queueNum) -> {			
",
,
			fromLine:"			130",
			toLine:"			131",
			content:"
			
			    public long getGroupPopInFlightMessageNum(String topic, String group, int queueId) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        }			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/PopInflightMessageCounterTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.store.pop.PopCheckPoint;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			
			        counter.incrementInFlightMessageNum(topic, group, 0, 3);			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			
			        counter.decrementInFlightMessageNum(topic, group, System.currentTimeMillis(), 0, 1);			
",
,
			fromLine:"			46",
			toLine:"			47",
			content:"
			
			        counter.decrementInFlightMessageNum(topic, group, System.currentTimeMillis() - 1000, 0, 1);			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        counter.decrementInFlightMessageNum(popCheckPoint);			
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			
			        counter.decrementInFlightMessageNum(topic, group, System.currentTimeMillis(), 0 ,1);			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			
			        counter.decrementInFlightMessageNum(topic, group, System.currentTimeMillis(), 0, 1);			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			
			        counter.incrementInFlightMessageNum(topic, group, 0, 3);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        counter.clearInFlightMessageNumByTopicName("errorTopic");			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        counter.clearInFlightMessageNumByTopicName(topic);			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			
			        counter.incrementInFlightMessageNum(topic, group, 0, 3);			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        counter.clearInFlightMessageNumByGroupName("errorGroup");			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        counter.clearInFlightMessageNumByGroupName(group);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.store.stats;
			
			import java.util.HashMap;
			import java.util.concurrent.ScheduledExecutorService;
			import org.apache.commons.lang3.tuple.Pair;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.statistics.StatisticsItem;
			import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
			import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
			import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
			import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
			import org.apache.rocketmq.common.statistics.StatisticsManager;
			import org.apache.rocketmq.common.stats.MomentStatsItemSet;
			import org.apache.rocketmq.common.stats.Stats;
			import org.apache.rocketmq.common.stats.StatsItem;
			import org.apache.rocketmq.common.stats.StatsItemSet;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			44",
			toLine:"			49",
			content:"
			
			    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
			    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
			    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
			    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
			    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			
			    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;			
",
,
			fromLine:"			54",
			toLine:"			60",
			content:"
			
			    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
			    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
			    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
			    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
			    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
			    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;			
",
,
			fromLine:"			62",
			toLine:"			68",
			content:"
			    // For commercial
			    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
			    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
			    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
			    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
			    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
			    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			
			    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    // Pull Message Latency			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public void init() {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			172",
			toLine:"			175",
			content:"
			        if (enableQueueStat) {
			            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
			            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
			            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));			
",
,
			fromLine:"			177",
			toLine:"			180",
			content:"
			        }
			        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));			
",
,
			fromLine:"			195",
			toLine:"			202",
			content:"
			            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
			            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
			            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
			            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
			        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,			
",
,
			fromLine:"			207",
			toLine:"			220",
			content:"
			
			        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
			            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
			            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
			            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
			            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
			            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
			            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
			        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,			
",
,
			fromLine:"			332",
			toLine:"			333",
			content:"
			    public void onTopicDeleted(final String topic) {
			        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);			
",
,
			fromLine:"			335",
			toLine:"			336",
			content:"
			        if (enableQueueStat) {
			            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");			
",
,
			fromLine:"			338",
			toLine:"			343",
			content:"
			        }
			        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
			        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
			        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
			        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
			        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");			
",
,
			fromLine:"			349",
			toLine:"			350",
			content:"
			    public void onGroupDeleted(final String group) {
			        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");			
",
,
			fromLine:"			352",
			toLine:"			353",
			content:"
			        if (enableQueueStat) {
			            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");			
",
,
			fromLine:"			355",
			toLine:"			356",
			content:"
			        }
			        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			        if (enableQueueStat) {			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
						
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        if (enableQueueStat) {			
",
,
			fromLine:"			375",
			toLine:"			375",
			content:"
			        if (enableQueueStat) {			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
						
",
,
			fromLine:"			381",
			toLine:"			382",
			content:"
			        if (enableQueueStat) {
			            final String statsKey = buildStatsKey(topic, queueId, group);			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
						
",
,
			fromLine:"			388",
			toLine:"			389",
			content:"
			        if (enableQueueStat) {
			            final String statsKey = buildStatsKey(topic, queueId, group);			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			    public void incConsumerRegisterTime(final int incValue) {			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
			    public void incProducerRegisterTime(final int incValue) {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
			    public void incChannelConnectNum() {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			    public void incChannelCloseNum() {			
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
			    public void incChannelExceptionNum() {			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			    public void incChannelIdleNum() {			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			    public void incTopicPutNums(final String topic) {			
",
,
			fromLine:"			421",
			toLine:"			422",
			content:"
			
			    public void incTopicPutNums(final String topic, int num, int times) {			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			    public void incTopicPutSize(final String topic, final int size) {			
",
,
			fromLine:"			429",
			toLine:"			431",
			content:"
			
			    public void incGroupGetNums(final String group, final String topic, final int incValue) {
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			434",
			toLine:"			436",
			content:"
			
			    public void incGroupCkNums(final String group, final String topic, final int incValue) {
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			439",
			toLine:"			441",
			content:"
			
			    public void incGroupAckNums(final String group, final String topic, final int incValue) {
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
						
",
,
			fromLine:"			468",
			toLine:"			469",
			content:"
			        StringBuilder strBuilder;
			        if (topic != null && group != null) {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			        }			
",
,
			fromLine:"			477",
			toLine:"			477",
			content:"
						
",
,
			fromLine:"			479",
			toLine:"			480",
			content:"
			        StringBuilder strBuilder;
			        if (topic != null && group != null) {			
",
,
			fromLine:"			484",
			toLine:"			484",
			content:"
			        }			
",
,
			fromLine:"			488",
			toLine:"			490",
			content:"
			
			    public void incGroupGetSize(final String group, final String topic, final int incValue) {
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			493",
			toLine:"			493",
			content:"
						
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
			        if (enableQueueStat) {			
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			        } else {			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			        }			
",
,
			fromLine:"			503",
			toLine:"			503",
			content:"
						
",
,
			fromLine:"			505",
			toLine:"			506",
			content:"
			        StringBuilder statsKey;
			        if (topic != null) {			
",
,
			fromLine:"			510",
			toLine:"			511",
			content:"
			        }
			        statsKey.append(queueId).append("@").append(topic);			
",
,
			fromLine:"			515",
			toLine:"			515",
			content:"
			    public void incBrokerPutNums() {			
",
,
			fromLine:"			519",
			toLine:"			519",
			content:"
			    public void incBrokerPutNums(final String topic, final int incValue) {			
",
,
			fromLine:"			524",
			toLine:"			524",
			content:"
			    public void incBrokerGetNums(final String topic, final int incValue) {			
",
,
			fromLine:"			576",
			toLine:"			576",
			content:"
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			581",
			toLine:"			581",
			content:"
			        final String statsKey = buildStatsKey(topic, group);			
",
,
			fromLine:"			584",
			toLine:"			584",
			content:"
						
",
,
			fromLine:"			586",
			toLine:"			587",
			content:"
			        final long fallBehind) {
			        final String statsKey = buildStatsKey(queueId, topic, group);			
",
,
			fromLine:"			590",
			toLine:"			590",
			content:"
						
",
,
			fromLine:"			592",
			toLine:"			593",
			content:"
			        final long fallBehind) {
			        final String statsKey = buildStatsKey(queueId, topic, group);			
",
,
			fromLine:"			596",
			toLine:"			596",
			content:"
						
",
,
			fromLine:"			598",
			toLine:"			599",
			content:"
			        final String topic, final String type, final int incValue) {
			        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);			
",
,
			fromLine:"			602",
			toLine:"			602",
			content:"
						
",
,
			fromLine:"			604",
			toLine:"			605",
			content:"
			        final String topic, final String type, final int incValue) {
			        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
						
",
,
			fromLine:"			611",
			toLine:"			613",
			content:"
			        final String msgType, final int incValue) {
			        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
			            msgType);			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
						
",
,
			fromLine:"			619",
			toLine:"			621",
			content:"
			        final String msgType, final String flowlimitThreshold, final int incValue) {
			        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
			            msgType, flowlimitThreshold);			
",
,
			fromLine:"			624",
			toLine:"			624",
			content:"
						
",
,
			fromLine:"			627",
			toLine:"			628",
			content:"
			        final long... incValues) {
			        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);			
",
,
			fromLine:"			631",
			toLine:"			631",
			content:"
						
",
,
			fromLine:"			634",
			toLine:"			635",
			content:"
			        final long... incValues) {
			        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);			
",
,
			fromLine:"			638",
			toLine:"			638",
			content:"
						
",
,
			fromLine:"			640",
			toLine:"			640",
			content:"
			        StringBuilder strBuilder = new StringBuilder();			
",
,
			fromLine:"			642",
			toLine:"			642",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			644",
			toLine:"			644",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			646",
			toLine:"			646",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			650",
			toLine:"			650",
			content:"
						
",
,
			fromLine:"			653",
			toLine:"			653",
			content:"
			        StringBuffer strBuilder = new StringBuffer();			
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			657",
			toLine:"			657",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			659",
			toLine:"			659",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			661",
			toLine:"			661",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			663",
			toLine:"			663",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			667",
			toLine:"			667",
			content:"
						
",
,
			fromLine:"			670",
			toLine:"			670",
			content:"
			        StringBuffer strBuilder = new StringBuffer();			
",
,
			fromLine:"			672",
			toLine:"			672",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			674",
			toLine:"			674",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			676",
			toLine:"			676",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			678",
			toLine:"			678",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			680",
			toLine:"			680",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			682",
			toLine:"			682",
			content:"
			        strBuilder.append("@");			
",
,
			fromLine:"			686",
			toLine:"			686",
			content:"
						
",
,
			fromLine:"			691",
			toLine:"			695",
			content:"
			        StringBuffer strBuilder = new StringBuffer();
			        strBuilder.append(owner).append(sep);
			        strBuilder.append(instanceId).append(sep);
			        strBuilder.append(topic).append(sep);
			        strBuilder.append(group).append(sep);			
",
,
			fromLine:"			699",
			toLine:"			699",
			content:"
						
",
,
			fromLine:"			704",
			toLine:"			709",
			content:"
			        StringBuffer strBuilder = new StringBuffer();
			        strBuilder.append(owner).append(sep);
			        strBuilder.append(instanceId).append(sep);
			        strBuilder.append(topic).append(sep);
			        strBuilder.append(group).append(sep);
			        strBuilder.append(msgType).append(sep);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
		[
			fromLine:"			16",
			toLine:"			20",
			content:"
			 */
			package org.apache.rocketmq.store.stats;
			
			import org.apache.rocketmq.common.MixAll;
						
",
,
			fromLine:"			27",
			toLine:"			30",
			content:"
			    @Override
			    public void incGroupGetNums(final String group, final String topic, final int incValue) {
			        String lmqGroup = group;
			        String lmqTopic = topic;			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        }			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        }			
",
,
			fromLine:"			40",
			toLine:"			43",
			content:"
			    @Override
			    public void incGroupGetSize(final String group, final String topic, final int incValue) {
			        String lmqGroup = group;
			        String lmqTopic = topic;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        }			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        }			
",
,
			fromLine:"			53",
			toLine:"			56",
			content:"
			    @Override
			    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
			        String lmqGroup = group;
			        String lmqTopic = topic;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        }			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        }			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    @Override			
",
,
			fromLine:"			94",
			toLine:"			96",
			content:"
			        final long fallBehind) {
			        String lmqGroup = group;
			        String lmqTopic = topic;			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        }			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        }			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    @Override			
",
,
			fromLine:"			108",
			toLine:"			110",
			content:"
			        final long fallBehind) {
			        String lmqGroup = group;
			        String lmqTopic = topic;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        }			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        }			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.store.stats;
			
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;
			import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;
			import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;
			import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;
			import static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;
			import static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;
			import static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;
			import static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));
			        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);
			        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void testIncQueueGetNums() {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void testIncQueueGetSize() {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);			
",
,
			fromLine:"			97",
			toLine:"			99",
			content:"
			        brokerStatsManager.incTopicPutNums(TOPIC);
			        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);
			        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        brokerStatsManager.incTopicPutSize(TOPIC, 2);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public void testIncGroupGetNums() {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    public void testIncGroupGetSize() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void testIncGroupGetLatency() {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        String statsKey = String.format("%d@%s@%s", 1, TOPIC, GROUP_NAME);			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        brokerStatsManager.incBrokerPutNums();			
",
,
			fromLine:"			141",
			toLine:"			144",
			content:"
			        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 100);
			        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);
			        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 100);
			        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);			
",
,
			fromLine:"			146",
			toLine:"			148",
			content:"
			        brokerStatsManager.incSendBackNums(GROUP_NAME, TOPIC);
			        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);
			        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);			
",
,
			fromLine:"			152",
			toLine:"			163",
			content:"
			
			        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));
			        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + "@" + QUEUE_ID));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + "@" + QUEUE_ID));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));			
",
,
			fromLine:"			168",
			toLine:"			171",
			content:"
			    public void testOnGroupDeleted() {
			        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);
			        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 100);
			        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);			
",
,
			fromLine:"			173",
			toLine:"			175",
			content:"
			        brokerStatsManager.incSendBackNums(GROUP_NAME, TOPIC);
			        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);
			        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);			
",
,
			fromLine:"			179",
			toLine:"			186",
			content:"
			
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + "@" + QUEUE_ID + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, "1@" + TOPIC + "@" + GROUP_NAME));
			        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, "1@" + TOPIC + "@" + GROUP_NAME));			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/core/MessageStoreFetcherImpl.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.core;
			
			import com.github.benmanes.caffeine.cache.Cache;
			import com.github.benmanes.caffeine.cache.Caffeine;
			import com.github.benmanes.caffeine.cache.Scheduler;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.GetMessageResult;
			import org.apache.rocketmq.store.GetMessageStatus;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.TieredMessageStore;
			import org.apache.rocketmq.tieredstore.common.GetMessageResultExt;
			import org.apache.rocketmq.tieredstore.common.SelectBufferResult;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreException;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.index.IndexItem;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			54",
			toLine:"			58",
			content:"
			
			    private final String brokerName;
			    private final MetadataStore metadataStore;
			    private final MessageStoreConfig storeConfig;
			    private final TieredMessageStore messageStore;			
",
,
			fromLine:"			63",
			toLine:"			67",
			content:"
			    public MessageStoreFetcherImpl(TieredMessageStore messageStore) {
			        this.storeConfig = messageStore.getStoreConfig();
			        this.brokerName = storeConfig.getBrokerName();
			        this.flatFileStore = messageStore.getFlatFileStore();
			        this.messageStore = messageStore;			
",
,
			fromLine:"			69",
			toLine:"			71",
			content:"
			        this.memoryMaxSize =
			            (long) (Runtime.getRuntime().maxMemory() * storeConfig.getReadAheadCacheSizeThresholdRate());
			        this.fetcherCache = this.initCache(storeConfig);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        if (count % 1000L == 0L) {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			
			        MessageQueue mq = flatFile.getMessageQueue();			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                if (result.getStatus() != GetMessageStatus.FOUND) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			                            "topic={}, queue={}, queue offset={}, batch size={}",			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                        msg.getByteBuffer(), msg.getStartOffset(), msg.getSize(), tagCodeList.get(i));			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
						
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        MessageQueue mq = flatFile.getMessageQueue();			
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			        if (GetMessageStatus.FOUND.equals(result.getStatus())) {
			            log.debug("MessageFetcher cache hit, group={}, topic={}, queueId={}, offset={}, maxCount={}, resultSize={}, lag={}",			
",
,
			fromLine:"			177",
			toLine:"			178",
			content:"
			        // If cache miss, pull messages immediately
			        log.debug("MessageFetcher cache miss, group={}, topic={}, queueId={}, offset={}, maxCount={}, lag={}",			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			
			        return fetchMessageThenPutToCache(flatFile, queueOffset, storeConfig.getReadAheadMessageCountThreshold())			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
						
",
,
			fromLine:"			188",
			toLine:"			189",
			content:"
			        GetMessageResultExt result = new GetMessageResultExt();
			        result.setMinOffset(flatFile.getConsumeQueueMinOffset());			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			            return CompletableFuture.completedFuture(result);			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            result.setStatus(GetMessageStatus.OFFSET_OVERFLOW_ONE);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			            return CompletableFuture.completedFuture(result);			
",
,
			fromLine:"			205",
			toLine:"			207",
			content:"
			
			        if (queueOffset < result.getMaxOffset()) {
			            batchSize = Math.min(batchSize, (int) Math.min(			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			        try {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			                    result.setStatus(GetMessageStatus.OFFSET_FOUND_NULL);			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
						
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			            if (lastCommitLogOffset < firstCommitLogOffset) {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			                        "topic={} queueId={}, offset={}, firstOffset={}, lastOffset={}",			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			            while (cqBuffer.limit() > MessageFormatUtil.CONSUME_QUEUE_UNIT_SIZE &&			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
						
",
,
			fromLine:"			252",
			toLine:"			254",
			content:"
			                    "topic={}, queueId={}, broker offset={}-{}, offset={}, expect={}, actually={}, lag={}",
			                flatFile.getMessageQueue().getTopic(), flatFile.getMessageQueue().getQueueId(),
			                result.getMinOffset(), result.getMaxOffset(), queueOffset, finalBatchSize,			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
						
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			                result.setStatus(GetMessageStatus.NO_MATCHED_MESSAGE);			
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			                result.setStatus(GetMessageStatus.FOUND);			
",
,
			fromLine:"			281",
			toLine:"			283",
			content:"
			        }).exceptionally(e -> {
			            MessageQueue mq = flatFile.getMessageQueue();
			            log.warn("MessageFetcher#getMessageFromTieredStoreAsync failed, " +			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			            result.setStatus(GetMessageStatus.OFFSET_FOUND_NULL);			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			    @Override			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			        GetMessageResult result = new GetMessageResult();			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        if (flatFile == null) {			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			            result.setStatus(GetMessageStatus.NO_MESSAGE_IN_QUEUE);			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			            return CompletableFuture.completedFuture(result);			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			            return CompletableFuture.completedFuture(result);			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            return CompletableFuture.completedFuture(result);			
",
,
			fromLine:"			334",
			toLine:"			335",
			content:"
			        boolean cacheBusy = fetcherCache.estimatedSize() > memoryMaxSize * 0.8;
			        if (storeConfig.isReadAheadCacheEnable() && !cacheBusy) {			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			        } else {			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			    public CompletableFuture<Long> getEarliestMessageTimeAsync(String topic, int queueId) {			
",
,
			fromLine:"			357",
			toLine:"			358",
			content:"
			    @Override
			    public CompletableFuture<Long> getMessageStoreTimeStampAsync(String topic, int queueId, long queueOffset) {			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
						
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
			                return flatFile.getCommitLogAsync(commitLogOffset, size);			
",
,
			fromLine:"			371",
			toLine:"			372",
			content:"
			            .exceptionally(e -> {
			                log.error("MessageStoreFetcherImpl#getMessageStoreTimeStampAsync: " +			
",
,
			fromLine:"			378",
			toLine:"			379",
			content:"
			    @Override
			    public long getOffsetInQueueByTime(String topic, int queueId, long timestamp, BoundaryType type) {			
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
			        }			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			    @Override			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			        try {			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			            if (topicMetadata == null) {			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			        CompletableFuture<List<IndexItem>> future =			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
			        return future.thenCompose(indexItemList -> {			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			                FlatMessageFile flatFile =			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			                futureList.add(getMessageFuture);			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			            if (result != null) {			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			                        "query result={}, topic={}, topicId={}, key={}, maxCount={}, timestamp={}-{}",			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/common/MessageReceiptHandle.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.proxy.common;
			
			import com.google.common.base.MoreObjects;
			import com.google.common.base.Objects;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			
			public class MessageReceiptHandle {
			    private final String group;
			    private final String topic;			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    private final String messageId;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    private final ReceiptHandle originalReceiptHandle;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			        this.originalReceiptHandle = ReceiptHandle.decode(receiptHandleStr);
			        this.group = group;
			        this.topic = topic;			
",
,
			fromLine:"			48",
			toLine:"			49",
			content:"
			        this.messageId = messageId;
			        this.queueOffset = queueOffset;			
",
,
			fromLine:"			62",
			toLine:"			64",
			content:"
			        MessageReceiptHandle handle = (MessageReceiptHandle) o;
			        return queueId == handle.queueId && queueOffset == handle.queueOffset && consumeTimestamp == handle.consumeTimestamp
			            && reconsumeTimes == handle.reconsumeTimes			
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			    public int hashCode() {
			        return Objects.hashCode(group, topic, queueId, messageId, queueOffset, originalReceiptHandleStr, consumeTimestamp,			
",
,
			fromLine:"			78",
			toLine:"			80",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("group", group)
			            .add("topic", topic)			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			            .add("messageId", messageId)			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			            .add("originalReceiptHandleStr", originalReceiptHandleStr)			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public String getGroup() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public long getQueueOffset() {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public int getReconsumeTimes() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/RocksDBMessageStore.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.io.IOException;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.function.Supplier;
			
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
			import org.apache.rocketmq.store.metrics.RocksDBStoreMetricsManager;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;
			import org.apache.rocketmq.store.queue.RocksDBConsumeQueue;
			import org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.rocksdb.RocksDBException;
						
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    @Override			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.store.dledger;
			
			import java.io.File;
			import java.time.Duration;
			import java.util.Objects;
			import java.util.UUID;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.Assert;
			import org.junit.Test;
			import org.junit.Assume;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            Assert.assertEquals(0, dLedgerStore.dispatchBehindBytes());			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            long beforeSize = Objects.requireNonNull(new File(base + "/multi/a/").listFiles()).length;			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        storeConfig.setMaxIndexNum(100 * 10);			
",
,
			fromLine:"			105",
			toLine:"			107",
			content:"
			        storeConfig.setEnableDLegerCommitLog(true);
			        storeConfig.setdLegerGroup(group);
			        storeConfig.setdLegerPeers(peers);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.store.dledger;
			
			import java.time.Duration;
			import java.util.UUID;
			
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.StoreTestBase;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.junit.Assert;
			import org.junit.Assume;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			            DefaultMessageStore originalStore = createMessageStore(base, false);			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			            Assert.assertEquals(0, originalStore.dispatchBehindBytes());			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        {			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			            Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
			            doGetMessages(dledgerStore, topic, 0, 1000, 0);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            DefaultMessageStore originalStore = createMessageStore(base, false);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			            dividedOffset = dividedOffset - dividedOffset % originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog() + originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog();			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            Assert.assertEquals(0, recoverOriginalStore.dispatchBehindBytes());			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			            Assert.assertEquals(0, recoverDledgerStore.dispatchBehindBytes());			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			            DefaultMessageStore originalStore = createMessageStore(base, false);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			            Assert.assertTrue(success);			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			            for (int i = 0; i < 100; i++) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			            for (int i = 0; i < 100; i++) {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			            for (int i = 0; i < 100; i++) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            Assert.assertFalse(dLedgerCommitLog.getdLedgerServer().getdLedgerConfig().isEnableDiskForceClean());			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueue.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.nio.ByteBuffer;
			import java.util.List;
			
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.rocksdb.RocksDBException;
			
			public class RocksDBConsumeQueue implements ConsumeQueueInterface {			
",
,
			fromLine:"			38",
			toLine:"			40",
			content:"
			
			    private final MessageStore messageStore;
			    private final String topic;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    public RocksDBConsumeQueue(final MessageStore messageStore, final String topic, final int queueId) {
			        this.messageStore = messageStore;
			        this.topic = topic;			
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			    public RocksDBConsumeQueue(final String topic, final int queueId) {
			        this.messageStore = null;
			        this.topic = topic;			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    @Override			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        try {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			127",
			toLine:"			128",
			content:"
			        try {
			            long maxOffsetInQueue = this.messageStore.getQueueStore().getMaxOffsetInQueue(topic, queueId);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public long getMaxPhysicOffset() {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        // attention: unitSize should equal to 'ConsumeQueue.CQ_STORE_UNIT_SIZE'			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			            // we will recover topic queue table from rocksdb when we use it.			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			    public long getMinOffsetInQueue() {			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			        try {			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			        try {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			        try {			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			    private ReferredIterator<CqUnit> iterateFrom0(final long startIndex, final int count) throws RocksDBException {			
",
,
			fromLine:"			328",
			toLine:"			329",
			content:"
			        if (byteBufferList == null || byteBufferList.isEmpty()) {
			            if (this.messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			    public int getQueueId() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/ConsumeQueueStoreInterface.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.nio.ByteBuffer;
			import java.util.List;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.rocksdb.RocksDBException;
						
",
,
			fromLine:"			146",
			toLine:"			149",
			content:"
			     * range query cqUnit(ByteBuffer) in rocksdb
			     * @param topic
			     * @param queueId
			     * @param startIndex			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			     */			
",
,
			fromLine:"			157",
			toLine:"			159",
			content:"
			     * query cqUnit(ByteBuffer) in rocksdb
			     * @param topic
			     * @param queueId			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			     */			
",
,
			fromLine:"			268",
			toLine:"			269",
			content:"
			     * than one message satisfy the condition, decide which one to return based on boundaryType.
			     * @param timestamp    timestamp			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			     */			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueStore.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.commons.io.FileUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.rocksdb.ConsumeQueueRocksDBStorage;
			import org.rocksdb.RocksDBException;
			import org.rocksdb.Statistics;
			import org.rocksdb.WriteBatch;
			
			public class RocksDBConsumeQueueStore extends AbstractConsumeQueueStore {
			    private static final Logger ERROR_LOG = LoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME);			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			     */
			    private final ConsumeQueueRocksDBStorage rocksDBStorage;			
",
,
			fromLine:"			84",
			toLine:"			86",
			content:"
			        this.storePath = StorePathConfigHelper.getStorePathConsumeQueue(messageStoreConfig.getStorePathRootDir());
			        this.rocksDBStorage = new ConsumeQueueRocksDBStorage(messageStore, storePath, 4);
			        this.rocksDBConsumeQueueTable = new RocksDBConsumeQueueTable(rocksDBStorage, messageStore);			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        this.scheduledExecutorService.scheduleAtFixedRate(() -> {			
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			    public boolean load() {
			        boolean result = this.rocksDBStorage.start();			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    private boolean shutdownInner() {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			            } else {			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        if (!this.isCQError) {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			    private boolean putMessagePosition0() {			
",
,
			fromLine:"			220",
			toLine:"			221",
			content:"
			
			                this.rocksDBConsumeQueueTable.buildAndPutCQByteBuffer(cqBBPairList.get(i), topicBytes, request, writeBatch);			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			            // clear writeBatch in batchPut			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			            tempTopicQueueMaxOffsetMap.clear();			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			    public Statistics getStatistics() {			
",
,
			fromLine:"			273",
			toLine:"			274",
			content:"
			    @Override
			    public List<ByteBuffer> rangeQuery(final String topic, final int queueId, final long startIndex, final int num) throws RocksDBException {			
",
,
			fromLine:"			278",
			toLine:"			279",
			content:"
			    @Override
			    public ByteBuffer get(final String topic, final int queueId, final long cqOffset) throws RocksDBException {			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			        int queueId = consumeQueue.getQueueId();			
",
,
			fromLine:"			313",
			toLine:"			314",
			content:"
			        try {
			            this.rocksDBConsumeQueueTable.destroyCQ(topic, queueId, writeBatch);			
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
						
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			322",
			toLine:"			322",
			content:"
			            writeBatch.close();			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			        try {			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			    public void cleanExpired(final long minPhyOffset) {			
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
			    @Override			
",
,
			fromLine:"			372",
			toLine:"			373",
			content:"
			        final long minPhysicOffset = this.messageStore.getMinPhyOffset();
			        long low = this.rocksDBConsumeQueueOffsetTable.getMinCqOffset(topic, queueId);			
",
,
			fromLine:"			377",
			toLine:"			378",
			content:"
			        }
			        return this.rocksDBConsumeQueueTable.binarySearchInCQByTime(topic, queueId, high, low, timestamp,			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueTable.java:
		[
			fromLine:"			16",
			toLine:"			40",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.queue.RocksDBConsumeQueueOffsetTable.PhyAndCQOffset;
			import org.apache.rocketmq.store.rocksdb.ConsumeQueueRocksDBStorage;
			import org.rocksdb.ColumnFamilyHandle;
			import org.rocksdb.RocksDBException;
			import org.rocksdb.WriteBatch;
			
			import static org.apache.rocketmq.common.utils.DataConverter.CHARSET_UTF8;
			import static org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore.CTRL_0;
			import static org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore.CTRL_1;
			import static org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore.CTRL_2;
						
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			public class RocksDBConsumeQueueTable {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private static final Logger ROCKSDB_LOG = LoggerFactory.getLogger(LoggerName.ROCKSDB_LOGGER_NAME);			
",
,
			fromLine:"			93",
			toLine:"			94",
			content:"
			
			    private final ConsumeQueueRocksDBStorage rocksDBStorage;			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			    public RocksDBConsumeQueueTable(ConsumeQueueRocksDBStorage rocksDBStorage, DefaultMessageStore messageStore) {
			        this.rocksDBStorage = rocksDBStorage;			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void load() {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        final ByteBuffer cqKey = cqBBPair.getObject1();			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        final ByteBuffer cqValue = cqBBPair.getObject2();			
",
,
			fromLine:"			118",
			toLine:"			121",
			content:"
			
			    public ByteBuffer getCQInKV(final String topic, final int queueId, final long cqOffset) throws RocksDBException {
			        final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);
			        final ByteBuffer keyBB = buildCQKeyByteBuffer(topicBytes, queueId, cqOffset);			
",
,
			fromLine:"			125",
			toLine:"			132",
			content:"
			
			    public List<ByteBuffer> rangeQuery(final String topic, final int queueId, final long startIndex, final int num) throws RocksDBException {
			        final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);
			        final List<ColumnFamilyHandle> defaultCFHList = new ArrayList(num);
			        final ByteBuffer[] resultList = new ByteBuffer[num];
			        final List<Integer> kvIndexList = new ArrayList(num);
			        final List<byte[]> kvKeyList = new ArrayList(num);
			        for (int i = 0; i < num; i++) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			        if (keyNum > 0) {			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			     * When topic is deleted, we clean up its CqUnit in rocksdb.
			     * @param topic			
",
,
			fromLine:"			172",
			toLine:"			175",
			content:"
			     */
			    public void destroyCQ(final String topic, final int queueId, WriteBatch writeBatch) throws RocksDBException {
			        final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);
			        final ByteBuffer cqStartKey = buildDeleteCQKey(true, topicBytes, queueId);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			186",
			toLine:"			189",
			content:"
			        long targetOffset = -1L, leftOffset = -1L, rightOffset = -1L;
			        long ceiling = high, floor = low;
			        while (high >= low) {
			            long midOffset = low + ((high - low) >>> 1);			
",
,
			fromLine:"			191",
			toLine:"			193",
			content:"
			            if (byteBuffer == null) {
			                ERROR_LOG.warn("binarySearchInCQByTimeStamp Failed. topic: {}, queueId: {}, timestamp: {}, result: null",
			                    topic, queueId, timestamp);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			            if (phyOffset < minPhysicOffset) {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                return 0;			
",
,
			fromLine:"			209",
			toLine:"			210",
			content:"
			                break;
			            } else if (storeTime > timestamp) {			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			            } else {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            // offset next to it might also share the same store-timestamp.			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			                        }			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			                        long storeTime = byteBuffer.getLong(MSG_STORE_TIME_SIZE_OFFSET);			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			                        }			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			                        long storeTime = byteBuffer.getLong(MSG_STORE_TIME_SIZE_OFFSET);			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			                default: {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        } else {			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			                default: {			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
						
",
,
			fromLine:"			279",
			toLine:"			283",
			content:"
			        long resultPhyOffset = -1L;
			        while (high >= low) {
			            long midCQOffset = low + ((high - low) >>> 1);
			            ByteBuffer byteBuffer = getCQInKV(topic, queueId, midCQOffset);
			            if (this.messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			            if (byteBuffer == null) {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			            } else if (phyOffset > targetPhyOffset) {			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			            } else {			
",
,
			fromLine:"			320",
			toLine:"			322",
			content:"
			
			    private ByteBuffer buildCQKeyByteBuffer(final byte[] topicBytes, final int queueId, final long cqOffset) {
			        final ByteBuffer byteBuffer = ByteBuffer.allocate(CQ_KEY_LENGTH_WITHOUT_TOPIC_BYTES + topicBytes.length);			
",
,
			fromLine:"			326",
			toLine:"			328",
			content:"
			
			    private void buildCQKeyByteBuffer(final ByteBuffer byteBuffer, final byte[] topicBytes, final int queueId, final long cqOffset) {
			        byteBuffer.position(0).limit(CQ_KEY_LENGTH_WITHOUT_TOPIC_BYTES + topicBytes.length);			
",
,
			fromLine:"			331",
			toLine:"			333",
			content:"
			
			    private void buildCQKeyByteBuffer0(final ByteBuffer byteBuffer, final byte[] topicBytes, final int queueId, final long cqOffset) {
			        byteBuffer.putInt(topicBytes.length).put(CTRL_1).put(topicBytes).put(CTRL_1).putInt(queueId).put(CTRL_1).putLong(cqOffset);			
",
,
			fromLine:"			336",
			toLine:"			338",
			content:"
			
			    private void buildCQValueByteBuffer(final ByteBuffer byteBuffer, final long phyOffset, final int msgSize, final long tagsCode, final long storeTimestamp) {
			        byteBuffer.position(0).limit(CQ_UNIT_SIZE);			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
						
",
,
			fromLine:"			343",
			toLine:"			344",
			content:"
			        final long tagsCode, final long storeTimestamp) {
			        byteBuffer.putLong(phyOffset).putInt(msgSize).putLong(tagsCode).putLong(storeTimestamp);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CloneGroupOffsetRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public String getDestGroup() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setDestGroup(String destGroup) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setSrcGroup(String srcGroup) {			
",
,
			fromLine:"			83",
			toLine:"			85",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("srcGroup", srcGroup)
			            .add("destGroup", destGroup)			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/schedule/ScheduleMessageService.java:
		[
			fromLine:"			16",
			toLine:"			64",
			content:"
			 */
			package org.apache.rocketmq.broker.schedule;
			
			import io.opentelemetry.api.common.Attributes;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Queue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.running.RunningStats;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_MESSAGE_TYPE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
						
",
,
			fromLine:"			495",
			toLine:"			495",
			content:"
			            int sizePy) {			
",
,
			fromLine:"			525",
			toLine:"			525",
			content:"
						
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			            CompletableFuture<PutMessageResult> future =			
",
,
			fromLine:"			535",
			toLine:"			535",
			content:"
			            return new PutResultProcess()			
",
,
			fromLine:"			537",
			toLine:"			541",
			content:"
			                .setDelayLevel(this.delayLevel)
			                .setOffset(offset)
			                .setPhysicOffset(offsetPy)
			                .setPhysicSize(sizePy)
			                .setMsgId(msgId)			
",
,
			fromLine:"			602",
			toLine:"			602",
			content:"
			        private String topic;			
",
,
			fromLine:"			606",
			toLine:"			607",
			content:"
			        private int delayLevel;
			        private String msgId;			
",
,
			fromLine:"			619",
			toLine:"			619",
			content:"
			        public PutResultProcess setOffset(long offset) {			
",
,
			fromLine:"			639",
			toLine:"			639",
			content:"
			        public PutResultProcess setMsgId(String msgId) {			
",
,
			fromLine:"			644",
			toLine:"			644",
			content:"
			        public PutResultProcess setAutoResend(boolean autoResend) {			
",
,
			fromLine:"			658",
			toLine:"			658",
			content:"
			        public long getOffset() {			
",
,
			fromLine:"			662",
			toLine:"			662",
			content:"
			        public long getNextOffset() {			
",
,
			fromLine:"			678",
			toLine:"			678",
			content:"
			        public String getMsgId() {			
",
,
			fromLine:"			682",
			toLine:"			682",
			content:"
			        public boolean isAutoResend() {			
",
,
			fromLine:"			718",
			toLine:"			721",
			content:"
			            if (ScheduleMessageService.this.brokerController.getMessageStore().getMessageStoreConfig().isEnableScheduleMessageStats() && !result.isRemotePut()) {
			                ScheduleMessageService.this.brokerController.getBrokerStatsManager().incQueueGetNums(MixAll.SCHEDULE_CONSUMER_GROUP, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC, delayLevel - 1, result.getAppendMessageResult().getMsgNum());
			                ScheduleMessageService.this.brokerController.getBrokerStatsManager().incQueueGetSize(MixAll.SCHEDULE_CONSUMER_GROUP, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC, delayLevel - 1, result.getAppendMessageResult().getWroteBytes());
			                ScheduleMessageService.this.brokerController.getBrokerStatsManager().incGroupGetNums(MixAll.SCHEDULE_CONSUMER_GROUP, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC, result.getAppendMessageResult().getMsgNum());			
",
,
			fromLine:"			731",
			toLine:"			731",
			content:"
						
",
,
			fromLine:"			748",
			toLine:"			748",
			content:
{
            log.warn("ScheduleMessageService onException, info: ", this.toString());						
}
,
			fromLine:"			813",
			toLine:"			813",
			content:"
			                "topic='" + topic + '\'' +			
",
,
			fromLine:"			817",
			toLine:"			818",
			content:"
			                ", delayLevel=" + delayLevel +
			                ", msgId='" + msgId + '\'' +			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java:
		[
			fromLine:"			17",
			toLine:"			64",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.CopyOnWriteArraySet;
			import java.util.concurrent.ExecutorService;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        try {			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			            }
			            return popMessage(ctx, messageQueue, consumerGroup, topic, maxMsgNums, invisibleTime, pollTime, initMode,			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        try {			
",
,
			fromLine:"			123",
			toLine:"			124",
			content:"
			                log.warn("change maxNums from {} to {} for pop request, with info: topic:{}, group:{}",
			                    maxMsgNums, ProxyUtils.MAX_MSG_NUMS_FOR_POP_REQUEST, topic, consumerGroup);			
",
,
			fromLine:"			128",
			toLine:"			129",
			content:"
			            PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();
			            requestHeader.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			131",
			toLine:"			138",
			content:"
			            requestHeader.setQueueId(messageQueue.getQueueId());
			            requestHeader.setMaxMsgNums(maxMsgNums);
			            requestHeader.setInvisibleTime(invisibleTime);
			            requestHeader.setPollTime(pollTime);
			            requestHeader.setInitMode(initMode);
			            requestHeader.setExpType(subscriptionData.getExpressionType());
			            requestHeader.setExp(subscriptionData.getSubString());
			            requestHeader.setOrder(fifo);			
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			
			            future = this.serviceManager.getMessageService().popMessage(			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                    requestHeader,			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			                        !popResult.getMsgFoundList().isEmpty() &&			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			                                PopMessageResultFilter.FilterResult filterResult =			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			                                    case NO_MATCH:
			                                        this.messagingProcessor.ackMessage(			
",
,
			fromLine:"			172",
			toLine:"			173",
			content:"
			                                            messageExt.getMsgId(),
			                                            consumerGroup,			
",
,
			fromLine:"			177",
			toLine:"			178",
			content:"
			                                    case TO_DLQ:
			                                        this.messagingProcessor.forwardMessageToDeadLetterQueue(			
",
,
			fromLine:"			181",
			toLine:"			182",
			content:"
			                                            messageExt.getMsgId(),
			                                            consumerGroup,			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        try {			
",
,
			fromLine:"			227",
			toLine:"			231",
			content:"
			            AckMessageRequestHeader ackMessageRequestHeader = new AckMessageRequestHeader();
			            ackMessageRequestHeader.setConsumerGroup(consumerGroup);
			            ackMessageRequestHeader.setTopic(handle.getRealTopic(topic, consumerGroup));
			            ackMessageRequestHeader.setQueueId(handle.getQueueId());
			            ackMessageRequestHeader.setExtraInfo(handle.getReceiptHandle());			
",
,
			fromLine:"			233",
			toLine:"			236",
			content:"
			
			            future = this.serviceManager.getMessageService().ackMessage(
			                ctx,
			                handle,			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			                ackMessageRequestHeader,			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
						
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        try {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
						
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			            for (Map.Entry<String, List<ReceiptHandleMessage>> entry : brokerHandleListMapEntrySet) {			
",
,
			fromLine:"			290",
			toLine:"			291",
			content:"
			
			    protected CompletableFuture<List<BatchAckResult>> processBrokerHandle(ProxyContext ctx, String consumerGroup, String topic, List<ReceiptHandleMessage> handleMessageList, long timeoutMillis) {			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			                List<BatchAckResult> results = new ArrayList<>();			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			                List<BatchAckResult> results = new ArrayList<>();			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
						
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			        try {			
",
,
			fromLine:"			315",
			toLine:"			321",
			content:"
			            ChangeInvisibleTimeRequestHeader changeInvisibleTimeRequestHeader = new ChangeInvisibleTimeRequestHeader();
			            changeInvisibleTimeRequestHeader.setConsumerGroup(groupName);
			            changeInvisibleTimeRequestHeader.setTopic(handle.getRealTopic(topicName, groupName));
			            changeInvisibleTimeRequestHeader.setQueueId(handle.getQueueId());
			            changeInvisibleTimeRequestHeader.setExtraInfo(handle.getReceiptHandle());
			            changeInvisibleTimeRequestHeader.setOffset(handle.getOffset());
			            changeInvisibleTimeRequestHeader.setInvisibleTime(invisibleTime);			
",
,
			fromLine:"			323",
			toLine:"			326",
			content:"
			
			            future = this.serviceManager.getMessageService().changeInvisibleTime(
			                    ctx,
			                    handle,			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			                    changeInvisibleTimeRequestHeader,			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
						
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			            AddressableMessageQueue addressableMessageQueue = serviceManager.getTopicRouteService()			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			            PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();			
",
,
			fromLine:"			364",
			toLine:"			371",
			content:"
			            requestHeader.setQueueId(addressableMessageQueue.getQueueId());
			            requestHeader.setQueueOffset(queueOffset);
			            requestHeader.setMaxMsgNums(maxMsgNums);
			            requestHeader.setSysFlag(sysFlag);
			            requestHeader.setCommitOffset(commitOffset);
			            requestHeader.setSuspendTimeoutMillis(suspendTimeoutMillis);
			            requestHeader.setSubscription(subscriptionData.getSubString());
			            requestHeader.setExpressionType(subscriptionData.getExpressionType());			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
						
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
			            AddressableMessageQueue addressableMessageQueue = serviceManager.getTopicRouteService()			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			            UpdateConsumerOffsetRequestHeader requestHeader = new UpdateConsumerOffsetRequestHeader();			
",
,
			fromLine:"			388",
			toLine:"			389",
			content:"
			            requestHeader.setQueueId(addressableMessageQueue.getQueueId());
			            requestHeader.setCommitOffset(commitOffset);			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
						
",
,
			fromLine:"			401",
			toLine:"			401",
			content:"
			            AddressableMessageQueue addressableMessageQueue = serviceManager.getTopicRouteService()			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			            QueryConsumerOffsetRequestHeader requestHeader = new QueryConsumerOffsetRequestHeader();			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			            requestHeader.setQueueId(addressableMessageQueue.getQueueId());			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
						
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			            Set<MessageQueue> successSet = new CopyOnWriteArraySet<>();			
",
,
			fromLine:"			423",
			toLine:"			424",
			content:"
			                LockBatchRequestBody requestBody = new LockBatchRequestBody();
			                requestBody.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			427",
			toLine:"			427",
			content:"
			                CompletableFuture<Void> future0 = serviceManager.getMessageService()			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			                if (t != null) {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
						
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
			        try {			
",
,
			fromLine:"			453",
			toLine:"			454",
			content:"
			                UnlockBatchRequestBody requestBody = new UnlockBatchRequestBody();
			                requestBody.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			                requestBody.setMqSet(v.stream().map(AddressableMessageQueue::getMessageQueue).collect(Collectors.toSet()));			
",
,
			fromLine:"			461",
			toLine:"			461",
			content:"
			                if (t != null) {			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
						
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			            AddressableMessageQueue addressableMessageQueue = serviceManager.getTopicRouteService()			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
			            requestHeader.setQueueId(addressableMessageQueue.getQueueId());			
",
,
			fromLine:"			487",
			toLine:"			487",
			content:"
						
",
,
			fromLine:"			491",
			toLine:"			491",
			content:"
			            AddressableMessageQueue addressableMessageQueue = serviceManager.getTopicRouteService()			
",
,
			fromLine:"			495",
			toLine:"			495",
			content:"
			            requestHeader.setQueueId(addressableMessageQueue.getQueueId());			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/DefaultMessagingProcessor.java:
		[
			fromLine:"			16",
			toLine:"			64",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import com.alibaba.fastjson2.JSON;
			import io.netty.channel.Channel;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclClientRPCHook;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.ServiceManagerFactory;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        );			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    @Override			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        String producerGroup, int sysFlag, List<Message> msg, long timeoutMillis) {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    @Override			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			        String messageId, String groupName, String topicName, long timeoutMillis) {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    @Override			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        long timeoutMillis) {			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			    @Override			
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			    ) {
			        return this.consumerProcessor.popMessage(ctx, queueSelector, consumerGroup, topic, maxMsgNums,			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    @Override			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			        String consumerGroup, String topic, long timeoutMillis) {			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			    @Override			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			        List<ReceiptHandleMessage> handleMessageList, String consumerGroup, String topic, long timeoutMillis) {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			    @Override			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			        String groupName, String topicName, long invisibleTime, long timeoutMillis) {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    @Override			
",
,
			fromLine:"			217",
			toLine:"			218",
			content:"
			        SubscriptionData subscriptionData, long timeoutMillis) {
			        return this.consumerProcessor.pullMessage(ctx, messageQueue, consumerGroup, queueOffset, maxMsgNums,			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			    @Override			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        String consumerGroup, long commitOffset, long timeoutMillis) {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			    @Override			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        String consumerGroup, long timeoutMillis) {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    @Override			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        String consumerGroup, String clientId, long timeoutMillis) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    @Override			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			        String clientId, long timeoutMillis) {			
",
,
			fromLine:"			247",
			toLine:"			248",
			content:"
			    @Override
			    public CompletableFuture<Long> getMaxOffset(ProxyContext ctx, MessageQueue messageQueue, long timeoutMillis) {			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			    @Override
			    public CompletableFuture<Long> getMinOffset(ProxyContext ctx, MessageQueue messageQueue, long timeoutMillis) {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			    @Override			
",
,
			fromLine:"			259",
			toLine:"			262",
			content:"
			        long timeoutMillis) {
			        int originalRequestOpaque = request.getOpaque();
			        request.setOpaque(RemotingCommand.createNewRequestId());
			        return this.requestBrokerProcessor.request(ctx, brokerName, request, timeoutMillis).thenApply(r -> {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			    @Override			
",
,
			fromLine:"			270",
			toLine:"			273",
			content:"
			        long timeoutMillis) {
			        int originalRequestOpaque = request.getOpaque();
			        request.setOpaque(RemotingCommand.createNewRequestId());
			        return this.requestBrokerProcessor.requestOneway(ctx, brokerName, request, timeoutMillis).thenApply(r -> {			
",
,
			fromLine:"			279",
			toLine:"			280",
			content:"
			    @Override
			    public void registerProducer(ProxyContext ctx, String producerGroup, ClientChannelInfo clientChannelInfo) {			
",
,
			fromLine:"			284",
			toLine:"			285",
			content:"
			    @Override
			    public void unRegisterProducer(ProxyContext ctx, String producerGroup, ClientChannelInfo clientChannelInfo) {			
",
,
			fromLine:"			289",
			toLine:"			290",
			content:"
			    @Override
			    public Channel findProducerChannel(ProxyContext ctx, String producerGroup, String clientId) {			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			    @Override			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			        Set<SubscriptionData> subList, boolean updateSubscription) {			
",
,
			fromLine:"			306",
			toLine:"			307",
			content:"
			    @Override
			    public ClientChannelInfo findConsumerChannel(ProxyContext ctx, String consumerGroup, Channel channel) {			
",
,
			fromLine:"			311",
			toLine:"			312",
			content:"
			    @Override
			    public void unRegisterConsumer(ProxyContext ctx, String consumerGroup, ClientChannelInfo clientChannelInfo) {			
",
,
			fromLine:"			331",
			toLine:"			332",
			content:"
			    @Override
			    public void addTransactionSubscription(ProxyContext ctx, String producerGroup, String topic) {			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			    @Override			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			        MessageReceiptHandle messageReceiptHandle) {			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			    @Override			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			        String receiptHandle) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Subscription;
			import com.google.protobuf.util.Durations;
			import io.grpc.stub.StreamObserver;
			import java.util.List;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.QueueSelector;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.MessageQueueSelector;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        try {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            try {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			                .exceptionally(t -> {			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        return new ReceiveMessageResponseStreamWriter(			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			64",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.FilterType;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.Settings;
			import com.google.protobuf.Duration;
			import com.google.protobuf.util.Durations;
			import io.grpc.stub.ServerCallStreamObserver;
			import io.grpc.stub.StreamObserver;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.isNull;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			66",
			toLine:"			70",
			content:"
			
			    protected static final String BROKER_NAME = "broker";
			    protected static final String CLUSTER_NAME = "cluster";
			    protected static final String BROKER_ADDR = "127.0.0.1:10911";
			    private static final String TOPIC = "topic";			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			        ConfigurationManager.getProxyConfig().setGrpcClientConsumerMinLongPollingTimeoutMillis(0);
			        this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor,			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        ArgumentCaptor<Long> pollTimeCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            .build());			
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			            ReceiveMessageRequest.newBuilder()
			                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			128",
			content:"
			        final ReceiveMessageRequest request = ReceiveMessageRequest.newBuilder()
			            .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
						
",
,
			fromLine:"			167",
			toLine:"			168",
			content:"
			            ReceiveMessageRequest.newBuilder()
			                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			192",
			toLine:"			193",
			content:"
			            ReceiveMessageRequest.newBuilder()
			                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
						
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			            ReceiveMessageRequest.newBuilder()
			                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			        PopResult popResult = new PopResult(PopStatus.NO_NEW_MSG, new ArrayList<>());			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			            ReceiveMessageRequest.newBuilder()
			                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			            QueueData queueData = new QueueData();			
",
,
			fromLine:"			290",
			toLine:"			291",
			content:"
			            BrokerData brokerData = new BrokerData();
			            brokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			            HashMap<Long, String> brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
						
",
,
			fromLine:"			311",
			toLine:"			312",
			content:"
			            ReceiveMessageActivity.ReceiveMessageQueueSelector selectorBrokerName =
			                new ReceiveMessageActivity.ReceiveMessageQueueSelector(BROKER_NAME + i);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/MessagingProcessor.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import io.netty.channel.Channel;
			import java.time.Duration;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    ) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    ) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    ) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    ) {			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
						
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    ) {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
						
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			    ) {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
						
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
						
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
						
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
						
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
						
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
						
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
						
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
						
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
						
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
						
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
						
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
						
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
						
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQPopClient.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.impl.ClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.header.NotificationRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.test.clientinterface.MQConsumer;
			import org.apache.rocketmq.test.util.RandomUtil;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        String expressionType, String expression) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			91",
			content:"
			        PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setTopic(mq.getTopic());
			        requestHeader.setQueueId(mq.getQueueId());
			        requestHeader.setMaxMsgNums(maxNums);
			        requestHeader.setInvisibleTime(invisibleTime);
			        requestHeader.setInitMode(initMode);
			        requestHeader.setExpType(expressionType);
			        requestHeader.setExp(expression);
			        requestHeader.setOrder(order);
			        requestHeader.setAttemptId(attemptId);
			        if (poll) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			            requestHeader.setBornTime(System.currentTimeMillis());			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        try {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			        requestHeader.setOffset(ExtraInfoUtil.getQueueOffset(extraInfoStrs));
			        requestHeader.setConsumerGroup(consumerGroup);			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        try {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        try {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                }			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        String consumerGroup, String extraInfo, long invisibleTime) {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();			
",
,
			fromLine:"			171",
			toLine:"			173",
			content:"
			        requestHeader.setOffset(ExtraInfoUtil.getQueueOffset(extraInfoStrs));
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setExtraInfo(extraInfo);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        try {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        String consumerGroup, int queueId, long pollTime, long bornTime, long timeoutMillis) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			202",
			toLine:"			209",
			content:"
			        NotificationRequestHeader requestHeader = new NotificationRequestHeader();
			        requestHeader.setConsumerGroup(consumerGroup);
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);
			        requestHeader.setPollTime(pollTime);
			        requestHeader.setBornTime(bornTime);
			        requestHeader.setOrder(order);
			        requestHeader.setAttemptId(attemptId);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/NotificationIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
			
			public class NotificationIT extends BasePop {
			    protected String topic;
			    protected String group;
			    protected RMQNormalProducer producer = null;
			    protected RMQPopClient client = null;
			    protected String brokerAddr;			
",
,
			fromLine:"			45",
			toLine:"			51",
			content:"
			    public void setUp() {
			        brokerAddr = brokerController1.getBrokerAddr();
			        topic = MQRandomUtils.getRandomTopic();
			        group = initConsumerGroup();
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER1_NAME, 8, CQType.SimpleCQ, TopicMessageType.NORMAL);
			        producer = getProducer(NAMESRV_ADDR, topic);
			        client = getRMQPopClient();			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			        long pollTime = 500;
			        CompletableFuture<Boolean> future1 = client.notification(brokerAddr, topic, group, messageQueue.getQueueId(), pollTime, System.currentTimeMillis(), 5000);			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        assertThat(result2).isTrue();			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			        String attemptId = "attemptId";
			        CompletableFuture<Boolean> future1 = client.notification(brokerAddr, topic, group, messageQueue.getQueueId(), true, attemptId, pollTime, System.currentTimeMillis(), 5000);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        assertThat(result1).isTrue();			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        String attemptId2 = "attemptId2";			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			    protected void sendMessage(int num) {
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(Lists.newArrayList(messageQueue), num);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BatchAck.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import org.apache.rocketmq.remoting.protocol.BitSetSerializerDeserializer;
			
			import java.io.Serializable;
			import java.util.BitSet;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    @JSONField(name = "c", alternateNames = {"consumerGroup"})			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @JSONField(name = "t", alternateNames = {"topic"})			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @JSONField(name = "so", alternateNames = {"startOffset"})			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @JSONField(name = "q", alternateNames = {"queueId"})			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @JSONField(name = "rq", alternateNames = {"reviveQueueId"})			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @JSONField(name = "pt", alternateNames = {"popTime"})			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @JSONField(name = "it", alternateNames = {"invisibleTime"})			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public void setStartOffset(long startOffset) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public int getReviveQueueId() {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void setReviveQueueId(int reviveQueueId) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			        return "BatchAck{" +
			                "consumerGroup='" + consumerGroup + '\'' +			
",
,
			fromLine:"			122",
			toLine:"			126",
			content:"
			                ", retry='" + retry + '\'' +
			                ", startOffset=" + startOffset +
			                ", queueId=" + queueId +
			                ", reviveQueueId=" + reviveQueueId +
			                ", popTime=" + popTime +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/NotificationRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			
			    private Boolean order = Boolean.FALSE;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public long getPollTime() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setPollTime(long pollTime) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public long getBornTime() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public void setBornTime(long bornTime) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        }			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public Boolean getOrder() {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public void setOrder(Boolean order) {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public String getAttemptId() {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public void setAttemptId(String attemptId) {			
",
,
			fromLine:"			113",
			toLine:"			119",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)
			            .add("pollTime", pollTime)
			            .add("bornTime", bornTime)
			            .add("order", order)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/PopMessageRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			     */			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setInitMode(int initMode) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public int getInitMode() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public long getPollTime() {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public void setPollTime(long pollTime) {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public long getBornTime() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void setBornTime(long bornTime) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        }			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public int getMaxMsgNums() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void setMaxMsgNums(int maxMsgNums) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public boolean isTimeoutTooMuch() {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public Boolean getOrder() {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			    public void setOrder(Boolean order) {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    public boolean isOrder() {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			    public String getAttemptId() {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			    public void setAttemptId(String attemptId) {			
",
,
			fromLine:"			177",
			toLine:"			184",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)
			            .add("maxMsgNums", maxMsgNums)
			            .add("invisibleTime", invisibleTime)
			            .add("pollTime", pollTime)
			            .add("bornTime", bornTime)			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			            .add("exp", exp)
			            .add("order", order)			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/kv/MessageFetcher.java:
		[
			fromLine:"			17",
			toLine:"			52",
			content:"
			
			package org.apache.rocketmq.store.kv;
			
			import com.google.common.collect.Lists;
			import com.google.common.collect.Sets;
			
			import java.io.IOException;
			import java.util.function.BiFunction;
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			
			    private PullMessageRequestHeader createPullMessageRequest(String topic, int queueId, long queueOffset, long subVersion) {			
",
,
			fromLine:"			73",
			toLine:"			76",
			content:"
			        PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();
			        requestHeader.setConsumerGroup(getConsumerGroup(topic, queueId));
			        requestHeader.setTopic(topic);
			        requestHeader.setQueueId(queueId);			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
						
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			//                requestHeader.setQueueOffset(currentPullOffset);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			                        request = RemotingCommand.createRequestCommand(RequestCode.LITE_PULL_MESSAGE, requestHeader);			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			50",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.AckMessageEntry;
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.AckMessageResponse;
			import apache.rocketmq.v2.AckMessageResultEntry;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Resource;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.processor.BatchAckResult;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.stubbing.Answer;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyList;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        super.before();			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        msg2AckResult.setStatus(AckStatus.OK);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        msg3AckResult.setStatus(AckStatus.NO_EXIST);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			                        .setMessageId(msg1)			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			                        .setMessageId(msg2)			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			                        .setMessageId(msg3)			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			                        .setMessageId(msg1)			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                        .setMessageId(msg2)			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                        .setMessageId(msg3)			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			            return CompletableFuture.completedFuture(batchAckResultList);			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			                        .setMessageId(successMessageId)			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			                        .setMessageId(notOkMessageId)			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			                        .setMessageId(exceptionMessageId)			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			                        .setMessageId(successMessageId)			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			                        .setMessageId(notOkMessageId)			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			                        .setMessageId(exceptionMessageId)			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationResponse;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Resource;
			import com.google.protobuf.util.Durations;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			        super.before();
			        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor,			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        ackResult.setStatus(AckStatus.OK);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                .setMessageId("msgId")			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        ackResult.setStatus(AckStatus.OK);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        )).thenReturn(CompletableFuture.completedFuture(ackResult));			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                .setMessageId("msgId")			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        ackResult.setStatus(AckStatus.NO_EXIST);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                .setMessageId("msgId")			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			                    .setMessageId("msgId")			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			                    .setMessageId("msgId")			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.producer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse;
			import apache.rocketmq.v2.Resource;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        super.before();			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			
			        String savedHandleStr = buildReceiptHandle("topic", System.currentTimeMillis(),3000);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			                .setMessageId(MessageClientIDSetter.createUniqID())			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsManager.java:
		[
			fromLine:"			16",
			toLine:"			112",
			content:"
			 */
			package org.apache.rocketmq.broker.metrics;
			
			import com.google.common.base.Splitter;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.LongCounter;
			import io.opentelemetry.api.metrics.LongHistogram;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongGauge;
			import io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;
			import io.opentelemetry.exporter.prometheus.PrometheusHttpServer;
			import io.opentelemetry.sdk.OpenTelemetrySdk;
			import io.opentelemetry.sdk.metrics.Aggregation;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.SdkMeterProvider;
			import io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;
			import io.opentelemetry.sdk.metrics.View;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import io.opentelemetry.sdk.metrics.data.AggregationTemporality;
			import io.opentelemetry.sdk.metrics.export.MetricExporter;
			import io.opentelemetry.sdk.metrics.export.PeriodicMetricReader;
			import io.opentelemetry.sdk.metrics.internal.SdkMeterProviderUtil;
			import io.opentelemetry.sdk.resources.Resource;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.metrics.NopLongCounter;
			import org.apache.rocketmq.common.metrics.NopLongHistogram;
			import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant;
			import org.slf4j.bridge.SLF4JBridgeHandler;
			
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_COMMIT_MESSAGES_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_CONSUMER_SEND_TO_DLQ_MESSAGES_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_MESSAGES_IN_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_MESSAGES_OUT_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_ROLLBACK_MESSAGES_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_THROUGHPUT_IN_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.COUNTER_THROUGHPUT_OUT_TOTAL;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_BROKER_PERMISSION;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_CONNECTIONS;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_INFLIGHT_MESSAGES;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_LAG_LATENCY;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_LAG_MESSAGES;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_QUEUEING_LATENCY;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_CONSUMER_READY_MESSAGES;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_HALF_MESSAGES;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_PROCESSOR_WATERMARK;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.GAUGE_PRODUCER_CONNECTIONS;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.HISTOGRAM_FINISH_MSG_LATENCY;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.HISTOGRAM_MESSAGE_SIZE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_AGGREGATION;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CLUSTER_NAME;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUME_MODE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_RETRY;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_LANGUAGE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_NODE_ID;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_NODE_TYPE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_PROCESSOR;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_VERSION;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.NODE_TYPE_BROKER;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.OPEN_TELEMETRY_METER_NAME;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_PROTOCOL_TYPE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.PROTOCOL_TYPE_REMOTING;
			
			public class BrokerMetricsManager {			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			
			    private final BrokerConfig brokerConfig;			
",
,
			fromLine:"			162",
			toLine:"			163",
			content:"
			        this.brokerController = brokerController;
			        brokerConfig = brokerController.getBrokerConfig();			
",
,
			fromLine:"			180",
			toLine:"			183",
			content:"
			        AttributesBuilder attributesBuilder = newAttributesBuilder();
			        attributesBuilder.put(LABEL_CONSUMER_GROUP, result.group);
			        attributesBuilder.put(LABEL_TOPIC, result.topic);
			        attributesBuilder.put(LABEL_IS_RETRY, result.isRetry);			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    private boolean checkConfig() {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        }			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			            case OTLP_GRPC:			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			    private void init() {			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			        if (!checkConfig()) {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
						
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			                if (split.length != 2) {			
",
,
			fromLine:"			276",
			toLine:"			277",
			content:"
			        }
			        if (brokerConfig.isMetricsInDelta()) {			
",
,
			fromLine:"			280",
			toLine:"			281",
			content:"
			        LABEL_MAP.put(LABEL_NODE_TYPE, NODE_TYPE_BROKER);
			        LABEL_MAP.put(LABEL_CLUSTER_NAME, brokerConfig.getBrokerClusterName());			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        if (metricsExporterType == MetricsExporterType.OTLP_GRPC) {			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			                .setEndpoint(endpoint)			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			                .setAggregationTemporalitySelector(type -> {			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
						
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			                    if (split.length != 2) {			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			            periodicMetricReader = PeriodicMetricReader.builder(metricExporter)			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			        if (metricsExporterType == MetricsExporterType.PROM) {			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			            if (StringUtils.isBlank(promExporterHost)) {			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			                .setHost(promExporterHost)			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			            SLF4JBridgeHandler.install();			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			            periodicMetricReader = PeriodicMetricReader.builder(loggingMetricExporter)			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			            .build()			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			        // To config the cardinalityLimit for openTelemetry metrics exporting.			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			        // To config the cardinalityLimit for openTelemetry metrics exporting.			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
			            ViewBuilder viewBuilder = selectorViewPair.getObject2();			
",
,
			fromLine:"			409",
			toLine:"			409",
			content:"
						
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			            ViewBuilder viewBuilder = selectorViewPair.getObject2();			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			            ViewBuilder viewBuilder = selectorViewPair.getObject2();			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			        ViewBuilder defaultCounterViewBuilder = View.builder().setDescription("default view for counter.");			
",
,
			fromLine:"			434",
			toLine:"			434",
			content:"
			        ViewBuilder defaultGaugeViewBuilder = View.builder().setDescription("default view for gauge.");			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			            .ofLongs()			
",
,
			fromLine:"			622",
			toLine:"			622",
			content:"
			        RemotingMetricsManager.initMetrics(brokerMeter, BrokerMetricsManager::newAttributesBuilder);			
",
,
			fromLine:"			627",
			toLine:"			627",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			632",
			toLine:"			632",
			content:"
			        }			
",
,
			fromLine:"			636",
			toLine:"			636",
			content:"
			        }			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/protocol/body/BatchAckTest.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import com.alibaba.fastjson.JSON;
			import org.apache.rocketmq.common.MixAll;
			import org.junit.Test;
			
			import java.util.Arrays;
			import java.util.BitSet;
			import java.util.List;
			
			import static org.assertj.core.api.Assertions.assertThat;
			
			public class BatchAckTest {
			    private static String topic = "myTopic";
			    private static String cid = MixAll.DEFAULT_CONSUMER_GROUP;
			    private static long startOffset = 100;			
",
,
			fromLine:"			34",
			toLine:"			35",
			content:"
			    private static int rqId = 2;
			    private static long popTime = System.currentTimeMillis();			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public void testBatchAckSerializerDeserializer() {			
",
,
			fromLine:"			41",
			toLine:"			42",
			content:"
			        BatchAck batchAck = new BatchAck();
			        batchAck.setConsumerGroup(cid);			
",
,
			fromLine:"			44",
			toLine:"			45",
			content:"
			        batchAck.setRetry("0");
			        batchAck.setStartOffset(startOffset);			
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			        batchAck.setReviveQueueId(rqId);
			        batchAck.setPopTime(popTime);			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        for (Long offset : ackOffsetList) {			
",
,
			fromLine:"			56",
			toLine:"			59",
			content:"
			        BatchAck bAck = JSON.parseObject(jsonStr, BatchAck.class);
			        assertThat(bAck.getConsumerGroup()).isEqualTo(cid);
			        assertThat(bAck.getTopic()).isEqualTo(topic);
			        assertThat(bAck.getStartOffset()).isEqualTo(startOffset);			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			        assertThat(bAck.getReviveQueueId()).isEqualTo(rqId);
			        assertThat(bAck.getPopTime()).isEqualTo(popTime);			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        for (int i = 0; i < bAck.getBitSet().length(); i++) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void testWithBatchAckMessageRequestBody() {			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			        BatchAck batchAck = new BatchAck();
			        batchAck.setConsumerGroup(cid);			
",
,
			fromLine:"			80",
			toLine:"			81",
			content:"
			        batchAck.setRetry("0");
			        batchAck.setStartOffset(startOffset);			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			        batchAck.setReviveQueueId(rqId);
			        batchAck.setPopTime(popTime);			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        for (Long offset : ackOffsetList) {			
",
,
			fromLine:"			95",
			toLine:"			98",
			content:"
			        BatchAck bAck = reqBody.getAcks().get(0);
			        assertThat(bAck.getConsumerGroup()).isEqualTo(cid);
			        assertThat(bAck.getTopic()).isEqualTo(topic);
			        assertThat(bAck.getStartOffset()).isEqualTo(startOffset);			
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			        assertThat(bAck.getReviveQueueId()).isEqualTo(rqId);
			        assertThat(bAck.getPopTime()).isEqualTo(popTime);			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        for (int i = 0; i < bAck.getBitSet().length(); i++) {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerRegisterTest.java:
		[
			fromLine:"			17",
			toLine:"			59",
			content:"
			
			package org.apache.rocketmq.broker.controller;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.broker.slave.SlaveSynchronize;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.RunningFlags;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
			import org.apache.rocketmq.store.ha.autoswitch.BrokerMetadata;
			import org.apache.rocketmq.store.ha.autoswitch.TempBrokerMetadata;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mockito;
			import org.powermock.api.mockito.PowerMockito;
			import org.powermock.core.classloader.annotations.PrepareForTest;
			import org.powermock.modules.junit4.PowerMockRunner;
			
			import java.io.File;
			import java.time.Duration;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.UUID;
			
			import static org.awaitility.Awaitility.await;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        MessageStoreConfig config = new MessageStoreConfig();			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public void setUp() throws Exception {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        when(mockedMessageStore.getHaService()).thenReturn(mockedAutoSwitchHAService);			
",
,
			fromLine:"			132",
			toLine:"			135",
			content:"
			
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(new ApplyBrokerIdResponseHeader());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(),  syncStateSet));			
",
,
			fromLine:"			152",
			toLine:"			155",
			content:"
			    public void testBrokerRegisterSuccessAndRestartWithChangedBrokerConfig() throws Exception {
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(new ApplyBrokerIdResponseHeader());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(),  syncStateSet));			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			        ReplicasManager replicasManager = new ReplicasManager(mockedBrokerController);			
",
,
			fromLine:"			204",
			toLine:"			207",
			content:"
			        ReplicasManager replicasManager = new ReplicasManager(mockedBrokerController);
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(new ApplyBrokerIdResponseHeader());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(),  syncStateSet));			
",
,
			fromLine:"			224",
			toLine:"			227",
			content:"
			        ReplicasManager replicasManager = new ReplicasManager(mockedBrokerController);
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenThrow(new RuntimeException());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(),  syncStateSet));			
",
,
			fromLine:"			244",
			toLine:"			247",
			content:"
			        ReplicasManager replicasManager = new ReplicasManager(mockedBrokerController);
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(new ApplyBrokerIdResponseHeader());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(),  syncStateSet));			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			        // because apply brokerId: 1 has succeeded, so now next broker id is 2			
",
,
			fromLine:"			287",
			toLine:"			290",
			content:"
			        ReplicasManager replicasManager = new ReplicasManager(mockedBrokerController);
			        when(mockedBrokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(new GetNextBrokerIdResponseHeader(CLUSTER_NAME, BROKER_NAME, 1L));
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(new ApplyBrokerIdResponseHeader());
			        when(mockedBrokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenThrow(new RuntimeException());			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			        Mockito.reset(mockedBrokerOuterAPI);			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			        // because apply brokerId: 1 has succeeded, so now next broker id is 2			
",
,
			fromLine:"			319",
			toLine:"			320",
			content:"
			        // because apply brokerId: 1 has succeeded, so next request which try to apply brokerId: 1 will be failed
			        when(mockedBrokerOuterAPI.applyBrokerId(any(), any(), eq(1L), any(), any())).thenThrow(new RuntimeException());			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			    public void clear() {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/controller/ReplicasManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.broker.controller;
			
			import com.google.common.collect.Lists;
			import java.io.File;
			import java.lang.reflect.Method;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.UUID;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.broker.slave.SlaveSynchronize;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.RunningFlags;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
			import org.assertj.core.api.Assertions;
			import org.assertj.core.util.Sets;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    @Mock			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    @Mock			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
						
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    public void before() throws Exception {			
",
,
			fromLine:"			136",
			toLine:"			138",
			content:"
			        messageStoreConfig = new MessageStoreConfig();
			        messageStoreConfig.setStorePathRootDir(STORE_PATH);
			        brokerConfig = new BrokerConfig();			
",
,
			fromLine:"			157",
			toLine:"			173",
			content:"
			        when(defaultMessageStore.getMessageStoreConfig()).thenReturn(messageStoreConfig);
			        when(brokerController.getMessageStore()).thenReturn(defaultMessageStore);
			        when(brokerController.getMessageStore().getHaService()).thenReturn(autoSwitchHAService);
			        when(brokerController.getMessageStore().getRunningFlags()).thenReturn(runningFlags);
			        when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);
			        when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);
			        when(brokerController.getSlaveSynchronize()).thenReturn(slaveSynchronize);
			        when(brokerController.getBrokerOuterAPI()).thenReturn(brokerOuterAPI);
			        when(brokerController.getBrokerAddr()).thenReturn(OLD_MASTER_ADDRESS);
			        when(brokerController.getTopicConfigManager()).thenReturn(topicConfigManager);
			        when(brokerOuterAPI.getControllerMetaData(any())).thenReturn(getMetaDataResponseHeader);
			        when(brokerOuterAPI.checkAddressReachable(any())).thenReturn(true);
			        when(brokerOuterAPI.getNextBrokerId(any(), any(), any())).thenReturn(getNextBrokerIdResponseHeader);
			        when(brokerOuterAPI.applyBrokerId(any(), any(), anyLong(), any(), any())).thenReturn(applyBrokerIdResponseHeader);
			        when(brokerOuterAPI.registerBrokerToController(any(), any(), anyLong(), any(), any())).thenReturn(new Pair<>(new RegisterBrokerToControllerResponseHeader(), SYNC_STATE_SET_1));
			        when(brokerOuterAPI.getReplicaInfo(any(), any())).thenReturn(result);
			        when(brokerOuterAPI.brokerElect(any(), any(), any(), any())).thenReturn(new Pair<>(brokerTryElectResponseHeader, SYNC_STATE_SET_1));			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			        replicasManager.shutdown();
			        brokerController.shutdown();			
",
,
			fromLine:"			218",
			toLine:"			219",
			content:"
			        final String controllerAddr = "192.168.1.1";
			        brokerConfig.setFetchControllerAddrByDnsLookup(true);			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        // Simulating dns resolution exceptions			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/ControllerManager.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.controller;
			
			import java.io.IOException;
			import java.util.Map;
			import java.util.Objects;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.Future;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.controller.elect.impl.DefaultElectPolicy;
			import org.apache.rocketmq.controller.impl.DLedgerController;
			import org.apache.rocketmq.controller.impl.JRaftController;
			import org.apache.rocketmq.controller.impl.heartbeat.RaftBrokerHeartBeatManager;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsManager;
			import org.apache.rocketmq.controller.processor.ControllerRequestProcessor;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.Configuration;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.RoleChangeNotifyEntry;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.NotifyBrokerRoleChangedRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
						
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        this.controllerRequestThreadPoolQueue = new LinkedBlockingQueue<>(this.controllerConfig.getControllerRequestThreadPoolQueueCapacity());			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			            }			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			                this.nettyServerConfig, this.nettyClientConfig, this.brokerHousekeepingService,			
",
,
			fromLine:"			130",
			toLine:"			131",
			content:"
			        // Register broker inactive listener
			        this.heartbeatManager.registerBrokerLifecycleListener(this::onBrokerInactive);			
",
,
			fromLine:"			141",
			toLine:"			143",
			content:"
			     *
			     * @param clusterName The cluster name of this inactive broker
			     * @param brokerName  The inactive broker name			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			     */			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        log.info("Controller Manager received broker inactive event, clusterName: {}, brokerName: {}, brokerId: {}",			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        if (controller.isLeaderState()) {			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			                // Means that force triggering election for this broker-set			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			            }			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                if (err != null || replicaInfoResponse == null) {			
",
,
			fromLine:"			162",
			toLine:"			163",
			content:"
			                // Not master broker offline
			                if (!brokerId.equals(replicaInfoResponseHeader.getMasterBrokerId())) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			                // Trigger election			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        } else {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			            final Map<Long, String> brokerAddrs = memberGroup.getBrokerAddrs();			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			            try {			
",
,
			fromLine:"			252",
			toLine:"			263",
			content:"
			        assert controllerRemotingServer != null;
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_ALTER_SYNC_STATE_SET, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_ELECT_MASTER, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_REGISTER_BROKER, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_GET_REPLICA_INFO, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_GET_METADATA_INFO, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_GET_SYNC_STATE_DATA, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.BROKER_HEARTBEAT, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.UPDATE_CONTROLLER_CONFIG, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.GET_CONTROLLER_CONFIG, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CLEAN_BROKER_DATA, controllerRequestProcessor, this.controllerRequestExecutor);
			        controllerRemotingServer.registerProcessor(RequestCode.CONTROLLER_GET_NEXT_BROKER_ID, controllerRequestProcessor, this.controllerRequestExecutor);			
",
,

		],
		controller/src/test/java/org/apache/rocketmq/controller/ControllerManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.controller;
			
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.controller.impl.DLedgerController;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.io.File;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.UUID;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			
			    public ControllerManager launchManager(final String group, final String peers, final String selfId) {			
",
,
			fromLine:"			70",
			toLine:"			72",
			content:"
			        final ControllerConfig config = new ControllerConfig();
			        config.setControllerDLegerGroup(group);
			        config.setControllerDLegerPeers(peers);			
",
,
			fromLine:"			123",
			toLine:"			125",
			content:"
			        String peers = String.format("n0-localhost:%d;n1-localhost:%d;n2-localhost:%d", 30000, 30001, 30002);
			        launchManager(group, peers, "n0");
			        launchManager(group, peers, "n1");			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			     */			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        // Get next brokerId;			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        final RemotingCommand getNextBrokerIdRequest = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_NEXT_BROKER_ID, getNextBrokerIdRequestHeader);			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        final GetNextBrokerIdResponseHeader getNextBrokerIdResponseHeader = (GetNextBrokerIdResponseHeader) getNextBrokerIdResponse.decodeCommandCustomHeader(GetNextBrokerIdResponseHeader.class);			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        assertEquals(ResponseCode.SUCCESS, getNextBrokerIdResponse.getCode());			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        // Apply brokerId			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        final RemotingCommand applyBrokerIdRequest = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_APPLY_BROKER_ID, applyBrokerIdRequestHeader);			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        // Register success			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        final RemotingCommand registerSuccessRequest = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_REGISTER_BROKER, registerBrokerToControllerRequestHeader);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        final String brokerName, final Long brokerId, final RemotingClient client) throws Exception {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, requestHeader);			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
						
",
,
			fromLine:"			173",
			toLine:"			176",
			content:"
			        final BrokerHeartbeatRequestHeader heartbeatRequestHeader0 = new BrokerHeartbeatRequestHeader();
			        heartbeatRequestHeader0.setBrokerId(brokerId);
			        heartbeatRequestHeader0.setClusterName(clusterName);
			        heartbeatRequestHeader0.setBrokerName(brokerName);			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        final RemotingCommand heartbeatRequest = RemotingCommand.createRequestCommand(RequestCode.BROKER_HEARTBEAT, heartbeatRequestHeader0);			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        // Register two broker			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			        // Send heartbeat
			        sendHeartbeat(leaderAddr, "cluster1", "broker1", 1L, "127.0.0.1:8000", 3000L, remotingClient);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        // Two all try elect itself as master, but only the first can be the master			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        ElectMasterResponseHeader brokerTryElectResponseHeader1 = (ElectMasterResponseHeader) tryElectCommand1.decodeCommandCustomHeader(ElectMasterResponseHeader.class);			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			            try {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			            final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_REPLICA_INFO, requestHeader);			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/elect/ElectPolicy.java:
		[
			fromLine:"			16",
			toLine:"			20",
			content:"
			 */
			package org.apache.rocketmq.controller.elect;
			
			import java.util.Set;
						
",
,
			fromLine:"			25",
			toLine:"			26",
			content:"
			     *
			     * @param clusterName       the broker group belongs to			
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			     * @param allReplicaBrokers all broker replicas
			     * @param oldMaster         old master			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			     */			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/manager/ReplicasInfoManager.java:
		[
			fromLine:"			16",
			toLine:"			71",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.manager;
			
			import com.caucho.hessian.io.Hessian2Input;
			import com.caucho.hessian.io.Hessian2Output;
			import com.caucho.hessian.io.SerializerFactory;
			import java.io.ByteArrayInputStream;
			import java.io.IOException;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.elect.ElectPolicy;
			import org.apache.rocketmq.controller.helper.BrokerValidPredicate;
			import org.apache.rocketmq.controller.impl.event.AlterSyncStateSetEvent;
			import org.apache.rocketmq.controller.impl.event.ApplyBrokerIdEvent;
			import org.apache.rocketmq.controller.impl.event.CleanBrokerDataEvent;
			import org.apache.rocketmq.controller.impl.event.ControllerResult;
			import org.apache.rocketmq.controller.impl.event.ElectMasterEvent;
			import org.apache.rocketmq.controller.impl.event.EventMessage;
			import org.apache.rocketmq.controller.impl.event.EventType;
			import org.apache.rocketmq.controller.impl.event.UpdateBrokerAddressEvent;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
			
			import java.io.ByteArrayOutputStream;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.stream.Collectors;
			import java.util.stream.Stream;
						
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			            }			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			            Long assignedBrokerId = request.getDesignateElect() ? brokerId : null;			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			        }			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
			                brokerReplicaInfo.getBrokerIdTable().forEach((brokerId, brokerAddress) -> {			
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			                for (Long brokerId : brokerIdSet) {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			            // Now master is inactive			
",
,
			fromLine:"			476",
			toLine:"			476",
			content:"
			                Set<Long> brokerIds = this.replicaInfoTable.get(brokerName).getBrokerIdTable().keySet();			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/helper/BrokerLifecycleListener.java:
		[
			fromLine:"			17",
			toLine:"			19",
			content:"
			
			package org.apache.rocketmq.controller.helper;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
			     */			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerController.java:
		[
			fromLine:"			16",
			toLine:"			83",
			content:"
			 */
			package org.apache.rocketmq.controller.impl;
			
			import com.google.common.base.Stopwatch;
			import io.openmessaging.storage.dledger.AppendFuture;
			import io.openmessaging.storage.dledger.DLedgerConfig;
			import io.openmessaging.storage.dledger.DLedgerLeaderElector;
			import io.openmessaging.storage.dledger.DLedgerServer;
			import io.openmessaging.storage.dledger.MemberState;
			import io.openmessaging.storage.dledger.protocol.AppendEntryRequest;
			import io.openmessaging.storage.dledger.protocol.AppendEntryResponse;
			import io.openmessaging.storage.dledger.protocol.BatchAppendEntryRequest;
			import io.opentelemetry.api.common.AttributesBuilder;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.TimeoutException;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.function.Supplier;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.controller.Controller;
			import org.apache.rocketmq.controller.elect.ElectPolicy;
			import org.apache.rocketmq.controller.elect.impl.DefaultElectPolicy;
			import org.apache.rocketmq.controller.helper.BrokerLifecycleListener;
			import org.apache.rocketmq.controller.helper.BrokerValidPredicate;
			import org.apache.rocketmq.controller.impl.event.ControllerResult;
			import org.apache.rocketmq.controller.impl.event.EventMessage;
			import org.apache.rocketmq.controller.impl.event.EventSerializer;
			import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsConstant;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_BROKER_SET;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_CLUSTER_NAME;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_DLEDGER_OPERATION;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_DLEDGER_OPERATION_STATUS;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_ELECTION_RESULT;
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    private final DLedgerConfig dLedgerConfig;			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    private final EventScheduler scheduler;			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        this.controllerConfig = controllerConfig;			
",
,
			fromLine:"			131",
			toLine:"			132",
			content:"
			        this.roleHandler = new RoleChangeHandler(dLedgerConfig.getSelfId());
			        this.replicasInfoManager = new ReplicasInfoManager(controllerConfig);			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        if (this.isScheduling.compareAndSet(false, true)) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        if (this.isScheduling.compareAndSet(true, false)) {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        return this.scheduler.appendEvent("alterSyncStateSet",			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			            () -> {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			                AttributesBuilder attributesBuilder = ControllerMetricsManager.newAttributesBuilder()			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    public CompletableFuture<RemotingCommand> getNextBrokerId(GetNextBrokerIdRequestHeader request) {			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			    public CompletableFuture<RemotingCommand> applyBrokerId(ApplyBrokerIdRequestHeader request) {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			    public CompletableFuture<RemotingCommand> registerBroker(RegisterBrokerToControllerRequestHeader request) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        return this.scheduler.appendEvent("getReplicaInfo",			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        return this.scheduler.appendEvent("getSyncStateData",			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			        return this.scheduler.appendEvent("cleanBrokerData",			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			        }			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			            // Notify ControllerManager			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
			        public void run() {			
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
						
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			                } catch (final InterruptedException e) {			
",
,
			fromLine:"			433",
			toLine:"			434",
			content:"
			    class ControllerEventHandler<T> implements EventHandler<T> {
			        private final String name;			
",
,
			fromLine:"			436",
			toLine:"			436",
			content:"
			        private final CompletableFuture<RemotingCommand> future;			
",
,
			fromLine:"			440",
			toLine:"			441",
			content:"
			            final boolean isWriteEvent) {
			            this.name = name;			
",
,
			fromLine:"			443",
			toLine:"			443",
			content:"
			            this.future = new CompletableFuture<>();			
",
,
			fromLine:"			448",
			toLine:"			449",
			content:"
			        public void run() throws Throwable {
			            final ControllerResult<T> result = this.supplier.get();			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
						
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
			                    if (event != null) {			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
			            } else {			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			        public void handleException(final Throwable t) {			
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
			                        this.currentRole = MemberState.Role.CANDIDATE;			
",
,
			fromLine:"			536",
			toLine:"			536",
			content:"
			                        this.currentRole = MemberState.Role.FOLLOWER;			
",
,
			fromLine:"			541",
			toLine:"			541",
			content:"
			                    case LEADER: {			
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			                            } catch (final Throwable e) {			
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			                                // now is not a leader			
",
,
			fromLine:"			571",
			toLine:"			571",
			content:"
			                            tryTimes++;			
",
,
			fromLine:"			573",
			toLine:"			573",
			content:"
			                            if (tryTimes % 3 == 0) {			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/helper/BrokerLiveInfoGetter.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.controller.helper;
			
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerLiveInfo;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
						
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/elect/impl/DefaultElectPolicy.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.controller.elect.impl;
			
			import org.apache.rocketmq.controller.elect.ElectPolicy;
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerLiveInfo;
			import org.apache.rocketmq.controller.helper.BrokerLiveInfoGetter;
			import org.apache.rocketmq.controller.helper.BrokerValidPredicate;
			
			import java.util.Comparator;
			import java.util.Set;
			import java.util.TreeSet;
			import java.util.stream.Collectors;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			     *			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			     * @param allReplicaBrokers all broker replicas
			     * @param oldMaster         old master's broker id			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    @Override			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        if (syncStateBrokers != null) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        if (allReplicaBrokers != null) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        if (this.validPredicate != null) {			
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			            // if old master is still valid, and preferBrokerAddr is blank or is equals to oldMaster
			            if (brokers.contains(oldMaster) && (preferBrokerId == null || preferBrokerId.equals(oldMaster))) {			
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			            // if preferBrokerAddr is valid, we choose it, otherwise we choose nothing
			            if (preferBrokerId != null) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                TreeSet<BrokerLiveInfo> brokerLiveInfos = new TreeSet<>(this.comparator);			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/helper/BrokerValidPredicate.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.controller.helper;
						
",
,
			fromLine:"			20",
			toLine:"			20",
			content:"
						
",
,

		],
		controller/src/test/java/org/apache/rocketmq/controller/impl/DLedgerControllerTest.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.controller.impl;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.controller.Controller;
			import org.apache.rocketmq.controller.elect.impl.DefaultElectPolicy;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.io.File;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.stream.Collectors;
			
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_BROKER_NAME;
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_CLUSTER_NAME;
			import static org.apache.rocketmq.controller.ControllerTestBase.DEFAULT_IP;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertArrayEquals;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        String tmpdir = System.getProperty("java.io.tmpdir");			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			        final ControllerConfig config = new ControllerConfig();
			        config.setControllerDLegerGroup(group);
			        config.setControllerDLegerPeers(peers);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			        // Get next brokerId
			        final GetNextBrokerIdRequestHeader getNextBrokerIdRequest = new GetNextBrokerIdRequestHeader(clusterName, brokerName);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        Long nextBrokerId = getNextBrokerIdResp.getNextBrokerId();			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			        // Apply brokerId
			        final ApplyBrokerIdRequestHeader applyBrokerIdRequestHeader = new ApplyBrokerIdRequestHeader(clusterName, brokerName, nextBrokerId, registerCheckCode);			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			        // Register success
			        final RegisterBrokerToControllerRequestHeader registerBrokerToControllerRequestHeader = new RegisterBrokerToControllerRequestHeader(clusterName, brokerName, nextBrokerId, brokerAddress);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			130",
			toLine:"			131",
			content:"
			        boolean exceptSuccess) throws Exception {
			        final ElectMasterRequestHeader electMasterRequestHeader = ElectMasterRequestHeader.ofBrokerTrigger(clusterName, brokerName, brokerId);			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			139",
			toLine:"			140",
			content:"
			        final AlterSyncStateSetRequestHeader alterRequest =
			            new AlterSyncStateSetRequestHeader(brokerName, masterBrokerId, masterEpoch);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        }			
",
,
			fromLine:"			147",
			toLine:"			148",
			content:"
			        final SyncStateSet syncStateSet = RemotingSerializable.decode(getInfoResponse.getBody(), SyncStateSet.class);
			        assertArrayEquals(syncStateSet.getSyncStateSet().toArray(), newSyncStateSet.toArray());			
",
,
			fromLine:"			175",
			toLine:"			177",
			content:"
			        String peers = String.format("n0-localhost:%d;n1-localhost:%d;n2-localhost:%d", 30000, 30001, 30002);
			        DLedgerController c0 = launchController(group, peers, "n0", enableElectUncleanMaster);
			        DLedgerController c1 = launchController(group, peers, "n1", enableElectUncleanMaster);			
",
,
			fromLine:"			185",
			toLine:"			187",
			content:"
			        // register
			        registerNewBroker(leader, DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[0], 1L);
			        registerNewBroker(leader, DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[1], 2L);			
",
,
			fromLine:"			189",
			toLine:"			191",
			content:"
			        // try elect
			        brokerTryElectMaster(leader, DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[0], 1L, true);
			        brokerTryElectMaster(leader, DEFAULT_CLUSTER_NAME, DEFAULT_BROKER_NAME, DEFAULT_IP[1], 2L, false);			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        newSyncStateSet.add(3L);			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			                ControllerConfig config = controller.getControllerConfig();			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
						
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			        final ElectMasterRequestHeader request1 =			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			        final ElectMasterRequestHeader request2 =			
",
,
			fromLine:"			342",
			toLine:"			342",
			content:"
						
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/manager/RaftReplicasInfoManager.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.manager;
			
			import com.alibaba.fastjson.JSON;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.helper.BrokerValidPredicate;
			import org.apache.rocketmq.controller.impl.event.ControllerResult;
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerIdentityInfo;
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerLiveInfo;
			import org.apache.rocketmq.controller.impl.task.BrokerCloseChannelRequest;
			import org.apache.rocketmq.controller.impl.task.BrokerCloseChannelResponse;
			import org.apache.rocketmq.controller.impl.task.CheckNotActiveBrokerRequest;
			import org.apache.rocketmq.controller.impl.task.CheckNotActiveBrokerResponse;
			import org.apache.rocketmq.controller.impl.task.GetBrokerLiveInfoRequest;
			import org.apache.rocketmq.controller.impl.task.GetBrokerLiveInfoResponse;
			import org.apache.rocketmq.controller.impl.task.RaftBrokerHeartBeatEventRequest;
			import org.apache.rocketmq.controller.impl.task.RaftBrokerHeartBeatEventResponse;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			
			import java.io.ByteArrayOutputStream;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.stream.Collectors;
						
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			            public boolean check(String clusterName, String brokerName, Long brokerId) {			
",
,
			fromLine:"			150",
			toLine:"			151",
			content:"
			
			    public boolean isBrokerActive(String clusterName, String brokerName, Long brokerId, long invokeTime) {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			            long timeoutMillis = info.getHeartbeatTimeoutMillis();			
",
,
			fromLine:"			160",
			toLine:"			161",
			content:"
			
			    public BrokerLiveInfo getBrokerLiveInfo(String clusterName, String brokerName, Long brokerId) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        public boolean check(String clusterName, String brokerName, Long brokerId) {			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/JRaftControllerStateMachine.java:
		[
			fromLine:"			16",
			toLine:"			77",
			content:"
			 */
			package org.apache.rocketmq.controller.impl;
			
			import com.alipay.sofa.jraft.Closure;
			import com.alipay.sofa.jraft.Iterator;
			import com.alipay.sofa.jraft.StateMachine;
			import com.alipay.sofa.jraft.Status;
			import com.alipay.sofa.jraft.conf.Configuration;
			import com.alipay.sofa.jraft.entity.LeaderChangeContext;
			import com.alipay.sofa.jraft.entity.NodeId;
			import com.alipay.sofa.jraft.error.RaftError;
			import com.alipay.sofa.jraft.error.RaftException;
			import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;
			import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;
			import com.alipay.sofa.jraft.util.Utils;
			import io.opentelemetry.api.common.AttributesBuilder;
			import org.apache.commons.io.FileUtils;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.elect.impl.DefaultElectPolicy;
			import org.apache.rocketmq.controller.impl.closure.ControllerClosure;
			import org.apache.rocketmq.controller.impl.event.ControllerResult;
			import org.apache.rocketmq.controller.impl.manager.RaftReplicasInfoManager;
			import org.apache.rocketmq.controller.impl.task.BrokerCloseChannelRequest;
			import org.apache.rocketmq.controller.impl.task.CheckNotActiveBrokerRequest;
			import org.apache.rocketmq.controller.impl.task.GetBrokerLiveInfoRequest;
			import org.apache.rocketmq.controller.impl.task.GetSyncStateDataRequest;
			import org.apache.rocketmq.controller.impl.task.RaftBrokerHeartBeatEventRequest;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsConstant;
			import org.apache.rocketmq.controller.metrics.ControllerMetricsManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.admin.CleanControllerBrokerDataRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
			
			import java.io.File;
			import java.io.IOException;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.function.Consumer;
			
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_BROKER_SET;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_CLUSTER_NAME;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_ELECTION_RESULT;
						
",
,
			fromLine:"			188",
			toLine:"			189",
			content:"
			        ControllerResult<ElectMasterResponseHeader> electResult = this.replicasInfoManager.electMaster(request, new DefaultElectPolicy(
			            (clusterName, brokerName, brokerId) -> replicasInfoManager.isBrokerActive(clusterName, brokerName, brokerId, request.getInvokeTime()),			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        AttributesBuilder attributesBuilder = ControllerMetricsManager.newAttributesBuilder()			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/ElectMasterRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.controller;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public ElectMasterRequestHeader(String brokerName) {			
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			    public ElectMasterRequestHeader(String clusterName, String brokerName, Long brokerId) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			66",
			toLine:"			68",
			content:"
			    public ElectMasterRequestHeader(String clusterName, String brokerName, Long brokerId, boolean designateElect) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        Long brokerId) {			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			
			    public static ElectMasterRequestHeader ofAdminTrigger(String clusterName, String brokerName, Long brokerId) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			124",
			toLine:"			126",
			content:"
			        return "ElectMasterRequestHeader{" +
			                "clusterName='" + clusterName + '\'' +
			                ", brokerName='" + brokerName + '\'' +			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/BrokerMetadata.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import org.apache.commons.lang3.StringUtils;
			
			import java.util.Objects;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			38",
			content:"
			
			    public void updateAndPersist(String clusterName, String brokerName, Long brokerId) throws Exception {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			        StringBuilder sb = new StringBuilder();
			        sb.append(clusterName).append("#");
			        sb.append(brokerName).append("#");			
",
,
			fromLine:"			55",
			toLine:"			57",
			content:"
			        String[] dataArr = dataStr.split("#");
			        this.clusterName = dataArr[0];
			        this.brokerName = dataArr[1];			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public boolean isLoaded() {			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			    public void clearInMem() {
			        this.clusterName = null;
			        this.brokerName = null;			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        BrokerMetadata that = (BrokerMetadata) o;			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			100",
			toLine:"			102",
			content:"
			        return "BrokerMetadata{" +
			                "clusterName='" + clusterName + '\'' +
			                ", brokerName='" + brokerName + '\'' +			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/TempBrokerMetadata.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import org.apache.commons.lang3.StringUtils;
						
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			        super(filePath);
			        super.clusterName = clusterName;
			        super.brokerId = brokerId;			
",
,
			fromLine:"			37",
			toLine:"			41",
			content:"
			
			    public void updateAndPersist(String clusterName, String brokerName, Long brokerId, String registerCheckCode) throws Exception {
			        super.clusterName = clusterName;
			        super.brokerName = brokerName;
			        super.brokerId = brokerId;			
",
,
			fromLine:"			48",
			toLine:"			50",
			content:"
			        StringBuilder sb = new StringBuilder();
			        sb.append(clusterName).append("#");
			        sb.append(brokerName).append("#");			
",
,
			fromLine:"			59",
			toLine:"			61",
			content:"
			        String[] dataArr = dataStr.split("#");
			        this.clusterName = dataArr[0];
			        this.brokerName = dataArr[1];			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			88",
			toLine:"			90",
			content:"
			                "registerCheckCode='" + registerCheckCode + '\'' +
			                ", clusterName='" + clusterName + '\'' +
			                ", brokerName='" + brokerName + '\'' +			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/controller/ReElectMasterSubCommand.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.tools.command.controller;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/event/UpdateBrokerAddressEvent.java:
		[
			fromLine:"			17",
			toLine:"			19",
			content:"
			
			package org.apache.rocketmq.controller.impl.event;
						
",
,
			fromLine:"			21",
			toLine:"			21",
			content:"
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			33",
			content:"
			    public UpdateBrokerAddressEvent(String clusterName, String brokerName, String brokerAddress, Long brokerId) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;
			        this.brokerAddress = brokerAddress;			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public String getBrokerAddress() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			55",
			toLine:"			58",
			content:"
			        return "UpdateBrokerAddressEvent{" +
			            "clusterName='" + clusterName + '\'' +
			            ", brokerName='" + brokerName + '\'' +
			            ", brokerAddress='" + brokerAddress + '\'' +			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/heartbeat/BrokerIdentityInfo.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.heartbeat;
			
			import java.io.Serializable;
			import org.apache.rocketmq.common.UtilAll;
			
			import java.util.Objects;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    private static final long serialVersionUID = 883597359635995567L;			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			    public BrokerIdentityInfo(String clusterName, String brokerName, Long brokerId) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public boolean isEmpty() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			            BrokerIdentityInfo addr = (BrokerIdentityInfo) obj;			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			78",
			toLine:"			80",
			content:"
			        return "BrokerIdentityInfo{" +
			            "clusterName='" + clusterName + '\'' +
			            ", brokerName='" + brokerName + '\'' +			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/task/BrokerCloseChannelRequest.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.task;
			
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerIdentityInfo;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    @CFNullable			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @CFNullable			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNullable			
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			    public BrokerCloseChannelRequest() {
			        this.clusterName = null;
			        this.brokerName = null;			
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			    public BrokerCloseChannelRequest(BrokerIdentityInfo brokerIdentityInfo) {
			        this.clusterName = brokerIdentityInfo.getClusterName();
			        this.brokerName = brokerIdentityInfo.getBrokerName();			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public BrokerIdentityInfo getBrokerIdentityInfo() {			
",
,
			fromLine:"			50",
			toLine:"			52",
			content:"
			    public void setBrokerIdentityInfo(BrokerIdentityInfo brokerIdentityInfo) {
			        this.clusterName = brokerIdentityInfo.getClusterName();
			        this.brokerName = brokerIdentityInfo.getBrokerName();			
",
,
			fromLine:"			63",
			toLine:"			65",
			content:"
			        return "BrokerCloseChannelRequest{" +
			            "clusterName='" + clusterName + '\'' +
			            ", brokerName='" + brokerName + '\'' +			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/task/GetBrokerLiveInfoRequest.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.task;
			
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerIdentityInfo;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			
			public class GetBrokerLiveInfoRequest implements CommandCustomHeader {			
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			32",
			content:"
			    public GetBrokerLiveInfoRequest() {
			        this.clusterName = null;
			        this.brokerName = null;			
",
,
			fromLine:"			39",
			toLine:"			41",
			content:"
			    public GetBrokerLiveInfoRequest(BrokerIdentityInfo brokerIdentity) {
			        this.clusterName = brokerIdentity.getClusterName();
			        this.brokerName = brokerIdentity.getBrokerName();			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public BrokerIdentityInfo getBrokerIdentity() {			
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			    public void setBrokerIdentity(BrokerIdentityInfo brokerIdentity) {
			        this.clusterName = brokerIdentity.getClusterName();
			        this.brokerName = brokerIdentity.getBrokerName();			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/task/RaftBrokerHeartBeatEventRequest.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.task;
			
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerIdentityInfo;
			import org.apache.rocketmq.controller.impl.heartbeat.BrokerLiveInfo;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			32",
			toLine:"			35",
			content:"
			    // brokerLiveInfo
			    private String brokerName;
			    private String brokerAddr;
			    private Long heartbeatTimeoutMillis;			
",
,
			fromLine:"			37",
			toLine:"			40",
			content:"
			    private Long lastUpdateTimestamp;
			    private Integer epoch;
			    private Long maxOffset;
			    private Long confirmOffset;			
",
,
			fromLine:"			50",
			toLine:"			53",
			content:"
			
			        this.brokerName = brokerLiveInfo.getBrokerName();
			        this.brokerAddr = brokerLiveInfo.getBrokerAddr();
			        this.heartbeatTimeoutMillis = brokerLiveInfo.getHeartbeatTimeoutMillis();			
",
,
			fromLine:"			55",
			toLine:"			58",
			content:"
			        this.lastUpdateTimestamp = brokerLiveInfo.getLastUpdateTimestamp();
			        this.epoch = brokerLiveInfo.getEpoch();
			        this.maxOffset = brokerLiveInfo.getMaxOffset();
			        this.confirmOffset = brokerLiveInfo.getConfirmOffset();			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public BrokerLiveInfo getBrokerLiveInfo() {			
",
,
			fromLine:"			76",
			toLine:"			79",
			content:"
			    public void setBrokerLiveInfo(BrokerLiveInfo brokerLiveInfo) {
			        this.brokerName = brokerLiveInfo.getBrokerName();
			        this.brokerAddr = brokerLiveInfo.getBrokerAddr();
			        this.heartbeatTimeoutMillis = brokerLiveInfo.getHeartbeatTimeoutMillis();			
",
,
			fromLine:"			81",
			toLine:"			84",
			content:"
			        this.lastUpdateTimestamp = brokerLiveInfo.getLastUpdateTimestamp();
			        this.epoch = brokerLiveInfo.getEpoch();
			        this.maxOffset = brokerLiveInfo.getMaxOffset();
			        this.confirmOffset = brokerLiveInfo.getConfirmOffset();			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/register/RegisterBrokerToControllerRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.controller.register;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			49",
			content:"
			    public RegisterBrokerToControllerRequestHeader(String clusterName, String brokerName, Long brokerId, String brokerAddress) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;
			        this.brokerId = brokerId;
			        this.brokerAddress = brokerAddress;			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public long getInvokeTime() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setInvokeTime(long invokeTime) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public Long getBrokerId() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public String getBrokerAddress() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setBrokerId(Long brokerId) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setBrokerAddress(String brokerAddress) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/util/HookUtils.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.broker.util;
			
			import java.util.Iterator;
			import java.util.List;
			import java.util.Optional;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.schedule.ScheduleMessageService;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
						
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			                msg.setWaitStoreMsgOK(false);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataService.java:
		[
			fromLine:"			17",
			toLine:"			51",
			content:"
			
			package org.apache.rocketmq.proxy.service.metadata;
			
			import com.google.common.cache.CacheBuilder;
			import com.google.common.cache.LoadingCache;
			import java.util.List;
			import java.util.Optional;
			import java.util.Random;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.broker.auth.converter.AclConverter;
			import org.apache.rocketmq.broker.auth.converter.UserConverter;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.AbstractCacheLoader;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.body.AclInfo;
			import org.apache.rocketmq.remoting.protocol.body.UserInfo;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        ProxyConfig config = ConfigurationManager.getProxyConfig();			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			                String brokerAddress = brokerDataOptional.get().selectBrokerAddr();			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			                String brokerAddress = brokerDataOptional.get().selectBrokerAddr();			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			                String brokerAddress = brokerDataOptional.get().selectBrokerAddr();			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			                String brokerAddress = brokerDataOptional.get().selectBrokerAddr();			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/metadata/ClusterMetadataServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.proxy.service.metadata;
			
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Optional;
			import java.util.Set;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        super.before();			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        topicConfigAndQueueMapping.setTopicMessageType(TopicMessageType.NORMAL);			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        brokerData2.setBrokerAddrs(addrs);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        topicRouteData.getBrokerDatas().add(brokerData2);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        ProxyContext ctx = ProxyContext.create();			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            try {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/mqclient/MQClientAPIExt.java:
		[
			fromLine:"			16",
			toLine:"			84",
			content:"
			 */
			package org.apache.rocketmq.client.impl.mqclient;
			
			import java.nio.ByteBuffer;
			import java.util.Collections;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.OffsetNotFoundException;
			import org.apache.rocketmq.client.impl.ClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.admin.MqClientAdminImpl;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.HeartbeatRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotificationRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.NotificationResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			120",
			toLine:"			121",
			content:"
			            request.setLanguage(clientConfig.getLanguage());
			            request.setBody(heartbeatData.encode());			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        request.setLanguage(clientConfig.getLanguage());			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
						
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			            } else {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			    ) {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			            try {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			    ) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        try {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			            request.setBody(body);			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			                try {			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONSUMER_SEND_MSG_BACK, requestHeader);			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			        try {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        try {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
						
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        try {			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			                }			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
						
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			        try {			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        try {			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			                            if (PullStatus.FOUND.equals(pullResult.getPullStatus())) {			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_CONSUMER_OFFSET, requestHeader);			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_CONSUMER_OFFSET, header);			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			        try {			
",
,
			fromLine:"			459",
			toLine:"			459",
			content:"
			        try {			
",
,
			fromLine:"			495",
			toLine:"			495",
			content:"
			        try {			
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
						
",
,
			fromLine:"			549",
			toLine:"			549",
			content:"
			        request.setBody(requestBody.encode());			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			        try {			
",
,
			fromLine:"			583",
			toLine:"			583",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.NOTIFICATION, requestHeader);			
",
,
			fromLine:"			599",
			toLine:"			600",
			content:"
			
			    public CompletableFuture<RemotingCommand> invoke(String brokerAddr, RemotingCommand request, long timeoutMillis) {			
",
,
			fromLine:"			603",
			toLine:"			603",
			content:"
						
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
			        try {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.message;
			
			import com.google.common.collect.Lists;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    @Override			
",
,
			fromLine:"			66",
			toLine:"			68",
			content:"
			        if (msgList.size() == 1) {
			            future = this.mqClientAPIFactory.getClient().sendMessageAsync(
			                    messageQueue.getBrokerAddr(),			
",
,
			fromLine:"			71",
			toLine:"			73",
			content:"
			        } else {
			            future = this.mqClientAPIFactory.getClient().sendMessageAsync(
			                    messageQueue.getBrokerAddr(),			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    @Override			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        return this.mqClientAPIFactory.getClient().sendMessageBackAsync(			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            requestHeader,			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    @Override			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			            this.mqClientAPIFactory.getClient().endTransactionOneway(			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			                "end transaction from proxy",			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    @Override			
",
,
			fromLine:"			111",
			toLine:"			113",
			content:"
			        PopMessageRequestHeader requestHeader, long timeoutMillis) {
			        return this.mqClientAPIFactory.getClient().popMessageAsync(
			            messageQueue.getBrokerAddr(),			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			            requestHeader,			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    @Override			
",
,
			fromLine:"			122",
			toLine:"			124",
			content:"
			        ChangeInvisibleTimeRequestHeader requestHeader, long timeoutMillis) {
			        return this.mqClientAPIFactory.getClient().changeInvisibleTimeAsync(
			            this.resolveBrokerAddrInReceiptHandle(ctx, handle),			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			            requestHeader,			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    @Override			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        return this.mqClientAPIFactory.getClient().ackMessageAsync(			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			            requestHeader,			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    @Override			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        List<String> extraInfoList = handleList.stream().map(message -> message.getReceiptHandle().getReceiptHandle()).collect(Collectors.toList());			
",
,
			fromLine:"			146",
			toLine:"			147",
			content:"
			            this.resolveBrokerAddrInReceiptHandle(ctx, handleList.get(0).getReceiptHandle()),
			            topic,			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			            extraInfoList,			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    @Override			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        return this.mqClientAPIFactory.getClient().pullMessageAsync(			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			            requestHeader,			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    @Override			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        return this.mqClientAPIFactory.getClient().queryConsumerOffsetWithFuture(			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			            requestHeader,			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    @Override			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        return this.mqClientAPIFactory.getClient().updateConsumerOffsetOneWay(			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			            requestHeader,			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    @Override			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			        return this.mqClientAPIFactory.getClient().lockBatchMQWithFuture(			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			            requestBody,			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			    @Override			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			        return this.mqClientAPIFactory.getClient().unlockBatchMQOneway(			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			            requestBody,			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    @Override			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			        return this.mqClientAPIFactory.getClient().getMaxOffset(			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			            requestHeader,			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    @Override			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			        return this.mqClientAPIFactory.getClient().getMinOffset(			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            requestHeader,			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    @Override			
",
,
			fromLine:"			227",
			toLine:"			228",
			content:"
			        try {
			            String brokerAddress = topicRouteService.getBrokerAddr(ctx, brokerName);			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			    @Override			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			        try {
			            String brokerAddress = topicRouteService.getBrokerAddr(ctx, brokerName);			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/mqclient/MQClientAPIExtTest.java:
		[
			fromLine:"			17",
			toLine:"			90",
			content:"
			
			package org.apache.rocketmq.proxy.service.mqclient;
			
			import java.lang.reflect.Field;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ThreadLocalRandom;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.mqclient.DoNothingClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.doReturn;
						
",
,
			fromLine:"			93",
			toLine:"			94",
			content:"
			
			    private static final String BROKER_ADDR = "127.0.0.1:10911";			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			    private static final long TIMEOUT = 3000;
			    private static final String CONSUMER_GROUP = "group";			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        future.complete(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, ""));			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        future.complete(response);			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        future.complete(response);			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
						
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        future.complete(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, ""));			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			            return null;			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
						
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			            return null;			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
						
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			            return null;			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
						
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			            return null;			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			            return null;			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
						
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			            return null;			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
						
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			            return null;			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
						
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			            return null;			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			        GetMaxOffsetRequestHeader requestHeader = new GetMaxOffsetRequestHeader();			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			        requestHeader.setQueueId(0);			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
						
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			        SearchOffsetRequestHeader requestHeader = new SearchOffsetRequestHeader();			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			        requestHeader.setTimestamp(System.currentTimeMillis());			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/mqclient/MQClientAPIExtTest.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.client.impl.mqclient;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThatThrownBy;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        Mockito.when(mqClientAPIExt.getRemotingClient()).thenReturn(remotingClientMock);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        requestHeader.setBatch(false);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/AbstractSystemMessageSyncer.java:
		[
			fromLine:"			17",
			toLine:"			48",
			content:"
			
			package org.apache.rocketmq.proxy.service.sysmessage;
			
			import com.alibaba.fastjson.JSON;
			import java.nio.charset.StandardCharsets;
			import java.time.Duration;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			50",
			toLine:"			52",
			content:"
			    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
			    protected final TopicRouteService topicRouteService;
			    protected final AdminService adminService;			
",
,
			fromLine:"			57",
			toLine:"			59",
			content:"
			    public AbstractSystemMessageSyncer(TopicRouteService topicRouteService, AdminService adminService, MQClientAPIFactory mqClientAPIFactory, RPCHook rpcHook) {
			        this.topicRouteService = topicRouteService;
			        this.adminService = adminService;			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                .getWriteSelector().selectOne(true);			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    protected void createSysTopic() {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
						
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/RoleChangeNotifyEntry.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
			
			import java.util.Set;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			46",
			content:"
			        this.brokerMemberGroup = brokerMemberGroup;
			        this.masterAddress = masterAddress;
			        this.masterEpoch = masterEpoch;
			        this.syncStateSetEpoch = syncStateSetEpoch;
			        this.masterBrokerId = masterBrokerId;			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public int getMasterEpoch() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public int getSyncStateSetEpoch() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public Set<Long> getSyncStateSet() {			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/admin/DefaultMQAdminExtTest.java:
		[
			fromLine:"			16",
			toLine:"			91",
			content:"
			 */
			package org.apache.rocketmq.tools.admin;
			
			import java.io.UnsupportedEncodingException;
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.TreeMap;
			import java.util.TreeSet;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.namesrv.NamesrvUtil;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.ProducerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ProducerInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProducerTableInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.admin.api.TrackType;
			import org.assertj.core.util.Maps;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.isNull;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(topicRouteData);			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			        String topicListConfig = "topicListConfig";			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			        consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        producerConnection.setConnectionSet(connectionSet);			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        Map<String, Map<MessageQueue, Long>> consumerStatus = new HashMap<>();			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			        List<QueueTimeSpan> queueTimeSpanList = new ArrayList<>();			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        consumerRunningInfo.setSubscriptionSet(new TreeSet<>());			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        //when(mQClientAPIImpl.getAllTopicConfig(anyString(),anyLong())).thenReturn(topicConfigSerializeWrapper);			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        connection.setConnectionSet(connections);			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			            .thenReturn(new ConsumeStats());			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			    public void testGetConsumerRunningInfo() throws RemotingException, MQClientException, InterruptedException {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			        connection.setConnectionSet(connections);			
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			        ConsumeStats consumeStats = new ConsumeStats();			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			    public void testGetConsumeStatus() throws InterruptedException, RemotingException, MQClientException, MQBrokerException {			
",
,
			fromLine:"			487",
			toLine:"			488",
			content:"
			        result.setBrokerAddr("127.0.0.1:10911");
			        when(mqClientInstance.getMQClientAPIImpl().fetchConsumeStatsInBroker("127.0.0.1:10911", false, 10000)).thenReturn(result);			
",
,
			fromLine:"			503",
			toLine:"			503",
			content:"
			    public void testMaxOffset() throws Exception {			
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
			    public void testSearchOffset() throws Exception {			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommandTest.java:
		[
			fromLine:"			16",
			toLine:"			70",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;
			import org.apache.rocketmq.tools.command.SubCommandException;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.isNull;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        result.setRemark("customRemark_122333444");			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        QueryResult queryResult = new QueryResult(0, Lists.newArrayList(retMsgExt));			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        groupList.setGroupList(groupSets);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        consumeStats.setOffsetTable(offsetTable);			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        consumerConnection.setConnectionSet(connectionSet);			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			        consumerConnection.setConnectionSet(connectionSet);			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/monitor/MonitorServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			65",
			content:"
			 */
			package org.apache.rocketmq.tools.monitor;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Properties;
			import java.util.Set;
			import java.util.TreeMap;
			import java.util.TreeSet;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType.CONSUME_ACTIVELY;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.anyBoolean;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
			
			public class MonitorServiceTest {			
",
,
			fromLine:"			69",
			toLine:"			72",
			content:"
			    private static MQClientAPIImpl mQClientAPIImpl;
			    private static MonitorConfig monitorConfig;
			    private static MonitorListener monitorListener;
			    private static DefaultMQPullConsumer defaultMQPullConsumer;			
",
,
			fromLine:"			77",
			toLine:"			80",
			content:"
			    public static void init() throws NoSuchFieldException, IllegalAccessException, RemotingException, MQClientException, InterruptedException, MQBrokerException {
			        monitorConfig = new MonitorConfig();
			        monitorListener = new DefaultMonitorListener();
			        defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);			
",
,
			fromLine:"			82",
			toLine:"			84",
			content:"
			        mQClientAPIImpl = mock(MQClientAPIImpl.class);
			        defaultMQAdminExt = new DefaultMQAdminExt();
			        defaultMQAdminExtImpl = new DefaultMQAdminExtImpl(defaultMQAdminExt, 1000);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        consumeStats.setOffsetTable(stats);			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        consumerConnection.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        consumerRunningInfo.setProperties(properties);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPullConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			68",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			public class DefaultMQPullConsumerImpl implements MQConsumerInner {			
",
,
			fromLine:"			76",
			toLine:"			84",
			content:"
			    private final DefaultMQPullConsumer defaultMQPullConsumer;
			    private final long consumerStartTimestamp = System.currentTimeMillis();
			    private final RPCHook rpcHook;
			    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
			    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();
			    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;
			    protected MQClientInstance mQClientFactory;
			    private PullAPIWrapper pullAPIWrapper;
			    private OffsetStore offsetStore;			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        this.defaultMQPullConsumer = defaultMQPullConsumer;			
",
,
			fromLine:"			92",
			toLine:"			93",
			content:"
			    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
			        this.consumeMessageHookList.add(hook);			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			
			    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    private void isRunning() throws MQClientException {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			            throw new MQClientException("The consumer is not in running status, "			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        // check if has info in memory, otherwise invoke api.			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			        if (null == result) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			184",
			toLine:"			185",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, subExpression);			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
						
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, messageSelector);			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			        try {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
						
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
						
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
						
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
						
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
						
",
,
			fromLine:"			251",
			toLine:"			258",
			content:"
			
			        boolean isTagType = ExpressionType.isTagType(subscriptionData.getExpressionType());
			        PullResult pullResult = this.pullAPIWrapper.pullKernelImpl(
			            mq,
			            subscriptionData.getSubString(),
			            subscriptionData.getExpressionType(),
			            isTagType ? 0L : subscriptionData.getSubVersion(),
			            offset,			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			        );			
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			        this.resetTopic(pullResult.getMsgFoundList());			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			            consumeMessageContext.setConsumerGroup(this.groupName());			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			    public void subscriptionAutomatically(final String topic) {			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			                SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, SubscriptionData.SUB_ALL);			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			    public void unsubscribe(String topic) {			
",
,
			fromLine:"			320",
			toLine:"			321",
			content:"
			    public void executeHookBefore(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			331",
			toLine:"			332",
			content:"
			    public void executeHookAfter(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
			                    } catch (Exception e) {			
",
,
			fromLine:"			383",
			toLine:"			384",
			content:"
			    public void doRebalance() {
			        if (this.rebalanceImpl != null) {			
",
,
			fromLine:"			390",
			toLine:"			391",
			content:"
			    public boolean tryRebalance() {
			        if (this.rebalanceImpl != null) {			
",
,
			fromLine:"			401",
			toLine:"			401",
			content:"
			            Set<MessageQueue> mqs = new HashSet<>();			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			            mqs.addAll(allocateMq);			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			    public void updateTopicSubscribeInfo(String topic, Set<MessageQueue> info) {			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
			    public boolean isSubscribeTopicNeedUpdate(String topic) {			
",
,
			fromLine:"			424",
			toLine:"			424",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			441",
			toLine:"			441",
			content:"
			        Properties prop = MixAll.object2Properties(this.defaultMQPullConsumer);			
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
						
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
						
",
,
			fromLine:"			456",
			toLine:"			457",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, subExpression);			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
						
",
,
			fromLine:"			463",
			toLine:"			464",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, subExpression);			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
						
",
,
			fromLine:"			470",
			toLine:"			470",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
						
",
,
			fromLine:"			477",
			toLine:"			478",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, messageSelector);			
",
,
			fromLine:"			481",
			toLine:"			481",
			content:"
						
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
						
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
						
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
						
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
						
",
,
			fromLine:"			513",
			toLine:"			513",
			content:"
						
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			        try {			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
						
",
,
			fromLine:"			520",
			toLine:"			528",
			content:"
			
			            boolean isTagType = ExpressionType.isTagType(subscriptionData.getExpressionType());
			            this.pullAPIWrapper.pullKernelImpl(
			                mq,
			                subscriptionData.getSubString(),
			                subscriptionData.getExpressionType(),
			                isTagType ? 0L : subscriptionData.getSubVersion(),
			                offset,
			                maxNums,			
",
,
			fromLine:"			538",
			toLine:"			538",
			content:"
			                    public void onSuccess(PullResult pullResult) {			
",
,
			fromLine:"			540",
			toLine:"			540",
			content:"
			                        resetTopic(userPullResult.getMsgFoundList());			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			                    public void onException(Throwable e) {			
",
,
			fromLine:"			553",
			toLine:"			553",
			content:"
						
",
,
			fromLine:"			561",
			toLine:"			565",
			content:"
			            final long timeout) throws MQClientException, RemotingException, InterruptedException {
			        pullAsyncImpl(
			                mq,
			                subscriptionData,
			                offset,			
",
,
			fromLine:"			567",
			toLine:"			569",
			content:"
			                Integer.MAX_VALUE,
			                pullCallback,
			                block,			
",
,
			fromLine:"			573",
			toLine:"			573",
			content:"
						
",
,
			fromLine:"			575",
			toLine:"			576",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, subExpression);			
",
,
			fromLine:"			583",
			toLine:"			583",
			content:"
						
",
,
			fromLine:"			586",
			toLine:"			587",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, subExpression);			
",
,
			fromLine:"			591",
			toLine:"			591",
			content:"
						
",
,
			fromLine:"			594",
			toLine:"			595",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, messageSelector);			
",
,
			fromLine:"			599",
			toLine:"			599",
			content:"
						
",
,
			fromLine:"			601",
			toLine:"			602",
			content:"
			        throws MQClientException, RemotingException, InterruptedException, MQBrokerException {
			        SubscriptionData subscriptionData = getSubscriptionData(mq, messageSelector);			
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
						
",
,
			fromLine:"			609",
			toLine:"			609",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			615",
			toLine:"			615",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			620",
			toLine:"			620",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			623",
			toLine:"			623",
			content:"
						
",
,
			fromLine:"			625",
			toLine:"			625",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			628",
			toLine:"			628",
			content:"
						
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			        MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			634",
			toLine:"			634",
			content:"
			    @Deprecated			
",
,
			fromLine:"			637",
			toLine:"			637",
			content:"
			        try {			
",
,
			fromLine:"			639",
			toLine:"			639",
			content:"
			            if (destBrokerName != null && destBrokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {			
",
,
			fromLine:"			641",
			toLine:"			642",
			content:"
			            }
			            String brokerAddr = (null != destBrokerName) ? this.mQClientFactory.findBrokerAddressInPublish(destBrokerName)			
",
,
			fromLine:"			644",
			toLine:"			645",
			content:"
			
			            if (UtilAll.isBlank(consumerGroup)) {			
",
,
			fromLine:"			648",
			toLine:"			649",
			content:"
			
			            this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg, consumerGroup,			
",
,
			fromLine:"			651",
			toLine:"			651",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			653",
			toLine:"			659",
			content:"
			
			            Message newMsg = new Message(MixAll.getRetryTopic(this.defaultMQPullConsumer.getConsumerGroup()), msg.getBody());
			            String originMsgId = MessageAccessor.getOriginMessageId(msg);
			            MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
			            newMsg.setFlag(msg.getFlag());
			            MessageAccessor.setProperties(newMsg, msg.getProperties());
			            MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());			
",
,
			fromLine:"			661",
			toLine:"			662",
			content:"
			            MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(this.defaultMQPullConsumer.getMaxReconsumeTimes()));
			            newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			        } finally {			
",
,
			fromLine:"			669",
			toLine:"			669",
			content:"
			    public synchronized void shutdown() {			
",
,
			fromLine:"			674",
			toLine:"			677",
			content:
{
                this.persistConsumerOffset();
                this.mQClientFactory.unregisterConsumer(this.defaultMQPullConsumer.getConsumerGroup());
                this.mQClientFactory.shutdown();
                log.info("the consumer [] shutdown OK", this.defaultMQPullConsumer.getConsumerGroup());						
}
,
			fromLine:"			687",
			toLine:"			687",
			content:"
			    public synchronized void start() throws MQClientException {			
",
,
			fromLine:"			689",
			toLine:"			689",
			content:"
			            case CREATE_JUST:			
",
,
			fromLine:"			699",
			toLine:"			699",
			content:"
						
",
,
			fromLine:"			701",
			toLine:"			704",
			content:"
			
			                this.rebalanceImpl.setConsumerGroup(this.defaultMQPullConsumer.getConsumerGroup());
			                this.rebalanceImpl.setMessageModel(this.defaultMQPullConsumer.getMessageModel());
			                this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPullConsumer.getAllocateMessageQueueStrategy());			
",
,
			fromLine:"			706",
			toLine:"			707",
			content:"
			
			                this.pullAPIWrapper = new PullAPIWrapper(			
",
,
			fromLine:"			709",
			toLine:"			709",
			content:"
			                    this.defaultMQPullConsumer.getConsumerGroup(), isUnitMode());			
",
,
			fromLine:"			712",
			toLine:"			712",
			content:"
			                if (this.defaultMQPullConsumer.getOffsetStore() != null) {			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
			                        case BROADCASTING:			
",
,
			fromLine:"			719",
			toLine:"			719",
			content:"
			                        case CLUSTERING:			
",
,
			fromLine:"			724",
			toLine:"			724",
			content:"
			                    }			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
						
",
,
			fromLine:"			729",
			toLine:"			729",
			content:"
						
",
,
			fromLine:"			731",
			toLine:"			731",
			content:"
			                if (!registerOK) {			
",
,
			fromLine:"			738",
			toLine:"			740",
			content:
{

                mQClientFactory.start();
                log.info("the consumer [] start OK", this.defaultMQPullConsumer.getConsumerGroup());						
}
,
			fromLine:"			746",
			toLine:"			746",
			content:"
			                throw new MQClientException("The PullConsumer service state not OK, maybe started once, "			
",
,
			fromLine:"			808",
			toLine:"			808",
			content:"
			                    SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, SubscriptionData.SUB_ALL);			
",
,
			fromLine:"			818",
			toLine:"			818",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			824",
			toLine:"			824",
			content:"
			        this.isRunning();			
",
,
			fromLine:"			828",
			toLine:"			829",
			content:"
			    public void registerFilterMessageHook(final FilterMessageHook hook) {
			        this.filterMessageHookList.add(hook);			
",
,
			fromLine:"			833",
			toLine:"			833",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			837",
			toLine:"			837",
			content:"
			    public void setOffsetStore(OffsetStore offsetStore) {			
",
,
			fromLine:"			841",
			toLine:"			841",
			content:"
			    public PullAPIWrapper getPullAPIWrapper() {			
",
,
			fromLine:"			845",
			toLine:"			845",
			content:"
			    public void setPullAPIWrapper(PullAPIWrapper pullAPIWrapper) {			
",
,
			fromLine:"			849",
			toLine:"			849",
			content:"
			    public ServiceState getServiceState() {			
",
,
			fromLine:"			855",
			toLine:"			855",
			content:"
			    public void setServiceState(ServiceState serviceState) {			
",
,
			fromLine:"			859",
			toLine:"			859",
			content:"
			    public long getConsumerStartTimestamp() {			
",
,
			fromLine:"			863",
			toLine:"			863",
			content:"
			    public RebalanceImpl getRebalanceImpl() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			96",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.listener.MessageListener;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.hook.FilterMessageContext;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.PopProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			     */			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			     */			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			     */			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    private static final long CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND = 1000 * 30;			
",
,
			fromLine:"			117",
			toLine:"			124",
			content:"
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final RebalanceImpl rebalanceImpl = new RebalancePushImpl(this);
			    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();
			    private final long consumerStartTimestamp = System.currentTimeMillis();
			    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
			    private final RPCHook rpcHook;
			    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;
			    private MQClientInstance mQClientFactory;			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    private MessageListener messageListenerInner;			
",
,
			fromLine:"			131",
			toLine:"			132",
			content:"
			    private ConsumeMessageService consumeMessagePopService;
			    private long queueFlowControlTimes = 0;			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    @SuppressWarnings("FieldMayBeFinal")			
",
,
			fromLine:"			147",
			toLine:"			148",
			content:"
			        this.defaultMQPushConsumer = defaultMQPushConsumer;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			152",
			toLine:"			153",
			content:"
			    public void registerFilterMessageHook(final FilterMessageHook hook) {
			        this.filterMessageHookList.add(hook);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public boolean hasHook() {			
",
,
			fromLine:"			161",
			toLine:"			162",
			content:"
			    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
			        this.consumeMessageHookList.add(hook);			
",
,
			fromLine:"			166",
			toLine:"			167",
			content:"
			    public void executeHookBefore(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			178",
			toLine:"			179",
			content:"
			    public void executeHookAfter(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			189",
			toLine:"			190",
			content:"
			
			    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {			
",
,
			fromLine:"			193",
			toLine:"			194",
			content:"
			
			    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			    public Set<MessageQueue> fetchSubscribeMessageQueues(String topic) throws MQClientException {			
",
,
			fromLine:"			200",
			toLine:"			201",
			content:"
			        if (null == result) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			    public long earliestMsgStoreTime(MessageQueue mq) throws MQClientException {			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			    public long maxOffset(MessageQueue mq) throws MQClientException {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    public long minOffset(MessageQueue mq) throws MQClientException {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			    public void setOffsetStore(OffsetStore offsetStore) {			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			        if (processQueue.isDropped()) {			
",
,
			fromLine:"			257",
			toLine:"			258",
			content:"
			        } catch (MQClientException e) {
			            log.warn("pullMessage exception, consumer state not ok", e);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        if (this.isPause()) {			
",
,
			fromLine:"			272",
			toLine:"			274",
			content:"
			        if (cachedMessageCount > this.defaultMQPushConsumer.getPullThresholdForQueue()) {
			            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
			            if ((queueFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
			                    "the cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",			
",
,
			fromLine:"			282",
			toLine:"			284",
			content:"
			        if (cachedMessageSizeInMiB > this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) {
			            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
			            if ((queueFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			                    "the cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",			
",
,
			fromLine:"			293",
			toLine:"			295",
			content:"
			            if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {
			                this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
			                if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			                        processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			                    try {			
",
,
			fromLine:"			312",
			toLine:"			313",
			content:"
			                    } catch (Exception e) {
			                        this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			                    boolean brokerBusy = offset < pullRequest.getNextOffset();			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			                    if (brokerBusy) {			
",
,
			fromLine:"			328",
			toLine:"			329",
			content:"
			            } else {
			                this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
			        final MessageQueue messageQueue = pullRequest.getMessageQueue();			
",
,
			fromLine:"			337",
			toLine:"			338",
			content:"
			        if (null == subscriptionData) {
			            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			                if (pullResult != null) {			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			                            long pullRT = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			                                boolean dispatchToConsume = processQueue.putMessage(pullResult.getMsgFoundList());			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			                                || firstMsgOffset < prevRequestOffset) {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
			                        case OFFSET_ILLEGAL:			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			                                    try {			
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
						
",
,
			fromLine:"			418",
			toLine:"			419",
			content:"
			                                        // removeProcessQueue will also remove offset to cancel the frozen status.
			                                        DefaultMQPushConsumerImpl.this.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
						
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			                                    } catch (Throwable e) {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			                    if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.SUBSCRIPTION_NOT_LATEST) {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			                    } else {			
",
,
			fromLine:"			445",
			toLine:"			445",
			content:"
			                if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
			                } else {			
",
,
			fromLine:"			455",
			toLine:"			455",
			content:"
			        if (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) {			
",
,
			fromLine:"			463",
			toLine:"			463",
			content:"
			        boolean classFilter = false;			
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
						
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
			        try {			
",
,
			fromLine:"			495",
			toLine:"			496",
			content:"
			        } catch (Exception e) {
			            log.error("pullKernelImpl exception", e);			
",
,
			fromLine:"			503",
			toLine:"			503",
			content:"
			        if (processQueue.isDropped()) {			
",
,
			fromLine:"			512",
			toLine:"			513",
			content:"
			        } catch (MQClientException e) {
			            log.warn("pullMessage exception, consumer state not ok", e);			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
			        if (this.isPause()) {			
",
,
			fromLine:"			524",
			toLine:"			527",
			content:"
			        if (processQueue.getWaiAckMsgCount() > this.defaultMQPushConsumer.getPopThresholdForQueue()) {
			            this.executePopPullRequestLater(popRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
			            if ((queueFlowControlTimes++ % 1000) == 0) {
			                log.warn("the messages waiting to ack exceeds the threshold {}, so do flow control, popRequest={}, flowControlTimes={}, wait count={}",			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			        //POPTODO think of pop mode orderly implementation later.			
",
,
			fromLine:"			535",
			toLine:"			536",
			content:"
			        if (null == subscriptionData) {
			            this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);			
",
,
			fromLine:"			546",
			toLine:"			546",
			content:"
			                if (popResult == null) {			
",
,
			fromLine:"			556",
			toLine:"			556",
			content:"
			                        long pullRT = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
			                        } else {			
",
,
			fromLine:"			565",
			toLine:"			565",
			content:"
						
",
,
			fromLine:"			583",
			toLine:"			583",
			content:"
			                    case POLLING_FULL:			
",
,
			fromLine:"			586",
			toLine:"			586",
			content:"
			                    default:			
",
,
			fromLine:"			595",
			toLine:"			595",
			content:"
			                if (!popRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,
			fromLine:"			599",
			toLine:"			599",
			content:"
			                if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {			
",
,
			fromLine:"			601",
			toLine:"			601",
			content:"
			                } else {			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
			            }			
",
,
			fromLine:"			617",
			toLine:"			618",
			content:"
			        } catch (Exception e) {
			            log.error("popAsync exception", e);			
",
,
			fromLine:"			638",
			toLine:"			638",
			content:"
						
",
,
			fromLine:"			642",
			toLine:"			643",
			content:"
			                filterMessageContext.setMsgList(msgListFilterAgain);
			                if (!this.filterMessageHookList.isEmpty()) {			
",
,
			fromLine:"			647",
			toLine:"			647",
			content:"
			                        } catch (Throwable e) {			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
			    private void makeSureStateOK() throws MQClientException {			
",
,
			fromLine:"			670",
			toLine:"			670",
			content:"
			            throw new MQClientException("The consumer service state not OK, "			
",
,
			fromLine:"			677",
			toLine:"			677",
			content:"
			    void executePullRequestLater(final PullRequest pullRequest, final long timeDelay) {			
",
,
			fromLine:"			689",
			toLine:"			689",
			content:"
			    public ConsumerStatsManager getConsumerStatsManager() {			
",
,
			fromLine:"			693",
			toLine:"			693",
			content:"
			    public void executePullRequestImmediately(final PullRequest pullRequest) {			
",
,
			fromLine:"			697",
			toLine:"			697",
			content:"
			    void executePopPullRequestLater(final PopRequest pullRequest, final long timeDelay) {			
",
,
			fromLine:"			701",
			toLine:"			701",
			content:"
			    void executePopPullRequestImmediately(final PopRequest pullRequest) {			
",
,
			fromLine:"			706",
			toLine:"			706",
			content:"
			        if (0L == pullRequest.getProcessQueue().getMsgCount().get()) {			
",
,
			fromLine:"			711",
			toLine:"			711",
			content:"
			    public void executeTaskLater(final Runnable r, final long timeDelay) {			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			    public void executeTask(final Runnable r) {			
",
,
			fromLine:"			718",
			toLine:"			718",
			content:"
						
",
,
			fromLine:"			720",
			toLine:"			720",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			725",
			toLine:"			725",
			content:"
			        InterruptedException {			
",
,
			fromLine:"			735",
			toLine:"			735",
			content:"
			        doRebalance();			
",
,
			fromLine:"			739",
			toLine:"			739",
			content:"
			    @Deprecated			
",
,
			fromLine:"			741",
			toLine:"			741",
			content:"
			            throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			744",
			toLine:"			744",
			content:"
						
",
,
			fromLine:"			746",
			toLine:"			746",
			content:"
			            throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			750",
			toLine:"			750",
			content:"
						
",
,
			fromLine:"			754",
			toLine:"			755",
			content:"
			        try {
			            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)			
",
,
			fromLine:"			757",
			toLine:"			757",
			content:"
			                needRetry = false;			
",
,
			fromLine:"			759",
			toLine:"			762",
			content:"
			            } else {
			                String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)
			                    : RemotingHelper.parseSocketAddressAddr(msg.getStoreHost());
			                this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg,			
",
,
			fromLine:"			765",
			toLine:"			766",
			content:"
			        } catch (Throwable t) {
			            log.error("Failed to send message back, consumerGroup={}, brokerName={}, mq={}, message={}",			
",
,
			fromLine:"			768",
			toLine:"			768",
			content:"
			            if (needRetry) {			
",
,
			fromLine:"			771",
			toLine:"			771",
			content:"
			        } finally {			
",
,
			fromLine:"			789",
			toLine:"			789",
			content:"
						
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {			
",
,
			fromLine:"			809",
			toLine:"			809",
			content:"
			            FindBrokerResult			
",
,
			fromLine:"			811",
			toLine:"			812",
			content:"
			            if (null == findBrokerResult) {
			                this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			816",
			toLine:"			816",
			content:"
			            if (findBrokerResult == null) {			
",
,
			fromLine:"			827",
			toLine:"			827",
			content:"
			            requestHeader.setBrokerName(brokerName);			
",
,
			fromLine:"			831",
			toLine:"			831",
			content:"
			                    if (ackResult != null && !AckStatus.OK.equals(ackResult.getStatus())) {			
",
,
			fromLine:"			836",
			toLine:"			836",
			content:"
			                public void onException(Throwable e) {			
",
,
			fromLine:"			841",
			toLine:"			841",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			845",
			toLine:"			845",
			content:"
						
",
,
			fromLine:"			847",
			toLine:"			847",
			content:"
			        throws MQClientException, RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			853",
			toLine:"			853",
			content:"
			        if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {			
",
,
			fromLine:"			857",
			toLine:"			857",
			content:"
			        FindBrokerResult			
",
,
			fromLine:"			859",
			toLine:"			860",
			content:"
			        if (null == findBrokerResult) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			864",
			toLine:"			864",
			content:"
			            ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();			
",
,
			fromLine:"			867",
			toLine:"			869",
			content:"
			            requestHeader.setOffset(ExtraInfoUtil.getQueueOffset(extraInfoStrs));
			            requestHeader.setConsumerGroup(consumerGroup);
			            requestHeader.setExtraInfo(extraInfo);			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			            //here the broker should be polished			
",
,
			fromLine:"			892",
			toLine:"			892",
			content:"
			    public synchronized void shutdown(long awaitTerminateMillis) {			
",
,
			fromLine:"			898",
			toLine:"			902",
			content:
{
                this.persistConsumerOffset();
                this.mQClientFactory.unregisterConsumer(this.defaultMQPushConsumer.getConsumerGroup());
                this.mQClientFactory.shutdown();
                log.info("the consumer [] shutdown OK", this.defaultMQPushConsumer.getConsumerGroup());
                this.rebalanceImpl.destroy();						
}
,
			fromLine:"			912",
			toLine:"			912",
			content:"
			    public synchronized void start() throws MQClientException {			
",
,
			fromLine:"			914",
			toLine:"			914",
			content:"
			            case CREATE_JUST:			
",
,
			fromLine:"			916",
			toLine:"			916",
			content:"
			                    this.defaultMQPushConsumer.getMessageModel(), this.defaultMQPushConsumer.isUnitMode());			
",
,
			fromLine:"			926",
			toLine:"			926",
			content:"
						
",
,
			fromLine:"			928",
			toLine:"			931",
			content:"
			
			                this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
			                this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());
			                this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());			
",
,
			fromLine:"			933",
			toLine:"			935",
			content:"
			
			                if (this.pullAPIWrapper == null) {
			                    this.pullAPIWrapper = new PullAPIWrapper(			
",
,
			fromLine:"			938",
			toLine:"			938",
			content:"
			                }			
",
,
			fromLine:"			941",
			toLine:"			941",
			content:"
			                if (this.defaultMQPushConsumer.getOffsetStore() != null) {			
",
,
			fromLine:"			945",
			toLine:"			945",
			content:"
			                        case BROADCASTING:			
",
,
			fromLine:"			948",
			toLine:"			948",
			content:"
			                        case CLUSTERING:			
",
,
			fromLine:"			953",
			toLine:"			953",
			content:"
			                    }			
",
,
			fromLine:"			955",
			toLine:"			955",
			content:"
			                }			
",
,
			fromLine:"			976",
			toLine:"			976",
			content:"
						
",
,
			fromLine:"			978",
			toLine:"			978",
			content:"
			                if (!registerOK) {			
",
,
			fromLine:"			985",
			toLine:"			987",
			content:
{

                mQClientFactory.start();
                log.info("the consumer [] start OK.", this.defaultMQPushConsumer.getConsumerGroup());						
}
,
			fromLine:"			993",
			toLine:"			993",
			content:"
			                throw new MQClientException("The PushConsumer service state not OK, maybe started once, "			
",
,
			fromLine:"			1001",
			toLine:"			1003",
			content:"
			        this.updateTopicSubscribeInfoWhenSubscriptionChanged();
			        this.mQClientFactory.checkClientInBroker();
			        if (this.mQClientFactory.sendHeartbeatToAllBrokerWithLock()) {			
",
,
			fromLine:"			1202",
			toLine:"			1202",
			content:"
			                    SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subString);			
",
,
			fromLine:"			1216",
			toLine:"			1216",
			content:"
			                    SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(retryTopic, SubscriptionData.SUB_ALL);			
",
,
			fromLine:"			1231",
			toLine:"			1231",
			content:"
			    private void updateTopicSubscribeInfoWhenSubscriptionChanged() {			
",
,
			fromLine:"			1238",
			toLine:"			1238",
			content:"
			                final String topic = entry.getKey();			
",
,
			fromLine:"			1244",
			toLine:"			1244",
			content:"
			    public ConcurrentMap<String, SubscriptionData> getSubscriptionInner() {			
",
,
			fromLine:"			1250",
			toLine:"			1252",
			content:"
			            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);
			            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
			            if (this.mQClientFactory != null) {			
",
,
			fromLine:"			1259",
			toLine:"			1259",
			content:"
						
",
,
			fromLine:"			1261",
			toLine:"			1262",
			content:"
			        try {
			            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, SubscriptionData.SUB_ALL);			
",
,
			fromLine:"			1264",
			toLine:"			1267",
			content:"
			            subscriptionData.setClassFilterMode(true);
			            subscriptionData.setFilterClassSource(filterClassSource);
			            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
			            if (this.mQClientFactory != null) {			
",
,
			fromLine:"			1282",
			toLine:"			1282",
			content:"
						
",
,
			fromLine:"			1285",
			toLine:"			1287",
			content:"
			
			            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
			            if (this.mQClientFactory != null) {			
",
,
			fromLine:"			1296",
			toLine:"			1296",
			content:"
			        this.pause = true;			
",
,
			fromLine:"			1300",
			toLine:"			1300",
			content:"
			    public void unsubscribe(String topic) {			
",
,
			fromLine:"			1304",
			toLine:"			1304",
			content:"
			    public void updateConsumeOffset(MessageQueue mq, long offset) {			
",
,
			fromLine:"			1313",
			toLine:"			1313",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			1317",
			toLine:"			1317",
			content:"
			    public RebalanceImpl getRebalanceImpl() {			
",
,
			fromLine:"			1329",
			toLine:"			1330",
			content:"
			    public void resetOffsetByTimeStamp(long timeStamp) throws MQClientException {
			        for (String topic : rebalanceImpl.getSubscriptionInner().keySet()) {			
",
,
			fromLine:"			1337",
			toLine:"			1337",
			content:"
			                }			
",
,
			fromLine:"			1343",
			toLine:"			1343",
			content:"
			    public long searchOffset(MessageQueue mq, long timestamp) throws MQClientException {			
",
,
			fromLine:"			1368",
			toLine:"			1368",
			content:"
			    public Set<SubscriptionData> subscriptions() {			
",
,
			fromLine:"			1374",
			toLine:"			1374",
			content:"
			        if (!this.pause) {			
",
,
			fromLine:"			1381",
			toLine:"			1381",
			content:"
			        if (!this.pause) {			
",
,
			fromLine:"			1391",
			toLine:"			1391",
			content:"
			            Set<MessageQueue> mqs = new HashSet<>();			
",
,
			fromLine:"			1394",
			toLine:"			1394",
			content:"
						
",
,
			fromLine:"			1396",
			toLine:"			1396",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			1405",
			toLine:"			1405",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			1415",
			toLine:"			1415",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			1435",
			toLine:"			1435",
			content:"
			        prop.put(ConsumerRunningInfo.PROP_THREADPOOL_CORE_SIZE, String.valueOf(this.consumeMessageService.getCorePoolSize()));			
",
,
			fromLine:"			1442",
			toLine:"			1442",
			content:"
						
",
,
			fromLine:"			1449",
			toLine:"			1449",
			content:"
			            ProcessQueueInfo pqinfo = new ProcessQueueInfo();			
",
,
			fromLine:"			1454",
			toLine:"			1454",
			content:"
						
",
,
			fromLine:"			1466",
			toLine:"			1466",
			content:"
			        for (SubscriptionData sd : subSet) {			
",
,
			fromLine:"			1474",
			toLine:"			1474",
			content:"
			    public MQClientInstance getmQClientFactory() {			
",
,
			fromLine:"			1478",
			toLine:"			1478",
			content:"
			    public void setmQClientFactory(MQClientInstance mQClientFactory) {			
",
,
			fromLine:"			1482",
			toLine:"			1482",
			content:"
			    public ServiceState getServiceState() {			
",
,
			fromLine:"			1488",
			toLine:"			1488",
			content:"
			    public synchronized void setServiceState(ServiceState serviceState) {			
",
,
			fromLine:"			1510",
			toLine:"			1510",
			content:"
			        long msgAccTotal = 0;			
",
,
			fromLine:"			1524",
			toLine:"			1524",
			content:"
			        List<QueueTimeSpan> queueTimeSpan = new ArrayList<>();			
",
,
			fromLine:"			1527",
			toLine:"			1527",
			content:"
			            String addr = brokerData.selectBrokerAddr();			
",
,
			fromLine:"			1570",
			toLine:"			1570",
			content:"
			    public void setPullTimeDelayMillsWhenException(long pullTimeDelayMillsWhenException) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java:
		[
			fromLine:"			16",
			toLine:"			91",
			content:"
			 */
			package org.apache.rocketmq.client.impl.factory;
			
			import io.netty.channel.Channel;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadFactory;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import com.alibaba.fastjson.JSON;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.admin.MQAdminExtInner;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.ClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.MQConsumerInner;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.client.impl.consumer.PullMessageService;
			import org.apache.rocketmq.client.impl.consumer.RebalanceService;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.MQProducerInner;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueAssignment;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.HeartbeatV2Result;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.remoting.rpc.ClientMetadata.topicRouteData2EndpointsForStaticTopic;
			
			public class MQClientInstance {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    private final ConcurrentMap<String/* Topic */, ConcurrentMap<MessageQueue, String/*brokerName*/>> topicEndPointsTable = new ConcurrentHashMap<>();			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			     */			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    private final ConcurrentMap<String, Integer> brokerAddrHeartbeatFingerprintTable = new ConcurrentHashMap<>();			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			            channelEventListener = new ChannelEventListener() {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			                                String brokerName = addressEntry.getKey();			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
						
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        if (null == this.clientConfig.getNamesrvAddr()) {			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
						
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
						
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
						
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
						
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			        try {			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			                try {			
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
						
",
,
			fromLine:"			465",
			toLine:"			465",
			content:"
			                    if (!updatedTable.isEmpty()) {			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			                } finally {			
",
,
			fromLine:"			493",
			toLine:"			493",
			content:"
			                    try {			
",
,
			fromLine:"			591",
			toLine:"			591",
			content:"
						
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
			                    heartbeatDataWithoutSub.setHeartbeatFingerprint(currentHeartbeatFingerprint);			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			                } else {			
",
,
			fromLine:"			621",
			toLine:"			621",
			content:"
						
",
,
			fromLine:"			623",
			toLine:"			625",
			content:"
			        try {
			            int version = this.mQClientAPIImpl.sendHeartbeat(addr, heartbeatData, clientConfig.getMqClientApiTimeout());
			            if (!this.brokerVersionTable.containsKey(brokerName)) {			
",
,
			fromLine:"			627",
			toLine:"			627",
			content:"
			            }			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			            if (times % 20 == 0) {			
",
,
			fromLine:"			635",
			toLine:"			636",
			content:"
			        } catch (Exception e) {
			            if (this.isBrokerInNameServer(addr)) {			
",
,
			fromLine:"			638",
			toLine:"			639",
			content:"
			            } else {
			                log.warn("send heart beat to broker[{} {} {}] exception, because the broker not up, forget it", brokerName,			
",
,
			fromLine:"			654",
			toLine:"			654",
			content:"
						
",
,
			fromLine:"			657",
			toLine:"			657",
			content:"
			        }			
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
						
",
,
			fromLine:"			679",
			toLine:"			679",
			content:"
						
",
,
			fromLine:"			683",
			toLine:"			683",
			content:"
			            int version = 0;			
",
,
			fromLine:"			685",
			toLine:"			686",
			content:"
			            HeartbeatV2Result heartbeatV2Result = null;
			            if (isBrokerSupportV2 && null != brokerAddrHeartbeatFingerprintTable.get(addr) && brokerAddrHeartbeatFingerprintTable.get(addr) == currentHeartbeatFingerprint) {			
",
,
			fromLine:"			688",
			toLine:"			688",
			content:"
			                if (heartbeatV2Result.isSubChange()) {			
",
,
			fromLine:"			690",
			toLine:"			690",
			content:"
			                }			
",
,
			fromLine:"			692",
			toLine:"			692",
			content:"
			            } else {			
",
,
			fromLine:"			694",
			toLine:"			694",
			content:"
			                if (heartbeatV2Result.isSupportV2()) {			
",
,
			fromLine:"			696",
			toLine:"			698",
			content:"
			                    if (heartbeatV2Result.isSubChange()) {
			                        brokerAddrHeartbeatFingerprintTable.remove(addr);
			                    } else if (!brokerAddrHeartbeatFingerprintTable.containsKey(addr) || brokerAddrHeartbeatFingerprintTable.get(addr) != currentHeartbeatFingerprint) {			
",
,
			fromLine:"			701",
			toLine:"			701",
			content:"
			                }			
",
,
			fromLine:"			704",
			toLine:"			705",
			content:"
			            version = heartbeatV2Result.getVersion();
			            if (!this.brokerVersionTable.containsKey(brokerName)) {			
",
,
			fromLine:"			707",
			toLine:"			707",
			content:"
			            }			
",
,
			fromLine:"			710",
			toLine:"			710",
			content:"
			            if (times % 20 == 0) {			
",
,
			fromLine:"			715",
			toLine:"			716",
			content:"
			        } catch (Exception e) {
			            if (this.isBrokerInNameServer(addr)) {			
",
,
			fromLine:"			718",
			toLine:"			718",
			content:"
			            } else {			
",
,
			fromLine:"			732",
			toLine:"			732",
			content:"
			        }			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
						
",
,
			fromLine:"			758",
			toLine:"			758",
			content:"
			                }			
",
,
			fromLine:"			767",
			toLine:"			767",
			content:"
			        try {			
",
,
			fromLine:"			794",
			toLine:"			794",
			content:"
			                            for (BrokerData bd : topicRouteData.getBrokerDatas()) {			
",
,
			fromLine:"			843",
			toLine:"			843",
			content:"
			                } finally {			
",
,
			fromLine:"			846",
			toLine:"			846",
			content:"
			            } else {			
",
,
			fromLine:"			953",
			toLine:"			953",
			content:"
			                    this.pullMessageService.shutdown(true);			
",
,
			fromLine:"			988",
			toLine:"			988",
			content:"
			    private void unregisterClient(final String producerGroup, final String consumerGroup) {			
",
,
			fromLine:"			999",
			toLine:"			999",
			content:"
			                    try {			
",
,
			fromLine:"			1054",
			toLine:"			1054",
			content:"
			        } else {			
",
,
			fromLine:"			1103",
			toLine:"			1103",
			content:"
						
",
,
			fromLine:"			1128",
			toLine:"			1128",
			content:"
			        }			
",
,
			fromLine:"			1136",
			toLine:"			1136",
			content:"
						
",
,
			fromLine:"			1141",
			toLine:"			1141",
			content:"
			    ) {			
",
,
			fromLine:"			1148",
			toLine:"			1148",
			content:"
						
",
,
			fromLine:"			1150",
			toLine:"			1151",
			content:"
			        if (map != null && !map.isEmpty()) {
			            brokerAddr = map.get(brokerId);			
",
,
			fromLine:"			1155",
			toLine:"			1155",
			content:"
			            if (!found && slave) {			
",
,
			fromLine:"			1159",
			toLine:"			1159",
			content:"
						
",
,
			fromLine:"			1168",
			toLine:"			1168",
			content:"
			        if (found) {			
",
,
			fromLine:"			1193",
			toLine:"			1193",
			content:"
			            try {			
",
,
			fromLine:"			1202",
			toLine:"			1202",
			content:"
						
",
,
			fromLine:"			1205",
			toLine:"			1205",
			content:"
			        throws RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			1207",
			toLine:"			1208",
			content:"
			        if (null == brokerAddr) {
			            this.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			1212",
			toLine:"			1212",
			content:"
			        if (null != brokerAddr) {			
",
,
			fromLine:"			1311",
			toLine:"			1311",
			content:"
			    public ScheduledExecutorService getScheduledExecutorService() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullAPIWrapper.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Random;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.client.consumer.PopCallback;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.FilterMessageContext;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class PullAPIWrapper {
			    private static final Logger log = LoggerFactory.getLogger(PullAPIWrapper.class);
			    private final MQClientInstance mQClientFactory;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    private Random random = new Random(System.nanoTime());			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			    public PullAPIWrapper(MQClientInstance mQClientFactory, String consumerGroup, boolean unitMode) {
			        this.mQClientFactory = mQClientFactory;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            ByteBuffer byteBuffer = ByteBuffer.wrap(pullResultExt.getMessageBinary());			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			                byteBuffer,
			                this.mQClientFactory.getClientConfig().isDecodeReadBody(),			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                } catch (Throwable t) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    public boolean hasHook() {			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			    public void executeHook(final FilterMessageContext context) {
			        if (!this.filterMessageHookList.isEmpty()) {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			        FindBrokerResult findBrokerResult =
			            this.mQClientFactory.findBrokerAddressInSubscribe(this.mQClientFactory.getBrokerNameFromMessageQueue(mq),			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			        if (null == findBrokerResult) {			
",
,
			fromLine:"			200",
			toLine:"			201",
			content:"
			            findBrokerResult =
			                this.mQClientFactory.findBrokerAddressInSubscribe(this.mQClientFactory.getBrokerNameFromMessageQueue(mq),			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			                // check version			
",
,
			fromLine:"			210",
			toLine:"			211",
			content:"
			                    && findBrokerResult.getBrokerVersion() < MQVersion.Version.V4_1_0_SNAPSHOT.ordinal()) {
			                    throw new MQClientException("The broker[" + mq.getBrokerName() + ", "			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			            }			
",
,
			fromLine:"			221",
			toLine:"			225",
			content:"
			            PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();
			            requestHeader.setConsumerGroup(this.consumerGroup);
			            requestHeader.setTopic(mq.getTopic());
			            requestHeader.setQueueId(mq.getQueueId());
			            requestHeader.setQueueOffset(offset);			
",
,
			fromLine:"			227",
			toLine:"			233",
			content:"
			            requestHeader.setSysFlag(sysFlagInner);
			            requestHeader.setCommitOffset(commitOffset);
			            requestHeader.setSuspendTimeoutMillis(brokerSuspendMaxTimeMillis);
			            requestHeader.setSubscription(subExpression);
			            requestHeader.setSubVersion(subVersion);
			            requestHeader.setMaxMsgBytes(maxSizeInBytes);
			            requestHeader.setExpressionType(expressionType);			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			            if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
						
",
,
			fromLine:"			243",
			toLine:"			245",
			content:"
			                requestHeader,
			                timeoutMillis,
			                communicationMode,			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
						
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
						
",
,
			fromLine:"			267",
			toLine:"			272",
			content:"
			    ) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        return pullKernelImpl(
			                mq,
			                subExpression,
			                expressionType,
			                subVersion, offset,			
",
,
			fromLine:"			274",
			toLine:"			279",
			content:"
			                Integer.MAX_VALUE,
			                sysFlag,
			                commitOffset,
			                brokerSuspendMaxTimeMillis,
			                timeoutMillis,
			                communicationMode,			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        throws MQClientException {			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			    public void registerFilterMessageHook(ArrayList<FilterMessageHook> filterMessageHookList) {			
",
,
			fromLine:"			346",
			toLine:"			350",
			content:"
			     *
			     * @param mq
			     * @param invisibleTime
			     * @param maxNums
			     * @param consumerGroup			
",
,
			fromLine:"			352",
			toLine:"			353",
			content:"
			     * @param popCallback
			     * @param poll			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			    //     * @param expression			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			     */			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			366",
			toLine:"			367",
			content:"
			        if (null == findBrokerResult) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());			
",
,
			fromLine:"			371",
			toLine:"			380",
			content:"
			            PopMessageRequestHeader requestHeader = new PopMessageRequestHeader();
			            requestHeader.setConsumerGroup(consumerGroup);
			            requestHeader.setTopic(mq.getTopic());
			            requestHeader.setQueueId(mq.getQueueId());
			            requestHeader.setMaxMsgNums(maxNums);
			            requestHeader.setInvisibleTime(invisibleTime);
			            requestHeader.setInitMode(initMode);
			            requestHeader.setExpType(expressionType);
			            requestHeader.setExp(expression);
			            requestHeader.setOrder(order);			
",
,
			fromLine:"			382",
			toLine:"			383",
			content:"
			            //give 1000 ms for server response
			            if (poll) {			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			                // timeout + 10s, fix the too earlier timeout of client when long polling.			
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
			            String brokerAddr = findBrokerResult.getBrokerAddr();			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			        }			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			78",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.TopicMessageQueueChangeListener;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.hook.FilterMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			     */			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			     */			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			     */			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
						
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    @SuppressWarnings("FieldMayBeFinal")			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			        this.defaultLitePullConsumer = defaultLitePullConsumer;			
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			        );
			        this.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("MonitorMessageQueueChangeThread"));			
",
,
			fromLine:"			175",
			toLine:"			176",
			content:"
			    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
			        this.consumeMessageHookList.add(hook);			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			    public void executeHookBefore(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			192",
			toLine:"			193",
			content:"
			    public void executeHookAfter(final ConsumeMessageContext context) {
			        if (!this.consumeMessageHookList.isEmpty()) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    private void checkServiceState() {			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			    public void updateNameServerAddr(String newAddresses) {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			        public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<MessageQueue> mqDivided) {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			251",
			content:"
			            case BROADCASTING:
			                updateAssignedMessageQueue(topic, mqAll);			
",
,
			fromLine:"			254",
			toLine:"			255",
			content:"
			            case CLUSTERING:
			                updateAssignedMessageQueue(topic, mqDivided);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			    public synchronized void shutdown() {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			                persistConsumerOffset();			
",
,
			fromLine:"			270",
			toLine:"			273",
			content:"
			                scheduledThreadPoolExecutor.shutdown();
			                scheduledExecutorService.shutdown();
			                this.mQClientFactory.shutdown();
			                this.serviceState = ServiceState.SHUTDOWN_ALREADY;			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			    public synchronized boolean isRunning() {			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			    public synchronized void start() throws MQClientException {			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			            case CREATE_JUST:			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
						
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
						
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
						
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			                throw new MQClientException("The PullConsumer service state not OK, maybe started once, "			
",
,
			fromLine:"			327",
			toLine:"			328",
			content:"
			    private void initMQClientFactory() throws MQClientException {
			        this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultLitePullConsumer, this.rpcHook);			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			        if (!registerOK) {			
",
,
			fromLine:"			339",
			toLine:"			342",
			content:"
			    private void initRebalanceImpl() {
			        this.rebalanceImpl.setConsumerGroup(this.defaultLitePullConsumer.getConsumerGroup());
			        this.rebalanceImpl.setMessageModel(this.defaultLitePullConsumer.getMessageModel());
			        this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultLitePullConsumer.getAllocateMessageQueueStrategy());			
",
,
			fromLine:"			346",
			toLine:"			347",
			content:"
			    private void initPullAPIWrapper() {
			        this.pullAPIWrapper = new PullAPIWrapper(			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			            this.defaultLitePullConsumer.getConsumerGroup(), isUnitMode());			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			        if (this.defaultLitePullConsumer.getOffsetStore() != null) {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			                case BROADCASTING:			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			                case CLUSTERING:			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			            }			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
			        }			
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
			    private void startScheduleTask() {			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			                    } catch (Exception e) {			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			        }			
",
,
			fromLine:"			441",
			toLine:"			441",
			content:"
			    public PullAPIWrapper getPullAPIWrapper() {			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			    private void updateTopicSubscribeInfoWhenSubscriptionChanged() {			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			        }			
",
,
			fromLine:"			475",
			toLine:"			475",
			content:"
			                final String topic = entry.getKey();			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
			            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);			
",
,
			fromLine:"			501",
			toLine:"			501",
			content:"
			                    // First, update the assign queue			
",
,
			fromLine:"			506",
			toLine:"			508",
			content:"
			            });
			            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
			            if (serviceState == ServiceState.RUNNING) {			
",
,
			fromLine:"			523",
			toLine:"			523",
			content:"
			            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);			
",
,
			fromLine:"			525",
			toLine:"			527",
			content:"
			            this.defaultLitePullConsumer.setMessageQueueListener(new MessageQueueListenerImpl());
			            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
			            if (serviceState == ServiceState.RUNNING) {			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			            }			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			                messageSelector.getExpression(), messageSelector.getExpressionType());			
",
,
			fromLine:"			549",
			toLine:"			551",
			content:"
			            this.defaultLitePullConsumer.setMessageQueueListener(new MessageQueueListenerImpl());
			            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
			            if (serviceState == ServiceState.RUNNING) {			
",
,
			fromLine:"			560",
			toLine:"			560",
			content:"
			    public synchronized void unsubscribe(final String topic) {			
",
,
			fromLine:"			571",
			toLine:"			571",
			content:"
			        assignedMessageQueue.updateAssignedMessageQueue(messageQueues);			
",
,
			fromLine:"			580",
			toLine:"			580",
			content:"
			        }			
",
,
			fromLine:"			624",
			toLine:"			624",
			content:"
			                this.resetTopic(messages);			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
			        }			
",
,
			fromLine:"			698",
			toLine:"			698",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			726",
			toLine:"			726",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			739",
			toLine:"			739",
			content:"
			        if (messageQueues == null || messageQueues.size() == 0) {			
",
,
			fromLine:"			751",
			toLine:"			751",
			content:"
			            } else {			
",
,
			fromLine:"			756",
			toLine:"			756",
			content:"
			        if (persist) {			
",
,
			fromLine:"			779",
			toLine:"			779",
			content:"
			        if (persist) {			
",
,
			fromLine:"			792",
			toLine:"			792",
			content:"
			        } else {			
",
,
			fromLine:"			806",
			toLine:"			806",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			812",
			toLine:"			812",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			818",
			toLine:"			818",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			856",
			toLine:"			856",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			887",
			toLine:"			887",
			content:"
			                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_PAUSE, TimeUnit.MILLISECONDS);			
",
,
			fromLine:"			894",
			toLine:"			894",
			content:"
			                if (null == processQueue || processQueue.isDropped()) {			
",
,
			fromLine:"			901",
			toLine:"			901",
			content:"
			                if ((long) consumeRequestCache.size() * defaultLitePullConsumer.getPullBatchSize() > defaultLitePullConsumer.getPullThresholdForAll()) {			
",
,
			fromLine:"			903",
			toLine:"			903",
			content:"
			                    if ((consumeRequestFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			914",
			toLine:"			916",
			content:"
			                if (cachedMessageCount > defaultLitePullConsumer.getPullThresholdForQueue()) {
			                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
			                    if ((queueFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			918",
			toLine:"			918",
			content:"
			                            "The cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, flowControlTimes={}",			
",
,
			fromLine:"			924",
			toLine:"			926",
			content:"
			                if (cachedMessageSizeInMiB > defaultLitePullConsumer.getPullThresholdSizeForQueue()) {
			                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
			                    if ((queueFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			928",
			toLine:"			928",
			content:"
			                            "The cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, flowControlTimes={}",			
",
,
			fromLine:"			934",
			toLine:"			936",
			content:"
			                if (processQueue.getMaxSpan() > defaultLitePullConsumer.getConsumeMaxSpan()) {
			                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
			                    if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {			
",
,
			fromLine:"			938",
			toLine:"			938",
			content:"
			                            "The queue's messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, flowControlTimes={}",			
",
,
			fromLine:"			947",
			toLine:"			947",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			960",
			toLine:"			960",
			content:"
			                    if (subscriptionType == SubscriptionType.SUBSCRIBE) {			
",
,
			fromLine:"			967",
			toLine:"			967",
			content:"
						
",
,
			fromLine:"			973",
			toLine:"			973",
			content:"
			                        case FOUND:			
",
,
			fromLine:"			982",
			toLine:"			982",
			content:"
			                        case OFFSET_ILLEGAL:			
",
,
			fromLine:"			989",
			toLine:"			989",
			content:"
			                } catch (InterruptedException interruptedException) {			
",
,
			fromLine:"			992",
			toLine:"			992",
			content:"
			                    if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {			
",
,
			fromLine:"			994",
			toLine:"			994",
			content:"
			                    } else {			
",
,
			fromLine:"			996",
			toLine:"			996",
			content:"
			                    }			
",
,
			fromLine:"			1002",
			toLine:"			1002",
			content:"
			                } else {			
",
,
			fromLine:"			1020",
			toLine:"			1020",
			content:"
						
",
,
			fromLine:"			1022",
			toLine:"			1022",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1025",
			toLine:"			1025",
			content:"
						
",
,
			fromLine:"			1027",
			toLine:"			1027",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1030",
			toLine:"			1030",
			content:"
						
",
,
			fromLine:"			1035",
			toLine:"			1035",
			content:"
						
",
,
			fromLine:"			1039",
			toLine:"			1039",
			content:"
						
",
,
			fromLine:"			1043",
			toLine:"			1043",
			content:"
						
",
,
			fromLine:"			1047",
			toLine:"			1047",
			content:"
						
",
,
			fromLine:"			1049",
			toLine:"			1049",
			content:"
						
",
,
			fromLine:"			1051",
			toLine:"			1058",
			content:"
			
			        boolean isTagType = ExpressionType.isTagType(subscriptionData.getExpressionType());
			        PullResult pullResult = this.pullAPIWrapper.pullKernelImpl(
			            mq,
			            subscriptionData.getSubString(),
			            subscriptionData.getExpressionType(),
			            isTagType ? 0L : subscriptionData.getSubVersion(),
			            offset,			
",
,
			fromLine:"			1066",
			toLine:"			1066",
			content:"
			        );			
",
,
			fromLine:"			1086",
			toLine:"			1086",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			1113",
			toLine:"			1113",
			content:"
						
",
,
			fromLine:"			1120",
			toLine:"			1121",
			content:"
			    public void doRebalance() {
			        if (this.rebalanceImpl != null) {			
",
,
			fromLine:"			1127",
			toLine:"			1128",
			content:"
			    public boolean tryRebalance() {
			        if (this.rebalanceImpl != null) {			
",
,
			fromLine:"			1139",
			toLine:"			1139",
			content:"
			            if (this.subscriptionType == SubscriptionType.SUBSCRIBE) {			
",
,
			fromLine:"			1145",
			toLine:"			1145",
			content:"
			            }			
",
,
			fromLine:"			1147",
			toLine:"			1147",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			1153",
			toLine:"			1153",
			content:"
			    public void updateTopicSubscribeInfo(String topic, Set<MessageQueue> info) {			
",
,
			fromLine:"			1156",
			toLine:"			1156",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			1163",
			toLine:"			1163",
			content:"
			    public boolean isSubscribeTopicNeedUpdate(String topic) {			
",
,
			fromLine:"			1166",
			toLine:"			1166",
			content:"
			            if (subTable.containsKey(topic)) {			
",
,
			fromLine:"			1183",
			toLine:"			1183",
			content:"
			        Properties prop = MixAll.object2Properties(this.defaultLitePullConsumer);			
",
,
			fromLine:"			1191",
			toLine:"			1191",
			content:"
			            ProcessQueueInfo pqInfo = new ProcessQueueInfo();			
",
,
			fromLine:"			1199",
			toLine:"			1199",
			content:"
						
",
,
			fromLine:"			1201",
			toLine:"			1201",
			content:"
			        MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			1205",
			toLine:"			1205",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			1214",
			toLine:"			1214",
			content:"
			        checkServiceState();			
",
,
			fromLine:"			1261",
			toLine:"			1261",
			content:"
			        if (topicMessageQueueChangeListenerMap.containsKey(topic)) {			
",
,
			fromLine:"			1264",
			toLine:"			1264",
			content:"
			        topicMessageQueueChangeListenerMap.put(topic, listener);			
",
,
			fromLine:"			1307",
			toLine:"			1307",
			content:"
			    public void setPullTimeDelayMillsWhenException(long pullTimeDelayMillsWhenException) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutorService;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageId;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.processor.validator.DefaultTopicMessageTypeValidator;
			import org.apache.rocketmq.proxy.processor.validator.TopicMessageTypeValidator;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        try {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			                    if (!NamespaceUtil.isRetryTopic(topic) && !NamespaceUtil.isDLQTopic(topic)) {			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			            }
			            messageQueue = queueSelector.select(ctx,			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			            }			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			            AddressableMessageQueue finalMessageQueue = messageQueue;
			            future = this.serviceManager.getMessageService().sendMessage(			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			                messageQueue,			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                requestHeader,			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                            StringUtils.isNotBlank(sendResult.getTransactionId())) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                        if (exception != null) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			                        } else {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			            }
			            this.serviceManager.getTransactionService().addTransactionDataByBrokerName(			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			                messageQueue.getBrokerName(),
			                messageList.get(0).getTopic(),			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                sendResult.getTransactionId(),			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        requestHeader.setQueueId(queueId);			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        requestHeader.setReconsumeTimes(0);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        try {			
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			            ConsumerSendMsgBackRequestHeader consumerSendMsgBackRequestHeader = new ConsumerSendMsgBackRequestHeader();
			            consumerSendMsgBackRequestHeader.setOffset(handle.getCommitLogOffset());			
",
,
			fromLine:"			211",
			toLine:"			212",
			content:"
			            consumerSendMsgBackRequestHeader.setDelayLevel(-1);
			            consumerSendMsgBackRequestHeader.setOriginMsgId(messageId);			
",
,
			fromLine:"			215",
			toLine:"			218",
			content:"
			
			            future = this.serviceManager.getMessageService().sendMessageBack(
			                ctx,
			                handle,			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			                consumerSendMsgBackRequestHeader,			
",
,
			fromLine:"			223",
			toLine:"			224",
			content:"
			                if (t == null && remotingCommand.getCode() == ResponseCode.SUCCESS) {
			                    this.messagingProcessor.ackMessage(ctx, handle, messageId,			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/message/MessageService.java:
		[
			fromLine:"			16",
			toLine:"			45",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.message;
			
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
						
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQPopConsumer.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.TimeoutException;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.AbstractListener;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        client = ConsumerFactory.getRMQPopClient();			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public PopResult pop(String brokerAddr, MessageQueue mq) throws Exception {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			
			        CompletableFuture<PopResult> future = this.client.popMessageAsync(			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public PopResult popOrderly(String brokerAddr, MessageQueue mq) throws Exception {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
						
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			
			        CompletableFuture<PopResult> future = this.client.popMessageAsync(			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public CompletableFuture<AckResult> ackAsync(String brokerAddr, String extraInfo) {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/BasePopOrderly.java:
		[
			fromLine:"			17",
			toLine:"			46",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.CopyOnWriteArrayList;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.assertj.core.util.Lists;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Ignore;
			
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			48",
			toLine:"			53",
			content:"
			public class BasePopOrderly extends BasePop {
			    protected String topic;
			    protected String group;
			    protected RMQNormalProducer producer = null;
			    protected RMQPopClient client = null;
			    protected String brokerAddr;			
",
,
			fromLine:"			61",
			toLine:"			67",
			content:"
			        brokerController1.getBrokerConfig().setEnableNotifyAfterPopOrderLockRelease(true);
			        brokerAddr = brokerController1.getBrokerAddr();
			        topic = MQRandomUtils.getRandomTopic();
			        group = initConsumerGroup();
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER1_NAME, 1, CQType.SimpleCQ, TopicMessageType.FIFO);
			        producer = getProducer(NAMESRV_ADDR, topic);
			        client = getRMQPopClient();			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			    protected void sendMessage(int num) {
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(Lists.newArrayList(messageQueue), num);			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			
			    protected CompletableFuture<PopResult> popMessageOrderlyAsync(long invisibleTime, int maxNums, long timeout) {			
",
,
			fromLine:"			126",
			toLine:"			129",
			content:"
			
			    protected CompletableFuture<PopResult> popMessageOrderlyAsync(long invisibleTime, int maxNums, long timeout, String attemptId) {
			        return client.popMessageAsync(
			            brokerAddr, messageQueue, invisibleTime, maxNums, group, timeout, true,			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    protected CompletableFuture<AckResult> ackMessageAsync(MessageExt messageExt) {			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			    protected CompletableFuture<AckResult> changeInvisibleTimeAsync(MessageExt messageExt, long invisibleTime) {
			        return client.changeInvisibleTimeAsync(			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/BatchAckIT.java:
		[
			fromLine:"			17",
			toLine:"			48",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.function.Supplier;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			50",
			toLine:"			55",
			content:"
			
			    protected String topic;
			    protected String group;
			    protected RMQNormalProducer producer = null;
			    protected RMQPopClient client = null;
			    protected String brokerAddr;			
",
,
			fromLine:"			59",
			toLine:"			65",
			content:"
			    public void setUp() {
			        brokerAddr = brokerController1.getBrokerAddr();
			        topic = MQRandomUtils.getRandomTopic();
			        group = initConsumerGroup();
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER1_NAME, 8, CQType.SimpleCQ, TopicMessageType.NORMAL);
			        producer = getProducer(NAMESRV_ADDR, topic);
			        client = getRMQPopClient();			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        // Send 10 messages but do not ack, let them enter the retry topic			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
						
",
,
			fromLine:"			148",
			toLine:"			149",
			content:"
			    private CompletableFuture<PopResult> popMessageAsync() {
			        return client.popMessageAsync(			
",
,
			fromLine:"			154",
			toLine:"			155",
			content:"
			    private CompletableFuture<PopResult> popMessageOrderlyAsync() {
			        return client.popMessageAsync(			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/BasePopNormally.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Ignore;
						
",
,
			fromLine:"			37",
			toLine:"			42",
			content:"
			
			    protected String topic;
			    protected String group;
			    protected RMQNormalProducer producer = null;
			    protected RMQPopClient client = null;
			    protected String brokerAddr;			
",
,
			fromLine:"			46",
			toLine:"			52",
			content:"
			    public void setUp() {
			        brokerAddr = brokerController1.getBrokerAddr();
			        topic = MQRandomUtils.getRandomTopic();
			        group = initConsumerGroup();
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER1_NAME, 8, CQType.SimpleCQ, TopicMessageType.NORMAL);
			        producer = getProducer(NAMESRV_ADDR, topic);
			        client = getRMQPopClient();			
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			
			    protected CompletableFuture<PopResult> popMessageAsync(long invisibleTime, int maxNums, long timeout) {
			        return client.popMessageAsync(			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			    protected CompletableFuture<PopResult> popMessageAsync(long invisibleTime, int maxNums) {
			        return client.popMessageAsync(			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopMessageAndForwardingIT.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.time.Duration;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
						
",
,
			fromLine:"			44",
			toLine:"			47",
			content:"
			
			    protected String topic;
			    protected String group;
			    protected RMQNormalProducer producer = null;			
",
,
			fromLine:"			57",
			toLine:"			64",
			content:"
			        broker2Addr = brokerController2.getBrokerAddr();
			        topic = MQRandomUtils.getRandomTopic();
			        group = initConsumerGroup();
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER1_NAME, 8, CQType.SimpleCQ, TopicMessageType.NORMAL);
			        IntegrationTestBase.initTopic(topic, NAMESRV_ADDR, BROKER2_NAME, 8, CQType.SimpleCQ, TopicMessageType.NORMAL);
			        producer = getProducer(NAMESRV_ADDR, topic);
			        client = getRMQPopClient();
			        broker1MessageQueue = new MessageQueue(topic, BROKER1_NAME, -1);			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void test() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        await().atMost(Duration.ofSeconds(3)).until(() -> {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        await().atMost(Duration.ofSeconds(3)).until(() -> {			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/util/MQAdminTestUtils.java:
		[
			fromLine:"			17",
			toLine:"			58",
			content:"
			
			package org.apache.rocketmq.test.util;
			
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.ForkJoinPool;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingOne;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicRemappingDetailWrapper;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminUtils;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.topic.RemappingStaticTopicSubCommand;
			import org.apache.rocketmq.tools.command.topic.UpdateStaticTopicSubCommand;
			
			import static org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils.getMappingDetailFromConfig;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        int defaultWaitTime = 30;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        mqAdminExt.setInstanceName(UUID.randomUUID().toString());			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			            mqAdminExt.start();			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
						
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        while (System.currentTimeMillis() - start <= timeMs) {			
",
,
			fromLine:"			178",
			toLine:"			179",
			content:"
			    //Check if the client metadata is consistent with server metadata
			    public static boolean checkStaticTopic(String topic, DefaultMQAdminExt defaultMQAdminExt, MQClientInstance clientInstance) throws Exception {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        TopicQueueMappingUtils.checkPhysicalQueueConsistence(brokerConfigMap);			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			            String mockBrokerName = TopicQueueMappingUtils.getMockBrokerName(mappingOne.getMappingDetail().getScope());			
",
,
			fromLine:"			196",
			toLine:"			197",
			content:"
			    //should only be test, if some middle operation failed, it dose not backup the brokerConfigMap
			    public static Map<String, TopicConfigAndQueueMapping> createStaticTopic(String topic, int queueNum, Set<String> targetBrokers, DefaultMQAdminExt defaultMQAdminExt) throws Exception {			
",
,
			fromLine:"			199",
			toLine:"			201",
			content:"
			        assert brokerConfigMap.isEmpty();
			        TopicQueueMappingUtils.createTopicConfigMapping(topic, queueNum, targetBrokers, brokerConfigMap);
			        MQAdminUtils.completeNoTargetBrokers(brokerConfigMap, defaultMQAdminExt);			
",
,
			fromLine:"			206",
			toLine:"			207",
			content:"
			    //should only be test, if some middle operation failed, it dose not backup the brokerConfigMap
			    public static void remappingStaticTopic(String topic, Set<String> targetBrokers, DefaultMQAdminExt defaultMQAdminExt) throws Exception {			
",
,
			fromLine:"			209",
			toLine:"			211",
			content:"
			        assert !brokerConfigMap.isEmpty();
			        TopicRemappingDetailWrapper wrapper = TopicQueueMappingUtils.remappingStaticTopic(topic, brokerConfigMap, targetBrokers);
			        MQAdminUtils.completeNoTargetBrokers(brokerConfigMap, defaultMQAdminExt);			
",
,
			fromLine:"			216",
			toLine:"			217",
			content:"
			    //for test only
			    public static void remappingStaticTopicWithNegativeLogicOffset(String topic, Set<String> targetBrokers, DefaultMQAdminExt defaultMQAdminExt) throws Exception {			
",
,
			fromLine:"			219",
			toLine:"			221",
			content:"
			        assert !brokerConfigMap.isEmpty();
			        TopicRemappingDetailWrapper wrapper = TopicQueueMappingUtils.remappingStaticTopic(topic, brokerConfigMap, targetBrokers);
			        MQAdminUtils.completeNoTargetBrokers(brokerConfigMap, defaultMQAdminExt);			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			    //for test only			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        //Step1: let the new leader can be write without the logicOffset			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        //Step2: forbid the write of old leader			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			        for (String broker : brokerConfigMap.keySet()) {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			        String[] args;			
",
,
			fromLine:"			260",
			toLine:"			261",
			content:"
			            args = new String[]{
			                "-c", cluster,			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			                "-qn", String.valueOf(queueNum),			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			        } else {			
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			                "-b", brokerStr,			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			                "-qn", String.valueOf(queueNum),			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        }			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
						
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			        String[] args;			
",
,
			fromLine:"			291",
			toLine:"			293",
			content:"
			            args = new String[]{
			                "-c", cluster,
			                "-t", topic,			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			        } else {			
",
,
			fromLine:"			299",
			toLine:"			300",
			content:"
			                "-b", brokerStr,
			                "-t", topic,			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			        }			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
						
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			        try {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/queue/QueryConsumeQueueCommand.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.tools.command.queue;
			
			import com.alibaba.fastjson.JSON;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeQueueData;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeQueueResponseBody;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/simple/PopConsumer.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.example.simple;
			
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			            for (String brokerAddr : brokerAddrs) {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQPopConsumer;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.RandomUtil;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        for (String brokerAddr : new String[]{brokerController1.getBrokerAddr(), brokerController2.getBrokerAddr()}) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java:
		[
			fromLine:"			17",
			toLine:"			55",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.container.BrokerContainer;
			import org.apache.rocketmq.container.InnerBrokerController;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import java.nio.charset.StandardCharsets;
			import java.time.Duration;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.atomic.AtomicInteger;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			57",
			toLine:"			62",
			content:"
			public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
			    private static final String CONSUME_GROUP = PopSlaveActingMasterIT.class.getSimpleName() + "_Consumer";
			    private final static int MESSAGE_COUNT = 16;
			    private final Random random = new Random();
			    private static DefaultMQProducer producer;
			    private final static String MESSAGE_STRING = RandomStringUtils.random(1024);			
",
,
			fromLine:"			76",
			toLine:"			78",
			content:"
			    public static void beforeClass() throws Throwable {
			        producer = createProducer(PopSlaveActingMasterIT.class.getSimpleName() + "_PRODUCER");
			        producer.setSendMsgTimeout(5000);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public static void afterClass() throws Exception {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void testLocalActing_ackSlave() throws Exception {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			102",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        List<String> retryMsgList = new CopyOnWriteArrayList<>();			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			    public void testLocalActing_notAckSlave() throws Exception {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			165",
			toLine:"			167",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        List<String> retryMsgList = new CopyOnWriteArrayList<>();			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        await().atMost(Duration.ofMinutes(3)).pollInterval(Duration.ofSeconds(10)).until(() -> {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			    public void testRemoteActing_ackSlave() throws Exception {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
						
",
,
			fromLine:"			244",
			toLine:"			246",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
						
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        List<String> retryMsgList = new CopyOnWriteArrayList<>();			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			    public void testRemoteActing_notAckSlave_getFromLocal() throws Exception {			
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
						
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			324",
			toLine:"			326",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
						
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
						
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			        List<String> retryMsgList = new CopyOnWriteArrayList<>();			
",
,
			fromLine:"			375",
			toLine:"			375",
			content:"
			        await().atMost(Duration.ofMinutes(1)).until(() -> {			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			    public void testRemoteActing_notAckSlave_getFromRemote() throws Exception {			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			        this.switchPop(topic);			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
						
",
,
			fromLine:"			411",
			toLine:"			413",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {
			            Message msg = new Message(topic, MESSAGE_BODY);			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
						
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
						
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			        List<String> retryMsgList = new CopyOnWriteArrayList<>();			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
			        await().atMost(Duration.ofMinutes(1)).until(() -> {			
",
,
			fromLine:"			501",
			toLine:"			501",
			content:"
			                String brokerAddr = master.getBrokerAddr();			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			            for (InnerSalveBrokerController slave : brokerContainer.getSlaveBrokers()) {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/retry/PopConsumerRetryIT.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.rocketmq.test.retry;
			
			import java.util.Set;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.client.AccessChannel;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.offset.OffsetResetIT;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        LOGGER.info(String.format("use topic: %s, group: %s", topicName, groupName));			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			            defaultMQAdminExt.createAndUpdateTopicConfig(brokerAddr, topicConfig);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/consumer/SetConsumeModeSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.tools.command.consumer;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                    try {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/PollingHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.broker.longpolling;
			
			import org.apache.rocketmq.remoting.protocol.header.NotificationRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			
			public class PollingHeader {
			    private final String consumerGroup;
			    private final String topic;
			    private final int queueId;
			    private final long bornTime;			
",
,
			fromLine:"			30",
			toLine:"			34",
			content:"
			    public PollingHeader(PopMessageRequestHeader requestHeader) {
			        this.consumerGroup = requestHeader.getConsumerGroup();
			        this.topic = requestHeader.getTopic();
			        this.queueId = requestHeader.getQueueId();
			        this.bornTime = requestHeader.getBornTime();			
",
,
			fromLine:"			38",
			toLine:"			42",
			content:"
			    public PollingHeader(NotificationRequestHeader requestHeader) {
			        this.consumerGroup = requestHeader.getConsumerGroup();
			        this.topic = requestHeader.getTopic();
			        this.queueId = requestHeader.getQueueId();
			        this.bornTime = requestHeader.getBornTime();			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public long getBornTime() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public long getPollTime() {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumerTest.java:
		[
			fromLine:"			17",
			toLine:"			83",
			content:"
			
			package org.apache.rocketmq.client.consumer;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.time.Duration;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.AssignedMessageQueue;
			import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.consumer.RebalanceImpl;
			import org.apache.rocketmq.client.impl.consumer.RebalanceService;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.BeforeClass;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.quality.Strictness;
			import org.mockito.junit.jupiter.MockitoSettings;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    @Spy			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    @Mock			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			101",
			toLine:"			103",
			content:"
			    private DefaultLitePullConsumerImpl litePullConsumerImpl;
			    private String consumerGroup = "LitePullConsumerGroup";
			    private String topic = "LitePullConsumerTest";			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			            messageQueueSet.add(createMessageQueue());			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			        try {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			            messageQueueSet.add(createMessageQueue());			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			            messageQueueSet.add(createMessageQueue());			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        try {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			        try {			
",
,
			fromLine:"			416",
			toLine:"			416",
			content:"
			            result = litePullConsumer.poll();			
",
,
			fromLine:"			477",
			toLine:"			477",
			content:"
			            litePullConsumer.setTopicMetadataCheckIntervalMillis(10);			
",
,
			fromLine:"			556",
			toLine:"			556",
			content:"
						
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
						
",
,
			fromLine:"			578",
			toLine:"			578",
			content:"
						
",
,
			fromLine:"			598",
			toLine:"			598",
			content:"
			            when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(-1L);			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			        when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(100L);			
",
,
			fromLine:"			622",
			toLine:"			623",
			content:"
			        when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(-1L);
			        when(mQClientFactory.getMQAdminImpl().maxOffset(any(MessageQueue.class))).thenReturn(100L);			
",
,
			fromLine:"			636",
			toLine:"			637",
			content:"
			            when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(-1L);
			            when(mQClientFactory.getMQAdminImpl().searchOffset(any(MessageQueue.class), anyLong())).thenReturn(100L);			
",
,
			fromLine:"			659",
			toLine:"			659",
			content:"
			        try {			
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			        mqClientInstance = (MQClientInstance) field.get(litePullConsumerImpl);			
",
,
			fromLine:"			708",
			toLine:"			708",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			712",
			toLine:"			712",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			720",
			toLine:"			720",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			723",
			toLine:"			723",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			730",
			toLine:"			730",
			content:"
						
",
,
			fromLine:"			737",
			toLine:"			737",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			744",
			toLine:"			744",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			749",
			toLine:"			749",
			content:"
						
",
,
			fromLine:"			751",
			toLine:"			751",
			content:"
						
",
,
			fromLine:"			763",
			toLine:"			763",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			768",
			toLine:"			768",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			772",
			toLine:"			772",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			776",
			toLine:"			776",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			780",
			toLine:"			780",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			783",
			toLine:"			783",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			790",
			toLine:"			790",
			content:"
						
",
,
			fromLine:"			797",
			toLine:"			797",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			805",
			toLine:"			805",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			810",
			toLine:"			810",
			content:"
						
",
,
			fromLine:"			816",
			toLine:"			816",
			content:"
			    private DefaultLitePullConsumer createSubscribeLitePullConsumer() throws Exception {			
",
,
			fromLine:"			818",
			toLine:"			818",
			content:"
			        litePullConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			826",
			toLine:"			826",
			content:"
			    private DefaultLitePullConsumer createSubscribeLitePullConsumerWithListener() throws Exception {			
",
,
			fromLine:"			828",
			toLine:"			828",
			content:"
			        litePullConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			843",
			toLine:"			843",
			content:"
			    private DefaultLitePullConsumer createStartLitePullConsumer() throws Exception {			
",
,
			fromLine:"			852",
			toLine:"			852",
			content:"
			    private DefaultLitePullConsumer createStartLitePullConsumerWithTag() throws Exception {			
",
,
			fromLine:"			855",
			toLine:"			855",
			content:"
			        suppressUpdateTopicRouteInfoFromNameServer(litePullConsumer);			
",
,
			fromLine:"			862",
			toLine:"			862",
			content:"
			    private DefaultLitePullConsumer createNotStartLitePullConsumer() {			
",
,
			fromLine:"			867",
			toLine:"			867",
			content:"
			    private DefaultLitePullConsumer createBroadcastLitePullConsumer() throws Exception {			
",
,
			fromLine:"			870",
			toLine:"			870",
			content:"
			        litePullConsumer.setMessageModel(MessageModel.BROADCASTING);			
",
,
			fromLine:"			879",
			toLine:"			879",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			881",
			toLine:"			881",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			885",
			toLine:"			885",
			content:"
						
",
,
			fromLine:"			888",
			toLine:"			888",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			891",
			toLine:"			891",
			content:"
			        }			
",
,
			fromLine:"			901",
			toLine:"			902",
			content:"
			        ConcurrentMap<String, MQClientInstance> factoryTable = (ConcurrentMap<String, MQClientInstance>) FieldUtils.readDeclaredField(MQClientManager.getInstance(), "factoryTable", true);
			        factoryTable.put(litePullConsumer.buildMQClientId(), mQClientFactory);			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumerTest.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    @Spy			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    @Mock			
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			    private DefaultMQPullConsumer pullConsumer;
			    private String consumerGroup = "FooBarGroup";
			    private String topic = "FooBar";			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void init() throws Exception {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			                PullMessageRequestHeader requestHeader = mock.getArgument(1);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            }			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			
			        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 0);			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			                PullMessageRequestHeader requestHeader = mock.getArgument(1);			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			            }			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			
			        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 0);			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			                PullMessageRequestHeader requestHeader = mock.getArgument(1);			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			            }			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			
			        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 0);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
						
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        List<MessageExt> messageExtList) throws Exception {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumerTest.java:
		[
			fromLine:"			16",
			toLine:"			85",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
			import org.apache.rocketmq.client.impl.consumer.ConsumeMessageOrderlyService;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullMessageService;
			import org.apache.rocketmq.client.impl.consumer.PullRequest;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.consumer.RebalanceImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.junit.AfterClass;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			87",
			toLine:"			90",
			content:"
			public class DefaultMQPushConsumerTest {
			    private String consumerGroup;
			    private String topic = "FooBar";
			    private String brokerName = "BrokerA";			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    @Mock			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    private PullAPIWrapper pullAPIWrapper;			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			
			        consumerGroup = "FooBarGroup" + System.currentTimeMillis();			
",
,
			fromLine:"			147",
			toLine:"			153",
			content:"
			        pushConsumer.changeInstanceNameToPID();
			        mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(pushConsumer, (RPCHook) FieldUtils.readDeclaredField(pushConsumerImpl, "rpcHook", true));
			        FieldUtils.writeDeclaredField(mQClientFactory, "mQClientAPIImpl", mQClientAPIImpl, true);
			        mQClientFactory = spy(mQClientFactory);
			        factoryTable.put(pushConsumer.buildMQClientId(), mQClientFactory);
			        doReturn(false).when(mQClientFactory).updateTopicRouteInfoFromNameServer(anyString());
			        doReturn(null).when(mQClientFactory).queryAssignment(anyString(), anyString(), anyString(), any(MessageModel.class), anyInt());			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			
			        rebalanceImpl = spy(pushConsumerImpl.getRebalanceImpl());			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        messageQueueSet.add(createPullRequest().getMessageQueue());			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
						
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
						
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
						
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        assertThat(msg).isNotNull();			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			        pushConsumer.getDefaultMQPushConsumerImpl().doRebalance();			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        assertThat(msg).isNotNull();			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
						
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			    private DefaultMQPushConsumer createPushConsumer() {			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
			        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
						
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        }			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			        pushConsumer.getDefaultMQPushConsumerImpl().setConsumeOrderly(true);			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			73",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.Collection;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.stats.StatsItem;
			import org.apache.rocketmq.common.stats.StatsItemSet;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			75",
			toLine:"			78",
			content:"
			public class ConsumeMessageConcurrentlyServiceTest {
			    private String consumerGroup;
			    private String topic = "FooBar";
			    private String brokerName = "BrokerA";			
",
,
			fromLine:"			81",
			toLine:"			84",
			content:"
			    @Mock
			    private MQClientAPIImpl mQClientAPIImpl;
			    private PullAPIWrapper pullAPIWrapper;
			    private RebalancePushImpl rebalancePushImpl;			
",
,
			fromLine:"			95",
			toLine:"			98",
			content:"
			
			        consumerGroup = "FooBarGroup" + System.currentTimeMillis();
			        pushConsumer = new DefaultMQPushConsumer(consumerGroup);
			        pushConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			
			        DefaultMQPushConsumerImpl pushConsumerImpl = pushConsumer.getDefaultMQPushConsumerImpl();			
",
,
			fromLine:"			112",
			toLine:"			113",
			content:"
			        field.setAccessible(true);
			        field.set(pushConsumerImpl, rebalancePushImpl);			
",
,
			fromLine:"			116",
			toLine:"			118",
			content:"
			        // suppress updateTopicRouteInfoFromNameServer
			        pushConsumer.changeInstanceNameToPID();
			        mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(pushConsumer, (RPCHook) FieldUtils.readDeclaredField(pushConsumerImpl, "rpcHook", true));			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			        field.setAccessible(true);
			        field.set(pushConsumerImpl, mQClientFactory);			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
						
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                        MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			                        messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			
			        doReturn(new FindBrokerResult("127.0.0.1:10912", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());			
",
,
			fromLine:"			159",
			toLine:"			160",
			content:"
			        messageQueueSet.add(createPullRequest().getMessageQueue());
			        pushConsumer.getDefaultMQPushConsumerImpl().updateTopicSubscribeInfo(topic, messageQueueSet);			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        });			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
						
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        StatsItemSet itemSet = (StatsItemSet)statItmeSetField.get(mgr);			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			        assertThat(msg).isNotNull();			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
						
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        }			
",
,
			fromLine:"			243",
			toLine:"			244",
			content:"
			        }
			        pushConsumer.setConsumerGroup(consumeGroup2.toString());			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        });			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
						
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			74",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.Collection;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
			
			public class ConsumeMessageOrderlyServiceTest {
			    private String consumerGroup;
			    private String topic = "FooBar";
			    private String brokerName = "BrokerA";
			    private DefaultMQPushConsumer pushConsumer;			
",
,
			fromLine:"			77",
			toLine:"			79",
			content:"
			    @Mock
			    private MQClientAPIImpl mQClientAPIImpl;
			    private PullAPIWrapper pullAPIWrapper;			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			        factoryTable.clear();
			        consumerGroup = "FooBarGroup" + System.currentTimeMillis();			
",
,
			fromLine:"			91",
			toLine:"			92",
			content:"
			
			        pushConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			
			        DefaultMQPushConsumerImpl pushConsumerImpl = pushConsumer.getDefaultMQPushConsumerImpl();			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			        field.setAccessible(true);
			        field.set(pushConsumerImpl, rebalancePushImpl);			
",
,
			fromLine:"			111",
			toLine:"			113",
			content:"
			        // suppress updateTopicRouteInfoFromNameServer
			        pushConsumer.changeInstanceNameToPID();
			        mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(pushConsumer, (RPCHook) FieldUtils.readDeclaredField(pushConsumerImpl, "rpcHook", true));			
",
,
			fromLine:"			116",
			toLine:"			117",
			content:"
			        field.setAccessible(true);
			        field.set(pushConsumerImpl, mQClientFactory);			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                        MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                        messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			151",
			toLine:"			152",
			content:"
			
			        doReturn(new FindBrokerResult("127.0.0.1:10912", false)).when(mQClientFactory).findBrokerAddressInSubscribe(anyString(), anyLong(), anyBoolean());			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			        messageQueueSet.add(createPullRequest().getMessageQueue());
			        pushConsumer.getDefaultMQPushConsumerImpl().updateTopicSubscribeInfo(topic, messageQueueSet);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			            MessageExt msg = new MessageExt();
			            msg.setTopic(topic);			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			197",
			content:"
			        MessageExt msg = new MessageExt();
			        msg.setTopic(topic);			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			        }			
",
,
			fromLine:"			219",
			toLine:"			220",
			content:"
			        };
			        ConsumeMessageOrderlyService consumeMessageOrderlyService = new ConsumeMessageOrderlyService(pushConsumer.getDefaultMQPushConsumerImpl(), listenerOrderly);			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
						
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
						
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        }			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithOpenTracingTest.java:
		[
			fromLine:"			17",
			toLine:"			88",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import io.opentracing.mock.MockSpan;
			import io.opentracing.mock.MockTracer;
			import io.opentracing.tag.Tags;
			import java.io.ByteArrayOutputStream;
			import java.net.InetSocketAddress;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.Callable;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullMessageService;
			import org.apache.rocketmq.client.impl.consumer.PullRequest;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.consumer.RebalancePushImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.trace.hook.ConsumeMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.waitAtMost;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			public class DefaultMQConsumerWithOpenTracingTest {			
",
,
			fromLine:"			92",
			toLine:"			94",
			content:"
			
			    private String topic = "FooBar";
			    private String brokerName = "BrokerA";			
",
,
			fromLine:"			97",
			toLine:"			101",
			content:"
			    @Mock
			    private MQClientAPIImpl mQClientAPIImpl;
			    private PullAPIWrapper pullAPIWrapper;
			    private RebalancePushImpl rebalancePushImpl;
			    private DefaultMQPushConsumer pushConsumer;			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			131",
			toLine:"			136",
			content:"
			
			        consumerGroup = "FooBarGroup" + System.currentTimeMillis();
			        pushConsumer = new DefaultMQPushConsumer(consumerGroup);
			        pushConsumer.getDefaultMQPushConsumerImpl().registerConsumeMessageHook(
			            new ConsumeMessageOpenTracingHookImpl(tracer));
			        pushConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        // disable trace to let mock trace work			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        Mockito.when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(0L);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
						
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			160",
			content:"
			        // suppress updateTopicRouteInfoFromNameServer
			        pushConsumer.changeInstanceNameToPID();
			        mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(pushConsumer, (RPCHook) FieldUtils.readDeclaredField(pushConsumerImpl, "rpcHook", true));
			        FieldUtils.writeDeclaredField(mQClientFactory, "mQClientAPIImpl", mQClientAPIImpl, true);
			        mQClientFactory = spy(mQClientFactory);
			        factoryTable.put(pushConsumer.buildMQClientId(), mQClientFactory);			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        messageQueueSet.add(createPullRequest().getMessageQueue());			
",
,
			fromLine:"			168",
			toLine:"			169",
			content:"
			
			        pushConsumer.subscribe(topic, "*");			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        assertThat(msg).isNotNull();			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			            public Object call() throws Exception {			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			
			        MockSpan span = tracer.finishedSpans().get(0);			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        }			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQConsumerWithTraceTest.java:
		[
			fromLine:"			17",
			toLine:"			91",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.ConsumeMessageConcurrentlyService;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullMessageService;
			import org.apache.rocketmq.client.impl.consumer.PullRequest;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.consumer.RebalancePushImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			public class DefaultMQConsumerWithTraceTest {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    private String consumerGroupNormal;			
",
,
			fromLine:"			97",
			toLine:"			99",
			content:"
			
			    private String topic = "FooBar";
			    private String brokerName = "BrokerA";			
",
,
			fromLine:"			102",
			toLine:"			105",
			content:"
			    @Mock
			    private MQClientAPIImpl mQClientAPIImpl;
			    private PullAPIWrapper pullAPIWrapper;
			    private RebalancePushImpl rebalancePushImpl;			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			114",
			content:"
			    private MQClientAPIImpl mQClientTraceAPIImpl;
			    private DefaultMQProducer traceProducer;			
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			
			        consumerGroup = "FooBarGroup" + System.currentTimeMillis();			
",
,
			fromLine:"			128",
			toLine:"			131",
			content:"
			        normalPushConsumer = new DefaultMQPushConsumer(consumerGroupNormal, false, "");
			        customTraceTopicPushConsumer = new DefaultMQPushConsumer(consumerGroup, true, customerTraceTopic);
			        pushConsumer.setNamesrvAddr("127.0.0.1:9876");
			        pushConsumer.setUseTLS(true);			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			147",
			content:"
			        // suppress updateTopicRouteInfoFromNameServer
			        pushConsumer.changeInstanceNameToPID();
			        mQClientFactory = spy(MQClientManager.getInstance().getOrCreateMQClientInstance(pushConsumer, (RPCHook) FieldUtils.readDeclaredField(pushConsumerImpl, "rpcHook", true)));
			        factoryTable.put(pushConsumer.buildMQClientId(), mQClientFactory);			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			152",
			toLine:"			153",
			content:"
			        field.setAccessible(true);
			        field.set(pushConsumerImpl, rebalancePushImpl);			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			158",
			content:"
			
			        asyncTraceDispatcher = (AsyncTraceDispatcher) pushConsumer.getTraceDispatcher();			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			        fieldTrace.setAccessible(true);			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			184",
			toLine:"			185",
			content:"
			
			        pushConsumer.getDefaultMQPushConsumerImpl().getRebalanceImpl().setmQClientFactory(mQClientFactory);			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
						
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			        messageQueueSet.add(createPullRequest().getMessageQueue());			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public void testPullMessage_WithTrace_Success() throws InterruptedException, RemotingException, MQBrokerException, MQClientException {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        final AtomicReference<MessageExt> messageAtomic = new AtomicReference<>();			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
						
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        assertThat(msg).isNotNull();			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			    public void testPushConsumerWithTraceTLS() {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			        messageQueue.setQueueId(0);			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,
			fromLine:"			269",
			toLine:"			269",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        }			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQLitePullConsumerWithTraceTest.java:
		[
			fromLine:"			16",
			toLine:"			83",
			content:"
			 */
			package org.apache.rocketmq.client.trace;
			
			import java.io.ByteArrayOutputStream;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.PullAPIWrapper;
			import org.apache.rocketmq.client.impl.consumer.PullResultExt;
			import org.apache.rocketmq.client.impl.consumer.RebalanceImpl;
			import org.apache.rocketmq.client.impl.consumer.RebalanceService;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.BeforeClass;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    @Spy			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    @Mock			
",
,
			fromLine:"			94",
			toLine:"			95",
			content:"
			
			    private AsyncTraceDispatcher asyncTraceDispatcher;			
",
,
			fromLine:"			99",
			toLine:"			102",
			content:"
			    private DefaultLitePullConsumerImpl litePullConsumerImpl;
			    private String consumerGroup = "LitePullConsumerGroup";
			    private String topic = "LitePullConsumerTest";
			    private String brokerName = "BrokerA";			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			            messageQueueSet.add(createMessageQueue());			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			            messageQueueSet.add(createMessageQueue());			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			            List<MessageExt> result = litePullConsumer.poll();			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    private DefaultLitePullConsumer createLitePullConsumerWithDefaultTraceTopic() throws Exception {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        litePullConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			    private DefaultLitePullConsumer createLitePullConsumerWithCustomizedTraceTopic() throws Exception {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        litePullConsumer.setEnableMsgTrace(true);			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        litePullConsumer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			    private void initDefaultLitePullConsumer(DefaultLitePullConsumer litePullConsumer) throws Exception {
			        asyncTraceDispatcher = (AsyncTraceDispatcher) litePullConsumer.getTraceDispatcher();			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        fieldTrace.setAccessible(true);			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
						
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
						
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			                    MessageClientExt messageClientExt = new MessageClientExt();			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			                    messageClientExt.setStoreHost(new InetSocketAddress(8080));			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
						
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
						
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			        }			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			        MessageQueue messageQueue = new MessageQueue();			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			        messageQueue.setQueueId(0);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ConsumeMessageDirectlyResultRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNullable			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @CFNullable			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @CFNullable			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			112",
			toLine:"			116",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("clientId", clientId)
			            .add("msgId", msgId)
			            .add("brokerName", brokerName)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/PeekMessageRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public int getMaxMsgNums() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setMaxMsgNums(int maxMsgNums) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/PollingInfoRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        }			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryConsumeQueueRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			31",
			toLine:"			34",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)
			    private String topic;
			    private int queueId;
			    private long index;			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public long getIndex() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setIndex(long index) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public int getCount() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setCount(int count) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/StatisticsMessagesRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        }			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerReplicasInfo.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			
			        private String masterAddress;
			        private Integer masterEpoch;			
",
,
			fromLine:"			57",
			toLine:"			60",
			content:"
			                            List<ReplicaIdentity> inSyncReplicas, List<ReplicaIdentity> notInSyncReplicas) {
			            this.masterBrokerId = masterBrokerId;
			            this.masterAddress = masterAddress;
			            this.masterEpoch = masterEpoch;			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        public String getMasterAddress() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        public void setMasterAddress(String masterAddress) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        public int getMasterEpoch() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        public void setMasterEpoch(int masterEpoch) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        public int getSyncStateSetEpoch() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        public void setSyncStateSetEpoch(int syncStateSetEpoch) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        public Long getMasterBrokerId() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        public boolean isExistInSync(String brokerName, Long brokerId, String brokerAddress) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        public boolean isExistInNotSync(String brokerName, Long brokerId, String brokerAddress) {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        public boolean isExistInAllReplicas(String brokerName, Long brokerId, String brokerAddress) {			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			    public static class ReplicaIdentity extends RemotingSerializable {
			        private String brokerName;			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
						
",
,
			fromLine:"			136",
			toLine:"			138",
			content:"
			        public ReplicaIdentity(String brokerName, Long brokerId, String brokerAddress) {
			            this.brokerName = brokerName;
			            this.brokerId = brokerId;			
",
,
			fromLine:"			143",
			toLine:"			145",
			content:"
			        public ReplicaIdentity(String brokerName, Long brokerId, String brokerAddress, Boolean alive) {
			            this.brokerName = brokerName;
			            this.brokerId = brokerId;			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        public String getBrokerName() {			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			        public String getBrokerAddress() {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        public void setBrokerAddress(String brokerAddress) {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        public Long getBrokerId() {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        public void setBrokerId(Long brokerId) {			
",
,
			fromLine:"			184",
			toLine:"			186",
			content:"
			            return "ReplicaIdentity{" +
			                    "brokerName='" + brokerName + '\'' +
			                    ", brokerId=" + brokerId +			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			            ReplicaIdentity that = (ReplicaIdentity) o;			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        public int hashCode() {			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/event/ApplyBrokerIdEvent.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.event;
						
",
,
			fromLine:"			23",
			toLine:"			25",
			content:"
			public class ApplyBrokerIdEvent implements EventMessage {
			    private final String clusterName;
			    private final String brokerName;			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			        String registerCheckCode) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        this.newBrokerId = newBrokerId;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getBrokerAddress() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getRegisterCheckCode() {			
",
,
			fromLine:"			68",
			toLine:"			71",
			content:"
			        return "ApplyBrokerIdEvent{" +
			            "clusterName='" + clusterName + '\'' +
			            ", brokerName='" + brokerName + '\'' +
			            ", brokerAddress='" + brokerAddress + '\'' +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/register/ApplyBrokerIdRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.controller.register;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			45",
			content:"
			    public ApplyBrokerIdRequestHeader(String clusterName, String brokerName, Long appliedBrokerId, String registerCheckCode) {
			        this.clusterName = clusterName;			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        this.appliedBrokerId = appliedBrokerId;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public String getRegisterCheckCode() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void setRegisterCheckCode(String registerCheckCode) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			73",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import io.opentelemetry.api.common.Attributes;
			import java.net.SocketAddress;
			import java.util.List;
			import java.util.Map;
			import java.util.Optional;
			import java.util.Random;
			import java.util.concurrent.ThreadLocalRandom;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;
			import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
			import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
			import org.apache.rocketmq.common.AbortProcessException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.DBMsgConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageType;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.sysflag.TopicSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRemotingAbstract;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			
			public abstract class AbstractSendMessageProcessor implements NettyRequestProcessor {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    protected final static int DLQ_NUMS_PER_GROUP = 1;			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public AbstractSendMessageProcessor(final BrokerController brokerController) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void registerConsumeMessageHook(List<ConsumeMessageHook> consumeMessageHookList) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        // The send back requests sent to SlaveBroker will be forwarded to the master broker beside			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        // It may be a master broker or a slave broker			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        // Create retry topic to master broker			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			            // Create DLQ topic to master broker			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			                    if (isDLQ) {			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			    public boolean hasConsumeMessageHook() {			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			        if (hasConsumeMessageHook()) {			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
						
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			        SendMessageRequestHeader requestHeader, RemotingCommand request) {			
",
,
			fromLine:"			358",
			toLine:"			366",
			content:"
			        sendMessageContext.setNamespace(namespace);
			        sendMessageContext.setProducerGroup(requestHeader.getProducerGroup());
			        sendMessageContext.setTopic(requestHeader.getTopic());
			        sendMessageContext.setBodyLength(request.getBody().length);
			        sendMessageContext.setMsgProps(requestHeader.getProperties());
			        sendMessageContext.setBornHost(RemotingHelper.parseChannelRemoteAddr(ctx.channel()));
			        sendMessageContext.setBrokerAddr(this.brokerController.getBrokerAddr());
			        sendMessageContext.setQueueId(requestHeader.getQueueId());
			        sendMessageContext.setBrokerRegionId(this.brokerController.getBrokerConfig().getRegionId());			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
						
",
,
			fromLine:"			372",
			toLine:"			375",
			content:"
			
			        Map<String, String> properties = MessageDecoder.string2messageProperties(requestHeader.getProperties());
			        properties.put(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());
			        properties.put(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(this.brokerController.getBrokerConfig().isTraceOn()));			
",
,
			fromLine:"			425",
			toLine:"			425",
			content:"
			    public SocketAddress getStoreHost() {			
",
,
			fromLine:"			428",
			toLine:"			428",
			content:"
						
",
,
			fromLine:"			431",
			toLine:"			431",
			content:"
			        final RemotingCommand response) {			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			        if (topic.length() > Byte.MAX_VALUE) {			
",
,
			fromLine:"			435",
			toLine:"			436",
			content:"
			                topic, topic.length(), Byte.MAX_VALUE);
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			438",
			toLine:"			439",
			content:"
			        }
			        if (requestHeader.getProperties() != null && requestHeader.getProperties().length() > Short.MAX_VALUE) {			
",
,
			fromLine:"			441",
			toLine:"			443",
			content:"
			                "msgContentCheck: message properties length is too long, topic={}, properties length={}, threshold={}",
			                topic, requestHeader.getProperties().length(), Short.MAX_VALUE);
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			445",
			toLine:"			446",
			content:"
			        }
			        if (request.getBody().length > DBMsgConstants.MAX_BODY_SIZE) {			
",
,
			fromLine:"			448",
			toLine:"			451",
			content:"
			                "msgContentCheck: message body size exceeds the threshold, topic={}, body size={}, threshold={}bytes",
			                topic, request.getBody().length, DBMsgConstants.MAX_BODY_SIZE);
			            response.setRemark("msg body must be less 64KB");
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			        }			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
						
",
,
			fromLine:"			459",
			toLine:"			462",
			content:"
			        final RemotingCommand response) {
			        if (!PermName.isWriteable(this.brokerController.getBrokerConfig().getBrokerPermission())
			            && this.brokerController.getTopicConfigManager().isOrderTopic(requestHeader.getTopic())) {
			            response.setCode(ResponseCode.NO_PERMISSION);			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			                + "] sending message is forbidden");			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
						
",
,
			fromLine:"			469",
			toLine:"			471",
			content:"
			        if (!result.isValid()) {
			            response.setCode(ResponseCode.SYSTEM_ERROR);
			            response.setRemark(result.getRemark());			
",
,
			fromLine:"			473",
			toLine:"			476",
			content:"
			        }
			        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic())) {
			            response.setCode(ResponseCode.NO_PERMISSION);
			            response.setRemark("Sending message to topic[" + requestHeader.getTopic() + "] is forbidden.");			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
			        TopicConfig topicConfig =			
",
,
			fromLine:"			483",
			toLine:"			484",
			content:"
			            int topicSysFlag = 0;
			            if (requestHeader.isUnitMode()) {			
",
,
			fromLine:"			491",
			toLine:"			496",
			content:"
			
			            LOGGER.warn("the topic {} not exist, producer: {}", requestHeader.getTopic(), ctx.channel().remoteAddress());
			            topicConfig = this.brokerController.getTopicConfigManager().createTopicInSendMessageMethod(
			                requestHeader.getTopic(),
			                requestHeader.getDefaultTopic(),
			                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),			
",
,
			fromLine:"			499",
			toLine:"			499",
			content:"
			            if (null == topicConfig) {			
",
,
			fromLine:"			501",
			toLine:"			502",
			content:"
			                    topicConfig =
			                        this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(			
",
,
			fromLine:"			508",
			toLine:"			509",
			content:"
			            if (null == topicConfig) {
			                response.setCode(ResponseCode.TOPIC_NOT_EXIST);			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
			                    + FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL));			
",
,
			fromLine:"			515",
			toLine:"			515",
			content:"
						
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			                topicConfig,			
",
,
			fromLine:"			523",
			toLine:"			525",
			content:"
			
			            LOGGER.warn(errorInfo);
			            response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			527",
			toLine:"			527",
			content:"
						
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
			        }			
",
,
			fromLine:"			536",
			toLine:"			536",
			content:"
						
",
,
			fromLine:"			538",
			toLine:"			538",
			content:"
			        final RemotingCommand response) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessor.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import io.opentelemetry.api.common.Attributes;
			import java.net.InetSocketAddress;
			import java.util.concurrent.ThreadLocalRandom;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ReplyMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_MESSAGE_TYPE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			114",
			content:"
			
			        response.addExtField(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());			
",
,
			fromLine:"			116",
			toLine:"			118",
			content:
{

        log.debug("receive SendReplyMessage request command, ", request);
        final long startTimstamp = this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp();						
}
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        response.setCode(-1);			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			
			        int queueIdInt = requestHeader.getQueueId();			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();			
",
,
			fromLine:"			143",
			toLine:"			147",
			content:"
			        msgInner.setBody(body);
			        msgInner.setFlag(requestHeader.getFlag());
			        MessageAccessor.setProperties(msgInner, MessageDecoder.string2messageProperties(requestHeader.getProperties()));
			        msgInner.setPropertiesString(requestHeader.getProperties());
			        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        msgInner.setStoreHost(this.getStoreHost());			
",
,
			fromLine:"			151",
			toLine:"			152",
			content:"
			
			        PushReplyResult pushReplyResult = this.pushReplyMessage(ctx, requestHeader, msgInner);			
",
,
			fromLine:"			154",
			toLine:"			156",
			content:"
			
			        if (this.brokerController.getBrokerConfig().isStoreReplyMessageEnable()) {
			            PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        if (senderId != null) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			                try {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
						
",
,
			fromLine:"			231",
			toLine:"			232",
			content:"
			        if (!pushReplyResult.isPushOk()) {
			            response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			234",
			toLine:"			235",
			content:"
			        } else {
			            response.setCode(ResponseCode.SUCCESS);			
",
,
			fromLine:"			237",
			toLine:"			239",
			content:"
			            //set to zero to avoid client decoding exception
			            responseHeader.setMsgId("0");
			            responseHeader.setQueueId(queueIdInt);			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
						
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			        int queueIdInt, TopicMessageType messageType) {			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
						
",
,
			fromLine:"			269",
			toLine:"			269",
			content:
{
                    "the message is illegal, maybe msg body or properties length not matched. msg body length limit B.",						
}
,
			fromLine:"			291",
			toLine:"			292",
			content:"
			
			        String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);			
",
,
			fromLine:"			294",
			toLine:"			297",
			content:"
			        if (putOk) {
			            this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);
			            this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),
			                putMessageResult.getAppendMessageResult().getWroteBytes());			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
						
",
,
			fromLine:"			301",
			toLine:"			303",
			content:"
			                Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                    .put(LABEL_TOPIC, msg.getTopic())
			                    .put(LABEL_MESSAGE_TYPE, messageType.getMetricsValue())			
",
,
			fromLine:"			305",
			toLine:"			307",
			content:"
			                    .build();
			                BrokerMetricsManager.messagesInTotal.add(putMessageResult.getAppendMessageResult().getMsgNum(), attributes);
			                BrokerMetricsManager.throughputInTotal.add(putMessageResult.getAppendMessageResult().getWroteBytes(), attributes);			
",
,
			fromLine:"			310",
			toLine:"			312",
			content:"
			
			            responseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());
			            responseHeader.setQueueId(queueIdInt);			
",
,
			fromLine:"			315",
			toLine:"			317",
			content:"
			            if (hasSendMessageHook()) {
			                sendMessageContext.setMsgId(responseHeader.getMsgId());
			                sendMessageContext.setQueueId(responseHeader.getQueueId());			
",
,
			fromLine:"			319",
			toLine:"			320",
			content:"
			
			                int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();			
",
,
			fromLine:"			323",
			toLine:"			326",
			content:"
			
			                sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);
			                sendMessageContext.setCommercialSendTimes(incValue);
			                sendMessageContext.setCommercialSendSize(wroteSize);			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			            if (hasSendMessageHook()) {			
",
,
			fromLine:"			333",
			toLine:"			336",
			content:"
			
			                sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);
			                sendMessageContext.setCommercialSendTimes(incValue);
			                sendMessageContext.setCommercialSendSize(wroteSize);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			79",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import io.opentelemetry.api.common.Attributes;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
			import org.apache.rocketmq.common.AbortProcessException;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CleanupPolicy;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.CleanupPolicyUtils;
			import org.apache.rocketmq.common.utils.MessageUtils;
			import org.apache.rocketmq.common.utils.QueueTypeUtils;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			import java.nio.ByteBuffer;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Optional;
			import java.util.concurrent.CompletableFuture;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CONSUMER_GROUP;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_IS_SYSTEM;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_MESSAGE_TYPE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
						
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			                }
			                TopicQueueMappingContext mappingContext = this.brokerController.getTopicQueueMappingManager().buildTopicQueueMappingContext(requestHeader, true);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                }			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                if (requestHeader.isBatch()) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			                } else {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public boolean rejectRequest() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        MessageExt msg, TopicConfig topicConfig, Map<String, String> properties) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			            SubscriptionGroupConfig subscriptionGroupConfig =			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			            if (null == subscriptionGroupConfig) {
			                response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);			
",
,
			fromLine:"			194",
			toLine:"			195",
			content:"
			            int maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();
			            if (request.getVersion() >= MQVersion.Version.V3_4_9.ordinal() && requestHeader.getMaxReconsumeTimes() != null) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            }			
",
,
			fromLine:"			200",
			toLine:"			201",
			content:"
			            boolean sendRetryMessageToDeadLetterQueueDirectly = false;
			            if (!brokerController.getRebalanceLockManager().isLockAllExpired(groupName)) {			
",
,
			fromLine:"			209",
			toLine:"			211",
			content:"
			                Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                    .put(LABEL_CONSUMER_GROUP, requestHeader.getProducerGroup())
			                    .put(LABEL_TOPIC, requestHeader.getTopic())			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			                int queueIdInt = randomQueueId(DLQ_NUMS_PER_GROUP);			
",
,
			fromLine:"			222",
			toLine:"			224",
			content:"
			                );
			                msg.setTopic(newTopic);
			                msg.setQueueId(queueIdInt);			
",
,
			fromLine:"			226",
			toLine:"			227",
			content:"
			                if (null == topicConfig) {
			                    response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        }			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        }			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
						
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
						
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			256",
			toLine:"			257",
			content:"
			
			        int queueIdInt = requestHeader.getQueueId();			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();			
",
,
			fromLine:"			267",
			toLine:"			268",
			content:"
			
			        Map<String, String> oriProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        msgInner.setBody(body);			
",
,
			fromLine:"			293",
			toLine:"			294",
			content:"
			        msgInner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(topicConfig.getTopicFilterType(), msgInner.getTags()));
			        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());			
",
,
			fromLine:"			296",
			toLine:"			297",
			content:"
			        msgInner.setStoreHost(this.getStoreHost());
			        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes());			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			            && !(msgInner.getReconsumeTimes() > 0 && msgInner.getDelayTimeLevel() > 0)) { //For client under version 4.6.1			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			                response.setRemark(			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
						
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			            if (sendTransactionPrepareMessage) {			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			            } else {			
",
,
			fromLine:"			333",
			toLine:"			334",
			content:"
			                RemotingCommand responseFuture =
			                    handlePutMessageResult(putMessageResult, response, request, finalMsgInner, responseHeader, sendMessageContext,			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			                if (responseFuture != null) {			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			                if (sendTransactionPrepareMessage && (responseFuture == null || responseFuture.getCode() == ResponseCode.SUCCESS)) {			
",
,
			fromLine:"			344",
			toLine:"			345",
			content:"
			
			                sendMessageCallback.onComplete(sendMessageContext, response);			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			            if (sendTransactionPrepareMessage) {			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			            } else {			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			            }			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			            if (putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK && putMessageResult.getAppendMessageResult().isOk()) {			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			            }			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
						
",
,
			fromLine:"			369",
			toLine:"			372",
			content:"
			        TopicQueueMappingContext mappingContext, TopicMessageType messageType) {
			        if (putMessageResult == null) {
			            response.setCode(ResponseCode.SYSTEM_ERROR);
			            response.setRemark("store putMessage return null");			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
						
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			                sendOK = true;			
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
			            case FLUSH_DISK_TIMEOUT:			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			            case FLUSH_SLAVE_TIMEOUT:			
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
			            case SLAVE_NOT_AVAILABLE:			
",
,
			fromLine:"			397",
			toLine:"			398",
			content:"
			            case IN_SYNC_REPLICAS_NOT_ENOUGH:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			401",
			toLine:"			402",
			content:"
			            case CREATE_MAPPED_FILE_FAILED:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			406",
			toLine:"			408",
			content:"
			            case PROPERTIES_SIZE_EXCEEDED:
			                response.setCode(ResponseCode.MESSAGE_ILLEGAL);
			                response.setRemark(String.format("the message is illegal, maybe msg body or properties length not matched. msg body length limit %dB, msg properties length limit 32KB.",			
",
,
			fromLine:"			411",
			toLine:"			413",
			content:"
			            case WHEEL_TIMER_MSG_ILLEGAL:
			                response.setCode(ResponseCode.MESSAGE_ILLEGAL);
			                response.setRemark(String.format("timer message illegal, the delay time should not be bigger than the max delay %dms; or if set del msg, the delay time should be bigger than the current time",			
",
,
			fromLine:"			416",
			toLine:"			418",
			content:"
			            case WHEEL_TIMER_FLOW_CONTROL:
			                response.setCode(ResponseCode.SYSTEM_ERROR);
			                response.setRemark(String.format("timer message is under flow control, max num limit is %d or the current value is greater than %d and less than %d, trigger random flow control",			
",
,
			fromLine:"			421",
			toLine:"			423",
			content:"
			            case WHEEL_TIMER_NOT_ENABLE:
			                response.setCode(ResponseCode.SYSTEM_ERROR);
			                response.setRemark(String.format("accurate timer message is not enabled, timerWheelEnable is %s",			
",
,
			fromLine:"			426",
			toLine:"			427",
			content:"
			            case SERVICE_NOT_AVAILABLE:
			                response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);			
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			            case OS_PAGE_CACHE_BUSY:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			436",
			toLine:"			437",
			content:"
			            case LMQ_CONSUME_QUEUE_NUM_EXCEEDED:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			440",
			toLine:"			441",
			content:"
			            case UNKNOWN_ERROR:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			444",
			toLine:"			445",
			content:"
			            default:
			                response.setCode(ResponseCode.SYSTEM_ERROR);			
",
,
			fromLine:"			449",
			toLine:"			453",
			content:"
			
			        String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);
			        String authType = request.getExtFields().get(BrokerStatsManager.ACCOUNT_AUTH_TYPE);
			        String ownerParent = request.getExtFields().get(BrokerStatsManager.ACCOUNT_OWNER_PARENT);
			        String ownerSelf = request.getExtFields().get(BrokerStatsManager.ACCOUNT_OWNER_SELF);			
",
,
			fromLine:"			456",
			toLine:"			458",
			content:"
			
			            if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(msg.getTopic())) {
			                this.brokerController.getBrokerStatsManager().incQueuePutNums(msg.getTopic(), msg.getQueueId(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);			
",
,
			fromLine:"			461",
			toLine:"			466",
			content:"
			
			            this.brokerController.getBrokerStatsManager().incTopicPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum(), 1);
			            this.brokerController.getBrokerStatsManager().incTopicPutSize(msg.getTopic(),
			                putMessageResult.getAppendMessageResult().getWroteBytes());
			            this.brokerController.getBrokerStatsManager().incBrokerPutNums(msg.getTopic(), putMessageResult.getAppendMessageResult().getMsgNum());
			            this.brokerController.getBrokerStatsManager().incTopicPutLatency(msg.getTopic(), queueIdInt,			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
						
",
,
			fromLine:"			470",
			toLine:"			472",
			content:"
			                Attributes attributes = BrokerMetricsManager.newAttributesBuilder()
			                    .put(LABEL_TOPIC, msg.getTopic())
			                    .put(LABEL_MESSAGE_TYPE, messageType.getMetricsValue())			
",
,
			fromLine:"			474",
			toLine:"			476",
			content:"
			                    .build();
			                BrokerMetricsManager.messagesInTotal.add(putMessageResult.getAppendMessageResult().getMsgNum(), attributes);
			                BrokerMetricsManager.throughputInTotal.add(putMessageResult.getAppendMessageResult().getWroteBytes(), attributes);			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
						
",
,
			fromLine:"			481",
			toLine:"			484",
			content:"
			
			            responseHeader.setMsgId(putMessageResult.getAppendMessageResult().getMsgId());
			            responseHeader.setQueueId(queueIdInt);
			            responseHeader.setQueueOffset(putMessageResult.getAppendMessageResult().getLogicsOffset());			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
						
",
,
			fromLine:"			491",
			toLine:"			491",
			content:"
						
",
,
			fromLine:"			494",
			toLine:"			496",
			content:"
			            if (hasSendMessageHook()) {
			                sendMessageContext.setMsgId(responseHeader.getMsgId());
			                sendMessageContext.setQueueId(responseHeader.getQueueId());			
",
,
			fromLine:"			498",
			toLine:"			500",
			content:"
			
			                int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();
			                int wroteSize = putMessageResult.getAppendMessageResult().getWroteBytes();			
",
,
			fromLine:"			504",
			toLine:"			507",
			content:"
			
			                sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_SUCCESS);
			                sendMessageContext.setCommercialSendTimes(incValue);
			                sendMessageContext.setCommercialSendSize(wroteSize);			
",
,
			fromLine:"			509",
			toLine:"			515",
			content:"
			
			                sendMessageContext.setSendStat(BrokerStatsManager.StatsType.SEND_SUCCESS);
			                sendMessageContext.setCommercialSendMsgNum(commercialMsgNum);
			                sendMessageContext.setAccountAuthType(authType);
			                sendMessageContext.setAccountOwnerParent(ownerParent);
			                sendMessageContext.setAccountOwnerSelf(ownerSelf);
			                sendMessageContext.setSendMsgSize(wroteSize);			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			            if (hasSendMessageHook()) {			
",
,
			fromLine:"			523",
			toLine:"			523",
			content:"
			                // TODO process partial failures of batch message			
",
,
			fromLine:"			527",
			toLine:"			530",
			content:"
			
			                sendMessageContext.setCommercialSendStats(BrokerStatsManager.StatsType.SEND_FAILURE);
			                sendMessageContext.setCommercialSendTimes(commercialMsgNum);
			                sendMessageContext.setCommercialSendSize(wroteSize);			
",
,
			fromLine:"			532",
			toLine:"			538",
			content:"
			
			                sendMessageContext.setSendStat(BrokerStatsManager.StatsType.SEND_FAILURE);
			                sendMessageContext.setCommercialSendMsgNum(commercialMsgNum);
			                sendMessageContext.setAccountAuthType(authType);
			                sendMessageContext.setAccountOwnerParent(ownerParent);
			                sendMessageContext.setAccountOwnerSelf(ownerSelf);
			                sendMessageContext.setSendMsgSize(wroteSize);			
",
,
			fromLine:"			541",
			toLine:"			541",
			content:"
			        }			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
						
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			        final SendMessageCallback sendMessageCallback) {			
",
,
			fromLine:"			557",
			toLine:"			558",
			content:"
			
			        int queueIdInt = requestHeader.getQueueId();			
",
,
			fromLine:"			564",
			toLine:"			564",
			content:"
						
",
,
			fromLine:"			566",
			toLine:"			566",
			content:"
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
						
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			            response.setCode(ResponseCode.MESSAGE_ILLEGAL);			
",
,
			fromLine:"			576",
			toLine:"			576",
			content:"
			        MessageExtBatch messageExtBatch = new MessageExtBatch();			
",
,
			fromLine:"			579",
			toLine:"			579",
			content:"
						
",
,
			fromLine:"			585",
			toLine:"			589",
			content:"
			
			        messageExtBatch.setFlag(requestHeader.getFlag());
			        MessageAccessor.setProperties(messageExtBatch, MessageDecoder.string2messageProperties(requestHeader.getProperties()));
			        messageExtBatch.setBody(request.getBody());
			        messageExtBatch.setBornTimestamp(requestHeader.getBornTimestamp());			
",
,
			fromLine:"			591",
			toLine:"			592",
			content:"
			        messageExtBatch.setStoreHost(this.getStoreHost());
			        messageExtBatch.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes());			
",
,
			fromLine:"			614",
			toLine:"			614",
			content:"
						
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
						
",
,
			fromLine:"			619",
			toLine:"			619",
			content:"
			            if (isInnerBatch) {			
",
,
			fromLine:"			621",
			toLine:"			621",
			content:"
			            } else {			
",
,
			fromLine:"			626",
			toLine:"			627",
			content:"
			                RemotingCommand responseFuture =
			                    handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader,			
",
,
			fromLine:"			629",
			toLine:"			629",
			content:"
			                if (responseFuture != null) {			
",
,
			fromLine:"			631",
			toLine:"			632",
			content:"
			                }
			                sendMessageCallback.onComplete(sendMessageContext, response);			
",
,
			fromLine:"			638",
			toLine:"			638",
			content:"
			            if (isInnerBatch) {			
",
,
			fromLine:"			640",
			toLine:"			640",
			content:"
			            } else {			
",
,
			fromLine:"			642",
			toLine:"			644",
			content:"
			            }
			            handlePutMessageResult(putMessageResult, response, request, messageExtBatch, responseHeader,
			                sendMessageContext, ctx, queueIdInt, beginTimeMillis, mappingContext, BrokerMetricsManager.getMessageType(requestHeader));			
",
,
			fromLine:"			652",
			toLine:"			652",
			content:"
			        String storePath;			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			        } else {			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			        String storePathLogis =			
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
			        String storePathIndex =			
",
,
			fromLine:"			674",
			toLine:"			674",
			content:"
						
",
,
			fromLine:"			678",
			toLine:"			678",
			content:"
						
",
,
			fromLine:"			680",
			toLine:"			681",
			content:"
			
			        response.addExtField(MessageConst.PROPERTY_MSG_REGION, this.brokerController.getBrokerConfig().getRegionId());			
",
,
			fromLine:"			683",
			toLine:"			683",
			content:"
						
",
,
			fromLine:"			685",
			toLine:"			685",
			content:"
						
",
,
			fromLine:"			687",
			toLine:"			687",
			content:"
						
",
,
			fromLine:"			694",
			toLine:"			694",
			content:"
			        response.setCode(-1);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/PopMessageResponseHeader.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public long getRestNum() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setRestNum(long restNum) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public int getReviveQid() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void setReviveQid(int reviveQid) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStoreTest.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.store;
			
			import java.io.File;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.Map;
			
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			39",
			toLine:"			42",
			content:"
			    @Mock
			    private MQClientInstance mQClientFactory;
			    private String group = "FooBarGroup";
			    private String topic = "FooBar";			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        String clientId = new ClientConfig().buildMQClientId() + "#TestNamespace" + System.currentTimeMillis();			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    public void testUpdateOffset() throws Exception {
			        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			    public void testReadOffset_FromStore() throws Exception {
			        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			80",
			toLine:"			81",
			content:"
			    public void testCloneOffset() throws Exception {
			        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        offsetStore.updateOffset(messageQueue, 1024, false);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public void testPersist() throws Exception {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void testPersistAll() throws Exception {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			
			        MessageQueue messageQueue1 = new MessageQueue(topic, brokerName, 1);			
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			    public void testRemoveOffset() throws Exception {
			        OffsetStore offsetStore = new LocalFileOffsetStore(mQClientFactory, group);			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStoreTest.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.store;
			
			import java.util.Collections;
			import java.util.HashSet;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.OffsetNotFoundException;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.doThrow;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    @Mock			
",
,
			fromLine:"			54",
			toLine:"			56",
			content:"
			    private MQClientAPIImpl mqClientAPI;
			    private String group = "FooBarGroup";
			    private String topic = "FooBar";			
",
,
			fromLine:"			62",
			toLine:"			65",
			content:"
			        String clientId = new ClientConfig().buildMQClientId() + "#TestNamespace" + System.currentTimeMillis();
			        when(mQClientFactory.getClientId()).thenReturn(clientId);
			        when(mQClientFactory.findBrokerAddressInSubscribe(brokerName, MixAll.MASTER_ID, false)).thenReturn(new FindBrokerResult("127.0.0.1", false));
			        when(mQClientFactory.getMQClientAPIImpl()).thenReturn(mqClientAPI);			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			    public void testUpdateOffset() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			    public void testUpdateAndFreezeOffset() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			    public void testUpdateAndFreezeOffsetWithRemove() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			117",
			toLine:"			118",
			content:"
			    public void testReadOffset_WithException() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			    public void testReadOffset_Success() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			            }			
",
,
			fromLine:"			169",
			toLine:"			170",
			content:"
			    public void testRemoveOffset() throws Exception {
			        OffsetStore offsetStore = new RemoteBrokerOffsetStore(mQClientFactory, group);			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			50",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.ChannelPromise;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    @Mock			
",
,
			fromLine:"			59",
			toLine:"			63",
			content:"
			
			    String topic = "topic";
			    String group = "group";
			    String brokerName = "brokerName";
			    String subString = "sub";			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    @Spy			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setup() throws Exception {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void testPullMessageWithoutSub() throws Exception {			
",
,
			fromLine:"			82",
			toLine:"			84",
			content:"
			        SubscriptionData subscriptionData = new SubscriptionData();
			        subscriptionData.setSubString(subString);
			        subscriptionData.setExpressionType(type);			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			        PullMessageRequestHeader header = new PullMessageRequestHeader();
			        header.setTopic(topic);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        header.setMaxMsgNums(16);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        header.setSubVersion(0L);			
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			        PullMessageRequestHeader newHeader = new PullMessageRequestHeader();
			        newHeader.setTopic(topic);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        newHeader.setMaxMsgNums(16);			
",
,
			fromLine:"			112",
			toLine:"			114",
			content:"
			        newHeader.setSubVersion(0L);
			        newHeader.setBrokerName(brokerName);
			        newHeader.setSubscription(subString);			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        ArgumentCaptor<RemotingCommand> captor = ArgumentCaptor.forClass(RemotingCommand.class);			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(expectResponse));			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        assertThat(response).isNull();			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public void testPullMessageWithSub() throws Exception {			
",
,
			fromLine:"			133",
			toLine:"			135",
			content:"
			        SubscriptionData subscriptionData = new SubscriptionData();
			        subscriptionData.setSubString(subString);
			        subscriptionData.setExpressionType(type);			
",
,
			fromLine:"			139",
			toLine:"			140",
			content:"
			        PullMessageRequestHeader header = new PullMessageRequestHeader();
			        header.setTopic(topic);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        header.setMaxMsgNums(16);			
",
,
			fromLine:"			148",
			toLine:"			150",
			content:"
			        header.setSubVersion(0L);
			        header.setBrokerName(brokerName);
			        header.setSubscription(subString);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        ArgumentCaptor<RemotingCommand> captor = ArgumentCaptor.forClass(RemotingCommand.class);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(expectResponse));			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        assertThat(response).isNull();			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImpl.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.broker.transaction.queue;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.Date;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;
			import org.apache.rocketmq.broker.transaction.OperationResult;
			import org.apache.rocketmq.broker.transaction.TransactionMetrics;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.BrokerRole;
						
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
			                GetResult getResult = getHalfMsg(messageQueue, newOffset);			
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			                                       long pullOffsetOfOp, long miniOffset, Map<Long, HashSet<Long>> opMsgMap, List<Long> doneOpOffset) {			
",
,
			fromLine:"			499",
			toLine:"			501",
			content:"
			     *
			     * @param mq Target message queue, in this method, it means the half message queue.
			     * @param offset Offset in the message queue.			
",
,
			fromLine:"			504",
			toLine:"			505",
			content:"
			     */
			    private PullResult pullHalfMsg(MessageQueue mq, long offset, int nums) {			
",
,
			fromLine:"			511",
			toLine:"			513",
			content:"
			     *
			     * @param mq Target Message Queue
			     * @param offset Offset in the message queue			
",
,
			fromLine:"			516",
			toLine:"			517",
			content:"
			     */
			    private PullResult pullOpMsg(MessageQueue mq, long offset, int nums) {			
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
						
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/transaction/queue/TransactionalMessageServiceImplTest.java:
		[
			fromLine:"			16",
			toLine:"			64",
			content:"
			 */
			package org.apache.rocketmq.broker.transaction.queue;
			
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;
			import org.apache.rocketmq.broker.transaction.OperationResult;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.timeout;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			112",
			toLine:"			114",
			content:"
			        when(bridge.fetchMessageQueues(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC)).thenReturn(createMessageQueueSet(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC));
			        when(bridge.getHalfMessage(0, 0, 1)).thenReturn(createDiscardPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 5, "hellp", 1));
			        when(bridge.getHalfMessage(0, 1, 1)).thenReturn(createPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 6, "hellp", 0));			
",
,
			fromLine:"			133",
			toLine:"			135",
			content:"
			        when(bridge.fetchMessageQueues(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC)).thenReturn(createMessageQueueSet(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC));
			        when(bridge.getHalfMessage(0, 0, 1)).thenReturn(createPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 5, "hello", 1));
			        when(bridge.getHalfMessage(0, 1, 1)).thenReturn(createPullResult(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC, 6, "hellp", 0));			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        queueTransactionMsgService.open();			
",
,
			fromLine:"			181",
			toLine:"			182",
			content:"
			
			    private PullResult createDiscardPullResult(String topic, long queueOffset, String body, int size) {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
						
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			        PullResult result = null;			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            result = new PullResult(PullStatus.FOUND, 1, 0, 1,			
",
,
			fromLine:"			203",
			toLine:"			204",
			content:"
			
			    private PullResult createOpPulResult(String topic, long queueOffset, String body, int size) {			
",
,
			fromLine:"			212",
			toLine:"			213",
			content:"
			
			    private PullResult createImmunityPulResult(String topic, long queueOffset, String body, int size) {			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
						
",
,
			fromLine:"			223",
			toLine:"			224",
			content:"
			        List<MessageExt> msgs = new ArrayList<>();
			        for (int i = 0; i < size; i++) {			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
						
",
,
			fromLine:"			253",
			toLine:"			255",
			content:"
			        inner.setTransactionId("123456123");
			        inner.setTopic(topic);
			        inner.setQueueOffset(queueOffset);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			    private MessageExtBrokerInner createMessageBrokerInner() {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/ReplyMessageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.net.Broker2Client;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    @Spy			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    @Mock			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    @Mock			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    @Mock			
",
,
			fromLine:"			73",
			toLine:"			75",
			content:"
			
			    private String topic = "FooBar";
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    @Mock			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			    public void init() throws IllegalAccessException, NoSuchFieldException {
			        clientInfo = new ClientChannelInfo(channel, "127.0.0.1", LanguageCode.JAVA, 0);			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        field.setAccessible(true);
			        field.set(brokerController, broker2Client);			
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			        when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
			        when(handlerContext.channel()).thenReturn(mockChannel);			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			    public void testProcessRequest_Success() throws RemotingCommandException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException {
			        when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));			
",
,
			fromLine:"			98",
			toLine:"			99",
			content:"
			        final RemotingCommand request = createSendMessageRequestHeaderCommand(RequestCode.SEND_REPLY_MESSAGE);
			        when(brokerController.getBroker2Client().callClient(any(), any(RemotingCommand.class))).thenReturn(createResponse(ResponseCode.SUCCESS, request));			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			        SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
			        requestHeader.setProducerGroup(group);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/SendMessageProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			72",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.net.InetSocketAddress;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.Executors;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.AbortProcessException;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;
			import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;
			import org.apache.rocketmq.broker.mqtrace.SendMessageContext;
			import org.apache.rocketmq.broker.mqtrace.SendMessageHook;
			import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			public class SendMessageProcessorTest {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    @Mock			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    @Mock			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    @Spy			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    @Mock			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    @Mock			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			
			    private String topic = "FooBar";			
",
,
			fromLine:"			93",
			toLine:"			104",
			content:"
			    public void init() {
			        brokerController.setMessageStore(messageStore);
			        TopicConfigManager topicConfigManager = new TopicConfigManager(brokerController);
			        topicConfigManager.getTopicConfigTable().put(topic, new TopicConfig(topic));
			        SubscriptionGroupManager subscriptionGroupManager = new SubscriptionGroupManager(brokerController);
			        when(brokerController.getSubscriptionGroupManager()).thenReturn(subscriptionGroupManager);
			        when(brokerController.getTopicConfigManager()).thenReturn(topicConfigManager);
			        when(brokerController.getPutMessageFutureExecutor()).thenReturn(Executors.newSingleThreadExecutor());
			        when(messageStore.now()).thenReturn(System.currentTimeMillis());
			        when(channel.remoteAddress()).thenReturn(new InetSocketAddress(1024));
			        when(handlerContext.channel()).thenReturn(channel);
			        when(messageStore.lookMessageByOffset(anyLong())).thenReturn(new MessageExt());			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public void testProcessRequest() throws Exception {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void testProcessRequest_WithHook() throws Exception {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        sendMessageHookList.add(sendMessageHook);			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			        assertThat(sendMessageContext[0]).isNotNull();
			        assertThat(sendMessageContext[0].getTopic()).isEqualTo(topic);			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    public void testProcessRequest_FlushTimeOut() throws Exception {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			    public void testProcessRequest_MessageIllegal() throws Exception {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			    public void testProcessRequest_CreateMappedFileFailed() throws Exception {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			    public void testProcessRequest_FlushSlaveTimeout() throws Exception {			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    public void testProcessRequest_PageCacheBusy() throws Exception {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			    public void testProcessRequest_PropertiesTooLong() throws Exception {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public void testProcessRequest_ServiceNotAvailable() throws Exception {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    public void testProcessRequest_SlaveNotAvailable() throws Exception {			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			    public void testProcessRequest_WithMsgBack() throws Exception {			
",
,
			fromLine:"			206",
			toLine:"			207",
			content:"
			
			        sendMessageProcessor = new SendMessageProcessor(brokerController);			
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			    public void testProcessRequest_Transaction() throws RemotingCommandException {
			        brokerController.setTransactionalMessageService(transactionMsgService);			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			            return null;			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        await().atMost(Duration.ofSeconds(10)).until(() -> {			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			        sendMessageHookList.add(sendMessageHook);			
",
,
			fromLine:"			264",
			toLine:"			265",
			content:"
			        assertThat(sendMessageContext[0]).isNotNull();
			        assertThat(sendMessageContext[0].getTopic()).isEqualTo(topic);			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			    public void testProcessRequest_WithMsgBackWithConsumeMessageAfterHook() throws Exception {			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
						
",
,
			fromLine:"			295",
			toLine:"			296",
			content:"
			        consumeMessageHookList.add(consumeMessageHook);
			        sendMessageProcessor.registerConsumeMessageHook(consumeMessageHookList);			
",
,
			fromLine:"			317",
			toLine:"			318",
			content:"
			        SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
			        requestHeader.setProducerGroup(group);			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			        requestHeader.setDelayLevel(4);			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			            return null;			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        await().atMost(Duration.ofSeconds(10)).until(() -> {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/QueryAssignmentProcessor.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.broker.loadbalance.MessageRequestModeManager;
			import org.apache.rocketmq.broker.topic.TopicRouteInfoManager;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragelyByCircle;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueAssignment;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.QueryAssignmentResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.SetMessageRequestModeRequestBody;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			154",
			toLine:"			156",
			content:"
			     *
			     * @param topic
			     * @param consumerGroup			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			     * @param messageModel			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			     */			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			            case BROADCASTING: {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			                if (assignedQueueSet == null) {			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			            case CLUSTERING: {			
",
,
			fromLine:"			178",
			toLine:"			179",
			content:"
			                if (null == mqSet) {
			                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			                List<String> cidAll = null;			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			                if (null == cidAll) {			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			                try {			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			                    if (null == allocateMessageQueueStrategy) {			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			                    if (setMessageRequestModeRequestBody != null && setMessageRequestModeRequestBody.getMode() == MessageRequestMode.POP) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			                    } else {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
						
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			        List<MessageQueue> allocateResult;			
",
,
			fromLine:"			242",
			toLine:"			243",
			content:"
			            //each client pop all messagequeue
			            allocateResult = new ArrayList<>(mqAll.size());			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			        } else {			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			                //consumer working in pop mode could share the MessageQueues assigned to the N (N = popWorkGroupSize) consumer following it in the cid list
			                allocateResult = allocateMessageQueueStrategy.allocate(consumerGroup, clientId, mqAll, cidAll);			
",
,
			fromLine:"			257",
			toLine:"			258",
			content:"
			                        index++;
			                        index = index % cidAll.size();			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			                //make sure each cid is assigned			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
						
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        List<String> cidAll) {			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
						
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        }			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			287",
			toLine:"			289",
			content:"
			            log.info("[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}",
			                consumerGroup,
			                currentCID,			
",
,
			fromLine:"			293",
			toLine:"			294",
			content:"
			
			        int index = cidAll.indexOf(currentCID);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageQueueAssignment;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public abstract class RebalanceImpl {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        new ConcurrentHashMap<>();			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    protected AllocateMessageQueueStrategy allocateMessageQueueStrategy;			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        MQClientInstance mQClientFactory) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        this.allocateMessageQueueStrategy = allocateMessageQueueStrategy;			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void unlock(final MessageQueue mq, final boolean oneway) {			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			            UnlockBatchRequestBody requestBody = new UnlockBatchRequestBody();
			            requestBody.setConsumerGroup(this.consumerGroup);			
",
,
			fromLine:"			86",
			toLine:"			89",
			content:"
			            try {
			                this.mQClientFactory.getMQClientAPIImpl().unlockBatchMQ(findBrokerResult.getBrokerAddr(), requestBody, 1000, oneway);
			                log.warn("unlock messageQueue. group:{}, clientId:{}, mq:{}",
			                    this.consumerGroup,			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			                UnlockBatchRequestBody requestBody = new UnlockBatchRequestBody();
			                requestBody.setConsumerGroup(this.consumerGroup);			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			                try {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			                            processQueue.setLocked(false);			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public boolean lock(final MessageQueue mq) {			
",
,
			fromLine:"			160",
			toLine:"			161",
			content:"
			            LockBatchRequestBody requestBody = new LockBatchRequestBody();
			            requestBody.setConsumerGroup(this.consumerGroup);			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			                Set<MessageQueue> lockedMq =			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			                boolean lockOK = lockedMq.contains(mq);			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			202",
			toLine:"			203",
			content:"
			                LockBatchRequestBody requestBody = new LockBatchRequestBody();
			                requestBody.setConsumerGroup(this.consumerGroup);			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			                    Set<MessageQueue> lockOKMQSet =			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			                                if (!processQueue.isLocked()) {			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			                                processQueue.setLocked(false);			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			            try {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			                if (!(t instanceof RemotingTimeoutException)) {			
",
,
			fromLine:"			312",
			toLine:"			313",
			content:"
			                    if (changed) {
			                        this.messageQueueChanged(topic, mqSet, mqSet);			
",
,
			fromLine:"			318",
			toLine:"			319",
			content:"
			                } else {
			                    this.messageQueueChanged(topic, Collections.<MessageQueue>emptySet(), Collections.<MessageQueue>emptySet());			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			                Set<MessageQueue> mqSet = this.topicSubscribeInfoTable.get(topic);			
",
,
			fromLine:"			328",
			toLine:"			329",
			content:"
			                    if (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
			                        this.messageQueueChanged(topic, Collections.<MessageQueue>emptySet(), Collections.<MessageQueue>emptySet());			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			                if (null == cidAll) {			
",
,
			fromLine:"			348",
			toLine:"			350",
			content:"
			                    try {
			                        allocateResult = strategy.allocate(
			                            this.consumerGroup,			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			                    } catch (Throwable e) {			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			                    if (changed) {			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			                            "client rebalanced result changed. allocateMessageQueueStrategyName={}, group={}, topic={}, clientId={}, mqAllSize={}, cidAllSize={}, rebalanceResultSize={}, rebalanceResultSet={}",			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			                            allocateResultSet.size(), allocateResultSet);			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			        try {			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			407",
			toLine:"			409",
			content:"
			        if (changed) {
			            log.info("broker rebalanced result changed. allocateMessageQueueStrategyName={}, group={}, topic={}, clientId={}, assignmentSet={}",
			                strategyName, consumerGroup, topic, this.mQClientFactory.getClientId(), messageQueueAssignments);			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
			                    pq.setDropped(true);			
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			                    pq.setDropped(true);			
",
,
			fromLine:"			497",
			toLine:"			498",
			content:"
			                    removeQueueMap.put(mq, pq);
			                    log.error("[BUG]doRebalance, {}, try remove unnecessary mq, {}, because pull is pause, so try to fixed it",			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
			                changed = true;			
",
,
			fromLine:"			521",
			toLine:"			521",
			content:"
			                if (isOrder && !this.lock(mq)) {			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			                    if (pre != null) {			
",
,
			fromLine:"			535",
			toLine:"			535",
			content:"
			                    } else {			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			                        PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			                } else {			
",
,
			fromLine:"			552",
			toLine:"			552",
			content:"
			        if (!allMQLocked) {			
",
,
			fromLine:"			617",
			toLine:"			618",
			content:"
			                        removeQueueMap.put(mq, pq);
			                        log.error("[BUG]doRebalance, {}, try remove unnecessary mq, {}, because pull is pause, so try to fixed it",			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			                    changed = true;			
",
,
			fromLine:"			651",
			toLine:"			652",
			content:"
			                        removeQueueMap.put(mq, pq);
			                        log.error("[BUG]doRebalance, {}, try remove unnecessary pop mq, {}, because pop is pause, so try to fixed it",			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			                    changed = true;			
",
,
			fromLine:"			676",
			toLine:"			676",
			content:"
			                    if (isOrder && !this.lock(mq)) {			
",
,
			fromLine:"			688",
			toLine:"			688",
			content:"
			                    } catch (Exception e) {			
",
,
			fromLine:"			695",
			toLine:"			695",
			content:"
			                        if (pre != null) {			
",
,
			fromLine:"			697",
			toLine:"			697",
			content:"
			                        } else {			
",
,
			fromLine:"			699",
			toLine:"			699",
			content:"
			                            PullRequest pullRequest = new PullRequest();			
",
,
			fromLine:"			707",
			toLine:"			707",
			content:"
			                    } else {			
",
,
			fromLine:"			713",
			toLine:"			713",
			content:"
			            if (!allMQLocked) {			
",
,
			fromLine:"			726",
			toLine:"			726",
			content:"
			                    if (pre != null) {			
",
,
			fromLine:"			728",
			toLine:"			728",
			content:"
			                    } else {			
",
,
			fromLine:"			731",
			toLine:"			731",
			content:"
			                        popRequest.setTopic(topic);			
",
,
			fromLine:"			747",
			toLine:"			747",
			content:"
						
",
,
			fromLine:"			787",
			toLine:"			787",
			content:"
			            this.removeUnnecessaryMessageQueue(mq, prev);			
",
,
			fromLine:"			804",
			toLine:"			804",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			808",
			toLine:"			808",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			828",
			toLine:"			828",
			content:"
			    public MQClientInstance getmQClientFactory() {			
",
,
			fromLine:"			832",
			toLine:"			832",
			content:"
			    public void setmQClientFactory(MQClientInstance mQClientFactory) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByIdSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.io.DataOutputStream;
			import java.io.File;
			import java.io.FileOutputStream;
			import java.io.IOException;
			import java.nio.charset.Charset;
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			
			public class QueryMsgByIdSubCommand implements SubCommand {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        RemotingException, MQBrokerException, InterruptedException, IOException {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			                    if (StringUtils.isNotBlank(msgId)) {			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			                        if (StringUtils.isNotBlank(msgId)) {			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			                    if (StringUtils.isNotBlank(msgId)) {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
						
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			        try {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			                ConsumeMessageDirectlyResult result =			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			            } else {			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
						
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			        try {			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			                // resend msg by id			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			            } else {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByUniqueKeySubCommand.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.io.DataOutputStream;
			import java.io.File;
			import java.io.FileOutputStream;
			import java.io.IOException;
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.api.MessageTrack;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        for (int i = 0; i < (showAll ? list.size() : 1); i++) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			                try {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			                    ConsumeMessageDirectlyResult result =			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			            } else {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/QueryAssignmentRequestBody.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getStrategyName() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setStrategyName(String strategyName) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/AllocateMessageQueueStrategy.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			     *
			     * @param consumerGroup current consumer group			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			     * @param mqAll message queue set in current topic			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			     */			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMachineRoomNearby.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.TreeMap;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    @Override			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        Map<String/*machine room */, List<MessageQueue>> mr2Mq = new TreeMap<>();			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        Map<String/*machine room */, List<String/*clientId*/>> mr2c = new TreeMap<>();			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        //1.allocate the mq that deploy in the same machine room with the current consumer			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        if (mqInThisMachineRoom != null && !mqInThisMachineRoom.isEmpty()) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			            if (!mr2c.containsKey(machineRoomEntry.getKey())) { // no alive consumer in the corresponding machine room, so all consumers share these queues			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMachineRoomNearByTest.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.Set;
			import java.util.TreeMap;
			import java.util.TreeSet;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
						
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			    public void test2() {
			        testWhenConsumerIDCIsMore(5,1,10, 10, false);
			        testWhenConsumerIDCIsMore(5,1,10, 5, false);
			        testWhenConsumerIDCIsMore(5,1,10, 20, false);			
",
,
			fromLine:"			74",
			toLine:"			77",
			content:"
			    public void test3() {
			        testWhenConsumerIDCIsLess(5,2,10, 10, false);
			        testWhenConsumerIDCIsLess(5,2,10, 5, false);
			        testWhenConsumerIDCIsLess(5,2,10, 20, false);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			            else if (brokerIDCSize > consumerIDCSize) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			            } else {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        for (String currentID : cidAll) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        }			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			        Set<String> brokerIDCWithConsumer = new TreeSet<>();
			        List<String> cidAll = prepareConsumer(brokerIDCSize + consumerMore, consumerSize);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        for (String currentID : cidAll) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			        Set<String> healthyIDC = new TreeSet<>();
			        List<String> cidAll = prepareConsumer(brokerIDCSize - consumerIDCLess, consumerSize);			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			            String currentIDC = machineRoomResolver.consumerDeployIn(currentID);			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            List<MessageQueue> resInOneIDC = idc2Res.get(consumerIDC);			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
						
",
,
			fromLine:"			169",
			toLine:"			171",
			content:"
			
			    private boolean hasAllocateAllQ(List<String> cidAll,List<MessageQueue> mqAll, List<MessageQueue> allocatedResAll) {
			        if (cidAll.isEmpty()) {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			        }			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyByCircleTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import junit.framework.TestCase;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			        // the consumerId not in cidAll			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        for (String consumerId : consumerIdList) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyTest.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import junit.framework.TestCase;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
			
			import java.util.ArrayList;
			import java.util.List;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			        for (int i = 0; i < consumerIdList.size(); i++) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByConfigTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import junit.framework.TestCase;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        for (String consumerId : consumerIdList) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByMachineRoomTest.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import junit.framework.TestCase;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        try {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        for (String consumerId : consumerIdList) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueConsitentHashTest.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.TreeMap;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        List<MessageQueue> messageQueueList = createMessageQueueList(6);			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        List<MessageQueue> messageQueueList = createMessageQueueList(6);			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        List<String> consumerIdList = createConsumerIdList(2);			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        List<MessageQueue> messageQueueList = createMessageQueueList(6);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			            for (String cid : cidBegin) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			            Assert.assertTrue(			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			            for (String cid : cidAfterRemoveOne) {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			            Assert.assertTrue("queueSize" + queueSize + "consumerSize:" + consumerSize + "
			mqAll:" + mqAll + "
			allocatedResAllAfterRemove" + allocatedResAllAfterRemove,			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			            for (String cid : cidAfterAdd) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            Assert.assertTrue(			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			175",
			content:"
			        List<MessageQueue> allocatedResAll) {
			        if (cidAll.isEmpty()) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        }			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/AllocateMQSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.ArrayList;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			    @Override
			    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			
			            String topic = commandLine.getOptionValue('t').trim();			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			            for (String i : ipList) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AbstractAllocateMessageQueueStrategy.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        List<String> cidAll) {			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        }			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        }			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			            log.info("[BUG] ConsumerGroup: {} The consumerId: {} not in cidAll: {}",
			                consumerGroup,
			                currentCID,			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragely.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @Override			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			
			        int index = cidAll.indexOf(currentCID);			
",
,
			fromLine:"			39",
			toLine:"			40",
			content:"
			        int averageSize =
			            mqAll.size() <= cidAll.size() ? 1 : (mod > 0 && index < mod ? mqAll.size() / cidAll.size()			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        int startIndex = (mod > 0 && index < mod) ? index * averageSize : index * averageSize + mod;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			        for (int i = 0; i < range; i++) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueAveragelyByCircle.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @Override			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			36",
			toLine:"			39",
			content:"
			
			        int index = cidAll.indexOf(currentCID);
			        for (int i = index; i < mqAll.size(); i++) {
			            if (i % cidAll.size() == index) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByMachineRoom.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Set;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    @Override			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        }			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        List<MessageQueue> premqAll = new ArrayList<>();			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			
			        int mod = premqAll.size() / cidAll.size();			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        if (rem > currentIndex) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueConsistentHash.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.List;
			import org.apache.rocketmq.common.consistenthash.ConsistentHashRouter;
			import org.apache.rocketmq.common.consistenthash.HashFunction;
			import org.apache.rocketmq.common.consistenthash.Node;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    @Override			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        List<MessageQueue> result = new ArrayList<>();			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        Collection<ClientNode> cidNodes = new ArrayList<>();			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        List<MessageQueue> results = new ArrayList<>();			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            ClientNode clientNode = router.routeNode(mq.toString());			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/rebalance/AllocateMessageQueueByConfig.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.rebalance;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    @Override			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/subscription/SubscriptionGroupManager.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.broker.subscription;
			
			import com.google.common.collect.ImmutableMap;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.SubscriptionGroupAttributes;
			import org.apache.rocketmq.common.attribute.AttributeUtil;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        if (setOrClear) {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			        } else {			
",
,
			fromLine:"			175",
			toLine:"			177",
			content:"
			     *
			     * @param group
			     * @param topic			
",
,
			fromLine:"			179",
			toLine:"			182",
			content:"
			     */
			    public void setForbidden(String group, String topic, int forbiddenIndex) {
			        int topicForbidden = getForbidden(group, topic);
			        topicForbidden |= 1 << forbiddenIndex;			
",
,
			fromLine:"			188",
			toLine:"			190",
			content:"
			     *
			     * @param group
			     * @param topic			
",
,
			fromLine:"			192",
			toLine:"			195",
			content:"
			     */
			    public void clearForbidden(String group, String topic, int forbiddenIndex) {
			        int topicForbidden = getForbidden(group, topic);
			        topicForbidden &= ~(1 << forbiddenIndex);			
",
,
			fromLine:"			198",
			toLine:"			200",
			content:"
			
			    public boolean getForbidden(String group, String topic, int forbiddenIndex) {
			        int topicForbidden = getForbidden(group, topic);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/subscription/ForbiddenTest.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.broker.subscription;
			
			import static org.junit.Assert.assertEquals;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Test;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			            new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(), new MessageStoreConfig()));			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        assertEquals(1, s.getForbidden("g", "t"));			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        assertEquals(3, s.getForbidden("g", "t"));			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        assertEquals(7, s.getForbidden("g", "t"));			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        assertEquals(5, s.getForbidden("g", "t"));			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        assertEquals(5, s.getForbidden("g", "t"));			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        assertEquals(4, s.getForbidden("g", "t"));			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        assertEquals(0, s.getForbidden("g", "t"));			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.broker.topic;
			
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			
			import com.google.common.collect.ImmutableMap;
			
			import com.google.common.collect.Maps;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.PopAckConstants;
			import org.apache.rocketmq.common.TopicAttributes;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.Attribute;
			import org.apache.rocketmq.common.attribute.AttributeUtil;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.sysflag.TopicSysFlag;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingInfo;
			import org.apache.rocketmq.tieredstore.TieredMessageStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
			
			import static com.google.common.base.Preconditions.checkNotNull;
			
			public class TopicConfigManager extends ConfigManager {
			    protected static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			    protected ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<>(1024);
			    private DataVersion dataVersion = new DataVersion();			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public TopicConfigManager(BrokerController brokerController, boolean init) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			                TopicValidator.addSystemTopic(topic);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                    .getDefaultTopicQueueNums());			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			            int perm = PermName.PERM_INHERIT;			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			            int perm = PermName.PERM_INHERIT;			
",
,
			fromLine:"			157",
			toLine:"			158",
			content:"
			        {
			            if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			        {			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			            // PopAckConstants.REVIVE_TOPIC			
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			            TopicValidator.addSystemTopic(topic);
			            topicConfig.setReadQueueNums(this.brokerController.getBrokerConfig().getReviveQueueNum());			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			            // sync broker member group topic			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        try {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			                try {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			                        if (defaultTopic.equals(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC)) {			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			                        if (PermName.isInherited(defaultTopicConfig.getPerm())) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			                            topicConfig.setPerm(perm);			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			                        } else {			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			                    } else {			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			                    if (topicConfig != null) {			
",
,
			fromLine:"			282",
			toLine:"			283",
			content:"
			
			                        long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			        try {			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			                    }			
",
,
			fromLine:"			326",
			toLine:"			327",
			content:"
			                    putTopicConfig(topicConfig);
			                    long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
						
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			        final int topicSysFlag) {			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
						
",
,
			fromLine:"			357",
			toLine:"			357",
			content:"
			        final int topicSysFlag) {			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        try {			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			                try {			
",
,
			fromLine:"			376",
			toLine:"			380",
			content:"
			
			                    topicConfig = new TopicConfig(topic);
			                    topicConfig.setReadQueueNums(clientDefaultTopicQueueNums);
			                    topicConfig.setWriteQueueNums(clientDefaultTopicQueueNums);
			                    topicConfig.setPerm(perm);			
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
						
",
,
			fromLine:"			386",
			toLine:"			387",
			content:"
			                    createNew = true;
			                    long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			        try {			
",
,
			fromLine:"			424",
			toLine:"			424",
			content:"
						
",
,
			fromLine:"			427",
			toLine:"			428",
			content:"
			                    createNew = true;
			                    long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
						
",
,
			fromLine:"			461",
			toLine:"			462",
			content:"
			
			            long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
						
",
,
			fromLine:"			484",
			toLine:"			485",
			content:"
			
			            long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
			        if (old != null) {			
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
			        } else {			
",
,
			fromLine:"			515",
			toLine:"			516",
			content:"
			
			        long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			522",
			toLine:"			522",
			content:"
			    private synchronized void updateTieredStoreTopicMetadata(final TopicConfig topicConfig, Map<String, String> newAttributes) {			
",
,
			fromLine:"			536",
			toLine:"			537",
			content:"
			
			        log.info("Update tiered storage metadata, topic {}, reserveTime {}", topic, reserveTime);			
",
,
			fromLine:"			558",
			toLine:"			558",
			content:"
			                    isChange = true;			
",
,
			fromLine:"			579",
			toLine:"			580",
			content:"
			            if (isChange) {
			                long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			603",
			toLine:"			605",
			content:"
			        if (old != null) {
			            log.info("delete topic config OK, topic: {}", old);
			            long stateMachineVersion = brokerController.getMessageStore() != null ? brokerController.getMessageStore().getStateMachineVersion() : 0;			
",
,
			fromLine:"			608",
			toLine:"			608",
			content:"
			        } else {			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			        DataVersion dataVersionCopy = new DataVersion();			
",
,
			fromLine:"			633",
			toLine:"			633",
			content:"
			        topicConfigWrapper.setDataVersion(this.getDataVersion());			
",
,
			fromLine:"			646",
			toLine:"			646",
			content:"
			    public String configFilePath() {			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			                this.topicConfigTable.putAll(topicConfigSerializeWrapper.getTopicConfigTable());			
",
,
			fromLine:"			665",
			toLine:"			665",
			content:"
			        topicConfigSerializeWrapper.setTopicConfigTable(this.topicConfigTable);			
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
			            Entry<String, TopicConfig> next = it.next();			
",
,
			fromLine:"			678",
			toLine:"			678",
			content:"
			    public DataVersion getDataVersion() {			
",
,
			fromLine:"			709",
			toLine:"			710",
			content:"
			    private void registerBrokerData(TopicConfig topicConfig) {
			        if (brokerController.getBrokerConfig().isEnableSingleTopicRegister()) {			
",
,
			fromLine:"			712",
			toLine:"			712",
			content:"
			        } else {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/topic/TopicRouteInfoManager.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.broker.topic;
			
			import com.google.common.collect.Sets;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
						
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    private static final long GET_TOPIC_ROUTE_TIMEOUT = 3000L;
			    private static final long LOCK_TIMEOUT_MILLIS = 3000L;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    private final ConcurrentMap<String/* Topic */, TopicRouteData> topicRouteTable = new ConcurrentHashMap<>();			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			    private ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public TopicRouteInfoManager(BrokerController brokerController) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void start() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			            }			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        try {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			                try {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			                    if (null == topicRouteData) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			                } catch (RemotingException e) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			                } catch (MQBrokerException e) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			                } finally {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        } catch (InterruptedException e) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        } else {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        for (BrokerData bd : topicRouteData.getBrokerDatas()) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			        TopicRouteData cloneTopicRouteData = new TopicRouteData(topicRouteData);			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			            if (prev != null) {			
",
,
			fromLine:"			190",
			toLine:"			191",
			content:"
			    public void shutdown() {
			        if (null != this.scheduledExecutorService) {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        }			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
						
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			    ) {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
						
",
,
			fromLine:"			229",
			toLine:"			230",
			content:"
			        if (map != null && !map.isEmpty()) {
			            brokerAddr = map.get(brokerId);			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			            if (!found && slave) {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/store/RemoteBrokerOffsetStore.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.store;
			
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.OffsetNotFoundException;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
						
",
,
			fromLine:"			42",
			toLine:"			45",
			content:"
			public class RemoteBrokerOffsetStore implements OffsetStore {
			    private final static Logger log = LoggerFactory.getLogger(RemoteBrokerOffsetStore.class);
			    private final MQClientInstance mQClientFactory;
			    private final String groupName;			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    public RemoteBrokerOffsetStore(MQClientInstance mQClientFactory, String groupName) {
			        this.mQClientFactory = mQClientFactory;			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        if (mq != null) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            if (null == offsetOld) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        if (mq != null) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			                case READ_FROM_MEMORY: {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			                    catch (Exception e) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			136",
			content:"
			                        this.updateConsumeOffsetToBroker(mq, offset.getOffset());
			                        log.info("[persistAll] Group: {} ClientId: {} updateConsumeOffsetToBroker {} {}",
			                            this.groupName,			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			                    } catch (Exception e) {			
",
,
			fromLine:"			150",
			toLine:"			151",
			content:"
			            for (MessageQueue mq : unusedMQ) {
			                this.offsetTable.remove(mq);			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    public void persist(MessageQueue mq) {			
",
,
			fromLine:"			162",
			toLine:"			164",
			content:"
			                this.updateConsumeOffsetToBroker(mq, offset.getOffset());
			                log.info("[persist] Group: {} ClientId: {} updateConsumeOffsetToBroker {} {}",
			                    this.groupName,			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			175",
			toLine:"			177",
			content:"
			        if (mq != null) {
			            this.offsetTable.remove(mq);
			            log.info("remove unnecessary messageQueue offset. group={}, mq={}, offsetTableSize={}", this.groupName, mq,			
",
,
			fromLine:"			183",
			toLine:"			184",
			content:"
			    public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
			        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<>(this.offsetTable.size(), 1);			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        MQBrokerException, InterruptedException, MQClientException {			
",
,
			fromLine:"			210",
			toLine:"			211",
			content:"
			        if (null == findBrokerResult) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			            requestHeader.setTopic(mq.getTopic());			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			            if (isOneway) {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			            } else {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        InterruptedException, MQClientException {			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			        if (null == findBrokerResult) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			            requestHeader.setTopic(mq.getTopic());			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
						
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/factory/MQClientInstanceTest.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.client.impl.factory;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Properties;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.admin.MQAdminExtInner;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.consumer.MQConsumerInner;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        long brokerId = 1;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        brokerAddrTable.put(brokerName, addrMapNew);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/RebalanceLockOnSlaveIT.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.FindBrokerResult;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        mqConsumerThreeReplica3.getDefaultMQPushConsumerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(THREE_REPLICAS_TOPIC);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        cancelIsolatedBroker(master3With3Replicas);			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
						
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            master3With3Replicas.getBrokerConfig().getBrokerName(), MixAll.MASTER_ID, true);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/MQAdmin.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client;
			
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			
			import java.util.Map;
						
",
,
			fromLine:"			32",
			toLine:"			35",
			content:"
			     * Creates a topic
			     *  @param key accessKey
			     * @param newTopic topic name
			     * @param queueNum topic's queue number			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			     */			
",
,
			fromLine:"			42",
			toLine:"			46",
			content:"
			     * Creates a topic
			     *  @param key accessKey
			     * @param newTopic topic name
			     * @param queueNum topic's queue number
			     * @param topicSysFlag topic system flag			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			     */			
",
,
			fromLine:"			88",
			toLine:"			92",
			content:"
			     *
			     * @param topic message topic
			     * @param key message key index word
			     * @param maxNum max message number
			     * @param begin from when			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			     */			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPullConsumer.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			     */			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			     */			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			     */			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			     */			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			     */			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			     */			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			     */			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			     */			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			     */			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public DefaultMQPullConsumer(final String consumerGroup, RPCHook rpcHook) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        this.namespace = namespace;			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    @Override			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    @Override			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			    @Override			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public AllocateMessageQueueStrategy getAllocateMessageQueueStrategy() {			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    public void setAllocateMessageQueueStrategy(AllocateMessageQueueStrategy allocateMessageQueueStrategy) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public long getBrokerSuspendMaxTimeMillis() {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    public void setBrokerSuspendMaxTimeMillis(long brokerSuspendMaxTimeMillis) {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    public long getConsumerPullTimeoutMillis() {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public void setConsumerPullTimeoutMillis(long consumerPullTimeoutMillis) {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    public long getConsumerTimeoutMillisWhenSuspend() {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			    public void setConsumerTimeoutMillisWhenSuspend(long consumerTimeoutMillisWhenSuspend) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    public MessageModel getMessageModel() {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			    public void setMessageModel(MessageModel messageModel) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    public MessageQueueListener getMessageQueueListener() {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			    public void setMessageQueueListener(MessageQueueListener messageQueueListener) {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			    @Override			
",
,
			fromLine:"			275",
			toLine:"			276",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			    public void start() throws MQClientException {			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			            if (listener != null) {			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
			    @Override			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			    @Override			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			    @Override			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			    @Override			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			    @Override			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			    @Override			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			    @Override			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			    @Override			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			    @Override			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			    @Override			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			    @Override			
",
,
			fromLine:"			374",
			toLine:"			374",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			    @Override			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			        PullCallback pullCallback) throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			    @Override			
",
,
			fromLine:"			388",
			toLine:"			388",
			content:"
			        int maxNums) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			    @Override			
",
,
			fromLine:"			421",
			toLine:"			422",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			    public void setOffsetStore(OffsetStore offsetStore) {			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
			    public boolean isUnitMode() {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			    public void setUnitMode(boolean isUnitMode) {			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			    public int getMaxReconsumeTimes() {			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			    public void setMaxReconsumeTimes(final int maxReconsumeTimes) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/DefaultMQPushConsumer.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.consumer.listener.MessageListener;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.ConsumeMessageHook;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
			import org.apache.rocketmq.client.trace.TraceDispatcher;
			import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			     */			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			     * RocketMQ supports two message models: clustering and broadcasting. If clustering is set, consumer clients with			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			     */			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			     * <code>CONSUME_FROM_TIMESTAMP</code>: Consumer client will start from specified timestamp, which means			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			     */			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			     */			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			     */			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			     */			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			     */			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			     */			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			     */			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			     */			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			     */			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			     *			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			     */			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			     */			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			332",
			content:"
			    public DefaultMQPushConsumer(final String consumerGroup, RPCHook rpcHook) {
			        this.consumerGroup = consumerGroup;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			357",
			toLine:"			359",
			content:"
			        AllocateMessageQueueStrategy allocateMessageQueueStrategy) {
			        this.consumerGroup = consumerGroup;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			374",
			toLine:"			376",
			content:"
			        AllocateMessageQueueStrategy allocateMessageQueueStrategy, boolean enableMsgTrace, final String customizedTraceTopic) {
			        this.consumerGroup = consumerGroup;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			416",
			toLine:"			416",
			content:"
			        AllocateMessageQueueStrategy allocateMessageQueueStrategy) {			
",
,
			fromLine:"			418",
			toLine:"			419",
			content:"
			        this.namespace = namespace;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			436",
			toLine:"			436",
			content:"
			        AllocateMessageQueueStrategy allocateMessageQueueStrategy, boolean enableMsgTrace, final String customizedTraceTopic) {			
",
,
			fromLine:"			438",
			toLine:"			439",
			content:"
			        this.namespace = namespace;
			        this.rpcHook = rpcHook;			
",
,
			fromLine:"			450",
			toLine:"			451",
			content:"
			    @Override
			    public void createTopic(String key, String newTopic, int queueNum, Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			464",
			toLine:"			465",
			content:"
			    @Override
			    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag, Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
			    @Override			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			531",
			toLine:"			531",
			content:"
			    public AllocateMessageQueueStrategy getAllocateMessageQueueStrategy() {			
",
,
			fromLine:"			535",
			toLine:"			535",
			content:"
			    public void setAllocateMessageQueueStrategy(AllocateMessageQueueStrategy allocateMessageQueueStrategy) {			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			    public ConsumeFromWhere getConsumeFromWhere() {			
",
,
			fromLine:"			551",
			toLine:"			551",
			content:"
			    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {			
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			603",
			toLine:"			603",
			content:"
			    public MessageModel getMessageModel() {			
",
,
			fromLine:"			607",
			toLine:"			607",
			content:"
			    public void setMessageModel(MessageModel messageModel) {			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			    public int getPullBatchSize() {			
",
,
			fromLine:"			615",
			toLine:"			615",
			content:"
			    public void setPullBatchSize(int pullBatchSize) {			
",
,
			fromLine:"			627",
			toLine:"			627",
			content:"
			    public int getPullThresholdForQueue() {			
",
,
			fromLine:"			631",
			toLine:"			631",
			content:"
			    public void setPullThresholdForQueue(int pullThresholdForQueue) {			
",
,
			fromLine:"			651",
			toLine:"			651",
			content:"
			    public int getPullThresholdSizeForQueue() {			
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			    public void setPullThresholdSizeForQueue(final int pullThresholdSizeForQueue) {			
",
,
			fromLine:"			700",
			toLine:"			700",
			content:"
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			710",
			toLine:"			712",
			content:"
			     *
			     * @param msg Message to send back.
			     * @param delayLevel delay level.			
",
,
			fromLine:"			720",
			toLine:"			720",
			content:"
			    @Override			
",
,
			fromLine:"			722",
			toLine:"			723",
			content:"
			        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			738",
			toLine:"			738",
			content:"
			    public void start() throws MQClientException {			
",
,
			fromLine:"			742",
			toLine:"			742",
			content:"
			            try {			
",
,
			fromLine:"			745",
			toLine:"			746",
			content:"
			                dispatcher.setNamespaceV2(namespaceV2);
			                traceDispatcher = dispatcher;			
",
,
			fromLine:"			748",
			toLine:"			748",
			content:"
			            } catch (Throwable e) {			
",
,
			fromLine:"			751",
			toLine:"			753",
			content:"
			        }
			        if (null != traceDispatcher) {
			            if (traceDispatcher instanceof AsyncTraceDispatcher) {			
",
,
			fromLine:"			756",
			toLine:"			756",
			content:"
			            try {			
",
,
			fromLine:"			758",
			toLine:"			758",
			content:"
			            } catch (MQClientException e) {			
",
,
			fromLine:"			769",
			toLine:"			770",
			content:"
			        this.defaultMQPushConsumerImpl.shutdown(awaitTerminationMillisWhenShutdown);
			        if (null != traceDispatcher) {			
",
,
			fromLine:"			819",
			toLine:"			821",
			content:"
			     *
			     * @param topic topic to consume.
			     * @param fullClassName full class name,must extend org.apache.rocketmq.common.filter. MessageFilter			
",
,
			fromLine:"			824",
			toLine:"			825",
			content:"
			    @Override
			    public void subscribe(String topic, String fullClassName, String filterClassSource) throws MQClientException {			
",
,
			fromLine:"			894",
			toLine:"			894",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			902",
			toLine:"			902",
			content:"
			    public void setOffsetStore(OffsetStore offsetStore) {			
",
,
			fromLine:"			906",
			toLine:"			906",
			content:"
			    public String getConsumeTimestamp() {			
",
,
			fromLine:"			910",
			toLine:"			910",
			content:"
			    public void setConsumeTimestamp(String consumeTimestamp) {			
",
,
			fromLine:"			923",
			toLine:"			923",
			content:"
			    public boolean isUnitMode() {			
",
,
			fromLine:"			928",
			toLine:"			928",
			content:"
			    public void setUnitMode(boolean isUnitMode) {			
",
,
			fromLine:"			940",
			toLine:"			940",
			content:"
			    public int getMaxReconsumeTimes() {			
",
,
			fromLine:"			944",
			toLine:"			944",
			content:"
			    public void setMaxReconsumeTimes(final int maxReconsumeTimes) {			
",
,
			fromLine:"			988",
			toLine:"			988",
			content:"
			    public TraceDispatcher getTraceDispatcher() {			
",
,
			fromLine:"			1008",
			toLine:"			1008",
			content:"
			    public MessageQueueListener getMessageQueueListener() {			
",
,
			fromLine:"			1012",
			toLine:"			1012",
			content:"
			    public void setMessageQueueListener(MessageQueueListener messageQueueListener) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/producer/DefaultMQProducer.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.client.producer;
			
			import java.util.Arrays;
			import java.util.Collection;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CopyOnWriteArraySet;
			import java.util.concurrent.ExecutorService;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.RequestTimeoutException;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
			import org.apache.rocketmq.client.trace.TraceDispatcher;
			import org.apache.rocketmq.client.trace.hook.EndTransactionTraceHookImpl;
			import org.apache.rocketmq.client.trace.hook.SendMessageTraceHookImpl;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.compression.CompressionType;
			import org.apache.rocketmq.common.compression.Compressor;
			import org.apache.rocketmq.common.compression.CompressorFactory;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			        if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			        } else {			
",
,
			fromLine:"			488",
			toLine:"			488",
			content:"
			            if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			490",
			toLine:"			490",
			content:"
			            } else {			
",
,
			fromLine:"			500",
			toLine:"			502",
			content:"
			     *
			     * @param msg          message to send.
			     * @param sendCallback Callback to execute.			
",
,
			fromLine:"			508",
			toLine:"			508",
			content:"
			    @Override			
",
,
			fromLine:"			510",
			toLine:"			511",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			        if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			549",
			toLine:"			549",
			content:"
			        } else {			
",
,
			fromLine:"			556",
			toLine:"			558",
			content:"
			     *
			     * @param msg     Message to send.
			     * @param mq      Target message queue.			
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			    @Override			
",
,
			fromLine:"			569",
			toLine:"			570",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			576",
			toLine:"			578",
			content:"
			     *
			     * @param msg          Message to send.
			     * @param mq           Target message queue.			
",
,
			fromLine:"			584",
			toLine:"			584",
			content:"
			    @Override			
",
,
			fromLine:"			586",
			toLine:"			587",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			589",
			toLine:"			590",
			content:"
			        try {
			            if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			592",
			toLine:"			592",
			content:"
			            } else {			
",
,
			fromLine:"			602",
			toLine:"			605",
			content:"
			     *
			     * @param msg          Message to send.
			     * @param mq           Target message queue.
			     * @param sendCallback Callback to execute on sending completed, either successful or unsuccessful.			
",
,
			fromLine:"			611",
			toLine:"			611",
			content:"
			    @Override			
",
,
			fromLine:"			613",
			toLine:"			614",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			636",
			toLine:"			638",
			content:"
			     *
			     * @param msg      Message to send.
			     * @param selector Message queue selector, through which we get target message queue to deliver message to.			
",
,
			fromLine:"			647",
			toLine:"			647",
			content:"
			    @Override			
",
,
			fromLine:"			649",
			toLine:"			650",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			652",
			toLine:"			653",
			content:"
			        mq = queueWithNamespace(mq);
			        if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			        } else {			
",
,
			fromLine:"			660",
			toLine:"			660",
			content:"
			    /**			
",
,
			fromLine:"			662",
			toLine:"			665",
			content:"
			     *
			     * @param msg      Message to send.
			     * @param selector Message queue selector, through which we get target message queue to deliver message to.
			     * @param arg      Argument to work along with message queue selector.			
",
,
			fromLine:"			674",
			toLine:"			674",
			content:"
			    @Override			
",
,
			fromLine:"			676",
			toLine:"			677",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			683",
			toLine:"			686",
			content:"
			     *
			     * @param msg          Message to send.
			     * @param selector     Message selector through which to get target message queue.
			     * @param arg          Argument used along with message queue selector.			
",
,
			fromLine:"			692",
			toLine:"			692",
			content:"
			    @Override			
",
,
			fromLine:"			694",
			toLine:"			694",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			696",
			toLine:"			696",
			content:"
			        try {			
",
,
			fromLine:"			698",
			toLine:"			699",
			content:"
			            mq = queueWithNamespace(mq);
			            if (this.getAutoBatch() && !(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			701",
			toLine:"			701",
			content:"
			            } else {			
",
,
			fromLine:"			704",
			toLine:"			704",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			709",
			toLine:"			709",
			content:"
			    /**			
",
,
			fromLine:"			711",
			toLine:"			715",
			content:"
			     *
			     * @param msg          Message to send.
			     * @param selector     Message selector through which to get target message queue.
			     * @param arg          Argument used along with message queue selector.
			     * @param sendCallback callback to execute on sending completion.			
",
,
			fromLine:"			721",
			toLine:"			721",
			content:"
			    @Override			
",
,
			fromLine:"			723",
			toLine:"			724",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
						
",
,
			fromLine:"			730",
			toLine:"			732",
			content:"
			        // send in sync mode
			        if (sendCallback == null) {
			            if (mq == null) {			
",
,
			fromLine:"			734",
			toLine:"			734",
			content:"
			            } else {			
",
,
			fromLine:"			737",
			toLine:"			738",
			content:"
			        } else {
			            if (mq == null) {			
",
,
			fromLine:"			740",
			toLine:"			740",
			content:"
			            } else {			
",
,
			fromLine:"			746",
			toLine:"			746",
			content:"
						
",
,
			fromLine:"			749",
			toLine:"			750",
			content:"
			        // check whether it can batch
			        if (!canBatch(msg)) {			
",
,
			fromLine:"			752",
			toLine:"			755",
			content:"
			        } else {
			            Validators.checkMessage(msg, this);
			            MessageClientIDSetter.setUniqID(msg);
			            if (sendCallback == null) {			
",
,
			fromLine:"			757",
			toLine:"			757",
			content:"
			            } else {			
",
,
			fromLine:"			794",
			toLine:"			796",
			content:"
			     *
			     * @param msg             request message to send
			     * @param requestCallback callback to execute on request completion.			
",
,
			fromLine:"			803",
			toLine:"			803",
			content:"
			    @Override			
",
,
			fromLine:"			805",
			toLine:"			806",
			content:"
			        throws MQClientException, RemotingException, InterruptedException, MQBrokerException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			812",
			toLine:"			815",
			content:"
			     *
			     * @param msg      request message to send
			     * @param selector message queue selector, through which we get target message queue to deliver message to.
			     * @param arg      argument to work along with message queue selector.			
",
,
			fromLine:"			824",
			toLine:"			824",
			content:"
			    @Override			
",
,
			fromLine:"			827",
			toLine:"			828",
			content:"
			        InterruptedException, RequestTimeoutException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			832",
			toLine:"			832",
			content:"
			    /**			
",
,
			fromLine:"			834",
			toLine:"			838",
			content:"
			     *
			     * @param msg             requst message to send
			     * @param selector        message queue selector, through which we get target message queue to deliver message to.
			     * @param arg             argument to work along with message queue selector.
			     * @param requestCallback callback to execute on request completion.			
",
,
			fromLine:"			845",
			toLine:"			845",
			content:"
			    @Override			
",
,
			fromLine:"			848",
			toLine:"			849",
			content:"
			        InterruptedException, MQBrokerException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			855",
			toLine:"			857",
			content:"
			     *
			     * @param msg     request message to send
			     * @param mq      target message queue.			
",
,
			fromLine:"			865",
			toLine:"			865",
			content:"
			    @Override			
",
,
			fromLine:"			867",
			toLine:"			868",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException, RequestTimeoutException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			872",
			toLine:"			872",
			content:"
			    /**			
",
,
			fromLine:"			874",
			toLine:"			877",
			content:"
			     *
			     * @param msg             request message to send
			     * @param mq              target message queue.
			     * @param requestCallback callback to execute on request completion.			
",
,
			fromLine:"			884",
			toLine:"			884",
			content:"
			    @Override			
",
,
			fromLine:"			886",
			toLine:"			887",
			content:"
			        throws MQClientException, RemotingException, InterruptedException, MQBrokerException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			893",
			toLine:"			895",
			content:"
			     *
			     * @param msg      Message to send.
			     * @param selector Message queue selector, through which to determine target message queue to deliver message			
",
,
			fromLine:"			901",
			toLine:"			901",
			content:"
			    @Override			
",
,
			fromLine:"			903",
			toLine:"			904",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {
			        msg.setTopic(withNamespace(msg.getTopic()));			
",
,
			fromLine:"			924",
			toLine:"			927",
			content:"
			     *
			     * @param key        accessKey
			     * @param newTopic   topic name
			     * @param queueNum   topic's queue number			
",
,
			fromLine:"			932",
			toLine:"			932",
			content:"
			    @Override			
",
,
			fromLine:"			934",
			toLine:"			934",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			941",
			toLine:"			945",
			content:"
			     *
			     * @param key          accessKey
			     * @param newTopic     topic name
			     * @param queueNum     topic's queue number
			     * @param topicSysFlag topic system flag			
",
,
			fromLine:"			950",
			toLine:"			950",
			content:"
			    @Override			
",
,
			fromLine:"			952",
			toLine:"			952",
			content:"
			        Map<String, String> attributes) throws MQClientException {			
",
,
			fromLine:"			1018",
			toLine:"			1022",
			content:"
			     *
			     * @param topic  message topic
			     * @param key    message key index word
			     * @param maxNum max message number
			     * @param begin  from when			
",
,
			fromLine:"			1029",
			toLine:"			1029",
			content:"
			    @Override			
",
,
			fromLine:"			1031",
			toLine:"			1031",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			1079",
			toLine:"			1079",
			content:"
			        long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1089",
			toLine:"			1089",
			content:"
			    @Override			
",
,
			fromLine:"			1091",
			toLine:"			1091",
			content:"
			        long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1095",
			toLine:"			1095",
			content:"
			    @Override			
",
,
			fromLine:"			1097",
			toLine:"			1097",
			content:"
			        SendCallback sendCallback) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1101",
			toLine:"			1101",
			content:"
			    @Override			
",
,
			fromLine:"			1104",
			toLine:"			1104",
			content:"
			        long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/MQAdminImpl.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.client.impl;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Set;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageId;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			
			    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			87",
			content:"
			        try {
			            Validators.checkTopic(newTopic);
			            Validators.isSystemTopic(newTopic);			
",
,
			fromLine:"			100",
			toLine:"			104",
			content:"
			                    if (addr != null) {
			                        TopicConfig topicConfig = new TopicConfig(newTopic);
			                        topicConfig.setReadQueueNums(queueNum);
			                        topicConfig.setWriteQueueNums(queueNum);
			                        topicConfig.setTopicSysFlag(topicSysFlag);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                            try {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			                            orderTopicString.append(":");			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			            try {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            try {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			            try {			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			        }			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			        InterruptedException {			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
						
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
						
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			        String uniqKey) throws InterruptedException, MQClientException {			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
						
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			        String uniqKey) throws InterruptedException, MQClientException {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
						
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			        String uniqKey, long begin, long end) throws InterruptedException, MQClientException {			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
						
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			        String uniqKey, long begin, long end) throws InterruptedException, MQClientException {			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
						
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			        InterruptedException {			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			322",
			toLine:"			322",
			content:"
			        InterruptedException {			
",
,
			fromLine:"			324",
			toLine:"			325",
			content:"
			        if (null == topicRouteData) {
			            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			331",
			toLine:"			332",
			content:"
			            for (BrokerData brokerData : topicRouteData.getBrokerDatas()) {
			                if (clusterName != null && !clusterName.isEmpty()			
",
,
			fromLine:"			349",
			toLine:"			353",
			content:"
			                        QueryMessageRequestHeader requestHeader = new QueryMessageRequestHeader();
			                        requestHeader.setTopic(topic);
			                        requestHeader.setKey(key);
			                        requestHeader.setMaxNum(maxNum);
			                        requestHeader.setBeginTimestamp(begin);			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			                                }			
",
,
			fromLine:"			424",
			toLine:"			425",
			content:"
			                    for (MessageExt msgExt : qr.getMessageList()) {
			                        if (isUniqKey) {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			                                    // both topic and key must be equal at the same time			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/producer/DefaultMQProducerImpl.java:
		[
			fromLine:"			16",
			toLine:"			97",
			content:"
			 */
			package org.apache.rocketmq.client.impl.producer;
			
			import java.io.IOException;
			import java.net.UnknownHostException;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Random;
			import java.util.Set;
			import java.util.Optional;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.RejectedExecutionException;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.Validators;
			import org.apache.rocketmq.client.common.ClientErrorCode;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.RequestTimeoutException;
			import org.apache.rocketmq.client.hook.CheckForbiddenContext;
			import org.apache.rocketmq.client.hook.CheckForbiddenHook;
			import org.apache.rocketmq.client.hook.EndTransactionContext;
			import org.apache.rocketmq.client.hook.EndTransactionHook;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.hook.SendMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.latency.MQFaultStrategy;
			import org.apache.rocketmq.client.latency.Resolver;
			import org.apache.rocketmq.client.latency.ServiceDetector;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.client.producer.RequestCallback;
			import org.apache.rocketmq.client.producer.RequestFutureHolder;
			import org.apache.rocketmq.client.producer.RequestResponseFuture;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.producer.TransactionCheckListener;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.client.producer.TransactionSendResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ServiceState;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageId;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageType;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.utils.CorrelationIdUtil;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			                    mQClientFactory.getMQClientAPIImpl()			
",
,
			fromLine:"			428",
			toLine:"			428",
			content:"
			                }			
",
,
			fromLine:"			457",
			toLine:"			458",
			content:"
			
			    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {			
",
,
			fromLine:"			461",
			toLine:"			461",
			content:"
						
",
,
			fromLine:"			463",
			toLine:"			464",
			content:"
			        this.makeSureStateOK();
			        Validators.checkTopic(newTopic);			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
						
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
						
",
,
			fromLine:"			513",
			toLine:"			513",
			content:"
			        this.makeSureStateOK();			
",
,
			fromLine:"			527",
			toLine:"			527",
			content:"
			        SendCallback sendCallback) throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			531",
			toLine:"			533",
			content:"
			    /**
			     * @param msg
			     * @param sendCallback			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			    @Deprecated			
",
,
			fromLine:"			541",
			toLine:"			541",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			548",
			toLine:"			548",
			content:"
			                long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			                    try {			
",
,
			fromLine:"			560",
			toLine:"			560",
			content:"
			        };			
",
,
			fromLine:"			637",
			toLine:"			637",
			content:"
						
",
,
			fromLine:"			641",
			toLine:"			641",
			content:"
			        this.makeSureStateOK();			
",
,
			fromLine:"			643",
			toLine:"			643",
			content:"
						
",
,
			fromLine:"			649",
			toLine:"			649",
			content:"
			                        mQClientFactory.getMQAdminImpl().parsePublishMessageQueues(topicPublishInfo.getMessageQueueList());			
",
,
			fromLine:"			653",
			toLine:"			653",
			content:"
						
",
,
			fromLine:"			659",
			toLine:"			659",
			content:"
			            long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			670",
			toLine:"			670",
			content:"
			        validateNameServerSetting();			
",
,
			fromLine:"			677",
			toLine:"			677",
			content:"
						
",
,
			fromLine:"			679",
			toLine:"			679",
			content:"
			                                boolean reachable) {			
",
,
			fromLine:"			691",
			toLine:"			691",
			content:"
						
",
,
			fromLine:"			698",
			toLine:"			698",
			content:"
			        this.makeSureStateOK();			
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			        long endTimestamp = beginTimestampFirst;			
",
,
			fromLine:"			709",
			toLine:"			709",
			content:"
			            SendResult sendResult = null;			
",
,
			fromLine:"			726",
			toLine:"			726",
			content:"
			                            //Reset topic with namespace during resend.			
",
,
			fromLine:"			729",
			toLine:"			729",
			content:"
			                        long costTime = beginTimestampPrev - beginTimestampFirst;			
",
,
			fromLine:"			734",
			toLine:"			734",
			content:"
						
",
,
			fromLine:"			736",
			toLine:"			737",
			content:"
			                        endTimestamp = System.currentTimeMillis();
			                        this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false, true);			
",
,
			fromLine:"			755",
			toLine:"			755",
			content:"
			                        endTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			757",
			toLine:"			757",
			content:"
			                        log.warn("sendKernelImpl exception, resend at once, InvokeID: {}, RT: {}ms, Broker: {}", invokeID, endTimestamp - beginTimestampPrev, mq, e);			
",
,
			fromLine:"			764",
			toLine:"			764",
			content:"
			                            // Set this broker unreachable when detecting schedule task is running for RemotingException.			
",
,
			fromLine:"			767",
			toLine:"			767",
			content:"
			                            // Otherwise, isolate this broker.			
",
,
			fromLine:"			771",
			toLine:"			771",
			content:"
			                        if (log.isDebugEnabled()) {			
",
,
			fromLine:"			777",
			toLine:"			777",
			content:"
			                        endTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			780",
			toLine:"			780",
			content:"
			                        if (log.isDebugEnabled()) {			
",
,
			fromLine:"			794",
			toLine:"			794",
			content:"
			                        endTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			797",
			toLine:"			797",
			content:"
			                        if (log.isDebugEnabled()) {			
",
,
			fromLine:"			812",
			toLine:"			812",
			content:"
			                System.currentTimeMillis() - beginTimestampFirst,			
",
,
			fromLine:"			837",
			toLine:"			837",
			content:"
						
",
,
			fromLine:"			858",
			toLine:"			858",
			content:"
						
",
,
			fromLine:"			865",
			toLine:"			865",
			content:"
			        long beginStartTime = System.currentTimeMillis();			
",
,
			fromLine:"			868",
			toLine:"			869",
			content:"
			        if (null == brokerAddr) {
			            tryToFindTopicPublishInfo(mq.getTopic());			
",
,
			fromLine:"			877",
			toLine:"			877",
			content:"
						
",
,
			fromLine:"			880",
			toLine:"			881",
			content:"
			                //for MessageBatch,ID has been set in the generating process
			                if (!(msg instanceof MessageBatch)) {			
",
,
			fromLine:"			886",
			toLine:"			886",
			content:"
			                if (null != this.mQClientFactory.getClientConfig().getNamespace()) {			
",
,
			fromLine:"			892",
			toLine:"			892",
			content:"
			                boolean msgBodyCompressed = false;			
",
,
			fromLine:"			898",
			toLine:"			898",
			content:"
						
",
,
			fromLine:"			907",
			toLine:"			907",
			content:"
			                    checkForbiddenContext.setGroup(this.defaultMQProducer.getProducerGroup());			
",
,
			fromLine:"			909",
			toLine:"			910",
			content:"
			                    checkForbiddenContext.setBrokerAddr(brokerAddr);
			                    checkForbiddenContext.setMessage(msg);			
",
,
			fromLine:"			919",
			toLine:"			919",
			content:"
			                    context.setProducerGroup(this.defaultMQProducer.getProducerGroup());			
",
,
			fromLine:"			922",
			toLine:"			923",
			content:"
			                    context.setBrokerAddr(brokerAddr);
			                    context.setMessage(msg);			
",
,
			fromLine:"			925",
			toLine:"			925",
			content:"
			                    context.setNamespace(this.defaultMQProducer.getNamespace());			
",
,
			fromLine:"			930",
			toLine:"			930",
			content:"
						
",
,
			fromLine:"			938",
			toLine:"			938",
			content:"
			                requestHeader.setProducerGroup(this.defaultMQProducer.getProducerGroup());			
",
,
			fromLine:"			941",
			toLine:"			941",
			content:"
			                requestHeader.setDefaultTopicQueueNums(this.defaultMQProducer.getDefaultTopicQueueNums());			
",
,
			fromLine:"			944",
			toLine:"			945",
			content:"
			                requestHeader.setBornTimestamp(System.currentTimeMillis());
			                requestHeader.setFlag(msg.getFlag());			
",
,
			fromLine:"			948",
			toLine:"			948",
			content:"
			                requestHeader.setUnitMode(this.isUnitMode());			
",
,
			fromLine:"			951",
			toLine:"			951",
			content:"
			                if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {			
",
,
			fromLine:"			954",
			toLine:"			954",
			content:"
			                        requestHeader.setReconsumeTimes(Integer.valueOf(reconsumeTimes));			
",
,
			fromLine:"			957",
			toLine:"			957",
			content:"
						
",
,
			fromLine:"			960",
			toLine:"			960",
			content:"
			                        requestHeader.setMaxReconsumeTimes(Integer.valueOf(maxReconsumeTimes));			
",
,
			fromLine:"			965",
			toLine:"			965",
			content:"
			                SendResult sendResult = null;			
",
,
			fromLine:"			967",
			toLine:"			967",
			content:"
			                    case ASYNC:			
",
,
			fromLine:"			973",
			toLine:"			973",
			content:"
			                            //Fix bug:https://github.com/apache/rocketmq-externals/issues/66			
",
,
			fromLine:"			975",
			toLine:"			975",
			content:"
			                            messageCloned = true;			
",
,
			fromLine:"			980",
			toLine:"			980",
			content:"
			                            if (!messageCloned) {			
",
,
			fromLine:"			983",
			toLine:"			983",
			content:"
			                            }			
",
,
			fromLine:"			987",
			toLine:"			987",
			content:"
			                        long costTimeAsync = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			990",
			toLine:"			990",
			content:"
			                        }			
",
,
			fromLine:"			995",
			toLine:"			997",
			content:"
			                            requestHeader,
			                            timeout - costTimeAsync,
			                            communicationMode,			
",
,
			fromLine:"			1007",
			toLine:"			1007",
			content:"
			                        long costTimeSync = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			1010",
			toLine:"			1010",
			content:"
			                        }			
",
,
			fromLine:"			1013",
			toLine:"			1013",
			content:"
			                            brokerName,			
",
,
			fromLine:"			1015",
			toLine:"			1016",
			content:"
			                            requestHeader,
			                            timeout - costTimeSync,			
",
,
			fromLine:"			1038",
			toLine:"			1039",
			content:"
			            } finally {
			                msg.setBody(prevBody);			
",
,
			fromLine:"			1137",
			toLine:"			1137",
			content:"
						
",
,
			fromLine:"			1142",
			toLine:"			1142",
			content:"
			            context.setProducerGroup(defaultMQProducer.getProducerGroup());			
",
,
			fromLine:"			1144",
			toLine:"			1144",
			content:"
			            context.setMessage(msg);			
",
,
			fromLine:"			1147",
			toLine:"			1147",
			content:"
			            context.setTransactionState(state);			
",
,
			fromLine:"			1157",
			toLine:"			1157",
			content:"
			        try {			
",
,
			fromLine:"			1168",
			toLine:"			1168",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1171",
			toLine:"			1171",
			content:"
						
",
,
			fromLine:"			1175",
			toLine:"			1175",
			content:"
			        this.makeSureStateOK();			
",
,
			fromLine:"			1177",
			toLine:"			1177",
			content:"
						
",
,
			fromLine:"			1182",
			toLine:"			1182",
			content:"
			        long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			1186",
			toLine:"			1186",
			content:"
						
",
,
			fromLine:"			1192",
			toLine:"			1192",
			content:"
			     */			
",
,
			fromLine:"			1194",
			toLine:"			1194",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			1198",
			toLine:"			1201",
			content:"
			    /**
			     * @param msg
			     * @param mq
			     * @param sendCallback			
",
,
			fromLine:"			1209",
			toLine:"			1209",
			content:"
			    @Deprecated			
",
,
			fromLine:"			1211",
			toLine:"			1211",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			1218",
			toLine:"			1218",
			content:"
			                    makeSureStateOK();			
",
,
			fromLine:"			1220",
			toLine:"			1220",
			content:"
						
",
,
			fromLine:"			1224",
			toLine:"			1224",
			content:"
			                    long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			1226",
			toLine:"			1227",
			content:"
			                        try {
			                            sendKernelImpl(msg, mq, CommunicationMode.ASYNC, newCallBack, null,			
",
,
			fromLine:"			1241",
			toLine:"			1241",
			content:"
						
",
,
			fromLine:"			1253",
			toLine:"			1253",
			content:"
			        try {			
",
,
			fromLine:"			1262",
			toLine:"			1262",
			content:"
			     */			
",
,
			fromLine:"			1264",
			toLine:"			1264",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1267",
			toLine:"			1267",
			content:"
						
",
,
			fromLine:"			1269",
			toLine:"			1269",
			content:"
			        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1272",
			toLine:"			1272",
			content:"
						
",
,
			fromLine:"			1281",
			toLine:"			1281",
			content:"
			        this.makeSureStateOK();			
",
,
			fromLine:"			1283",
			toLine:"			1283",
			content:"
						
",
,
			fromLine:"			1289",
			toLine:"			1289",
			content:"
			                    mQClientFactory.getMQAdminImpl().parsePublishMessageQueues(topicPublishInfo.getMessageQueueList());			
",
,
			fromLine:"			1293",
			toLine:"			1293",
			content:"
						
",
,
			fromLine:"			1299",
			toLine:"			1299",
			content:"
			            long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			1303",
			toLine:"			1303",
			content:"
			            if (mq != null) {			
",
,
			fromLine:"			1310",
			toLine:"			1310",
			content:"
			        validateNameServerSetting();			
",
,
			fromLine:"			1316",
			toLine:"			1316",
			content:"
			     */			
",
,
			fromLine:"			1318",
			toLine:"			1318",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			1325",
			toLine:"			1329",
			content:"
			     *
			     * @param msg
			     * @param selector
			     * @param arg
			     * @param sendCallback			
",
,
			fromLine:"			1335",
			toLine:"			1335",
			content:"
			    @Deprecated			
",
,
			fromLine:"			1338",
			toLine:"			1338",
			content:"
			        throws MQClientException, RemotingException, InterruptedException {			
",
,
			fromLine:"			1344",
			toLine:"			1344",
			content:"
			                long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			1347",
			toLine:"			1348",
			content:"
			                        try {
			                            sendSelectImpl(msg, selector, arg, CommunicationMode.ASYNC, newCallBack,			
",
,
			fromLine:"			1361",
			toLine:"			1361",
			content:"
			        };			
",
,
			fromLine:"			1367",
			toLine:"			1367",
			content:"
			     */			
",
,
			fromLine:"			1370",
			toLine:"			1370",
			content:"
			        try {			
",
,
			fromLine:"			1499",
			toLine:"			1499",
			content:"
						
",
,
			fromLine:"			1522",
			toLine:"			1522",
			content:"
			        long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {			
",
,
			fromLine:"			1536",
			toLine:"			1536",
			content:"
			            long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1556",
			toLine:"			1556",
			content:"
						
",
,
			fromLine:"			1559",
			toLine:"			1560",
			content:"
			        long beginTimestamp = System.currentTimeMillis();
			        prepareSendRequest(msg, timeout);			
",
,
			fromLine:"			1562",
			toLine:"			1562",
			content:"
						
",
,
			fromLine:"			1566",
			toLine:"			1566",
			content:"
			        long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1578",
			toLine:"			1578",
			content:"
			            }			
",
,
			fromLine:"			1581",
			toLine:"			1581",
			content:"
						
",
,
			fromLine:"			1585",
			toLine:"			1586",
			content:"
			        long beginTimestamp = System.currentTimeMillis();
			        prepareSendRequest(msg, timeout);			
",
,
			fromLine:"			1589",
			toLine:"			1589",
			content:"
			        try {			
",
,
			fromLine:"			1593",
			toLine:"			1593",
			content:"
			            long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1605",
			toLine:"			1605",
			content:"
			                }			
",
,
			fromLine:"			1607",
			toLine:"			1607",
			content:"
						
",
,
			fromLine:"			1613",
			toLine:"			1613",
			content:"
						
",
,
			fromLine:"			1617",
			toLine:"			1618",
			content:"
			        long beginTimestamp = System.currentTimeMillis();
			        prepareSendRequest(msg, timeout);			
",
,
			fromLine:"			1620",
			toLine:"			1620",
			content:"
						
",
,
			fromLine:"			1624",
			toLine:"			1624",
			content:"
			        long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1635",
			toLine:"			1635",
			content:"
			            }			
",
,
			fromLine:"			1639",
			toLine:"			1639",
			content:"
						
",
,
			fromLine:"			1642",
			toLine:"			1643",
			content:"
			        long beginTimestamp = System.currentTimeMillis();
			        prepareSendRequest(msg, timeout);			
",
,
			fromLine:"			1646",
			toLine:"			1646",
			content:"
			        try {			
",
,
			fromLine:"			1650",
			toLine:"			1650",
			content:"
			            long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1662",
			toLine:"			1662",
			content:"
			                }			
",
,
			fromLine:"			1664",
			toLine:"			1664",
			content:"
						
",
,
			fromLine:"			1684",
			toLine:"			1684",
			content:"
						
",
,
			fromLine:"			1687",
			toLine:"			1688",
			content:"
			        long beginTimestamp = System.currentTimeMillis();
			        prepareSendRequest(msg, timeout);			
",
,
			fromLine:"			1690",
			toLine:"			1690",
			content:"
						
",
,
			fromLine:"			1694",
			toLine:"			1694",
			content:"
			        long cost = System.currentTimeMillis() - beginTimestamp;			
",
,
			fromLine:"			1705",
			toLine:"			1705",
			content:"
			            }			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByKeyIT.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.test.client.producer.querymsg;
			
			import java.util.List;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class QueryMsgByKeyIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(QueryMsgByKeyIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			58",
			toLine:"			60",
			content:"
			        long begin = System.currentTimeMillis();
			        List<Object> msgs = MQMessageFactory.getKeyMsg(topic, key, msgSize);
			        producer.send(msgs);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			            TestUtils.waitForMoment(500 * 3);			
",
,
			fromLine:"			80",
			toLine:"			82",
			content:"
			        long begin = System.currentTimeMillis();
			        List<Object> msgs = MQMessageFactory.getKeyMsg(topic, key, msgSize);
			        producer.send(msgs);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        try {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			                i--;			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        long end = System.currentTimeMillis() + 500000;			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        long end = System.currentTimeMillis() + 500000;			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByKeySubCommand.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            }			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        throws MQClientException, InterruptedException {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgTraceByIdSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.time.DateFormatUtils;
			import org.apache.rocketmq.client.QueryResult;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.trace.TraceType;
			import org.apache.rocketmq.client.trace.TraceView;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			119",
			content:"
			        throws MQClientException, InterruptedException {
			        admin.start();			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/QueryMessageProcessor.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.FileRegion;
			import io.opentelemetry.api.common.Attributes;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.pagecache.OneMessageTransfer;
			import org.apache.rocketmq.broker.pagecache.QueryMessageTransfer;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewMessageRequestHeader;
			import org.apache.rocketmq.store.QueryMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_REQUEST_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESPONSE_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        final QueryMessageResult queryMessageResult =			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/index/IndexFile.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.store.index;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.util.List;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        this.fileTotalSize =			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			            int slotPos = keyHash % this.hashSlotNum;			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			                int absIndexPos =			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
						
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        if (this.mappedFile.hold()) {			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			            int slotPos = keyHash % this.hashSlotNum;			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			                    for (int nextIndexToRead = slotValue; ; ) {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			                        int absIndexPos =			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			                        long timeRead = this.indexHeader.getBeginTimestamp() + timeDiff;			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			                            || prevIndexRead > this.indexHeader.getIndexCount()			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/index/IndexService.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.store.index;
			
			import java.io.File;
			import java.io.IOException;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
						
",
,
			fromLine:"			165",
			toLine:"			166",
			content:"
			
			    public QueryOffsetResult queryOffset(String topic, String key, int maxNum, long begin, long end) {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        long indexLastUpdatePhyoffset = 0;			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
						
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
						
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/index/IndexFileTest.java:
		[
			fromLine:"			20",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.store.index;
			
			import java.io.File;
			import java.util.ArrayList;
			import java.util.List;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        final List<Long> phyOffsets = new ArrayList<>();			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/MQHelper.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client;
			
			import java.util.Set;
			import java.util.TreeSet;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    @Deprecated			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        final long timestamp) throws Exception {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			     *			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			     * @param instanceName  which instance
			     * @param consumerGroup consumer group
			     * @param topic         topic			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			     */			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        consumer.setInstanceName(instanceName);			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        try {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			                for (MessageQueue mq : mqsNew) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			                        log.info("resetOffsetByTimestamp updateConsumeOffset success, {} {} {}",			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/offset/ResetOffsetByTimeOldCommand.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.tools.command.offset;
			
			import java.util.Date;
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.admin.RollbackStats;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			        List<RollbackStats> rollbackStatsList =			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			                "consumerGroup[%s], topic[%s], force[%s], timestamp(string)[%s], timestamp(long)[%s]%n",			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/MqClientAdmin.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.rocketmq.client;
			
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteSubscriptionGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicStatsInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeTimeSpanRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QuerySubscriptionByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicConsumeByWhoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicsByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteTopicFromNamesrvRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			
			public interface MqClientAdmin {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/admin/MqClientAdminImpl.java:
		[
			fromLine:"			17",
			toLine:"			72",
			content:"
			
			package org.apache.rocketmq.client.impl.admin;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.MqClientAdmin;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.QueryConsumeTimeSpanBody;
			import org.apache.rocketmq.remoting.protocol.body.QuerySubscriptionResponseBody;
			import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
			import org.apache.rocketmq.remoting.protocol.body.ResetOffsetBody;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.CreateTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteSubscriptionGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.DeleteTopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumeStatsRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetTopicStatsInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumeTimeSpanRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QuerySubscriptionByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicConsumeByWhoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryTopicsByConsumerRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ResetOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ViewMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteKVConfigRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.DeleteTopicFromNamesrvRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    @Override			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_MESSAGE, requestHeader);
			        request.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, String.valueOf(uniqueKeyFlag));			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			            if (response.getCode() == ResponseCode.SUCCESS) {
			                List<MessageExt> wrappers = MessageDecoder.decodesBatch(ByteBuffer.wrap(response.getBody()), true, decompressBody, true);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_TOPIC_STATS_INFO, requestHeader);			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_CONSUME_TIME_SPAN, requestHeader);			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_TOPIC, requestHeader);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        request.setBody(body);			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_BROKER, requestHeader);			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_NAMESRV, requestHeader);			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_KV_CONFIG, requestHeader);			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_SUBSCRIPTIONGROUP, requestHeader);			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.INVOKE_BROKER_TO_RESET_OFFSET, requestHeader);			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.VIEW_MESSAGE_BY_ID, requestHeader);			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_CLUSTER_INFO, null);			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_CONNECTION_LIST, requestHeader);			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_TOPICS_BY_CONSUMER, requestHeader);			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_SUBSCRIPTION_BY_CONSUMER, requestHeader);			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_CONSUME_STATS, requestHeader);			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_TOPIC_CONSUME_BY_WHO, requestHeader);			
",
,
			fromLine:"			378",
			toLine:"			378",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_RUNNING_INFO, requestHeader);			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONSUME_MESSAGE_DIRECTLY, requestHeader);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/MQConsumer.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.Set;
			import org.apache.rocketmq.client.MQAdmin;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			     */			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumer.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.Set;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
						
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			     *
			     * @param mq from which message queue			
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			     * null or * expression,meaning subscribe all
			     * @param offset from where to pull			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			     */			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			     */			
",
,
			fromLine:"			73",
			toLine:"			76",
			content:"
			     *
			     * @param mq from which message queue
			     * @param selector message selector({@link MessageSelector}), can be null.
			     * @param offset from where to pull			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			     */			
",
,
			fromLine:"			89",
			toLine:"			93",
			content:"
			     *
			     * @param mq from which message queue
			     * @param selector message selector({@link MessageSelector}), can be null.
			     * @param offset from where to pull
			     * @param maxNums max pulling numbers			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			     */			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			     */			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			     */			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			     */			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			     */			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			     */			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			     */			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			     */			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			     */			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			     */			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			     */			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.example.namespace;
			
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Set;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			28",
			toLine:"			31",
			content:"
			
			    public static final String NAMESPACE = "InstanceTest";
			    public static final String CONSUMER_GROUP = "cidTest";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			    public static void main(String[] args) throws Exception {
			        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer(CONSUMER_GROUP);
			        pullConsumer.setNamespaceV2(NAMESPACE);			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			                    PullResult pullResult =			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/simple/AclClient.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.example.simple;
			
			import java.nio.charset.StandardCharsets;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			
			import org.apache.rocketmq.acl.common.AclClientRPCHook;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			
						
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			                    PullResult pullResult =			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java:
		[
			fromLine:"			17",
			toLine:"			53",
			content:"
			
			package org.apache.rocketmq.test.client.producer.batch;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Random;
			import java.util.UUID;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.hook.SendMessageHook;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.TopicAttributes;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.factory.ProducerFactory;
			import org.apache.rocketmq.test.util.RandomUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        String batchTopic = UUID.randomUUID().toString();			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        String batchTopic = UUID.randomUUID().toString();			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			            long startOffset = 5;			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/simple/PullConsumer.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.example.simple;
			
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			                                    long offset = this.consumeFromOffset(messageQueue);			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			                    consumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getmQClientFactory()			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/simple/PullScheduleService.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.example.simple;
			
			import org.apache.rocketmq.client.consumer.MQPullConsumer;
			import org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullTaskCallback;
			import org.apache.rocketmq.client.consumer.PullTaskContext;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,

		],
		openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PullConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package io.openmessaging.rocketmq.consumer;
			
			import io.openmessaging.KeyValue;
			import io.openmessaging.Message;
			import io.openmessaging.OMSBuiltinKeys;
			import io.openmessaging.consumer.PullConsumer;
			import io.openmessaging.exception.OMSRuntimeException;
			import io.openmessaging.rocketmq.config.ClientConfig;
			import io.openmessaging.rocketmq.domain.ConsumeRequest;
			import io.openmessaging.rocketmq.utils.BeanUtils;
			import io.openmessaging.rocketmq.utils.OMSUtil;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.MQPullConsumer;
			import org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullTaskCallback;
			import org.apache.rocketmq.client.consumer.PullTaskContext;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class PullConsumerImpl implements PullConsumer {			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			
			    private final DefaultMQPullConsumer rocketmqPullConsumer;
			    private final KeyValue properties;			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    private final LocalMessageCache localMessageCache;			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			    public PullConsumerImpl(final KeyValue properties) {
			        this.properties = properties;			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        if ("true".equalsIgnoreCase(System.getenv("OMS_RMQ_DIRECT_NAME_SRV"))) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            }			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			
			        int maxReDeliveryTimes = clientConfig.getRmqMaxRedeliveryTimes();			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        String consumerId = OMSUtil.buildInstanceName();			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public KeyValue attributes() {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public PullConsumer detachQueue(String queueName) {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public synchronized void startup() {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        }			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
						
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			                        offset, localMessageCache.nextPullBatchNums());			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    public synchronized void shutdown() {			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			            this.pullConsumerScheduleService.shutdown();			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        }			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/PullMultipleReplicasIT.java:
		[
			fromLine:"			17",
			toLine:"			53",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.io.UnsupportedEncodingException;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.nio.charset.StandardCharsets;
			import java.time.Duration;
			import java.util.List;
			
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Java6Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    private static DefaultMQPullConsumer pullConsumer;			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			    private static final String MESSAGE_STRING = RandomStringUtils.random(1024);			
",
,
			fromLine:"			75",
			toLine:"			77",
			content:"
			
			        producer = createProducer(PullMultipleReplicasIT.class.getSimpleName() + "_Producer");
			        producer.setSendMsgTimeout(15 * 1000);			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public static void afterClass() {			
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			
			        Message msg = new Message(THREE_REPLICAS_TOPIC, MESSAGE_BODY);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        await().atMost(Duration.ofSeconds(5)).until(() -> {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        assertThat(msgFoundList.size()).isEqualTo(1);			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        await().atMost(Duration.ofSeconds(5)).until(() -> {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        assertThat(msgFoundList.size()).isEqualTo(1);			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        await().atMost(Duration.ofSeconds(5)).until(() -> {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        assertThat(msgFoundList.size()).isEqualTo(1);			
",
,
			fromLine:"			142",
			toLine:"			143",
			content:"
			
			        Message msg = new Message(clusterTopic, MESSAGE_BODY);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        await().atMost(Duration.ofSeconds(5)).until(() -> {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        await().atMost(Duration.ofSeconds(60)).until(() -> {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			        await().atMost(Duration.ofSeconds(60)).until(() -> {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			        assertThat(msgFoundList.size()).isEqualTo(1);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/dledger/DLedgerProduceAndConsumeIT.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.test.dledger;
			
			import java.util.UUID;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.factory.ProducerFactory;
			import org.junit.Assert;
			import org.junit.Test;
			
			import static sun.util.locale.BaseLocale.SEP;
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        String consumerGroup = UUID.randomUUID().toString();			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        MessageQueue messageQueue = new MessageQueue(topic, brokerName, 0);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java:
		[
			fromLine:"			17",
			toLine:"			115",
			content:"
			
			package org.apache.rocketmq.test.grpc.v2;
			
			import apache.rocketmq.v2.AckMessageEntry;
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.AckMessageResponse;
			import apache.rocketmq.v2.AckMessageResultEntry;
			import apache.rocketmq.v2.Address;
			import apache.rocketmq.v2.AddressScheme;
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationResponse;
			import apache.rocketmq.v2.ClientType;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Encoding;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.EndTransactionResponse;
			import apache.rocketmq.v2.Endpoints;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.Message;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.MessageType;
			import apache.rocketmq.v2.MessagingServiceGrpc;
			import apache.rocketmq.v2.Publishing;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryAssignmentResponse;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.RecoverOrphanedTransactionCommand;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.RetryPolicy;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.SendMessageResponse;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Subscription;
			import apache.rocketmq.v2.SystemProperties;
			import apache.rocketmq.v2.TelemetryCommand;
			import apache.rocketmq.v2.TransactionResolution;
			import apache.rocketmq.v2.TransactionSource;
			import com.google.protobuf.ByteString;
			import com.google.protobuf.Duration;
			import com.google.protobuf.util.Durations;
			import com.google.protobuf.util.Timestamps;
			import io.grpc.Channel;
			import io.grpc.Metadata;
			import io.grpc.Server;
			import io.grpc.ServerInterceptors;
			import io.grpc.ServerServiceDefinition;
			import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;
			import io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;
			import io.grpc.netty.shaded.io.netty.handler.ssl.ApplicationProtocolConfig;
			import io.grpc.netty.shaded.io.netty.handler.ssl.SslContextBuilder;
			import io.grpc.netty.shaded.io.netty.handler.ssl.SslProvider;
			import io.grpc.stub.MetadataUtils;
			import io.grpc.stub.StreamObserver;
			import io.grpc.testing.GrpcCleanupRule;
			import io.netty.handler.ssl.ApplicationProtocolNames;
			import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
			import io.netty.handler.ssl.util.SelfSignedCertificate;
			import java.io.IOException;
			import java.net.URL;
			import java.security.cert.CertificateException;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Iterator;
			import java.util.List;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.stream.Collectors;
			import javax.net.ssl.SSLException;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.interceptor.ContextInterceptor;
			import org.apache.rocketmq.proxy.grpc.interceptor.HeaderInterceptor;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.apache.rocketmq.test.util.RandomUtils;
			import org.junit.Rule;
			
			import static org.apache.rocketmq.common.message.MessageClientIDSetter.createUniqID;
			import static org.apache.rocketmq.proxy.config.ConfigurationManager.RMQ_PROXY_HOME;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			            // init consumer offset			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			            EndTransactionResponse endTransactionResponse = blockingStub.endTransaction(			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            await().atMost(java.time.Duration.ofSeconds(30)).until(() -> {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			        this.sendClientSettings(stub, buildSimpleConsumerClientSettings(group)).get();			
",
,
			fromLine:"			383",
			toLine:"			383",
			content:"
			        await().atMost(java.time.Duration.ofSeconds(10)).until(() -> {			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			        this.sendClientSettings(stub, buildSimpleConsumerClientSettings(group)).get();			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
						
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			        this.sendClientSettings(stub, buildSimpleConsumerClientSettings(group)).get();			
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
						
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			        await().atMost(java.time.Duration.ofSeconds(20)).until(() -> {			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			        this.sendClientSettings(stub, buildSimpleConsumerClientSettings(group)).get();			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
						
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			            try {			
",
,
			fromLine:"			507",
			toLine:"			507",
			content:"
						
",
,
			fromLine:"			532",
			toLine:"			532",
			content:"
			        this.sendClientSettings(stub, buildPushConsumerClientSettings(group)).get();			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			        await().atMost(java.time.Duration.ofSeconds(20)).until(() -> {			
",
,
			fromLine:"			565",
			toLine:"			565",
			content:"
						
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			        String topic, String group) {			
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
						
",
,
			fromLine:"			573",
			toLine:"			574",
			content:"
			        List<ReceiveMessageResponse> responseList = new ArrayList<>();
			        Iterator<ReceiveMessageResponse> responseIterator = stub.withDeadlineAfter(timeSeconds, TimeUnit.SECONDS)			
",
,
			fromLine:"			714",
			toLine:"			714",
			content:"
						
",
,
			fromLine:"			717",
			toLine:"			717",
			content:"
			        return EndTransactionRequest.newBuilder()			
",
,
			fromLine:"			719",
			toLine:"			719",
			content:"
			            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			721",
			toLine:"			721",
			content:"
			                .build())			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommand.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.tools.command.message;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			
			import java.util.Set;
						
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            try {			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			                        System.out.print("Consume ok
			");			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageByQueueCommand.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.tools.command.message;
			
			import java.io.UnsupportedEncodingException;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			                System.out.printf("MSGID: %s %s BODY: %s%n", msg.getMsgId(), msg,			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			                try {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			                            calculateByTag(pullResult.getMsgFoundList(), tagCalmap, calByTag);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/PrintMessageSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.io.UnsupportedEncodingException;
			import java.util.List;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			
			    public static void printMessage(final List<MessageExt> msgs, final String charsetName, boolean printBody) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			                System.out.printf("MSGID: %s %s BODY: %s%n", msg.getMsgId(), msg.toString(),			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			                    try {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                            case FOUND:			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/QueryMsgByOffsetSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.nio.charset.Charset;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/monitor/MonitorService.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.rocketmq.tools.monitor;
			
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map.Entry;
			import java.util.TreeMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.RandomUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.topic.OffsetMovedEvent;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			    private final DefaultMQAdminExt defaultMQAdminExt;			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        MixAll.TOOLS_CONSUMER_GROUP);			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			    public MonitorService(MonitorConfig monitorConfig, MonitorListener monitorListener, RPCHook rpcHook) {
			        this.monitorConfig = monitorConfig;			
",
,
			fromLine:"			75",
			toLine:"			77",
			content:"
			
			        this.defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
			        this.defaultMQAdminExt.setInstanceName(instanceName());			
",
,
			fromLine:"			79",
			toLine:"			80",
			content:"
			
			        this.defaultMQPullConsumer.setInstanceName(instanceName());			
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			
			        this.defaultMQPushConsumer.setInstanceName(instanceName());			
",
,
			fromLine:"			85",
			toLine:"			88",
			content:"
			        try {
			            this.defaultMQPushConsumer.setConsumeThreadMin(1);
			            this.defaultMQPushConsumer.setConsumeThreadMax(1);
			            this.defaultMQPushConsumer.subscribe(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT, "*");			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        final int randomInteger = RandomUtils.nextInt(0, Integer.MAX_VALUE);			
",
,
			fromLine:"			143",
			toLine:"			145",
			content:"
			    public void start() throws MQClientException {
			        this.defaultMQPullConsumer.start();
			        this.defaultMQAdminExt.start();			
",
,
			fromLine:"			150",
			toLine:"			152",
			content:"
			    public void shutdown() {
			        this.defaultMQPullConsumer.shutdown();
			        this.defaultMQAdminExt.shutdown();			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			            }			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        long beginTime = System.currentTimeMillis();			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
						
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        }			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			        try {			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			        try {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			                    this.computeUndoneMsgs(undoneMsgs, next.getValue());			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        MQBrokerException, RemotingException, MQClientException {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			                ConsumerRunningInfo info =			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        if (!infoMap.isEmpty()) {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			                try {			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			                    if (maxOffset > 0) {			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/command/message/ConsumeMessageCommandTest.java:
		[
			fromLine:"			16",
			toLine:"			51",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.io.ByteArrayOutputStream;
			import java.io.PrintStream;
			import java.lang.reflect.Field;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.command.SubCommandException;
			import org.junit.AfterClass;
			import org.junit.Assert;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            }			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        DefaultMQPullConsumer defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			        DefaultMQPullConsumer defaultMQPullConsumer = mock(DefaultMQPullConsumer.class);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java:
		[
			fromLine:"			17",
			toLine:"			44",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.filter;
			
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQSqlConsumer;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        MessageSelector selector = MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))");			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			                    PullResult pullResult =			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.test.lmq.benchmark;
			
			import com.google.common.math.IntMath;
			import com.google.common.math.LongMath;
			import java.nio.charset.StandardCharsets;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.consumer.PullResult;
			import org.apache.rocketmq.client.consumer.PullStatus;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.util.StatUtil;
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			                        logger.error("", e);			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			        }			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			                    logger.error("", e);			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			                                .getmQClientFactory()			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/lmq/TestBenchLmqStore.java:
		[
			fromLine:"			16",
			toLine:"			55",
			content:"
			 */
			package org.apache.rocketmq.test.lmq;
			
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.PullCallback;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPullConsumerImpl;
			import org.apache.rocketmq.client.impl.consumer.RebalanceImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.test.lmq.benchmark.BenchLmqStore;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.atLeastOnce;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        BenchLmqStore.doPull(new ConcurrentHashMap<>(), new MessageQueue(), 1L);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        verify(mqClientAPI, atLeastOnce()).queryConsumerOffset(anyString(), any(QueryConsumerOffsetRequestHeader.class), anyLong());			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/MQPushConsumer.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import org.apache.rocketmq.client.consumer.listener.MessageListener;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.exception.MQClientException;
						
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			     *
			     * @param fullClassName full class name,must extend org.apache.rocketmq.common.filter. MessageFilter			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    @Deprecated			
",
,

		],
		namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.namesrv.kvconfig;
			
			import java.io.IOException;
			import java.util.HashMap;
			import java.util.Map.Entry;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			            try {			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			                    kvTable = new HashMap<>();
			                    this.configTable.put(namespace, kvTable);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			                    log.info("putKVConfig update config item, Namespace: {} Key: {} Value: {}",			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			                    log.info("putKVConfig create new config item, Namespace: {} Key: {} Value: {}",			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.namesrv.kvconfig;
			
			import org.apache.rocketmq.common.namesrv.NamesrvUtil;
			import org.apache.rocketmq.namesrv.NameServerInstanceTest;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public void testPutKVConfig() {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/namesrv/UpdateKvConfigCommand.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.tools.command.namesrv;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/namesrv/PutKVConfigRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.namesrv;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public void setNamespace(String namespace) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public String getKey() {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void setKey(String key) {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public String getValue() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setValue(String value) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java:
		[
			fromLine:"			16",
			toLine:"			69",
			content:"
			 */
			package org.apache.rocketmq.client.producer;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.RequestTimeoutException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.hook.SendMessageHook;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			            nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();			
",
,
			fromLine:"			226",
			toLine:"			229",
			content:"
			        producer.send(new Message(), sendCallback);
			        producer.send(message, new MessageQueue(), sendCallback);
			        producer.send(new Message(), new MessageQueue(), sendCallback, 1000);
			        producer.send(new Message(), messageQueueSelector, null, sendCallback);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        //this message is send success			
",
,
			fromLine:"			239",
			toLine:"			242",
			content:"
			        producer.send(new Message(), sendCallback);
			        producer.send(message, new MessageQueue(), sendCallback);
			        producer.send(new Message(), new MessageQueue(), sendCallback, 1000);
			        producer.send(new Message(), messageQueueSelector, null, sendCallback);			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			        //this message is send success			
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
			        producer.send(msgs, sendCallback);			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			        MessageQueue mq = new MessageQueue("test", "BrokerA", 1);			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			        // this message is send failed			
",
,
			fromLine:"			300",
			toLine:"			301",
			content:"
			        producer.send(msgs, sendCallback);
			        producer.send(msgs, sendCallback, 1000);			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			        // this message is send failed			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			        };			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
			        try {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithOpenTracingTest.java:
		[
			fromLine:"			17",
			toLine:"			65",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import io.opentracing.mock.MockSpan;
			import io.opentracing.mock.MockTracer;
			import io.opentracing.tag.Tags;
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.trace.hook.SendMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageType;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    @Spy			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    @Mock			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			80",
			content:"
			
			    private Message message;
			    private String topic = "FooBar";
			    private String producerGroupPrefix = "FooBar_PID";
			    private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
			    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();			
",
,
			fromLine:"			85",
			toLine:"			89",
			content:"
			
			        producer = new DefaultMQProducer(producerGroupTemp);
			        producer.getDefaultMQProducerImpl().registerSendMessageHook(
			                new SendMessageOpenTracingHookImpl(tracer));
			        producer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        // disable trace to let mock trace work			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			            nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();			
",
,
			fromLine:"			115",
			toLine:"			120",
			content:"
			    public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
			        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
			        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());
			        producer.send(message);
			        assertThat(tracer.finishedSpans().size()).isEqualTo(1);
			        MockSpan span = tracer.finishedSpans().get(0);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void terminate() {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/DefaultMQProducerWithTraceTest.java:
		[
			fromLine:"			17",
			toLine:"			62",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    @Spy			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    @Mock			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    private DefaultMQProducer customTraceTopicproducer;			
",
,
			fromLine:"			77",
			toLine:"			82",
			content:"
			
			    private Message message;
			    private String topic = "FooBar";
			    private String producerGroupPrefix = "FooBar_PID";
			    private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
			    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();			
",
,
			fromLine:"			87",
			toLine:"			90",
			content:"
			
			        customTraceTopicproducer = new DefaultMQProducer(producerGroupTemp, false, customerTraceTopic);
			        normalProducer = new DefaultMQProducer(producerGroupTemp, false, "");
			        producer = new DefaultMQProducer(producerGroupTemp, true, "");			
",
,
			fromLine:"			93",
			toLine:"			95",
			content:"
			        customTraceTopicproducer.setNamesrvAddr("127.0.0.1:9878");
			        message = new Message(topic, new byte[] {'a', 'b', 'c'});
			        producer.setTraceTopic(customerTraceTopic);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			
			        asyncTraceDispatcher = (AsyncTraceDispatcher) producer.getTraceDispatcher();			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        fieldTrace.setAccessible(true);			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();			
",
,
			fromLine:"			126",
			toLine:"			127",
			content:"
			    public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
			        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			        try {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public void testSendMessageSync_WithTrace_NoBrokerSet_Exception() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        try {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			    public void testProducerWithTraceTLS() {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public void terminate() {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithOpenTracingTest.java:
		[
			fromLine:"			17",
			toLine:"			72",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import io.opentracing.mock.MockSpan;
			import io.opentracing.mock.MockTracer;
			import io.opentracing.tag.Tags;
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.client.trace.hook.EndTransactionOpenTracingHookImpl;
			import org.apache.rocketmq.client.trace.hook.SendMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageType;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    @Spy			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    @Mock			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			87",
			content:"
			
			    private Message message;
			    private String topic = "FooBar";
			    private String producerGroupPrefix = "FooBar_PID";
			    private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
			    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();			
",
,
			fromLine:"			101",
			toLine:"			104",
			content:"
			        };
			        producer = new TransactionMQProducer(producerGroupTemp);
			        producer.getDefaultMQProducerImpl().registerSendMessageHook(new SendMessageOpenTracingHookImpl(tracer));
			        producer.getDefaultMQProducerImpl().registerEndTransactionHook(new EndTransactionOpenTracingHookImpl(tracer));			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        // disable trace to let mock trace work			
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			
			        producer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
						
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			            nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();			
",
,
			fromLine:"			133",
			toLine:"			135",
			content:"
			    public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
			        producer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, producer.getDefaultMQProducerImpl());
			        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());			
",
,
			fromLine:"			137",
			toLine:"			139",
			content:"
			
			        assertThat(tracer.finishedSpans().size()).isEqualTo(2);
			        MockSpan span = tracer.finishedSpans().get(1);			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			        sendResult.setRegionId("HZ");			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/trace/TransactionMQProducerWithTraceTest.java:
		[
			fromLine:"			17",
			toLine:"			73",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import java.lang.reflect.Field;
			import java.net.InetSocketAddress;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.hook.EndTransactionContext;
			import org.apache.rocketmq.client.hook.EndTransactionHook;
			import org.apache.rocketmq.client.hook.SendMessageContext;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.invocation.InvocationOnMock;
			import org.mockito.junit.MockitoJUnitRunner;
			import org.mockito.stubbing.Answer;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.nullable;
			import static org.mockito.Mockito.doAnswer;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    @Spy			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    @Mock			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			    private TransactionMQProducer producer;			
",
,
			fromLine:"			88",
			toLine:"			93",
			content:"
			
			    private Message message;
			    private String topic = "FooBar";
			    private String producerGroupPrefix = "FooBar_PID";
			    private String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();
			    private String producerGroupTraceTemp = TopicValidator.RMQ_SYS_TRACE_TOPIC + System.currentTimeMillis();			
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			        };
			        producer = new TransactionMQProducer(producerGroupTemp, null, true, null);			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			
			        producer.setNamesrvAddr("127.0.0.1:9876");			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			116",
			toLine:"			117",
			content:"
			
			        asyncTraceDispatcher = (AsyncTraceDispatcher) producer.getTraceDispatcher();			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        fieldTrace.setAccessible(true);			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        hooks.add(endTransactionHook);			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			            nullable(SendMessageContext.class), any(DefaultMQProducerImpl.class))).thenCallRealMethod();			
",
,
			fromLine:"			149",
			toLine:"			150",
			content:"
			    public void testSendMessageSync_WithTrace_Success() throws RemotingException, InterruptedException, MQBrokerException, MQClientException {
			        traceProducer.getDefaultMQProducerImpl().getMqClientFactory().registerProducer(producerGroupTraceTemp, traceProducer.getDefaultMQProducerImpl());			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        }).when(endTransactionHook).endTransaction(any(EndTransactionContext.class));			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        EndTransactionContext ctx = context.get();			
",
,
			fromLine:"			166",
			toLine:"			167",
			content:"
			        assertThat(ctx.isFromTransactionCheck()).isFalse();
			        assertThat(new String(ctx.getMessage().getBody())).isEqualTo(new String(message.getBody()));			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        sendResult.setRegionId("HZ");			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/admin/DefaultAdminService.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.proxy.service.admin;
			
			import java.time.Duration;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.TopicRouteHelper;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    @Override			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			        try {
			            return this.createTopicOnBroker(createTopic, wQueueNum, rQueueNum, curTopicRouteData.getBrokerDatas(),			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    @Override			
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			        topicConfig.setTopicName(topic);
			        topicConfig.setWriteQueueNums(wQueueNum);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            try {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			            // examine topic exist.			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/admin/DefaultAdminServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			44",
			content:"
			
			package org.apache.rocketmq.proxy.service.admin;
			
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        ArgumentCaptor<TopicConfig> topicConfigArgumentCaptor = ArgumentCaptor.forClass(TopicConfig.class);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/admin/MQAdminUtils.java:
		[
			fromLine:"			16",
			toLine:"			50",
			content:"
			 */
			package org.apache.rocketmq.tools.admin;
			
			import java.util.Collection;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingOne;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			
			import static org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils.checkAndBuildMappingItems;
			import static org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils.getMappingDetailFromConfig;
						
",
,
			fromLine:"			133",
			toLine:"			135",
			content:"
			
			    public static void updateTopicConfigMappingAll(Map<String, TopicConfigAndQueueMapping> brokerConfigMap, DefaultMQAdminExt defaultMQAdminExt, boolean force) throws Exception {
			        ClientMetadata clientMetadata = getBrokerMetadata(defaultMQAdminExt);			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        //If some succeed, and others fail, it will cause inconsistent data			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			            TopicConfigAndQueueMapping configMapping = entry.getValue();			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			148",
			content:"
			
			        ClientMetadata clientMetadata = MQAdminUtils.getBrokerMetadata(defaultMQAdminExt);			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			        //Step1: let the new leader can be written without the logicOffset			
",
,
			fromLine:"			153",
			toLine:"			154",
			content:"
			            String addr = clientMetadata.findMasterBrokerAddr(broker);
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        //Step2: forbid to write of old leader			
",
,
			fromLine:"			159",
			toLine:"			160",
			content:"
			            String addr = clientMetadata.findMasterBrokerAddr(broker);
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			        //Step3: decide the logic offset			
",
,
			fromLine:"			165",
			toLine:"			166",
			content:"
			            String addr = clientMetadata.findMasterBrokerAddr(broker);
			            TopicStatsTable statsTable = defaultMQAdminExt.examineTopicStats(addr, topic);			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			                }			
",
,
			fromLine:"			186",
			toLine:"			187",
			content:"
			                }
			                newLeader.setLogicOffset(TopicQueueMappingUtils.blockSeqRoundUp(oldLeader.computeStaticQueueOffsetStrictly(topicOffset.getMaxOffset()), blockSeqSize));			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        //Step4: write to the new leader with logic offset			
",
,
			fromLine:"			195",
			toLine:"			196",
			content:"
			            String addr = clientMetadata.findMasterBrokerAddr(broker);
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,
			fromLine:"			199",
			toLine:"			200",
			content:"
			        //Step5: write the non-target brokers
			        for (String broker: brokerConfigMap.keySet()) {			
",
,
			fromLine:"			204",
			toLine:"			205",
			content:"
			            String addr = clientMetadata.findMasterBrokerAddr(broker);
			            TopicConfigAndQueueMapping configMapping = brokerConfigMap.get(broker);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/controller/CleanControllerBrokerMetaSubCommand.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.tools.command.controller;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			
			import java.util.Arrays;
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/admin/CleanControllerBrokerDataRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.controller.admin;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @RocketMQResource(ResourceType.CLUSTER)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @CFNullable			
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			
			    private boolean isCleanLivingBroker = false;			
",
,
			fromLine:"			50",
			toLine:"			53",
			content:"
			        boolean isCleanLivingBroker) {
			        this.clusterName = clusterName;
			        this.brokerName = brokerName;
			        this.brokerControllerIdsToClean = brokerIdSetToClean;			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public long getInvokeTime() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setInvokeTime(long invokeTime) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public String getBrokerControllerIdsToClean() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setBrokerControllerIdsToClean(String brokerIdSetToClean) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public boolean isCleanLivingBroker() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void setCleanLivingBroker(boolean cleanLivingBroker) {			
",
,
			fromLine:"			108",
			toLine:"			111",
			content:"
			        return "CleanControllerBrokerDataRequestHeader{" +
			                "clusterName='" + clusterName + '\'' +
			                ", brokerName='" + brokerName + '\'' +
			                ", brokerIdSetToClean='" + brokerControllerIdsToClean + '\'' +			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerProgressSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.tools.command.consumer;
			
			import java.util.Collections;
			import java.util.Date;
			import java.util.HashMap;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			                String clientId = connection.getClientId();			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerStatusSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tools.command.consumer;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.TreeMap;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.MQAdminStartup;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                        ConsumerRunningInfo consumerRunningInfo =			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                ConsumerRunningInfo consumerRunningInfo =			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/consumer/ConsumerSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tools.command.consumer;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.TreeMap;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.MQAdminStartup;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			                        ConsumerRunningInfo consumerRunningInfo =			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			                ConsumerRunningInfo consumerRunningInfo =			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/SetMessageRequestModeRequestBody.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			     */			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public int getPopShareQueueNum() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setPopShareQueueNum(int popShareQueueNum) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/offset/GetConsumerStatusCommand.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.tools.command.offset;
			
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            Map<String, Map<MessageQueue, Long>> consumerStatusTable =			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/GetConsumerStatusRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNullable			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String getGroup() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setGroup(String group) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getClientAddr() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setClientAddr(String clientAddr) {			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("topic", topic)
			            .add("group", group)			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/consumer/DeleteSubscriptionGroupCommand.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.tools.command.consumer;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			                for (String master : masterSet) {			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommadTest.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.tools.command.broker;
			
			import java.lang.reflect.Field;
			import java.util.ArrayList;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;
			import org.apache.rocketmq.tools.command.SubCommandException;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			50",
			toLine:"			53",
			content:"
			
			    private static DefaultMQAdminExt defaultMQAdminExt;
			    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
			    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());			
",
,
			fromLine:"			57",
			toLine:"			59",
			content:"
			    public static void init() throws NoSuchFieldException, IllegalAccessException, InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException {
			        mQClientAPIImpl = mock(MQClientAPIImpl.class);
			        defaultMQAdminExt = new DefaultMQAdminExt();			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        consumeStatsList.setTotalDiff(123);			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        field.setAccessible(true);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerConsumeStatsSubCommad.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.tools.command.broker;
			
			import java.util.Collections;
			import java.util.Date;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatsList;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
						
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/UnregisterClientRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNullable			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public String getClientID() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public void setClientID(String clientID) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.tools.command.export;
			
			import com.alibaba.fastjson.JSON;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Properties;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.stats.Stats;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
			import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
						
",
,
			fromLine:"			185",
			toLine:"			186",
			content:"
			        try {
			            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,			
",
,
			fromLine:"			193",
			toLine:"			194",
			content:"
			        try {
			            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.tools.command.stats;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.stats.Stats;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			                try {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                            String statsKey = String.format("%s@%s", topic, group);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/acl/UpdateGlobalWhiteAddrSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.tools.command.acl;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                for (String addr : brokerAddrSet) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageConcurrentlyService.java:
		[
			fromLine:"			16",
			toLine:"			57",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.RejectedExecutionException;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class ConsumeMessageConcurrentlyService implements ConsumeMessageService {
			    private static final Logger log = LoggerFactory.getLogger(ConsumeMessageConcurrentlyService.class);
			    private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final MessageListenerConcurrently messageListener;
			    private final BlockingQueue<Runnable> consumeRequestQueue;
			    private final ThreadPoolExecutor consumeExecutor;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			        MessageListenerConcurrently messageListener) {
			        this.defaultMQPushConsumerImpl = defaultMQPushConsumerImpl;			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			
			        this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
			        this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();			
",
,
			fromLine:"			71",
			toLine:"			74",
			content:"
			
			        String consumerGroupTag = (consumerGroup.length() > 100 ? consumerGroup.substring(0, 100) : consumerGroup) + "_";
			        this.consumeExecutor = new ThreadPoolExecutor(
			            this.defaultMQPushConsumer.getConsumeThreadMin(),			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            TimeUnit.MILLISECONDS,			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			    public void shutdown(long awaitTerminateMillis) {
			        this.scheduledExecutorService.shutdown();			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			            && corePoolSize <= Short.MAX_VALUE
			            && corePoolSize < this.defaultMQPushConsumer.getConsumeThreadMax()) {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    public int getCorePoolSize() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        try {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
						
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			                UtilAll.exceptionSimpleDesc(e),			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
						
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			    @Override			
",
,
			fromLine:"			191",
			toLine:"			193",
			content:"
			        final boolean dispatchToConsume) {
			        final int consumeBatchSize = this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();
			        if (msgs.size() <= consumeBatchSize) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			            try {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        } else {			
",
,
			fromLine:"			203",
			toLine:"			204",
			content:"
			                for (int i = 0; i < consumeBatchSize; i++, total++) {
			                    if (total < msgs.size()) {			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
						
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			                try {			
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			                } catch (RejectedExecutionException e) {
			                    for (; total < msgs.size(); total++) {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			    @Override			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        Iterator<Map.Entry<MessageQueue, ProcessQueue>> it =			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			            ProcessQueue pq = next.getValue();			
",
,
			fromLine:"			258",
			toLine:"			259",
			content:"
			                int failed = consumeRequest.getMsgs().size() - ok;
			                this.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), ok);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			                ackIndex = -1;			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
						
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			                    MessageExt msg = consumeRequest.getMsgs().get(i);			
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
			                    if (!consumeRequest.getProcessQueue().containsMessage(msg)) {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
						
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			        if (offset >= 0 && !consumeRequest.getProcessQueue().isDropped()) {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			    public ConsumerStatsManager getConsumerStatsManager() {			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			        // Wrap topic with namespace before sending back message.			
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			        try {			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
						
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
						
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
			            public void run() {			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
						
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			            public void run() {			
",
,
			fromLine:"			358",
			toLine:"			360",
			content:"
			    class ConsumeRequest implements Runnable {
			        private final List<MessageExt> msgs;
			        private final ProcessQueue processQueue;			
",
,
			fromLine:"			363",
			toLine:"			365",
			content:"
			        public ConsumeRequest(List<MessageExt> msgs, ProcessQueue processQueue, MessageQueue messageQueue) {
			            this.msgs = msgs;
			            this.processQueue = processQueue;			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        public List<MessageExt> getMsgs() {			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			        public ProcessQueue getProcessQueue() {			
",
,
			fromLine:"			378",
			toLine:"			379",
			content:"
			        public void run() {
			            if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			383",
			toLine:"			384",
			content:"
			
			            MessageListenerConcurrently listener = ConsumeMessageConcurrentlyService.this.messageListener;			
",
,
			fromLine:"			386",
			toLine:"			387",
			content:"
			            ConsumeConcurrentlyStatus status = null;
			            defaultMQPushConsumerImpl.tryResetPopRetryTopic(msgs, consumerGroup);			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			            ConsumeMessageContext consumeMessageContext = null;			
",
,
			fromLine:"			392",
			toLine:"			393",
			content:"
			                consumeMessageContext = new ConsumeMessageContext();
			                consumeMessageContext.setNamespace(defaultMQPushConsumer.getNamespace());			
",
,
			fromLine:"			395",
			toLine:"			396",
			content:"
			                consumeMessageContext.setProps(new HashMap<>());
			                consumeMessageContext.setMq(messageQueue);			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
			                consumeMessageContext.setSuccess(false);			
",
,
			fromLine:"			405",
			toLine:"			406",
			content:"
			            try {
			                if (msgs != null && !msgs.isEmpty()) {			
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
			                }			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			            } catch (Throwable e) {			
",
,
			fromLine:"			414",
			toLine:"			416",
			content:"
			                    UtilAll.exceptionSimpleDesc(e),
			                    ConsumeMessageConcurrentlyService.this.consumerGroup,
			                    msgs,			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			                }			
",
,
			fromLine:"			434",
			toLine:"			434",
			content:"
						
",
,
			fromLine:"			439",
			toLine:"			442",
			content:"
			            if (null == status) {
			                log.warn("consumeMessage return null, Group: {} Msgs: {} MQ: {}",
			                    ConsumeMessageConcurrentlyService.this.consumerGroup,
			                    msgs,			
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
						
",
,
			fromLine:"			449",
			toLine:"			450",
			content:"
			                consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);
			                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());			
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
			            ConsumeMessageConcurrentlyService.this.getConsumerStatsManager()			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
						
",
,
			fromLine:"			459",
			toLine:"			459",
			content:"
			            } else {			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			        public MessageQueue getMessageQueue() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageOrderlyService.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class ConsumeMessageOrderlyService implements ConsumeMessageService {			
",
,
			fromLine:"			56",
			toLine:"			64",
			content:"
			        Long.parseLong(System.getProperty("rocketmq.client.maxTimeConsumeContinuously", "60000"));
			    private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final MessageListenerOrderly messageListener;
			    private final BlockingQueue<Runnable> consumeRequestQueue;
			    private final ThreadPoolExecutor consumeExecutor;
			    private final String consumerGroup;
			    private final MessageQueueLock messageQueueLock = new MessageQueueLock();
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			        MessageListenerOrderly messageListener) {
			        this.defaultMQPushConsumerImpl = defaultMQPushConsumerImpl;			
",
,
			fromLine:"			71",
			toLine:"			73",
			content:"
			
			        this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
			        this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();			
",
,
			fromLine:"			75",
			toLine:"			78",
			content:"
			
			        String consumerGroupTag = (consumerGroup.length() > 100 ? consumerGroup.substring(0, 100) : consumerGroup) + "_";
			        this.consumeExecutor = new ThreadPoolExecutor(
			            this.defaultMQPushConsumer.getConsumeThreadMin(),			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            TimeUnit.MILLISECONDS,			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			    public void start() {
			        if (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.this.defaultMQPushConsumerImpl.messageModel())) {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			                    } catch (Throwable e) {			
",
,
			fromLine:"			105",
			toLine:"			108",
			content:"
			    public void shutdown(long awaitTerminateMillis) {
			        this.stopped = true;
			        this.scheduledExecutorService.shutdown();
			        ThreadUtils.shutdownGracefully(this.consumeExecutor, awaitTerminateMillis, TimeUnit.MILLISECONDS);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public synchronized void unlockAllMQ() {			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			            && corePoolSize <= Short.MAX_VALUE
			            && corePoolSize < this.defaultMQPushConsumer.getConsumeThreadMax()) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    public int getCorePoolSize() {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
						
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        try {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
						
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			                UtilAll.exceptionSimpleDesc(e),			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
						
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			    @Override			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			        if (dispatchToConsume) {
			            ConsumeRequest consumeRequest = new ConsumeRequest(processQueue, messageQueue);			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			    @Override			
",
,
			fromLine:"			220",
			toLine:"			221",
			content:"
			    public synchronized void lockMQPeriodically() {
			        if (!this.stopped) {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			        final long delayMills) {			
",
,
			fromLine:"			241",
			toLine:"			242",
			content:"
			    public synchronized boolean lockOneMQ(final MessageQueue mq) {
			        if (!this.stopped) {			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			        if (timeMillis == -1) {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
						
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			            public void run() {			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
						
",
,
			fromLine:"			281",
			toLine:"			282",
			content:"
			        long commitOffset = -1L;
			        if (context.isAutoCommit()) {			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			                case ROLLBACK:			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			                    commitOffset = consumeRequest.getProcessQueue().commit();			
",
,
			fromLine:"			292",
			toLine:"			294",
			content:"
			                case SUSPEND_CURRENT_QUEUE_A_MOMENT:
			                    this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());
			                    if (checkReconsumeTimes(msgs)) {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			                            consumeRequest.getMessageQueue(),			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        } else {			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			                case SUCCESS:			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			                        consumeRequest.getMessageQueue(),			
",
,
			fromLine:"			324",
			toLine:"			326",
			content:"
			                case SUSPEND_CURRENT_QUEUE_A_MOMENT:
			                    this.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());
			                    if (checkReconsumeTimes(msgs)) {			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			                            consumeRequest.getMessageQueue(),			
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
			        if (commitOffset >= 0 && !consumeRequest.getProcessQueue().isDropped()) {			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			    public ConsumerStatsManager getConsumerStatsManager() {			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			        // default reconsume times: Integer.MAX_VALUE			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			        } else {			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			            // max reconsume times exceeded then send to dead letter queue.			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
						
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			403",
			toLine:"			404",
			content:"
			        for (MessageExt msg : msgs) {
			            if (StringUtils.isNotEmpty(this.defaultMQPushConsumer.getNamespace())) {			
",
,
			fromLine:"			429",
			toLine:"			429",
			content:"
			            if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
						
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			            synchronized (objLock) {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			                        if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
						
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
			                            && !this.processQueue.isLocked()) {			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
						
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			                            && this.processQueue.isLockExpired()) {			
",
,
			fromLine:"			465",
			toLine:"			465",
			content:"
			                        final int consumeBatchSize =			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			                        List<MessageExt> msgs = this.processQueue.takeMessages(consumeBatchSize);			
",
,
			fromLine:"			475",
			toLine:"			475",
			content:"
			                            ConsumeMessageContext consumeMessageContext = null;			
",
,
			fromLine:"			478",
			toLine:"			479",
			content:"
			                                consumeMessageContext
			                                    .setConsumerGroup(ConsumeMessageOrderlyService.this.defaultMQPushConsumer.getConsumerGroup());			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			                                consumeMessageContext.setProps(new HashMap<>());			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
			                                if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			499",
			toLine:"			499",
			content:"
						
",
,
			fromLine:"			501",
			toLine:"			501",
			content:"
			                            } catch (Throwable e) {			
",
,
			fromLine:"			503",
			toLine:"			503",
			content:"
			                                    UtilAll.exceptionSimpleDesc(e),			
",
,
			fromLine:"			514",
			toLine:"			515",
			content:"
			                                || ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT == status) {
			                                log.warn("consumeMessage Orderly return not OK, Group: {} Msgs: {} MQ: {}",			
",
,
			fromLine:"			527",
			toLine:"			527",
			content:"
			                                }			
",
,
			fromLine:"			535",
			toLine:"			535",
			content:"
						
",
,
			fromLine:"			543",
			toLine:"			543",
			content:"
						
",
,
			fromLine:"			547",
			toLine:"			548",
			content:"
			                                    .setSuccess(ConsumeOrderlyStatus.SUCCESS == status || ConsumeOrderlyStatus.COMMIT == status);
			                                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());			
",
,
			fromLine:"			552",
			toLine:"			552",
			content:"
			                            ConsumeMessageOrderlyService.this.getConsumerStatsManager()			
",
,
			fromLine:"			554",
			toLine:"			554",
			content:"
						
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
			                    if (this.processQueue.isDropped()) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopConcurrentlyService.java:
		[
			fromLine:"			16",
			toLine:"			59",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.RejectedExecutionException;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.AckCallback;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.ConsumeReturnType;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.hook.ConsumeMessageContext;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class ConsumeMessagePopConcurrentlyService implements ConsumeMessageService {
			    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopConcurrentlyService.class);
			    private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final MessageListenerConcurrently messageListener;
			    private final BlockingQueue<Runnable> consumeRequestQueue;
			    private final ThreadPoolExecutor consumeExecutor;			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        MessageListenerConcurrently messageListener) {
			        this.defaultMQPushConsumerImpl = defaultMQPushConsumerImpl;			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			
			        this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
			        this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			
			        this.consumeExecutor = new ThreadPoolExecutor(
			            this.defaultMQPushConsumer.getConsumeThreadMin(),			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            TimeUnit.MILLISECONDS,			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			    public void shutdown(long awaitTerminateMillis) {
			        this.scheduledExecutorService.shutdown();			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			            && corePoolSize <= Short.MAX_VALUE
			            && corePoolSize < this.defaultMQPushConsumer.getConsumeThreadMax()) {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public int getCorePoolSize() {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        try {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                UtilAll.exceptionSimpleDesc(e),			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			    @Override			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			    @Override			
",
,
			fromLine:"			180",
			toLine:"			182",
			content:"
			        final MessageQueue messageQueue) {
			        final int consumeBatchSize = this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();
			        if (msgs.size() <= consumeBatchSize) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			            try {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			        } else {			
",
,
			fromLine:"			192",
			toLine:"			193",
			content:"
			                for (int i = 0; i < consumeBatchSize; i++, total++) {
			                    if (total < msgs.size()) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			                try {			
",
,
			fromLine:"			203",
			toLine:"			204",
			content:"
			                } catch (RejectedExecutionException e) {
			                    for (; total < msgs.size(); total++) {			
",
,
			fromLine:"			232",
			toLine:"			233",
			content:"
			                int failed = consumeRequest.getMsgs().size() - ok;
			                this.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, topic, ok);			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			                ackIndex = -1;			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        for (int i = 0; i <= ackIndex; i++) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			            consumeRequest.getPopProcessQueue().ack();			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			            int delayLevel = context.getDelayLevelWhenNextConsume();			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			    private void checkNeedAckOrDelay(MessageExt msgExt) {			
",
,
			fromLine:"			269",
			toLine:"			270",
			content:"
			        if (msgDelaytime > delayLevelTable[delayLevelTable.length - 1] * 1000 * 2) {
			            log.warn("Consume too many times, ack message async. message {}", msgExt.toString());			
",
,
			fromLine:"			280",
			toLine:"			281",
			content:"
			
			            changePopInvisibleTime(msgExt, consumerGroup, delayLevel);			
",
,
			fromLine:"			286",
			toLine:"			288",
			content:"
			
			    private void changePopInvisibleTime(final MessageExt msg, String consumerGroup, int delayLevel) {
			        if (0 == delayLevel) {			
",
,
			fromLine:"			291",
			toLine:"			293",
			content:"
			
			        int[] delayLevelTable = this.defaultMQPushConsumerImpl.getPopDelayLevel();
			        int delaySecond = delayLevel >= delayLevelTable.length ? delayLevelTable[delayLevelTable.length - 1] : delayLevelTable[delayLevel];			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			        try {			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			                        public void onException(Throwable e) {			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			    public ConsumerStatsManager getConsumerStatsManager() {			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
						
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
						
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			            public void run() {			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
						
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			            public void run() {			
",
,
			fromLine:"			345",
			toLine:"			347",
			content:"
			    class ConsumeRequest implements Runnable {
			        private final List<MessageExt> msgs;
			        private final PopProcessQueue processQueue;			
",
,
			fromLine:"			352",
			toLine:"			354",
			content:"
			        public ConsumeRequest(List<MessageExt> msgs, PopProcessQueue processQueue, MessageQueue messageQueue) {
			            this.msgs = msgs;
			            this.processQueue = processQueue;			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			            } catch (Throwable t) {			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			        public boolean isPopTimeout() {			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			        public List<MessageExt> getMsgs() {			
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			        public PopProcessQueue getPopProcessQueue() {			
",
,
			fromLine:"			385",
			toLine:"			386",
			content:"
			        public void run() {
			            if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			391",
			toLine:"			393",
			content:"
			            if (isPopTimeout()) {
			                log.info("the pop message time out so abort consume. popTime={} invisibleTime={}, group={} {}",
			                        popTime, invisibleTime, ConsumeMessagePopConcurrentlyService.this.consumerGroup, this.messageQueue);			
",
,
			fromLine:"			397",
			toLine:"			398",
			content:"
			
			            MessageListenerConcurrently listener = ConsumeMessagePopConcurrentlyService.this.messageListener;			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			            ConsumeConcurrentlyStatus status = null;			
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			            ConsumeMessageContext consumeMessageContext = null;			
",
,
			fromLine:"			405",
			toLine:"			406",
			content:"
			                consumeMessageContext = new ConsumeMessageContext();
			                consumeMessageContext.setNamespace(defaultMQPushConsumer.getNamespace());			
",
,
			fromLine:"			408",
			toLine:"			409",
			content:"
			                consumeMessageContext.setProps(new HashMap<>());
			                consumeMessageContext.setMq(messageQueue);			
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
			                consumeMessageContext.setSuccess(false);			
",
,
			fromLine:"			418",
			toLine:"			419",
			content:"
			            try {
			                if (msgs != null && !msgs.isEmpty()) {			
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
			                }			
",
,
			fromLine:"			425",
			toLine:"			425",
			content:"
			            } catch (Throwable e) {			
",
,
			fromLine:"			427",
			toLine:"			429",
			content:"
			                    UtilAll.exceptionSimpleDesc(e),
			                    ConsumeMessagePopConcurrentlyService.this.consumerGroup,
			                    msgs,			
",
,
			fromLine:"			448",
			toLine:"			451",
			content:"
			            if (null == status) {
			                log.warn("consumeMessage return null, Group: {} Msgs: {} MQ: {}",
			                    ConsumeMessagePopConcurrentlyService.this.consumerGroup,
			                    msgs,			
",
,
			fromLine:"			455",
			toLine:"			455",
			content:"
						
",
,
			fromLine:"			459",
			toLine:"			460",
			content:"
			                consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);
			                consumeMessageContext.setAccessChannel(defaultMQPushConsumer.getAccessChannel());			
",
,
			fromLine:"			464",
			toLine:"			464",
			content:"
			            ConsumeMessagePopConcurrentlyService.this.getConsumerStatsManager()			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
						
",
,
			fromLine:"			469",
			toLine:"			470",
			content:"
			            } else {
			                if (msgs != null) {			
",
,
			fromLine:"			473",
			toLine:"			474",
			content:"
			
			                log.warn("processQueue invalid. isDropped={}, isPopTimeout={}, messageQueue={}, msgs={}",			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
			        public MessageQueue getMessageQueue() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessagePopOrderlyService.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import io.netty.util.internal.ConcurrentSet;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
			import org.apache.rocketmq.client.stat.ConsumerStatsManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class ConsumeMessagePopOrderlyService implements ConsumeMessageService {
			    private static final Logger log = LoggerFactory.getLogger(ConsumeMessagePopOrderlyService.class);
			    private final DefaultMQPushConsumerImpl defaultMQPushConsumerImpl;
			    private final DefaultMQPushConsumer defaultMQPushConsumer;
			    private final MessageListenerOrderly messageListener;			
",
,
			fromLine:"			56",
			toLine:"			58",
			content:"
			    private final ConcurrentSet<ConsumeRequest> consumeRequestSet = new ConcurrentSet<>();
			    private final ThreadPoolExecutor consumeExecutor;
			    private final String consumerGroup;			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			    private final MessageQueueLock consumeRequestLock = new MessageQueueLock();
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        MessageListenerOrderly messageListener) {
			        this.defaultMQPushConsumerImpl = defaultMQPushConsumerImpl;			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			
			        this.defaultMQPushConsumer = this.defaultMQPushConsumerImpl.getDefaultMQPushConsumer();
			        this.consumerGroup = this.defaultMQPushConsumer.getConsumerGroup();			
",
,
			fromLine:"			72",
			toLine:"			74",
			content:"
			
			        this.consumeExecutor = new ThreadPoolExecutor(
			            this.defaultMQPushConsumer.getConsumeThreadMin(),			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            TimeUnit.MILLISECONDS,			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			    public void start() {
			        if (MessageModel.CLUSTERING.equals(ConsumeMessagePopOrderlyService.this.defaultMQPushConsumerImpl.messageModel())) {			
",
,
			fromLine:"			97",
			toLine:"			100",
			content:"
			    public void shutdown(long awaitTerminateMillis) {
			        this.stopped = true;
			        this.scheduledExecutorService.shutdown();
			        ThreadUtils.shutdownGracefully(this.consumeExecutor, awaitTerminateMillis, TimeUnit.MILLISECONDS);			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public synchronized void unlockAllMessageQueues() {			
",
,
			fromLine:"			113",
			toLine:"			114",
			content:"
			            && corePoolSize <= Short.MAX_VALUE
			            && corePoolSize < this.defaultMQPushConsumer.getConsumeThreadMax()) {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public int getCorePoolSize() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        try {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
						
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			                UtilAll.exceptionSimpleDesc(e),			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			    @Override			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			    @Override			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			                                     final MessageQueue messageQueue) {			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			    public synchronized void lockMQPeriodically() {
			        if (!this.stopped) {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			                try {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			        if (timeMillis == -1) {			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
						
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
						
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			    public ConsumerStatsManager getConsumerStatsManager() {			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			        // default reconsume times: Integer.MAX_VALUE			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        } else {			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			            // max reconsume times exceeded then send to dead letter queue.			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
						
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			317",
			toLine:"			318",
			content:"
			        for (MessageExt msg : msgs) {
			            if (StringUtils.isNotEmpty(this.defaultMQPushConsumer.getNamespace())) {			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			            if (this.processQueue.isDropped()) {			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			            // lock on sharding key index			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ConsumeMessageService.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImpl.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    @Override			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			         */			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        long newVersion = System.currentTimeMillis();			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			                int newVal = Math.max(1, pullThresholdForTopic / currentQueueCount);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			                int newVal = Math.max(1, pullThresholdSizeForTopic / currentQueueCount);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        if (null != messageQueueListener) {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        } catch (MQClientException e) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			                        try {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			                        } catch (MQClientException e) {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			                        try {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			                        } catch (MQClientException e) {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			                                UtilAll.YYYYMMDDHHMMSS).getTime();			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			                        } catch (MQClientException e) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalancePullImpl.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.List;
			import java.util.Set;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @Override			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			            try {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			            } catch (Throwable e) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImpl.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.List;
			import java.util.Set;
			import org.apache.rocketmq.client.consumer.AllocateMessageQueueStrategy;
			import org.apache.rocketmq.client.consumer.MessageQueueListener;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @Override			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            try {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			            } catch (Throwable e) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        } catch (MQClientException e) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                        try {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                        } catch (MQClientException e) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                        try {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			                        } catch (MQClientException e) {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			                                UtilAll.YYYYMMDDHHMMSS).getTime();			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			                        } catch (MQClientException e) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/consumer/RebalancePushImplTest.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    private MQClientInstance mqClientInstance;			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			    private String topic = "TopicA";
			    private MessageQueue mq = new MessageQueue("topic1", "broker1", 0);			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			    private DefaultMQPushConsumer consumer = new DefaultMQPushConsumer();
			    private MQClientInstance client = mock(MQClientInstance.class);			
",
,
			fromLine:"			66",
			toLine:"			68",
			content:"
			        when(consumerImpl.getDefaultMQPushConsumer()).thenReturn(consumer);
			        when(consumerImpl.getOffsetStore()).thenReturn(offsetStore);
			        rebalanceImpl.setmQClientFactory(client);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        rebalancePush.doRebalance(false);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        when(mqClientInstance.getClientId()).thenReturn(consumerGroup);			
",
,
			fromLine:"			181",
			toLine:"			182",
			content:"
			
			            when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(0L);			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_last() throws MQClientException {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
						
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_first() throws MQClientException {			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_timestamp() throws MQClientException {			
",
,
			fromLine:"			208",
			toLine:"			209",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);
			        when(admin.searchOffset(any(MessageQueue.class), anyLong())).thenReturn(12345L);			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
						
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/AckMessageRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setOffset(Long offset) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public Long getOffset() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setExtraInfo(String extraInfo) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public String getExtraInfo() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			92",
			toLine:"			96",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)
			            .add("extraInfo", extraInfo)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ChangeInvisibleTimeRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setOffset(Long offset) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public Long getOffset() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void setExtraInfo(String extraInfo) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String getExtraInfo() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			108",
			toLine:"			112",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)
			            .add("extraInfo", extraInfo)			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopBigMessageIT.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.io.IOException;
			import java.time.Duration;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.compression.Compressor;
			import org.apache.rocketmq.common.compression.CompressorFactory;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        byte[] bytes = new byte[BODY_LEN];			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        Message message = createBigMessage();			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        await().atMost(Duration.ofSeconds(3)).untilAsserted(() -> {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        await().atMost(Duration.ofSeconds(60)).untilAsserted(() -> {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopOrderlyIT.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.pop;
			
			import java.time.Duration;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.assertj.core.util.Lists;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    private CompletableFuture<Void> popMessageOrderly() {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    private CompletableFuture<Void> popOrderlyThenNoAck() {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    private CompletableFuture<Void> popMessageOrderlyThenChangeInvisibleTime() {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public void testPopMessageOrderlyThenChangeInvisibleTimeMidMessage() {			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			    private CompletableFuture<Void> popMessageOrderlyThenChangeInvisibleTimeMidMessage() {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			    public void testReentrant() {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			    private CompletableFuture<Void> popMessageForReentrant(String attemptId) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionService.java:
		[
			fromLine:"			16",
			toLine:"			48",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.transaction;
			
			import com.google.common.collect.Sets;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
						
",
,
			fromLine:"			70",
			toLine:"			72",
			content:"
			    @Override
			    public void addTransactionSubscription(ProxyContext ctx, String group, List<String> topicList) {
			        for (String topic : topicList) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    @Override			
",
,
			fromLine:"			94",
			toLine:"			95",
			content:"
			        Set<ClusterData> clusterDataSet = new HashSet<>();
			        for (String topic : topicList) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        }			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			                    this.mqClientAPIFactory.getClient()			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			        txHeartbeatServiceThread.start();			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/ClusterTransactionServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			53",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.time.Duration;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void testAddTransactionSubscription() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        assertEquals(1, this.clusterTransactionService.getGroupClusterData().size());			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public void testAddTransactionSubscriptionTopicList() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        assertEquals(1, this.clusterTransactionService.getGroupClusterData().size());			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public void testReplaceTransactionSubscription() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        assertEquals(1, this.clusterTransactionService.getGroupClusterData().size());			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			
			        this.brokerData.setCluster(CLUSTER_NAME + 1);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        assertEquals(1, this.clusterTransactionService.getGroupClusterData().size());			
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			    public void testUnSubscribeAllTransactionTopic() {
			        this.clusterTransactionService.addTransactionSubscription(ctx, GROUP, TOPIC);			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        topicRouteData.getBrokerDatas().add(brokerData);			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			        clusterTopicRouteData.setQueueDatas(Lists.newArrayList(clusterQueueData));
			        clusterBrokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			        clusterTopicRouteData.setBrokerDatas(Lists.newArrayList(clusterBrokerData));			
",
,
			fromLine:"			164",
			toLine:"			165",
			content:"
			        for (int i = 0; i < 3; i++) {
			            groupSet.add(GROUP + i);			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        ArgumentCaptor<HeartbeatData> heartbeatDataArgumentCaptor = ArgumentCaptor.forClass(HeartbeatData.class);			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
						
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        assertEquals(brokerName2, this.clusterTransactionService.getBrokerNameByAddr(brokerAddr2));			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/hook/EndTransactionContext.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.client.hook;
			
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.common.message.Message;
			
			public class EndTransactionContext {
			    private String producerGroup;
			    private Message message;
			    private String brokerAddr;
			    private String msgId;			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    private LocalTransactionState transactionState;			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public Message getMessage() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setMessage(Message message) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setTransactionId(String transactionId) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public boolean isFromTransactionCheck() {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public void setFromTransactionCheck(boolean fromTransactionCheck) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/latency/MQFaultStrategy.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.client.latency;
			
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo.QueueFilter;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			167",
			content:"
			        if (this.sendLatencyFaultEnable) {
			            long duration = computeNotAvailableDuration(isolation ? 10000 : currentLatency);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/route/TopicRouteService.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.route;
			
			import com.github.benmanes.caffeine.cache.CacheLoader;
			import com.github.benmanes.caffeine.cache.Caffeine;
			import com.github.benmanes.caffeine.cache.LoadingCache;
			
			import java.time.Duration;
			import java.util.List;
			import java.util.Optional;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.client.latency.MQFaultStrategy;
			import org.apache.rocketmq.client.latency.Resolver;
			import org.apache.rocketmq.client.latency.ServiceDetector;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.checkerframework.checker.nullness.qual.NonNull;
			import org.checkerframework.checker.nullness.qual.Nullable;
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        );			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
						
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        checkSendFaultToleranceEnable();			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			70",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.producer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Encoding;
			import apache.rocketmq.v2.Message;
			import apache.rocketmq.v2.MessageType;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.SendMessageResponse;
			import apache.rocketmq.v2.SystemProperties;
			import com.google.protobuf.ByteString;
			import com.google.protobuf.util.Durations;
			import com.google.protobuf.util.Timestamps;
			import java.time.Duration;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.latency.MQFaultStrategy;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
			import static org.junit.Assert.assertThrows;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			    protected static final String BROKER_NAME2 = "broker2";
			    protected static final String CLUSTER_NAME = "cluster";			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			    protected static final String BROKER_ADDR2 = "127.0.0.1:10912";
			    private static final String TOPIC = "topic";			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        super.before();			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        sendResult.setMsgId(msgId);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                    .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			                    .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			                    .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			            ),			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			                    .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			            ),			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			            ),			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			        BrokerData brokerData = new BrokerData();			
",
,
			fromLine:"			279",
			toLine:"			280",
			content:"
			        topicRouteData.setQueueDatas(Lists.newArrayList(queueData));
			        brokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        HashMap<Long, String> brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
						
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        BrokerData brokerData = new BrokerData();			
",
,
			fromLine:"			336",
			toLine:"			337",
			content:"
			        topicRouteData.setQueueDatas(Lists.newArrayList(queueData));
			        brokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			        HashMap<Long, String> brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
			        when(mqFaultStrategy.isSendLatencyFaultEnable()).thenReturn(false);			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
						
",
,
			fromLine:"			373",
			toLine:"			374",
			content:"
			
			        BrokerData brokerData = createBrokerData(CLUSTER_NAME, BROKER_NAME, BROKER_ADDR);			
",
,
			fromLine:"			386",
			toLine:"			387",
			content:"
			        mqFaultStrategy.setSendLatencyFaultEnable(true);
			        mqFaultStrategy.updateFaultItem(BROKER_NAME2, 1000, true, true);			
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
			        when(topicRouteService.getMqFaultStrategy()).thenReturn(mqFaultStrategy);			
",
,
			fromLine:"			397",
			toLine:"			398",
			content:"
			
			        mqFaultStrategy.updateFaultItem(BROKER_NAME2, 1000, true, false);			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			        AddressableMessageQueue secondSelect = selector.select(ProxyContext.create(), messageQueueView);			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			527",
			toLine:"			527",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			556",
			toLine:"			556",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			585",
			toLine:"			585",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			614",
			toLine:"			614",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			643",
			toLine:"			643",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			672",
			toLine:"			672",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			705",
			toLine:"			705",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			734",
			toLine:"			734",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			763",
			toLine:"			763",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			792",
			toLine:"			792",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			821",
			toLine:"			821",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			849",
			toLine:"			849",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,
			fromLine:"			879",
			toLine:"			879",
			content:"
			                            .setTopic(Resource.newBuilder()			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultTolerance.java:
		[
			fromLine:"			17",
			toLine:"			19",
			content:"
			
			package org.apache.rocketmq.client.latency;
						
",
,
			fromLine:"			24",
			toLine:"			25",
			content:"
			     * @param name Broker's name.
			     * @param currentLatency Current message sending process's latency.			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			     * spends such time.			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			     */			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImpl.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.client.latency;
			
			import java.util.Collections;
			import java.util.Enumeration;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadFactory;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.common.ThreadLocalIndex;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			    private final ConcurrentHashMap<String, FaultItem> faultItemTable = new ConcurrentHashMap<String, FaultItem>(16);
			    private int detectTimeout = 200;			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            if (System.currentTimeMillis() - brokerItem.checkStamp >= 0) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			                }			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			                try {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    @Override			
",
,
			fromLine:"			107",
			toLine:"			109",
			content:"
			            final FaultItem faultItem = new FaultItem(name);
			            faultItem.setCurrentLatency(currentLatency);
			            faultItem.updateNotAvailableDuration(notAvailableDuration);			
",
,
			fromLine:"			114",
			toLine:"			116",
			content:"
			        if (null != old) {
			            old.setCurrentLatency(currentLatency);
			            old.updateNotAvailableDuration(notAvailableDuration);			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    public boolean isStartDetectorEnable() {			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    public void setStartDetectorEnable(boolean startDetectorEnable) {			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			    public void setDetectTimeout(final int detectTimeout) {			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    public void setDetectInterval(final int detectInterval) {			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/latency/LatencyFaultToleranceImplTest.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.client.latency;
			
			import org.awaitility.core.ThrowingRunnable;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.util.concurrent.TimeUnit;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public void testUpdateFaultItem() throws Exception {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public void testIsAvailable() throws Exception {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void testRemove() throws Exception {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void testPickOneAtLeast() throws Exception {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void testIsReachable() throws Exception {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/producer/ProduceAccumulator.java:
		[
			fromLine:"			17",
			toLine:"			44",
			content:"
			
			package org.apache.rocketmq.client.producer;
			
			import java.util.Arrays;
			import java.util.Collection;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.LinkedList;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.exception.RemotingException;
						
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        DefaultMQProducer defaultMQProducer) throws InterruptedException, MQBrokerException, RemotingException, MQClientException {			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			        while (true) {
			            MessageAccumulation batch = getOrCreateSyncSendBatch(partitionKey, defaultMQProducer);			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
						
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			        DefaultMQProducer defaultMQProducer) throws InterruptedException, RemotingException, MQClientException {			
",
,
			fromLine:"			252",
			toLine:"			253",
			content:"
			        while (true) {
			            MessageAccumulation batch = getOrCreateAsyncSendBatch(partitionKey, defaultMQProducer);			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
						
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        DefaultMQProducer defaultMQProducer) throws InterruptedException, RemotingException, MQClientException {			
",
,
			fromLine:"			266",
			toLine:"			267",
			content:"
			        while (true) {
			            MessageAccumulation batch = getOrCreateAsyncSendBatch(partitionKey, defaultMQProducer);			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
			                if (defaultMQProducer != null) {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			                    final int size = messagesSize.get();			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.clientinterface.AbstractMQProducer;
			import org.apache.rocketmq.test.sendresult.ResultWrapper;
			import org.apache.rocketmq.test.util.RandomUtil;
			import org.apache.rocketmq.test.util.TestUtil;
			
			public class RMQAsyncSendProducer extends AbstractMQProducer {			
",
,
			fromLine:"			41",
			toLine:"			42",
			content:"
			        .getLogger(RMQAsyncSendProducer.class);
			    private String nsAddr = null;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        super(topic);			
",
,
			fromLine:"			79",
			toLine:"			81",
			content:"
			    private void create() {
			        producer = new DefaultMQProducer();
			        producer.setProducerGroup(RandomUtil.getStringByUUID());			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			
			        if (nsAddr != null) {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        try {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        } catch (MQClientException e) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        try {			
",
,
			fromLine:"			128",
			toLine:"			129",
			content:"
			
			    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        try {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        try {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			            } else {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        try {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        try {			
",
,
			fromLine:"			214",
			toLine:"			215",
			content:"
			
			    public void sendOneWay(Object msg, MessageQueueSelector selector, Object arg) {			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			        try {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.producer.async;
			
			import java.util.List;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.factory.ProducerFactory;
			import org.apache.rocketmq.test.factory.SendCallBackFactory;
			import org.apache.rocketmq.test.util.RandomUtils;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        MessageQueue messageQueue = null;			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        MessageQueueSelector selector = null;			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/producer/MQProducer.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.client.producer;
			
			import java.util.Collection;
			import java.util.List;
			import org.apache.rocketmq.client.MQAdmin;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.exception.RequestTimeoutException;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
						
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/producer/ProduceAccumulatorTest.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.client.producer;
			
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageBatch;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			            SendCallback sendCallback) {
			            this.beSendMessage = msg;			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			            sendResult.setMsgId("123");
			            if (sendCallback != null) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        for (Message message : messages) {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        Message message = new Message("testTopic", "1".getBytes());			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        final CountDownLatch countDownLatch = new CountDownLatch(1);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.producer.oneway;
			
			import java.util.List;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.factory.ProducerFactory;
			import org.apache.rocketmq.test.util.RandomUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			public class OneWaySendExceptionIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private static boolean sendFail = false;			
",
,
			fromLine:"			41",
			toLine:"			42",
			content:"
			    public void setUp() {
			        topic = initTopic();			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void testSendMQNull() throws Exception {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void testSendSelectorNull() throws Exception {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        MessageQueueSelector selector = null;			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void testSelectorThrowsException() throws Exception {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/trace/AsyncTraceDispatcher.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.client.trace;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.client.AccessChannel;
			import org.apache.rocketmq.client.common.ThreadLocalIndex;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.consumer.DefaultMQPushConsumerImpl;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.client.trace.TraceConstants.TRACE_INSTANCE_NAME;
						
",
,
			fromLine:"			331",
			toLine:"			333",
			content:"
			        private int currentMsgKeySize;
			        private final String traceTopicName;
			        private final String regionId;			
",
,
			fromLine:"			336",
			toLine:"			337",
			content:"
			        TraceDataSegment(String traceTopicName, String regionId) {
			            this.traceTopicName = traceTopicName;			
",
,
			fromLine:"			342",
			toLine:"			342",
			content:"
			            initFirstBeanAddTime();			
",
,
			fromLine:"			348",
			toLine:"			349",
			content:"
			            if (currentMsgSize >= traceProducer.getMaxMessageSize() - 10 * 1000 || currentMsgKeySize >= MAX_MSG_KEY_SIZE) {
			                List<TraceTransferBean> dataToSend = new ArrayList<>(traceTransferBeanList);			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
			        public void sendAllData() {			
",
,
			fromLine:"			359",
			toLine:"			360",
			content:"
			            }
			            List<TraceTransferBean> dataToSend = new ArrayList<>(traceTransferBeanList);			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			            this.currentMsgKeySize = 0;			
",
,
			fromLine:"			381",
			toLine:"			383",
			content:"
			    class AsyncDataSendTask implements Runnable {
			        private final String traceTopicName;
			        private final String regionId;			
",
,
			fromLine:"			386",
			toLine:"			388",
			content:"
			        public AsyncDataSendTask(String traceTopicName, String regionId, List<TraceTransferBean> traceTransferBeanList) {
			            this.traceTopicName = traceTopicName;
			            this.regionId = regionId;			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			            Set<String> keySet = new HashSet<>();			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			            }			
",
,
			fromLine:"			428",
			toLine:"			428",
			content:"
			                    // No cross set			
",
,
			fromLine:"			430",
			toLine:"			430",
			content:"
			                } else {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/ordermessage/Producer.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.example.ordermessage;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			
			import java.util.List;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			                        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/CheckMsgSendRTCommand.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			                try {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/rpc/AsyncRequestProducer.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.example.rpc;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.RequestCallback;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			            long begin = System.currentTimeMillis();			
",
,

		],
		openmessaging/src/main/java/io/openmessaging/rocketmq/producer/ProducerImpl.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package io.openmessaging.rocketmq.producer;
			
			import io.openmessaging.BytesMessage;
			import io.openmessaging.KeyValue;
			import io.openmessaging.Message;
			import io.openmessaging.Promise;
			import io.openmessaging.exception.OMSRuntimeException;
			import io.openmessaging.interceptor.ProducerInterceptor;
			import io.openmessaging.producer.BatchMessageSender;
			import io.openmessaging.producer.LocalTransactionExecutor;
			import io.openmessaging.producer.Producer;
			import io.openmessaging.producer.SendResult;
			import io.openmessaging.rocketmq.promise.DefaultPromise;
			import io.openmessaging.rocketmq.utils.OMSUtil;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import static io.openmessaging.rocketmq.utils.OMSUtil.msgConvert;
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        try {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/stat/ConsumerStatsManager.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.client.stat;
			
			import java.util.concurrent.ScheduledExecutorService;
			import org.apache.rocketmq.common.stats.StatsItemSet;
			import org.apache.rocketmq.common.stats.StatsSnapshot;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			    public void incPullRT(final String group, final String topic, final long rt) {			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			
			    public void incPullTPS(final String group, final String topic, final long msgs) {			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			
			    public void incConsumeRT(final String group, final String topic, final long rt) {			
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			    public void incConsumeOKTPS(final String group, final String topic, final long msgs) {			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			
			    public void incConsumeFailedTPS(final String group, final String topic, final long msgs) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/UtilAll.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import io.netty.util.internal.PlatformDependent;
			import java.io.ByteArrayInputStream;
			import java.io.ByteArrayOutputStream;
			import java.io.File;
			import java.io.IOException;
			import java.lang.management.ManagementFactory;
			import java.net.Inet4Address;
			import java.net.Inet6Address;
			import java.net.InetAddress;
			import java.net.NetworkInterface;
			import java.nio.ByteBuffer;
			import java.nio.file.Files;
			import java.text.NumberFormat;
			import java.text.ParseException;
			import java.text.SimpleDateFormat;
			import java.util.Arrays;
			import java.util.Calendar;
			import java.util.Date;
			import java.util.Enumeration;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import java.util.zip.CRC32;
			import java.util.zip.DeflaterOutputStream;
			import java.util.zip.InflaterInputStream;
			import java.util.Collections;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.commons.validator.routines.InetAddressValidator;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			        for (int moveBits = 28; moveBits >= 0; moveBits -= 4) {			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
						
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			        for (int moveBits = 12; moveBits >= 0; moveBits -= 4) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/message/MessageClientIDSetter.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.common.message;
			
			import java.nio.ByteBuffer;
			import java.util.Calendar;
			import java.util.Date;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.common.UtilAll;
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        int pos = FIX_STRING.length;			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			        pos += 8;			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/config/AbstractRocksDBStorage.java:
		[
			fromLine:"			16",
			toLine:"			55",
			content:"
			 */
			package org.apache.rocketmq.common.config;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			
			import com.google.common.collect.Maps;
			
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.rocksdb.ColumnFamilyDescriptor;
			import org.rocksdb.ColumnFamilyHandle;
			import org.rocksdb.ColumnFamilyOptions;
			import org.rocksdb.CompactRangeOptions;
			import org.rocksdb.CompactionOptions;
			import org.rocksdb.DBOptions;
			import org.rocksdb.FlushOptions;
			import org.rocksdb.LiveFileMetaData;
			import org.rocksdb.Priority;
			import org.rocksdb.ReadOptions;
			import org.rocksdb.RocksDB;
			import org.rocksdb.RocksDBException;
			import org.rocksdb.Statistics;
			import org.rocksdb.Status;
			import org.rocksdb.WriteBatch;
			import org.rocksdb.WriteOptions;
			
			import static org.rocksdb.RocksDB.NOT_FOUND;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    private final ScheduledExecutorService reloadScheduler = ThreadUtils.newScheduledThreadPool(1, new ThreadFactoryImpl("RocksDBStorageReloadService_"));			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        try {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        try {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
						
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        try {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        try {			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
						
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        try {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/config/ConfigRocksDBStorage.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.common.config;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.UtilAll;
			import org.rocksdb.BlockBasedTableConfig;
			import org.rocksdb.BloomFilter;
			import org.rocksdb.ColumnFamilyDescriptor;
			import org.rocksdb.ColumnFamilyHandle;
			import org.rocksdb.ColumnFamilyOptions;
			import org.rocksdb.CompactRangeOptions;
			import org.rocksdb.CompactRangeOptions.BottommostLevelCompaction;
			import org.rocksdb.CompactionOptions;
			import org.rocksdb.CompactionStyle;
			import org.rocksdb.CompressionType;
			import org.rocksdb.DBOptions;
			import org.rocksdb.DataBlockIndexType;
			import org.rocksdb.IndexType;
			import org.rocksdb.InfoLogLevel;
			import org.rocksdb.LRUCache;
			import org.rocksdb.RateLimiter;
			import org.rocksdb.ReadOptions;
			import org.rocksdb.RocksDB;
			import org.rocksdb.RocksDBException;
			import org.rocksdb.RocksIterator;
			import org.rocksdb.SkipListMemTableConfig;
			import org.rocksdb.Statistics;
			import org.rocksdb.StatsLevel;
			import org.rocksdb.StringAppendOperator;
			import org.rocksdb.WALRecoveryMode;
			import org.rocksdb.WriteBatch;
			import org.rocksdb.WriteOptions;
			import org.rocksdb.util.SizeUnit;
						
",
,
			fromLine:"			215",
			toLine:"			216",
			content:"
			
			    public void put(final byte[] keyBytes, final int keyLen, final byte[] valueBytes) throws Exception {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public void put(final ByteBuffer keyBB, final ByteBuffer valueBB) throws Exception {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			    public void delete(final byte[] keyBytes) throws Exception {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/provider/LocalAuthenticationMetadataProvider.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.provider;
			
			import com.alibaba.fastjson2.JSON;
			import com.github.benmanes.caffeine.cache.CacheLoader;
			import com.github.benmanes.caffeine.cache.Caffeine;
			import com.github.benmanes.caffeine.cache.LoadingCache;
			import java.io.File;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.ArrayUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.model.User;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.config.ConfigRocksDBStorage;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.rocksdb.RocksIterator;
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(user);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(user);			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/provider/LocalAuthorizationMetadataProvider.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.provider;
			
			import com.alibaba.fastjson2.JSON;
			import com.github.benmanes.caffeine.cache.CacheLoader;
			import com.github.benmanes.caffeine.cache.Caffeine;
			import com.github.benmanes.caffeine.cache.LoadingCache;
			import java.io.File;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.ArrayUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authentication.model.Subject;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.model.Acl;
			import org.apache.rocketmq.auth.authorization.model.Policy;
			import org.apache.rocketmq.auth.authorization.model.PolicyEntry;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.config.ConfigRocksDBStorage;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.rocksdb.RocksIterator;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        }			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(acl);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(acl);			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/config/RocksDBConfigManager.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.common.config;
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.rocksdb.FlushOptions;
			import org.rocksdb.RocksIterator;
			import org.rocksdb.Statistics;
			import org.rocksdb.WriteBatch;
			
			import java.util.function.BiConsumer;
						
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			
			    public void put(final byte[] keyBytes, final int keyLen, final byte[] valueBytes) throws Exception {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/subscription/RocksDBSubscriptionGroupManager.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.broker.subscription;
			
			import java.io.File;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.config.RocksDBConfigManager;
			import org.apache.rocketmq.common.utils.DataConverter;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.serializer.SerializerFeature;
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(subscriptionGroupConfig, SerializerFeature.BrowserCompatible);			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			                byte[] valueBytes = JSON.toJSONBytes(subscriptionGroupConfig, SerializerFeature.BrowserCompatible);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/topic/RocksDBTopicConfigManager.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.broker.topic;
			
			import java.io.File;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.config.RocksDBConfigManager;
			import org.apache.rocketmq.common.utils.DataConverter;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.serializer.SerializerFeature;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        this.topicConfigTable.put(topicName, topicConfig);			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String configFilePath() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            byte[] valueBytes = JSON.toJSONBytes(topicConfig, SerializerFeature.BrowserCompatible);			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public synchronized void persist() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/message/MessageDecoder.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.common.message;
			
			import io.netty.buffer.ByteBuf;
			import java.io.IOException;
			import java.net.Inet4Address;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.ByteBuffer;
			import java.nio.charset.Charset;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.compression.Compressor;
			import org.apache.rocketmq.common.compression.CompressorFactory;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
						
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    public static MessageExt decode(ByteBuffer byteBuffer) {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public static MessageExt clientDecode(ByteBuffer byteBuffer, final boolean readBody) {			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    public static MessageExt decode(ByteBuffer byteBuffer, final boolean readBody) {			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
						
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
			        ByteBuffer byteBuffer, final boolean readBody, final boolean deCompressBody) {			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
						
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			        java.nio.ByteBuffer byteBuffer, final boolean readBody, final boolean deCompressBody, final boolean isClient) {			
",
,
			fromLine:"			423",
			toLine:"			423",
			content:"
						
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			        final boolean isSetPropertiesString) {			
",
,
			fromLine:"			429",
			toLine:"			429",
			content:"
						
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			            MessageExt msgExt;			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			            // 1 TOTALSIZE			
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
			            // 2 MAGICCODE			
",
,
			fromLine:"			450",
			toLine:"			450",
			content:"
			            // 3 BODYCRC			
",
,
			fromLine:"			454",
			toLine:"			454",
			content:"
			            // 4 QUEUEID			
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			            // 5 FLAG			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			            // 6 QUEUEOFFSET			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			            // 7 PHYSICALOFFSET			
",
,
			fromLine:"			470",
			toLine:"			470",
			content:"
			            // 8 SYSFLAG			
",
,
			fromLine:"			474",
			toLine:"			474",
			content:"
			            // 9 BORNTIMESTAMP			
",
,
			fromLine:"			480",
			toLine:"			481",
			content:"
			            byte[] bornHost = new byte[bornhostIPLength];
			            byteBuffer.get(bornHost, 0, bornhostIPLength);			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			            // 11 STORETIMESTAMP			
",
,
			fromLine:"			491",
			toLine:"			492",
			content:"
			            byte[] storeHost = new byte[storehostIPLength];
			            byteBuffer.get(storeHost, 0, storehostIPLength);			
",
,
			fromLine:"			496",
			toLine:"			496",
			content:"
			            // 13 RECONSUMETIMES			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			            // 14 Prepared Transaction Offset			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			            // 15 BODY			
",
,
			fromLine:"			506",
			toLine:"			506",
			content:"
			            if (bodyLen > 0) {			
",
,
			fromLine:"			508",
			toLine:"			508",
			content:"
			                    byte[] body = new byte[bodyLen];			
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
						
",
,
			fromLine:"			519",
			toLine:"			519",
			content:"
			                    // uncompress body			
",
,
			fromLine:"			526",
			toLine:"			526",
			content:"
			                } else {			
",
,
			fromLine:"			531",
			toLine:"			531",
			content:"
			            // 16 TOPIC			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			            byte[] topic = new byte[topicLen];			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			            // 17 properties			
",
,
			fromLine:"			540",
			toLine:"			540",
			content:"
			                byte[] properties = new byte[propertiesLength];			
",
,
			fromLine:"			542",
			toLine:"			542",
			content:"
			                String propertiesString = new String(properties, CHARSET_UTF8);			
",
,
			fromLine:"			557",
			toLine:"			557",
			content:"
						
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			573",
			toLine:"			573",
			content:"
						
",
,
			fromLine:"			578",
			toLine:"			579",
			content:"
			        List<MessageExt> msgExts = new ArrayList<>();
			        while (byteBuffer.hasRemaining()) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/client/ProxyClientRemotingProcessor.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.client;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.client.impl.ClientRemotingProcessor;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
						
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        final ByteBuffer byteBuffer = ByteBuffer.wrap(request.getBody());			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/ProxyChannel.java:
		[
			fromLine:"			17",
			toLine:"			49",
			content:"
			
			package org.apache.rocketmq.proxy.service.relay;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelConfig;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelId;
			import io.netty.channel.ChannelMetadata;
			import io.netty.channel.ChannelOutboundBuffer;
			import io.netty.channel.DefaultChannelPromise;
			import io.netty.channel.EventLoop;
			import io.netty.util.concurrent.GlobalEventExecutor;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.transaction.TransactionData;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
						
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			                        CheckTransactionStateRequestHeader header = (CheckTransactionStateRequestHeader) command.readCustomHeader();			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			                        ConsumeMessageDirectlyResultRequestHeader header = (ConsumeMessageDirectlyResultRequestHeader) command.readCustomHeader();			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java:
		[
			fromLine:"			16",
			toLine:"			75",
			content:"
			 */
			package org.apache.rocketmq.store.timer;
			
			import com.conversantmedia.util.concurrent.DisruptorBlockingQueue;
			import java.io.File;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.sql.Timestamp;
			import java.text.SimpleDateFormat;
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentSkipListSet;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.LinkedBlockingDeque;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.function.Function;
			import io.opentelemetry.api.common.Attributes;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.math.NumberUtils;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant;
			import org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.apache.rocketmq.store.util.PerfCounter;
						
",
,
			fromLine:"			79",
			toLine:"			80",
			content:"
			
			    public static final int INITIAL = 0, RUNNING = 1, HAULT = 2, SHUTDOWN = 3;			
",
,
			fromLine:"			115",
			toLine:"			116",
			content:"
			
			    private final MessageStore messageStore;			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    private final int timerRollWindowSlots;			
",
,
			fromLine:"			145",
			toLine:"			146",
			content:"
			
			    protected final int precisionMs;			
",
,
			fromLine:"			165",
			toLine:"			166",
			content:"
			
			        this.messageStore = messageStore;			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();			
",
,
			fromLine:"			172",
			toLine:"			174",
			content:"
			        // TimerWheel contains the fixed number of slots regardless of precision.
			        this.slotsTotal = TIMER_WHEEL_TTL_DAY * DAY_SECS;
			        this.timerWheel = new TimerWheel(			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        // timerRollWindow contains the fixed number of slots regardless of precision.			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			            || storeConfig.getTimerRollWindowSlot() < 2) {			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
						
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
						
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			        List<Integer> timerDist = this.timerMetrics.getTimerDistList();			
",
,
			fromLine:"			258",
			toLine:"			259",
			content:"
			        for (int i = 0; i < timerDist.size(); i++) {
			            int slotBeforeNum = i == 0 ? 0 : timerDist.get(i - 1) * 1000 / precisionMs;			
",
,
			fromLine:"			262",
			toLine:"			263",
			content:"
			            for (int j = slotBeforeNum; j < slotTotalNum; j++) {
			                Slot slotEach = timerWheel.getSlot(currTime + (long) j * precisionMs);			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        long nextReadTimeMs = formatTimeMs(			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
			        //hard to test			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			            int queueId = messageExt.getQueueId();			
",
,
			fromLine:"			428",
			toLine:"			428",
			content:"
			                    if (TimerLog.UNIT_SIZE == size && isMagicOK(magic)) {			
",
,
			fromLine:"			453",
			toLine:"			453",
			content:"
			    public void start() {			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			                try {			
",
,
			fromLine:"			485",
			toLine:"			486",
			content:"
			                try {
			                    if (storeConfig.isTimerEnableCheckMetrics()) {			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
						
",
,
			fromLine:"			514",
			toLine:"			514",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			517",
			toLine:"			517",
			content:"
			        }			
",
,
			fromLine:"			538",
			toLine:"			538",
			content:"
			        }			
",
,
			fromLine:"			552",
			toLine:"			552",
			content:"
			    private void moveReadTime() {			
",
,
			fromLine:"			557",
			toLine:"			557",
			content:"
			    private boolean isRunning() {			
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
			    private void checkBrokerRole() {			
",
,
			fromLine:"			642",
			toLine:"			642",
			content:"
			    public boolean enqueue(int queueId) {			
",
,
			fromLine:"			648",
			toLine:"			648",
			content:"
			        }			
",
,
			fromLine:"			696",
			toLine:"			696",
			content:"
			                    // here may cause the message loss			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
			        long tmpWriteTimeMs = currWriteTimeMs;			
",
,
			fromLine:"			731",
			toLine:"			731",
			content:"
			            magic = magic | MAGIC_ROLL;			
",
,
			fromLine:"			733",
			toLine:"			733",
			content:"
			                //give enough time to next roll			
",
,
			fromLine:"			735",
			toLine:"			735",
			content:"
			            } else {			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
			        String realTopic = messageExt.getProperty(MessageConst.PROPERTY_REAL_TOPIC);			
",
,
			fromLine:"			747",
			toLine:"			747",
			content:"
			        tmpBuffer.putInt(TimerLog.UNIT_SIZE); //size			
",
,
			fromLine:"			759",
			toLine:"			760",
			content:"
			            // TODO: check if the delete msg is in the same slot with "the msg to be deleted".
			            timerWheel.putSlot(delayedTime, slot.firstPos == -1 ? ret : slot.firstPos, ret,			
",
,
			fromLine:"			771",
			toLine:"			771",
			content:"
			        }			
",
,
			fromLine:"			775",
			toLine:"			775",
			content:"
			        if (preReadTimeMs <= currReadTimeMs) {			
",
,
			fromLine:"			780",
			toLine:"			780",
			content:"
			        }			
",
,
			fromLine:"			783",
			toLine:"			785",
			content:"
			        }
			        Slot slot = timerWheel.getSlot(preReadTimeMs);
			        if (-1 == slot.timeMs) {			
",
,
			fromLine:"			788",
			toLine:"			788",
			content:"
			        }			
",
,
			fromLine:"			818",
			toLine:"			818",
			content:"
			                    if (null == msgSbr || msgSbr.getStartOffset() > offsetPy) {			
",
,
			fromLine:"			844",
			toLine:"			844",
			content:"
			        } finally {			
",
,
			fromLine:"			893",
			toLine:"			893",
			content:"
			    public int dequeue() throws Exception {			
",
,
			fromLine:"			903",
			toLine:"			904",
			content:"
			
			        Slot slot = timerWheel.getSlot(currReadTimeMs);			
",
,
			fromLine:"			912",
			toLine:"			912",
			content:"
						
",
,
			fromLine:"			996",
			toLine:"			996",
			content:"
			            LOGGER.error("Unknown error in dequeue process", t);			
",
,
			fromLine:"			1041",
			toLine:"			1041",
			content:"
			            bufferLocal.get().limit(sizePy);			
",
,
			fromLine:"			1044",
			toLine:"			1044",
			content:"
			                bufferLocal.get().flip();			
",
,
			fromLine:"			1083",
			toLine:"			1083",
			content:"
			        } else {			
",
,
			fromLine:"			1094",
			toLine:"			1094",
			content:"
			                        if (brokerStatsManager != null) {			
",
,
			fromLine:"			1121",
			toLine:"			1121",
			content:"
			            } else {			
",
,
			fromLine:"			1167",
			toLine:"			1167",
			content:"
			    private long formatTimeMs(long timeMs) {			
",
,
			fromLine:"			1180",
			toLine:"			1180",
			content:"
			        for (Map.Entry<String, TimerMetrics.Metric> entry : timerMetrics.getTimingCount().entrySet()) {			
",
,
			fromLine:"			1219",
			toLine:"			1219",
			content:"
			        long readTimeMs = currReadTimeMs;			
",
,
			fromLine:"			1303",
			toLine:"			1303",
			content:"
			                    if (!TimerMessageStore.this.enqueue(0)) {			
",
,
			fromLine:"			1315",
			toLine:"			1316",
			content:"
			        String brokerIdentifier = "";
			        if (TimerMessageStore.this.messageStore instanceof DefaultMessageStore) {			
",
,
			fromLine:"			1364",
			toLine:"			1364",
			content:"
			                        req.getOffsetPy(), req.getSizePy(), req.getDelayTime(), req.getMsg());			
",
,
			fromLine:"			1369",
			toLine:"			1369",
			content:"
			                LOGGER.error("Unknown error", t);			
",
,
			fromLine:"			1436",
			toLine:"			1436",
			content:"
			                    if (-1 == TimerMessageStore.this.dequeue()) {			
",
,
			fromLine:"			1447",
			toLine:"			1448",
			content:"
			    abstract class AbstractStateService extends ServiceThread {
			        public static final int INITIAL = -1, START = 0, WAITING = 1, RUNNING = 2, END = 3;			
",
,
			fromLine:"			1451",
			toLine:"			1451",
			content:"
			        protected void setState(int state) {			
",
,
			fromLine:"			1455",
			toLine:"			1455",
			content:"
			        protected boolean isState(int state) {			
",
,
			fromLine:"			1477",
			toLine:"			1477",
			content:"
			                    }			
",
,
			fromLine:"			1505",
			toLine:"			1505",
			content:"
			                                    doRes = PUT_NEED_RETRY != doPut(msg, needRoll(tr.getMagic()));			
",
,
			fromLine:"			1510",
			toLine:"			1510",
			content:"
			                                LOGGER.info("Unknown error", t);			
",
,
			fromLine:"			1544",
			toLine:"			1544",
			content:"
			                    setState(AbstractStateService.WAITING);			
",
,
			fromLine:"			1548",
			toLine:"			1548",
			content:"
			                    }			
",
,
			fromLine:"			1591",
			toLine:"			1591",
			content:"
			                            LOGGER.error("Unknown exception", e);			
",
,
			fromLine:"			1618",
			toLine:"			1619",
			content:"
			            String brokerIdentifier = "";
			            if (TimerMessageStore.this.messageStore instanceof DefaultMessageStore && ((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			1653",
			toLine:"			1654",
			content:"
			            String brokerIdentifier = "";
			            if (TimerMessageStore.this.messageStore instanceof DefaultMessageStore && ((DefaultMessageStore) TimerMessageStore.this.messageStore).getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			1671",
			toLine:"			1671",
			content:"
			                    timerLog.getMappedFileQueue().flush(0);			
",
,
			fromLine:"			1673",
			toLine:"			1673",
			content:"
			                    timerCheckpoint.flush();			
",
,
			fromLine:"			1676",
			toLine:"			1676",
			content:"
			                        long tmpQueueOffset = currQueueOffset;			
",
,
			fromLine:"			1680",
			toLine:"			1680",
			content:"
			                                "enqPutQueue:{} deqGetQueue:{} deqPutQueue:{} allCongestNum:{} enqExpiredStoreTime:{}",			
",
,
			fromLine:"			1686",
			toLine:"			1686",
			content:"
			                    timerMetrics.persist();			
",
,
			fromLine:"			1696",
			toLine:"			1696",
			content:"
			    public long getAllCongestNum() {			
",
,
			fromLine:"			1700",
			toLine:"			1700",
			content:"
			    public long getCongestNum(long deliverTimeMs) {			
",
,
			fromLine:"			1704",
			toLine:"			1705",
			content:"
			    public boolean isReject(long deliverTimeMs) {
			        long congestNum = timerWheel.getNum(deliverTimeMs);			
",
,
			fromLine:"			1708",
			toLine:"			1708",
			content:"
			        }			
",
,
			fromLine:"			1711",
			toLine:"			1711",
			content:"
			        }			
",
,
			fromLine:"			1719",
			toLine:"			1719",
			content:"
			        long tmpQueueOffset = currQueueOffset;			
",
,
			fromLine:"			1736",
			toLine:"			1736",
			content:"
			    public long getDequeueBehindMessages() {			
",
,
			fromLine:"			1761",
			toLine:"			1761",
			content:"
			            if (commitReadTimeMs != lastCommitReadTimeMs || commitQueueOffset != lastCommitQueueOffset) {			
",
,
			fromLine:"			1794",
			toLine:"			1794",
			content:"
			    public MessageStore getMessageStore() {			
",
,
			fromLine:"			1798",
			toLine:"			1798",
			content:"
			    public TimerWheel getTimerWheel() {			
",
,
			fromLine:"			1810",
			toLine:"			1810",
			content:"
			    public int getPrecisionMs() {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/message/DumpCompactionLogCommand.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.tools.command.message;
			
			import org.apache.commons.cli.Options;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
			
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.nio.ByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.FileChannel.MapMode;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
						
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			                    try {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.store.dledger;
			
			import java.net.Inet6Address;
			import java.net.InetSocketAddress;
			import java.nio.ByteBuffer;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageVersion;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.CommitLog;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MessageExtEncoder;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.StoreStatsService;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.rocksdb.RocksDBException;
			
			import io.openmessaging.storage.dledger.AppendFuture;
			import io.openmessaging.storage.dledger.BatchAppendFuture;
			import io.openmessaging.storage.dledger.DLedgerConfig;
			import io.openmessaging.storage.dledger.DLedgerServer;
			import io.openmessaging.storage.dledger.entry.DLedgerEntry;
			import io.openmessaging.storage.dledger.protocol.AppendEntryRequest;
			import io.openmessaging.storage.dledger.protocol.AppendEntryResponse;
			import io.openmessaging.storage.dledger.protocol.BatchAppendEntryRequest;
			import io.openmessaging.storage.dledger.protocol.DLedgerResponseCode;
			import io.openmessaging.storage.dledger.store.file.DLedgerMmapFileStore;
			import io.openmessaging.storage.dledger.store.file.MmapFile;
			import io.openmessaging.storage.dledger.store.file.MmapFileList;
			import io.openmessaging.storage.dledger.store.file.SelectMmapBufferResult;
			import io.openmessaging.storage.dledger.utils.DLedgerUtils;
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    @Override			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			        }			
",
,
			fromLine:"			216",
			toLine:"			217",
			content:
{
        log.info("Try to delete the last old commitlog file ", mappedFile.getFileName());
        long liveMaxTimestamp = mappedFile.getLastModifiedTimestamp() + expiredTime;						
}
,
			fromLine:"			276",
			toLine:"			278",
			content:"
			    @Override
			    public boolean getData(final long offset, final int size, final ByteBuffer byteBuffer) {
			        if (offset < dividedCommitlogOffset) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        }			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			        int mappedFileSize = this.dLedgerServer.getdLedgerConfig().getMappedFileSizeForEntryData();			
",
,
			fromLine:"			286",
			toLine:"			287",
			content:"
			        if (mappedFile != null) {
			            int pos = (int) (offset % mappedFileSize);			
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
			            while (true) {			
",
,
			fromLine:"			484",
			toLine:"			484",
			content:"
			    @Override			
",
,
			fromLine:"			487",
			toLine:"			487",
			content:"
			        if (isInrecoveringOldCommitlog) {			
",
,
			fromLine:"			491",
			toLine:"			492",
			content:"
			            int bodyOffset = DLedgerEntry.BODY_OFFSET;
			            int pos = byteBuffer.position();			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
			            //In dledger, this field is size, it must be gt 0, so it could prevent collision			
",
,
			fromLine:"			498",
			toLine:"			499",
			content:"
			                || magicOld == MessageDecoder.MESSAGE_MAGIC_CODE_V2) {
			                byteBuffer.position(pos);			
",
,
			fromLine:"			504",
			toLine:"			505",
			content:"
			            }
			            byteBuffer.position(pos + bodyOffset);			
",
,
			fromLine:"			820",
			toLine:"			820",
			content:"
			    @Override			
",
,
			fromLine:"			945",
			toLine:"			945",
			content:"
						
",
,
			fromLine:"			1048",
			toLine:"			1048",
			content:"
						
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/StatsItemSet.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
						
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			
			    private final String statsName;			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			40",
			content:"
			    public StatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, Logger logger) {
			        this.logger = logger;
			        this.statsName = statsName;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			158",
			content:"
			
			    public void addValue(final String statsKey, final int incValue, final int incTimes) {
			        StatsItem statsItem = this.getAndCreateStatsItem(statsKey);
			        statsItem.getValue().add(incValue);			
",
,
			fromLine:"			161",
			toLine:"			164",
			content:"
			
			    public void addRTValue(final String statsKey, final int incValue, final int incTimes) {
			        StatsItem statsItem = this.getAndCreateRTStatsItem(statsKey);
			        statsItem.getValue().add(incValue);			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			            if (rtItem) {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			            } else {			
",
,

		],
		common/src/test/java/org/apache/rocketmq/common/stats/StatsItemSetTest.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.LongAdder;
			
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.junit.After;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			                public void run() {
			                    statsItemSet.addValue(tpsStatKey, 2, 1);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                public void run() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/sysflag/PullSysFlag.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.common.sysflag;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        final boolean subscription, final boolean classFilter, final boolean litePull) {			
",
,

		],
		common/src/test/java/org/apache/rocketmq/common/sysflag/PullSysFlagTest.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.common.sysflag;
			
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    public void testLitePullFlag() {			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    public void testLitePullFlagFalse() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/thread/ThreadPoolMonitor.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.common.thread;
			
			import com.google.common.collect.Lists;
			import com.google.common.util.concurrent.ThreadFactoryBuilder;
			import java.util.Collections;
			import java.util.List;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        int queueCapacity) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        ThreadPoolStatusMonitor... threadPoolStatusMonitors) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			89",
			content:"
			        List<ThreadPoolStatusMonitor> threadPoolStatusMonitors) {
			        ThreadPoolExecutor executor = (ThreadPoolExecutor) ThreadUtils.newThreadPoolExecutor(
			            corePoolSize,
			            maximumPoolSize,
			            keepAliveTime,
			            unit,
			            new LinkedBlockingQueue<>(queueCapacity),			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            new ThreadPoolExecutor.DiscardOldestPolicy());			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        MONITOR_EXECUTOR.add(ThreadPoolWrapper.builder()			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/ProxyStartup.java:
		[
			fromLine:"			17",
			toLine:"			56",
			content:"
			
			package org.apache.rocketmq.proxy;
			
			import com.google.common.collect.Lists;
			import io.grpc.protobuf.services.ChannelzService;
			import io.grpc.protobuf.services.ProtoReflectionService;
			import java.util.Date;
			import java.util.List;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.AccessValidator;
			import org.apache.rocketmq.acl.plain.PlainAccessValidator;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerStartup;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.ServiceProvider;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.config.Configuration;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.grpc.GrpcServer;
			import org.apache.rocketmq.proxy.grpc.GrpcServerBuilder;
			import org.apache.rocketmq.proxy.grpc.v2.GrpcMessagingApplication;
			import org.apache.rocketmq.proxy.metrics.ProxyMetricsManager;
			import org.apache.rocketmq.proxy.processor.DefaultMessagingProcessor;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.RemotingProtocolServer;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.srvutil.ServerUtil;
						
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        int threadPoolQueueCapacity = config.getGrpcThreadPoolQueueCapacity();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplication.java:
		[
			fromLine:"			17",
			toLine:"			71",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2;
			
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.AckMessageResponse;
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationResponse;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.EndTransactionResponse;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.HeartbeatResponse;
			import apache.rocketmq.v2.MessagingServiceGrpc;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.NotifyClientTerminationResponse;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryAssignmentResponse;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.SendMessageResponse;
			import apache.rocketmq.v2.Status;
			import apache.rocketmq.v2.TelemetryCommand;
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Context;
			import io.grpc.stub.StreamObserver;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.RejectedExecutionHandler;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Function;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.grpc.pipeline.AuthenticationPipeline;
			import org.apache.rocketmq.proxy.grpc.pipeline.AuthorizationPipeline;
			import org.apache.rocketmq.proxy.grpc.pipeline.ContextInitPipeline;
			import org.apache.rocketmq.proxy.grpc.pipeline.RequestPipeline;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        ProxyConfig config = ConfigurationManager.getProxyConfig();			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        );			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        );			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        );			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        );			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
						
",
,
			fromLine:"			169",
			toLine:"			171",
			content:"
			        StreamObserver<T> responseObserver, Function<Status, T> statusResponseCreator) {
			        if (request instanceof GeneratedMessageV3) {
			            requestPipeline.execute(context, GrpcConstants.METADATA.get(Context.current()), (GeneratedMessageV3) request);			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        }			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			            ResponseWriter.getInstance().write(			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			        } else {			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			        try {			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			                () -> grpcMessingActivity.queryRoute(context, request)			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			        try {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			                () -> grpcMessingActivity.heartbeat(context, request)			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			239",
			toLine:"			239",
			content:"
			        try {			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			                () -> grpcMessingActivity.sendMessage(context, request)			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        try {			
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			                () -> grpcMessingActivity.queryAssignment(context, request)			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			        try {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			        try {			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			                () -> grpcMessingActivity.ackMessage(context, request)			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			        try {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			                () -> grpcMessingActivity.forwardMessageToDeadLetterQueue(context, request)			
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			        try {			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			                () -> grpcMessingActivity.endTransaction(context, request)			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			343",
			toLine:"			343",
			content:"
			        try {			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
			                () -> grpcMessingActivity.notifyClientTermination(context, request)			
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			        try {			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			                () -> grpcMessingActivity.changeInvisibleDuration(context, request)			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			                try {			
",
,
			fromLine:"			389",
			toLine:"			389",
			content:"
			                } catch (Throwable t) {			
",
,
			fromLine:"			424",
			toLine:"			426",
			content:"
			
			        protected final Runnable runnable;
			        protected final ProxyContext context;			
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			            T executeRejectResponse) {
			            this.runnable = runnable;			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			            this.streamObserver = streamObserver;			
",
,
			fromLine:"			441",
			toLine:"			441",
			content:"
			        public void run() {			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			                    GrpcTask grpcTask = (GrpcTask) r;			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/receipt/DefaultReceiptHandleManager.java:
		[
			fromLine:"			17",
			toLine:"			62",
			content:"
			
			package org.apache.rocketmq.proxy.service.receipt;
			
			import com.google.common.base.Stopwatch;
			import io.netty.channel.Channel;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.state.StateEventListener;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.common.ReceiptHandleGroup;
			import org.apache.rocketmq.proxy.common.ReceiptHandleGroupKey;
			import org.apache.rocketmq.proxy.common.RenewEvent;
			import org.apache.rocketmq.proxy.common.RenewStrategyPolicy;
			import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.remoting.protocol.subscription.RetryPolicy;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();			
",
,
			fromLine:"			126",
			toLine:"			128",
			content:"
			
			    public void addReceiptHandle(ProxyContext context, Channel channel, String group, String msgID, MessageReceiptHandle messageReceiptHandle) {
			        ConcurrentHashMapUtils.computeIfAbsent(this.receiptHandleGroupMap, new ReceiptHandleGroupKey(channel, group),			
",
,
			fromLine:"			131",
			toLine:"			132",
			content:"
			
			    public MessageReceiptHandle removeReceiptHandle(ProxyContext context, Channel channel, String group, String msgID, String receiptHandle) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        }			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/route/ClusterTopicRouteServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			54",
			content:"
			
			package org.apache.rocketmq.proxy.service.route;
			
			import com.github.benmanes.caffeine.cache.CacheLoader;
			import com.github.benmanes.caffeine.cache.Caffeine;
			import com.github.benmanes.caffeine.cache.LoadingCache;
			import com.google.common.net.HostAndPort;
			
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.assertj.core.util.Lists;
			import org.checkerframework.checker.nullness.qual.NonNull;
			import org.checkerframework.checker.nullness.qual.Nullable;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.catchThrowableOfType;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			        BrokerData brokerData = new BrokerData();
			        brokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        HashMap<Long, String> brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        BrokerData broke2Data = new BrokerData();			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        QueueData queueData = new QueueData();			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        brokerTopicRouteData.setQueueDatas(Lists.newArrayList(queueData, queue2Data));			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        ProxyContext ctx = ProxyContext.create();			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        List<Address> addressList = Lists.newArrayList(new Address(Address.AddressScheme.IPv4, HostAndPort.fromParts("127.0.0.1", 8888)));			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        final AtomicBoolean throwException = new AtomicBoolean();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/RemotingProtocolServer.java:
		[
			fromLine:"			17",
			toLine:"			66",
			content:"
			
			package org.apache.rocketmq.proxy.remoting;
			
			import com.google.common.util.concurrent.ThreadFactoryBuilder;
			import io.netty.channel.Channel;
			import java.util.List;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.acl.AccessValidator;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.future.FutureTaskExt;
			import org.apache.rocketmq.common.thread.ThreadPoolMonitor;
			import org.apache.rocketmq.common.thread.ThreadPoolStatusMonitor;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.activity.AckMessageActivity;
			import org.apache.rocketmq.proxy.remoting.activity.ChangeInvisibleTimeActivity;
			import org.apache.rocketmq.proxy.remoting.activity.ClientManagerActivity;
			import org.apache.rocketmq.proxy.remoting.activity.ConsumerManagerActivity;
			import org.apache.rocketmq.proxy.remoting.activity.GetTopicRouteActivity;
			import org.apache.rocketmq.proxy.remoting.activity.PopMessageActivity;
			import org.apache.rocketmq.proxy.remoting.activity.PullMessageActivity;
			import org.apache.rocketmq.proxy.remoting.activity.SendMessageActivity;
			import org.apache.rocketmq.proxy.remoting.activity.TransactionActivity;
			import org.apache.rocketmq.proxy.remoting.channel.RemotingChannelManager;
			import org.apache.rocketmq.proxy.remoting.pipeline.AuthenticationPipeline;
			import org.apache.rocketmq.proxy.remoting.pipeline.AuthorizationPipeline;
			import org.apache.rocketmq.proxy.remoting.pipeline.ContextInitPipeline;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
						
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
						
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			194",
			content:"
			    protected void registerRemotingServer(RemotingServer remotingServer) {
			        remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendMessageActivity, this.sendMessageExecutor);
			        remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendMessageActivity, this.sendMessageExecutor);
			        remotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendMessageActivity, this.sendMessageExecutor);			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			200",
			content:"
			
			        remotingServer.registerProcessor(RequestCode.HEART_BEAT, clientManagerActivity, this.heartbeatExecutor);
			        remotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientManagerActivity, this.defaultExecutor);			
",
,
			fromLine:"			202",
			toLine:"			204",
			content:"
			
			        remotingServer.registerProcessor(RequestCode.PULL_MESSAGE, pullMessageActivity, this.pullMessageExecutor);
			        remotingServer.registerProcessor(RequestCode.LITE_PULL_MESSAGE, pullMessageActivity, this.pullMessageExecutor);			
",
,
			fromLine:"			206",
			toLine:"			209",
			content:"
			
			        remotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManagerActivity, this.updateOffsetExecutor);
			        remotingServer.registerProcessor(RequestCode.ACK_MESSAGE, consumerManagerActivity, this.updateOffsetExecutor);
			        remotingServer.registerProcessor(RequestCode.CHANGE_MESSAGE_INVISIBLETIME, consumerManagerActivity, this.updateOffsetExecutor);			
",
,
			fromLine:"			211",
			toLine:"			217",
			content:"
			
			        remotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManagerActivity, this.defaultExecutor);
			        remotingServer.registerProcessor(RequestCode.GET_MAX_OFFSET, consumerManagerActivity, this.defaultExecutor);
			        remotingServer.registerProcessor(RequestCode.GET_MIN_OFFSET, consumerManagerActivity, this.defaultExecutor);
			        remotingServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET, consumerManagerActivity, this.defaultExecutor);
			        remotingServer.registerProcessor(RequestCode.SEARCH_OFFSET_BY_TIMESTAMP, consumerManagerActivity, this.defaultExecutor);
			        remotingServer.registerProcessor(RequestCode.LOCK_BATCH_MQ, consumerManagerActivity, this.defaultExecutor);			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
						
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			        try {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/utils/ThreadUtils.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.common.utils;
			
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.RejectedExecutionHandler;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.ThreadFactory;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.thread.FutureTaskExtThreadPoolExecutor;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public static ExecutorService newThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        boolean isDaemon) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        final ThreadFactory threadFactory) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        RejectedExecutionHandler handler) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public static ScheduledExecutorService newSingleThreadScheduledExecutor(String processName, boolean isDaemon) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        boolean isDaemon) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        RejectedExecutionHandler handler) {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/transaction/AbstractTransactionalMessageCheckListener.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.broker.transaction;
			
			import io.netty.channel.Channel;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        if (executorService == null) {			
",
,

		],
		container/src/main/java/org/apache/rocketmq/container/BrokerContainer.java:
		[
			fromLine:"			16",
			toLine:"			51",
			content:"
			 */
			package org.apache.rocketmq.container;
			
			import org.apache.commons.lang3.concurrent.BasicThreadFactory;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.container.logback.BrokerLogbackConfigurator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.Configuration;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.List;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
						
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,

		],
		namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvController.java:
		[
			fromLine:"			16",
			toLine:"			53",
			content:"
			 */
			package org.apache.rocketmq.namesrv;
			
			import java.util.Collections;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.concurrent.BasicThreadFactory;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.future.FutureTaskExt;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.kvconfig.KVConfigManager;
			import org.apache.rocketmq.namesrv.processor.ClientRequestProcessor;
			import org.apache.rocketmq.namesrv.processor.ClusterTestRequestProcessor;
			import org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor;
			import org.apache.rocketmq.namesrv.route.ZoneRouteRPCHook;
			import org.apache.rocketmq.namesrv.routeinfo.BrokerHousekeepingService;
			import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;
			import org.apache.rocketmq.remoting.Configuration;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.common.TlsMode;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.srvutil.FileWatchService;
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			    private final NettyServerConfig nettyServerConfig;			
",
,
			fromLine:"			90",
			toLine:"			92",
			content:"
			    public NamesrvController(NamesrvConfig namesrvConfig, NettyServerConfig nettyServerConfig, NettyClientConfig nettyClientConfig) {
			        this.namesrvConfig = namesrvConfig;
			        this.nettyServerConfig = nettyServerConfig;			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			        this.routeInfoManager = new RouteInfoManager(namesrvConfig, this);
			        this.configuration = new Configuration(LOGGER, this.namesrvConfig, this.nettyServerConfig);			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        this.scanExecutorService.scheduleAtFixedRate(NamesrvController.this.routeInfoManager::scanNotActiveBroker,			
",
,
			fromLine:"			132",
			toLine:"			133",
			content:"
			    private void initiateNetworkComponents() {
			        this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.brokerHousekeepingService);			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			    private void initiateThreadExecutors() {
			        this.defaultThreadPoolQueue = new LinkedBlockingQueue<>(this.namesrvConfig.getDefaultThreadPoolQueueCapacity());			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			
			        this.clientRequestThreadPoolQueue = new LinkedBlockingQueue<>(this.namesrvConfig.getClientRequestThreadPoolQueueCapacity());			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    private void registerProcessor() {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
						
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			            ClientRequestProcessor clientRequestProcessor = new ClientRequestProcessor(this);			
",
,
			fromLine:"			224",
			toLine:"			225",
			content:"
			        // In test scenarios where it is up to OS to pick up an available port, set the listening port back to config
			        if (0 == nettyServerConfig.getListenPort()) {			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			        this.remotingClient.updateNameServerAddressList(Collections.singletonList(NetworkUtil.getLocalAddress()			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			    public NamesrvConfig getNamesrvConfig() {			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			    public NettyServerConfig getNettyServerConfig() {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingClient.java:
		[
			fromLine:"			16",
			toLine:"			91",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.TypeReference;
			import com.google.common.base.Stopwatch;
			import io.netty.bootstrap.Bootstrap;
			import io.netty.buffer.PooledByteBufAllocator;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelDuplexHandler;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.ChannelInitializer;
			import io.netty.channel.ChannelOption;
			import io.netty.channel.ChannelPipeline;
			import io.netty.channel.ChannelPromise;
			import io.netty.channel.EventLoopGroup;
			import io.netty.channel.SimpleChannelInboundHandler;
			import io.netty.channel.WriteBufferWaterMark;
			import io.netty.channel.nio.NioEventLoopGroup;
			import io.netty.channel.socket.SocketChannel;
			import io.netty.channel.socket.nio.NioSocketChannel;
			import io.netty.handler.proxy.Socks5ProxyHandler;
			import io.netty.handler.timeout.IdleState;
			import io.netty.handler.timeout.IdleStateEvent;
			import io.netty.handler.timeout.IdleStateHandler;
			import io.netty.resolver.NoopAddressResolverGroup;
			import io.netty.util.HashedWheelTimer;
			import io.netty.util.Timeout;
			import io.netty.util.TimerTask;
			import io.netty.util.concurrent.DefaultEventExecutorGroup;
			import io.netty.util.concurrent.EventExecutorGroup;
			import java.io.IOException;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.security.cert.CertificateException;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.Set;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.proxy.SocksProxyConfig;
						
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
						
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    private ExecutorService callbackExecutor;			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			        this.nettyClientConfig = nettyClientConfig;			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
						
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			                } finally {			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			        };			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			                } finally {			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			        };			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			        try {			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
						
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			            try {			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			                }			
",
,
			fromLine:"			719",
			toLine:"			719",
			content:"
			    @Override			
",
,
			fromLine:"			725",
			toLine:"			725",
			content:"
			        if (channelFuture == null) {			
",
,
			fromLine:"			734",
			toLine:"			735",
			content:"
			                    long costTime = System.currentTimeMillis() - beginStartTime;
			                    if (timeoutMillis < costTime) {			
",
,
			fromLine:"			737",
			toLine:"			737",
			content:"
			                    }			
",
,
			fromLine:"			740",
			toLine:"			740",
			content:"
			                    this.closeChannel(addr, channel);			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
			            } else {			
",
,
			fromLine:"			761",
			toLine:"			761",
			content:"
			                    doBeforeRpcHooks(channelRemoteAddr, request);			
",
,
			fromLine:"			783",
			toLine:"			783",
			content:"
			                    if (channel != null && channel.isActive()) {			
",
,
			fromLine:"			809",
			toLine:"			809",
			content:"
			    @Override			
",
,
			fromLine:"			812",
			toLine:"			813",
			content:"
			        Stopwatch stopwatch = Stopwatch.createStarted();
			        String channelRemoteAddr = RemotingHelper.parseChannelRemoteAddr(channel);			
",
,
			fromLine:"			815",
			toLine:"			815",
			content:"
						
",
,
			fromLine:"			819",
			toLine:"			819",
			content:"
			                if (nettyClientConfig.isEnableReconnectForGoAway()) {			
",
,
			fromLine:"			832",
			toLine:"			833",
			content:"
			                        if (nettyClientConfig.isEnableTransparentRetry()) {
			                            RemotingCommand retryRequest = RemotingCommand.createRequestCommand(request.getCode(), request.readCustomHeader());			
",
,
			fromLine:"			838",
			toLine:"			839",
			content:"
			                                Channel retryChannel = channelWrapper.getChannel();
			                                if (retryChannel != null && channel != retryChannel) {			
",
,
			fromLine:"			849",
			toLine:"			850",
			content:"
			                                        Channel retryChannel0 = channelFuture.channel();
			                                        if (retryChannel0 != null && channel != retryChannel0) {			
",
,
			fromLine:"			871",
			toLine:"			871",
			content:"
			            if (t == null) {			
",
,
			fromLine:"			880",
			toLine:"			880",
			content:"
			        if (null == executor) {			
",
,
			fromLine:"			922",
			toLine:"			922",
			content:"
			    public ChannelEventListener getChannelEventListener() {			
",
,
			fromLine:"			930",
			toLine:"			930",
			content:"
			        }			
",
,
			fromLine:"			1137",
			toLine:"			1137",
			content:"
						
",
,
			fromLine:"			1148",
			toLine:"			1148",
			content:"
						
",
,
			fromLine:"			1160",
			toLine:"			1160",
			content:"
						
",
,
			fromLine:"			1172",
			toLine:"			1172",
			content:"
			            NettyRemotingClient.this.failFast(ctx.channel());			
",
,
			fromLine:"			1193",
			toLine:"			1193",
			content:"
			                    closeChannel(ctx.channel());			
",
,
			fromLine:"			1209",
			toLine:"			1209",
			content:"
			            closeChannel(ctx.channel());			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/MessageStoreExecutor.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.tieredstore;
			
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.utils.ThreadUtils;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        this.bufferCommitThreadPoolQueue = new LinkedBlockingQueue<>(maxQueueCapacity);			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        this.bufferFetchThreadPoolQueue = new LinkedBlockingQueue<>(maxQueueCapacity);			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        this.fileRecyclingThreadPoolQueue = new LinkedBlockingQueue<>(maxQueueCapacity);			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/utils/HttpTinyClient.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.common.utils;
			
			import java.io.IOException;
			import java.io.UnsupportedEncodingException;
			import java.net.HttpURLConnection;
			import java.net.URL;
			import java.net.URLEncoder;
			import java.util.Iterator;
			import java.util.List;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			34",
			content:"
			        String encoding, long readTimeoutMs) throws IOException {
			        String encodedContent = encodingParams(paramValues, encoding);			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        try {			
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			            conn.setRequestMethod("GET");
			            conn.setConnectTimeout((int) readTimeoutMs);
			            conn.setReadTimeout((int) readTimeoutMs);			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			            if (HttpURLConnection.HTTP_OK == respCode) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			            } else {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			     */			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        String encoding, long readTimeoutMs) throws IOException {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        try {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			            conn.setConnectTimeout(3000);			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			            conn.setDoInput(true);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			            if (HttpURLConnection.HTTP_OK == respCode) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			            } else {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/namesrv/DefaultTopAddressing.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.common.namesrv;
			
			import com.google.common.base.Strings;
			import java.io.IOException;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.ServiceLoader;
			import java.util.Map;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.utils.HttpTinyClient;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingServer.java:
		[
			fromLine:"			16",
			toLine:"			90",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import io.netty.bootstrap.ServerBootstrap;
			import io.netty.buffer.ByteBuf;
			import io.netty.buffer.ByteBufUtil;
			import io.netty.buffer.PooledByteBufAllocator;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelDuplexHandler;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelHandler;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.ChannelInboundHandlerAdapter;
			import io.netty.channel.ChannelInitializer;
			import io.netty.channel.ChannelOption;
			import io.netty.channel.ChannelPipeline;
			import io.netty.channel.EventLoopGroup;
			import io.netty.channel.SimpleChannelInboundHandler;
			import io.netty.channel.WriteBufferWaterMark;
			import io.netty.channel.epoll.Epoll;
			import io.netty.channel.epoll.EpollEventLoopGroup;
			import io.netty.channel.epoll.EpollServerSocketChannel;
			import io.netty.channel.nio.NioEventLoopGroup;
			import io.netty.channel.socket.SocketChannel;
			import io.netty.channel.socket.nio.NioServerSocketChannel;
			import io.netty.handler.codec.ByteToMessageDecoder;
			import io.netty.handler.codec.ProtocolDetectionResult;
			import io.netty.handler.codec.ProtocolDetectionState;
			import io.netty.handler.codec.haproxy.HAProxyMessage;
			import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
			import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;
			import io.netty.handler.codec.haproxy.HAProxyTLV;
			import io.netty.handler.timeout.IdleState;
			import io.netty.handler.timeout.IdleStateEvent;
			import io.netty.handler.timeout.IdleStateHandler;
			import io.netty.util.AttributeKey;
			import io.netty.util.CharsetUtil;
			import io.netty.util.HashedWheelTimer;
			import io.netty.util.Timeout;
			import io.netty.util.TimerTask;
			import io.netty.util.concurrent.DefaultEventExecutorGroup;
			import java.io.IOException;
			import java.net.InetSocketAddress;
			import java.security.cert.CertificateException;
			import java.time.Duration;
			import java.util.List;
			import java.util.NoSuchElementException;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.HAProxyConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.BinaryUtil;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingServer;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.common.TlsMode;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			117",
			content:"
			    public static final String HANDSHAKE_HANDLER_NAME = "handshakeHandler";
			    public static final String HA_PROXY_DECODER = "HAProxyDecoder";
			    public static final String HA_PROXY_HANDLER = "HAProxyHandler";			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        this.nettyServerConfig = nettyServerConfig;			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    private ScheduledExecutorService buildScheduleExecutor() {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			                } finally {			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        };			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
						
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
						
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			            try {			
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
			        if (null == executor) {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			    @Override			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			        throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {			
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
			    @Override			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			        throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {			
",
,
			fromLine:"			397",
			toLine:"			397",
			content:"
			    @Override			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			        RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			    public ChannelEventListener getChannelEventListener() {			
",
,
			fromLine:"			409",
			toLine:"			409",
			content:"
			    public ExecutorService getCallbackExecutor() {			
",
,
			fromLine:"			469",
			toLine:"			471",
			content:"
			                if (detectionResult.state() == ProtocolDetectionState.DETECTED) {
			                    ctx.pipeline().addAfter(defaultEventExecutorGroup, ctx.name(), HA_PROXY_DECODER, new HAProxyMessageDecoder())
			                            .addAfter(defaultEventExecutorGroup, HA_PROXY_DECODER, HA_PROXY_HANDLER, new HAProxyMessageHandler())			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			                } else {			
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			                            ctx.pipeline()			
",
,
			fromLine:"			601",
			toLine:"			601",
			content:"
						
",
,
			fromLine:"			612",
			toLine:"			612",
			content:"
						
",
,
			fromLine:"			625",
			toLine:"			625",
			content:"
			                    RemotingHelper.closeChannel(ctx.channel());			
",
,
			fromLine:"			641",
			toLine:"			641",
			content:"
						
",
,
			fromLine:"			668",
			toLine:"			668",
			content:"
			            if (null == executor) {			
",
,
			fromLine:"			710",
			toLine:"			710",
			content:"
			            final long timeoutMillis) throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException {			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
			            final InvokeCallback invokeCallback) throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {			
",
,
			fromLine:"			722",
			toLine:"			722",
			content:"
			            final long timeoutMillis) throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {			
",
,

		],
		container/src/main/java/org/apache/rocketmq/container/ContainerClientHouseKeepingService.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.container;
			
			import io.netty.channel.Channel;
			import java.util.Collection;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.remoting.ChannelEventListener;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    public void onChannelConnect(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public void onChannelClose(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void onChannelException(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void onChannelIdle(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void onChannelActive(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        for (BrokerController masterBroker : masterBrokers) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        for (InnerSalveBrokerController slaveBroker : slaveBrokers) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        Channel channel) {			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			        }
			        boolean removed = brokerController.getProducerManager().doChannelCloseEvent(remoteAddr, channel);			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        if (removed) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/NotifyBrokerRoleChangedRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			27",
			toLine:"			30",
			content:"
			public class NotifyBrokerRoleChangedRequestHeader implements CommandCustomHeader {
			    private String masterAddress;
			    private Integer masterEpoch;
			    private Integer syncStateSetEpoch;			
",
,
			fromLine:"			36",
			toLine:"			39",
			content:"
			    public NotifyBrokerRoleChangedRequestHeader(String masterAddress, Long masterBrokerId, Integer masterEpoch, Integer syncStateSetEpoch) {
			        this.masterAddress = masterAddress;
			        this.masterEpoch = masterEpoch;
			        this.syncStateSetEpoch = syncStateSetEpoch;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public Integer getMasterEpoch() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setMasterEpoch(Integer masterEpoch) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public Integer getSyncStateSetEpoch() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setSyncStateSetEpoch(Integer syncStateSetEpoch) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			77",
			toLine:"			80",
			content:"
			        return "NotifyBrokerRoleChangedRequestHeader{" +
			                "masterAddress='" + masterAddress + '\'' +
			                ", masterEpoch=" + masterEpoch +
			                ", syncStateSetEpoch=" + syncStateSetEpoch +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/AlterSyncStateSetRequestHeader.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.controller;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			public class AlterSyncStateSetRequestHeader implements CommandCustomHeader {
			    private String brokerName;
			    private Long masterBrokerId;			
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			    public AlterSyncStateSetRequestHeader(String brokerName, Long masterBrokerId, Integer masterEpoch) {
			        this.brokerName = brokerName;
			        this.masterBrokerId = masterBrokerId;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public Integer getMasterEpoch() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setMasterEpoch(Integer masterEpoch) {			
",
,
			fromLine:"			76",
			toLine:"			78",
			content:"
			        return "AlterSyncStateSetRequestHeader{" +
			                "brokerName='" + brokerName + '\'' +
			                ", masterBrokerId=" + masterBrokerId +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/ElectMasterResponseHeader.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.controller;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			
						
",
,
			fromLine:"			24",
			toLine:"			27",
			content:"
			
			    private Long masterBrokerId;
			    private String masterAddress;
			    private Integer masterEpoch;			
",
,
			fromLine:"			33",
			toLine:"			36",
			content:"
			    public ElectMasterResponseHeader(Long masterBrokerId, String masterAddress, Integer masterEpoch, Integer syncStateSetEpoch) {
			        this.masterBrokerId = masterBrokerId;
			        this.masterAddress = masterAddress;
			        this.masterEpoch = masterEpoch;			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public Integer getMasterEpoch() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setMasterEpoch(Integer masterEpoch) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public Integer getSyncStateSetEpoch() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setSyncStateSetEpoch(Integer syncStateSetEpoch) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			74",
			toLine:"			77",
			content:"
			        return "ElectMasterResponseHeader{" +
			                "masterBrokerId=" + masterBrokerId +
			                ", masterAddress='" + masterAddress + '\'' +
			                ", masterEpoch=" + masterEpoch +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/register/RegisterBrokerToControllerResponseHeader.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header.controller.register;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			    public RegisterBrokerToControllerResponseHeader(String clusterName, String brokerName) {
			        this.clusterName = clusterName;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setMasterEpoch(Integer masterEpoch) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setSyncStateSetEpoch(Integer syncStateSetEpoch) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public Integer getMasterEpoch() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public Integer getSyncStateSetEpoch() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setClusterName(String clusterName) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/event/EventSerializer.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.event;
			
			import org.apache.commons.lang3.SerializationException;
			import org.apache.rocketmq.common.utils.FastJsonSerializer;
						
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			
			    private void putShort(byte[] memory, int index, int value) {
			        memory[index] = (byte) (value >>> 8);			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			            final byte[] result = new byte[2 + data.length];			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/event/ListEventSerializer.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.event;
			
			import org.apache.commons.lang3.SerializationException;
			import org.apache.rocketmq.common.utils.FastJsonSerializer;
			import org.apache.rocketmq.common.utils.Serializer;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			
			import java.io.ByteArrayOutputStream;
			import java.util.ArrayList;
			import java.util.List;
						
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			
			    private static void putShort(byte[] memory, int index, int value) {
			        memory[index] = (byte) (value >>> 8);			
",
,
			fromLine:"			47",
			toLine:"			51",
			content:"
			
			    private static void putInt(byte[] memory, int index, int value) {
			        memory[index] = (byte) (value >>> 24);
			        memory[index + 1] = (byte) (value >>> 16);
			        memory[index + 2] = (byte) (value >>> 8);			
",
,

		],
		filter/src/main/java/org/apache/rocketmq/filter/expression/ComparisonExpression.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.filter.expression;
			
			import java.util.List;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			        // check
			        if (left instanceof ConstantExpression && right instanceof ConstantExpression) {
			            Object lv = ((ConstantExpression) left).getValue();			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			
			    public static BooleanExpression createNotBetween(Expression value, Expression left, Expression right) {			
",
,

		],
		filter/src/main/java/org/apache/rocketmq/filter/parser/SelectorParser.java:
		[
			fromLine:"			18",
			toLine:"			35",
			content:"
			/* Generated By:JavaCC: Do not edit this line. SelectorParser.java */
			package org.apache.rocketmq.filter.parser;
			
			import com.google.common.cache.Cache;
			import com.google.common.cache.CacheBuilder;
			import org.apache.rocketmq.filter.expression.BooleanConstantExpression;
			import org.apache.rocketmq.filter.expression.BooleanExpression;
			import org.apache.rocketmq.filter.expression.ComparisonExpression;
			import org.apache.rocketmq.filter.expression.ConstantExpression;
			import org.apache.rocketmq.filter.expression.Expression;
			import org.apache.rocketmq.filter.expression.LogicExpression;
			import org.apache.rocketmq.filter.expression.MQFilterException;
			import org.apache.rocketmq.filter.expression.PropertyExpression;
			import org.apache.rocketmq.filter.expression.UnaryExpression;
			
			import java.io.StringReader;
			import java.util.ArrayList;
						
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			                                                        high = unaryExpr();			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			                                                            high = unaryExpr();			
",
,
			fromLine:"			1106",
			toLine:"			1106",
			content:"
			        try {			
",
,
			fromLine:"			1135",
			toLine:"			1135",
			content:"
			    public void ReInit(java.io.Reader stream) {			
",
,

		],
		filter/src/main/java/org/apache/rocketmq/filter/parser/ParseException.java:
		[
			fromLine:"			19",
			toLine:"			21",
			content:"
			/* JavaCCOptions:KEEP_LINE_COL=null */
			package org.apache.rocketmq.filter.parser;
						
",
,
			fromLine:"			49",
			toLine:"			52",
			content:"
			    ) {
			        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
			        currentToken = currentTokenVal;
			        expectedTokenSequences = expectedTokenSequencesVal;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			     */			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			     */			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			     */			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			     */			
",
,
			fromLine:"			110",
			toLine:"			112",
			content:"
			        int maxSize = 0;
			        for (int i = 0; i < expectedTokenSequences.length; i++) {
			            if (maxSize < expectedTokenSequences[i].length) {			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			            }
			            for (int j = 0; j < expectedTokenSequences[i].length; j++) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			            }			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        String retval = "Encountered \"";			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			            if (tok.kind == 0) {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			            }			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        }			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        retval += "." + eol;			
",
,

		],
		filter/src/main/java/org/apache/rocketmq/filter/parser/SimpleCharStream.java:
		[
			fromLine:"			19",
			toLine:"			23",
			content:"
			/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
			package org.apache.rocketmq.filter.parser;
			
			import java.nio.charset.StandardCharsets;
						
",
,
			fromLine:"			297",
			toLine:"			297",
			content:"
			     */			
",
,
			fromLine:"			299",
			toLine:"			301",
			content:"
			        int startcolumn, int buffersize) {
			        inputStream = dstream;
			        line = startline;			
",
,
			fromLine:"			303",
			toLine:"			307",
			content:"
			
			        if (buffer == null || buffersize != buffer.length) {
			            available = bufsize = buffersize;
			            buffer = new char[buffersize];
			            bufline = new int[buffersize];			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			     */			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			        int startcolumn) {			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
			    public void ReInit(java.io.Reader dstream) {			
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			     */			
",
,
			fromLine:"			382",
			toLine:"			384",
			content:"
			        int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
			        ReInit(encoding == null ?
			            new java.io.InputStreamReader(dstream, StandardCharsets.UTF_8) :			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			     */			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			        int startcolumn, int buffersize) {			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			    public void ReInit(java.io.InputStream dstream) {			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			     */			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			        int startcolumn) throws java.io.UnsupportedEncodingException {			
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			     */			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			        int startcolumn) {			
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerBrokerPermTest.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import java.lang.reflect.Field;
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			
			public class RouteInfoManagerBrokerPermTest extends RouteInfoManagerTestBase {
			    private static RouteInfoManager routeInfoManager;
			    public static String clusterName = "cluster";
			    public static String brokerPrefix = "broker";			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			44",
			content:"
			    public void setup() {
			        routeInfoManager = new RouteInfoManager(new NamesrvConfig(), null);
			        cluster = registerCluster(routeInfoManager,
			            clusterName,			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			            3,			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			
			        for (BrokerData bd : cluster.brokerDataMap.values()) {			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			    public void testAddWritePermOfBrokerByLock() throws Exception {
			        String brokerName = getBrokerName(brokerPrefix, 0);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        filed.setAccessible(true);			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			    public void testWipeWritePermOfBrokerByLock() throws Exception {
			        String brokerName = getBrokerName(brokerPrefix, 0);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        filed.setAccessible(true);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,

		],
		namesrv/src/test/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManagerStaticRegisterTest.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.namesrv.routeinfo;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNull;
			
			public class RouteInfoManagerStaticRegisterTest extends RouteInfoManagerTestBase {
			    private static RouteInfoManager routeInfoManager;
			    public static String clusterName = "cluster";
			    public static String brokerPrefix = "broker";			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			52",
			content:"
			    public void setup() {
			        routeInfoManager = new RouteInfoManager(new NamesrvConfig(), null);
			        cluster = registerCluster(routeInfoManager,
			            clusterName,			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			            3,			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void terminate() {			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			        for (BrokerData bd : cluster.brokerDataMap.values()) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void testGetAllClusterInfo() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        assertEquals(1, clusterAddrTable.size());			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void testGetAllTopicList() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			    public void testGetTopicsByCluster() {
			        TopicList topicList = routeInfoManager.getTopicsByCluster(clusterName);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public void testPickupTopicRouteData() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        Collections.sort(topicRouteData.getBrokerDatas());			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			    public void testDeleteTopic() {
			        String topic = getTopicName(topicPrefix, 0);			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public void testGetSystemTopicList() {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    public void testGetUnitTopics() {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    public void testGetHasUnitSubTopicList() {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    public void testGetHasUnitSubUnUnitTopicList() {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/pipeline/AuthenticationPipeline.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.pipeline;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Context;
			import io.grpc.Metadata;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authentication.AuthenticationEvaluator;
			import org.apache.rocketmq.auth.authentication.context.AuthenticationContext;
			import org.apache.rocketmq.auth.authentication.context.DefaultAuthenticationContext;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @Override			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            Metadata metadata = GrpcConstants.METADATA.get(Context.current());			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        } catch (Throwable ex) {			
",
,
			fromLine:"			65",
			toLine:"			67",
			content:"
			     *
			     * @param context for extension
			     * @param headers gRPC headers			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			     */
			    protected AuthenticationContext newContext(ProxyContext context, Metadata headers, GeneratedMessageV3 request) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            if (StringUtils.isNotBlank(defaultAuthenticationContext.getUsername())) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/pipeline/RequestPipeline.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.pipeline;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import org.apache.rocketmq.proxy.common.ProxyContext;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			        return (ctx, headers, request) -> {
			            source.execute(ctx, headers, request);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/pipeline/AuthorizationPipeline.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.pipeline;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import java.util.List;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authorization.AuthorizationEvaluator;
			import org.apache.rocketmq.auth.authorization.context.AuthorizationContext;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @Override			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        try {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        }  catch (Throwable ex) {			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			    protected List<AuthorizationContext> newContexts(ProxyContext context, Metadata headers, GeneratedMessageV3 request) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/pipeline/ContextInitPipeline.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.pipeline;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Context;
			import io.grpc.Metadata;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    @Override			
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			        Context ctx = Context.current();
			        context.setLocalAddress(getDefaultStringMetadataInfo(headers, GrpcConstants.LOCAL_ADDRESS))
			            .setRemoteAddress(getDefaultStringMetadataInfo(headers, GrpcConstants.REMOTE_ADDRESS))			
",
,
			fromLine:"			35",
			toLine:"			38",
			content:"
			            .setProtocolType(ChannelProtocolType.GRPC_V2.getName())
			            .setLanguage(getDefaultStringMetadataInfo(headers, GrpcConstants.LANGUAGE))
			            .setClientVersion(getDefaultStringMetadataInfo(headers, GrpcConstants.CLIENT_VERSION))
			            .setAction(getDefaultStringMetadataInfo(headers, GrpcConstants.SIMPLE_RPC_NAME))			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        if (ctx.getDeadline() != null) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/AckMessageActivity.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.AckMessageEntry;
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.AckMessageResponse;
			import apache.rocketmq.v2.AckMessageResultEntry;
			import apache.rocketmq.v2.Code;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.BatchAckResult;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.message.ReceiptHandleMessage;
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			            if (ConfigurationManager.getProxyConfig().isEnableBatchAck()) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			            } else {			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			
			    protected CompletableFuture<AckMessageResponse> ackMessageInBatch(ProxyContext ctx, String group, String topic, AckMessageRequest request) {			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			
			        for (AckMessageEntry ackMessageEntry : request.getEntriesList()) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        }			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			110",
			content:"
			        CompletableFuture<AckMessageResponse> resultFuture = new CompletableFuture<>();
			        CompletableFuture<AckMessageResultEntry>[] futures = new CompletableFuture[request.getEntriesCount()];
			        for (int i = 0; i < request.getEntriesCount(); i++) {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			140",
			content:"
			        try {
			            String handleString = this.getHandleString(ctx, group, request, ackMessageEntry);
			            CompletableFuture<AckResult> ackResultFuture = this.messagingProcessor.ackMessage(			
",
,
			fromLine:"			142",
			toLine:"			144",
			content:"
			                ReceiptHandle.decode(handleString),
			                ackMessageEntry.getMessageId(),
			                group,			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            ackResultFuture.thenAccept(result -> {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			            }).exceptionally(t -> {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			193",
			toLine:"			194",
			content:"
			
			    protected String getHandleString(ProxyContext ctx, String group, AckMessageRequest request, AckMessageEntry ackMessageEntry) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageResponseStreamWriter.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Message;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import com.google.protobuf.util.Timestamps;
			import io.grpc.stub.StreamObserver;
			import java.time.Duration;
			import java.util.Iterator;
			import java.util.List;
			import org.apache.rocketmq.client.consumer.PopResult;
			import org.apache.rocketmq.client.consumer.PopStatus;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseWriter;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			                            } catch (Throwable t) {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			                                messageIterator.forEachRemaining(messageExt ->			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			
			        this.messagingProcessor.changeInvisibleTime(			
",
,
			fromLine:"			123",
			toLine:"			124",
			content:"
			            messageExt.getMsgId(),
			            request.getGroup().getName(),			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        writeResponseWithErrorIgnore(			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java:
		[
			fromLine:"			17",
			toLine:"			57",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.Executors;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.transaction.TransactionData;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.header.ConsumerSendMsgBackRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        List<Message> messageList = new ArrayList<>();			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        List<Message> messageExtList = new ArrayList<>();			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
						
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			        ArgumentCaptor<ConsumerSendMsgBackRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(ConsumerSendMsgBackRequestHeader.class);			
",
,
			fromLine:"			190",
			toLine:"			191",
			content:"
			
			        MessageExt messageExt = createMessageExt(KeyBuilder.buildPopRetryTopic(TOPIC, CONSUMER_GROUP, new BrokerConfig().isEnableRetryTopicV2()), "", 16, 3000);			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/message/MessageExt.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.common.message;
			
			import java.net.Inet4Address;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			
			public class MessageExt extends Message {			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			
			    private long queueOffset;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    private long bornTimestamp;			
",
,
			fromLine:"			40",
			toLine:"			43",
			content:"
			
			    private long storeTimestamp;
			    private SocketAddress storeHost;
			    private String msgId;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    private int bodyCRC;			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        SocketAddress storeHost, String msgId) {			
",
,
			fromLine:"			56",
			toLine:"			59",
			content:"
			        this.bornTimestamp = bornTimestamp;
			        this.bornHost = bornHost;
			        this.storeTimestamp = storeTimestamp;
			        this.storeHost = storeHost;			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public ByteBuffer getBornHostBytes() {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public ByteBuffer getBornHostBytes(ByteBuffer byteBuffer) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public ByteBuffer getStoreHostBytes() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public ByteBuffer getStoreHostBytes(ByteBuffer byteBuffer) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void setBrokerName(String brokerName) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void setQueueId(int queueId) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    public SocketAddress getBornHost() {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			    public void setBornHost(SocketAddress bornHost) {			
",
,
			fromLine:"			144",
			toLine:"			145",
			content:"
			    public String getBornHostString() {
			        if (null != this.bornHost) {			
",
,
			fromLine:"			154",
			toLine:"			155",
			content:"
			    public String getBornHostNameString() {
			        if (null != this.bornHost) {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                // without reverse dns lookup			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			            }			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			    public long getStoreTimestamp() {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			    public void setStoreTimestamp(long storeTimestamp) {			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			    public SocketAddress getStoreHost() {			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			    public void setStoreHost(SocketAddress storeHost) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			188",
			toLine:"			188",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    public int getSysFlag() {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public void setSysFlag(int sysFlag) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
						
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			    public long getQueueOffset() {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    public void setQueueOffset(long queueOffset) {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public long getCommitLogOffset() {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    public void setCommitLogOffset(long physicOffset) {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			    public int getReconsumeTimes() {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    public void setReconsumeTimes(int reconsumeTimes) {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			    public long getPreparedTransactionOffset() {			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			    public void setPreparedTransactionOffset(long preparedTransactionOffset) {			
",
,
			fromLine:"			308",
			toLine:"			312",
			content:"
			    public String toString() {
			        return "MessageExt [brokerName=" + brokerName + ", queueId=" + queueId + ", storeSize=" + storeSize + ", queueOffset=" + queueOffset
			            + ", sysFlag=" + sysFlag + ", bornTimestamp=" + bornTimestamp + ", bornHost=" + bornHost
			            + ", storeTimestamp=" + storeTimestamp + ", storeHost=" + storeHost + ", msgId=" + msgId
			            + ", commitLogOffset=" + commitLogOffset + ", bodyCRC=" + bodyCRC + ", reconsumeTimes="			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ChangeInvisibleTimeResponseHeader.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public int getReviveQid() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setReviveQid(int reviveQid) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivity.java:
		[
			fromLine:"			16",
			toLine:"			73",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.client;
			
			import apache.rocketmq.v2.ClientType;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.HeartbeatResponse;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.NotifyClientTerminationResponse;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Status;
			import apache.rocketmq.v2.SubscriptionEntry;
			import apache.rocketmq.v2.TelemetryCommand;
			import apache.rocketmq.v2.ThreadStackTrace;
			import apache.rocketmq.v2.VerifyMessageResult;
			import io.grpc.StatusRuntimeException;
			import io.grpc.stub.StreamObserver;
			import io.netty.channel.Channel;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.broker.client.ProducerGroupEvent;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.ContextStreamObserver;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcClientChannel;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayResult;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			    protected void init() {
			        this.messagingProcessor.registerConsumerListener(new ConsumerIdsChangeListenerImpl());			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        try {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			            LanguageCode languageCode = LanguageCode.valueOf(ctx.getLanguage());			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                        String topicName = topic.getName();			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			                            ClientChannelInfo clientChannelInfo = new ClientChannelInfo(channel, clientId, languageCode, MQVersion.Version.V5_0_0.ordinal());			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			                    String consumerGroup = request.getGroup().getName();			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			                        ClientChannelInfo clientChannelInfo = new ClientChannelInfo(channel, clientId, languageCode, MQVersion.Version.V5_0_0.ordinal());			
",
,
			fromLine:"			273",
			toLine:"			274",
			content:"
			        String clientId = ctx.getClientID();
			        grpcClientSettingsManager.updateClientSettings(ctx, clientId, request.getSettings());			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
						
",
,
			fromLine:"			288",
			toLine:"			289",
			content:"
			        ClientChannelInfo clientChannelInfo = new ClientChannelInfo(channel, clientId, languageCode, parseClientVersion(ctx.getClientVersion()));
			        this.messagingProcessor.registerProducer(ctx, topicName, clientChannelInfo);			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			        if (TopicMessageType.TRANSACTION.equals(topicMessageType)) {			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
						
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
						
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        String threadStack = request.getThreadStackTrace();			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			        String nonce = request.getNonce();			
",
,
			fromLine:"			409",
			toLine:"			409",
			content:"
			        try {			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			                }			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			                    }			
",
,
			fromLine:"			480",
			toLine:"			481",
			content:"
			            if (event == ProducerGroupEvent.CLIENT_UNREGISTER) {
			                grpcChannelManager.removeChannel(clientChannelInfo.getClientId());			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/ClientManagerActivity.java:
		[
			fromLine:"			17",
			toLine:"			45",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.broker.client.ProducerGroupEvent;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.channel.RemotingChannel;
			import org.apache.rocketmq.proxy.remoting.channel.RemotingChannelManager;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.AttributeKeys;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientResponseHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ProducerData;
			
			import java.util.Set;
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    @Override			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            case RequestCode.HEART_BEAT:			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            case RequestCode.UNREGISTER_CLIENT:			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            case RequestCode.CHECK_CLIENT_CONFIG:			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        ProxyContext context) {			
",
,
			fromLine:"			84",
			toLine:"			86",
			content:"
			            ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
			                this.remotingChannelManager.createProducerChannel(context, ctx.channel(), data.getGroupName(), clientId),
			                clientId, request.getLanguage(),			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            setClientPropertiesToChannelAttr(clientChannelInfo);			
",
,
			fromLine:"			93",
			toLine:"			95",
			content:"
			            ClientChannelInfo clientChannelInfo = new ClientChannelInfo(
			                this.remotingChannelManager.createConsumerChannel(context, ctx.channel(), data.getGroupName(), clientId, data.getSubscriptionDataSet()),
			                clientId, request.getLanguage(),			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            setClientPropertiesToChannelAttr(clientChannelInfo);			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			        final UnregisterClientRequestHeader requestHeader =			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        if (producerGroup != null) {			
",
,
			fromLine:"			130",
			toLine:"			132",
			content:"
			                requestHeader.getClientID(),
			                request.getLanguage(),
			                request.getVersion());			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        if (consumerGroup != null) {			
",
,
			fromLine:"			140",
			toLine:"			142",
			content:"
			                requestHeader.getClientID(),
			                request.getLanguage(),
			                request.getVersion());			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
						
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			                    ClientChannelInfo clientChannelInfo = (ClientChannelInfo) args[0];			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			            if (event == ProducerGroupEvent.CLIENT_UNREGISTER) {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/client/ClientActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			77",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.client;
			
			import apache.rocketmq.v2.ClientType;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.FilterExpression;
			import apache.rocketmq.v2.FilterType;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.HeartbeatResponse;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.NotifyClientTerminationResponse;
			import apache.rocketmq.v2.Publishing;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Subscription;
			import apache.rocketmq.v2.SubscriptionEntry;
			import apache.rocketmq.v2.TelemetryCommand;
			import apache.rocketmq.v2.ThreadStackTrace;
			import apache.rocketmq.v2.VerifyMessageResult;
			import io.grpc.Status;
			import io.grpc.StatusRuntimeException;
			import io.grpc.stub.StreamObserver;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.grpc.v2.ContextStreamObserver;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcClientChannel;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayResult;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.CMResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Captor;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.junit.Assert.fail;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        super.before();			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        ArgumentCaptor<String> txProducerTopicArgumentCaptor = ArgumentCaptor.forClass(String.class);			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			        ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        assertEquals(LanguageCode.JAVA, clientChannelInfo.getLanguage());			
",
,
			fromLine:"			209",
			toLine:"			210",
			content:"
			        GrpcClientChannel channel = (GrpcClientChannel) clientChannelInfo.getChannel();
			        assertEquals(REMOTE_ADDR, channel.getRemoteAddress());			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
						
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			        ArgumentCaptor<ClientChannelInfo> channelInfoArgumentCaptor = ArgumentCaptor.forClass(ClientChannelInfo.class);			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			    public void testReportThreadStackTrace() {			
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
			    public void testReportVerifyMessageResult() {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
			    protected CompletableFuture<TelemetryCommand> sendClientTelemetry(ProxyContext ctx, Settings settings) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.producer;
			
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			            String handleString = request.getReceiptHandle();			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.consumer;
			
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationResponse;
			import apache.rocketmq.v2.Code;
			import com.google.protobuf.util.Durations;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.client.consumer.AckResult;
			import org.apache.rocketmq.client.consumer.AckStatus;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			            }			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/ReceiptHandleProcessor.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import io.netty.channel.Channel;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.state.StateEventListener;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.RenewEvent;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.receipt.DefaultReceiptHandleManager;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			            ReceiptHandle handle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			    public void addReceiptHandle(ProxyContext ctx, Channel channel, String group, String msgID, MessageReceiptHandle messageReceiptHandle) {			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			    public MessageReceiptHandle removeReceiptHandle(ProxyContext ctx, Channel channel, String group, String msgID, String receiptHandle) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/TransactionProcessor.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.proxy.service.transaction.EndTransactionRequestData;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			44",
			content:"
			        try {
			            EndTransactionRequestData headerData = serviceManager.getTransactionService().genEndTransactionRequestHeader(
			                ctx,
			                topic,
			                producerGroup,
			                buildCommitOrRollback(transactionStatus),
			                fromTransactionCheck,
			                messageId,			
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			            }
			            return this.serviceManager.getMessageService().endTransactionOneway(			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			                headerData.getRequestHeader(),			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			
			    public void addTransactionSubscription(ProxyContext ctx, String producerGroup, String topic) {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/processor/TransactionProcessorTest.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.proxy.service.transaction.EndTransactionRequestData;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyBoolean;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.reset;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    protected void testEndTransaction(int sysFlag, TransactionStatus transactionStatus) throws Throwable {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        ArgumentCaptor<Integer> commitOrRollbackCaptor = ArgumentCaptor.forClass(Integer.class);			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/PopMessageResultFilter.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.proxy.processor;
			
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/PopRequest.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import org.apache.rocketmq.common.constant.ConsumeInitMode;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			
			public class PopRequest implements MessageRequest {
			    private String topic;			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    private boolean lockedFirst = false;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public int getInitMode() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void setInitMode(int initMode) {			
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			        int result = 1;
			        result = prime * result + ((topic == null) ? 0 : topic.hashCode());			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			
			        if (topic == null) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                return false;			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			
			        if (consumerGroup == null) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                return false;			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public String toString() {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivity.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.transaction;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.EndTransactionResponse;
			import apache.rocketmq.v2.TransactionResolution;
			import apache.rocketmq.v2.TransactionSource;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.TransactionStatus;
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			            }			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/TransactionActivity.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.TransactionStatus;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @Override			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			
			        this.messagingProcessor.endTransaction(			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/transaction/EndTransactionActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.transaction;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.EndTransactionResponse;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.TransactionResolution;
			import apache.rocketmq.v2.TransactionSource;
			import java.util.Arrays;
			import java.util.Collection;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.processor.TransactionStatus;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.junit.runners.Parameterized;
			import org.mockito.ArgumentCaptor;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        super.before();			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        ArgumentCaptor<Boolean> fromTransactionCheckCaptor = ArgumentCaptor.forClass(Boolean.class);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivity.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import java.util.Map;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.validator.DefaultTopicMessageTypeValidator;
			import org.apache.rocketmq.proxy.processor.validator.TopicMessageTypeValidator;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @Override			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			            case RequestCode.SEND_BATCH_MESSAGE: {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			            case RequestCode.CONSUMER_SEND_MSG_BACK: {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			                if (!NamespaceUtil.isRetryTopic(topic) && !NamespaceUtil.isDLQTopic(topic)) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            if (TopicMessageType.TRANSACTION.equals(messageType)) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        }			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        ProxyContext context) throws Exception {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionService.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @Override			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        Message message) {			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @Override			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        Message message) {			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        TransactionData transactionData = new TransactionData(
			            brokerName,
			            topic,			
",
,
			fromLine:"			49",
			toLine:"			51",
			content:"
			
			        this.transactionDataManager.addTransactionData(
			            producerGroup,			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    @Override			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        boolean fromTransactionCheck, String msgId, String transactionId) {			
",
,
			fromLine:"			65",
			toLine:"			70",
			content:"
			        EndTransactionRequestHeader header = new EndTransactionRequestHeader();
			        header.setTopic(topic);
			        header.setProducerGroup(producerGroup);
			        header.setCommitOrRollback(commitOrRollback);
			        header.setFromTransactionCheck(fromTransactionCheck);
			        header.setMsgId(msgId);			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void onSendCheckTransactionStateFailed(ProxyContext context, String producerGroup, TransactionData transactionData) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/relay/AbstractProxyRelayService.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.proxy.service.relay;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.common.utils.ProxyUtils;
			import org.apache.rocketmq.proxy.service.transaction.TransactionData;
			import org.apache.rocketmq.proxy.service.transaction.TransactionService;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			        String group = messageExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP);			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/AbstractTransactionServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.util.List;
			import java.util.Random;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNull;
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        transactionService.onSendCheckTransactionStateFailed(ProxyContext.createForInner(this.getClass()), PRODUCER_GROUP, transactionData);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionService.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.proxy.common.ProxyContext;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/trace/TraceBean.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.client.trace;
			
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageType;
						
",
,
			fromLine:"			24",
			toLine:"			30",
			content:"
			    private static final String LOCAL_ADDRESS = UtilAll.ipToIPv4Str(UtilAll.getIP());
			    private String topic = "";
			    private String msgId = "";
			    private String offsetMsgId = "";
			    private String tags = "";
			    private String keys = "";
			    private String storeHost = LOCAL_ADDRESS;			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    private int retryTimes;			
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			    private LocalTransactionState transactionState;
			    private String transactionId;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getOffsetMsgId() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setOffsetMsgId(final String offsetMsgId) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public String getTags() {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void setTags(String tags) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public String getKeys() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setKeys(String keys) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public String getStoreHost() {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void setStoreHost(String storeHost) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public String getClientHost() {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public void setClientHost(String clientHost) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public int getBodyLength() {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    public void setBodyLength(int bodyLength) {			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			    public void setTransactionId(String transactionId) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    public boolean isFromTransactionCheck() {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			    public void setFromTransactionCheck(boolean fromTransactionCheck) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/EndTransactionRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void checkFields() throws RemotingCommandException {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public Long getTranStateTableOffset() {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public void setTranStateTableOffset(Long tranStateTableOffset) {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public Long getCommitLogOffset() {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public void setCommitLogOffset(Long commitLogOffset) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public Integer getCommitOrRollback() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public void setCommitOrRollback(Integer commitOrRollback) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public void setTransactionId(String transactionId) {			
",
,
			fromLine:"			138",
			toLine:"			141",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("producerGroup", producerGroup)
			            .add("tranStateTableOffset", tranStateTableOffset)
			            .add("commitLogOffset", commitLogOffset)			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			            .add("fromTransactionCheck", fromTransactionCheck)
			            .add("msgId", msgId)			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivity.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
						
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        String brokerName;
			        if (request.getCode() == RequestCode.SEND_MESSAGE_V2) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            }			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        } else {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			            }			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			        }
			        if (request.isOnewayRPC()) {			
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			        }
			        messagingProcessor.request(context, brokerName, request, timeoutMillis)			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            .exceptionally(t -> {			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			        try {
			            this.requestPipeline.execute(ctx, request, context);			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			            if (response != null) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        } catch (Throwable t) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
						
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			124",
			content:"
			        final RemotingCommand request, Throwable t) {
			        t = ExceptionUtils.getRealException(t);
			        if (t instanceof ProxyException) {
			            ProxyException e = (ProxyException) t;			
",
,
			fromLine:"			128",
			toLine:"			136",
			content:"
			                    e.getMessage()),
			                t);
			        } else if (t instanceof MQClientException) {
			            MQClientException e = (MQClientException) t;
			            writeResponse(ctx, context, request, RemotingCommand.createResponseCommand(e.getResponseCode(), e.getErrorMessage()), t);
			        } else if (t instanceof MQBrokerException) {
			            MQBrokerException e = (MQBrokerException) t;
			            writeResponse(ctx, context, request, RemotingCommand.createResponseCommand(e.getResponseCode(), e.getErrorMessage()), t);
			        } else if (t instanceof AclException) {			
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			        } else {
			            writeResponse(ctx, context, request,			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        final RemotingCommand request, RemotingCommand response) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        final RemotingCommand request, RemotingCommand response, Throwable t) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        }			
",
,
			fromLine:"			159",
			toLine:"			164",
			content:"
			
			        response.setOpaque(request.getOpaque());
			        response.markResponseType();
			        response.addExtField(MessageConst.PROPERTY_MSG_REGION, config.getRegionId());
			        response.addExtField(MessageConst.PROPERTY_TRACE_SWITCH, String.valueOf(config.isTraceOn()));
			        if (t != null) {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
						
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/AbstractRemotingActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			58",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.ChannelPromise;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.netty.AttributeKeys;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.never;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        RemotingCommand response = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "remark");			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        assertThat(remotingCommand).isNull();			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        request.addExtField("test", "test");			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        future.completeExceptionally(new ProxyException(ProxyExceptionCode.FORBIDDEN, remark));			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			        future.completeExceptionally(new MQClientException(remark, null));			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        future.completeExceptionally(new MQBrokerException(ResponseCode.FLUSH_DISK_TIMEOUT, remark));			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        future.completeExceptionally(new AclException(remark, ResponseCode.MESSAGE_ILLEGAL));			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			        future.completeExceptionally(new Exception(remark));			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        request.addExtField(AbstractRemotingActivity.BROKER_NAME_FIELD, brokerName);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/ConsumerManagerActivity.java:
		[
			fromLine:"			17",
			toLine:"			46",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.Connection;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;
			import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerConnectionListRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseBody;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupResponseHeader;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    @Override			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			            case RequestCode.GET_CONSUMER_LIST_BY_GROUP: {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			            case RequestCode.LOCK_BATCH_MQ: {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            case RequestCode.UNLOCK_BATCH_MQ: {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            case RequestCode.GET_EARLIEST_MSG_STORETIME: {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            case RequestCode.GET_CONSUMER_CONNECTION_LIST: {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			        RemotingCommand response = RemotingCommand.createResponseCommand(GetConsumerListByGroupResponseHeader.class);
			        GetConsumerListByGroupRequestHeader header = (GetConsumerListByGroupRequestHeader) request.decodeCommandCustomHeader(GetConsumerListByGroupRequestHeader.class);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			        RemotingCommand response = RemotingCommand.createResponseCommand(GetConsumerConnectionListRequestHeader.class);
			        GetConsumerConnectionListRequestHeader header = (GetConsumerConnectionListRequestHeader) request.decodeCommandCustomHeader(GetConsumerConnectionListRequestHeader.class);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        final RemotingCommand response = RemotingCommand.createResponseCommand(null);			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			        String brokerName = new ArrayList<>(mqSet).get(0).getBrokerName();
			        messagingProcessor.request(context, brokerName, request, Duration.ofSeconds(3).toMillis())			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			            .exceptionally(t -> {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			        final RemotingCommand response = RemotingCommand.createResponseCommand(null);			
",
,
			fromLine:"			164",
			toLine:"			165",
			content:"
			        String brokerName = new ArrayList<>(mqSet).get(0).getBrokerName();
			        messagingProcessor.request(context, brokerName, request, Duration.ofSeconds(3).toMillis())			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            .exceptionally(t -> {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/remoting/activity/SendMessageActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			50",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.channel.ChannelPromise;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannelHandlerContext;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    @Mock			
",
,
			fromLine:"			59",
			toLine:"			61",
			content:"
			
			    String topic = "topic";
			    String producerGroup = "group";			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    @Spy			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			    public void setup() {
			        sendMessageActivity = new SendMessageActivity(null, messagingProcessorMock);			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			    public void testSendMessage() throws Exception {
			        when(metadataServiceMock.getTopicMessageType(any(), eq(topic))).thenReturn(TopicMessageType.NORMAL);			
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			        SendMessageRequestHeader sendMessageRequestHeader = new SendMessageRequestHeader();
			        sendMessageRequestHeader.setTopic(topic);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        sendMessageRequestHeader.setSysFlag(0);			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        RemotingCommand expectResponse = RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, "success");			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            .thenReturn(CompletableFuture.completedFuture(expectResponse));			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        assertThat(response).isNull();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/processor/RequestBrokerProcessor.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.proxy.processor;
			
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.service.ServiceManager;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			31",
			toLine:"			32",
			content:"
			
			    CompletableFuture<RemotingCommand> request(ProxyContext ctx, String brokerName, RemotingCommand request, long timeoutMillis) {			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			
			    CompletableFuture<Void> requestOneway(ProxyContext ctx, String brokerName, RemotingCommand request, long timeoutMillis) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/SendMessageActivity.java:
		[
			fromLine:"			16",
			toLine:"			58",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.producer;
			
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Encoding;
			import apache.rocketmq.v2.MessageType;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.SendMessageResponse;
			import apache.rocketmq.v2.SendResultEntry;
			import com.google.common.collect.Maps;
			import com.google.common.hash.Hashing;
			import com.google.protobuf.ByteString;
			import com.google.protobuf.Timestamp;
			import com.google.protobuf.util.Durations;
			import com.google.protobuf.util.Timestamps;
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcProxyException;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcValidator;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.processor.QueueSelector;
			import org.apache.rocketmq.proxy.service.route.AddressableMessageQueue;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/receipt/ReceiptHandleManager.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.proxy.service.receipt;
			
			import io.netty.channel.Channel;
			import org.apache.rocketmq.proxy.common.MessageReceiptHandle;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			
			public interface ReceiptHandleManager {			
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/AckMessageActivity.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @Override			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        ProxyContext context) throws Exception {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/ChangeInvisibleTimeActivity.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @Override			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        ProxyContext context) throws Exception {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PopMessageActivity.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import org.apache.rocketmq.remoting.protocol.header.PopMessageRequestHeader;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @Override			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        long timeoutMillis = popMessageRequestHeader.getPollTime();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/PullMessageActivity.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.time.Duration;
			import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
			import org.apache.rocketmq.common.sysflag.PullSysFlag;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @Override			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        ProxyContext context) throws Exception {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        if (!PullSysFlag.hasSubscriptionFlag(sysFlag)) {			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			            requestHeader.setExpressionType(subscriptionData.getExpressionType());
			            request.writeCustomHeader(requestHeader);			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        long timeoutMillis = requestHeader.getSuspendTimeoutMillis() + Duration.ofSeconds(10).toMillis();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/activity/GetTopicRouteActivity.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.activity;
			
			import com.alibaba.fastjson.serializer.SerializerFeature;
			import com.google.common.net.HostAndPort;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @Override			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        final GetRouteInfoRequestHeader requestHeader =			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        addressList.add(new Address(Address.AddressScheme.IPv4, HostAndPort.fromParts(proxyConfig.getRemotingAccessAddr(), proxyConfig.getRemotingListenPort())));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        Boolean standardJsonOnly = requestHeader.getAcceptStandardJsonOnly();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannelManager.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.channel;
			
			import io.netty.channel.Channel;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			    public RemotingChannel createProducerChannel(ProxyContext ctx, Channel channel, String group, String clientId) {			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			
			    public RemotingChannel createConsumerChannel(ProxyContext ctx, Channel channel, String group, String clientId, Set<SubscriptionData> subscriptionData) {			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			
			    protected RemotingChannel createChannel(Channel channel, String group, String clientId, Set<SubscriptionData> subscriptionData) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            }			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        });			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			
			    public RemotingChannel removeProducerChannel(ProxyContext ctx, String group, Channel channel) {			
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			
			    public RemotingChannel removeConsumerChannel(ProxyContext ctx, String group, Channel channel) {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannelManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.channel;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelId;
			import java.util.HashSet;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
			import org.apache.rocketmq.proxy.service.channel.SimpleChannel;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.jetbrains.annotations.NotNull;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNotSame;
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @Mock			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @Mock			
",
,
			fromLine:"			46",
			toLine:"			47",
			content:"
			
			    private final String remoteAddress = "10.152.39.53:9768";			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void before() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        Channel producerChannel = createMockChannel();			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        assertNotNull(producerRemotingChannel);			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			        Channel consumerChannel = createMockChannel();
			        RemotingChannel consumerRemotingChannel = this.remotingChannelManager.createConsumerChannel(ctx, consumerChannel, group, clientId, new HashSet<>());			
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			            Channel producerChannel = createMockChannel();
			            RemotingChannel producerRemotingChannel = this.remotingChannelManager.createProducerChannel(ctx, producerChannel, group, clientId);			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			            Channel producerChannel = createMockChannel();
			            RemotingChannel producerRemotingChannel = this.remotingChannelManager.createProducerChannel(ctx, producerChannel, group, clientId);			
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			            Channel consumerChannel = createMockChannel();
			            RemotingChannel consumerRemotingChannel = this.remotingChannelManager.createConsumerChannel(ctx, consumerChannel, group, clientId, new HashSet<>());			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			            Channel consumerChannel = createMockChannel();
			            RemotingChannel consumerRemotingChannel = this.remotingChannelManager.createConsumerChannel(ctx, consumerChannel, group, clientId, new HashSet<>());			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        Channel consumerChannel = createMockChannel();			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			        Channel producerChannel = createMockChannel();			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        public MockChannel(String channelId) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/AuthenticationPipeline.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.pipeline;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.List;
			import org.apache.rocketmq.acl.AccessResource;
			import org.apache.rocketmq.acl.AccessValidator;
			import org.apache.rocketmq.auth.authentication.AuthenticationEvaluator;
			import org.apache.rocketmq.auth.authentication.context.AuthenticationContext;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authentication.factory.AuthenticationFactory;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    @Override			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			            for (AccessValidator accessValidator : accessValidatorList) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        try {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        } catch (Throwable ex) {			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			
			    protected AuthenticationContext newContext(ChannelHandlerContext ctx, RemotingCommand request, ProxyContext context) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/RequestPipeline.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.pipeline;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			        return (ctx, request, context) -> {
			            source.execute(ctx, request, context);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/AuthorizationPipeline.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.pipeline;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.List;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.auth.authorization.AuthorizationEvaluator;
			import org.apache.rocketmq.auth.authorization.context.AuthorizationContext;
			import org.apache.rocketmq.auth.authorization.exception.AuthorizationException;
			import org.apache.rocketmq.auth.authorization.factory.AuthorizationFactory;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    @Override			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        try {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        }  catch (Throwable ex) {			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			    protected List<AuthorizationContext> newContexts(RemotingCommand request, ChannelHandlerContext ctx, ProxyContext context) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/pipeline/ContextInitPipeline.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.proxy.remoting.pipeline;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.netty.AttributeKeys;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			    @Override
			    public void execute(ChannelHandlerContext ctx, RemotingCommand request, ProxyContext context) throws Exception {			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        Integer version = RemotingHelper.getAttributeValue(AttributeKeys.VERSION_KEY, channel);			
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			            .setChannel(channel)
			            .setLocalAddress(NetworkUtil.socketAddress2String(ctx.channel().localAddress()))			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        if (languageCode != null) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        if (clientId != null) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        if (version != null) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/admin/AdminService.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.proxy.service.admin;
			
			import java.util.List;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.message;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.junit.Assert.fail;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        try {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			                    .reviveQueueId(1)			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/sysmessage/HeartbeatSyncerData.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.proxy.service.sysmessage;
			
			import com.google.common.base.MoreObjects;
			import java.util.Set;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    private HeartbeatType heartbeatType;			
",
,
			fromLine:"			31",
			toLine:"			32",
			content:"
			    private LanguageCode language;
			    private int version;			
",
,
			fromLine:"			35",
			toLine:"			37",
			content:"
			    private String group;
			    private ConsumeType consumeType;
			    private MessageModel messageModel;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        this.heartbeatType = heartbeatType;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        this.language = language;			
",
,
			fromLine:"			54",
			toLine:"			56",
			content:"
			        this.group = group;
			        this.consumeType = consumeType;
			        this.messageModel = messageModel;			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public int getVersion() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setVersion(int version) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public long getLastUpdateTimestamp() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public void setLastUpdateTimestamp(long lastUpdateTimestamp) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public ConsumeType getConsumeType() {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void setConsumeType(ConsumeType consumeType) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public MessageModel getMessageModel() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void setMessageModel(MessageModel messageModel) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public ConsumeFromWhere getConsumeFromWhere() {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			            .add("heartbeatType", heartbeatType)			
",
,
			fromLine:"			164",
			toLine:"			165",
			content:"
			            .add("language", language)
			            .add("version", version)			
",
,
			fromLine:"			168",
			toLine:"			170",
			content:"
			            .add("group", group)
			            .add("consumeType", consumeType)
			            .add("messageModel", messageModel)			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManager.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.util.Iterator;
			import java.util.Map;
			import java.util.NavigableSet;
			import java.util.NoSuchElementException;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentSkipListSet;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
						
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			
			    public void addTransactionData(String producerGroup, String transactionId, TransactionData transactionData) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            }			
",
,
			fromLine:"			79",
			toLine:"			81",
			content:"
			
			    public void removeTransactionData(String producerGroup, String transactionId, TransactionData transactionData) {
			        this.transactionIdDataMap.computeIfPresent(buildKey(producerGroup, transactionId), (key, dataSet) -> {			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/transaction/TransactionDataManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.time.Duration;
			import java.util.Random;
			import org.apache.commons.lang3.time.StopWatch;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.junit.After;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertSame;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			        TransactionData transactionData2 = createTransactionData(transactionData1.getTransactionId());
			        this.transactionDataManager.addTransactionData(PRODUCER_GROUP, transactionData1.getTransactionId(), transactionData1);			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        assertEquals(1, this.transactionDataManager.transactionIdDataMap.size());			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			
			        this.transactionDataManager.addTransactionData(PRODUCER_GROUP, txId, transactionData1);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        String txId = MessageClientIDSetter.createUniqID();			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            createTransactionData(txId, System.currentTimeMillis(), Duration.ofMillis(100).toMillis()));			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        String txId = MessageClientIDSetter.createUniqID();			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			            createTransactionData(txId, System.currentTimeMillis(), Duration.ofMillis(100).toMillis()));			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/LocalTransactionService.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.proxy.service.transaction;
			
			import java.util.List;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.proxy.common.ProxyContext;
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @Override			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @Override			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/transaction/TransactionData.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.proxy.service.transaction;
			
			import com.google.common.base.MoreObjects;
			import com.google.common.base.Objects;
			import com.google.common.collect.ComparisonChain;
			
			public class TransactionData implements Comparable<TransactionData> {
			    private final String brokerName;
			    private final String topic;
			    private final long tranStateTableOffset;
			    private final long commitLogOffset;			
",
,
			fromLine:"			34",
			toLine:"			38",
			content:"
			        long checkTimestamp, long expireMs) {
			        this.brokerName = brokerName;
			        this.topic = topic;
			        this.tranStateTableOffset = tranStateTableOffset;
			        this.commitLogOffset = commitLogOffset;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public long getTranStateTableOffset() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public long getCommitLogOffset() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			84",
			toLine:"			86",
			content:"
			        TransactionData data = (TransactionData) o;
			        return tranStateTableOffset == data.tranStateTableOffset && commitLogOffset == data.commitLogOffset &&
			            getExpireTime() == data.getExpireTime() && Objects.equal(brokerName, data.brokerName) &&			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			98",
			toLine:"			101",
			content:"
			            .compare(getExpireTime(), o.getExpireTime())
			            .compare(brokerName, o.brokerName)
			            .compare(commitLogOffset, o.commitLogOffset)
			            .compare(tranStateTableOffset, o.tranStateTableOffset)			
",
,
			fromLine:"			108",
			toLine:"			111",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("brokerName", brokerName)
			            .add("tranStateTableOffset", tranStateTableOffset)
			            .add("commitLogOffset", commitLogOffset)			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/mqtrace/SendMessageContext.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.broker.mqtrace;
			
			import java.util.Properties;
			
			import org.apache.rocketmq.common.message.MessageType;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    /** namespace */			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    /** producer group without namespace. */			
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			    /** topic without namespace. */
			    private String topic;			
",
,
			fromLine:"			32",
			toLine:"			36",
			content:"
			    private String originMsgId;
			    private Integer queueId;
			    private Long queueOffset;
			    private String brokerAddr;
			    private String bornHost;			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    private String msgProps;			
",
,
			fromLine:"			53",
			toLine:"			55",
			content:"
			     */
			    private String accountAuthType;
			    private String accountOwnerParent;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			     */			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setNamespace(String namespace) {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    public Long getQueueOffset() {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			    public void setQueueOffset(Long queueOffset) {			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			    public String getBornHost() {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			    public void setBornHost(String bornHost) {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			    public int getBodyLength() {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			    public void setBodyLength(int bodyLength) {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			    public Object getMqTraceContext() {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			    public void setMqTraceContext(Object mqTraceContext) {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			    public String getCommercialOwner() {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			    public void setCommercialOwner(final String commercialOwner) {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			    public String getAccountAuthType() {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			    public void setAccountAuthType(String accountAuthType) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			    public String getAccountOwnerParent() {			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			    public void setAccountOwnerParent(String accountOwnerParent) {			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			    public String getAccountOwnerSelf() {			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			    public void setAccountOwnerSelf(String accountOwnerSelf) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CheckTransactionStateRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.RpcRequestHeader;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			39",
			toLine:"			42",
			content:"
			    @CFNotNull
			    private Long commitLogOffset;
			    private String msgId;
			    private String transactionId;			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public Long getTranStateTableOffset() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setTranStateTableOffset(Long tranStateTableOffset) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public Long getCommitLogOffset() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setCommitLogOffset(Long commitLogOffset) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setTransactionId(String transactionId) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public String getOffsetMsgId() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setOffsetMsgId(String offsetMsgId) {			
",
,
			fromLine:"			99",
			toLine:"			103",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("tranStateTableOffset", tranStateTableOffset)
			            .add("commitLogOffset", commitLogOffset)
			            .add("msgId", msgId)
			            .add("transactionId", transactionId)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/RemotingClient.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.remoting;
			
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutorService;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        try {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/RemotingServer.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting;
			
			import io.netty.channel.Channel;
			import java.util.concurrent.ExecutorService;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
						
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/RemotingServerTest.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.remoting;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.Executors;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.junit.Assert.assertNotNull;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        RemotingServer remotingServer = new NettyRemotingServer(config);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(0, requestHeader);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        request.setRemark("messi");			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        request.setRemark("messi");			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/SubRemotingServerTest.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.remoting;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Fail.failBecauseExceptionWasNotThrown;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        RemotingServer subServer = parentServer.newRemotingServer(SUB_SERVER_PORT);			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        RemotingCommand request = RemotingCommand.createRequestCommand(1, requestHeader);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        // Issue request to SubRemotingServer			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        request.setCode(0);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        try {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/rpc/RpcClientImpl.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.remoting.rpc;
			
			import io.netty.util.concurrent.ImmediateEventExecutor;
			import io.netty.util.concurrent.Promise;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.Future;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RemotingClient;
			import org.apache.rocketmq.remoting.netty.ResponseFuture;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.header.GetEarliestMsgStoretimeResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.QueryConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.SearchOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetResponseHeader;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			                case RequestCode.PULL_MESSAGE:			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			                case RequestCode.GET_MIN_OFFSET:			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			                case RequestCode.GET_MAX_OFFSET:			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			                case RequestCode.SEARCH_OFFSET_BY_TIMESTAMP:			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			                case RequestCode.GET_EARLIEST_MSG_STORETIME:			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			                case RequestCode.QUERY_CONSUMER_OFFSET:			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                case RequestCode.UPDATE_CONSUMER_OFFSET:			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                case RequestCode.GET_TOPIC_STATS_INFO:			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			                case RequestCode.GET_TOPIC_CONFIG:			
",
,
			fromLine:"			154",
			toLine:"			155",
			content:"
			
			    public Promise<RpcResponse> handlePullMessage(final String addr, RpcRequest rpcRequest, long timeoutMillis)  throws Exception {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			            public void operationFail(Throwable throwable) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
						
",
,
			fromLine:"			203",
			toLine:"			204",
			content:"
			
			        RemotingCommand requestCommand = RpcClientUtils.createCommandForRpcRequest(rpcRequest);			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
						
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			
			        RemotingCommand requestCommand = RpcClientUtils.createCommandForRpcRequest(rpcRequest);			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			250",
			content:"
			
			        RemotingCommand requestCommand = RpcClientUtils.createCommandForRpcRequest(rpcRequest);			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
						
",
,
			fromLine:"			268",
			toLine:"			269",
			content:"
			        final Promise<RpcResponse> rpcResponsePromise = createResponseFuture();
			        RemotingCommand requestCommand = RpcClientUtils.createCommandForRpcRequest(rpcRequest);			
",
,
			fromLine:"			283",
			toLine:"			283",
			content:"
						
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
						
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
						
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
						
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
						
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
						
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
						
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
						
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java:
		[
			fromLine:"			16",
			toLine:"			59",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import io.netty.bootstrap.Bootstrap;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.local.LocalChannel;
			
			import java.lang.reflect.Field;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.Semaphore;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.assertThatThrownBy;
			import static org.assertj.core.api.AssertionsForClassTypes.catchThrowable;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.never;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.times;
			import static org.mockito.Mockito.verify;
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        future0.complete(responseFuture.getResponseCommand());			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        future0.completeExceptionally(new RemotingSendRequestException(null));			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        future0.completeExceptionally(new RemotingTimeoutException(""));			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        future0.completeExceptionally(new RemotingException(""));			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        try {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        };			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			        };			
",
,
			fromLine:"			196",
			toLine:"			197",
			content:"
			
			        doReturn(future).when(remotingClient).invoke0(any(Channel.class), any(RemotingCommand.class), anyLong());			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
						
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        InvokeCallback callback = mock(InvokeCallback.class);			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
						
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			        InvokeCallback callback = mock(InvokeCallback.class);			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
						
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
						
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
						
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
						
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/ProxyProtocolTest.java:
		[
			fromLine:"			17",
			toLine:"			47",
			content:"
			
			package org.apache.rocketmq.remoting;
			
			import io.netty.buffer.ByteBuf;
			import io.netty.buffer.Unpooled;
			import io.netty.channel.Channel;
			import io.netty.handler.codec.haproxy.HAProxyCommand;
			import io.netty.handler.codec.haproxy.HAProxyMessage;
			import io.netty.handler.codec.haproxy.HAProxyMessageEncoder;
			import io.netty.handler.codec.haproxy.HAProxyProtocolVersion;
			import io.netty.handler.codec.haproxy.HAProxyProxiedProtocol;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import java.io.IOException;
			import java.lang.reflect.Method;
			import java.net.Socket;
			import java.time.Duration;
			import java.util.concurrent.TimeUnit;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertNotNull;
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    private void requestThenAssertResponse(RemotingClient remotingClient) throws Exception {			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/TlsTest.java:
		[
			fromLine:"			17",
			toLine:"			80",
			content:"
			
			package org.apache.rocketmq.remoting;
			
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.remoting.common.TlsMode;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyRemotingServer;
			import org.apache.rocketmq.remoting.netty.TlsHelper;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Rule;
			import org.junit.Test;
			import org.junit.rules.TemporaryFolder;
			import org.junit.rules.TestName;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import java.io.BufferedInputStream;
			import java.io.BufferedOutputStream;
			import java.io.BufferedWriter;
			import java.io.File;
			import java.io.FileOutputStream;
			import java.io.FileWriter;
			import java.io.IOException;
			import java.io.InputStream;
			import java.io.PrintWriter;
			import java.net.Socket;
			import java.time.Duration;
			import java.util.UUID;
			import java.util.concurrent.TimeUnit;
			
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_AUTHSERVER;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_CERTPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_KEYPASSWORD;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_KEYPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_CLIENT_TRUSTCERTPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_AUTHCLIENT;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_CERTPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_KEYPASSWORD;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_KEYPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_NEED_CLIENT_AUTH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_SERVER_TRUSTCERTPATH;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsClientAuthServer;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsClientCertPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsClientKeyPassword;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsClientKeyPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsClientTrustCertPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsConfigFile;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsMode;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerAuthClient;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerCertPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerKeyPassword;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerKeyPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerNeedClientAuth;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsServerTrustCertPath;
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.tlsTestModeEnable;
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertNotNull;
						
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			        try {			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			        try {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        try {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        try {			
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
			    private void requestThenAssertResponse(RemotingClient remotingClient) throws Exception {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java:
		[
			fromLine:"			16",
			toLine:"			75",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.ChannelHandlerContext;
			import io.netty.handler.ssl.SslContext;
			import io.netty.handler.ssl.SslHandler;
			import io.netty.util.concurrent.Future;
			import io.opentelemetry.api.common.AttributesBuilder;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.Iterator;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map.Entry;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ExecutionException;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.RejectedExecutionException;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.TimeoutException;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.function.Consumer;
			import javax.annotation.Nullable;
			import org.apache.rocketmq.common.AbortProcessException;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
			import org.apache.rocketmq.remoting.metrics.RemotingMetricsManager;
			import org.apache.rocketmq.remoting.pipeline.RequestPipeline;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_IS_LONG_POLLING;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_REQUEST_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESPONSE_CODE;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.LABEL_RESULT;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.RESULT_ONEWAY;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.RESULT_PROCESS_REQUEST_FAILED;
			import static org.apache.rocketmq.remoting.metrics.RemotingMetricsConstant.RESULT_WRITE_CHANNEL_FAILED;
						
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			
			    public static void writeResponse(Channel channel, RemotingCommand request, @Nullable RemotingCommand response) {			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
						
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			        Consumer<Future<?>> callback) {			
",
,
			fromLine:"			217",
			toLine:"			220",
			content:"
			        AttributesBuilder attributesBuilder = RemotingMetricsManager.newAttributesBuilder()
			            .put(LABEL_IS_LONG_POLLING, request.isSuspended())
			            .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))
			            .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(response.getCode()));			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			            attributesBuilder.put(LABEL_RESULT, RESULT_ONEWAY);			
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			        }
			        response.setOpaque(request.getOpaque());			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        try {			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			                    log.debug("Response[request code: {}, response code: {}, opaque: {}] is written to channel{}",			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			                    log.error("Failed to write response[request code: {}, response code: {}, opaque: {}] to channel{}",			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			                attributesBuilder.put(LABEL_RESULT, RemotingMetricsManager.getWriteAndFlushResult(future));			
",
,
			fromLine:"			244",
			toLine:"			245",
			content:"
			            log.error("process request over, but response failed", e);
			            log.error(request.toString());			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			            attributesBuilder.put(LABEL_RESULT, RESULT_WRITE_CHANNEL_FAILED);			
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			            response.setOpaque(opaque);			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			                response.setOpaque(opaque);			
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
			            response.setOpaque(opaque);			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			            response.setOpaque(opaque);			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
						
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			                response.setOpaque(opaque);			
",
,
			fromLine:"			367",
			toLine:"			367",
			content:"
			                    response.setOpaque(opaque);			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
						
",
,
			fromLine:"			498",
			toLine:"			499",
			content:"
			        try {
			            return invokeImpl(channel, request, timeoutMillis).thenApply(ResponseFuture::getResponseCommand)			
",
,
			fromLine:"			501",
			toLine:"			501",
			content:"
			        } catch (ExecutionException e) {			
",
,
			fromLine:"			503",
			toLine:"			503",
			content:"
			        } catch (TimeoutException e) {			
",
,
			fromLine:"			507",
			toLine:"			507",
			content:"
						
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
			        final long timeoutMillis) {			
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
						
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			        long beginStartTime = System.currentTimeMillis();			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			        try {			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
			            long costTime = System.currentTimeMillis() - beginStartTime;			
",
,
			fromLine:"			535",
			toLine:"			535",
			content:"
			            AtomicReference<ResponseFuture> responseFutureReference = new AtomicReference<>();			
",
,
			fromLine:"			555",
			toLine:"			555",
			content:"
			            try {			
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
			                    requestFail(opaque);			
",
,
			fromLine:"			567",
			toLine:"			568",
			content:"
			                responseFuture.release();
			                log.warn("send a request command to channel <" + RemotingHelper.parseChannelRemoteAddr(channel) + "> Exception", e);			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			        } else {			
",
,
			fromLine:"			577",
			toLine:"			577",
			content:"
			                    String.format("invokeAsyncImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d",			
",
,
			fromLine:"			588",
			toLine:"			588",
			content:"
						
",
,
			fromLine:"			590",
			toLine:"			590",
			content:"
			        final InvokeCallback invokeCallback) {			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			                if (t == null) {			
",
,
			fromLine:"			595",
			toLine:"			595",
			content:"
			                } else {			
",
,
			fromLine:"			597",
			toLine:"			597",
			content:"
			                    responseFuture.setCause(t);			
",
,
			fromLine:"			600",
			toLine:"			600",
			content:"
			            })			
",
,
			fromLine:"			602",
			toLine:"			602",
			content:"
			            .exceptionally(t -> {			
",
,
			fromLine:"			638",
			toLine:"			638",
			content:"
						
",
,
			fromLine:"			640",
			toLine:"			641",
			content:"
			        throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException, RemotingSendRequestException {
			        request.markOnewayRPC();			
",
,
			fromLine:"			645",
			toLine:"			645",
			content:"
			            try {			
",
,
			fromLine:"			648",
			toLine:"			648",
			content:"
			                    if (!f.isSuccess()) {			
",
,
			fromLine:"			653",
			toLine:"			654",
			content:"
			                once.release();
			                log.warn("write send a request command to channel <" + channel.remoteAddress() + "> failed.");			
",
,
			fromLine:"			657",
			toLine:"			657",
			content:"
			        } else {			
",
,
			fromLine:"			662",
			toLine:"			662",
			content:"
			                    "invokeOnewayImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreOnewayValue: %d",			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/ResponseFuture.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import io.netty.channel.Channel;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			import org.apache.rocketmq.remoting.InvokeCallback;
			import org.apache.rocketmq.remoting.common.SemaphoreReleaseOnlyOnce;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			
			public class ResponseFuture {			
",
,
			fromLine:"			32",
			toLine:"			36",
			content:"
			    private final int opaque;
			    private final RemotingCommand request;
			    private final long timeoutMillis;
			    private final InvokeCallback invokeCallback;
			    private final long beginTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    private volatile boolean sendRequestOK = true;			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			                          SemaphoreReleaseOnlyOnce once) {			
",
,
			fromLine:"			55",
			toLine:"			57",
			content:"
			        this.opaque = opaque;
			        this.request = request;
			        this.timeoutMillis = timeoutMillis;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void executeInvokeCallback() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			                if (response != null) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			                    if (!isSendRequestOK()) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			                    } else if (isTimeout()) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                    } else {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			                }			
",
,
			fromLine:"			93",
			toLine:"			94",
			content:"
			    public boolean isTimeout() {
			        long diff = System.currentTimeMillis() - this.beginTimestamp;			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public RemotingCommand waitResponse(final long timeoutMillis) throws InterruptedException {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        this.responseCommand = responseCommand;			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public long getBeginTimestamp() {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public long getTimeoutMillis() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public InvokeCallback getInvokeCallback() {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public Throwable getCause() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public void setCause(Throwable cause) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    public RemotingCommand getRequestCommand() {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			    public Channel getChannel() {			
",
,
			fromLine:"			162",
			toLine:"			164",
			content:"
			        return "ResponseFuture [responseCommand=" + responseCommand + ", sendRequestOK=" + sendRequestOK
			            + ", cause=" + cause + ", opaque=" + opaque + ", timeoutMillis=" + timeoutMillis
			            + ", invokeCallback=" + invokeCallback + ", beginTimestamp=" + beginTimestamp			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/RemotingCommand.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import com.google.common.base.Stopwatch;
			import io.netty.buffer.ByteBuf;
			import io.netty.buffer.Unpooled;
			import java.lang.annotation.Annotation;
			import java.lang.reflect.Field;
			import java.lang.reflect.InvocationTargetException;
			import java.lang.reflect.Modifier;
			import java.nio.Buffer;
			import java.nio.ByteBuffer;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicInteger;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    public static RemotingCommand createResponseCommand(Class<? extends CommandCustomHeader> classHeader) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			140",
			content:"
			        Class<? extends CommandCustomHeader> classHeader) {
			        final RemotingCommand response = RemotingCommand.createResponseCommand(classHeader);
			        response.setCode(code);			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public static RemotingCommand buildErrorResponse(int code, String remark) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			152",
			toLine:"			153",
			content:"
			        cmd.markResponseType();
			        cmd.setCode(code);			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			            try {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			    public static RemotingCommand createResponseCommand(int code, String remark) {			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/protocol/RemotingCommandTest.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol;
			
			import java.lang.reflect.Field;
			import java.lang.reflect.Method;
			import java.nio.ByteBuffer;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.junit.Assert;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        String remark = "Sample remark";			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        String remark = "Sample remark";			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/AclInfo.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
			
			import java.util.Collections;
			import java.util.List;
			import java.util.stream.Collectors;
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			        AclInfo aclInfo = new AclInfo();
			        aclInfo.setSubject(subject);			
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			            PolicyInfo policyInfo = new PolicyInfo();
			            List<PolicyEntryInfo> entries = resources.stream()			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public static class PolicyEntryInfo {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			86",
			content:"
			            PolicyEntryInfo policyEntryInfo = new PolicyEntryInfo();
			            policyEntryInfo.setResource(resource);
			            policyEntryInfo.setActions(actions);
			            policyEntryInfo.setSourceIps(sourceIps);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        public String getResource() {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        public void setResource(String resource) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        public List<String> getActions() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        public void setActions(List<String> actions) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        public List<String> getSourceIps() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        public void setSourceIps(List<String> sourceIps) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        public String getDecision() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        public void setDecision(String decision) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/auth/UpdateAclSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.auth;
			
			import java.util.Arrays;
			import java.util.List;
			import java.util.Set;
			import java.util.stream.Collectors;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			                for (String addr : brokerAddrSet) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/auth/CreateAclSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.auth;
			
			import java.util.Arrays;
			import java.util.List;
			import java.util.Set;
			import java.util.stream.Collectors;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			                for (String addr : brokerAddrSet) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/UserInfo.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.body;
						
",
,
			fromLine:"			20",
			toLine:"			20",
			content:"
						
",
,
			fromLine:"			22",
			toLine:"			22",
			content:"
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			32",
			content:"
			        UserInfo userInfo = new UserInfo();
			        userInfo.setUsername(username);
			        userInfo.setPassword(password);			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			41",
			content:"
			        UserInfo userInfo = new UserInfo();
			        userInfo.setUsername(username);
			        userInfo.setPassword(password);
			        userInfo.setUserType(userType);			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getUsername() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setUsername(String username) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String getPassword() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setPassword(String password) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public String getUserType() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setUserType(String userType) {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public String getUserStatus() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setUserStatus(String userStatus) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/auth/CreateUserSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.tools.command.auth;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			                for (String addr : brokerAddrSet) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/auth/UpdateUserSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.tools.command.auth;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                for (String addr : brokerAddrSet) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/filter/FilterAPI.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.filter;
			
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			
			import java.util.Arrays;
						
",
,
			fromLine:"			48",
			toLine:"			51",
			content:"
			
			    public static SubscriptionData buildSubscriptionData(String topic, String subString, String expressionType) throws Exception {
			        final SubscriptionData subscriptionData = buildSubscriptionData(topic, subString);
			        if (StringUtils.isNotBlank(expressionType)) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			        final String type) throws Exception {
			        if (ExpressionType.TAG.equals(type) || type == null) {			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        if (StringUtils.isEmpty(subString)) {			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			        SubscriptionData subscriptionData = new SubscriptionData();
			        subscriptionData.setTopic(topic);
			        subscriptionData.setSubString(subString);			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/protocol/filter/FilterAPITest.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.filter;
			
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.common.filter.ExpressionType;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			
			public class FilterAPITest {
			    private String topic = "FooBar";
			    private String group = "FooBarGroup";			
",
,
			fromLine:"			35",
			toLine:"			38",
			content:"
			        SubscriptionData subscriptionData =
			                FilterAPI.buildSubscriptionData(topic, subString);
			        assertThat(subscriptionData.getTopic()).isEqualTo(topic);
			        assertThat(subscriptionData.getSubString()).isEqualTo(subString);			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        try {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        try {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void testBuildSQLWithNullSubString() throws Exception {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/heartbeat/SubscriptionData.java:
		[
			fromLine:"			20",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.heartbeat;
			
			import com.alibaba.fastjson.annotation.JSONField;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.common.filter.ExpressionType;
						
",
,
			fromLine:"			30",
			toLine:"			31",
			content:"
			    private boolean classFilterMode = false;
			    private String topic;			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    private long subVersion = System.currentTimeMillis();			
",
,
			fromLine:"			46",
			toLine:"			47",
			content:"
			        super();
			        this.topic = topic;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public String getSubString() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setSubString(String subString) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public String getExpressionType() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setExpressionType(String expressionType) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        result = prime * result + ((codeSet == null) ? 0 : codeSet.hashCode());			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			        result = prime * result + ((tagsSet == null) ? 0 : tagsSet.hashCode());
			        result = prime * result + ((topic == null) ? 0 : topic.hashCode());			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			            return false;
			        if (subString == null) {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			                return false;			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			            return false;
			        if (topic == null) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			                return false;			
",
,
			fromLine:"			160",
			toLine:"			161",
			content:"
			            return false;
			        if (expressionType == null) {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			                return false;			
",
,
			fromLine:"			170",
			toLine:"			172",
			content:"
			    public String toString() {
			        return "SubscriptionData [classFilterMode=" + classFilterMode + ", topic=" + topic + ", subString="
			            + subString + ", tagsSet=" + tagsSet + ", codeSet=" + codeSet + ", subVersion=" + subVersion			
",
,
			fromLine:"			177",
			toLine:"			178",
			content:"
			    public int compareTo(SubscriptionData other) {
			        String thisValue = this.topic + "@" + this.subString;			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/common/utils/FilterUtilTest.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.proxy.common.utils;
			
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        String expressionType = null;			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        expressionType = "SQL92";			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/protocol/header/ExtraInfoUtilTest.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import java.util.Map;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        String queueIdKey = ExtraInfoUtil.getStartOffsetInfoMapKey(topic, queueId);			
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			        StringBuilder sb = new StringBuilder();
			        ExtraInfoUtil.buildQueueIdOrderCountInfo(sb, topic, queueId, queueIdCount);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/statictopic/TopicQueueMappingUtils.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.statictopic;
			
			import java.io.File;
			import java.util.AbstractMap;
			import java.util.ArrayDeque;
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Queue;
			import java.util.Set;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
						
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			    public static class MappingAllocator {
			        Map<String, Integer> brokerNumMap = new HashMap<>();			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			        //used for remapping			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			        private MappingAllocator(Map<Integer, String> idToBroker, Map<String, Integer> brokerNumMap, Map<String, Integer> brokerNumMapBeforeRemapping) {
			            this.idToBroker.putAll(idToBroker);
			            this.brokerNumMap.putAll(brokerNumMap);			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            int minNum = Integer.MAX_VALUE;			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			            //reduce the remapping
			            if (brokerNumMapBeforeRemapping != null			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			                    int i1 = 0, i2 = 0;
			                    if (brokerNumMapBeforeRemapping.containsKey(o1)) {			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			                    }
			                    if (brokerNumMapBeforeRemapping.containsKey(o2)) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        public Map<String, Integer> getBrokerNumMap() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        public void upToNum(int maxQueueNum) {			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			                String nextBroker = nextBroker();
			                if (brokerNumMap.containsKey(nextBroker)) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                } else {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                }			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			        public Map<Integer, String> getIdToBroker() {			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			
			    public static MappingAllocator buildMappingAllocator(Map<Integer, String> idToBroker, Map<String, Integer> brokerNumMap, Map<String, Integer> brokerNumMapBeforeRemapping) {			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			                    throw new RuntimeException(String.format("Topic %s global queue id %d and %d shared the same physical queue %s",			
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			
			    public static TopicRemappingDetailWrapper createTopicConfigMapping(String topic, int queueNum, Set<String> targetBrokers, Map<String, TopicConfigAndQueueMapping> brokerConfigMap) {			
",
,
			fromLine:"			435",
			toLine:"			438",
			content:"
			        Map<Integer, TopicQueueMappingOne> globalIdMap = new HashMap<>();
			        Map.Entry<Long, Integer> maxEpochAndNum = new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), queueNum);
			        if (!brokerConfigMap.isEmpty()) {
			            maxEpochAndNum = TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, brokerConfigMap);			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			            checkIfReusePhysicalQueue(globalIdMap.values());			
",
,
			fromLine:"			442",
			toLine:"			443",
			content:"
			        }
			        if (queueNum < globalIdMap.size()) {			
",
,
			fromLine:"			446",
			toLine:"			446",
			content:"
			        //check the queue number			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			        Map<String, Integer> brokerNumMap = new HashMap<>();			
",
,
			fromLine:"			465",
			toLine:"			466",
			content:"
			        }
			        TopicQueueMappingUtils.MappingAllocator allocator = TopicQueueMappingUtils.buildMappingAllocator(oldIdToBroker, brokerNumMap, null);			
",
,
			fromLine:"			479",
			toLine:"			480",
			content:"
			            TopicConfigAndQueueMapping configMapping;
			            if (!brokerConfigMap.containsKey(broker)) {			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			                configMapping.setReadQueueNums(1);			
",
,
			fromLine:"			485",
			toLine:"			485",
			content:"
			            } else {			
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
			        // set the topic config			
",
,
			fromLine:"			497",
			toLine:"			497",
			content:"
			            configMapping.getMappingDetail().setEpoch(newEpoch);			
",
,
			fromLine:"			501",
			toLine:"			502",
			content:"
			        {
			            TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, brokerConfigMap);			
",
,
			fromLine:"			504",
			toLine:"			504",
			content:"
			            checkIfReusePhysicalQueue(globalIdMap.values());			
",
,
			fromLine:"			506",
			toLine:"			506",
			content:"
			        }			
",
,
			fromLine:"			510",
			toLine:"			513",
			content:"
			
			    public static TopicRemappingDetailWrapper remappingStaticTopic(String topic, Map<String, TopicConfigAndQueueMapping> brokerConfigMap, Set<String> targetBrokers) {
			        Map.Entry<Long, Integer> maxEpochAndNum = TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, brokerConfigMap);
			        Map<Integer, TopicQueueMappingOne> globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(getMappingDetailFromConfig(brokerConfigMap.values()), false, true);			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			        Map<String, Integer> brokerNumMap = new HashMap<>();			
",
,
			fromLine:"			532",
			toLine:"			532",
			content:"
						
",
,
			fromLine:"			584",
			toLine:"			585",
			content:"
			            brokersToMapOut.add(mapOutBroker);
			            TopicConfigAndQueueMapping mapInConfig = brokerConfigMap.get(mapInBroker);			
",
,
			fromLine:"			588",
			toLine:"			589",
			content:"
			            if (mapInConfig == null) {
			                mapInConfig = new TopicConfigAndQueueMapping(new TopicConfig(topic, 0, 0), new TopicQueueMappingDetail(topic, maxNum, mapInBroker, newEpoch));			
",
,
			fromLine:"			604",
			toLine:"			604",
			content:"
						
",
,
			fromLine:"			612",
			toLine:"			614",
			content:"
			        {
			            TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, brokerConfigMap);
			            globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(getMappingDetailFromConfig(brokerConfigMap.values()), false, true);			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			            TopicQueueMappingUtils.checkIfReusePhysicalQueue(globalIdMap.values());			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			        }			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.broker.topic;
			
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.UUID;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicRemappingDetailWrapper;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			                int queueNum = 10;			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/protocol/statictopic/TopicQueueMappingUtilsTest.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.statictopic;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Random;
			import java.util.Set;
			import org.apache.rocketmq.common.TopicConfig;
			import org.junit.Assert;
			import org.junit.Test;
						
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			            Map<String, Integer> brokerNumMap = buildBrokerNumMap(num);			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			            Assert.assertEquals(num * 2, allocator.getIdToBroker().size());			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			            Assert.assertEquals(num * 3 - 1, allocator.getIdToBroker().size());			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			            Map<String, Integer> brokerNumMapBeforeRemapping = buildBrokerNumMap(num, num);			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			            queueNum = 10 * i;			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			        Set<String>  originalBrokers = buildTargetBrokers(2);			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			            Set<String> targetBrokers = buildTargetBrokers(2, "test" + i);			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        for (int i = 0; i < 10; i++) {			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			        Set<String> targetBrokers = buildTargetBrokers(2);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateStaticTopicSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.nio.charset.StandardCharsets;
			import java.util.AbstractMap;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicRemappingDetailWrapper;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminUtils;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			                        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			            defaultMQAdminExt.start();
			            String topic = commandLine.getOptionValue('t').trim();			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			            boolean force = false;			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            MQAdminUtils.completeNoTargetBrokers(wrapper.getBrokerConfigMap(), defaultMQAdminExt);			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    @Override			
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			        RPCHook rpcHook) throws SubCommandException {
			        if (!commandLine.hasOption('t')) {			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			
			        if (commandLine.hasOption("f")) {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
						
",
,
			fromLine:"			142",
			toLine:"			144",
			content:"
			            defaultMQAdminExt.start();
			            if (!commandLine.hasOption("b") && !commandLine.hasOption('c')
			                    || !commandLine.hasOption("qn")) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            }			
",
,
			fromLine:"			155",
			toLine:"			156",
			content:"
			            {
			                if (commandLine.hasOption("b")) {			
",
,
			fromLine:"			160",
			toLine:"			161",
			content:"
			                    }
			                } else if (commandLine.hasOption("c")) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            brokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			            //calculate the new data			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			            MQAdminUtils.completeNoTargetBrokers(brokerConfigMap, defaultMQAdminExt);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/RemappingStaticTopicSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			40",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicRemappingDetailWrapper;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminUtils;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
						
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            defaultMQAdminExt.start();			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			            boolean force = false;			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			            }			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    @Override			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			                        RPCHook rpcHook) throws SubCommandException {
			        if (!commandLine.hasOption('t')) {			
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			
			        if (commandLine.hasOption("f")) {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			139",
			content:"
			            defaultMQAdminExt.start();
			            if (!commandLine.hasOption("b") && !commandLine.hasOption('c')) {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			            }			
",
,
			fromLine:"			151",
			toLine:"			152",
			content:"
			            {
			                if (commandLine.hasOption("b")) {			
",
,
			fromLine:"			156",
			toLine:"			157",
			content:"
			                    }
			                } else if (commandLine.hasOption("c")) {			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java:
		[
			fromLine:"			17",
			toLine:"			64",
			content:"
			
			package org.apache.rocketmq.test.statictopic;
			
			import com.google.common.collect.ImmutableList;
			import com.google.common.collect.ImmutableSet;
			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.remoting.protocol.admin.OffsetWrapper;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicConfigAndQueueMapping;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingOne;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.rpc.ClientMetadata;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.FixMethodOrder;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			import static org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils.getMappingDetailFromConfig;
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			        {
			            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, null, CLUSTER_NAME, NAMESRV_ADDR);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			            //consume and check			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			            Set<String> brokers = ImmutableSet.of(BROKER1_NAME);
			            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, brokers, null, NAMESRV_ADDR);			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			            //consume and check			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            Set<String> brokers = ImmutableSet.of(BROKER2_NAME);			
",
,
			fromLine:"			120",
			toLine:"			121",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);
			            sendMessagesAndCheck(producer, brokers, topic, queueNum, msgEachQueue, TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE);			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			            targetBrokers.add(BROKER1_NAME);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            targetBrokers.add(BROKER2_NAME);			
",
,
			fromLine:"			157",
			toLine:"			161",
			content:"
			
			    private void sendMessagesAndCheck(RMQNormalProducer producer, Set<String> targetBrokers, String topic, int queueNum, int msgEachQueue, long baseOffset) throws Exception {
			        ClientMetadata clientMetadata = MQAdminUtils.getBrokerAndTopicMetadata(topic, defaultMQAdminExt);
			        List<MessageQueue> messageQueueList = producer.getMessageQueue();
			        Assert.assertEquals(queueNum, messageQueueList.size());			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			            MessageQueue messageQueue = messageQueueList.get(i);			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            String destBrokerName = clientMetadata.getBrokerNameFromMessageQueue(messageQueue);			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			        for (MessageQueue messageQueue: messageQueueList) {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        }			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            Assert.assertEquals(0, defaultMQAdminExt.minOffset(messageQueue));			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        }			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			            Assert.assertEquals(0, topicStatsTable.getOffsetTable().get(messageQueue).getMinOffset());			
",
,
			fromLine:"			201",
			toLine:"			202",
			content:"
			
			    private void consumeMessagesAndCheck(RMQNormalProducer producer, RMQNormalConsumer consumer, String topic, int queueNum, int msgEachQueue, int startGen, int genNum) {			
",
,
			fromLine:"			204",
			toLine:"			205",
			content:"
			
			        Assert.assertEquals(producer.getAllMsgBody().size(), consumer.getListener().getAllMsgBody().size());			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			                consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			209",
			toLine:"			210",
			content:"
			        Map<Integer, List<MessageExt>> messagesByQueue = computeMessageByQueue(consumer.getListener().getAllOriginMsg());
			        Assert.assertEquals(queueNum, messagesByQueue.size());			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
						
",
,
			fromLine:"			217",
			toLine:"			218",
			content:"
			                MessageExt messageExt = messageExts.get(j);
			                int currGen = startGen + j / msgEachQueue;			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			                Assert.assertEquals(i, messageExt.getQueueId());			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        //create static topic			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        //send and check			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			        //consume and check			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			270",
			toLine:"			272",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
			            MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
			            sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);			
",
,
			fromLine:"			287",
			toLine:"			288",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);
			            sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE);			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			                currentInstance.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			                currentInstance.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			                currentInstance.updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			341",
			toLine:"			343",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
			            MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
			            sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);			
",
,
			fromLine:"			363",
			toLine:"			363",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(brokers.get(i));			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);			
",
,
			fromLine:"			380",
			toLine:"			381",
			content:"
			        }
			        consumer = getConsumer(NAMESRV_ADDR, group, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);			
",
,
			fromLine:"			408",
			toLine:"			408",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER3_NAME);			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			            awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);			
",
,
			fromLine:"			481",
			toLine:"			482",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
			            MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);			
",
,
			fromLine:"			488",
			toLine:"			488",
			content:"
			            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			            //here the gen should be 0			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/rpc/RequestBuilder.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.remoting.rpc;
			
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    public static RpcRequestHeader buildCommonRpcHeader(int requestCode, String destBrokerName) {			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			
			    public static RpcRequestHeader buildCommonRpcHeader(int requestCode, Boolean oneway, String destBrokerName) {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        if (requestHeaderClass == null) {			
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			            RpcRequestHeader requestHeader = (RpcRequestHeader) requestHeaderClass.newInstance();
			            requestHeader.setOneway(oneway);			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public static TopicQueueRequestHeader buildTopicQueueRequestHeader(int requestCode, MessageQueue mq) {			
",
,
			fromLine:"			54",
			toLine:"			55",
			content:"
			
			    public static TopicQueueRequestHeader buildTopicQueueRequestHeader(int requestCode, MessageQueue mq, Boolean logic) {			
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			
			    public static TopicQueueRequestHeader buildTopicQueueRequestHeader(int requestCode, Boolean oneway, MessageQueue mq, Boolean logic) {			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			    public static TopicQueueRequestHeader buildTopicQueueRequestHeader(int requestCode,  Boolean oneway, String destBrokerName, String topic, int queueId, Boolean logic) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        if (requestHeaderClass == null) {			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			            TopicQueueRequestHeader requestHeader = (TopicQueueRequestHeader) requestHeaderClass.newInstance();
			            requestHeader.setOneway(oneway);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            requestHeader.setQueueId(queueId);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/AppendMessageCallback.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			     */			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			     */			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/logfile/DefaultMappedFile.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.store.logfile;
			
			import com.sun.jna.NativeLong;
			import com.sun.jna.Pointer;
			import java.io.File;
			import java.io.FileNotFoundException;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.lang.reflect.Field;
			import java.lang.reflect.Method;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.FileChannel.MapMode;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.nio.file.StandardCopyOption;
			import java.util.Iterator;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.function.Consumer;
			import org.apache.commons.lang3.SystemUtils;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.AppendMessageCallback;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.CompactionAppendMsgCallback;
			import org.apache.rocketmq.store.PutMessageContext;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.TransientStorePool;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.util.LibC;
			import sun.misc.Unsafe;
			import sun.nio.ch.DirectBuffer;
						
",
,
			fromLine:"			79",
			toLine:"			80",
			content:"
			    protected volatile int flushedPosition;
			    protected int fileSize;			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			    protected ByteBuffer writeBuffer = null;
			    protected TransientStorePool transientStorePool = null;			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    protected File file;			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        final TransientStorePool transientStorePool) throws IOException {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        this.writeBuffer = transientStorePool.borrowBuffer();			
",
,
			fromLine:"			157",
			toLine:"			158",
			content:"
			    private void init(final String fileName, final int fileSize) throws IOException {
			        this.fileName = fileName;			
",
,
			fromLine:"			166",
			toLine:"			167",
			content:"
			        try {
			            this.fileChannel = new RandomAccessFile(this.file, "rw").getChannel();			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        } catch (FileNotFoundException e) {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			178",
			toLine:"			179",
			content:"
			        } finally {
			            if (!ok && this.fileChannel != null) {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			        if (rename) {			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			                try {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    public int getFileSize() {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			    public FileChannel getFileChannel() {			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			        int currentPos = WROTE_POSITION_UPDATER.get(this);			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			            byteBuffer.position(currentPos);			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        }			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			                // traditional batch message			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			                // traditional single message or newly introduced inner-batch message			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			        }			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			        this.mappedByteBufferAccessCountSinceLastSwap++;			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
						
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
			            try {			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			                while (data.hasRemaining()) {			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
						
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			            try {			
",
,
			fromLine:"			372",
			toLine:"			373",
			content:"
			                    //We only append data to fileChannel or mappedByteBuffer, never both.
			                    if (writeBuffer != null || this.fileChannel.position() != 0) {			
",
,
			fromLine:"			375",
			toLine:"			375",
			content:"
			                    } else {			
",
,
			fromLine:"			400",
			toLine:"			400",
			content:"
			        //no need to commit data to file channel, so just set committedPosition to wrotePosition.			
",
,
			fromLine:"			412",
			toLine:"			413",
			content:"
			        // All dirty data has been committed to FileChannel.
			        if (writeBuffer != null && this.transientStorePool != null && this.fileSize == COMMITTED_POSITION_UPDATER.get(this)) {			
",
,
			fromLine:"			429",
			toLine:"			430",
			content:"
			                byteBuffer.limit(writePos);
			                this.fileChannel.position(lastCommittedPosition);			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
			    public boolean isFull() {			
",
,
			fromLine:"			490",
			toLine:"			490",
			content:"
						
",
,
			fromLine:"			513",
			toLine:"			513",
			content:"
			                this.mappedByteBufferAccessCountSinceLastSwap++;			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
			        if (this.isAvailable()) {			
",
,
			fromLine:"			534",
			toLine:"			534",
			content:"
			        if (this.isCleanupOver()) {			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
						
",
,
			fromLine:"			542",
			toLine:"			542",
			content:"
			        this.mappedByteBufferWaitToClean = null;			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
			        TOTAL_MAPPED_FILES.decrementAndGet();			
",
,
			fromLine:"			555",
			toLine:"			556",
			content:"
			                long lastModified = getLastModifiedTimestamp();
			                this.fileChannel.close();			
",
,
			fromLine:"			560",
			toLine:"			560",
			content:"
			                boolean result = this.file.delete();			
",
,
			fromLine:"			566",
			toLine:"			566",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			571",
			toLine:"			571",
			content:"
			        } else {			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			    public int getReadPosition() {			
",
,
			fromLine:"			606",
			toLine:"			606",
			content:"
			        long beginTime = System.currentTimeMillis();			
",
,
			fromLine:"			609",
			toLine:"			609",
			content:"
			        // long time = System.currentTimeMillis();			
",
,
			fromLine:"			615",
			toLine:"			615",
			content:"
			                    flush = i;			
",
,
			fromLine:"			635",
			toLine:"			635",
			content:"
			                this.getFileName(), System.currentTimeMillis() - beginTime);			
",
,
			fromLine:"			648",
			toLine:"			648",
			content:"
			            if (!hold()) {			
",
,
			fromLine:"			652",
			toLine:"			653",
			content:"
			            try {
			                this.mappedByteBufferWaitToClean = this.mappedByteBuffer;			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			                this.swapMapTime = System.currentTimeMillis();			
",
,
			fromLine:"			659",
			toLine:"			659",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			        } else {			
",
,
			fromLine:"			682",
			toLine:"			682",
			content:"
			            mappedByteBufferWaitToClean = null;			
",
,
			fromLine:"			684",
			toLine:"			684",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			705",
			toLine:"			705",
			content:"
			    public String getFileName() {			
",
,
			fromLine:"			711",
			toLine:"			711",
			content:"
			        this.mappedByteBufferAccessCountSinceLastSwap++;			
",
,
			fromLine:"			717",
			toLine:"			717",
			content:"
			        this.mappedByteBufferAccessCountSinceLastSwap++;			
",
,
			fromLine:"			738",
			toLine:"			738",
			content:"
			        final long beginTime = System.currentTimeMillis();			
",
,
			fromLine:"			741",
			toLine:"			742",
			content:"
			        {
			            int ret = LibC.INSTANCE.mlock(pointer, new NativeLong(this.fileSize));			
",
,
			fromLine:"			746",
			toLine:"			747",
			content:"
			        {
			            int ret = LibC.INSTANCE.madvise(pointer, new NativeLong(this.fileSize), LibC.MADV_WILLNEED);			
",
,
			fromLine:"			754",
			toLine:"			754",
			content:"
			        final long beginTime = System.currentTimeMillis();			
",
,
			fromLine:"			756",
			toLine:"			757",
			content:"
			        Pointer pointer = new Pointer(address);
			        int ret = LibC.INSTANCE.munlock(pointer, new NativeLong(this.fileSize));			
",
,
			fromLine:"			768",
			toLine:"			769",
			content:"
			        //use Files.move
			        if (!fileName.endsWith(".delete")) {			
",
,
			fromLine:"			775",
			toLine:"			779",
			content:"
			                // Windows can't move the file when mmapped.
			                if (NetworkUtil.isWindowsPlatform() && mappedByteBuffer != null) {
			                    long position = this.fileChannel.position();
			                    UtilAll.cleanBuffer(this.mappedByteBuffer);
			                    this.fileChannel.close();			
",
,
			fromLine:"			781",
			toLine:"			783",
			content:"
			                    try (RandomAccessFile file = new RandomAccessFile(newFileName, "rw")) {
			                        this.fileChannel = file.getChannel();
			                        this.fileChannel.position(position);			
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
			                } else {			
",
,
			fromLine:"			788",
			toLine:"			788",
			content:"
			                }			
",
,
			fromLine:"			791",
			toLine:"			791",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			798",
			toLine:"			798",
			content:"
			    public void moveToParent() throws IOException {			
",
,
			fromLine:"			804",
			toLine:"			808",
			content:"
			        // Windows can't move the file when mmapped.
			        if (NetworkUtil.isWindowsPlatform() && mappedByteBuffer != null) {
			            long position = this.fileChannel.position();
			            UtilAll.cleanBuffer(this.mappedByteBuffer);
			            this.fileChannel.close();			
",
,
			fromLine:"			810",
			toLine:"			812",
			content:"
			            try (RandomAccessFile file = new RandomAccessFile(parentPath.toFile(), "rw")) {
			                this.fileChannel = file.getChannel();
			                this.fileChannel.position(position);			
",
,
			fromLine:"			815",
			toLine:"			815",
			content:"
			        } else {			
",
,
			fromLine:"			818",
			toLine:"			818",
			content:"
			        this.file = parentPath.toFile();			
",
,
			fromLine:"			823",
			toLine:"			823",
			content:"
			    public String toString() {			
",
,
			fromLine:"			874",
			toLine:"			875",
			content:"
			        try {
			            long addr = ((DirectBuffer) mappedByteBuffer).address() + position;			
",
,
			fromLine:"			890",
			toLine:"			890",
			content:"
			            this.current = pos;			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/AppendPropCRCTest.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.net.InetSocketAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			            messageExtBrokerInner.setEncodedBuff(encoder.getEncoderBuffer());			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        for (int i = 0; i < msgNum - 1; i++) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        buff.put(idx, (byte) (buff.get(idx) + 1));			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        AppendMessageResult allresult =			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			        for (int i = 0; i < messages.size() - 1; i++) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			        buff.put(idx, (byte) (buff.get(idx) + 1));			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/AppendCallbackTest.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.net.InetSocketAddress;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        AppendMessageResult result =			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        AppendMessageResult result =			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			        AppendMessageResult allresult =			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			        AppendMessageResult allresult =			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/MessageExtEncoder.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import io.netty.buffer.ByteBuf;
			import io.netty.buffer.ByteBufAllocator;
			import io.netty.buffer.UnpooledByteBufAllocator;
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.message.MessageVersion;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        int bornhostLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20;			
",
,
			fromLine:"			79",
			toLine:"			81",
			content:"
			            + 8 //Prepared Transaction Offset
			            + 4 + (Math.max(bodyLength, 0)) //BODY
			            + messageVersion.getTopicLengthSize() + topicLength //TOPIC			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			
			        int bornhostLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20;			
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			                + 8 //Prepared Transaction Offset
			                + 4 + (Math.max(bodyLength, 0)) //BODY			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			        final int bodyLength = msgInner.getBody() == null ? 0 : msgInner.getBody().length;			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			            totalPropLen += crc32ReservedLength;			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAService.java:
		[
			fromLine:"			17",
			toLine:"			55",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import java.io.IOException;
			import java.nio.channels.SocketChannel;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import java.util.function.Consumer;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ConcurrentHashMapUtils;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.EpochEntry;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.DefaultHAService;
			import org.apache.rocketmq.store.ha.GroupTransferService;
			import org.apache.rocketmq.store.ha.HAClient;
			import org.apache.rocketmq.store.ha.HAConnection;
			import org.apache.rocketmq.store.ha.HAConnectionStateNotificationService;
			import org.rocksdb.RocksDBException;
						
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			                while (readSize < result.getSize()) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/MappedFileQueue.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import com.google.common.collect.Lists;
			import java.io.File;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Comparator;
			import java.util.Iterator;
			import java.util.List;
			import java.util.ListIterator;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.stream.Stream;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			
			public class MappedFileQueue implements Swappable {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			        AllocateMappedFileService allocateMappedFileService) {
			        this.storePath = storePath;			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			                if (pre != null) {
			                    if (cur.getFileFromOffset() - pre.getFileFromOffset() != this.mappedFileSize) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            if (mappedFile.getStartTimestamp() < 0) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			            if (i < mfs.length - 1 && mappedFile.getStopTimestamp() < 0) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			            default: {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			        for (MappedFile file : this.mappedFiles) {			
",
,
			fromLine:"			199",
			toLine:"			201",
			content:"
			                if (offset >= file.getFileFromOffset()) {
			                    file.setWrotePosition((int) (offset % this.mappedFileSize));
			                    file.setCommittedPosition((int) (offset % this.mappedFileSize));			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			                    iterator.remove();			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			                if (!this.mappedFiles.removeAll(files)) {			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			    public boolean load() {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			                boolean ok = file.delete();			
",
,
			fromLine:"			261",
			toLine:"			262",
			content:"
			
			            if (file.length() != this.mappedFileSize) {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			            try {			
",
,
			fromLine:"			270",
			toLine:"			272",
			content:"
			
			                mappedFile.setWrotePosition(this.mappedFileSize);
			                mappedFile.setFlushedPosition(this.mappedFileSize);			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			                this.mappedFiles.add(mappedFile);			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			        if (mappedFileLast == null) {			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
			        if (mappedFileLast != null && mappedFileLast.isFull()) {			
",
,
			fromLine:"			344",
			toLine:"			346",
			content:"
			    public MappedFile tryCreateMappedFile(long createOffset) {
			        String nextFilePath = this.storePath + File.separator + UtilAll.offset2FileName(createOffset);
			        String nextNextFilePath = this.storePath + File.separator + UtilAll.offset2FileName(createOffset			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			            mappedFile = this.allocateMappedFileService.putRequestAndReturnMappedFile(nextFilePath,			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			            try {			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
						
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			473",
			toLine:"			473",
			content:"
			            this.mappedFiles.remove(lastMappedFile);			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
						
",
,
			fromLine:"			497",
			toLine:"			498",
			content:"
			                MappedFile mappedFile = (MappedFile) mfs[i];
			                long liveMaxTimestamp = mappedFile.getLastModifiedTimestamp() + expiredTime;			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			                    if (skipFileNum > 0) {			
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			                    }			
",
,
			fromLine:"			506",
			toLine:"			506",
			content:"
						
",
,
			fromLine:"			510",
			toLine:"			510",
			content:"
						
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
			                            try {			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
			                MappedFile mappedFile = (MappedFile) mfs[i];			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			                    if (destroy) {			
",
,
			fromLine:"			554",
			toLine:"			554",
			content:"
			                } else if (!mappedFile.isAvailable()) { // Handle hanged file.			
",
,
			fromLine:"			557",
			toLine:"			557",
			content:"
			                } else {			
",
,
			fromLine:"			599",
			toLine:"			599",
			content:"
			                            if (destroy) {			
",
,
			fromLine:"			603",
			toLine:"			603",
			content:"
			                        } else {			
",
,
			fromLine:"			607",
			toLine:"			607",
			content:"
			                    } else if (!mappedFile.isAvailable()) { // Handle hanged file.			
",
,
			fromLine:"			610",
			toLine:"			610",
			content:"
			                    } else {			
",
,
			fromLine:"			675",
			toLine:"			676",
			content:"
			            if (firstMappedFile != null && lastMappedFile != null) {
			                if (offset < firstMappedFile.getFileFromOffset() || offset >= lastMappedFile.getFileFromOffset() + this.mappedFileSize) {			
",
,
			fromLine:"			679",
			toLine:"			680",
			content:"
			                        firstMappedFile.getFileFromOffset(),
			                        lastMappedFile.getFileFromOffset() + this.mappedFileSize,			
",
,
			fromLine:"			683",
			toLine:"			683",
			content:"
			                } else {			
",
,
			fromLine:"			691",
			toLine:"			691",
			content:"
			                    if (targetFile != null && offset >= targetFile.getFileFromOffset()			
",
,
			fromLine:"			697",
			toLine:"			697",
			content:"
			                        if (offset >= tmpMappedFile.getFileFromOffset()			
",
,
			fromLine:"			708",
			toLine:"			708",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			723",
			toLine:"			723",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			741",
			toLine:"			741",
			content:"
			                if (((ReferenceResource) mf).isAvailable()) {			
",
,
			fromLine:"			753",
			toLine:"			753",
			content:"
			            if (!mappedFile.isAvailable()) {			
",
,
			fromLine:"			756",
			toLine:"			756",
			content:"
			                if (result) {			
",
,
			fromLine:"			761",
			toLine:"			761",
			content:"
			                } else {			
",
,
			fromLine:"			785",
			toLine:"			785",
			content:"
			        // delete parent directory			
",
,
			fromLine:"			792",
			toLine:"			792",
			content:"
			    @Override			
",
,
			fromLine:"			798",
			toLine:"			799",
			content:"
			
			        if (reserveNum < 3) {			
",
,
			fromLine:"			807",
			toLine:"			807",
			content:"
						
",
,
			fromLine:"			809",
			toLine:"			809",
			content:"
			            MappedFile mappedFile = (MappedFile) mfs[i];			
",
,
			fromLine:"			813",
			toLine:"			813",
			content:"
			            }			
",
,
			fromLine:"			876",
			toLine:"			876",
			content:"
			    public int getMappedFileSize() {			
",
,
			fromLine:"			888",
			toLine:"			888",
			content:"
			    public long getTotalFileSize() {			
",
,
			fromLine:"			892",
			toLine:"			892",
			content:"
			    public String getStorePath() {			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java:
		[
			fromLine:"			17",
			toLine:"			46",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.util.concurrent.CountDownLatch;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.assertj.core.util.Lists;
			import org.junit.After;
			import org.junit.Assume;
			import org.junit.Test;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.util.Arrays;
			import java.util.List;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			            assertThat(mappedFile).isNotNull();			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
						
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
						
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			        int maxBatchDeleteFilesNum = 50;			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAClient.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.store.ha;
			
			import java.io.IOException;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.nio.channels.ClosedChannelException;
			import java.nio.channels.SelectionKey;
			import java.nio.channels.Selector;
			import java.nio.channels.SocketChannel;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.store.DefaultMessageStore;
						
",
,
			fromLine:"			52",
			toLine:"			55",
			content:"
			
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024 * 4;
			    private final AtomicReference<String> masterHaAddress = new AtomicReference<>();			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			    private final ByteBuffer reportOffset = ByteBuffer.allocate(REPORT_HEADER_SIZE);
			    private SocketChannel socketChannel;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			     */			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			     */			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			    private int dispatchPosition = 0;
			    private ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			    private DefaultMessageStore defaultMessageStore;
			    private volatile HAConnectionState currentState = HAConnectionState.READY;			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public DefaultHAClient(DefaultMessageStore defaultMessageStore) throws IOException {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        this.defaultMessageStore = defaultMessageStore;			
",
,
			fromLine:"			83",
			toLine:"			85",
			content:"
			    public void updateHaMasterAddress(final String newAddr) {
			        String currentAddr = this.masterHaAddress.get();
			        if (masterHaAddress.compareAndSet(currentAddr, newAddr)) {			
",
,
			fromLine:"			90",
			toLine:"			92",
			content:"
			    public void updateMasterAddress(final String newAddr) {
			        String currentAddr = this.masterAddress.get();
			        if (masterAddress.compareAndSet(currentAddr, newAddr)) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public String getHaMasterAddress() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    private boolean isTimeToReportOffset() {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            try {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        }			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    private void reallocateByteBuffer() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        if (remain > 0) {			
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			            this.byteBufferBackup.position(0);
			            this.byteBufferBackup.limit(READ_MAX_BUFFER_SIZE);			
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			
			        this.byteBufferRead.position(remain);			
",
,
			fromLine:"			147",
			toLine:"			148",
			content:"
			    private void swapByteBuffer() {
			        ByteBuffer tmp = this.byteBufferRead;			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        int readSizeZeroTimes = 0;			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			            try {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			                if (readSize > 0) {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			                    if (!result) {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			                    }			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			                } else {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    private boolean dispatchReadRequest() {			
",
,
			fromLine:"			187",
			toLine:"			190",
			content:"
			        while (true) {
			            int diff = this.byteBufferRead.position() - this.dispatchPosition;
			            if (diff >= DefaultHAConnection.TRANSFER_HEADER_SIZE) {
			                long masterPhyOffset = this.byteBufferRead.getLong(this.dispatchPosition);			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			                    if (slavePhyOffset != masterPhyOffset) {			
",
,
			fromLine:"			202",
			toLine:"			204",
			content:"
			
			                if (diff >= (DefaultHAConnection.TRANSFER_HEADER_SIZE + bodySize)) {
			                    byte[] bodyData = byteBufferRead.array();			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
						
",
,
			fromLine:"			209",
			toLine:"			210",
			content:"
			
			                    this.byteBufferRead.position(readSocketPos);			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			235",
			content:"
			        long currentPhyOffset = this.defaultMessageStore.getMaxPhyOffset();
			        if (currentPhyOffset > this.currentReportedOffset) {
			            this.currentReportedOffset = currentPhyOffset;			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			                this.closeMaster();			
",
,
			fromLine:"			246",
			toLine:"			247",
			content:"
			    public void changeCurrentState(HAConnectionState currentState) {
			        log.info("change state to {}", currentState);			
",
,
			fromLine:"			251",
			toLine:"			252",
			content:"
			    public boolean connectMaster() throws ClosedChannelException {
			        if (null == socketChannel) {			
",
,
			fromLine:"			255",
			toLine:"			258",
			content:"
			                SocketAddress socketAddress = NetworkUtil.string2SocketAddress(addr);
			                this.socketChannel = RemotingHelper.connect(socketAddress);
			                if (this.socketChannel != null) {
			                    this.socketChannel.register(this.selector, SelectionKey.OP_READ);			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
						
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
						
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
						
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			    public void closeMaster() {			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
						
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
						
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
						
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
						
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
						
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
			            this.byteBufferBackup.position(0);			
",
,
			fromLine:"			296",
			toLine:"			297",
			content:"
			
			            this.byteBufferRead.position(0);			
",
,
			fromLine:"			303",
			toLine:"			303",
			content:"
			    public void run() {			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
						
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			            try {			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			                    case SHUTDOWN:			
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
			                        if (!this.connectMaster()) {			
",
,
			fromLine:"			329",
			toLine:"			329",
			content:"
			                }			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			                if (interval > this.defaultMessageStore.getMessageStoreConfig().getHaHousekeepingInterval()) {			
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			                    this.closeMaster();			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			342",
			toLine:"			343",
			content:"
			
			        this.flowMonitor.shutdown(true);			
",
,
			fromLine:"			349",
			toLine:"			350",
			content:"
			        if (this.isTimeToReportOffset()) {
			            log.info("Slave report current offset {}", this.currentReportedOffset);			
",
,
			fromLine:"			356",
			toLine:"			356",
			content:"
						
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
			    public long getLastWriteTimestamp() {			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			    public long getLastReadTimestamp() {			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			    public HAConnectionState getCurrentState() {			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			    public long getTransferredByteInSecond() {			
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
			        this.changeCurrentState(HAConnectionState.SHUTDOWN);			
",
,
			fromLine:"			397",
			toLine:"			397",
			content:"
			        try {			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			        } catch (IOException e) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAClient.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import java.io.IOException;
			import java.net.SocketAddress;
			import java.nio.ByteBuffer;
			import java.nio.channels.SelectionKey;
			import java.nio.channels.Selector;
			import java.nio.channels.SocketChannel;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.EpochEntry;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.ha.FlowMonitor;
			import org.apache.rocketmq.store.ha.HAClient;
			import org.apache.rocketmq.store.ha.HAConnectionState;
			import org.apache.rocketmq.store.ha.io.AbstractHAReader;
			import org.apache.rocketmq.store.ha.io.HAWriter;
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			     */			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    @Deprecated			
",
,
			fromLine:"			102",
			toLine:"			111",
			content:"
			     */
			    public static final int TRANSFER_HEADER_SIZE = 4 + 8;
			    public static final int MIN_HEADER_SIZE = Math.min(HANDSHAKE_HEADER_SIZE, TRANSFER_HEADER_SIZE);
			    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024 * 4;
			    private final AtomicReference<String> masterHaAddress = new AtomicReference<>();
			    private final AtomicReference<String> masterAddress = new AtomicReference<>();
			    private final ByteBuffer handshakeHeaderBuffer = ByteBuffer.allocate(HANDSHAKE_HEADER_SIZE);
			    private final ByteBuffer transferHeaderBuffer = ByteBuffer.allocate(TRANSFER_HEADER_SIZE);
			    private final AutoSwitchHAService haService;			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    private final DefaultMessageStore messageStore;			
",
,
			fromLine:"			117",
			toLine:"			121",
			content:"
			
			    private SocketChannel socketChannel;
			    private Selector selector;
			    private AbstractHAReader haReader;
			    private HAWriter haWriter;			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			     */			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			     */			
",
,
			fromLine:"			131",
			toLine:"			133",
			content:"
			
			    private long currentReportedOffset;
			    private int processPosition;			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        EpochFileCache epochCache, Long brokerId) throws IOException {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			        this.messageStore = defaultMessageStore;			
",
,
			fromLine:"			149",
			toLine:"			152",
			content:"
			    public void init() throws IOException {
			        this.selector = NetworkUtil.openSelector();
			        this.flowMonitor = new FlowMonitor(this.messageStore.getMessageStoreConfig());
			        this.haReader = new HAClientReader();			
",
,
			fromLine:"			154",
			toLine:"			155",
			content:"
			            if (readSize > 0) {
			                AutoSwitchHAClient.this.flowMonitor.addByteCountTransferred(readSize);			
",
,
			fromLine:"			158",
			toLine:"			159",
			content:"
			        });
			        this.haWriter = new HAWriter();			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            if (writeSize > 0) {			
",
,
			fromLine:"			166",
			toLine:"			169",
			content:"
			        this.currentReceivedEpoch = -1;
			        this.currentReportedOffset = 0;
			        this.processPosition = 0;
			        this.lastReadTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			    public String getServiceName() {
			        if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			187",
			toLine:"			189",
			content:"
			    public void updateMasterAddress(String newAddress) {
			        String currentAddr = this.masterAddress.get();
			        if (!StringUtils.equals(newAddress, currentAddr) && masterAddress.compareAndSet(currentAddr, newAddress)) {			
",
,
			fromLine:"			195",
			toLine:"			197",
			content:"
			    public void updateHaMasterAddress(String newAddress) {
			        String currentAddr = this.masterHaAddress.get();
			        if (!StringUtils.equals(newAddress, currentAddr) && masterHaAddress.compareAndSet(currentAddr, newAddress)) {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			    public String getHaMasterAddress() {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    public long getLastReadTimestamp() {			
",
,
			fromLine:"			219",
			toLine:"			219",
			content:"
			    public long getLastWriteTimestamp() {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    public HAConnectionState getCurrentState() {			
",
,
			fromLine:"			229",
			toLine:"			230",
			content:"
			    public void changeCurrentState(HAConnectionState haConnectionState) {
			        LOGGER.info("change state to {}", haConnectionState);			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    public void closeMaster() {			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			            try {			
",
,
			fromLine:"			247",
			toLine:"			248",
			content:"
			
			                this.socketChannel.close();			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
						
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			256",
			toLine:"			257",
			content:"
			
			            this.lastReadTimestamp = 0;			
",
,
			fromLine:"			259",
			toLine:"			260",
			content:"
			
			            this.byteBufferRead.position(0);			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			    public long getTransferredByteInSecond() {			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        // Shutdown thread firstly			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        try {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			    private boolean isTimeToReportOffset() {			
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			        this.handshakeHeaderBuffer.position(0);			
",
,
			fromLine:"			295",
			toLine:"			295",
			content:"
			        // IsSyncFromLastFile			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
			        // IsAsyncLearner role			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			        this.handshakeHeaderBuffer.flip();			
",
,
			fromLine:"			313",
			toLine:"			313",
			content:"
						
",
,
			fromLine:"			315",
			toLine:"			315",
			content:"
						
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        this.transferHeaderBuffer.position(0);			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			        this.transferHeaderBuffer.flip();			
",
,
			fromLine:"			333",
			toLine:"			335",
			content:"
			        final long maxPhyOffset = this.messageStore.getMaxPhyOffset();
			        if (maxPhyOffset > this.currentReportedOffset) {
			            this.currentReportedOffset = maxPhyOffset;			
",
,
			fromLine:"			341",
			toLine:"			342",
			content:"
			    public boolean connectMaster() throws IOException {
			        if (null == this.socketChannel) {			
",
,
			fromLine:"			345",
			toLine:"			348",
			content:"
			                SocketAddress socketAddress = NetworkUtil.string2SocketAddress(addr);
			                this.socketChannel = RemotingHelper.connect(socketAddress);
			                if (this.socketChannel != null) {
			                    this.socketChannel.register(this.selector, SelectionKey.OP_READ);			
",
,
			fromLine:"			352",
			toLine:"			353",
			content:"
			            }
			            this.currentReportedOffset = this.messageStore.getMaxPhyOffset();			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			        }			
",
,
			fromLine:"			361",
			toLine:"			362",
			content:"
			        if (isTimeToReportOffset()) {
			            LOGGER.info("Slave report current offset {}", this.currentReportedOffset);			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
						
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
						
",
,
			fromLine:"			380",
			toLine:"			380",
			content:"
			    public void run() {			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
						
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			            try {			
",
,
			fromLine:"			387",
			toLine:"			387",
			content:"
			                    case SHUTDOWN:			
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
			                        // Truncate invalid msg first			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			                        if (truncateOffset >= 0) {			
",
,
			fromLine:"			396",
			toLine:"			396",
			content:"
			                        if (!connectMaster()) {			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			                }			
",
,
			fromLine:"			416",
			toLine:"			416",
			content:"
			                if (interval > this.messageStore.getMessageStoreConfig().getHaHousekeepingInterval()) {			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			                    closeMaster();			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			427",
			toLine:"			428",
			content:"
			
			        this.flowMonitor.shutdown(true);			
",
,
			fromLine:"			435",
			toLine:"			435",
			content:"
			    private boolean doTruncate(List<EpochEntry> masterEpochEntries, long masterEndOffset) throws Exception {			
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
			            // If epochMap is empty, means the broker is a new replicas			
",
,
			fromLine:"			439",
			toLine:"			439",
			content:"
			            changeCurrentState(HAConnectionState.TRANSFER);			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			            masterEpochCache.setLastEpochEntryEndOffset(masterEndOffset);			
",
,
			fromLine:"			449",
			toLine:"			450",
			content:
{

            LOGGER.info("master epoch entries is ", masterEpochCache.getAllEntries());						
}
,
			fromLine:"			454",
			toLine:"			454",
			content:"
						
",
,
			fromLine:"			458",
			toLine:"			458",
			content:"
			                // If truncateOffset < 0, means we can't find a consistent point			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			            if (!this.messageStore.truncateFiles(truncateOffset)) {			
",
,
			fromLine:"			465",
			toLine:"			466",
			content:"
			            }
			            this.epochCache.truncateSuffixByOffset(truncateOffset);			
",
,
			fromLine:"			468",
			toLine:"			468",
			content:"
			            changeCurrentState(HAConnectionState.TRANSFER);			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			        if (!reportSlaveMaxOffset(HAConnectionState.TRANSFER)) {			
",
,
			fromLine:"			484",
			toLine:"			490",
			content:"
			                while (true) {
			                    int diff = byteBufferRead.position() - AutoSwitchHAClient.this.processPosition;
			                    if (diff >= AutoSwitchHAConnection.HANDSHAKE_HEADER_SIZE) {
			                        final int processPosition = AutoSwitchHAClient.this.processPosition;
			                        int masterState = byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.HANDSHAKE_HEADER_SIZE - 20);
			                        int bodySize = byteBufferRead.getInt(processPosition + AutoSwitchHAConnection.HANDSHAKE_HEADER_SIZE - 16);
			                        long masterOffset = byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.HANDSHAKE_HEADER_SIZE - 12);			
",
,
			fromLine:"			494",
			toLine:"			496",
			content:"
			                        // If master send transfer header data, set masterEpochStartOffset and confirmOffset value.
			                        if (masterState == HAConnectionState.TRANSFER.ordinal() && diff >= AutoSwitchHAConnection.TRANSFER_HEADER_SIZE) {
			                            masterEpochStartOffset = byteBufferRead.getLong(processPosition + AutoSwitchHAConnection.TRANSFER_HEADER_SIZE - 16);			
",
,
			fromLine:"			498",
			toLine:"			500",
			content:"
			                        }
			                        if (masterState != AutoSwitchHAClient.this.currentState.ordinal()) {
			                            int headerSize = masterState == HAConnectionState.TRANSFER.ordinal() ? AutoSwitchHAConnection.TRANSFER_HEADER_SIZE : AutoSwitchHAConnection.HANDSHAKE_HEADER_SIZE;			
",
,
			fromLine:"			502",
			toLine:"			503",
			content:"
			                            AutoSwitchHAClient.this.waitForRunning(1);
			                            LOGGER.error("State not matched, masterState:{}, slaveState:{}, bodySize:{}, offset:{}, masterEpoch:{}, masterEpochStartOffset:{}, confirmOffset:{}",			
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
			                        boolean isComplete = true;			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
			                            case HANDSHAKE: {			
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			                                }			
",
,
			fromLine:"			522",
			toLine:"			523",
			content:"
			                                for (int i = 0; i < entryNums; i++) {
			                                    int epoch = byteBufferRead.getInt(AutoSwitchHAClient.this.processPosition + i * entrySize);			
",
,
			fromLine:"			527",
			toLine:"			528",
			content:"
			                                byteBufferRead.position(readSocketPos);
			                                AutoSwitchHAClient.this.processPosition += bodySize;			
",
,
			fromLine:"			531",
			toLine:"			531",
			content:"
			                                    waitForRunning(1000 * 2);			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			                            case TRANSFER: {			
",
,
			fromLine:"			543",
			toLine:"			543",
			content:"
			                                byte[] bodyData = new byte[bodySize];			
",
,
			fromLine:"			546",
			toLine:"			546",
			content:"
			                                byteBufferRead.position(readSocketPos);			
",
,
			fromLine:"			550",
			toLine:"			550",
			content:"
			                                    if (slavePhyOffset != masterOffset) {			
",
,
			fromLine:"			559",
			toLine:"			559",
			content:"
			                                    AutoSwitchHAClient.this.currentReceivedEpoch = masterEpoch;			
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			                                if (bodySize > 0) {			
",
,
			fromLine:"			566",
			toLine:"			566",
			content:"
						
",
,
			fromLine:"			569",
			toLine:"			569",
			content:"
			                                if (!reportSlaveMaxOffset(HAConnectionState.TRANSFER)) {			
",
,
			fromLine:"			584",
			toLine:"			584",
			content:"
			                    if (!byteBufferRead.hasRemaining()) {			
",
,
			fromLine:"			586",
			toLine:"			586",
			content:"
			                        byteBufferRead.compact();			
",
,
			fromLine:"			592",
			toLine:"			592",
			content:"
			            } catch (final Exception e) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ConsumeQueue.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.Collections;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.config.StorePathConfigHelper;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.store.queue.FileQueueLifeCycle;
			import org.apache.rocketmq.store.queue.MultiDispatchUtils;
			import org.apache.rocketmq.store.queue.QueueOffsetOperator;
			import org.apache.rocketmq.store.queue.ReferredIterator;
			
			public class ConsumeQueue implements ConsumeQueueInterface, FileQueueLifeCycle {			
",
,
			fromLine:"			58",
			toLine:"			60",
			content:"
			     */
			    public static final int CQ_STORE_UNIT_SIZE = 20;
			    public static final int MSG_TAG_OFFSET_INDEX = 12;			
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			
			    private final MappedFileQueue mappedFileQueue;
			    private final String topic;			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			
			    private final String storePath;			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			     */			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        final MessageStore messageStore) {
			        this.storePath = storePath;			
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			
			        this.topic = topic;			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			114",
			content:"
			    public boolean load() {
			        boolean result = this.mappedFileQueue.load();			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void recover() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			            while (true) {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			                    if (offset >= 0 && size > 0) {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			                    } else {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			                        mappedFileOffset = 0;			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			                } else {			
",
,
			fromLine:"			178",
			toLine:"			180",
			content:"
			            processOffset += mappedFileOffset;
			            this.mappedFileQueue.setFlushedWhere(processOffset);
			            this.mappedFileQueue.setCommittedWhere(processOffset);			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			                this.consumeQueueExt.recover();			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			    public long getTotalSize() {			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			    public int getUnitSize() {			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			    public long getOffsetInQueueByTime(final long timestamp) {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    public long getOffsetInQueueByTime(final long timestamp, final BoundaryType boundaryType) {			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			            long offset = 0;			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			                ByteBuffer byteBuffer = sbr.getByteBuffer();			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			                            case LOWER:			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			                            case UPPER:			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			                            default:			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			                            case LOWER:			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			                            default:			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			                    while (high >= low) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			                        if (phyOffset < minPhysicOffset) {			
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			                        if (storeTime < 0) {			
",
,
			fromLine:"			299",
			toLine:"			299",
			content:"
			                        } else if (storeTime > timestamp) {			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			                        } else {			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			                                while (true) {			
",
,
			fromLine:"			335",
			toLine:"			335",
			content:"
			                                while (true) {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			                            default: {			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			                            default: {			
",
,
			fromLine:"			391",
			toLine:"			391",
			content:"
			                    }			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
						
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			        while (true) {			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
						
",
,
			fromLine:"			431",
			toLine:"			431",
			content:"
			                        } else {			
",
,
			fromLine:"			449",
			toLine:"			449",
			content:"
						
",
,
			fromLine:"			469",
			toLine:"			469",
			content:"
			                    if (deleteFile) {			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			                    } else {			
",
,
			fromLine:"			489",
			toLine:"			489",
			content:"
						
",
,
			fromLine:"			491",
			toLine:"			491",
			content:"
						
",
,
			fromLine:"			494",
			toLine:"			494",
			content:"
						
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			            byteBuffer.position(position);			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
			    public boolean flush(final int flushLeastPages) {			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
			    public int deleteExpiredFile(long offset) {			
",
,
			fromLine:"			541",
			toLine:"			542",
			content:"
			        // Check if the consume queue is the state of deprecation.
			        if (minLogicOffset >= mappedFileQueue.getMaxOffset()) {			
",
,
			fromLine:"			549",
			toLine:"			549",
			content:"
			        // This check would save a lot of efforts.			
",
,
			fromLine:"			557",
			toLine:"			558",
			content:"
			            int maxReadablePosition = lastMappedFile.getReadPosition();
			            lastRecord = lastMappedFile.selectMappedBuffer(maxReadablePosition - ConsumeQueue.CQ_STORE_UNIT_SIZE,			
",
,
			fromLine:"			565",
			toLine:"			567",
			content:"
			                    // all. Let minLogicOffset point to a future slot.
			                    this.minLogicOffset = lastMappedFile.getFileFromOffset() + maxReadablePosition;
			                    log.info("ConsumeQueue[topic={}, queue-id={}] contains no valid entries. Min-offset is assigned as: {}.",			
",
,
			fromLine:"			577",
			toLine:"			577",
			content:"
						
",
,
			fromLine:"			583",
			toLine:"			583",
			content:"
			            boolean intact = true; // Assume previous value is still valid			
",
,
			fromLine:"			590",
			toLine:"			590",
			content:"
			            if (start > mappedFile.getReadPosition()) {			
",
,
			fromLine:"			597",
			toLine:"			597",
			content:"
			            if (result == null) {			
",
,
			fromLine:"			605",
			toLine:"			605",
			content:"
			                if (result.getSize() == 0) {			
",
,
			fromLine:"			613",
			toLine:"			613",
			content:"
			                if (intact && commitLogOffset >= minCommitLogOffset) {			
",
,
			fromLine:"			621",
			toLine:"			621",
			content:"
			                int low = 0;			
",
,
			fromLine:"			623",
			toLine:"			623",
			content:"
			                while (true) {			
",
,
			fromLine:"			626",
			toLine:"			626",
			content:"
			                    }			
",
,
			fromLine:"			641",
			toLine:"			641",
			content:"
			                // Examine the last one or two entries			
",
,
			fromLine:"			648",
			toLine:"			650",
			content:"
			                    if (offsetPy >= minCommitLogOffset) {
			                        this.minLogicOffset = mappedFile.getFileFromOffset() + start + i;
			                        log.info("Compute logical min offset: {}, topic: {}, queueId: {}",			
",
,
			fromLine:"			659",
			toLine:"			659",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			672",
			toLine:"			672",
			content:"
			    public long getMinOffsetInQueue() {			
",
,
			fromLine:"			691",
			toLine:"			692",
			content:"
			                } else {
			                    log.warn("Save consume queue extend fail, So just save tagsCode! {}, topic:{}, queueId:{}, offset:{}", cqExtUnit,			
",
,
			fromLine:"			695",
			toLine:"			695",
			content:"
			            }			
",
,
			fromLine:"			709",
			toLine:"			709",
			content:"
			                // XXX: warn and notify me			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			                } catch (InterruptedException e) {			
",
,
			fromLine:"			721",
			toLine:"			721",
			content:"
			        // XXX: warn and notify me			
",
,
			fromLine:"			732",
			toLine:"			732",
			content:"
			        if (queues.length != queueOffsets.length) {			
",
,
			fromLine:"			754",
			toLine:"			754",
			content:"
			        for (int i = 0; i < maxRetries && canWrite; i++) {			
",
,
			fromLine:"			760",
			toLine:"			760",
			content:"
			            } else {			
",
,
			fromLine:"			766",
			toLine:"			766",
			content:"
			                } catch (InterruptedException e) {			
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
						
",
,
			fromLine:"			789",
			toLine:"			790",
			content:"
			
			        if (offset + size <= this.getMaxPhysicOffset()) {			
",
,
			fromLine:"			795",
			toLine:"			798",
			content:"
			        this.byteBufferIndex.flip();
			        this.byteBufferIndex.limit(CQ_STORE_UNIT_SIZE);
			        this.byteBufferIndex.putLong(offset);
			        this.byteBufferIndex.putInt(size);			
",
,
			fromLine:"			800",
			toLine:"			800",
			content:"
						
",
,
			fromLine:"			802",
			toLine:"			802",
			content:"
						
",
,
			fromLine:"			806",
			toLine:"			808",
			content:"
			            if (mappedFile.isFirstCreateInQueue() && cqOffset != 0 && mappedFile.getWrotePosition() == 0) {
			                this.minLogicOffset = expectLogicOffset;
			                this.mappedFileQueue.setFlushedWhere(expectLogicOffset);			
",
,
			fromLine:"			810",
			toLine:"			810",
			content:"
			                this.fillPreBlank(mappedFile, expectLogicOffset);			
",
,
			fromLine:"			818",
			toLine:"			819",
			content:"
			                if (expectLogicOffset < currentLogicOffset) {
			                    log.warn("Build  consume queue repeatedly, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}",			
",
,
			fromLine:"			824",
			toLine:"			824",
			content:"
			                if (expectLogicOffset != currentLogicOffset) {			
",
,
			fromLine:"			828",
			toLine:"			829",
			content:"
			                        currentLogicOffset,
			                        this.topic,			
",
,
			fromLine:"			834",
			toLine:"			834",
			content:"
			            }			
",
,
			fromLine:"			841",
			toLine:"			841",
			content:"
			    private void fillPreBlank(final MappedFile mappedFile, final long untilWhere) {			
",
,
			fromLine:"			846",
			toLine:"			847",
			content:"
			
			        int until = (int) (untilWhere % this.mappedFileQueue.getMappedFileSize());			
",
,
			fromLine:"			853",
			toLine:"			854",
			content:"
			    public SelectMappedBufferResult getIndexBuffer(final long startIndex) {
			        int mappedFileSize = this.mappedFileSize;			
",
,
			fromLine:"			856",
			toLine:"			856",
			content:"
			        if (offset >= this.getMinLogicOffset()) {			
",
,
			fromLine:"			906",
			toLine:"			906",
			content:"
			         */			
",
,
			fromLine:"			915",
			toLine:"			915",
			content:"
			    public CqUnit getLatestUnit() {			
",
,
			fromLine:"			957",
			toLine:"			957",
			content:"
			            }			
",
,
			fromLine:"			971",
			toLine:"			971",
			content:"
			                    // can't find ext content.Client will filter messages by tag also.			
",
,
			fromLine:"			1017",
			toLine:"			1017",
			content:"
			    public long getMinLogicOffset() {			
",
,
			fromLine:"			1021",
			toLine:"			1021",
			content:"
			    public void setMinLogicOffset(long minLogicOffset) {			
",
,
			fromLine:"			1026",
			toLine:"			1027",
			content:"
			    public long rollNextFile(final long nextBeginOffset) {
			        int mappedFileSize = this.mappedFileSize;			
",
,
			fromLine:"			1033",
			toLine:"			1033",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			1038",
			toLine:"			1038",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			1058",
			toLine:"			1059",
			content:"
			        this.setMaxPhysicOffset(-1);
			        this.minLogicOffset = 0;			
",
,
			fromLine:"			1072",
			toLine:"			1072",
			content:"
			    public long getMaxOffsetInQueue() {			
",
,
			fromLine:"			1077",
			toLine:"			1077",
			content:"
			    public void checkSelf() {			
",
,
			fromLine:"			1100",
			toLine:"			1101",
			content:"
			    @Override
			    public void swapMap(int reserveNum, long forceSwapIntervalMs, long normalSwapIntervalMs) {			
",
,
			fromLine:"			1106",
			toLine:"			1106",
			content:"
			    public void cleanSwappedMap(long forceCleanSwapIntervalMs) {			
",
,
			fromLine:"			1110",
			toLine:"			1113",
			content:"
			    @Override
			    public long estimateMessageCount(long from, long to, MessageFilter filter) {
			        long physicalOffsetFrom = from * CQ_STORE_UNIT_SIZE;
			        long physicalOffsetTo = to * CQ_STORE_UNIT_SIZE;			
",
,
			fromLine:"			1151",
			toLine:"			1151",
			content:"
			                        // skip physicalOffset and message length fields.			
",
,
			fromLine:"			1158",
			toLine:"			1158",
			content:"
			                        }			
",
,
			fromLine:"			1162",
			toLine:"			1162",
			content:"
			                        raw++;			
",
,
			fromLine:"			1187",
			toLine:"			1187",
			content:"
			            if (0 == raw) {			
",
,
			fromLine:"			1190",
			toLine:"			1190",
			content:"
			            }			
",
,
			fromLine:"			1192",
			toLine:"			1192",
			content:"
			        }			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/BatchConsumeQueue.java:
		[
			fromLine:"			17",
			toLine:"			46",
			content:"
			
			package org.apache.rocketmq.store.queue;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.function.Function;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MappedFileQueue;
			import org.apache.rocketmq.store.MessageFilter;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.logfile.MappedFile;
			
			public class BatchConsumeQueue implements ConsumeQueueInterface {			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			     */
			    public static final int CQ_STORE_UNIT_SIZE = 46;			
",
,
			fromLine:"			71",
			toLine:"			73",
			content:"
			    protected final MappedFileQueue mappedFileQueue;
			    protected MessageStore messageStore;
			    protected final String topic;			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			
			    protected final String storePath;			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			98",
			content:"
			        final String subfolder) {
			        this.storePath = storePath;
			        this.mappedFileSize = mappedFileSize;			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			
			        this.topic = topic;			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        if (StringUtils.isBlank(subfolder)) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        } else {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        boolean result = this.mappedFileQueue.load();			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    protected void doRefreshCache(Function<MappedFile, BatchOffsetIndex> offsetFunction) {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
						
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			                "offsetCacheSize: {}, minCachedMsgOffset: {}, maxCachedMsgOffset: {}, " +			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    protected void refreshCache() {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
						
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        try {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			    protected boolean isNewFile(MappedFile mappedFile) {			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
						
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			            while (true) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			                    if (offset >= 0 && size > 0 && msgBaseOffset >= 0 && batchSize > 0) {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			                    } else {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			                    if (index >= mappedFiles.size()) {			
",
,
			fromLine:"			251",
			toLine:"			251",
			content:"
			                        mappedFileOffset = 0;			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			                } else {			
",
,
			fromLine:"			271",
			toLine:"			272",
			content:"
			            minOffsetInQueue = -1;
			            minLogicOffset = -1;			
",
,
			fromLine:"			275",
			toLine:"			276",
			content:"
			        }
			        minLogicOffset = firstMappedFile.getFileFromOffset();			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			        MappedFile lastMappedFile = this.mappedFileQueue.getLastMappedFile();			
",
,
			fromLine:"			285",
			toLine:"			285",
			content:"
			            MappedFile lastTwoMappedFile = this.mappedFileQueue.getMappedFiles().get(this.mappedFileQueue.getMappedFiles().size() - 2);			
",
,
			fromLine:"			302",
			toLine:"			302",
			content:"
			    public long getMinLogicOffset() {			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			        CqUnit cqUnit = get(index);			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			        CqUnit cqUnit = getEarliestUnit();			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
						
",
,
			fromLine:"			392",
			toLine:"			392",
			content:"
						
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			                        } else {			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
						
",
,
			fromLine:"			439",
			toLine:"			440",
			content:"
			        reviseMaxAndMinOffsetInQueue();
			        log.info("Truncate batch logic file topic={} queue={} oldMinOffset={} oldMaxOffset={} minOffset={} maxOffset={} maxPhyOffsetHere={} maxPhyOffsetThere={}",			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
			    public int deleteExpiredFile(long minCommitLogPos) {			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
			                    int startPos = result.getByteBuffer().position();			
",
,
			fromLine:"			483",
			toLine:"			483",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			493",
			toLine:"			494",
			content:"
			                 */
			                log.warn("Correct min offset found null cq file topic:{} queue:{} files:{} minOffset:{} maxOffset:{}",			
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			        if (oldMinOffset != this.minOffsetInQueue) {			
",
,
			fromLine:"			505",
			toLine:"			505",
			content:"
			        final int maxRetries = 30;			
",
,
			fromLine:"			507",
			toLine:"			507",
			content:"
			        if (request.getMsgBaseOffset() < 0 || request.getBatchSize() < 0) {			
",
,
			fromLine:"			511",
			toLine:"			511",
			content:"
			        for (int i = 0; i < maxRetries && canWrite; i++) {			
",
,
			fromLine:"			515",
			toLine:"			516",
			content:"
			            if (result) {
			                if (BrokerRole.SLAVE == this.messageStore.getMessageStoreConfig().getBrokerRole()) {			
",
,
			fromLine:"			518",
			toLine:"			518",
			content:"
			                }			
",
,
			fromLine:"			522",
			toLine:"			522",
			content:"
			                // XXX: warn and notify me			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
			                } catch (InterruptedException e) {			
",
,
			fromLine:"			533",
			toLine:"			534",
			content:"
			        // XXX: warn and notify me
			        log.error("[NOTIFYME]batch consume queue can not write, {} {}", this.topic, this.queueId);			
",
,
			fromLine:"			557",
			toLine:"			557",
			content:"
						
",
,
			fromLine:"			561",
			toLine:"			561",
			content:"
						
",
,
			fromLine:"			563",
			toLine:"			564",
			content:"
			            if (System.currentTimeMillis() % 1000 == 0) {
			                log.warn("Build batch consume queue repeatedly, maxMsgPhyOffsetInCommitLog:{} offset:{} Topic: {} QID: {}",			
",
,
			fromLine:"			572",
			toLine:"			572",
			content:"
			            String flag = "LEVEL" + (behind / 10000);			
",
,
			fromLine:"			576",
			toLine:"			579",
			content:"
			        this.byteBufferItem.flip();
			        this.byteBufferItem.limit(CQ_STORE_UNIT_SIZE);
			        this.byteBufferItem.putLong(offset);
			        this.byteBufferItem.putInt(size);			
",
,
			fromLine:"			581",
			toLine:"			582",
			content:"
			        this.byteBufferItem.putLong(storeTime);
			        this.byteBufferItem.putLong(msgBaseOffset);			
",
,
			fromLine:"			591",
			toLine:"			592",
			content:"
			            if (appendRes) {
			                maxMsgPhyOffsetInCommitLog = offset;			
",
,
			fromLine:"			608",
			toLine:"			609",
			content:"
			
			    protected BatchOffsetIndex getMinMsgOffset(MappedFile mappedFile, boolean getBatchSize, boolean getStoreTime) {			
",
,
			fromLine:"			612",
			toLine:"			612",
			content:"
			        }			
",
,
			fromLine:"			615",
			toLine:"			615",
			content:"
						
",
,
			fromLine:"			617",
			toLine:"			617",
			content:"
			        boolean getStoreTime) {			
",
,
			fromLine:"			619",
			toLine:"			621",
			content:"
			        try {
			            return new BatchOffsetIndex(mappedFile, pos, sbr.getByteBuffer().getLong(MSG_BASE_OFFSET_INDEX),
			                getBatchSize ? sbr.getByteBuffer().getShort(MSG_BATCH_SIZE_INDEX) : 0,			
",
,
			fromLine:"			629",
			toLine:"			630",
			content:"
			
			    protected BatchOffsetIndex getMaxMsgOffset(MappedFile mappedFile, boolean getBatchSize, boolean getStoreTime) {			
",
,
			fromLine:"			633",
			toLine:"			634",
			content:"
			        }
			        int pos = mappedFile.getReadPosition() - CQ_STORE_UNIT_SIZE;			
",
,
			fromLine:"			638",
			toLine:"			638",
			content:"
			    private static int ceil(int pos) {			
",
,
			fromLine:"			656",
			toLine:"			656",
			content:"
			        MappedFile lastBcq = mappedFileQueue.getLastMappedFile();			
",
,
			fromLine:"			662",
			toLine:"			662",
			content:"
			        } else {			
",
,
			fromLine:"			669",
			toLine:"			669",
			content:"
			                    MappedFile firstBcq = mappedFileQueue.getFirstMappedFile();			
",
,
			fromLine:"			674",
			toLine:"			674",
			content:"
			                    }			
",
,
			fromLine:"			685",
			toLine:"			685",
			content:"
						
",
,
			fromLine:"			688",
			toLine:"			688",
			content:"
						
",
,
			fromLine:"			698",
			toLine:"			698",
			content:"
			            int left = targetMinOffset.getIndexPos(), right = targetMaxOffset.getIndexPos();			
",
,
			fromLine:"			715",
			toLine:"			715",
			content:"
			            MappedFile mappedFile = mappedFileQueue.getMappedFiles().get(i);			
",
,
			fromLine:"			744",
			toLine:"			744",
			content:"
			        MappedFile lastBcq = mappedFileQueue.getLastMappedFile();			
",
,
			fromLine:"			750",
			toLine:"			750",
			content:"
			        } else {			
",
,
			fromLine:"			757",
			toLine:"			757",
			content:"
			                    MappedFile firstBcq = mappedFileQueue.getFirstMappedFile();			
",
,
			fromLine:"			762",
			toLine:"			762",
			content:"
			                    }			
",
,
			fromLine:"			772",
			toLine:"			772",
			content:"
			            }			
",
,
			fromLine:"			775",
			toLine:"			775",
			content:"
						
",
,
			fromLine:"			789",
			toLine:"			789",
			content:"
			            }			
",
,
			fromLine:"			806",
			toLine:"			806",
			content:"
			            MappedFile mappedFile = mappedFileQueue.getMappedFiles().get(i);			
",
,
			fromLine:"			811",
			toLine:"			811",
			content:"
			            }			
",
,
			fromLine:"			851",
			toLine:"			851",
			content:"
			     */			
",
,
			fromLine:"			854",
			toLine:"			857",
			content:"
			        int mid = -1;
			        while (left <= right) {
			            mid = ceil((left + right) / 2);
			            long tmpValue = byteBuffer.getLong(mid + unitShift);			
",
,
			fromLine:"			859",
			toLine:"			859",
			content:"
			                //Means left and the right are the same			
",
,
			fromLine:"			864",
			toLine:"			864",
			content:"
			                }			
",
,
			fromLine:"			866",
			toLine:"			866",
			content:"
			                //Means the left + unitSize = right			
",
,
			fromLine:"			869",
			toLine:"			869",
			content:"
			                } else {			
",
,
			fromLine:"			875",
			toLine:"			876",
			content:"
			                    case LOWER:
			                        if (tmpValue < targetValue) {			
",
,
			fromLine:"			878",
			toLine:"			878",
			content:"
			                        } else {			
",
,
			fromLine:"			882",
			toLine:"			883",
			content:"
			                    case UPPER:
			                        if (tmpValue <= targetValue) {			
",
,
			fromLine:"			885",
			toLine:"			885",
			content:"
			                        } else {			
",
,
			fromLine:"			889",
			toLine:"			889",
			content:"
			                    default:			
",
,
			fromLine:"			901",
			toLine:"			901",
			content:"
			     */			
",
,
			fromLine:"			903",
			toLine:"			903",
			content:"
			        long targetValue) {			
",
,
			fromLine:"			905",
			toLine:"			908",
			content:"
			        int mid = -1;
			        while (left <= right) {
			            mid = ceil((left + right) / 2);
			            long tmpValue = byteBuffer.getLong(mid + unitShift);			
",
,
			fromLine:"			911",
			toLine:"			912",
			content:"
			            }
			            if (tmpValue > targetValue) {			
",
,
			fromLine:"			914",
			toLine:"			914",
			content:"
			            } else {			
",
,
			fromLine:"			916",
			toLine:"			918",
			content:"
			                    //the binary search is converging to the left, so maybe the one on the right of mid is the exactly correct one
			                    if (mid + unitSize <= maxRight
			                        && byteBuffer.getLong(mid + unitSize + unitShift) <= targetValue) {			
",
,
			fromLine:"			923",
			toLine:"			923",
			content:"
			                } else {			
",
,
			fromLine:"			968",
			toLine:"			968",
			content:"
			            int compactedOffset = sbr.getByteBuffer().getInt();			
",
,
			fromLine:"			998",
			toLine:"			998",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			1003",
			toLine:"			1003",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			1018",
			toLine:"			1018",
			content:"
			    public int getUnitSize() {			
",
,
			fromLine:"			1061",
			toLine:"			1062",
			content:"
			    @Override
			    public void swapMap(int reserveNum, long forceSwapIntervalMs, long normalSwapIntervalMs) {			
",
,
			fromLine:"			1129",
			toLine:"			1129",
			content:"
			                        // skip physicalOffset and message length fields.			
",
,
			fromLine:"			1139",
			toLine:"			1139",
			content:"
			                        scanCqUnitCount++;			
",
,
			fromLine:"			1141",
			toLine:"			1141",
			content:"
						
",
,
			fromLine:"			1146",
			toLine:"			1146",
			content:"
						
",
,
			fromLine:"			1164",
			toLine:"			1164",
			content:"
			            if (0 == raw) {			
",
,
			fromLine:"			1169",
			toLine:"			1169",
			content:"
			        }			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeQueueTest.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.store.queue;
			
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.StoreTestBase;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Test;
			
			import java.io.File;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Random;
			
			import static java.lang.String.format;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			        }			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        for (int i = 0; i < unitNum; i++) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        for (int i = 0; i < unitNum; i++) {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			            for (int i = 0; i < 100; i++) {			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			        for (int i = 0; i < unitNum; i++) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			        for (int i = 0; i < 100; i++) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			        }			
",
,
			fromLine:"			283",
			toLine:"			284",
			content:"
			        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(100 * ConsumeQueue.CQ_STORE_UNIT_SIZE);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/queue/SparseConsumeQueueTest.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.CommitLog;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Rule;
			import org.junit.Test;
			import org.junit.rules.TemporaryFolder;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.nio.file.StandardOpenOption;
			import java.util.concurrent.ThreadLocalRandom;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotNull;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void testLoad() throws IOException {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        long queueOffset = 1;			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public void testSearch() throws IOException {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    public void testCreateFile() throws IOException {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			        assertTrue(Files.exists(Paths.get(path, topic, String.valueOf(queueId), formatName)));			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreCleanFilesTest.java:
		[
			fromLine:"			17",
			toLine:"			55",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.util.concurrent.ConcurrentHashMap;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.config.FlushDiskType;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.index.IndexFile;
			import org.apache.rocketmq.store.index.IndexService;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.io.File;
			import java.lang.reflect.Field;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.util.ArrayList;
			import java.util.Calendar;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.UUID;
			
			import static org.apache.rocketmq.common.message.MessageDecoder.CHARSET_UTF8;
			import static org.apache.rocketmq.store.ConsumeQueue.CQ_STORE_UNIT_SIZE;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
			import static org.mockito.Mockito.spy;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			    private SocketAddress bornHost;			
",
,
			fromLine:"			66",
			toLine:"			68",
			content:"
			
			    private String topic = "test";
			    private String keys = "hello";			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    private int msgCount = fileCountCommitLog;			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			    public void init() throws Exception {
			        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
			            throws Exception {			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
			        int size = messageStore.getMessageStoreConfig().getMappedFileSizeConsumeQueue();			
",
,
			fromLine:"			416",
			toLine:"			416",
			content:"
			    private void buildAndPutMessagesToMessageStore(int msgCount) throws Exception {			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			        Map<String, String> properties = new HashMap<>(4);			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			        int commitLogEndFileMinBlankLength = 4 + 4;			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			            MessageExtBrokerInner msg = new MessageExtBrokerInner();			
",
,
			fromLine:"			428",
			toLine:"			429",
			content:"
			            msg.setBody(new byte[singleMsgBodyLen]);
			            msg.setKeys(keys);			
",
,
			fromLine:"			432",
			toLine:"			433",
			content:"
			            msg.setBornTimestamp(System.currentTimeMillis());
			            msg.setStoreHost(storeHost);			
",
,
			fromLine:"			461",
			toLine:"			462",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfigForTest();
			        messageStoreConfig.setMappedFileSizeCommitLog(mappedFileSize);			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/kv/CompactionLogTest.java:
		[
			fromLine:"			17",
			toLine:"			76",
			content:"
			
			package org.apache.rocketmq.store.kv;
			
			import com.google.common.collect.Lists;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.CommitLog;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.MappedFileQueue;
			import org.apache.rocketmq.store.MessageExtEncoder;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageSpinLock;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
			import org.apache.rocketmq.store.queue.SparseConsumeQueue;
			import org.junit.Assume;
			import org.junit.Before;
			import org.junit.Rule;
			import org.junit.Test;
			import org.junit.rules.TemporaryFolder;
			import org.mockito.stubbing.Answer;
			
			import java.io.File;
			import java.io.IOException;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.nio.ByteBuffer;
			import java.nio.charset.StandardCharsets;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.nio.file.StandardOpenOption;
			import java.security.DigestException;
			import java.security.NoSuchAlgorithmException;
			import java.util.Iterator;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			
			import static org.apache.rocketmq.store.kv.CompactionLog.COMPACTING_SUB_FOLDER;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyList;
			import static org.mockito.Mockito.doCallRealMethod;
			import static org.mockito.Mockito.doNothing;
			import static org.mockito.Mockito.doReturn;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			79",
			toLine:"			82",
			content:"
			    MessageStoreConfig storeConfig;
			    MessageStore defaultMessageStore;
			    CompactionPositionMgr positionMgr;
			    String topic = "ctopic";			
",
,
			fromLine:"			89",
			toLine:"			90",
			content:"
			    private static MessageExtEncoder encoder = new MessageExtEncoder(1024, new MessageStoreConfig());
			    private static SocketAddress storeHost;			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        try {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        try {			
",
,
			fromLine:"			117",
			toLine:"			120",
			content:"
			        doReturn(compactionCqFileSize).when(storeConfig).getCompactionCqMappedFileSize();
			        defaultMessageStore = mock(DefaultMessageStore.class);
			        doReturn(storeConfig).when(defaultMessageStore).getMessageStoreConfig();
			        positionMgr = mock(CompactionPositionMgr.class);			
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			174",
			toLine:"			175",
			content:"
			
			        Files.createDirectories(Paths.get(logPath, topic, String.valueOf(queueId)));			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        MappedFile mappedFile = new DefaultMappedFile(			
",
,
			fromLine:"			207",
			toLine:"			207",
			content:"
			        doCallRealMethod().when(clog).getOffsetMap(any());			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ConsumeQueueExt.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.store;
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import java.io.File;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import org.apache.rocketmq.store.logfile.MappedFile;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			public class ConsumeQueueExt {			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			
			    private final MappedFileQueue mappedFileQueue;
			    private final String topic;			
",
,
			fromLine:"			46",
			toLine:"			47",
			content:"
			
			    private final String storePath;			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			
			        this.storePath = storePath;			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			
			        this.topic = topic;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public long getTotalSize() {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
						
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
						
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        if (bufferResult == null) {			
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			            if (size > CqExtUnit.MAX_EXT_UNIT_SIZE) {			
",
,
			fromLine:"			201",
			toLine:"			202",
			content:"
			            }
			            if (this.mappedFileQueue.getMaxOffset() + size > MAX_REAL_OFFSET) {			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			            for (int i = 0; i < retryTimes; i++) {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			                if (mappedFile == null || mappedFile.isFull()) {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			                if (mappedFile == null) {			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			                final int wrotePosition = mappedFile.getWrotePosition();			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			                    fullFillToEnd(mappedFile, wrotePosition);			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        } catch (Throwable e) {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
						
",
,
			fromLine:"			257",
			toLine:"			258",
			content:"
			    public boolean load() {
			        boolean result = this.mappedFileQueue.load();			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			    public void checkSelf() {			
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			    public void recover() {			
",
,
			fromLine:"			301",
			toLine:"			301",
			content:"
			                mappedFileOffset = 0;			
",
,
			fromLine:"			305",
			toLine:"			305",
			content:"
						
",
,
			fromLine:"			311",
			toLine:"			313",
			content:"
			        processOffset += mappedFileOffset;
			        this.mappedFileQueue.setFlushedWhere(processOffset);
			        this.mappedFileQueue.setCommittedWhere(processOffset);			
",
,
			fromLine:"			326",
			toLine:"			326",
			content:"
						
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
						
",
,
			fromLine:"			334",
			toLine:"			334",
			content:"
			        for (MappedFile file : mappedFiles) {			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			            if (fileTailOffset < realOffset) {			
",
,
			fromLine:"			345",
			toLine:"			345",
			content:"
						
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
						
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			        if (cqExtUnit == null) {			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
						
",
,
			fromLine:"			375",
			toLine:"			375",
			content:"
			    public boolean flush(final int flushLeastPages) {			
",
,
			fromLine:"			382",
			toLine:"			382",
			content:"
			    public void destroy() {			
",
,
			fromLine:"			393",
			toLine:"			393",
			content:"
			    public long getMaxAddress() {			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			    public long getMinAddress() {			
",
,
			fromLine:"			426",
			toLine:"			428",
			content:"
			        public CqExtUnit(Long tagsCode, long msgStoreTime, byte[] filterBitMap) {
			            this.tagsCode = tagsCode == null ? 0 : tagsCode;
			            this.msgStoreTime = msgStoreTime;			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			         */			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			         */			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			         */			
",
,
			fromLine:"			468",
			toLine:"			469",
			content:"
			
			            this.tagsCode = buffer.getLong();			
",
,
			fromLine:"			476",
			toLine:"			477",
			content:"
			
			            if (this.filterBitMap == null || this.filterBitMap.length != this.bitMapSize) {			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
						
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
			        private byte[] write(final ByteBuffer container) {			
",
,
			fromLine:"			525",
			toLine:"			526",
			content:"
			            temp.putShort(this.size);
			            temp.putLong(this.tagsCode);			
",
,
			fromLine:"			529",
			toLine:"			529",
			content:"
			            if (this.bitMapSize > 0) {			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			        private int calcUnitSize() {			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
			        public long getTagsCode() {			
",
,
			fromLine:"			548",
			toLine:"			548",
			content:"
			        public void setTagsCode(final long tagsCode) {			
",
,
			fromLine:"			552",
			toLine:"			552",
			content:"
			        public long getMsgStoreTime() {			
",
,
			fromLine:"			556",
			toLine:"			556",
			content:"
			        public void setMsgStoreTime(final long msgStoreTime) {			
",
,
			fromLine:"			563",
			toLine:"			563",
			content:"
			            }			
",
,
			fromLine:"			567",
			toLine:"			567",
			content:"
			        public void setFilterBitMap(final byte[] filterBitMap) {			
",
,
			fromLine:"			587",
			toLine:"			587",
			content:"
			                return false;			
",
,
			fromLine:"			591",
			toLine:"			591",
			content:"
			                return false;			
",
,
			fromLine:"			593",
			toLine:"			593",
			content:"
			                return false;			
",
,
			fromLine:"			602",
			toLine:"			603",
			content:"
			            int result = (int) size;
			            result = 31 * result + (int) (tagsCode ^ (tagsCode >>> 32));			
",
,
			fromLine:"			605",
			toLine:"			605",
			content:"
			            result = 31 * result + (int) bitMapSize;			
",
,
			fromLine:"			613",
			toLine:"			614",
			content:"
			                "size=" + size +
			                ", tagsCode=" + tagsCode +			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
			                ", bitMapSize=" + bitMapSize +			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/DispatchRequest.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.util.Map;
			
			public class DispatchRequest {
			    private final String topic;
			    private final int queueId;
			    private final long commitLogOffset;
			    private int msgSize;
			    private final long tagsCode;
			    private final long storeTimestamp;
			    private final long consumeQueueOffset;			
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			
			    private final int sysFlag;			
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			    // for batch consume queue
			    private long  msgBaseOffset = -1;			
",
,
			fromLine:"			61",
			toLine:"			69",
			content:"
			    ) {
			        this.topic = topic;
			        this.queueId = queueId;
			        this.commitLogOffset = commitLogOffset;
			        this.msgSize = msgSize;
			        this.tagsCode = tagsCode;
			        this.storeTimestamp = storeTimestamp;
			        this.consumeQueueOffset = consumeQueueOffset;
			        this.msgBaseOffset = consumeQueueOffset;			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			
			        this.sysFlag = sysFlag;			
",
,
			fromLine:"			79",
			toLine:"			86",
			content:"
			    public DispatchRequest(String topic, int queueId, long consumeQueueOffset, long commitLogOffset, int size, long tagsCode) {
			        this.topic = topic;
			        this.queueId = queueId;
			        this.commitLogOffset = commitLogOffset;
			        this.msgSize = size;
			        this.tagsCode = tagsCode;
			        this.storeTimestamp = 0;
			        this.consumeQueueOffset = consumeQueueOffset;			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			        this.uniqKey = null;
			        this.sysFlag = 0;			
",
,
			fromLine:"			95",
			toLine:"			102",
			content:"
			    public DispatchRequest(int size) {
			        this.topic = "";
			        this.queueId = 0;
			        this.commitLogOffset = 0;
			        this.msgSize = size;
			        this.tagsCode = 0;
			        this.storeTimestamp = 0;
			        this.consumeQueueOffset = 0;			
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			        this.uniqKey = null;
			        this.sysFlag = 0;			
",
,
			fromLine:"			111",
			toLine:"			118",
			content:"
			    public DispatchRequest(int size, boolean success) {
			        this.topic = "";
			        this.queueId = 0;
			        this.commitLogOffset = 0;
			        this.msgSize = size;
			        this.tagsCode = 0;
			        this.storeTimestamp = 0;
			        this.consumeQueueOffset = 0;			
",
,
			fromLine:"			120",
			toLine:"			121",
			content:"
			        this.uniqKey = null;
			        this.sysFlag = 0;			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public long getCommitLogOffset() {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public int getMsgSize() {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public long getStoreTimestamp() {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public long getConsumeQueueOffset() {			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			    public String getKeys() {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public long getTagsCode() {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			    public int getSysFlag() {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    public long getPreparedTransactionOffset() {			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
			    public short getBatchSize() {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			    public void setBatchSize(short batchSize) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    public void setMsgSize(int msgSize) {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			    public long getMsgBaseOffset() {			
",
,
			fromLine:"			203",
			toLine:"			203",
			content:"
			    public void setMsgBaseOffset(long msgBaseOffset) {			
",
,
			fromLine:"			233",
			toLine:"			236",
			content:"
			        return "DispatchRequest{" +
			                "topic='" + topic + '\'' +
			                ", queueId=" + queueId +
			                ", commitLogOffset=" + commitLogOffset +			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			                ", success=" + success +
			                ", msgBaseOffset=" + msgBaseOffset +			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metrics/TieredStoreMetricsManager.java:
		[
			fromLine:"			16",
			toLine:"			75",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.metrics;
			
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.LongCounter;
			import io.opentelemetry.api.metrics.LongHistogram;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongGauge;
			import io.opentelemetry.sdk.metrics.Aggregation;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.View;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.metrics.NopLongCounter;
			import org.apache.rocketmq.common.metrics.NopLongHistogram;
			import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFetcher;
			import org.apache.rocketmq.tieredstore.core.MessageStoreFetcherImpl;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_STORAGE_SIZE;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_STORAGE_MEDIUM;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_STORAGE_TYPE;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.COUNTER_CACHE_ACCESS;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.COUNTER_CACHE_HIT;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.COUNTER_GET_MESSAGE_FALLBACK_TOTAL;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.COUNTER_MESSAGES_DISPATCH_TOTAL;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.COUNTER_MESSAGES_OUT_TOTAL;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.GAUGE_CACHE_BYTES;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.GAUGE_CACHE_COUNT;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.GAUGE_DISPATCH_BEHIND;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.GAUGE_DISPATCH_LATENCY;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.GAUGE_STORAGE_MESSAGE_RESERVE_TIME;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.HISTOGRAM_API_LATENCY;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.HISTOGRAM_DOWNLOAD_BYTES;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.HISTOGRAM_PROVIDER_RPC_LATENCY;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.HISTOGRAM_UPLOAD_BYTES;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_FILE_TYPE;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_QUEUE_ID;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_TOPIC;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.STORAGE_MEDIUM_BLOB;
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			                    long maxOffset = next.getMaxOffsetInQueue(mq.getTopic(), mq.getQueueId());			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			                    long maxOffset = next.getMaxOffsetInQueue(mq.getTopic(), mq.getQueueId());			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			                    long consumeQueueDispatchOffset = flatFile.getConsumeQueueMaxOffset();			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/Swappable.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.store;
						
",
,
			fromLine:"			22",
			toLine:"			22",
			content:"
			public interface Swappable {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/trace/TraceView.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.client.trace;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageExt;
						
",
,
			fromLine:"			26",
			toLine:"			31",
			content:"
			
			    private String msgId;
			    private String tags;
			    private String keys;
			    private String storeHost;
			    private String clientHost;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    private String offSetMsgId;			
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			    private long bornTime;
			    private String topic;
			    private String groupName;			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public String getTags() {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void setTags(String tags) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public String getKeys() {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public void setKeys(String keys) {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public String getStoreHost() {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public void setStoreHost(String storeHost) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public String getClientHost() {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    public void setClientHost(String clientHost) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    public int getCostTime() {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    public void setCostTime(int costTime) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    public long getTimeStamp() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public void setTimeStamp(long timeStamp) {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public String getGroupName() {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    public void setGroupName(String groupName) {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    public String getStatus() {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    public void setStatus(String status) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/logfile/MappedFile.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.store.logfile;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.util.Iterator;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.AppendMessageCallback;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.CompactionAppendMsgCallback;
			import org.apache.rocketmq.store.PutMessageContext;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.TransientStorePool;
			import org.apache.rocketmq.store.config.FlushDiskType;
						
",
,
			fromLine:"			354",
			toLine:"			356",
			content:"
			     * Init mapped file
			     * @param fileName file name
			     * @param fileSize file size			
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			     */			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/AllocateMappedFileService.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.io.IOException;
			import java.util.ServiceLoader;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.PriorityBlockingQueue;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.config.BrokerRole;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			import org.apache.rocketmq.store.logfile.MappedFile;
						
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			                        mappedFile = ServiceLoader.load(MappedFile.class).iterator().next();			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/SparseConsumeQueue.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.logfile.MappedFile;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.function.Function;
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            while (true) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			                    if (offset >= 0 && size > 0 && msgBaseOffset >= 0 && batchSize > 0) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			                    } else {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			                if (index >= mappedFiles.size()) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                    mappedFileOffset = 0;			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			
			        BatchOffsetIndex minOffset = getMinMsgOffset(targetBcq, false, false);			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			            int right = maxOffset.getIndexPos();			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			        MappedFile targetBcq = null;			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			                MappedFile firstBcq = mappedFileQueue.getFirstMappedFile();			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			                }			
",
,
			fromLine:"			201",
			toLine:"			202",
			content:"
			            MappedFile mappedFile = mappedFileQueue.getMappedFiles().get(i);
			            BatchOffsetIndex tmpMinMsgOffset = getMinMsgOffset(mappedFile, false, false);			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			        } catch (Exception e) {
			            log.error("Failed caching offset and time on BCQ [Topic: {}, QueueId: {}, File: {}]",			
",
,
			fromLine:"			247",
			toLine:"			247",
			content:"
			        if (file != null) {			
",
,
			fromLine:"			255",
			toLine:"			255",
			content:"
			            this.byteBufferItem.flip();			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			            if (!appendRes) {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
						
",
,
			fromLine:"			293",
			toLine:"			293",
			content:"
			        }			
",
,
			fromLine:"			318",
			toLine:"			318",
			content:"
			    private <T> T getMax(MappedFile mappedFile, Function<ByteBuffer, T> function) {			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();			
",
,
			fromLine:"			341",
			toLine:"			342",
			content:"
			    @Override
			    protected BatchOffsetIndex getMaxMsgOffset(MappedFile mappedFile, boolean getBatchSize, boolean getStoreTime) {			
",
,
			fromLine:"			346",
			toLine:"			347",
			content:"
			
			        ByteBuffer byteBuffer = mappedFile.sliceByteBuffer();			
",
,
			fromLine:"			359",
			toLine:"			359",
			content:"
			//                mappedFile.setCommittedPosition(i + CQ_STORE_UNIT_SIZE);			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
						
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			    private void refreshMaxCache() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/queue/RocksDBConsumeQueueOffsetTable.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import java.nio.ByteBuffer;
			import java.util.HashMap;
			import java.util.HashSet;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.rocksdb.ConsumeQueueRocksDBStorage;
			import org.rocksdb.ColumnFamilyHandle;
			import org.rocksdb.RocksDBException;
			import org.rocksdb.RocksIterator;
			import org.rocksdb.WriteBatch;
			
			import static org.apache.rocketmq.common.utils.DataConverter.CHARSET_UTF8;
			import static org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore.CTRL_1;
			
			public class RocksDBConsumeQueueOffsetTable {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private static final Logger ERROR_LOG = LoggerFactory.getLogger(LoggerName.STORE_ERROR_LOGGER_NAME);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    static {			
",
,
			fromLine:"			104",
			toLine:"			106",
			content:"
			
			    private final RocksDBConsumeQueueTable rocksDBConsumeQueueTable;
			    private final ConsumeQueueRocksDBStorage rocksDBStorage;			
",
,
			fromLine:"			121",
			toLine:"			123",
			content:"
			        ConsumeQueueRocksDBStorage rocksDBStorage, DefaultMessageStore messageStore) {
			        this.rocksDBConsumeQueueTable = rocksDBConsumeQueueTable;
			        this.rocksDBStorage = rocksDBStorage;			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void load() {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			139",
			content:"
			        final Map<ByteBuffer, Pair<ByteBuffer, DispatchRequest>> tempTopicQueueMaxOffsetMap) {
			        buildOffsetKeyAndValueByteBuffer(offsetBBPair, topicBytes, request);
			        ByteBuffer topicQueueId = offsetBBPair.getObject1();			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			        if (old == null) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            if (maxOffset >= oldMaxOffset) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			            DispatchRequest request = entry.getValue().getObject2();			
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			     * When topic is deleted, we clean up its offset info in rocksdb.
			     * @param topic			
",
,
			fromLine:"			174",
			toLine:"			177",
			content:"
			     */
			    public void destroyOffset(String topic, int queueId, WriteBatch writeBatch) throws RocksDBException {
			        final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);
			        final ByteBuffer minOffsetKey = buildOffsetKeyByteBuffer(topicBytes, queueId, false);			
",
,
			fromLine:"			180",
			toLine:"			181",
			content:"
			
			        final ByteBuffer maxOffsetKey = buildOffsetKeyByteBuffer(topicBytes, queueId, true);			
",
,
			fromLine:"			184",
			toLine:"			185",
			content:"
			
			        writeBatch.delete(this.offsetCFH, minOffsetKey.array());			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			    public long getMaxPhyOffset() throws RocksDBException {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			        try {			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			                    }			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			288",
			toLine:"			289",
			content:"
			            this.topicQueueMaxCqOffset.putIfAbsent(topicQueueId, maxCqOffset != null ? maxCqOffset : -1L);
			            if (messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
						
",
,
			fromLine:"			315",
			toLine:"			316",
			content:"
			
			    private Pair<Boolean, Long> isMinOffsetOk(final String topic, final int queueId, final long minPhyOffset) throws RocksDBException {			
",
,
			fromLine:"			321",
			toLine:"			321",
			content:"
						
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        }			
",
,
			fromLine:"			329",
			toLine:"			330",
			content:"
			        final long cqOffset = byteBuffer.getLong(OFFSET_CQ_OFFSET);
			        if (phyOffset >= minPhyOffset) {			
",
,
			fromLine:"			333",
			toLine:"			334",
			content:"
			            this.topicQueueMinOffset.putIfAbsent(topicQueueId, newPhyAndCQOffset);
			            if (messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			352",
			toLine:"			352",
			content:"
			        if (maxPhyOffset >= maxPhyOffsetInCQ) {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			            Long newMaxCqOffset = getHeapMaxCqOffset(topic, queueId);			
",
,
			fromLine:"			360",
			toLine:"			360",
			content:"
			    private void correctMaxPyhOffset(long maxPhyOffset) throws RocksDBException {			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			            }			
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
			            appendMaxPhyOffset(writeBatch, maxPhyOffset);			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			376",
			toLine:"			376",
			content:"
			        } finally {			
",
,
			fromLine:"			381",
			toLine:"			382",
			content:"
			    public long getMinCqOffset(String topic, int queueId) throws RocksDBException {
			        final long minPhyOffset = this.messageStore.getMinPhyOffset();			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			        final long cqOffset = pair.getObject2();			
",
,
			fromLine:"			387",
			toLine:"			388",
			content:"
			            if (phyAndCQOffset != null) {
			                if (this.messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
			        } catch (Exception e) {			
",
,
			fromLine:"			410",
			toLine:"			410",
			content:"
			    private ByteBuffer getMinPhyAndCqOffsetInKV(String topic, int queueId) throws RocksDBException {			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
			    private ByteBuffer getMaxPhyAndCqOffsetInKV(String topic, int queueId) throws RocksDBException {			
",
,
			fromLine:"			417",
			toLine:"			419",
			content:"
			
			    private ByteBuffer getPhyAndCqOffsetInKV(String topic, int queueId, boolean max) throws RocksDBException {
			        final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
						
",
,
			fromLine:"			429",
			toLine:"			431",
			content:"
			
			    private void putHeapMinCqOffset(final String topic, final int queueId, final long minPhyOffset, final long minCQOffset) {
			        String topicQueueId = buildTopicQueueId(topic, queueId);			
",
,
			fromLine:"			435",
			toLine:"			439",
			content:"
			
			    private void putHeapMaxCqOffset(final String topic, final int queueId, final long maxCQOffset) {
			        String topicQueueId = buildTopicQueueId(topic, queueId);
			        Long oldMaxCqOffset = this.topicQueueMaxCqOffset.put(topicQueueId, maxCQOffset);
			        if (oldMaxCqOffset != null && oldMaxCqOffset > maxCQOffset) {			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
						
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			        final long cqOffset, boolean max) throws RocksDBException {			
",
,
			fromLine:"			467",
			toLine:"			468",
			content:"
			        try {
			            final byte[] topicBytes = topic.getBytes(CHARSET_UTF8);			
",
,
			fromLine:"			470",
			toLine:"			470",
			content:"
						
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
			            writeBatch.put(this.offsetCFH, offsetKey.array(), offsetValue.array());			
",
,
			fromLine:"			474",
			toLine:"			475",
			content:"
			
			            if (max) {			
",
,
			fromLine:"			477",
			toLine:"			477",
			content:"
			            } else {			
",
,
			fromLine:"			480",
			toLine:"			480",
			content:"
			        } catch (RocksDBException e) {			
",
,
			fromLine:"			484",
			toLine:"			487",
			content:"
			            writeBatch.close();
			            this.rocksDBStorage.release();
			            if (messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {
			                ROCKSDB_LOG.warn("updateCqOffset({}). topic: {}, queueId: {}, phyOffset: {}, cqOffset: {}",			
",
,
			fromLine:"			492",
			toLine:"			492",
			content:"
						
",
,
			fromLine:"			495",
			toLine:"			496",
			content:"
			        // 'getMinOffsetInQueue' may correct minCqOffset and put it into heap
			        long minCQOffset = getMinCqOffset(topic, queueId);			
",
,
			fromLine:"			500",
			toLine:"			500",
			content:"
			            || minPhyAndCQOffset.getPhyOffset() > maxPhyOffsetInCQ) {			
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			                    + "minCqOffset: {}, phyAndCQOffset: {}",			
",
,
			fromLine:"			506",
			toLine:"			506",
			content:"
						
",
,
			fromLine:"			508",
			toLine:"			508",
			content:"
			        long low = minCQOffset;			
",
,
			fromLine:"			515",
			toLine:"			516",
			content:"
			        if (targetCQOffset == -1) {
			            if (maxCQOffset != minCQOffset) {			
",
,
			fromLine:"			518",
			toLine:"			519",
			content:"
			            }
			            if (messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			523",
			toLine:"			523",
			content:"
			        } else {			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
						
",
,
			fromLine:"			530",
			toLine:"			530",
			content:"
			        final long minCQOffset, final long minPhyOffset) throws RocksDBException {			
",
,
			fromLine:"			532",
			toLine:"			532",
			content:"
			        if (maxBB == null) {			
",
,
			fromLine:"			538",
			toLine:"			539",
			content:"
			
			        if (maxPhyOffset < minPhyOffset) {			
",
,
			fromLine:"			544",
			toLine:"			546",
			content:"
			        long high = maxCQOffset;
			        long low = minCQOffset;
			        PhyAndCQOffset phyAndCQOffset = this.rocksDBConsumeQueueTable.binarySearchInCQ(topic, queueId, high, low,			
",
,
			fromLine:"			551",
			toLine:"			552",
			content:"
			        if (targetCQOffset == -1) {
			            if (maxCQOffset != minCQOffset) {			
",
,
			fromLine:"			554",
			toLine:"			555",
			content:"
			            }
			            if (messageStore.getMessageStoreConfig().isEnableRocksDBLog()) {			
",
,
			fromLine:"			559",
			toLine:"			559",
			content:"
			        } else {			
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
						
",
,
			fromLine:"			572",
			toLine:"			573",
			content:"
			        final byte[] topicBytes, final DispatchRequest request) {
			        final ByteBuffer offsetKey = offsetBBPair.getObject1();			
",
,
			fromLine:"			575",
			toLine:"			576",
			content:"
			
			        final ByteBuffer offsetValue = offsetBBPair.getObject2();			
",
,
			fromLine:"			579",
			toLine:"			581",
			content:"
			
			    private ByteBuffer buildOffsetKeyByteBuffer(final byte[] topicBytes, final int queueId, final boolean max) {
			        ByteBuffer byteBuffer = ByteBuffer.allocate(OFFSET_KEY_LENGTH_WITHOUT_TOPIC_BYTES + topicBytes.length);			
",
,
			fromLine:"			585",
			toLine:"			587",
			content:"
			
			    private void buildOffsetKeyByteBuffer(final ByteBuffer byteBuffer, final byte[] topicBytes, final int queueId, final boolean max) {
			        byteBuffer.position(0).limit(OFFSET_KEY_LENGTH_WITHOUT_TOPIC_BYTES + topicBytes.length);			
",
,
			fromLine:"			590",
			toLine:"			590",
			content:"
						
",
,
			fromLine:"			592",
			toLine:"			594",
			content:"
			        final boolean max) {
			        byteBuffer.putInt(topicBytes.length).put(CTRL_1).put(topicBytes).put(CTRL_1);
			        if (max) {			
",
,
			fromLine:"			596",
			toLine:"			596",
			content:"
			        } else {			
",
,
			fromLine:"			598",
			toLine:"			599",
			content:"
			        }
			        byteBuffer.put(CTRL_1).putInt(queueId);			
",
,
			fromLine:"			602",
			toLine:"			604",
			content:"
			
			    private void buildOffsetValueByteBuffer(final ByteBuffer byteBuffer, final long phyOffset, final long cqOffset) {
			        byteBuffer.position(0).limit(OFFSET_VALUE_LENGTH);			
",
,
			fromLine:"			609",
			toLine:"			609",
			content:"
			        final ByteBuffer byteBuffer = ByteBuffer.allocate(OFFSET_VALUE_LENGTH);			
",
,
			fromLine:"			613",
			toLine:"			615",
			content:"
			
			    private void buildOffsetValueByteBuffer0(final ByteBuffer byteBuffer, final long phyOffset, final long cqOffset) {
			        byteBuffer.putLong(phyOffset).putLong(cqOffset);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java:
		[
			fromLine:"			16",
			toLine:"			45",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.broker.transaction.OperationResult;
			import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
			import org.apache.rocketmq.common.TopicFilterType;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.config.BrokerRole;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_TOPIC;
						
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			                case PUT_OK:			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/mqtrace/ConsumeMessageContext.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.broker.mqtrace;
			
			import java.util.Map;
			
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			public class ConsumeMessageContext {
			    private String consumerGroup;
			    private String topic;
			    private Integer queueId;
			    private String clientHost;			
",
,
			fromLine:"			30",
			toLine:"			33",
			content:"
			    private Map<String, Long> messageIds;
			    private int bodyLength;
			    private boolean success;
			    private String status;			
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			
			    private String accountAuthType;
			    private String accountOwnerParent;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public String getClientHost() {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void setClientHost(String clientHost) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public String getStoreHost() {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public void setStoreHost(String storeHost) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public boolean isSuccess() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void setSuccess(boolean success) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public String getStatus() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setStatus(String status) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public Object getMqTraceContext() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public void setMqTraceContext(Object mqTraceContext) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public int getBodyLength() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public void setBodyLength(int bodyLength) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public String getAccountAuthType() {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public void setAccountAuthType(String accountAuthType) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public String getAccountOwnerParent() {			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			    public void setAccountOwnerParent(String accountOwnerParent) {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public String getAccountOwnerSelf() {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			    public void setAccountOwnerSelf(String accountOwnerSelf) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    public String getCommercialOwner() {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			    public void setCommercialOwner(final String commercialOwner) {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			    public void setNamespace(String namespace) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/timer/TimerWheel.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.store.timer;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import java.io.File;
			import java.io.FileNotFoundException;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			40",
			content:"
			    public final int precisionMs;
			    private String fileName;
			    private final RandomAccessFile randomAccessFile;
			    private final FileChannel fileChannel;			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        this.precisionMs = precisionMs;			
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			        try {
			            randomAccessFile = new RandomAccessFile(this.fileName, "rw");
			            if (file.exists() && randomAccessFile.length() != 0 &&			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			                throw new RuntimeException(String.format("Timer wheel length:%d != expected:%s",			
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			            }
			            randomAccessFile.setLength(wheelLength);
			            fileChannel = randomAccessFile.getChannel();
			            mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, wheelLength);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			            this.byteBuffer = ByteBuffer.allocateDirect(wheelLength);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        } catch (FileNotFoundException e) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        // unmap mappedByteBuffer			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        try {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			104",
			toLine:"			105",
			content:"
			        bf.limit(wheelLength);
			        mappedByteBuffer.position(0);			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			        for (int i = 0; i < wheelLength; i++) {
			            if (bf.get(i) != mappedByteBuffer.get(i)) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        }			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        Slot slot = getRawSlot(timeMs);			
",
,
			fromLine:"			133",
			toLine:"			134",
			content:"
			
			    public void putSlot(long timeMs, long firstPos, long lastPos) {			
",
,
			fromLine:"			137",
			toLine:"			139",
			content:"
			        // The previous version's precision is fixed at 1000ms and it store timeMs / 1000 in slot.
			        localBuffer.get().putLong(timeMs / precisionMs);
			        localBuffer.get().putLong(firstPos);			
",
,
			fromLine:"			141",
			toLine:"			147",
			content:"
			    }
			    public void putSlot(long timeMs, long firstPos, long lastPos, int num, int magic) {
			        localBuffer.get().position(getSlotIndex(timeMs) * Slot.SIZE);
			        localBuffer.get().putLong(timeMs / precisionMs);
			        localBuffer.get().putLong(firstPos);
			        localBuffer.get().putLong(lastPos);
			        localBuffer.get().putInt(num);			
",
,
			fromLine:"			150",
			toLine:"			151",
			content:"
			
			    public void reviseSlot(long timeMs, long firstPos, long lastPos, boolean force) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			            if (force) {			
",
,
			fromLine:"			158",
			toLine:"			159",
			content:"
			        } else {
			            if (IGNORE != firstPos) {			
",
,
			fromLine:"			163",
			toLine:"			164",
			content:"
			            }
			            if (IGNORE != lastPos) {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			    public long getNum(long timeMs) {			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/timer/TimerWheelTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.store.timer;
			
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.io.IOException;
			
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			30",
			toLine:"			32",
			content:"
			
			    private final int slotsTotal = 30;
			    private final int precisionMs = 500;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        baseDir = StoreTestUtils.createBaseDir();			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public void testPutGet() {			
",
,
			fromLine:"			46",
			toLine:"			49",
			content:"
			
			        Slot first = timerWheel.getSlot(delayedTime);
			        assertEquals(-1, first.timeMs);
			        assertEquals(-1, first.firstPos);			
",
,
			fromLine:"			51",
			toLine:"			57",
			content:"
			
			        timerWheel.putSlot(delayedTime, 1, 2, 3, 4);
			        Slot second = timerWheel.getSlot(delayedTime);
			        assertEquals(delayedTime, second.timeMs);
			        assertEquals(1, second.firstPos);
			        assertEquals(2, second.lastPos);
			        assertEquals(3, second.num);			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void testGetNum() {			
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			
			        timerWheel.putSlot(delayedTime, 1, 2, 3, 4);
			        assertEquals(3, timerWheel.getNum(delayedTime));			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			
			        timerWheel.putSlot(delayedTime + 5 * precisionMs, 5, 6, 7, 8);
			        assertEquals(7, timerWheel.getNum(delayedTime + 5 * precisionMs));			
",
,
			fromLine:"			75",
			toLine:"			78",
			content:"
			    public void testCheckPhyPos() {
			        long delayedTime = defaultDelay + precisionMs;
			        timerWheel.putSlot(delayedTime, 1, 100, 1, 0);
			        timerWheel.putSlot(delayedTime + 5 * precisionMs, 2, 200, 2, 0);			
",
,
			fromLine:"			80",
			toLine:"			84",
			content:"
			
			        assertEquals(1, timerWheel.checkPhyPos(delayedTime, 50));
			        assertEquals(2, timerWheel.checkPhyPos(delayedTime, 100));
			        assertEquals(3, timerWheel.checkPhyPos(delayedTime, 200));
			        assertEquals(Long.MAX_VALUE, timerWheel.checkPhyPos(delayedTime, 300));			
",
,
			fromLine:"			86",
			toLine:"			90",
			content:"
			
			        assertEquals(2, timerWheel.checkPhyPos(delayedTime + 5 * precisionMs, 50));
			        assertEquals(2, timerWheel.checkPhyPos(delayedTime + 5 * precisionMs, 100));
			        assertEquals(3, timerWheel.checkPhyPos(delayedTime + 5 * precisionMs, 200));
			        assertEquals(Long.MAX_VALUE, timerWheel.checkPhyPos(delayedTime + 5 * precisionMs, 300));			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			    public void testPutRevise() {
			        long delayedTime = System.currentTimeMillis() / precisionMs * precisionMs + 3 * precisionMs;			
",
,
			fromLine:"			98",
			toLine:"			102",
			content:"
			
			        timerWheel.reviseSlot(delayedTime + 5 * precisionMs, 3, 4, false);
			        Slot second = timerWheel.getSlot(delayedTime);
			        assertEquals(delayedTime, second.timeMs);
			        assertEquals(1, second.firstPos);			
",
,
			fromLine:"			104",
			toLine:"			107",
			content:"
			
			        timerWheel.reviseSlot(delayedTime, TimerWheel.IGNORE, 4, false);
			        Slot three = timerWheel.getSlot(delayedTime);
			        assertEquals(1, three.firstPos);			
",
,
			fromLine:"			109",
			toLine:"			112",
			content:"
			
			        timerWheel.reviseSlot(delayedTime, 3, TimerWheel.IGNORE, false);
			        Slot four = timerWheel.getSlot(delayedTime);
			        assertEquals(3, four.firstPos);			
",
,
			fromLine:"			114",
			toLine:"			118",
			content:"
			
			        timerWheel.reviseSlot(delayedTime + 2 * slotsTotal * precisionMs, TimerWheel.IGNORE, 5, true);
			        Slot five = timerWheel.getRawSlot(delayedTime);
			        assertEquals(delayedTime + 2 * slotsTotal * precisionMs, five.timeMs);
			        assertEquals(5, five.firstPos);			
",
,
			fromLine:"			123",
			toLine:"			125",
			content:"
			    public void testRecoveryData() throws Exception {
			        long delayedTime = System.currentTimeMillis() / precisionMs * precisionMs + 5 * precisionMs;
			        timerWheel.putSlot(delayedTime, 1, 2, 3, 4);			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			129",
			toLine:"			133",
			content:"
			        Slot slot = tmpWheel.getSlot(delayedTime);
			        assertEquals(delayedTime, slot.timeMs);
			        assertEquals(1, slot.firstPos);
			        assertEquals(2, slot.lastPos);
			        assertEquals(3, slot.num);			
",
,
			fromLine:"			140",
			toLine:"			141",
			content:"
			    public void testRecoveryFixedTTL() throws Exception {
			        timerWheel.flush();			
",
,
			fromLine:"			146",
			toLine:"			147",
			content:"
			    public void shutdown() {
			        if (null != timerWheel) {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/timer/Slot.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.store.timer;
						
",
,
			fromLine:"			28",
			toLine:"			32",
			content:"
			    public static final short SIZE = 32;
			    public final long timeMs; //delayed time
			    public final long firstPos;
			    public final long lastPos;
			    public final int num;			
",
,
			fromLine:"			35",
			toLine:"			39",
			content:"
			    public Slot(long timeMs, long firstPos, long lastPos) {
			        this.timeMs = timeMs;
			        this.firstPos = firstPos;
			        this.lastPos = lastPos;
			        this.num = 0;			
",
,
			fromLine:"			43",
			toLine:"			47",
			content:"
			    public Slot(long timeMs, long firstPos, long lastPos, int num, int magic) {
			        this.timeMs = timeMs;
			        this.firstPos = firstPos;
			        this.lastPos = lastPos;
			        this.num = num;			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/metrics/DefaultStoreMetricsManager.java:
		[
			fromLine:"			16",
			toLine:"			66",
			content:"
			 */
			package org.apache.rocketmq.store.metrics;
			
			import com.google.common.collect.Lists;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.LongCounter;
			import io.opentelemetry.api.metrics.LongHistogram;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongGauge;
			import io.opentelemetry.sdk.metrics.Aggregation;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.View;
			import io.opentelemetry.sdk.metrics.ViewBuilder;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.metrics.NopLongCounter;
			import org.apache.rocketmq.common.metrics.NopLongHistogram;
			import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.timer.Slot;
			import org.apache.rocketmq.store.timer.TimerMessageStore;
			import org.apache.rocketmq.store.timer.TimerMetrics;
			import org.apache.rocketmq.store.timer.TimerWheel;
			
			import java.io.File;
			import java.util.Arrays;
			import java.util.List;
			import java.util.function.Supplier;
			
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.COUNTER_TIMER_DEQUEUE_TOTAL;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.COUNTER_TIMER_ENQUEUE_TOTAL;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.DEFAULT_STORAGE_MEDIUM;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.DEFAULT_STORAGE_TYPE;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_STORAGE_DISPATCH_BEHIND;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_STORAGE_FLUSH_BEHIND;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_STORAGE_MESSAGE_RESERVE_TIME;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_STORAGE_SIZE;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMER_DEQUEUE_LAG;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMER_DEQUEUE_LATENCY;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMER_ENQUEUE_LAG;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMER_ENQUEUE_LATENCY;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMER_MESSAGE_SNAPSHOT;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.GAUGE_TIMING_MESSAGES;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.HISTOGRAM_DELAY_MSG_LATENCY;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_STORAGE_MEDIUM;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_STORAGE_TYPE;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_TIMING_BOUND;
			import static org.apache.rocketmq.store.metrics.DefaultStoreMetricsConstant.LABEL_TOPIC;
						
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			                            Slot slotEach = timerWheel.getSlot(currTime + (long) j * precisionMs);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.test.base;
			
			import com.google.common.collect.ImmutableList;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import java.util.concurrent.ForkJoinPool;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Function;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.consumer.MQPullConsumer;
			import org.apache.rocketmq.client.consumer.MQPushConsumer;
			import org.apache.rocketmq.client.producer.MQProducer;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.client.rmq.RMQTransactionalProducer;
			import org.apache.rocketmq.test.clientinterface.AbstractMQConsumer;
			import org.apache.rocketmq.test.clientinterface.AbstractMQProducer;
			import org.apache.rocketmq.test.clientinterface.MQConsumer;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.AbstractListener;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
			import org.apache.rocketmq.test.util.MQRandomUtils;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminExt;
			import org.junit.Assert;
			
			import static org.apache.rocketmq.test.base.IntegrationTestBase.initMQAdmin;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			    public static String initTopicWithName(String topicName) {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			    public static String initTopicWithName(String topicName, TopicMessageType topicMessageType) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    public static String initTopicOnSampleTopicBroker(String topicName, String sampleTopic) {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			    public static String initTopicOnSampleTopicBroker(String topicName, String sampleTopic, TopicMessageType topicMessageType) {			
",
,
			fromLine:"			224",
			toLine:"			224",
			content:"
			    public static RMQNormalProducer getProducer(String nsAddr, String topic) {			
",
,
			fromLine:"			227",
			toLine:"			228",
			content:"
			
			    public static RMQNormalProducer getProducer(String nsAddr, String topic, boolean useTLS) {			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
						
",
,
			fromLine:"			267",
			toLine:"			267",
			content:"
			                                                AbstractListener listener) {			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
						
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
			        String consumerGroup = initConsumerGroup();			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			                                                String subExpression, AbstractListener listener) {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
						
",
,
			fromLine:"			283",
			toLine:"			284",
			content:"
			                                                String subExpression, AbstractListener listener, boolean useTLS) {
			        RMQNormalConsumer consumer = ConsumerFactory.getRMQNormalConsumer(nsAddr, consumerGroup,			
",
,
			fromLine:"			289",
			toLine:"			289",
			content:"
			        mqClients.add(consumer);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.balance;
			
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class NormalMsgDynamicBalanceIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			        int msgSize = 400;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        boolean balance = VerifyUtils.verifyBalance(msgSize,			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			                consumer1.getListener().getAllUndupMsgBody()).size() - msgSize,			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			        int msgSize = 400;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			            "*", new RMQNormalListener());			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        consumer3.shutdown();			
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        boolean balance = VerifyUtils.verifyBalance(msgSize,			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			                consumer1.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        // Without message queue listener			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.balance;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class NormalMsgStaticBalanceIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			        int msgSize = 400;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        boolean balance = VerifyUtils.verifyBalance(msgSize,			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			                consumer1.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			79",
			toLine:"			83",
			content:
{
        String consumerGroup = initConsumerGroup();
        logger.info("use group: ", consumerGroup);
        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());						
}
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			                VerifyUtils			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                    .size(),			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			                    consumer2.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                    consumer3.getListener().getAllUndupMsgBody()).size(),			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddAndCrashIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.cluster;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.balance.NormalMsgStaticBalanceIT;
			import org.apache.rocketmq.test.client.mq.MQAsyncProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class DynamicAddAndCrashIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        int msgSize = 150;			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        int msgSize = 150;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			            "*", new RMQNormalListener());			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.cluster;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.balance.NormalMsgStaticBalanceIT;
			import org.apache.rocketmq.test.client.mq.MQAsyncProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class DynamicAddConsumerIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        int msgSize = 100;			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        int msgSize = 100;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            "*", new RMQNormalListener());			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicCrashConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.cluster;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.balance.NormalMsgStaticBalanceIT;
			import org.apache.rocketmq.test.client.mq.MQAsyncProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class DynamicCrashConsumerIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			        int msgSize = 100;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			        int msgSize = 100;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            "*", new RMQNormalListener());			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.topic;
			
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        String topic2 = initTopic();			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        consumer1.subscribe(topic2, "*");			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        String tag = "jueyin_tag";			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        consumer1.subscribe(topic2, tag);			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        producer.send(MQMessageFactory.getMsg(topic1, msgSize));			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        String tag2 = "jueyin_tag_2";			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        consumer1.subscribe(topic2, tag1);			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        producer.send(MQMessageFactory.getMsg(topic1, msgSize));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgDynamicRebalanceIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.producer.order;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.balance.NormalMsgStaticBalanceIT;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OrderMsgDynamicRebalanceIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(NormalMsgStaticBalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			            new RMQOrderListener("1"));			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            new RMQOrderListener("1"));			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			            "*", new RMQOrderListener("2"));			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgRebalanceIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.producer.order;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OrderMsgRebalanceIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(OrderMsgRebalanceIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			        int msgSize = 10;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			
			        boolean balance = VerifyUtils.verifyBalance(producer.getAllMsgBody().size(),			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                consumer1.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			        int msgSize = 20;
			        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			            "*", new RMQOrderListener());			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            "*", new RMQOrderListener());			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        boolean balance = VerifyUtils			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                VerifyUtils			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			                    .size(),			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			                    consumer2.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			                    consumer3.getListener().getAllUndupMsgBody()).size(),			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			                    consumer4.getListener().getAllUndupMsgBody()).size());			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java:
		[
			fromLine:"			17",
			toLine:"			49",
			content:"
			
			package org.apache.rocketmq.test.smoke;
			
			import com.google.common.collect.ImmutableList;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.base.IntegrationTestBase;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.awaitility.Awaitility;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import java.time.Duration;
			import java.util.List;
			import java.util.concurrent.atomic.AtomicReference;
			import java.util.function.Function;
			import java.util.stream.Collectors;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        producer = getProducer(NAMESRV_ADDR, topic);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.tag;
			
			import java.util.List;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.factory.TagMessage;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class MulTagSubIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			        String consumerId = initConsumerGroup();
			        logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			63",
			toLine:"			65",
			content:"
			            new RMQNormalListener());
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			81",
			toLine:"			85",
			content:"
			
			        producer.send(tag1, msgSize);
			        Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
			        List<Object> tag2Msgs = MQMessageFactory.getRMQMessage(tag2, topic, msgSize);
			        producer.send(tag2Msgs);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			            CONSUME_TIME);			
",
,
			fromLine:"			100",
			toLine:"			101",
			content:"
			
			        TagMessage tagMessage = new TagMessage(tags, topic, msgSize);			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        Assert.assertEquals("Not all sent succeeded", msgSize * tags.length,			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			
			        TagMessage tagMessage = new TagMessage(tags, topic, msgSize);			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        Assert.assertEquals("Not all sent succeeded", msgSize * tags.length,			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
						
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			
			        TagMessage tagMessage = new TagMessage(tags, topic, msgSize);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
						
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        Assert.assertEquals("Not all sent succeeded", msgSize * tags.length,			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        assertThat(VerifyUtils			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWith1ConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.tag;
			
			import java.util.List;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class TagMessageWith1ConsumerIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			        String consumerId = initConsumerGroup();
			        logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));			
",
,
			fromLine:"			58",
			toLine:"			62",
			content:"
			        int msgSize = 10;
			        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, tag, new RMQNormalListener());
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			73",
			toLine:"			75",
			content:"
			            new RMQNormalListener());
			        producer.send(msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			89",
			toLine:"			91",
			content:"
			            new RMQNormalListener());
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			105",
			toLine:"			107",
			content:"
			            new RMQNormalListener());
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			121",
			toLine:"			123",
			content:"
			            new RMQNormalListener());
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			139",
			toLine:"			140",
			content:"
			
			        List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);			
",
,
			fromLine:"			142",
			toLine:"			146",
			content:"
			
			        producer.send(tag1Msgs);
			        producer.send(tag2Msgs);
			        producer.send(10);
			        Assert.assertEquals("Not all are sent", msgSize * 3, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
						
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			162",
			toLine:"			163",
			content:"
			
			        List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);			
",
,
			fromLine:"			165",
			toLine:"			168",
			content:"
			
			        producer.send(tag1Msgs);
			        producer.send(tag2Msgs);
			        Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
						
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			184",
			toLine:"			185",
			content:"
			
			        List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);			
",
,
			fromLine:"			187",
			toLine:"			190",
			content:"
			
			        producer.send(tag1Msgs);
			        producer.send(tag2Msgs);
			        producer.send(10);			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.tag;
			
			import java.util.Collection;
			import java.util.List;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.factory.TagMessage;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class TagMessageWithMulConsumerIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			        String consumerId = initConsumerGroup();
			        logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			66",
			toLine:"			71",
			content:"
			
			        List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);
			        producer.send(tag1Msgs);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
			        List<Object> tag2Msgs = MQMessageFactory.getRMQMessage(tag2, topic, msgSize);
			        producer.send(tag2Msgs);			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            .containsExactlyElementsIn(MQMessageFactory.getMessageBody(tag1Msgs));			
",
,
			fromLine:"			91",
			toLine:"			92",
			content:"
			
			        TagMessage tagMessage = new TagMessage(tags, topic, msgSize);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        List<Object> tagMsgs = tagMessage.getMixedTagMessages();			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        Assert.assertEquals("Not all are sent", msgSize * tags.length,			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            .containsExactlyElementsIn(tagMessage.getMessageBodyByTag(tags[0]));			
",
,
			fromLine:"			122",
			toLine:"			123",
			content:"
			
			        TagMessage tagMessage = new TagMessage(tags, topic, msgSize);			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        List<Object> tagMsgs = tagMessage.getMixedTagMessages();			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        Assert.assertEquals("Not all are sent", msgSize * tags.length,			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			            .containsExactlyElementsIn(tagMessage.getAllTagMessageBody());			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			            new RMQNormalListener());			
",
,
			fromLine:"			164",
			toLine:"			166",
			content:"
			
			        producer.send(msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
						
",
,
			fromLine:"			170",
			toLine:"			171",
			content:"
			        List<Object> tagMsgs = tagMessage.getMixedTagMessages();
			        producer.send(tagMsgs);			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
						
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			            .containsExactlyElementsIn(tagMessage.getAllTagMessageBody());			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			            .containsExactlyElementsIn(tagMessage.getMessageBodyByTag(tags[0]));			
",
,
			fromLine:"			192",
			toLine:"			192",
			content:"
			            .containsExactlyElementsIn(tagMessage.getMessageBodyByTag(tags[0]));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithSameGroupConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.tag;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.RandomUtils;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class TagMessageWithSameGroupConsumerIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s !", topic));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        String msgBodyDCName = RandomUtils.getStringByUUID();			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			            new RMQNormalListener(originMsgDCName, msgBodyDCName));			
",
,
			fromLine:"			62",
			toLine:"			64",
			content:"
			            new RMQNormalListener(originMsgDCName, msgBodyDCName));
			        producer.send(tag, msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			            new RMQNormalListener(originMsgDCName, msgBodyDCName));			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        TestUtils.waitForMoment(5);			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            new RMQNormalListener(originMsgDCName, msgBodyDCName));			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
						
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/OneConsumerMulTopicIT.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.topic;
			
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        String topic2 = initTopic();			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        String tag = "jueyin_tag";			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        producer.send(MQMessageFactory.getMsg(topic1, msgSize));			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			        String tag2 = "jueyin_tag_2";			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        producer.send(MQMessageFactory.getMsg(topic1, msgSize));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.producer.async;
			
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class AsyncSendWithMessageQueueIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			        int queueId = 0;
			        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			58",
			toLine:"			60",
			content:"
			
			        producer.asyncSend(msgSize, mq);
			        producer.waitForResponse(10 * 1000);			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			75",
			content:"
			        consumer.clearMsg();
			        producer.getSuccessSendResult().clear();
			        mq = new MessageQueue(topic, BROKER2_NAME, queueId);
			        producer.asyncSend(msgSize, mq);
			        producer.waitForResponse(10 * 1000);			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.producer.async;
			
			import java.util.List;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        final int queueId = 0;			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			        });
			        producer.waitForResponse(5 * 1000);			
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        consumer.clearMsg();			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			        });
			        producer.waitForResponse(5 * 1000);			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.test.client.producer.async;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class AsyncSendWithOnlySendCallBackIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			53",
			toLine:"			56",
			content:"
			        int msgSize = 20;
			        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
			        producer.asyncSend(msgSize);
			        producer.waitForResponse(10 * 1000);			
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageUserPropIT.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.test.client.producer.exception.msg;
			
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.balance.NormalMsgStaticBalanceIT;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.test.client.producer.oneway;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OneWaySendIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        int msgSize = 20;			
",
,
			fromLine:"			55",
			toLine:"			57",
			content:"
			
			        producer.sendOneWay(msgSize);
			        producer.waitForResponse(5 * 1000);			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithMQIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.producer.oneway;
			
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OneWaySendWithMQIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private static boolean sendFail = false;
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			        int queueId = 0;
			        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			
			        producer.sendOneWay(msgSize, mq);			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithSelectorIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.client.producer.oneway;
			
			import java.util.List;
			import org.apache.rocketmq.client.producer.MessageQueueSelector;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.consumer.tag.TagMessageWith1ConsumerIT;
			import org.apache.rocketmq.test.client.rmq.RMQAsyncSendProducer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OneWaySendWithSelectorIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(TagMessageWith1ConsumerIT.class);
			    private static boolean sendFail = false;
			    private RMQAsyncSendProducer producer = null;			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("user topic[%s]!", topic));			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        final int queueId = 0;			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        });			
",
,
			fromLine:"			74",
			toLine:"			75",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
						
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        });			
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            consumer.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.producer.order;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OrderMsgIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(OrderMsgIT.class);			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    private RMQNormalConsumer consumer = null;			
",
,
			fromLine:"			44",
			toLine:"			47",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));
			        producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        int msgSize = 20;			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			            msgSize);			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        int msgSize = 10;			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            msgSize);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
						
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgWithTagIT.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.test.client.producer.order;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.MQWait;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class OrderMsgWithTagIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(OrderMsgIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        String tag = "jueyin_tag";			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag);			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
						
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        String tag = "jueyin_tag";			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        String tag2 = "jueyin_tag_2";			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag2);
			        producer.send(mqMsgs.getMsgsWithMQ());			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        mqMsgs = new MessageQueueMsg(mqs, msgSize, tag1);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        String tag2 = "jueyin_tag_2";			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			            new RMQOrderListener("consumer1"));			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			            new RMQOrderListener("consumer2"));			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag1);			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        mqMsgs = new MessageQueueMsg(mqs, msgSize, tag2);			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			        String tag2 = "jueyin_tag_2";			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
						
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag1);			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        mqMsgs = new MessageQueueMsg(mqs, msgSize, tag2);			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.client.producer.querymsg;
			
			import org.apache.rocketmq.common.message.MessageClientExt;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class QueryMsgByIdIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(QueryMsgByIdIT.class);			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    private RMQNormalConsumer consumer = null;			
",
,
			fromLine:"			44",
			toLine:"			47",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));
			        producer = getProducer(NAMESRV_ADDR, topic);			
",
,
			fromLine:"			58",
			toLine:"			61",
			content:"
			        int msgSize = 20;
			        producer.send(msgSize);
			        Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
			        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            TestUtils.waitForMoment(3000);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.client.producer.transaction;
			
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.common.Pair;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQTransactionalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			import static com.google.common.truth.Truth.assertThat;
			
			import java.util.List;
			import java.util.concurrent.ConcurrentHashMap;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        producer = getTransactionalProducer(NAMESRV_ADDR, topic, new TransactionListenerImpl());			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.test.delay;
			
			import java.util.List;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.factory.MQMessageFactory;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQDelayListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			        producer = getProducer(NAMESRV_ADDR, topic);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/offset/OffsetNotFoundIT.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.test.offset;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			            offsetRpcHook.throwException = true;			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        //test the normal			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/tls/TlsIT.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.test.tls;
			
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.assertj.core.api.Assertions;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			31",
			toLine:"			32",
			content:"
			
			    private RMQNormalProducer producer;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        // Send messages via TLS			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        // Receive messages via TLS			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        int numberOfMessagesToSend = 16;			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/tls/TlsMix2IT.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.test.tls;
			
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.assertj.core.api.Assertions;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			31",
			toLine:"			32",
			content:"
			
			    private RMQNormalProducer producer;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        // send message via TLS			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        // Receive message without TLS.			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        int numberOfMessagesToSend = 16;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/tls/TlsMixIT.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.test.tls;
			
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.MQWait;
			import org.assertj.core.api.Assertions;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			31",
			toLine:"			32",
			content:"
			
			    private RMQNormalProducer producer;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			        // send message without TLS			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			        // Receive message via TLS			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			        int numberOfMessagesToSend = 16;			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/BaseBroadcast.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.factory.ConsumerFactory;
			import org.apache.rocketmq.test.listener.AbstractListener;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        String consumerGroup = initConsumerGroup();			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			39",
			toLine:"			40",
			content:"
			        AbstractListener listener) {
			        RMQBroadCastConsumer consumer = ConsumerFactory.getRMQBroadCastConsumer(nsAddr,			
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			        mqClients.add(consumer);
			        logger.info(String.format("consumer[%s] start,topic[%s],subExpression[%s]", consumerGroup,			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastNormalMsgRecvFailIT extends BaseBroadcast {			
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			            new RMQNormalListener());
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.order;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.order.RMQOrderListener;
			import org.apache.rocketmq.test.message.MessageQueueMsg;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            new RMQOrderListener());			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.tag;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastTwoConsumerFilterIT extends BaseBroadcast {
			    private static Logger logger = LoggerFactory.getLogger(BroadcastTwoConsumerSubTagIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			            new RMQNormalListener());
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			63",
			toLine:"			66",
			content:"
			
			        producer.send(tag2, msgSize);
			        Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
			        producer.clearMsg();			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.tag;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastTwoConsumerSubDiffTagIT extends BaseBroadcast {
			    private static Logger logger = LoggerFactory.getLogger(BroadcastTwoConsumerSubTagIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			            new RMQNormalListener());
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        producer.send(tag, msgSize);			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java:
		[
			fromLine:"			17",
			toLine:"			37",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.tag;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastTwoConsumerSubTagIT extends BaseBroadcast {
			    private static Logger logger = LoggerFactory.getLogger(BroadcastTwoConsumerSubTagIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			    public void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			            new RMQNormalListener());
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        producer.send(tag, msgSize);			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastNormalMsgNotReceiveIT extends BaseBroadcast {			
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        String group = initConsumerGroup();			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			        Thread.sleep(3000);
			        producer.send(msgSize);			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,
			fromLine:"			68",
			toLine:"			70",
			content:"
			
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
			            consumer1.getConsumerGroup(), topic, "*", new RMQNormalListener(group + "_2"));			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {			
",
,
			fromLine:"			37",
			toLine:"			38",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        String group = initConsumerGroup();			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			            new RMQNormalListener(group + "_1"));
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
			        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {			
",
,
			fromLine:"			37",
			toLine:"			38",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        String group = initConsumerGroup();			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            consumer1.getListener().getAllMsgBody()))			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			        TestUtils.waitForSeconds(WAIT_TIME);
			        producer.send(msgSize);			
",
,
			fromLine:"			79",
			toLine:"			81",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
			        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class BroadcastNormalMsgTwoDiffGroupRecvIT extends BaseBroadcast {			
",
,
			fromLine:"			37",
			toLine:"			38",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        String group2 = initConsumerGroup();			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			            new RMQNormalListener(group1 + "_1"));			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			68",
			toLine:"			69",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.consumer.broadcast.normal;
			
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.client.consumer.broadcast.BaseBroadcast;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
			import org.apache.rocketmq.test.util.TestUtils;
			import org.apache.rocketmq.test.util.VerifyUtils;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadcast {			
",
,
			fromLine:"			37",
			toLine:"			38",
			content:"
			        .getLogger(NormalMsgTwoSameGroupConsumerIT.class);
			    private RMQNormalProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			        printSeparator();
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        String group = initConsumerGroup();			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			            new RMQNormalListener(group + "_1"));
			        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			
			        producer.send(msgSize);			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			
			        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			            consumer1.getListener().getAllMsgBody()))
			            .containsExactlyElementsIn(producer.getAllMsgBody());			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            consumer2.getListener().getAllMsgBody()))			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/factory/ConsumerFactory.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.test.factory;
			
			import java.util.UUID;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.test.client.rmq.RMQBroadCastConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQPopClient;
			import org.apache.rocketmq.test.client.rmq.RMQPopConsumer;
			import org.apache.rocketmq.test.client.rmq.RMQSqlConsumer;
			import org.apache.rocketmq.test.listener.AbstractListener;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			        AbstractListener listener) {			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			42",
			content:"
			        AbstractListener listener, boolean useTLS) {
			        RMQNormalConsumer consumer = new RMQNormalConsumer(nsAddr, topic, subExpression,
			            consumerGroup, listener);			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			        AbstractListener listner) {
			        RMQBroadCastConsumer consumer = new RMQBroadCastConsumer(nsAddr, topic, subExpression,			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
						
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			        AbstractListener listner) {
			        RMQSqlConsumer consumer = new RMQSqlConsumer(nsAddr, topic, selector,			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQConsumer.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.test.clientinterface;
			
			import org.apache.rocketmq.test.listener.AbstractListener;
						
",
,
			fromLine:"			23",
			toLine:"			26",
			content:"
			    protected AbstractListener listener = null;
			    protected String nsAddr = null;
			    protected String topic = null;
			    protected String subExpression = null;			
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			        String consumerGroup, AbstractListener listener) {
			        this.topic = topic;
			        this.subExpression = subExpression;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        this.listener = listener;			
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			    public AbstractMQConsumer(String topic, String subExpression) {
			        this.topic = topic;			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			    public void setSubscription(String topic, String subExpression) {
			        this.topic = topic;			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public String getNsAddr() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void setNsAddr(String nsAddr) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public String getSubExpression() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public void setSubExpression(String subExpression) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalConsumer.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.clientinterface.AbstractMQConsumer;
			import org.apache.rocketmq.test.listener.AbstractListener;
			import org.apache.rocketmq.test.util.RandomUtil;
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void create(boolean useTLS) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        consumer.setInstanceName(RandomUtil.getStringByUUID());			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        try {			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQSqlConsumer.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import org.apache.rocketmq.client.consumer.MessageSelector;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.listener.AbstractListener;
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        try {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java:
		[
			fromLine:"			17",
			toLine:"			45",
			content:"
			
			package org.apache.rocketmq.test.base;
			
			import com.google.common.truth.Truth;
			import java.io.File;
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Objects;
			import java.util.UUID;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicAttributes;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.namesrv.NamesrvController;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
						
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    protected static final String SEP = File.separator;
			    protected static final String BROKER_NAME_PREFIX = "TestBrokerName_";			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public static volatile int commitLogSize = 1024 * 1024 * 100;			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        MessageStoreConfig storeConfig = new MessageStoreConfig();			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			        storeConfig.setMappedFileSizeCommitLog(commitLogSize);
			        storeConfig.setMaxIndexNum(INDEX_NUM);			
",
,
			fromLine:"			169",
			toLine:"			170",
			content:"
			
			    public static boolean initTopic(String topic, String nsAddr, String clusterName, int queueNumbers, CQType cqType) {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
						
",
,
			fromLine:"			176",
			toLine:"			177",
			content:"
			        Map<String, String> attributes = new HashMap<>();
			        if (!Objects.equals(CQType.SimpleCQ, cqType)) {			
",
,
			fromLine:"			179",
			toLine:"			180",
			content:"
			        }
			        if (!Objects.equals(TopicMessageType.NORMAL, topicMessageType)) {			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        }			
",
,
			fromLine:"			186",
			toLine:"			187",
			content:"
			
			    public static boolean initTopic(String topic, String nsAddr, String clusterName, CQType cqType) {			
",
,
			fromLine:"			190",
			toLine:"			191",
			content:"
			
			    public static boolean initTopic(String topic, String nsAddr, String clusterName, TopicMessageType topicMessageType) {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/BrokerMemberGroupIT.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.time.Duration;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			
			        removeSlaveBroker(1, brokerContainer1, master3With3Replicas);			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			
			        createAndAddSlave(1, brokerContainer2, master1With3Replicas);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/SendMultipleReplicasIT.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.nio.charset.StandardCharsets;
			import java.util.List;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Java6Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			public class SendMultipleReplicasIT extends ContainerIntegrationTestBase {
			    private static DefaultMQProducer mqProducer;
			    private static final String MSG = "Hello RocketMQ ";			
",
,
			fromLine:"			50",
			toLine:"			52",
			content:"
			    public static void beforeClass() throws Exception {
			        mqProducer = createProducer("SendMultipleReplicasMessageIT_Producer");
			        mqProducer.setSendMsgTimeout(15 * 1000);			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			    public static void afterClass() {
			        if (mqProducer != null) {			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			        // Send message to broker group with three replicas
			        Message msg = new Message(THREE_REPLICAS_TOPIC, MESSAGE_BODY);			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			        // Broker with 3 replicas configured as 3-2-1 auto replicas mode
			        Message msg = new Message(THREE_REPLICAS_TOPIC, MESSAGE_BODY);			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			        // Remove two slave broker
			        removeSlaveBroker(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        master1With3Replicas.getMessageStoreConfig().setEnableAutoInSyncReplicas(true);			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			        // Although this broker group only has one slave broker, send will be success in auto mode.
			        msg = new Message(THREE_REPLICAS_TOPIC, MESSAGE_BODY);			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			        // Recover the cluster state
			        createAndAddSlave(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			121",
			toLine:"			122",
			content:"
			        // Remove two slave broker
			        removeSlaveBroker(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
						
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			        try {			
",
,
			fromLine:"			151",
			toLine:"			152",
			content:"
			        // Recover the cluster state
			        createAndAddSlave(1, brokerContainer2, master1With3Replicas);			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/SlaveBrokerIT.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.time.Duration;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			56",
			toLine:"			58",
			content:"
			        // Remove one replicas from each broker group
			        removeSlaveBroker(1, brokerContainer1, master3With3Replicas);
			        removeSlaveBroker(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			75",
			toLine:"			77",
			content:"
			        // ReAdd the slave broker
			        createAndAddSlave(1, brokerContainer1, master3With3Replicas);
			        createAndAddSlave(1, brokerContainer2, master1With3Replicas);			
",
,
			fromLine:"			105",
			toLine:"			106",
			content:"
			
			        removeSlaveBroker(1, brokerContainer1, master3With3Replicas);			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.test.factory;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collection;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.test.util.RandomUtil;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			        List<Object> msgs = new ArrayList<Object>();
			        for (int i = 0; i < msgSize; i++) {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			46",
			content:"
			        List<Object> msgs = new ArrayList<Object>();
			        for (int i = 0; i < msgSize; i++) {
			            for (String tag : tags) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        for (MessageQueue mq : mqs) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public static List<Object> getMsg(String topic, int msgSize) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			116",
			content:"
			        List<Object> msgs = new ArrayList<Object>();
			        while (msgSize > 0) {
			            Message msg = new Message(topic, (index++).toString().getBytes(StandardCharsets.UTF_8));
			            if (tag != null) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			            msgs.add(msg);			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/factory/TagMessage.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.test.factory;
			
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			
			public class TagMessage {
			    private List<String> tags = null;
			    private String topic = null;			
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			        String[] tags = {tag};
			        this.tags = Arrays.asList(tags);
			        this.topic = topic;			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			    public TagMessage(List<String> tags, String topic, int msgSize) {
			        this.tags = tags;
			        this.topic = topic;			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    private void init() {
			        for (String tag : tags) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public List<Object> getMessageByTag(String tag) {			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			        List<Object> mixedMsgs = new ArrayList<Object>();
			        for (int i = 0; i < msgSize; i++) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public List<Object> getMessageBodyByTag(String tag) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        List<Object> msgs = new ArrayList<Object>();			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/route/CreateAndUpdateTopicIT.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.test.route;
			
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.util.MQAdminTestUtils;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
						
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/util/RandomUtil.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.test.util;
			
			import java.util.Collection;
			import java.util.HashSet;
			import java.util.Random;
			import java.util.Set;
			import java.util.UUID;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			
			    private static final int UNICODE_START = '\u4E00';
			    private static final int UNICODE_END = '\u9FA0';			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public static long getLong() {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public static long getLongMoreThanZero() {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        while (res <= 0) {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public static long getLongLessThan(long n) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public static int getInteger() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public static int getIntegerMoreThanZero() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        while (res <= 0) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public static int getIntegerLessThan(int n) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public static int getIntegerMoreThanZeroLessThan(int n) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        while (res == 0) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        int size = arg.length;			
",
,
			fromLine:"			178",
			toLine:"			182",
			content:"
			
			    public static String getStringWithBoth(int n, String prefix, String suffix) {
			        int len = prefix.length() + suffix.length();
			        StringBuilder res = new StringBuilder(prefix);
			        if (n <= len)			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			        else {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			            res.append(getStringWithCharacter(len));			
",
,
			fromLine:"			217",
			toLine:"			221",
			content:"
			
			    public static String getCheseWordWithBoth(int n, String prefix, String suffix) {
			        int len = prefix.length() + suffix.length();
			        StringBuilder res = new StringBuilder(prefix);
			        if (n <= len)			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			        else {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			            res.append(getCheseWord(len));			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    private static char getCheseChar() {			
",
,
			fromLine:"			251",
			toLine:"			252",
			content:"
			
			    public static int[] getRandomArray(int min, int max, int n) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
						
",
,
			fromLine:"			259",
			toLine:"			260",
			content:"
			        int[] source = new int[len];
			        for (int i = min; i < min + len; i++) {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
						
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
						
",
,
			fromLine:"			276",
			toLine:"			279",
			content:"
			        Set<Integer> res = new HashSet<Integer>();
			        int mx = max;
			        int mn = min;
			        if (n == (max + 1 - min)) {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			        }			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/util/StatUtil.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.test.util;
			
			import java.math.BigDecimal;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import javax.annotation.Generated;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import static java.math.BigDecimal.ROUND_HALF_UP;
						
",
,
			fromLine:"			52",
			toLine:"			54",
			content:"
			        AtomicLong failPv = new AtomicLong();
			        AtomicLong sumRt = new AtomicLong();
			        AtomicLong maxRt = new AtomicLong();			
",
,
			fromLine:"			63",
			toLine:"			65",
			content:"
			        AtomicLong fail = new AtomicLong();
			        AtomicLong sumRt = new AtomicLong();
			        AtomicLong maxRt = new AtomicLong();			
",
,
			fromLine:"			97",
			toLine:"			98",
			content:
{
            logger.warn("",
                buildLog(key, invoke.topSecondPv.get(), invoke.totalPv.get(), invoke.failPv.get(), invoke.minRt.get(),						
}
,
			fromLine:"			124",
			toLine:"			126",
			content:"
			                failPv += secondInvoke.fail.get();
			                sumRt += secondInvoke.sumRt.get();
			                if (maxRt < secondInvoke.maxRt.get()) {			
",
,
			fromLine:"			128",
			toLine:"			129",
			content:"
			                }
			                if (minRt > secondInvoke.minRt.get()) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			    public static void addInvoke(String key, long rt) {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			        }			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			        invoke.totalPv.getAndAdd(num);			
",
,
			fromLine:"			222",
			toLine:"			224",
			content:"
			
			        invoke.sumRt.addAndGet(rt);
			        if (invoke.maxRt.get() < rt) {			
",
,
			fromLine:"			226",
			toLine:"			227",
			content:"
			        }
			        if (invoke.minRt.get() > rt) {			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			        }			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			        invoke.totalPv.getAndIncrement();			
",
,
			fromLine:"			259",
			toLine:"			261",
			content:"
			
			        invoke.sumRt.addAndGet(rt);
			        if (invoke.maxRt.get() < rt) {			
",
,
			fromLine:"			263",
			toLine:"			264",
			content:"
			        }
			        if (invoke.minRt.get() > rt) {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			    public static void addSecondInvoke(String key, long rt) {			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
						
",
,
			fromLine:"			291",
			toLine:"			291",
			content:"
			        }			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			        secondInvoke.total.addAndGet(1);			
",
,
			fromLine:"			299",
			toLine:"			301",
			content:"
			        }
			        secondInvoke.sumRt.addAndGet(rt);
			        if (secondInvoke.maxRt.get() < rt) {			
",
,
			fromLine:"			303",
			toLine:"			304",
			content:"
			        }
			        if (secondInvoke.minRt.get() > rt) {			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			    public static void addPv(String key, long totalPv) {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
						
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			        }			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			        }			
",
,
			fromLine:"			323",
			toLine:"			325",
			content:"
			        }
			        invoke.totalPv.addAndGet(totalPv);
			        if (!success) {			
",
,
			fromLine:"			330",
			toLine:"			330",
			content:"
			        if (oldSecond.get() == now) {			
",
,
			fromLine:"			336",
			toLine:"			336",
			content:"
			                }			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			            } else {			
",
,
			fromLine:"			344",
			toLine:"			344",
			content:"
			    public static void addSecondPv(String key, long totalPv) {			
",
,
			fromLine:"			347",
			toLine:"			347",
			content:"
						
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
			        }			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			        }			
",
,
			fromLine:"			358",
			toLine:"			360",
			content:"
			        }
			        secondInvoke.total.addAndGet(totalPv);
			        if (!success) {			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			        for (int i = 0; i < windowSeconds && i < list.size(); i++) {			
",
,
			fromLine:"			438",
			toLine:"			439",
			content:"
			        for (int i = 0; i < windowSeconds && i < list.size(); i++) {
			            if (maxRt < list.get(i).maxRt.get()) {			
",
,
			fromLine:"			450",
			toLine:"			451",
			content:"
			        for (int i = 0; i < windowSeconds && i < list.size(); i++) {
			            if (minRt < list.get(i).minRt.get()) {			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreDispatcherImplTest.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.core;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.time.Duration;
			import java.util.HashMap;
			import java.util.List;
			import java.util.concurrent.atomic.AtomicBoolean;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.queue.ConsumeQueueInterface;
			import org.apache.rocketmq.store.queue.CqUnit;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.TieredMessageStore;
			import org.apache.rocketmq.tieredstore.file.FlatFileFactory;
			import org.apache.rocketmq.tieredstore.file.FlatFileStore;
			import org.apache.rocketmq.tieredstore.file.FlatMessageFile;
			import org.apache.rocketmq.tieredstore.index.IndexItem;
			import org.apache.rocketmq.tieredstore.index.IndexService;
			import org.apache.rocketmq.tieredstore.index.IndexStoreService;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtilTest;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.awaitility.Awaitility;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mockito;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyInt;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.anyString;
						
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			    protected final String storePath = MessageStoreUtilTest.getRandomStorePath();
			    protected MessageQueue mq;
			    protected MetadataStore metadataStore;			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    protected FlatFileStore fileStore;			
",
,
			fromLine:"			73",
			toLine:"			79",
			content:"
			    public void init() {
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setBrokerName("brokerName");
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredStoreFilePath(storePath);
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
			        mq = new MessageQueue("StoreTest", storeConfig.getBrokerName(), 1);			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        executor = new MessageStoreExecutor();			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			    public void shutdown() throws IOException {
			        if (messageStore != null) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			105",
			content:"
			        IndexService indexService =
			            new IndexStoreService(new FlatFileFactory(metadataStore, storeConfig), storePath);
			        Mockito.when(messageStore.getDefaultStore()).thenReturn(defaultStore);
			        Mockito.when(messageStore.getStoreConfig()).thenReturn(storeConfig);
			        Mockito.when(messageStore.getStoreExecutor()).thenReturn(executor);
			        Mockito.when(messageStore.getFlatFileStore()).thenReturn(fileStore);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        // construct flat file			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        dispatcher.dispatch(request);			
",
,
			fromLine:"			144",
			toLine:"			147",
			content:"
			        Awaitility.await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(30)).until(() -> {
			            List<IndexItem> resultList1 = indexService.queryAsync(
			                mq.getTopic(), "uk", 32, 0L, System.currentTimeMillis()).join();
			            List<IndexItem> resultList2 = indexService.queryAsync(			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        MessageStore defaultStore = Mockito.mock(MessageStore.class);			
",
,
			fromLine:"			163",
			toLine:"			168",
			content:"
			        IndexService indexService =
			            new IndexStoreService(new FlatFileFactory(metadataStore, storeConfig), storePath);
			        Mockito.when(messageStore.getDefaultStore()).thenReturn(defaultStore);
			        Mockito.when(messageStore.getStoreConfig()).thenReturn(storeConfig);
			        Mockito.when(messageStore.getStoreExecutor()).thenReturn(executor);
			        Mockito.when(messageStore.getFlatFileStore()).thenReturn(fileStore);			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			        ByteBuffer buffer = MessageFormatUtilTest.buildMockedMessageBuffer();			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			            "", "", 0, 0L, new HashMap<>());			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        dispatcher.dispatch(request);			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/index/IndexItem.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.tieredstore.index;
			
			import java.nio.ByteBuffer;
						
",
,
			fromLine:"			26",
			toLine:"			32",
			content:"
			
			    private final int hashCode;
			    private final int topicId;
			    private final int queueId;
			    private final long offset;
			    private final int size;
			    private final int timeDiff;			
",
,
			fromLine:"			35",
			toLine:"			41",
			content:"
			    public IndexItem(int topicId, int queueId, long offset, int size, int hashCode, int timeDiff, int itemIndex) {
			        this.hashCode = hashCode;
			        this.topicId = topicId;
			        this.queueId = queueId;
			        this.offset = offset;
			        this.size = size;
			        this.timeDiff = timeDiff;			
",
,
			fromLine:"			52",
			toLine:"			58",
			content:"
			        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
			        hashCode = byteBuffer.getInt(0);
			        topicId = byteBuffer.getInt(4);
			        queueId = byteBuffer.getInt(8);
			        offset = byteBuffer.getLong(12);
			        size = byteBuffer.getInt(20);
			        timeDiff = byteBuffer.getInt(24);			
",
,
			fromLine:"			63",
			toLine:"			69",
			content:"
			        ByteBuffer byteBuffer = ByteBuffer.allocate(32);
			        byteBuffer.putInt(0, hashCode);
			        byteBuffer.putInt(4, topicId);
			        byteBuffer.putInt(8, queueId);
			        byteBuffer.putLong(12, offset);
			        byteBuffer.putInt(20, size);
			        byteBuffer.putInt(24, timeDiff);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public int getHashCode() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public int getTopicId() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public int getQueueId() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public long getOffset() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public int getSize() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public int getTimeDiff() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public int getItemIndex() {			
",
,
			fromLine:"			104",
			toLine:"			110",
			content:"
			        return "IndexItem{" +
			            "hashCode=" + hashCode +
			            ", topicId=" + topicId +
			            ", queueId=" + queueId +
			            ", offset=" + offset +
			            ", size=" + size +
			            ", timeDiff=" + timeDiff +			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/index/IndexItemTest.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.tieredstore.index;
			
			import java.nio.ByteBuffer;
			import org.junit.Assert;
			import org.junit.Test;
						
",
,
			fromLine:"			25",
			toLine:"			31",
			content:"
			
			    private final int topicId = 1;
			    private final int queueId = 2;
			    private final long offset = 3L;
			    private final int size = 4;
			    private final int hashCode = 5;
			    private final int timeDiff = 6;			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public void indexItemConstructorTest() {			
",
,
			fromLine:"			37",
			toLine:"			43",
			content:"
			
			        Assert.assertEquals(topicId, indexItem.getTopicId());
			        Assert.assertEquals(queueId, indexItem.getQueueId());
			        Assert.assertEquals(offset, indexItem.getOffset());
			        Assert.assertEquals(size, indexItem.getSize());
			        Assert.assertEquals(hashCode, indexItem.getHashCode());
			        Assert.assertEquals(timeDiff, indexItem.getTimeDiff());			
",
,
			fromLine:"			49",
			toLine:"			55",
			content:"
			        ByteBuffer byteBuffer = ByteBuffer.allocate(IndexItem.INDEX_ITEM_SIZE);
			        byteBuffer.putInt(hashCode);
			        byteBuffer.putInt(topicId);
			        byteBuffer.putInt(queueId);
			        byteBuffer.putLong(offset);
			        byteBuffer.putInt(size);
			        byteBuffer.putInt(timeDiff);			
",
,
			fromLine:"			60",
			toLine:"			66",
			content:"
			
			        Assert.assertEquals(topicId, indexItem.getTopicId());
			        Assert.assertEquals(queueId, indexItem.getQueueId());
			        Assert.assertEquals(offset, indexItem.getOffset());
			        Assert.assertEquals(size, indexItem.getSize());
			        Assert.assertEquals(hashCode, indexItem.getHashCode());
			        Assert.assertEquals(timeDiff, indexItem.getTimeDiff());			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void getByteBufferTest() {			
",
,
			fromLine:"			82",
			toLine:"			88",
			content:"
			        ByteBuffer byteBuffer = indexItem.getByteBuffer();
			        Assert.assertEquals(hashCode, byteBuffer.getInt(0));
			        Assert.assertEquals(topicId, byteBuffer.getInt(4));
			        Assert.assertEquals(queueId, byteBuffer.getInt(8));
			        Assert.assertEquals(offset, byteBuffer.getLong(12));
			        Assert.assertEquals(size, byteBuffer.getInt(20));
			        Assert.assertEquals(timeDiff, byteBuffer.getInt(24));			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/MetadataStore.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.metadata;
			
			import java.util.function.Consumer;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.entity.FileSegmentMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.QueueMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStore.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.metadata;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.serializer.SerializerFeature;
			import com.google.common.annotations.VisibleForTesting;
			import java.nio.file.Paths;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Optional;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.function.Consumer;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.entity.FileSegmentMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.QueueMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
						
",
,
			fromLine:"			46",
			toLine:"			47",
			content:"
			    private final MessageStoreConfig storeConfig;
			    private final ConcurrentMap<String /* topic */, TopicMetadata> topicMetadataTable;			
",
,
			fromLine:"			51",
			toLine:"			53",
			content:"
			    // Key: filePath -> Value: <baseOffset, metadata>
			    private final ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> commitLogFileSegmentTable;
			    private final ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> consumeQueueFileSegmentTable;			
",
,
			fromLine:"			58",
			toLine:"			62",
			content:"
			        this.topicSequenceNumber = new AtomicLong(-1L);
			        this.topicMetadataTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			        this.queueMetadataTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			        this.commitLogFileSegmentTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			        this.consumeQueueFileSegmentTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);			
",
,
			fromLine:"			75",
			toLine:"			79",
			content:"
			        dataWrapper.setTopicSerialNumber(topicSequenceNumber);
			        dataWrapper.setTopicMetadataTable(topicMetadataTable);
			        dataWrapper.setQueueMetadataTable(new ConcurrentHashMap<>(queueMetadataTable));
			        dataWrapper.setCommitLogFileSegmentTable(new ConcurrentHashMap<>(commitLogFileSegmentTable));
			        dataWrapper.setConsumeQueueFileSegmentTable(new ConcurrentHashMap<>(consumeQueueFileSegmentTable));			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			                this.topicSequenceNumber.set(dataWrapper.getTopicSerialNumber().get());			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                dataWrapper.getQueueMetadataTable().forEach(			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			                dataWrapper.getCommitLogFileSegmentTable().forEach(			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			                dataWrapper.getConsumeQueueFileSegmentTable().forEach(			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			                dataWrapper.getIndexFileSegmentTable().forEach(			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    public TopicMetadata getTopic(String topic) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public void iterateTopic(Consumer<TopicMetadata> callback) {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        TopicMetadata metadata = new TopicMetadata(topicSequenceNumber.incrementAndGet(), topic, reserveTime);			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        metadata.setUpdateTimestamp(System.currentTimeMillis());			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public void deleteTopic(String topic) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public QueueMetadata getQueue(MessageQueue mq) {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    public void iterateQueue(String topic, Consumer<QueueMetadata> callback) {			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        QueueMetadata metadata = new QueueMetadata(mq, baseOffset, baseOffset);			
",
,
			fromLine:"			188",
			toLine:"			189",
			content:"
			        MessageQueue queue = metadata.getQueue();
			        if (queueMetadataTable.containsKey(queue.getTopic())) {			
",
,
			fromLine:"			200",
			toLine:"			201",
			content:"
			    public void deleteQueue(MessageQueue mq) {
			        if (queueMetadataTable.containsKey(mq.getTopic())) {			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
			            case COMMIT_LOG:			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			            case CONSUME_QUEUE:			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			            case INDEX:			
",
,
			fromLine:"			222",
			toLine:"			222",
			content:"
			    @Override			
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			
			        return Optional.ofNullable(this.getTableByFileType(fileType).get(basePath))			
",
,
			fromLine:"			241",
			toLine:"			241",
			content:"
			    public void iterateFileSegment(Consumer<FileSegmentMetadata> callback) {			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			            .forEach((filePath, map) -> map.forEach((offset, metadata) -> callback.accept(metadata)));			
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			            .forEach((filePath, map) -> map.forEach((offset, metadata) -> callback.accept(metadata)));			
",
,
			fromLine:"			265",
			toLine:"			266",
			content:"
			    @Override
			    public void deleteFileSegment(String basePath, FileSegmentType fileType, long baseOffset) {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			        if (offsetTable != null) {			
",
,
			fromLine:"			276",
			toLine:"			280",
			content:"
			        topicSequenceNumber.set(0L);
			        topicMetadataTable.clear();
			        queueMetadataTable.clear();
			        commitLogFileSegmentTable.clear();
			        consumeQueueFileSegmentTable.clear();			
",
,
			fromLine:"			288",
			toLine:"			289",
			content:"
			
			        private ConcurrentMap<String /* topic */, TopicMetadata> topicMetadataTable;			
",
,
			fromLine:"			293",
			toLine:"			295",
			content:"
			        // Key: filePath -> Value: <baseOffset, metadata>
			        private ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> commitLogFileSegmentTable;
			        private ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> consumeQueueFileSegmentTable;			
",
,
			fromLine:"			298",
			toLine:"			302",
			content:"
			        public TieredMetadataSerializeWrapper() {
			            this.topicMetadataTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			            this.queueMetadataTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			            this.commitLogFileSegmentTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);
			            this.consumeQueueFileSegmentTable = new ConcurrentHashMap<>(DEFAULT_CAPACITY);			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			        public ConcurrentMap<String, TopicMetadata> getTopicMetadataTable() {			
",
,
			fromLine:"			319",
			toLine:"			319",
			content:"
			            ConcurrentMap<String, TopicMetadata> topicMetadataTable) {			
",
,
			fromLine:"			323",
			toLine:"			323",
			content:"
			        public ConcurrentMap<String, ConcurrentMap<Integer, QueueMetadata>> getQueueMetadataTable() {			
",
,
			fromLine:"			328",
			toLine:"			328",
			content:"
			            ConcurrentMap<String, ConcurrentMap<Integer, QueueMetadata>> queueMetadataTable) {			
",
,
			fromLine:"			332",
			toLine:"			332",
			content:"
			        public ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> getCommitLogFileSegmentTable() {			
",
,
			fromLine:"			337",
			toLine:"			337",
			content:"
			            ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> commitLogFileSegmentTable) {			
",
,
			fromLine:"			341",
			toLine:"			341",
			content:"
			        public ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> getConsumeQueueFileSegmentTable() {			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			            ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> consumeQueueFileSegmentTable) {			
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
			        public ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> getIndexFileSegmentTable() {			
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
			            ConcurrentMap<String, ConcurrentMap<Long, FileSegmentMetadata>> indexFileSegmentTable) {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatAppendFile.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.CopyOnWriteArrayList;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import java.util.stream.Collectors;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.FileSegmentMetadata;
			import org.apache.rocketmq.tieredstore.provider.FileSegment;
			import org.apache.rocketmq.tieredstore.provider.FileSegmentFactory;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    protected final FileSegmentType fileType;			
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			        this.fileType = fileType;
			        this.filePath = filePath;			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			        List<FileSegment> fileSegmentList = new ArrayList<>();
			        this.metadataStore.iterateFileSegment(this.filePath, this.fileType, metadata -> {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        if (fileSize == GET_FILE_SIZE_ERROR) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			            flushFileSegmentMeta(fileSegment);			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			        if (this.fileSegmentTable.isEmpty()) {			
",
,
			fromLine:"			98",
			toLine:"			99",
			content:"
			    public void flushFileSegmentMeta(FileSegment fileSegment) {
			        FileSegmentMetadata metadata = this.metadataStore.getFileSegment(			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            metadata = new FileSegmentMetadata(			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        metadata.setEndTimestamp(fileSegment.getMaxTimestamp());			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    public String getFilePath() {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        try {			
",
,
			fromLine:"			248",
			toLine:"			249",
			content:"
			                    fileSegment.getMaxTimestamp() > expireTimestamp) {
			                    log.debug("FileSegment has not expired, filePath={}, fileType={}, " +			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			                    fileSegmentTable.remove(0);			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatAppendFileTest.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.util.Arrays;
			import java.util.concurrent.CompletionException;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreErrorCode;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreException;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.FileSegmentMetadata;
			import org.apache.rocketmq.tieredstore.provider.FileSegment;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			41",
			toLine:"			45",
			content:"
			
			    private final String storePath = MessageStoreUtilTest.getRandomStorePath();
			    private MessageQueue queue;
			    private MetadataStore metadataStore;
			    private MessageStoreConfig storeConfig;			
",
,
			fromLine:"			49",
			toLine:"			58",
			content:"
			    public void init() throws ClassNotFoundException, NoSuchMethodException {
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setBrokerName("brokerName");
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredStoreFilePath(storePath);
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
			        storeConfig.setTieredStoreCommitLogMaxSize(2000L);
			        storeConfig.setTieredStoreConsumeQueueMaxSize(2000L);
			        queue = new MessageQueue("TieredFlatFileTest", storeConfig.getBrokerName(), 0);
			        metadataStore = new DefaultMetadataStore(storeConfig);			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void shutdown() throws IOException {			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			    public void recoverFileSizeTest() {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			    public void testRecoverFile() {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        FileSegmentMetadata metadata =			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
						
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			        // reference same file			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        Assert.assertEquals(2, flatFile.fileSegmentTable.size());			
",
,
			fromLine:"			133",
			toLine:"			134",
			content:"
			    public void testFileSegment() {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    public void testAppendAndRead() {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			    public void testCleanExpiredFile() {			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.metadata;
			
			import java.io.File;
			import java.io.IOException;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Objects;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.entity.FileSegmentMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.QueueMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
						
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			        metadataStore.updateFileSegment(segmentMetadata);			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        for (int i = 0; i < 5; i++) {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/FileSegmentFactory.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.tieredstore.provider;
			
			import java.lang.reflect.Constructor;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
						
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			        try {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public FileSegment createCommitLogFileSegment(String filePath, long baseOffset) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public FileSegment createConsumeQueueFileSegment(String filePath, long baseOffset) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public FileSegment createIndexServiceFileSegment(String filePath, long baseOffset) {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/FileSegment.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.provider;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.locks.ReentrantLock;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreErrorCode;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreException;
			import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
			import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStreamFactory;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			
			    protected final long baseOffset;
			    protected final String filePath;			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    protected final long maxSize;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			        this.storeConfig = storeConfig;
			        this.fileType = fileType;
			        this.filePath = filePath;			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public int compareTo(FileSegment o) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public long getBaseOffset() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void initPosition(long pos) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        } finally {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public long getCommitOffset() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public long getAppendOffset() {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public FileSegmentType getFileType() {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public long getMaxSizeByFileType() {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    public boolean isClosed() {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			    public void close() {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			        try {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        } finally {			
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
			        List<ByteBuffer> temp;			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			        } finally {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			    protected void updateTimestamp(long timestamp) {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			        } finally {			
",
,
			fromLine:"			184",
			toLine:"			184",
			content:"
			    public AppendResult append(ByteBuffer buffer, long timestamp) {			
",
,
			fromLine:"			186",
			toLine:"			186",
			content:"
			        try {			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			        } finally {			
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			    public CompletableFuture<Boolean> commitAsync() {			
",
,
			fromLine:"			227",
			toLine:"			227",
			content:"
			            if (fileSize == GET_FILE_SIZE_ERROR) {			
",
,
			fromLine:"			249",
			toLine:"			249",
			content:"
			            fileSegmentInputStream = FileSegmentInputStreamFactory.build(			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
						
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
						
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
			        if (fileSize == GET_FILE_SIZE_ERROR) {			
",
,
			fromLine:"			339",
			toLine:"			339",
			content:"
			            length = readableBytes;			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/PosixFileSegment.java:
		[
			fromLine:"			16",
			toLine:"			45",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.provider;
			
			import com.google.common.base.Stopwatch;
			import com.google.common.io.ByteStreams;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import java.io.File;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.nio.ByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.file.Paths;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsManager;
			import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_FILE_TYPE;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_OPERATION;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_PATH;
			import static org.apache.rocketmq.tieredstore.metrics.TieredStoreMetricsConstant.LABEL_SUCCESS;
						
",
,
			fromLine:"			81",
			toLine:"			82",
			content:"
			        return TieredStoreMetricsManager.newAttributesBuilder()
			            .put(LABEL_PATH, filePath)			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public String getPath() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        } catch (Exception e) {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/provider/MemoryFileSegment.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.provider;
			
			import java.nio.ByteBuffer;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.stream.FileSegmentInputStream;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public String getPath() {			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/FileSegmentFactoryTest.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.provider;
			
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.Assert;
			import org.junit.Test;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        Assert.assertThrows(RuntimeException.class,			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/stream/FileSegmentInputStreamTest.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.tieredstore.stream;
			
			import com.google.common.base.Supplier;
			import java.io.IOException;
			import java.io.InputStream;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
			import java.util.Random;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtilTest;
			import org.junit.Assert;
			import org.junit.Test;
						
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        for (int i = 0; i < RESET_TIMES; i++) {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			            for (int j = 0; j < RESET_TIMES; j++) {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    private void verifyInputStream(InputStream inputStream, ByteBuffer expectedBuffer) {			
",
,
			fromLine:"			220",
			toLine:"			223",
			content:"
			     *
			     * @param inputStream           the input stream to be verified
			     * @param expectedBuffer        the expected byte buffer
			     * @param expectedBufferReadPos the expected start position of the expected byte buffer			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			     */			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
			        try {			
",
,
			fromLine:"			230",
			toLine:"			231",
			content:"
			            while (true) {
			                if (expectedMarkCalledPos == expectedBuffer.position()) {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			                }			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			                    break;			
",
,
			fromLine:"			238",
			toLine:"			238",
			content:"
			            }			
",
,
			fromLine:"			247",
			toLine:"			250",
			content:"
			     *
			     * @param inputStream           the input stream to be verified
			     * @param expectedBuffer        the expected byte buffer
			     * @param expectedBufferReadPos the expected start position of the expected byte buffer			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			     */			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			        try {			
",
,
			fromLine:"			259",
			toLine:"			260",
			content:"
			            while (true) {
			                if (expectedMarkCalledPos == expectedBuffer.position()) {			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
			                }			
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			                byte[] expected = new byte[len];			
",
,
			fromLine:"			271",
			toLine:"			271",
			content:"
			            }			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/broker/CommitLogSetReadAheadSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.tools.command.broker;
			
			
			import java.io.UnsupportedEncodingException;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			                for (String masterAddr : masterAndSlaveMap.keySet()) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			                    for (String slaveAddr : masterAndSlaveMap.get(masterAddr)) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			        throws InterruptedException, RemotingConnectException, UnsupportedEncodingException, RemotingTimeoutException, MQBrokerException, RemotingSendRequestException {
			        System.out.print(" " + printPrefix);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetBrokerConfigCommand.java:
		[
			fromLine:"			17",
			toLine:"			39",
			content:"
			
			package org.apache.rocketmq.tools.command.broker;
			
			import java.io.UnsupportedEncodingException;
			import java.util.List;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Properties;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
						
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
						
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			        if (properties == null) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/broker/GetColdDataFlowCtrInfoSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.tools.command.broker;
			
			import java.io.UnsupportedEncodingException;
			import java.text.SimpleDateFormat;
			import java.util.Date;
			import java.util.List;
			import java.util.Map;
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.JSONObject;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.MQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			                defaultMQAdminExt.start();			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                for (String masterAddr : masterAndSlaveMap.keySet()) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			                    for (String slaveAddr : masterAndSlaveMap.get(masterAddr)) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			
			        System.out.print(" " + printPrefix);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        if (rstStr == null) {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/cluster/ClusterListSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.cluster;
			
			import java.util.Iterator;
			import java.util.Map;
			import java.util.Set;
			import java.util.TreeSet;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.KVTable;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			                if (commandLine.hasOption('m')) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			                } else {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
						
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
						
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			            TreeSet<String> brokerNameTreeSet = new TreeSet<>();			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			            for (String brokerName : brokerNameTreeSet) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			                        try {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
						
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
						
",
,
			fromLine:"			198",
			toLine:"			198",
			content:"
			            TreeSet<String> brokerNameTreeSet = new TreeSet<>();			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			            for (String brokerName : brokerNameTreeSet) {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			                        try {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/ha/GetSyncStateSetSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.ha;
			
			import java.util.ArrayList;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.BrokerReplicasInfo;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			                while (true) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
						
",
,
			fromLine:"			99",
			toLine:"			101",
			content:"
			                           DefaultMQAdminExt defaultMQAdminExt) throws Exception {
			        String controllerAddress = commandLine.getOptionValue('a').trim().split(";")[0];
			        if (commandLine.hasOption('b')) {			
",
,
			fromLine:"			104",
			toLine:"			108",
			content:"
			            brokers.add(brokerName);
			            printData(controllerAddress, brokers, defaultMQAdminExt);
			        } else if (commandLine.hasOption('c')) {
			            String clusterName = commandLine.getOptionValue('c').trim();
			            Set<String> brokerNames = CommandUtil.fetchBrokerNameByClusterName(defaultMQAdminExt, clusterName);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        } else {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/ha/HAStatusSubCommand.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.tools.command.ha;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo.HAClientRuntimeInfo;
			import org.apache.rocketmq.remoting.protocol.body.HARuntimeInfo.HAConnectionRuntimeInfo;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			                while (true) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
						
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
						
",
,
			fromLine:"			96",
			toLine:"			99",
			content:"
			        DefaultMQAdminExt defaultMQAdminExt) throws Exception {
			        if (commandLine.hasOption('b')) {
			            String addr = commandLine.getOptionValue('b').trim();
			            this.printStatus(addr, defaultMQAdminExt);			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			
			            String clusterName = commandLine.getOptionValue('c').trim();			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			            for (String addr : masterSet) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			        } else {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/MQAdminStartup.java:
		[
			fromLine:"			16",
			toLine:"			118",
			content:"
			 */
			package org.apache.rocketmq.tools.command;
			
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.command.acl.ClusterAclConfigVersionListSubCommand;
			import org.apache.rocketmq.tools.command.acl.DeleteAccessConfigSubCommand;
			import org.apache.rocketmq.tools.command.acl.UpdateAccessConfigSubCommand;
			import org.apache.rocketmq.tools.command.acl.UpdateGlobalWhiteAddrSubCommand;
			import org.apache.rocketmq.tools.command.auth.CopyAclsSubCommand;
			import org.apache.rocketmq.tools.command.auth.CopyUsersSubCommand;
			import org.apache.rocketmq.tools.command.auth.CreateAclSubCommand;
			import org.apache.rocketmq.tools.command.auth.CreateUserSubCommand;
			import org.apache.rocketmq.tools.command.auth.DeleteAclSubCommand;
			import org.apache.rocketmq.tools.command.auth.DeleteUserSubCommand;
			import org.apache.rocketmq.tools.command.auth.GetAclSubCommand;
			import org.apache.rocketmq.tools.command.auth.GetUserSubCommand;
			import org.apache.rocketmq.tools.command.auth.ListAclSubCommand;
			import org.apache.rocketmq.tools.command.auth.ListUserSubCommand;
			import org.apache.rocketmq.tools.command.auth.UpdateAclSubCommand;
			import org.apache.rocketmq.tools.command.auth.UpdateUserSubCommand;
			import org.apache.rocketmq.tools.command.broker.BrokerConsumeStatsSubCommad;
			import org.apache.rocketmq.tools.command.broker.BrokerStatusSubCommand;
			import org.apache.rocketmq.tools.command.broker.CleanExpiredCQSubCommand;
			import org.apache.rocketmq.tools.command.broker.CleanUnusedTopicCommand;
			import org.apache.rocketmq.tools.command.broker.CommitLogSetReadAheadSubCommand;
			import org.apache.rocketmq.tools.command.broker.DeleteExpiredCommitLogSubCommand;
			import org.apache.rocketmq.tools.command.broker.GetBrokerConfigCommand;
			import org.apache.rocketmq.tools.command.broker.GetBrokerEpochSubCommand;
			import org.apache.rocketmq.tools.command.broker.GetColdDataFlowCtrInfoSubCommand;
			import org.apache.rocketmq.tools.command.broker.RemoveColdDataFlowCtrGroupConfigSubCommand;
			import org.apache.rocketmq.tools.command.broker.ResetMasterFlushOffsetSubCommand;
			import org.apache.rocketmq.tools.command.broker.SendMsgStatusCommand;
			import org.apache.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand;
			import org.apache.rocketmq.tools.command.broker.UpdateColdDataFlowCtrGroupConfigSubCommand;
			import org.apache.rocketmq.tools.command.cluster.CLusterSendMsgRTCommand;
			import org.apache.rocketmq.tools.command.cluster.ClusterListSubCommand;
			import org.apache.rocketmq.tools.command.connection.ConsumerConnectionSubCommand;
			import org.apache.rocketmq.tools.command.connection.ProducerConnectionSubCommand;
			import org.apache.rocketmq.tools.command.consumer.ConsumerProgressSubCommand;
			import org.apache.rocketmq.tools.command.consumer.ConsumerStatusSubCommand;
			import org.apache.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand;
			import org.apache.rocketmq.tools.command.consumer.GetConsumerConfigSubCommand;
			import org.apache.rocketmq.tools.command.consumer.SetConsumeModeSubCommand;
			import org.apache.rocketmq.tools.command.consumer.StartMonitoringSubCommand;
			import org.apache.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand;
			import org.apache.rocketmq.tools.command.container.AddBrokerSubCommand;
			import org.apache.rocketmq.tools.command.container.RemoveBrokerSubCommand;
			import org.apache.rocketmq.tools.command.controller.CleanControllerBrokerMetaSubCommand;
			import org.apache.rocketmq.tools.command.controller.GetControllerConfigSubCommand;
			import org.apache.rocketmq.tools.command.controller.GetControllerMetaDataSubCommand;
			import org.apache.rocketmq.tools.command.controller.ReElectMasterSubCommand;
			import org.apache.rocketmq.tools.command.controller.UpdateControllerConfigSubCommand;
			import org.apache.rocketmq.tools.command.export.ExportConfigsCommand;
			import org.apache.rocketmq.tools.command.export.ExportMetadataCommand;
			import org.apache.rocketmq.tools.command.export.ExportMetadataInRocksDBCommand;
			import org.apache.rocketmq.tools.command.export.ExportMetricsCommand;
			import org.apache.rocketmq.tools.command.ha.GetSyncStateSetSubCommand;
			import org.apache.rocketmq.tools.command.ha.HAStatusSubCommand;
			import org.apache.rocketmq.tools.command.message.CheckMsgSendRTCommand;
			import org.apache.rocketmq.tools.command.message.ConsumeMessageCommand;
			import org.apache.rocketmq.tools.command.message.DumpCompactionLogCommand;
			import org.apache.rocketmq.tools.command.message.PrintMessageByQueueCommand;
			import org.apache.rocketmq.tools.command.message.PrintMessageSubCommand;
			import org.apache.rocketmq.tools.command.message.QueryMsgByIdSubCommand;
			import org.apache.rocketmq.tools.command.message.QueryMsgByKeySubCommand;
			import org.apache.rocketmq.tools.command.message.QueryMsgByOffsetSubCommand;
			import org.apache.rocketmq.tools.command.message.QueryMsgByUniqueKeySubCommand;
			import org.apache.rocketmq.tools.command.message.QueryMsgTraceByIdSubCommand;
			import org.apache.rocketmq.tools.command.message.SendMessageCommand;
			import org.apache.rocketmq.tools.command.namesrv.AddWritePermSubCommand;
			import org.apache.rocketmq.tools.command.namesrv.DeleteKvConfigCommand;
			import org.apache.rocketmq.tools.command.namesrv.GetNamesrvConfigCommand;
			import org.apache.rocketmq.tools.command.namesrv.UpdateKvConfigCommand;
			import org.apache.rocketmq.tools.command.namesrv.UpdateNamesrvConfigCommand;
			import org.apache.rocketmq.tools.command.namesrv.WipeWritePermSubCommand;
			import org.apache.rocketmq.tools.command.offset.CloneGroupOffsetCommand;
			import org.apache.rocketmq.tools.command.offset.ResetOffsetByTimeCommand;
			import org.apache.rocketmq.tools.command.offset.SkipAccumulationSubCommand;
			import org.apache.rocketmq.tools.command.producer.ProducerSubCommand;
			import org.apache.rocketmq.tools.command.queue.QueryConsumeQueueCommand;
			import org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;
			import org.apache.rocketmq.tools.command.topic.AllocateMQSubCommand;
			import org.apache.rocketmq.tools.command.topic.DeleteTopicSubCommand;
			import org.apache.rocketmq.tools.command.topic.RemappingStaticTopicSubCommand;
			import org.apache.rocketmq.tools.command.topic.TopicClusterSubCommand;
			import org.apache.rocketmq.tools.command.topic.TopicListSubCommand;
			import org.apache.rocketmq.tools.command.topic.TopicRouteSubCommand;
			import org.apache.rocketmq.tools.command.topic.TopicStatusSubCommand;
			import org.apache.rocketmq.tools.command.topic.UpdateOrderConfCommand;
			import org.apache.rocketmq.tools.command.topic.UpdateStaticTopicSubCommand;
			import org.apache.rocketmq.tools.command.topic.UpdateTopicPermSubCommand;
			import org.apache.rocketmq.tools.command.topic.UpdateTopicSubCommand;
						
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			                        if (rpcHook != null) {			
",
,
			fromLine:"			175",
			toLine:"			175",
			content:"
			                        } else {			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/DeleteTopicSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			    @Override
			    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        try {			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			
			            if (commandLine.hasOption('c')) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicClusterSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @Override			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicListSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
			import org.apache.rocketmq.remoting.protocol.body.GroupList;
			import org.apache.rocketmq.remoting.protocol.body.TopicList;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    @Override			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicRouteSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Comparator;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    @Override			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			            TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/TopicStatusSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Collections;
			import java.util.LinkedList;
			import java.util.List;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.admin.TopicOffset;
			import org.apache.rocketmq.remoting.protocol.admin.TopicStatsTable;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    @Override			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			            defaultMQAdminExt.start();			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateOrderConfCommand.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.namesrv.NamesrvUtil;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    @Override			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        try {
			            String topic = commandLine.getOptionValue('t').trim();			
",
,
			fromLine:"			80",
			toLine:"			81",
			content:"
			                String orderConf = "";
			                if (commandLine.hasOption('v')) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
						
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicPermSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    @Override			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			83",
			content:"
			            String topic;
			            if (commandLine.hasOption('t')) {			
",
,
			fromLine:"			99",
			toLine:"			100",
			content:"
			            int perm;
			            if (commandLine.hasOption('p')) {			
",
,
			fromLine:"			106",
			toLine:"			107",
			content:"
			            topicConfig.setPerm(perm);
			            if (commandLine.hasOption('b')) {			
",
,
			fromLine:"			149",
			toLine:"			150",
			content:"
			
			            } else if (commandLine.hasOption('c')) {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			            }			
",
,

		],
		tools/src/main/java/org/apache/rocketmq/tools/command/topic/UpdateTopicSubCommand.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.tools.command.topic;
			
			import java.util.Map;
			import java.util.Set;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.OptionGroup;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.AttributeParser;
			import org.apache.rocketmq.common.sysflag.TopicSysFlag;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.command.CommandUtil;
			import org.apache.rocketmq.tools.command.SubCommand;
			import org.apache.rocketmq.tools.command.SubCommandException;
						
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    @Override			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        RPCHook rpcHook) throws SubCommandException {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			            topicConfig.setWriteQueueNums(8);			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			
			            if (commandLine.hasOption('a')) {			
",
,
			fromLine:"			114",
			toLine:"			115",
			content:"
			            // readQueueNums
			            if (commandLine.hasOption('r')) {			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			            // writeQueueNums
			            if (commandLine.hasOption('w')) {			
",
,
			fromLine:"			124",
			toLine:"			125",
			content:"
			            // perm
			            if (commandLine.hasOption('p')) {			
",
,
			fromLine:"			129",
			toLine:"			130",
			content:"
			            boolean isUnit = false;
			            if (commandLine.hasOption('u')) {			
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			            boolean isCenterSync = false;
			            if (commandLine.hasOption('s')) {			
",
,
			fromLine:"			142",
			toLine:"			143",
			content:"
			            boolean isOrder = false;
			            if (commandLine.hasOption('o')) {			
",
,
			fromLine:"			147",
			toLine:"			148",
			content:"
			
			            if (commandLine.hasOption('b')) {			
",
,
			fromLine:"			164",
			toLine:"			165",
			content:"
			
			            } else if (commandLine.hasOption('c')) {			
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
						
",
,

		],
		openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/LocalMessageCache.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package io.openmessaging.rocketmq.consumer;
			
			import io.openmessaging.KeyValue;
			import io.openmessaging.Message;
			import io.openmessaging.ServiceLifecycle;
			import io.openmessaging.rocketmq.config.ClientConfig;
			import io.openmessaging.rocketmq.domain.ConsumeRequest;
			import java.util.Collections;
			import java.util.Map;
			import java.util.TreeMap;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.Executors;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.ReadWriteLock;
			import org.apache.commons.lang3.reflect.FieldUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.consumer.ProcessQueue;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			class LocalMessageCache implements ServiceLifecycle {			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			    private final ConcurrentHashMap<MessageQueue, Long> pullOffsetTable;
			    private final DefaultMQPullConsumer rocketmqPullConsumer;			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			        this.pullOffsetTable = new ConcurrentHashMap<>();
			        this.rocketmqPullConsumer = rocketmqPullConsumer;			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    int nextPullBatchNums() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			                pullOffsetTable.putIfAbsent(remoteQueue,			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            } catch (MQClientException e) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    MessageExt poll() {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    MessageExt poll(final KeyValue properties) {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			            try {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			            } catch (MQClientException e) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        try {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        } catch (MQClientException e) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			            }			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    private void cleanExpireMsg() {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			            if (lockTreeMap == null) {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			                            if (System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msg))			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			                } catch (InterruptedException e) {			
",
,
			fromLine:"			194",
			toLine:"			195",
			content:"
			                try {
			                    rocketmqPullConsumer.sendMessageBack(msg, 3);			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			                } catch (Exception e) {			
",
,

		],
		openmessaging/src/main/java/io/openmessaging/rocketmq/consumer/PushConsumerImpl.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package io.openmessaging.rocketmq.consumer;
			
			import io.openmessaging.BytesMessage;
			import io.openmessaging.KeyValue;
			import io.openmessaging.OMS;
			import io.openmessaging.OMSBuiltinKeys;
			import io.openmessaging.consumer.MessageListener;
			import io.openmessaging.consumer.PushConsumer;
			import io.openmessaging.exception.OMSRuntimeException;
			import io.openmessaging.interceptor.ConsumerInterceptor;
			import io.openmessaging.rocketmq.config.ClientConfig;
			import io.openmessaging.rocketmq.domain.NonStandardKeys;
			import io.openmessaging.rocketmq.utils.BeanUtils;
			import io.openmessaging.rocketmq.utils.OMSUtil;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
						
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			    private final DefaultMQPushConsumer rocketmqPushConsumer;
			    private final KeyValue properties;			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    private final Map<String, MessageListener> subscribeTable = new ConcurrentHashMap<>();			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			        this.rocketmqPushConsumer = new DefaultMQPushConsumer();
			        this.properties = properties;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        if ("true".equalsIgnoreCase(System.getenv("OMS_RMQ_DIRECT_NAME_SRV"))) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			71",
			content:"
			        this.rocketmqPushConsumer.setConsumerGroup(consumerGroup);
			        this.rocketmqPushConsumer.setMaxReconsumeTimes(clientConfig.getRmqMaxRedeliveryTimes());
			        this.rocketmqPushConsumer.setConsumeTimeout(clientConfig.getRmqMessageConsumeTimeout());
			        this.rocketmqPushConsumer.setConsumeThreadMax(clientConfig.getRmqMaxConsumeThreadNums());			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public KeyValue attributes() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public synchronized void startup() {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			        }			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public synchronized void shutdown() {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			        }			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
			            long costs = System.currentTimeMillis() - begin;			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/common/AuthenticationHeader.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.acl.common;
			
			import com.google.common.base.MoreObjects;
			
			public class AuthenticationHeader {
			    private String remoteAddress;
			    private String tenantId;
			    private String namespace;
			    private String authorization;
			    private String datetime;
			    private String sessionToken;
			    private String requestId;
			    private String language;
			    private String clientVersion;
			    private String protocol;			
",
,
			fromLine:"			37",
			toLine:"			47",
			content:"
			        final String language, final String clientVersion, final String protocol, final int requestCode) {
			        this.remoteAddress = remoteAddress;
			        this.tenantId = tenantId;
			        this.namespace = namespace;
			        this.authorization = authorization;
			        this.datetime = datetime;
			        this.sessionToken = sessionToken;
			        this.requestId = requestId;
			        this.language = language;
			        this.clientVersion = clientVersion;
			        this.protocol = protocol;			
",
,
			fromLine:"			51",
			toLine:"			61",
			content:"
			    public static class MetadataHeaderBuilder {
			        private String remoteAddress;
			        private String tenantId;
			        private String namespace;
			        private String authorization;
			        private String datetime;
			        private String sessionToken;
			        private String requestId;
			        private String language;
			        private String clientVersion;
			        private String protocol;			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder remoteAddress(final String remoteAddress) {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder tenantId(final String tenantId) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder namespace(final String namespace) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder authorization(final String authorization) {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder datetime(final String datetime) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder sessionToken(final String sessionToken) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder requestId(final String requestId) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder language(final String language) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder clientVersion(final String clientVersion) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder protocol(final String protocol) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        public AuthenticationHeader.MetadataHeaderBuilder requestCode(final int requestCode) {			
",
,
			fromLine:"			122",
			toLine:"			124",
			content:"
			        public AuthenticationHeader build() {
			            return new AuthenticationHeader(this.remoteAddress, this.tenantId, this.namespace, this.authorization,
			                this.datetime, this.sessionToken, this.requestId, this.language, this.clientVersion, this.protocol,			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			    public String getRemoteAddress() {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			    public String getTenantId() {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public String getAuthorization() {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    public String getDatetime() {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			    public String getSessionToken() {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public String getRequestId() {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public String getLanguage() {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public String getClientVersion() {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    public String getProtocol() {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    public int getRequestCode() {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    public void setRemoteAddress(final String remoteAddress) {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			    public void setTenantId(final String tenantId) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			    public void setNamespace(final String namespace) {			
",
,
			fromLine:"			189",
			toLine:"			189",
			content:"
			    public void setAuthorization(final String authorization) {			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			    public void setDatetime(final String datetime) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			    public void setSessionToken(final String sessionToken) {			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			    public void setRequestId(final String requestId) {			
",
,
			fromLine:"			205",
			toLine:"			205",
			content:"
			    public void setLanguage(final String language) {			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			    public void setClientVersion(final String clientVersion) {			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
			    public void setProtocol(final String protocol) {			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			    public void setRequestCode(int requestCode) {			
",
,
			fromLine:"			223",
			toLine:"			233",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("remoteAddress", remoteAddress)
			            .add("tenantId", tenantId)
			            .add("namespace", namespace)
			            .add("authorization", authorization)
			            .add("datetime", datetime)
			            .add("sessionToken", sessionToken)
			            .add("requestId", requestId)
			            .add("language", language)
			            .add("clientVersion", clientVersion)
			            .add("protocol", protocol)			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/common/AuthorizationHeader.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.acl.common;
			
			import com.google.common.base.MoreObjects;
			import org.apache.commons.codec.DecoderException;
			import org.apache.commons.codec.binary.Base64;
			import org.apache.commons.codec.binary.Hex;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    private static final String SIGNED_HEADERS = "SignedHeaders";			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    private String method;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    private String[] signedHeaders;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			                }			
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			            }
			            if (SIGNATURE.equals(authItem)) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public String getAccessKey() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public String getSignature() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setAccessKey(final String accessKey) {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public void setSignature(final String signature) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			            .add("method", method)			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            .add("signedHeaders", signedHeaders)			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.acl.common;
			
			import java.io.File;
			import java.io.IOException;
			import java.nio.charset.Charset;
			import java.nio.charset.StandardCharsets;
			import java.util.Properties;
			import org.apache.rocketmq.common.MixAll;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    public static final String SECRET_KEY = "SecretKey";			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			
			    private String accessKey;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    private String securityToken;			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			    public SessionCredentials(String accessKey, String secretKey) {
			        this.accessKey = accessKey;			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            if (value != null) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            if (value != null) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getAccessKey() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setAccessKey(String accessKey) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public String getSecretKey() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public void setSecretKey(String secretKey) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public String getSignature() {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public void setSignature(String signature) {			
",
,
			fromLine:"			121",
			toLine:"			123",
			content:"
			        int result = 1;
			        result = prime * result + ((accessKey == null) ? 0 : accessKey.hashCode());
			        result = prime * result + ((secretKey == null) ? 0 : secretKey.hashCode());			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			        SessionCredentials other = (SessionCredentials) obj;
			        if (accessKey == null) {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			                return false;			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			
			        if (secretKey == null) {			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			                return false;			
",
,
			fromLine:"			149",
			toLine:"			151",
			content:"
			
			        if (signature == null) {
			            return other.signature == null;			
",
,
			fromLine:"			156",
			toLine:"			157",
			content:"
			    public String toString() {
			        return "SessionCredentials [accessKey=" + accessKey + ", secretKey=" + secretKey + ", signature="			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/common/AclClientRPCHook.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.acl.common;
			
			import java.util.Map;
			import java.util.SortedMap;
			import java.util.TreeMap;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			
			import static org.apache.rocketmq.acl.common.SessionCredentials.ACCESS_KEY;
			import static org.apache.rocketmq.acl.common.SessionCredentials.SECURITY_TOKEN;
			import static org.apache.rocketmq.acl.common.SessionCredentials.SIGNATURE;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        String signature = AclUtils.calSignature(total, sessionCredentials.getSecretKey());			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.acl.common;
			
			import java.io.FileInputStream;
			import java.io.FileNotFoundException;
			import java.io.InputStream;
			import java.io.PrintWriter;
			import java.util.Map;
			import java.util.SortedMap;
			
			import com.alibaba.fastjson.JSONObject;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.yaml.snakeyaml.Yaml;
			
			import static org.apache.rocketmq.acl.common.SessionCredentials.CHARSET;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			            for (Map.Entry<String, String> entry : fieldsMap.entrySet()) {			
",
,

		],
		acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessResource.java:
		[
			fromLine:"			16",
			toLine:"			66",
			content:"
			 */
			package org.apache.rocketmq.acl.plain;
			
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ClientType;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.Message;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.Subscription;
			import apache.rocketmq.v2.SubscriptionEntry;
			import apache.rocketmq.v2.TelemetryCommand;
			import com.google.protobuf.GeneratedMessageV3;
			import java.nio.charset.StandardCharsets;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.SortedMap;
			import java.util.TreeMap;
			import org.apache.commons.codec.DecoderException;
			import org.apache.commons.lang3.builder.ToStringBuilder;
			import org.apache.rocketmq.acl.AccessResource;
			import org.apache.rocketmq.acl.common.AclException;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.acl.common.AuthenticationHeader;
			import org.apache.rocketmq.acl.common.AuthorizationHeader;
			import org.apache.rocketmq.acl.common.Permission;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.common.KeyBuilder;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.PlainAccessConfig;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerListByGroupRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UnregisterClientRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.UpdateConsumerOffsetRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumerData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.HeartbeatData;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    // Identify the user			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
						
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        accessResource.setAccessKey(request.getExtFields().get(SessionCredentials.ACCESS_KEY));			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			            }			
",
,
			fromLine:"			357",
			toLine:"			357",
			content:"
			    public String getAccessKey() {			
",
,
			fromLine:"			361",
			toLine:"			361",
			content:"
			    public void setAccessKey(String accessKey) {			
",
,
			fromLine:"			365",
			toLine:"			365",
			content:"
			    public String getSecretKey() {			
",
,
			fromLine:"			369",
			toLine:"			369",
			content:"
			    public void setSecretKey(String secretKey) {			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			    public String getWhiteRemoteAddress() {			
",
,
			fromLine:"			377",
			toLine:"			377",
			content:"
			    public void setWhiteRemoteAddress(String whiteRemoteAddress) {			
",
,
			fromLine:"			381",
			toLine:"			381",
			content:"
			    public boolean isAdmin() {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			    public void setAdmin(boolean admin) {			
",
,
			fromLine:"			441",
			toLine:"			441",
			content:"
			    public String getSignature() {			
",
,
			fromLine:"			445",
			toLine:"			445",
			content:"
			    public void setSignature(String signature) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/builder/DefaultAuthenticationContextBuilder.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.builder;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import io.netty.channel.ChannelHandlerContext;
			import java.nio.charset.StandardCharsets;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.SortedMap;
			import java.util.TreeMap;
			import org.apache.commons.codec.DecoderException;
			import org.apache.commons.codec.binary.Base64;
			import org.apache.commons.codec.binary.Hex;
			import org.apache.commons.collections.MapUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.acl.common.AclUtils;
			import org.apache.rocketmq.acl.common.SessionCredentials;
			import org.apache.rocketmq.auth.authentication.context.DefaultAuthenticationContext;
			import org.apache.rocketmq.auth.authentication.exception.AuthenticationException;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.CommonConstants;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        result.setUsername(fields.get(SessionCredentials.ACCESS_KEY));			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			            }			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/PlainAccessConfig.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import java.io.Serializable;
			import java.util.List;
			import java.util.Objects;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    public String getAccessKey() {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public void setAccessKey(String accessKey) {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getSecretKey() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setSecretKey(String secretKey) {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getWhiteRemoteAddress() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setWhiteRemoteAddress(String whiteRemoteAddress) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public boolean isAdmin() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setAdmin(boolean admin) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public String getDefaultTopicPerm() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setDefaultTopicPerm(String defaultTopicPerm) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String getDefaultGroupPerm() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setDefaultGroupPerm(String defaultGroupPerm) {			
",
,
			fromLine:"			108",
			toLine:"			112",
			content:"
			        return "PlainAccessConfig{" +
			            "accessKey='" + accessKey + '\'' +
			            ", whiteRemoteAddress='" + whiteRemoteAddress + '\'' +
			            ", admin=" + admin +
			            ", defaultTopicPerm='" + defaultTopicPerm + '\'' +			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			        PlainAccessConfig config = (PlainAccessConfig) o;			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    @Override public int hashCode() {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CreateAccessConfigRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public String getAccessKey() {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void setAccessKey(String accessKey) {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public String getSecretKey() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setSecretKey(String secretKey) {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public String getWhiteRemoteAddress() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public void setWhiteRemoteAddress(String whiteRemoteAddress) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public boolean isAdmin() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setAdmin(boolean admin) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public String getDefaultTopicPerm() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setDefaultTopicPerm(String defaultTopicPerm) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public String getDefaultGroupPerm() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setDefaultGroupPerm(String defaultGroupPerm) {			
",
,
			fromLine:"			123",
			toLine:"			128",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("accessKey", accessKey)
			            .add("secretKey", secretKey)
			            .add("whiteRemoteAddress", whiteRemoteAddress)
			            .add("admin", admin)
			            .add("defaultTopicPerm", defaultTopicPerm)			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/context/AuthenticationContext.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.context;
			
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.commons.lang3.StringUtils;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public String getChannelId() {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public void setChannelId(String channelId) {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getRpcCode() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setRpcCode(String rpcCode) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        }			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        }			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			        }
			        if (this.extInfo == null) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        }			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Map<String, Object> getExtInfo() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setExtInfo(Map<String, Object> extInfo) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/context/AuthorizationContext.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.context;
			
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.commons.lang3.StringUtils;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			        }			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			        }			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			        }
			        if (this.extInfo == null) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        }			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public String getChannelId() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setChannelId(String channelId) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public String getRpcCode() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public void setRpcCode(String rpcCode) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Map<String, Object> getExtInfo() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setExtInfo(Map<String, Object> extInfo) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authentication/factory/AuthenticationFactory.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.auth.authentication.factory;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.function.Function;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authentication.AuthenticationEvaluator;
			import org.apache.rocketmq.auth.authentication.context.AuthenticationContext;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManager;
			import org.apache.rocketmq.auth.authentication.manager.AuthenticationMetadataManagerImpl;
			import org.apache.rocketmq.auth.authentication.provider.AuthenticationMetadataProvider;
			import org.apache.rocketmq.auth.authentication.provider.AuthenticationProvider;
			import org.apache.rocketmq.auth.authentication.provider.DefaultAuthenticationProvider;
			import org.apache.rocketmq.auth.authentication.strategy.AuthenticationStrategy;
			import org.apache.rocketmq.auth.authentication.strategy.StatelessAuthenticationStrategy;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			40",
			toLine:"			43",
			content:"
			
			    private static final Map<String, Object> INSTANCE_MAP = new HashMap<>();
			    private static final String PROVIDER_PREFIX = "PROVIDER_";
			    private static final String METADATA_PROVIDER_PREFIX = "METADATA_PROVIDER_";			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			        }			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        }			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public static AuthenticationEvaluator getEvaluator(AuthConfig config) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public static AuthenticationEvaluator getEvaluator(AuthConfig config, Supplier<?> metadataService) {			
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			        Object result = null;
			        if (INSTANCE_MAP.containsKey(key)) {			
",
,
			fromLine:"			138",
			toLine:"			140",
			content:"
			        if (result == null) {
			            synchronized (INSTANCE_MAP) {
			                if (INSTANCE_MAP.containsKey(key)) {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			                    if (result != null) {			
",
,

		],
		auth/src/main/java/org/apache/rocketmq/auth/authorization/factory/AuthorizationFactory.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.auth.authorization.factory;
			
			import com.google.protobuf.GeneratedMessageV3;
			import io.grpc.Metadata;
			import io.netty.channel.ChannelHandlerContext;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.function.Function;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.auth.authorization.AuthorizationEvaluator;
			import org.apache.rocketmq.auth.authorization.context.AuthorizationContext;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManager;
			import org.apache.rocketmq.auth.authorization.manager.AuthorizationMetadataManagerImpl;
			import org.apache.rocketmq.auth.authorization.provider.AuthorizationMetadataProvider;
			import org.apache.rocketmq.auth.authorization.provider.AuthorizationProvider;
			import org.apache.rocketmq.auth.authorization.provider.DefaultAuthorizationProvider;
			import org.apache.rocketmq.auth.authorization.strategy.AuthorizationStrategy;
			import org.apache.rocketmq.auth.authorization.strategy.StatelessAuthorizationStrategy;
			import org.apache.rocketmq.auth.config.AuthConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
						
",
,
			fromLine:"			41",
			toLine:"			44",
			content:"
			
			    private static final Map<String, Object> INSTANCE_MAP = new HashMap<>();
			    private static final String PROVIDER_PREFIX = "PROVIDER_";
			    private static final String METADATA_PROVIDER_PREFIX = "METADATA_PROVIDER_";			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			        }			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        }			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public static AuthorizationEvaluator getEvaluator(AuthConfig config) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public static AuthorizationEvaluator getEvaluator(AuthConfig config, Supplier<?> metadataService) {			
",
,
			fromLine:"			137",
			toLine:"			138",
			content:"
			        Object result = null;
			        if (INSTANCE_MAP.containsKey(key)) {			
",
,
			fromLine:"			141",
			toLine:"			143",
			content:"
			        if (result == null) {
			            synchronized (INSTANCE_MAP) {
			                if (INSTANCE_MAP.containsKey(key)) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			                    if (result != null) {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/BrokerControllerTest.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.broker;
			
			import java.io.File;
			import java.util.UUID;
			import java.util.concurrent.BlockingQueue;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.TimeUnit;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.future.FutureTaskExt;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.netty.RequestTask;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void setUp() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			                + UUID.randomUUID().toString();			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
						
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			
			        nettyServerConfig = new NettyServerConfig();			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void testBrokerRestart() throws Exception {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void destroy() {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public void testHeadSlowTimeMills() throws Exception {			
",
,

		],
		container/src/main/java/org/apache/rocketmq/container/InnerBrokerController.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.container;
			
			import java.util.concurrent.ScheduledFuture;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.out.BrokerOuterAPI;
			import org.apache.rocketmq.common.AbstractBrokerRunnable;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
						
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			    protected void initializeRemotingServer() {
			        this.remotingServer = this.brokerContainer.getRemotingServer().newRemotingServer(brokerConfig.getListenPort());			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void start() throws Exception {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			
			        if (!isIsolated && !this.messageStoreConfig.isEnableDLegerCommitLog() && !this.messageStoreConfig.isDuplicationEnable()) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			                    }			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			            }			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			                }			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        if (this.remotingServer != null) {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			        if (this.fastRemotingServer != null) {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			    public String getHAServerAddr() {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public int getListenPort() {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			    public MessageStore getMessageStoreByBrokerName(String brokerName) {			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			    public BrokerController peekMasterBroker() {			
",
,

		],
		container/src/main/java/org/apache/rocketmq/container/InnerSalveBrokerController.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.container;
			
			import com.google.common.base.Preconditions;
			
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
						
",
,
			fromLine:"			41",
			toLine:"			43",
			content:"
			    private void checkSlaveBrokerConfig() {
			        Preconditions.checkNotNull(brokerConfig.getBrokerClusterName());
			        Preconditions.checkNotNull(brokerConfig.getBrokerName());			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ClientChannelInfo.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
			    private final Channel channel;			
",
,
			fromLine:"			25",
			toLine:"			26",
			content:"
			    private final LanguageCode language;
			    private final int version;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			        this.channel = channel;			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        this.language = language;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public int getVersion() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public long getLastUpdateTimestamp() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setLastUpdateTimestamp(long lastUpdateTimestamp) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        result = prime * result + ((channel == null) ? 0 : channel.hashCode());			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        result = prime * result + ((language == null) ? 0 : language.hashCode());
			        result = prime * result + (int) (lastUpdateTimestamp ^ (lastUpdateTimestamp >>> 32));			
",
,
			fromLine:"			96",
			toLine:"			97",
			content:"
			    public String toString() {
			        return "ClientChannelInfo [channel=" + channel + ", clientId=" + clientId + ", language=" + language			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/ProducerInfo.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			
			
			public class ProducerInfo extends RemotingSerializable {			
",
,
			fromLine:"			26",
			toLine:"			28",
			content:"
			    private String remoteIP;
			    private LanguageCode language;
			    private int version;			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public ProducerInfo(String clientId, String remoteIP, LanguageCode language, int version, long lastUpdateTimestamp) {			
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			        this.remoteIP = remoteIP;
			        this.language = language;
			        this.version = version;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public LanguageCode getLanguage() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setLanguage(LanguageCode language) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public int getVersion() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setVersion(int version) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public long getLastUpdateTimestamp() {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public void setLastUpdateTimestamp(long lastUpdateTimestamp) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        return String.format("clientId=%s,remoteIP=%s, language=%s, version=%d, lastUpdateTimestamp=%d",			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/client/ClientHousekeepingService.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.ChannelEventListener;
			
			public class ClientHousekeepingService implements ChannelEventListener {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			    public ClientHousekeepingService(final BrokerController brokerController) {
			        this.brokerController = brokerController;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			                } catch (Throwable e) {			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			    private void scanExceptionChannel() {
			        this.brokerController.getProducerManager().scanNotActiveChannel();			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void onChannelConnect(String remoteAddr, Channel channel) {			
",
,
			fromLine:"			71",
			toLine:"			73",
			content:"
			    public void onChannelClose(String remoteAddr, Channel channel) {
			        this.brokerController.getProducerManager().doChannelCloseEvent(remoteAddr, channel);
			        this.brokerController.getConsumerManager().doChannelCloseEvent(remoteAddr, channel);			
",
,
			fromLine:"			78",
			toLine:"			80",
			content:"
			    public void onChannelException(String remoteAddr, Channel channel) {
			        this.brokerController.getProducerManager().doChannelCloseEvent(remoteAddr, channel);
			        this.brokerController.getConsumerManager().doChannelCloseEvent(remoteAddr, channel);			
",
,
			fromLine:"			85",
			toLine:"			87",
			content:"
			    public void onChannelIdle(String remoteAddr, Channel channel) {
			        this.brokerController.getProducerManager().doChannelCloseEvent(remoteAddr, channel);
			        this.brokerController.getConsumerManager().doChannelCloseEvent(remoteAddr, channel);			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/client/ProducerManagerTest.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.broker.client;
			
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelFuture;
			import java.lang.reflect.Field;
			import java.util.Map;
			
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			39",
			toLine:"			40",
			content:"
			    private ProducerManager producerManager;
			    private String group = "FooBar";			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @Mock			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        producerManager = new ProducerManager();			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void scanNotActiveChannel() throws Exception {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        });			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			        long channelExpiredTimeout = field.getLong(producerManager);
			        clientInfo.setLastUpdateTimestamp(System.currentTimeMillis() - channelExpiredTimeout - 10);			
",
,
			fromLine:"			76",
			toLine:"			78",
			content:"
			        producerManager.scanNotActiveChannel();
			        assertThat(producerManager.getGroupChannelTable().get(group)).isNull();
			        assertThat(groupRef.get()).isEqualTo(group);			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public void scanNotActiveChannelWithSameClientId() throws Exception {			
",
,
			fromLine:"			86",
			toLine:"			87",
			content:"
			        Channel channel1 = Mockito.mock(Channel.class);
			        ClientChannelInfo clientInfo1 = new ClientChannelInfo(channel1, clientInfo.getClientId(), LanguageCode.JAVA, 0);			
",
,
			fromLine:"			102",
			toLine:"			103",
			content:"
			        });
			        assertThat(producerManager.getGroupChannelTable().get(group).get(channel)).isNotNull();			
",
,
			fromLine:"			108",
			toLine:"			109",
			content:"
			        long channelExpiredTimeout = field.getLong(producerManager);
			        clientInfo.setLastUpdateTimestamp(System.currentTimeMillis() - channelExpiredTimeout - 10);			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        producerManager.scanNotActiveChannel();			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    public void doChannelCloseEvent() throws Exception {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        });			
",
,
			fromLine:"			134",
			toLine:"			137",
			content:"
			        assertThat(producerManager.findChannel("clientId")).isNotNull();
			        producerManager.doChannelCloseEvent("127.0.0.1", channel);
			        assertThat(producerManager.getGroupChannelTable().get(group)).isNull();
			        assertThat(groupRef.get()).isEqualTo(group);			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			    public void testRegisterProducer() throws Exception {
			        producerManager.registerProducer(group, clientInfo);			
",
,
			fromLine:"			148",
			toLine:"			149",
			content:"
			        assertThat(channel1).isNotNull();
			        assertThat(channelMap.get(channel)).isEqualTo(clientInfo);			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    public void unregisterProducer() throws Exception {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			        });			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			        assertThat(channelMap).isNotNull();			
",
,
			fromLine:"			174",
			toLine:"			176",
			content:"
			        assertThat(channel1).isNotNull();
			        assertThat(channel1).isEqualTo(channel);
			        producerManager.unregisterProducer(group, clientInfo);			
",
,
			fromLine:"			178",
			toLine:"			179",
			content:"
			        channel1 = producerManager.findChannel("clientId");
			        assertThat(groupRef.get()).isEqualTo(group);			
",
,
			fromLine:"			187",
			toLine:"			188",
			content:"
			    public void testGetGroupChannelTable() throws Exception {
			        producerManager.registerProducer(group, clientInfo);			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public void testGetAvailableChannel() {			
",
,
			fromLine:"			198",
			toLine:"			201",
			content:"
			
			        when(channel.isActive()).thenReturn(true);
			        when(channel.isWritable()).thenReturn(true);
			        Channel c = producerManager.getAvailableChannel(group);			
",
,
			fromLine:"			203",
			toLine:"			205",
			content:"
			
			        when(channel.isWritable()).thenReturn(false);
			        c = producerManager.getAvailableChannel(group);			
",
,
			fromLine:"			207",
			toLine:"			208",
			content:"
			
			        when(channel.isActive()).thenReturn(false);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/PullMessageRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import io.netty.buffer.ByteBuf;
			import java.util.HashMap;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.FastCodesHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    private Long subVersion;			
",
,
			fromLine:"			82",
			toLine:"			85",
			content:"
			    public void encode(ByteBuf out) {
			        writeIfNotNull(out, "consumerGroup", consumerGroup);
			        writeIfNotNull(out, "topic", topic);
			        writeIfNotNull(out, "queueId", queueId);			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			        writeIfNotNull(out, "maxMsgNums", maxMsgNums);
			        writeIfNotNull(out, "sysFlag", sysFlag);			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        writeIfNotNull(out, "subVersion", subVersion);			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			211",
			toLine:"			211",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			216",
			toLine:"			216",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			226",
			toLine:"			226",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			230",
			toLine:"			230",
			content:"
			    public Long getQueueOffset() {			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			    public void setQueueOffset(Long queueOffset) {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			    public Integer getSysFlag() {			
",
,
			fromLine:"			250",
			toLine:"			250",
			content:"
			    public void setSysFlag(Integer sysFlag) {			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			    public Long getCommitOffset() {			
",
,
			fromLine:"			258",
			toLine:"			258",
			content:"
			    public void setCommitOffset(Long commitOffset) {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			    public String getExpressionType() {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			    public void setExpressionType(String expressionType) {			
",
,
			fromLine:"			320",
			toLine:"			323",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)			
",
,
			fromLine:"			326",
			toLine:"			327",
			content:"
			            .add("maxMsgNums", maxMsgNums)
			            .add("sysFlag", sysFlag)			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			            .add("subVersion", subVersion)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/subscription/SimpleSubscriptionData.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.subscription;
			
			import com.google.common.base.MoreObjects;
			import java.util.Objects;
			
			public class SimpleSubscriptionData {
			    private String topic;
			    private String expressionType;			
",
,
			fromLine:"			29",
			toLine:"			31",
			content:"
			    public SimpleSubscriptionData(String topic, String expressionType, String expression, long version) {
			        this.topic = topic;
			        this.expressionType = expressionType;			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getExpressionType() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setExpressionType(String expressionType) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public String getExpression() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setExpression(String expression) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        SimpleSubscriptionData that = (SimpleSubscriptionData) o;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			86",
			toLine:"			88",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("topic", topic)
			            .add("expressionType", expressionType)			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/ConsumeQueueExtTest.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.util.Random;
			import org.apache.rocketmq.common.UtilAll;
			import org.junit.After;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			29",
			toLine:"			31",
			content:"
			
			    private static final String TOPIC = "abc";
			    private static final int QUEUE_ID = 0;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    private static final int UNIT_SIZE_WITH_BIT_MAP = ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + BIT_MAP_LENGTH / Byte.SIZE;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        return new ConsumeQueueExt(			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            consumeQueueExt.destroy();			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			            consumeQueueExt.destroy();			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            consumeQueueExt.destroy();			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			            // same unit size.			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			            if (lastFileUnitCount == 0) {			
",
,
			fromLine:"			180",
			toLine:"			180",
			content:"
			                assertThat(loadCqExt.unDecorate(loadCqExt.getMaxAddress()))			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
			            loadCqExt.destroy();			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
			            // truncate first one file.			
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			            consumeQueueExt.destroy();			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			            // truncate, only first 3 files exist.			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			            consumeQueueExt.destroy();			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			    public void destroy() {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/NotificationRequest.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.broker.longpolling;
			
			import java.util.concurrent.atomic.AtomicBoolean;
			
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			
			import io.netty.channel.Channel;
			
			public class NotificationRequest {			
",
,
			fromLine:"			27",
			toLine:"			28",
			content:"
			    private Channel channel;
			    private long expired;			
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			        this.channel = channel;
			        this.remotingCommand = remotingCommand;			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public RemotingCommand getRemotingCommand() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public boolean isTimeout() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public boolean complete() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String toString() {			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/longpolling/PopRequest.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.broker.longpolling;
			
			import io.netty.channel.ChannelHandlerContext;
			import java.util.Comparator;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicLong;
			
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			
			import io.netty.channel.Channel;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			    private final ChannelHandlerContext ctx;
			    private final long expired;			
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			        this.ctx = ctx;
			        this.remotingCommand = remotingCommand;			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public RemotingCommand getRemotingCommand() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public boolean isTimeout() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public boolean complete() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public long getExpired() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        final StringBuilder sb = new StringBuilder("PopRequest{");			
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			        sb.append(", ctx=").append(ctx);
			        sb.append(", expired=").append(expired);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/metrics/BrokerMetricsConstant.java:
		[
			fromLine:"			16",
			toLine:"			19",
			content:"
			 */
			package org.apache.rocketmq.broker.metrics;
			
			public class BrokerMetricsConstant {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    public static final String LABEL_NODE_ID = "node_id";
			    public static final String LABEL_AGGREGATION = "aggregation";			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/metrics/ControllerMetricsConstant.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.controller.metrics;
			
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			26",
			toLine:"			27",
			content:"
			    public static final String LABEL_PEER_ID = "peer_id";
			    public static final String LABEL_AGGREGATION = "aggregation";			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/metrics/ControllerMetricsManager.java:
		[
			fromLine:"			17",
			toLine:"			81",
			content:"
			
			package org.apache.rocketmq.controller.metrics;
			
			import com.google.common.base.Splitter;
			import io.openmessaging.storage.dledger.MemberState;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.LongCounter;
			import io.opentelemetry.api.metrics.LongHistogram;
			import io.opentelemetry.api.metrics.LongUpDownCounter;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongGauge;
			import io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;
			import io.opentelemetry.exporter.prometheus.PrometheusHttpServer;
			import io.opentelemetry.sdk.OpenTelemetrySdk;
			import io.opentelemetry.sdk.metrics.Aggregation;
			import io.opentelemetry.sdk.metrics.InstrumentSelector;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.SdkMeterProvider;
			import io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;
			import io.opentelemetry.sdk.metrics.View;
			import io.opentelemetry.sdk.metrics.data.AggregationTemporality;
			import io.opentelemetry.sdk.metrics.export.MetricExporter;
			import io.opentelemetry.sdk.metrics.export.PeriodicMetricReader;
			import io.opentelemetry.sdk.resources.Resource;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.metrics.NopLongCounter;
			import org.apache.rocketmq.common.metrics.NopLongHistogram;
			import org.apache.rocketmq.common.metrics.NopLongUpDownCounter;
			import org.apache.rocketmq.common.metrics.NopObservableLongGauge;
			import org.apache.rocketmq.controller.ControllerManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.slf4j.bridge.SLF4JBridgeHandler;
			
			import java.io.File;
			import java.util.Arrays;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.AGGREGATION_DELTA;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.COUNTER_DLEDGER_OP_TOTAL;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.COUNTER_ELECTION_TOTAL;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.COUNTER_REQUEST_TOTAL;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.GAUGE_ACTIVE_BROKER_NUM;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.GAUGE_DLEDGER_DISK_USAGE;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.GAUGE_ROLE;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.HISTOGRAM_DLEDGER_OP_LATENCY;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.HISTOGRAM_REQUEST_LATENCY;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_ADDRESS;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_AGGREGATION;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_BROKER_SET;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_CLUSTER_NAME;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_GROUP;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.LABEL_PEER_ID;
			import static org.apache.rocketmq.controller.metrics.ControllerMetricsConstant.OPEN_TELEMETRY_METER_NAME;
						
",
,
			fromLine:"			261",
			toLine:"			261",
			content:"
			                    brokerSetAndNum.forEach((brokerSet, num) -> measurement.record(num,			
",
,
			fromLine:"			314",
			toLine:"			314",
			content:"
			        if (config.isMetricsInDelta()) {			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			        controllerMeter = OpenTelemetrySdk.builder().setMeterProvider(providerBuilder.build())			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/metrics/ProxyMetricsManager.java:
		[
			fromLine:"			16",
			toLine:"			60",
			content:"
			 */
			package org.apache.rocketmq.proxy.metrics;
			
			import com.google.common.base.Splitter;
			import io.opentelemetry.api.common.Attributes;
			import io.opentelemetry.api.common.AttributesBuilder;
			import io.opentelemetry.api.metrics.Meter;
			import io.opentelemetry.api.metrics.ObservableLongGauge;
			import io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;
			import io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporterBuilder;
			import io.opentelemetry.exporter.prometheus.PrometheusHttpServer;
			import io.opentelemetry.sdk.OpenTelemetrySdk;
			import io.opentelemetry.sdk.metrics.InstrumentType;
			import io.opentelemetry.sdk.metrics.SdkMeterProvider;
			import io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;
			import io.opentelemetry.sdk.metrics.data.AggregationTemporality;
			import io.opentelemetry.sdk.metrics.export.MetricExporter;
			import io.opentelemetry.sdk.metrics.export.PeriodicMetricReader;
			import io.opentelemetry.sdk.resources.Resource;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.broker.metrics.BrokerMetricsManager;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.slf4j.bridge.SLF4JBridgeHandler;
			
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.AGGREGATION_DELTA;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_AGGREGATION;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_CLUSTER_NAME;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_NODE_ID;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.LABEL_NODE_TYPE;
			import static org.apache.rocketmq.broker.metrics.BrokerMetricsConstant.OPEN_TELEMETRY_METER_NAME;
			import static org.apache.rocketmq.proxy.metrics.ProxyMetricsConstant.GAUGE_PROXY_UP;
			import static org.apache.rocketmq.proxy.metrics.ProxyMetricsConstant.LABEL_PROXY_MODE;
			import static org.apache.rocketmq.proxy.metrics.ProxyMetricsConstant.NODE_TYPE_PROXY;
						
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			        LABEL_MAP.put(LABEL_NODE_TYPE, NODE_TYPE_PROXY);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        if (proxyConfig.isMetricsInDelta()) {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			        LABEL_MAP.put(LABEL_NODE_TYPE, NODE_TYPE_PROXY);			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			            .build()			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/hook/ConsumeMessageContext.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.client.hook;
			
			import java.util.List;
			import java.util.Map;
			
			import org.apache.rocketmq.client.AccessChannel;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			
			public class ConsumeMessageContext {
			    private String consumerGroup;
			    private List<MessageExt> msgList;
			    private MessageQueue mq;
			    private boolean success;
			    private String status;
			    private Object mqTraceContext;
			    private Map<String, String> props;			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public List<MessageExt> getMsgList() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void setMsgList(List<MessageExt> msgList) {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public MessageQueue getMq() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public void setMq(MessageQueue mq) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public boolean isSuccess() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setSuccess(boolean success) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public Object getMqTraceContext() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public void setMqTraceContext(Object mqTraceContext) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Map<String, String> getProps() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setProps(Map<String, String> props) {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public String getStatus() {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public void setStatus(String status) {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public void setNamespace(String namespace) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/QueryConsumerOffsetRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			88",
			toLine:"			90",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ReplyMessageRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    @CFNullable			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    @CFNullable			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public String getDefaultTopic() {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			    public void setDefaultTopic(String defaultTopic) {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    public Integer getDefaultTopicQueueNums() {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void setDefaultTopicQueueNums(Integer defaultTopicQueueNums) {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public Integer getSysFlag() {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public void setSysFlag(Integer sysFlag) {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public Long getBornTimestamp() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public void setBornTimestamp(Long bornTimestamp) {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public Integer getFlag() {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public void setFlag(Integer flag) {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public String getProperties() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			    public void setProperties(String properties) {			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public Integer getReconsumeTimes() {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public void setReconsumeTimes(Integer reconsumeTimes) {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public String getBornHost() {			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			    public void setBornHost(String bornHost) {			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    public String getStoreHost() {			
",
,
			fromLine:"			167",
			toLine:"			167",
			content:"
			    public void setStoreHost(String storeHost) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/UpdateConsumerOffsetRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public Long getCommitOffset() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void setCommitOffset(Long commitOffset) {			
",
,
			fromLine:"			88",
			toLine:"			91",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("topic", topic)
			            .add("queueId", queueId)			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/hook/SendMessageContext.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.client.hook;
			
			import java.util.Map;
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.message.MessageType;
			
			public class SendMessageContext {
			    private String producerGroup;
			    private Message message;
			    private MessageQueue mq;
			    private String brokerAddr;
			    private String bornHost;
			    private CommunicationMode communicationMode;
			    private SendResult sendResult;
			    private Exception exception;
			    private Object mqTraceContext;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    private MessageType msgType = MessageType.Normal_Msg;			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public Message getMessage() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void setMessage(Message message) {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public MessageQueue getMq() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public void setMq(MessageQueue mq) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public CommunicationMode getCommunicationMode() {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public void setCommunicationMode(CommunicationMode communicationMode) {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public SendResult getSendResult() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void setSendResult(SendResult sendResult) {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			    public Exception getException() {			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			    public void setException(Exception exception) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public Object getMqTraceContext() {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			    public void setMqTraceContext(Object mqTraceContext) {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    public Map<String, String> getProps() {			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    public void setProps(Map<String, String> props) {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public String getBornHost() {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			    public void setBornHost(String bornHost) {			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    public String getNamespace() {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    public void setNamespace(String namespace) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/SendMessageRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import com.google.common.base.MoreObjects;
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    @CFNullable			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    @CFNullable			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public String getDefaultTopic() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setDefaultTopic(String defaultTopic) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public Integer getDefaultTopicQueueNums() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public void setDefaultTopicQueueNums(Integer defaultTopicQueueNums) {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    public Integer getSysFlag() {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public void setSysFlag(Integer sysFlag) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public Long getBornTimestamp() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void setBornTimestamp(Long bornTimestamp) {			
",
,
			fromLine:"			128",
			toLine:"			128",
			content:"
			    public Integer getFlag() {			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			    public void setFlag(Integer flag) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    public String getProperties() {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			    public void setProperties(String properties) {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    public Integer getReconsumeTimes() {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        }			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
			    public void setReconsumeTimes(Integer reconsumeTimes) {			
",
,
			fromLine:"			206",
			toLine:"			215",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("producerGroup", producerGroup)
			            .add("topic", topic)
			            .add("defaultTopic", defaultTopic)
			            .add("defaultTopicQueueNums", defaultTopicQueueNums)
			            .add("queueId", queueId)
			            .add("sysFlag", sysFlag)
			            .add("bornTimestamp", bornTimestamp)
			            .add("flag", flag)
			            .add("properties", properties)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/SendMessageResponseHeader.java:
		[
			fromLine:"			20",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import io.netty.buffer.ByteBuf;
			import java.util.HashMap;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.FastCodesHeader;
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			    public void encode(ByteBuf out) {
			        writeIfNotNull(out, "msgId", msgId);
			        writeIfNotNull(out, "queueId", queueId);			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        if (str != null) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public Integer getQueueId() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setQueueId(Integer queueId) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public Long getQueueOffset() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setQueueOffset(Long queueOffset) {			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOffsetManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			31",
			content:"
			
			package org.apache.rocketmq.broker.offset;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.mockito.Mockito;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			42",
			content:"
			    public void init() {
			        brokerController = Mockito.mock(BrokerController.class);			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        ConcurrentHashMap<String, ConcurrentMap<Integer, Long>> offsetTable = new ConcurrentHashMap<>(512);			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			            }});			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			    public void cleanOffsetByTopic_NotExist() {
			        consumerOffsetManager.cleanOffsetByTopic("InvalidTopic");			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			    public void cleanOffsetByTopic_Exist() {
			        consumerOffsetManager.cleanOffsetByTopic("FooBar");			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void testOffsetPersistInMemory() {			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			
			        consumerOffsetManager.persist();			
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/offset/RocksDBConsumerOffsetManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.broker.offset;
			
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mockito;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
						
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        }			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();			
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			
			        consumerOffsetManager = new RocksDBConsumerOffsetManager(brokerController);			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        ConcurrentHashMap<String, ConcurrentMap<Integer, Long>> offsetTable = new ConcurrentHashMap<>(512);			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			            }});			
",
,
			fromLine:"			66",
			toLine:"			67",
			content:"
			        }
			        if (consumerOffsetManager != null) {			
",
,
			fromLine:"			76",
			toLine:"			77",
			content:"
			        }
			        consumerOffsetManager.cleanOffsetByTopic("InvalidTopic");			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        }
			        consumerOffsetManager.cleanOffsetByTopic("FooBar");			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			        }			
",
,
			fromLine:"			101",
			toLine:"			103",
			content:"
			
			        consumerOffsetManager.persist();
			        consumerOffsetManager.stop();			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,

		],
		broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java:
		[
			fromLine:"			16",
			toLine:"			56",
			content:"
			 */
			package org.apache.rocketmq.broker.processor;
			
			import io.netty.channel.ChannelHandlerContext;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.transaction.OperationResult;
			import org.apache.rocketmq.broker.transaction.TransactionMetrics;
			import org.apache.rocketmq.broker.transaction.TransactionalMessageService;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.common.stats.Stats;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;
			import org.apache.rocketmq.store.AppendMessageResult;
			import org.apache.rocketmq.store.AppendMessageStatus;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.PutMessageResult;
			import org.apache.rocketmq.store.PutMessageStatus;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.Spy;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import java.nio.charset.StandardCharsets;
			
			import static org.assertj.core.api.Assertions.assertThat;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    @Mock			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    private BrokerController			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    @Mock			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			    @Mock			
",
,
			fromLine:"			82",
			toLine:"			85",
			content:"
			    public void init() {
			        when(transactionMsgService.getTransactionMetrics()).thenReturn(transactionMetrics);
			        brokerController.setMessageStore(messageStore);
			        brokerController.setTransactionalMessageService(transactionMsgService);			
",
,
			fromLine:"			98",
			toLine:"			99",
			content:"
			    public void testProcessRequest() throws RemotingCommandException {
			        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);			
",
,
			fromLine:"			104",
			toLine:"			106",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);
			        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);
			        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			    public void testProcessRequest_CheckMessage() throws RemotingCommandException {
			        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);			
",
,
			fromLine:"			117",
			toLine:"			119",
			content:"
			        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);
			        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);
			        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void testProcessRequest_RollBack() throws RemotingCommandException {			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE, true);			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public void testProcessRequest_RejectCommitMessage() throws RemotingCommandException {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public void testProcessRequest_RejectRollBackMessage() throws RemotingCommandException {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE, false);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        messageExt.setQueueOffset(1234);			
",
,

		],
		broker/src/main/java/org/apache/rocketmq/broker/topic/TopicQueueMappingManager.java:
		[
			fromLine:"			16",
			toLine:"			46",
			content:"
			 */
			package org.apache.rocketmq.broker.topic;
			
			import com.alibaba.fastjson.JSON;
			import java.util.List;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.BrokerPathConfigHelper;
			import org.apache.rocketmq.common.ConfigManager;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.TopicQueueMappingSerializeWrapper;
			import org.apache.rocketmq.remoting.protocol.statictopic.LogicQueueMappingItem;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingContext;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingDetail;
			import org.apache.rocketmq.remoting.protocol.statictopic.TopicQueueMappingUtils;
			import org.apache.rocketmq.remoting.rpc.TopicQueueRequestHeader;
			import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
			
			import static org.apache.rocketmq.remoting.protocol.RemotingCommand.buildErrorResponse;
			
			public class TopicQueueMappingManager extends ConfigManager {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);			
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			    //this data version should be equal to the TopicConfigManager
			    private final DataVersion dataVersion = new DataVersion();			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public TopicQueueMappingManager(BrokerController brokerController) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            }			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			            if (updated && flush) {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			                this.persist();			
",
,
			fromLine:"			134",
			toLine:"			135",
			content:"
			        if (old != null) {
			            log.info("delete topic queue mapping OK, static topic queue mapping: {}", old);			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			        } else {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			        wrapper.setTopicQueueMappingInfoMap(topicQueueMappingTable);			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public String configFilePath() {			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
			                this.topicQueueMappingTable.putAll(wrapper.getTopicQueueMappingInfoMap());			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			    public DataVersion getDataVersion() {			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        }			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/ClientConfig.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.client;
			
			import java.util.Collection;
			import java.util.HashSet;
			import java.util.Iterator;
			import java.util.Set;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.common.utils.NameServerAddressUtils;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.RequestType;
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public static final String HEART_BEAT_V2 = "com.rocketmq.heartbeat.v2";			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    private String instanceName = System.getProperty("rocketmq.client.name", "DEFAULT");			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
						
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			    private int mqClientApiTimeout = 3 * 1000;
			    private int detectTimeout = 200;			
",
,
			fromLine:"			95",
			toLine:"			96",
			content:"
			     */
			    private boolean sendLatencyEnable = Boolean.parseBoolean(System.getProperty(SEND_LATENCY_ENABLE, "false"));			
",
,
			fromLine:"			201",
			toLine:"			201",
			content:"
			    public void resetClientConfig(final ClientConfig cc) {			
",
,
			fromLine:"			204",
			toLine:"			204",
			content:"
			        this.instanceName = cc.instanceName;			
",
,
			fromLine:"			212",
			toLine:"			213",
			content:"
			        this.vipChannelEnabled = cc.vipChannelEnabled;
			        this.useTLS = cc.useTLS;			
",
,
			fromLine:"			221",
			toLine:"			222",
			content:"
			        this.useHeartbeatV2 = cc.useHeartbeatV2;
			        this.startDetectorEnable = cc.startDetectorEnable;			
",
,
			fromLine:"			224",
			toLine:"			225",
			content:"
			        this.enableHeartbeatChannelEventListener = cc.enableHeartbeatChannelEventListener;
			        this.detectInterval = cc.detectInterval;			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        ClientConfig cc = new ClientConfig();			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			        cc.instanceName = instanceName;			
",
,
			fromLine:"			244",
			toLine:"			245",
			content:"
			        cc.vipChannelEnabled = vipChannelEnabled;
			        cc.useTLS = useTLS;			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			        cc.useHeartbeatV2 = useHeartbeatV2;			
",
,
			fromLine:"			255",
			toLine:"			257",
			content:"
			        cc.enableHeartbeatChannelEventListener = enableHeartbeatChannelEventListener;
			        cc.sendLatencyEnable = sendLatencyEnable;
			        cc.detectInterval = detectInterval;			
",
,
			fromLine:"			265",
			toLine:"			266",
			content:"
			    public String getNamesrvAddr() {
			        if (StringUtils.isNotEmpty(namesrvAddr) && NameServerAddressUtils.NAMESRV_ENDPOINT_PATTERN.matcher(namesrvAddr.trim()).matches()) {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			        }			
",
,
			fromLine:"			277",
			toLine:"			277",
			content:"
			    public void setNamesrvAddr(String namesrvAddr) {			
",
,
			fromLine:"			282",
			toLine:"			282",
			content:"
			    public int getClientCallbackExecutorThreads() {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			    public void setClientCallbackExecutorThreads(int clientCallbackExecutorThreads) {			
",
,
			fromLine:"			346",
			toLine:"			346",
			content:"
			    public boolean isUseTLS() {			
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
			    public void setUseTLS(boolean useTLS) {			
",
,
			fromLine:"			354",
			toLine:"			354",
			content:"
			    public String getSocksProxyConfig() {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			    public void setSocksProxyConfig(String socksProxyConfig) {			
",
,
			fromLine:"			395",
			toLine:"			397",
			content:"
			
			        if (StringUtils.isNotEmpty(this.namesrvAddr)) {
			            if (NameServerAddressUtils.validateInstanceEndpoint(namesrvAddr)) {			
",
,
			fromLine:"			443",
			toLine:"			443",
			content:"
			    public boolean isSendLatencyEnable() {			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
			    public void setSendLatencyEnable(boolean sendLatencyEnable) {			
",
,
			fromLine:"			451",
			toLine:"			451",
			content:"
			    public boolean isStartDetectorEnable() {			
",
,
			fromLine:"			455",
			toLine:"			455",
			content:"
			    public void setStartDetectorEnable(boolean startDetectorEnable) {			
",
,
			fromLine:"			467",
			toLine:"			467",
			content:"
			    public int getDetectTimeout() {			
",
,
			fromLine:"			471",
			toLine:"			471",
			content:"
			    public void setDetectTimeout(int detectTimeout) {			
",
,
			fromLine:"			475",
			toLine:"			475",
			content:"
			    public int getDetectInterval() {			
",
,
			fromLine:"			479",
			toLine:"			479",
			content:"
			    public void setDetectInterval(int detectInterval) {			
",
,
			fromLine:"			509",
			toLine:"			509",
			content:"
			        return "ClientConfig{" +			
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
			            ", instanceName='" + instanceName + '\'' +			
",
,
			fromLine:"			527",
			toLine:"			528",
			content:"
			            ", useHeartbeatV2=" + useHeartbeatV2 +
			            ", useTLS=" + useTLS +			
",
,
			fromLine:"			530",
			toLine:"			531",
			content:"
			            ", mqClientApiTimeout=" + mqClientApiTimeout +
			            ", detectTimeout=" + detectTimeout +			
",
,
			fromLine:"			534",
			toLine:"			535",
			content:"
			            ", enableStreamRequestType=" + enableStreamRequestType +
			            ", sendLatencyEnable=" + sendLatencyEnable +			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.proxy.config;
			
			import java.net.InetAddress;
			import java.net.UnknownHostException;
			import java.time.Duration;
			import java.util.Comparator;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.ConcurrentSkipListMap;
			import java.util.concurrent.TimeUnit;
			import java.util.stream.Collectors;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.ProxyMode;
			import org.apache.rocketmq.proxy.common.ProxyException;
			import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public final static String DEFAULT_CONFIG_FILE_NAME = "rmq-proxy.json";			
",
,
			fromLine:"			75",
			toLine:"			77",
			content:"
			
			    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));
			    private String namesrvDomain = "";			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			     */			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    private int grpcBossLoopNum = 1;			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    private boolean enableGrpcEpoll = false;			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    private int grpcThreadPoolQueueCapacity = 100000;			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    private long grpcProxyRelayRequestTimeoutInSeconds = 5;			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    private int grpcProducerThreadQueueCapacity = 10000;			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    private int grpcConsumerThreadQueueCapacity = 10000;			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    private int grpcRouteThreadQueueCapacity = 10000;			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    private int grpcClientManagerThreadQueueCapacity = 10000;			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
						
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    private int producerProcessorThreadPoolQueueCapacity = 10000;			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			    private int topicRouteServiceCacheMaxNum = 20000;			
",
,
			fromLine:"			213",
			toLine:"			213",
			content:"
						
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
						
",
,
			fromLine:"			219",
			toLine:"			223",
			content:"
			
			    private String metricsGrpcExporterTarget = "";
			    private String metricsGrpcExporterHeader = "";
			    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
			    private long metricGrpcExporterIntervalInMills = 60 * 1000;			
",
,
			fromLine:"			225",
			toLine:"			226",
			content:"
			
			    private int metricsPromExporterPort = 5557;			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
						
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
						
",
,
			fromLine:"			242",
			toLine:"			245",
			content:"
			    // related to proxy's send strategy in cluster mode.
			    private boolean sendLatencyEnable = false;
			    private boolean startDetectorEnable = false;
			    private int detectTimeout = 200;			
",
,
			fromLine:"			247",
			toLine:"			252",
			content:"
			
			    private int remotingHeartbeatThreadPoolNums = 2 * PROCESSOR_NUMBER;
			    private int remotingTopicRouteThreadPoolNums = 2 * PROCESSOR_NUMBER;
			    private int remotingSendMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
			    private int remotingPullMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
			    private int remotingUpdateOffsetThreadPoolNums = 4 * PROCESSOR_NUMBER;			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			    public String getNamesrvAddr() {			
",
,
			fromLine:"			417",
			toLine:"			417",
			content:"
			    public void setNamesrvAddr(String namesrvAddr) {			
",
,
			fromLine:"			421",
			toLine:"			421",
			content:"
			    public String getNamesrvDomain() {			
",
,
			fromLine:"			425",
			toLine:"			425",
			content:"
			    public void setNamesrvDomain(String namesrvDomain) {			
",
,
			fromLine:"			429",
			toLine:"			429",
			content:"
			    public String getNamesrvDomainSubgroup() {			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			    public void setNamesrvDomainSubgroup(String namesrvDomainSubgroup) {			
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
			    public String getProxyMode() {			
",
,
			fromLine:"			441",
			toLine:"			441",
			content:"
			    public void setProxyMode(String proxyMode) {			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			    public String getBrokerConfigPath() {			
",
,
			fromLine:"			537",
			toLine:"			537",
			content:"
			    public void setBrokerConfigPath(String brokerConfigPath) {			
",
,
			fromLine:"			1193",
			toLine:"			1193",
			content:"
			    public String getRegionId() {			
",
,
			fromLine:"			1197",
			toLine:"			1197",
			content:"
			    public void setRegionId(String regionId) {			
",
,
			fromLine:"			1201",
			toLine:"			1201",
			content:"
			    public boolean isTraceOn() {			
",
,
			fromLine:"			1205",
			toLine:"			1205",
			content:"
			    public void setTraceOn(boolean traceOn) {			
",
,
			fromLine:"			1233",
			toLine:"			1233",
			content:"
			    public String getMetricsGrpcExporterTarget() {			
",
,
			fromLine:"			1237",
			toLine:"			1237",
			content:"
			    public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {			
",
,
			fromLine:"			1241",
			toLine:"			1241",
			content:"
			    public String getMetricsGrpcExporterHeader() {			
",
,
			fromLine:"			1245",
			toLine:"			1245",
			content:"
			    public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {			
",
,
			fromLine:"			1249",
			toLine:"			1249",
			content:"
			    public long getMetricGrpcExporterTimeOutInMills() {			
",
,
			fromLine:"			1253",
			toLine:"			1253",
			content:"
			    public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {			
",
,
			fromLine:"			1257",
			toLine:"			1257",
			content:"
			    public long getMetricGrpcExporterIntervalInMills() {			
",
,
			fromLine:"			1261",
			toLine:"			1261",
			content:"
			    public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {			
",
,
			fromLine:"			1265",
			toLine:"			1265",
			content:"
			    public long getMetricLoggingExporterIntervalInMills() {			
",
,
			fromLine:"			1269",
			toLine:"			1269",
			content:"
			    public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {			
",
,
			fromLine:"			1273",
			toLine:"			1273",
			content:"
			    public int getMetricsPromExporterPort() {			
",
,
			fromLine:"			1277",
			toLine:"			1277",
			content:"
			    public void setMetricsPromExporterPort(int metricsPromExporterPort) {			
",
,
			fromLine:"			1281",
			toLine:"			1281",
			content:"
			    public String getMetricsPromExporterHost() {			
",
,
			fromLine:"			1285",
			toLine:"			1285",
			content:"
			    public void setMetricsPromExporterHost(String metricsPromExporterHost) {			
",
,
			fromLine:"			1289",
			toLine:"			1289",
			content:"
			    public String getMetricsLabel() {			
",
,
			fromLine:"			1293",
			toLine:"			1293",
			content:"
			    public void setMetricsLabel(String metricsLabel) {			
",
,
			fromLine:"			1297",
			toLine:"			1297",
			content:"
			    public boolean isMetricsInDelta() {			
",
,
			fromLine:"			1301",
			toLine:"			1301",
			content:"
			    public void setMetricsInDelta(boolean metricsInDelta) {			
",
,
			fromLine:"			1305",
			toLine:"			1305",
			content:"
			    public long getChannelExpiredTimeout() {			
",
,
			fromLine:"			1313",
			toLine:"			1313",
			content:"
			    public void setChannelExpiredTimeout(long channelExpiredTimeout) {			
",
,
			fromLine:"			1481",
			toLine:"			1481",
			content:"
			    public boolean isSendLatencyEnable() {			
",
,
			fromLine:"			1485",
			toLine:"			1485",
			content:"
			    public boolean isStartDetectorEnable() {			
",
,
			fromLine:"			1489",
			toLine:"			1489",
			content:"
			    public void setStartDetectorEnable(boolean startDetectorEnable) {			
",
,
			fromLine:"			1493",
			toLine:"			1493",
			content:"
			    public void setSendLatencyEnable(boolean sendLatencyEnable) {			
",
,
			fromLine:"			1497",
			toLine:"			1497",
			content:"
			    public boolean getStartDetectorEnable() {			
",
,
			fromLine:"			1501",
			toLine:"			1501",
			content:"
			    public boolean getSendLatencyEnable() {			
",
,
			fromLine:"			1505",
			toLine:"			1505",
			content:"
			    public int getDetectTimeout() {			
",
,
			fromLine:"			1509",
			toLine:"			1509",
			content:"
			    public void setDetectTimeout(int detectTimeout) {			
",
,
			fromLine:"			1513",
			toLine:"			1513",
			content:"
			    public int getDetectInterval() {			
",
,
			fromLine:"			1517",
			toLine:"			1517",
			content:"
			    public void setDetectInterval(int detectInterval) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyClientConfig.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
			
			import org.apache.rocketmq.remoting.common.TlsMode;
			
			import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_ENABLE;
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    private int clientWorkerThreads = NettySystemConfig.clientWorkerSize;			
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    private int clientAsyncSemaphoreValue = NettySystemConfig.CLIENT_ASYNC_SEMAPHORE_VALUE;			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			     */			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    private boolean clientPooledByteBufAllocatorEnable = false;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
						
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			
			    private int writeBufferHighWaterMark = NettySystemConfig.writeBufferHighWaterMark;			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public boolean isClientCloseSocketIfTimeout() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setClientCloseSocketIfTimeout(final boolean clientCloseSocketIfTimeout) {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public int getConnectTimeoutMillis() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setConnectTimeoutMillis(int connectTimeoutMillis) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public int getClientCallbackExecutorThreads() {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public void setClientCallbackExecutorThreads(int clientCallbackExecutorThreads) {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			    public int getClientChannelMaxIdleTimeSeconds() {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
			    public void setClientChannelMaxIdleTimeSeconds(int clientChannelMaxIdleTimeSeconds) {			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			    public boolean isUseTLS() {			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			    public void setUseTLS(boolean useTLS) {			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
			    public int getWriteBufferLowWaterMark() {			
",
,
			fromLine:"			162",
			toLine:"			162",
			content:"
			    public void setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			    public int getWriteBufferHighWaterMark() {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			    public void setWriteBufferHighWaterMark(int writeBufferHighWaterMark) {			
",
,
			fromLine:"			214",
			toLine:"			214",
			content:"
			    public String getSocksProxyConfig() {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			    public void setSocksProxyConfig(String socksProxyConfig) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/common/NameserverAccessConfig.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.client.common;
			
			public class NameserverAccessConfig {
			    private String namesrvAddr;
			    private String namesrvDomain;			
",
,
			fromLine:"			25",
			toLine:"			27",
			content:"
			    public NameserverAccessConfig(String namesrvAddr, String namesrvDomain, String namesrvDomainSubgroup) {
			        this.namesrvAddr = namesrvAddr;
			        this.namesrvDomain = namesrvDomain;			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public String getNamesrvAddr() {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public String getNamesrvDomain() {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getNamesrvDomainSubgroup() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/DefaultLitePullConsumer.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.Collection;
			import java.util.List;
			import java.util.Map;
			import java.util.Set;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.consumer.DefaultLitePullConsumerImpl;
			import org.apache.rocketmq.client.trace.AsyncTraceDispatcher;
			import org.apache.rocketmq.client.trace.TraceDispatcher;
			import org.apache.rocketmq.client.trace.hook.ConsumeMessageTraceHookImpl;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import static org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData.SUB_ALL;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			     */			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			     */			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			     */			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			     */			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			     */			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			     */			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			     */			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			     */			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			     */			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			     */			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			     */			
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			     */			
",
,
			fromLine:"			146",
			toLine:"			146",
			content:"
			     */			
",
,
			fromLine:"			158",
			toLine:"			158",
			content:"
						
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			     */			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			     */			
",
,
			fromLine:"			171",
			toLine:"			171",
			content:"
						
",
,
			fromLine:"			205",
			toLine:"			206",
			content:"
			    public DefaultLitePullConsumer(final String consumerGroup, RPCHook rpcHook) {
			        this.consumerGroup = consumerGroup;			
",
,
			fromLine:"			220",
			toLine:"			221",
			content:"
			        this.namespace = namespace;
			        this.consumerGroup = consumerGroup;			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			        setTraceDispatcher();			
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        this.defaultLitePullConsumerImpl.start();			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			            try {			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
			            } catch (MQClientException e) {			
",
,
			fromLine:"			243",
			toLine:"			244",
			content:"
			        this.defaultLitePullConsumerImpl.shutdown();
			        if (null != traceDispatcher) {			
",
,
			fromLine:"			420",
			toLine:"			420",
			content:"
			    public int getPullThreadNums() {			
",
,
			fromLine:"			424",
			toLine:"			424",
			content:"
			    public void setPullThreadNums(int pullThreadNums) {			
",
,
			fromLine:"			438",
			toLine:"			438",
			content:"
			    public int getPullBatchSize() {			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
			    public void setPullBatchSize(int pullBatchSize) {			
",
,
			fromLine:"			462",
			toLine:"			462",
			content:"
			    public int getPullThresholdForQueue() {			
",
,
			fromLine:"			466",
			toLine:"			466",
			content:"
			    public void setPullThresholdForQueue(int pullThresholdForQueue) {			
",
,
			fromLine:"			470",
			toLine:"			470",
			content:"
			    public int getPullThresholdSizeForQueue() {			
",
,
			fromLine:"			474",
			toLine:"			474",
			content:"
			    public void setPullThresholdSizeForQueue(int pullThresholdSizeForQueue) {			
",
,
			fromLine:"			478",
			toLine:"			478",
			content:"
			    public AllocateMessageQueueStrategy getAllocateMessageQueueStrategy() {			
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
			    public void setAllocateMessageQueueStrategy(AllocateMessageQueueStrategy allocateMessageQueueStrategy) {			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			    public long getBrokerSuspendMaxTimeMillis() {			
",
,
			fromLine:"			498",
			toLine:"			498",
			content:"
			    public OffsetStore getOffsetStore() {			
",
,
			fromLine:"			502",
			toLine:"			502",
			content:"
			    public void setOffsetStore(OffsetStore offsetStore) {			
",
,
			fromLine:"			507",
			toLine:"			507",
			content:"
			    public boolean isUnitMode() {			
",
,
			fromLine:"			512",
			toLine:"			512",
			content:"
			    public void setUnitMode(boolean isUnitMode) {			
",
,
			fromLine:"			516",
			toLine:"			516",
			content:"
			    public MessageModel getMessageModel() {			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
			    public void setMessageModel(MessageModel messageModel) {			
",
,
			fromLine:"			524",
			toLine:"			524",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			528",
			toLine:"			528",
			content:"
			    public MessageQueueListener getMessageQueueListener() {			
",
,
			fromLine:"			532",
			toLine:"			532",
			content:"
			    public void setMessageQueueListener(MessageQueueListener messageQueueListener) {			
",
,
			fromLine:"			536",
			toLine:"			536",
			content:"
			    public long getConsumerPullTimeoutMillis() {			
",
,
			fromLine:"			540",
			toLine:"			540",
			content:"
			    public void setConsumerPullTimeoutMillis(long consumerPullTimeoutMillis) {			
",
,
			fromLine:"			544",
			toLine:"			544",
			content:"
			    public long getConsumerTimeoutMillisWhenSuspend() {			
",
,
			fromLine:"			548",
			toLine:"			548",
			content:"
			    public void setConsumerTimeoutMillisWhenSuspend(long consumerTimeoutMillisWhenSuspend) {			
",
,
			fromLine:"			560",
			toLine:"			560",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			564",
			toLine:"			564",
			content:"
			    public ConsumeFromWhere getConsumeFromWhere() {			
",
,
			fromLine:"			573",
			toLine:"			573",
			content:"
			        }			
",
,
			fromLine:"			577",
			toLine:"			577",
			content:"
			    public String getConsumeTimestamp() {			
",
,
			fromLine:"			581",
			toLine:"			581",
			content:"
			    public void setConsumeTimestamp(String consumeTimestamp) {			
",
,
			fromLine:"			585",
			toLine:"			585",
			content:"
			    public TraceDispatcher getTraceDispatcher() {			
",
,
			fromLine:"			591",
			toLine:"			591",
			content:"
			            try {			
",
,
			fromLine:"			594",
			toLine:"			594",
			content:"
			                traceDispatcher.setNamespaceV2(namespaceV2);			
",
,
			fromLine:"			598",
			toLine:"			598",
			content:"
			            } catch (Throwable e) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/MQPullConsumerScheduleService.java:
		[
			fromLine:"			16",
			toLine:"			34",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			public class MQPullConsumerScheduleService {
			    private final Logger log = LoggerFactory.getLogger(MQPullConsumerScheduleService.class);			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    private DefaultMQPullConsumer defaultMQPullConsumer;			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        this.scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    public int getPullThreadNums() {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public void setPullThreadNums(int pullThreadNums) {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			                        context.setPullNextDelayTimeMillis(1000);			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			                    } else {			
",
,
			fromLine:"			193",
			toLine:"			193",
			content:"
			                } else {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			            } else {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/PopResult.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageExt;
						
",
,
			fromLine:"			24",
			toLine:"			26",
			content:"
			    private PopStatus popStatus;
			    private long popTime;
			    private long invisibleTime;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    public long getPopTime() {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public void setPopTime(long popTime) {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public long getRestNum() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setRestNum(long restNum) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public long getInvisibleTime() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setInvisibleTime(long invisibleTime) {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        return "PopResult [popStatus=" + popStatus + ",msgFoundList="			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/PullResult.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.client.consumer;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageExt;
						
",
,
			fromLine:"			23",
			toLine:"			25",
			content:"
			    private final PullStatus pullStatus;
			    private final long nextBeginOffset;
			    private final long minOffset;			
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			        this.pullStatus = pullStatus;
			        this.nextBeginOffset = nextBeginOffset;
			        this.minOffset = minOffset;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public long getNextBeginOffset() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public long getMinOffset() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public long getMaxOffset() {			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			    public String toString() {
			        return "PullResult [pullStatus=" + pullStatus + ", nextBeginOffset=" + nextBeginOffset			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/GetMessageResult.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
						
",
,
			fromLine:"			25",
			toLine:"			26",
			content:"
			
			    private final List<SelectMappedBufferResult> messageMapedList;			
",
,
			fromLine:"			30",
			toLine:"			32",
			content:"
			    private GetMessageStatus status;
			    private long nextBeginOffset;
			    private long minOffset;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			    public GetMessageResult() {
			        messageMapedList = new ArrayList<>(100);			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			    public GetMessageResult(int resultSize) {
			        messageMapedList = new ArrayList<>(resultSize);			
",
,
			fromLine:"			64",
			toLine:"			68",
			content:"
			        this.status = status;
			        this.nextBeginOffset = nextBeginOffset;
			        this.minOffset = minOffset;
			        this.maxOffset = maxOffset;
			        this.messageMapedList = messageMapedList;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public long getNextBeginOffset() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setNextBeginOffset(long nextBeginOffset) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public long getMinOffset() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setMinOffset(long minOffset) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    public long getMaxOffset() {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			    public void setMaxOffset(long maxOffset) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public List<SelectMappedBufferResult> getMessageMapedList() {			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			    public List<ByteBuffer> getMessageBufferList() {			
",
,
			fromLine:"			113",
			toLine:"			115",
			content:"
			    public void addMessage(final SelectMappedBufferResult mapedBuffer) {
			        this.messageMapedList.add(mapedBuffer);
			        this.messageBufferList.add(mapedBuffer.getByteBuffer());			
",
,
			fromLine:"			122",
			toLine:"			124",
			content:"
			    public void addMessage(final SelectMappedBufferResult mapedBuffer, final long queueOffset) {
			        this.messageMapedList.add(mapedBuffer);
			        this.messageBufferList.add(mapedBuffer.getByteBuffer());			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    public void release() {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    public int getBufferTotalSize() {			
",
,
			fromLine:"			181",
			toLine:"			182",
			content:"
			    public String toString() {
			        return "GetMessageResult [status=" + status + ", nextBeginOffset=" + nextBeginOffset + ", minOffset="			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/consumer/store/LocalFileOffsetStore.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.client.consumer.store;
			
			import java.io.File;
			import java.io.IOException;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Map.Entry;
			import java.util.Set;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.help.FAQUrl;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			        System.getProperty("user.home") + File.separator + ".rocketmq_offsets");
			    private final static Logger log = LoggerFactory.getLogger(LocalFileOffsetStore.class);
			    private final MQClientInstance mQClientFactory;			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    private final String storePath;			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    public LocalFileOffsetStore(MQClientInstance mQClientFactory, String groupName) {
			        this.mQClientFactory = mQClientFactory;			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			        this.storePath = LOCAL_OFFSET_STORE_DIR + File.separator +
			            this.mQClientFactory.getClientId() + File.separator +			
",
,
			fromLine:"			67",
			toLine:"			69",
			content:"
			                AtomicLong offset = mqEntry.getValue();
			                offsetTable.put(mqEntry.getKey(), new ControllableOffset(offset.get()));
			                log.info("load consumer's offset, {} {} {}",			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        if (mq != null) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            if (null == offsetOld) {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			        if (mq != null) {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			                case READ_FROM_MEMORY: {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			        } catch (MQClientException e) {			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        }			
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			        }			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			            } catch (MQClientException e) {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			                } catch (IOException e) {			
",
,
			fromLine:"			203",
			toLine:"			205",
			content:"
			        if (mq != null) {
			            this.offsetTable.remove(mq);
			            log.info("remove unnecessary messageQueue offset. group={}, mq={}, offsetTableSize={}", this.groupName, mq,			
",
,
			fromLine:"			217",
			toLine:"			218",
			content:"
			    public Map<MessageQueue, Long> cloneOffsetTable(String topic) {
			        Map<MessageQueue, Long> cloneOffsetTable = new HashMap<>(this.offsetTable.size(), 1);			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			257",
			toLine:"			257",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			265",
			toLine:"			265",
			content:"
			            } catch (Exception e) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/exception/MQBrokerException.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.client.exception;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.help.FAQUrl;
			
			public class MQBrokerException extends Exception {
			    private static final long serialVersionUID = 5975020272601250368L;
			    private final int responseCode;			
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			    MQBrokerException() {
			        this.responseCode = 0;			
",
,
			fromLine:"			36",
			toLine:"			37",
			content:"
			                + errorMessage));
			        this.responseCode = responseCode;			
",
,
			fromLine:"			44",
			toLine:"			45",
			content:"
			            + errorMessage + (brokerAddr != null ? " BROKER: " + brokerAddr : "")));
			        this.responseCode = responseCode;			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public int getResponseCode() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public String getErrorMessage() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/exception/MQClientException.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.client.exception;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.help.FAQUrl;
			
			public class MQClientException extends Exception {
			    private static final long serialVersionUID = -5758410930844185841L;
			    private int responseCode;			
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			        super(FAQUrl.attachDefaultURL(errorMessage), cause);
			        this.responseCode = -1;			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			            + errorMessage));
			        this.responseCode = responseCode;			
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			            + errorMessage), cause);
			        this.responseCode = responseCode;			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public int getResponseCode() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public MQClientException setResponseCode(final int responseCode) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getErrorMessage() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setErrorMessage(final String errorMessage) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/exception/RequestTimeoutException.java:
		[
			fromLine:"			17",
			toLine:"			24",
			content:"
			
			package org.apache.rocketmq.client.exception;
			
			import org.apache.rocketmq.common.UtilAll;
			
			public class RequestTimeoutException extends Exception {
			    private static final long serialVersionUID = -5758410930844185841L;
			    private int responseCode;			
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			        super(errorMessage, cause);
			        this.responseCode = -1;			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			            + errorMessage);
			        this.responseCode = responseCode;			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public int getResponseCode() {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public RequestTimeoutException setResponseCode(final int responseCode) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public String getErrorMessage() {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void setErrorMessage(final String errorMessage) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/AbortProcessException.java:
		[
			fromLine:"			16",
			toLine:"			20",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import org.apache.rocketmq.common.help.FAQUrl;
						
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			public class AbortProcessException extends RuntimeException {
			    private static final long serialVersionUID = -5728810933841185841L;
			    private int responseCode;			
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			        super(FAQUrl.attachDefaultURL(errorMessage), cause);
			        this.responseCode = -1;			
",
,
			fromLine:"			47",
			toLine:"			48",
			content:"
			            + errorMessage));
			        this.responseCode = responseCode;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public int getResponseCode() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public AbortProcessException setResponseCode(final int responseCode) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public String getErrorMessage() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setErrorMessage(final String errorMessage) {			
",
,

		],
		filter/src/main/java/org/apache/rocketmq/filter/expression/MQFilterException.java:
		[
			fromLine:"			17",
			toLine:"			19",
			content:"
			
			package org.apache.rocketmq.filter.expression;
						
",
,
			fromLine:"			23",
			toLine:"			25",
			content:"
			public class MQFilterException extends Exception {
			    private static final long serialVersionUID = 1L;
			    private final int responseCode;			
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			        super(cause);
			        this.responseCode = -1;			
",
,
			fromLine:"			34",
			toLine:"			35",
			content:"
			    public MQFilterException(int responseCode, String errorMessage) {
			        this.responseCode = responseCode;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public int getResponseCode() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public String getErrorMessage() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/hook/CheckForbiddenContext.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.client.hook;
			
			import org.apache.rocketmq.client.impl.CommunicationMode;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			26",
			toLine:"			33",
			content:"
			    private String group;
			    private Message message;
			    private MessageQueue mq;
			    private String brokerAddr;
			    private CommunicationMode communicationMode;
			    private SendResult sendResult;
			    private Exception exception;
			    private Object arg;			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public Message getMessage() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setMessage(Message message) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public MessageQueue getMq() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setMq(MessageQueue mq) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getBrokerAddr() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setBrokerAddr(String brokerAddr) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public CommunicationMode getCommunicationMode() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public void setCommunicationMode(CommunicationMode communicationMode) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public SendResult getSendResult() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void setSendResult(SendResult sendResult) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public Exception getException() {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void setException(Exception exception) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public Object getArg() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public void setArg(Object arg) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public boolean isUnitMode() {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void setUnitMode(boolean isUnitMode) {			
",
,
			fromLine:"			117",
			toLine:"			120",
			content:"
			    public String toString() {
			        return "SendMessageContext [nameSrvAddr=" + nameSrvAddr + ", group=" + group + ", message=" + message
			            + ", mq=" + mq + ", brokerAddr=" + brokerAddr + ", communicationMode=" + communicationMode
			            + ", sendResult=" + sendResult + ", exception=" + exception + ", unitMode=" + unitMode			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/hook/FilterMessageContext.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.client.hook;
			
			import java.util.List;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.message.MessageQueue;
			
			public class FilterMessageContext {
			    private String consumerGroup;
			    private List<MessageExt> msgList;
			    private MessageQueue mq;
			    private Object arg;			
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public List<MessageExt> getMsgList() {			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			    public void setMsgList(List<MessageExt> msgList) {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public MessageQueue getMq() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setMq(MessageQueue mq) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public Object getArg() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setArg(Object arg) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public boolean isUnitMode() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public void setUnitMode(boolean isUnitMode) {			
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			    public String toString() {
			        return "ConsumeMessageContext [consumerGroup=" + consumerGroup + ", msgList=" + msgList + ", mq="			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/impl/consumer/ProcessQueue.java:
		[
			fromLine:"			16",
			toLine:"			35",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
			import java.util.Map;
			import java.util.TreeMap;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.locks.ReadWriteLock;
			import java.util.concurrent.locks.ReentrantReadWriteLock;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
						
",
,
			fromLine:"			56",
			toLine:"			59",
			content:"
			    private volatile boolean dropped = false;
			    private volatile long lastPullTimestamp = System.currentTimeMillis();
			    private volatile long lastConsumeTimestamp = System.currentTimeMillis();
			    private volatile boolean locked = false;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public boolean isLockExpired() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public boolean isPullExpired() {			
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
			            this.treeMapLock.writeLock().lockInterruptibly();			
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			    public boolean isLocked() {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			    public void setLocked(boolean locked) {			
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			            this.treeMapLock.writeLock().lockInterruptibly();			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			    public long getLastLockTimestamp() {			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			    public void setLastLockTimestamp(long lastLockTimestamp) {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
			    public long getLastPullTimestamp() {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			    public void setLastPullTimestamp(long lastPullTimestamp) {			
",
,
			fromLine:"			442",
			toLine:"			442",
			content:"
						
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			            info.setTryUnlockTimes(this.tryUnlockTimes.get());			
",
,
			fromLine:"			447",
			toLine:"			448",
			content:"
			            info.setDroped(this.dropped);
			            info.setLastPullTimestamp(this.lastPullTimestamp);			
",
,
			fromLine:"			456",
			toLine:"			456",
			content:"
			    public long getLastConsumeTimestamp() {			
",
,
			fromLine:"			460",
			toLine:"			460",
			content:"
			    public void setLastConsumeTimestamp(long lastConsumeTimestamp) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/ProcessQueueInfo.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import org.apache.rocketmq.common.UtilAll;
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    private long tryUnlockTimes;			
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			    private boolean droped;
			    private long lastPullTimestamp;			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			    public boolean isLocked() {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void setLocked(boolean locked) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public long getLastLockTimestamp() {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			    public void setLastLockTimestamp(long lastLockTimestamp) {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public long getLastPullTimestamp() {			
",
,
			fromLine:"			134",
			toLine:"			134",
			content:"
			    public void setLastPullTimestamp(long lastPullTimestamp) {			
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
			    public long getLastConsumeTimestamp() {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			    public void setLastConsumeTimestamp(long lastConsumeTimestamp) {			
",
,
			fromLine:"			160",
			toLine:"			163",
			content:"
			            + ", transactionMsgMaxOffset=" + transactionMsgMaxOffset + ", transactionMsgCount="
			            + transactionMsgCount + ", locked=" + locked + ", tryUnlockTimes=" + tryUnlockTimes
			            + ", lastLockTimestamp=" + UtilAll.timeMillisToHumanString(lastLockTimestamp) + ", droped="
			            + droped + ", lastPullTimestamp=" + UtilAll.timeMillisToHumanString(lastPullTimestamp)			
",
,

		],
		client/src/test/java/org/apache/rocketmq/client/impl/consumer/RebalanceLitePullImplTest.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.client.impl.consumer;
			
			import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
			import org.apache.rocketmq.client.consumer.store.OffsetStore;
			import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQAdminImpl;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
			
			public class RebalanceLitePullImplTest {
			    private MessageQueue mq = new MessageQueue("topic1", "broker1", 0);			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    private RebalanceLitePullImpl rebalanceImpl = new RebalanceLitePullImpl(consumerImpl);			
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			    private DefaultLitePullConsumer consumer = new DefaultLitePullConsumer();
			    private MQClientInstance client = mock(MQClientInstance.class);			
",
,
			fromLine:"			47",
			toLine:"			49",
			content:"
			        when(consumerImpl.getDefaultLitePullConsumer()).thenReturn(consumer);
			        when(consumerImpl.getOffsetStore()).thenReturn(offsetStore);
			        rebalanceImpl.setmQClientFactory(client);			
",
,
			fromLine:"			60",
			toLine:"			61",
			content:"
			
			            when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(0L);			
",
,
			fromLine:"			63",
			toLine:"			64",
			content:"
			
			            when(offsetStore.readOffset(any(MessageQueue.class), any(ReadOffsetType.class))).thenReturn(-2L);			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_last() throws MQClientException {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_first() throws MQClientException {			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void testComputePullFromWhereWithException_eq_minus1_timestamp() throws MQClientException {			
",
,
			fromLine:"			90",
			toLine:"			91",
			content:"
			        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);
			        when(admin.searchOffset(any(MessageQueue.class), anyLong())).thenReturn(12345L);			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/producer/RequestResponseFuture.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.client.producer;
			
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.message.Message;
						
",
,
			fromLine:"			26",
			toLine:"			26",
			content:"
			    private final RequestCallback requestCallback;			
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			    private final Message requestMsg = null;
			    private long timeoutMillis;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    private volatile boolean sendRequestOk = true;			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			        this.correlationId = correlationId;			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        if (requestCallback != null) {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			            } else {			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			    public boolean isTimeout() {
			        long diff = System.currentTimeMillis() - this.beginTimestamp;			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public Message waitResponseMessage(final long timeout) throws InterruptedException {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        this.responseMsg = responseMsg;			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public long getTimeoutMillis() {			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public void setTimeoutMillis(long timeoutMillis) {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public long getBeginTimestamp() {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public CountDownLatch getCountDownLatch() {			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			    public void setCountDownLatch(CountDownLatch countDownLatch) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			    public Throwable getCause() {			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			    public void setCause(Throwable cause) {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/producer/SendResult.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.client.producer;
			
			import com.alibaba.fastjson.JSON;
			import org.apache.rocketmq.common.message.MessageQueue;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
			    private SendStatus sendStatus;			
",
,
			fromLine:"			26",
			toLine:"			27",
			content:"
			    private long queueOffset;
			    private String transactionId;			
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			        this.sendStatus = sendStatus;
			        this.msgId = msgId;			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			        this.sendStatus = sendStatus;			
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			        this.queueOffset = queueOffset;
			        this.transactionId = transactionId;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public String getMsgId() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setMsgId(String msgId) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    public String getTransactionId() {			
",
,
			fromLine:"			117",
			toLine:"			117",
			content:"
			    public void setTransactionId(String transactionId) {			
",
,
			fromLine:"			121",
			toLine:"			121",
			content:"
			    public String getOffsetMsgId() {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public void setOffsetMsgId(String offsetMsgId) {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public String toString() {			
",
,

		],
		client/src/main/java/org/apache/rocketmq/client/trace/TraceContext.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.client.trace;
			
			import org.apache.rocketmq.client.AccessChannel;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			
			import java.util.List;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    private TraceType traceType;			
",
,
			fromLine:"			32",
			toLine:"			33",
			content:"
			    private String regionName = "";
			    private String groupName = "";			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public long getTimeStamp() {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public void setTimeStamp(long timeStamp) {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public String getGroupName() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			    public void setGroupName(String groupName) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public int getCostTime() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			    public void setCostTime(int costTime) {			
",
,
			fromLine:"			130",
			toLine:"			130",
			content:"
			    public int compareTo(TraceContext o) {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			        StringBuilder sb = new StringBuilder(1024);			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java:
		[
			fromLine:"			16",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import org.apache.rocketmq.common.annotation.ImportantField;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.common.message.MessageRequestMode;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			import org.apache.rocketmq.common.topic.TopicValidator;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			
			import java.util.concurrent.TimeUnit;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @ImportantField			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			68",
			toLine:"			71",
			content:"
			     */
			    private int sendMessageThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
			    private int putMessageFutureThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
			    private int pullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			    private int ackMessageThreadPoolNums = 3;
			    private int processReplyMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    private int loadBalanceProcessorThreadPoolNums = 32;			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			     */			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			    @ImportantField			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    @ImportantField			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			138",
			toLine:"			138",
			content:"
						
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			     */			
",
,
			fromLine:"			306",
			toLine:"			306",
			content:"
						
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
						
",
,
			fromLine:"			358",
			toLine:"			362",
			content:"
			    private int metricsOtelCardinalityLimit = 50 * 1000;
			    private String metricsGrpcExporterTarget = "";
			    private String metricsGrpcExporterHeader = "";
			    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
			    private long metricGrpcExporterIntervalInMills = 60 * 1000;			
",
,
			fromLine:"			364",
			toLine:"			365",
			content:"
			
			    private int metricsPromExporterPort = 5557;			
",
,
			fromLine:"			368",
			toLine:"			368",
			content:"
			    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx			
",
,
			fromLine:"			370",
			toLine:"			370",
			content:"
						
",
,
			fromLine:"			372",
			toLine:"			372",
			content:"
						
",
,
			fromLine:"			388",
			toLine:"			388",
			content:"
			     */			
",
,
			fromLine:"			419",
			toLine:"			419",
			content:"
			     */			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			    public String getConfigBlackList() {			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			    public void setConfigBlackList(String configBlackList) {			
",
,
			fromLine:"			558",
			toLine:"			558",
			content:"
			    public boolean isTraceOn() {			
",
,
			fromLine:"			562",
			toLine:"			562",
			content:"
			    public void setTraceOn(final boolean traceOn) {			
",
,
			fromLine:"			614",
			toLine:"			614",
			content:"
			    public boolean isSlaveReadEnable() {			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			    public void setSlaveReadEnable(final boolean slaveReadEnable) {			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			    public String getRegionId() {			
",
,
			fromLine:"			634",
			toLine:"			634",
			content:"
			    public void setRegionId(final String regionId) {			
",
,
			fromLine:"			782",
			toLine:"			782",
			content:"
			    public String getNamesrvAddr() {			
",
,
			fromLine:"			786",
			toLine:"			786",
			content:"
			    public void setNamesrvAddr(String namesrvAddr) {			
",
,
			fromLine:"			798",
			toLine:"			798",
			content:"
			    public String getBrokerConfigPath() {			
",
,
			fromLine:"			802",
			toLine:"			802",
			content:"
			    public void setBrokerConfigPath(String brokerConfigPath) {			
",
,
			fromLine:"			806",
			toLine:"			806",
			content:"
			    public String getRocketmqHome() {			
",
,
			fromLine:"			810",
			toLine:"			810",
			content:"
			    public void setRocketmqHome(String rocketmqHome) {			
",
,
			fromLine:"			894",
			toLine:"			894",
			content:"
			    public boolean isFetchNamesrvAddrByAddressServer() {			
",
,
			fromLine:"			898",
			toLine:"			898",
			content:"
			    public void setFetchNamesrvAddrByAddressServer(boolean fetchNamesrvAddrByAddressServer) {			
",
,
			fromLine:"			1334",
			toLine:"			1334",
			content:"
			    public boolean isEnableSlaveActingMaster() {			
",
,
			fromLine:"			1338",
			toLine:"			1338",
			content:"
			    public void setEnableSlaveActingMaster(boolean enableSlaveActingMaster) {			
",
,
			fromLine:"			1342",
			toLine:"			1342",
			content:"
			    public boolean isEnableRemoteEscape() {			
",
,
			fromLine:"			1346",
			toLine:"			1346",
			content:"
			    public void setEnableRemoteEscape(boolean enableRemoteEscape) {			
",
,
			fromLine:"			1526",
			toLine:"			1526",
			content:"
			    public boolean isFetchNameSrvAddrByDnsLookup() {			
",
,
			fromLine:"			1530",
			toLine:"			1530",
			content:"
			    public void setFetchNameSrvAddrByDnsLookup(boolean fetchNameSrvAddrByDnsLookup) {			
",
,
			fromLine:"			1566",
			toLine:"			1566",
			content:"
			    public MetricsExporterType getMetricsExporterType() {			
",
,
			fromLine:"			1570",
			toLine:"			1570",
			content:"
			    public void setMetricsExporterType(MetricsExporterType metricsExporterType) {			
",
,
			fromLine:"			1574",
			toLine:"			1574",
			content:"
			    public void setMetricsExporterType(int metricsExporterType) {			
",
,
			fromLine:"			1578",
			toLine:"			1578",
			content:"
			    public void setMetricsExporterType(String metricsExporterType) {			
",
,
			fromLine:"			1590",
			toLine:"			1590",
			content:"
			    public String getMetricsGrpcExporterTarget() {			
",
,
			fromLine:"			1594",
			toLine:"			1594",
			content:"
			    public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {			
",
,
			fromLine:"			1598",
			toLine:"			1598",
			content:"
			    public String getMetricsGrpcExporterHeader() {			
",
,
			fromLine:"			1602",
			toLine:"			1602",
			content:"
			    public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {			
",
,
			fromLine:"			1606",
			toLine:"			1606",
			content:"
			    public long getMetricGrpcExporterTimeOutInMills() {			
",
,
			fromLine:"			1610",
			toLine:"			1610",
			content:"
			    public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {			
",
,
			fromLine:"			1614",
			toLine:"			1614",
			content:"
			    public long getMetricGrpcExporterIntervalInMills() {			
",
,
			fromLine:"			1618",
			toLine:"			1618",
			content:"
			    public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {			
",
,
			fromLine:"			1622",
			toLine:"			1622",
			content:"
			    public long getMetricLoggingExporterIntervalInMills() {			
",
,
			fromLine:"			1626",
			toLine:"			1626",
			content:"
			    public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {			
",
,
			fromLine:"			1630",
			toLine:"			1630",
			content:"
			    public String getMetricsLabel() {			
",
,
			fromLine:"			1634",
			toLine:"			1634",
			content:"
			    public void setMetricsLabel(String metricsLabel) {			
",
,
			fromLine:"			1638",
			toLine:"			1638",
			content:"
			    public boolean isMetricsInDelta() {			
",
,
			fromLine:"			1642",
			toLine:"			1642",
			content:"
			    public void setMetricsInDelta(boolean metricsInDelta) {			
",
,
			fromLine:"			1646",
			toLine:"			1646",
			content:"
			    public int getMetricsPromExporterPort() {			
",
,
			fromLine:"			1650",
			toLine:"			1650",
			content:"
			    public void setMetricsPromExporterPort(int metricsPromExporterPort) {			
",
,
			fromLine:"			1654",
			toLine:"			1654",
			content:"
			    public String getMetricsPromExporterHost() {			
",
,
			fromLine:"			1658",
			toLine:"			1658",
			content:"
			    public void setMetricsPromExporterHost(String metricsPromExporterHost) {			
",
,
			fromLine:"			1678",
			toLine:"			1678",
			content:"
			    public long getChannelExpiredTimeout() {			
",
,
			fromLine:"			1682",
			toLine:"			1682",
			content:"
			    public void setChannelExpiredTimeout(long channelExpiredTimeout) {			
",
,
			fromLine:"			1750",
			toLine:"			1750",
			content:"
			    public long getFetchNamesrvAddrInterval() {			
",
,
			fromLine:"			1754",
			toLine:"			1754",
			content:"
			    public void setFetchNamesrvAddrInterval(final long fetchNamesrvAddrInterval) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/ControllerConfig.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import java.io.File;
			import java.util.Arrays;
			import org.apache.rocketmq.common.metrics.MetricsExporterType;
			
			public class ControllerConfig {
			    private String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			     */			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
						
",
,
			fromLine:"			81",
			toLine:"			85",
			content:"
			
			    private String metricsGrpcExporterTarget = "";
			    private String metricsGrpcExporterHeader = "";
			    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
			    private long metricGrpcExporterIntervalInMills = 60 * 1000;			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			
			    private int metricsPromExporterPort = 5557;			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			     */			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public String getConfigBlackList() {			
",
,
			fromLine:"			107",
			toLine:"			107",
			content:"
			    public void setConfigBlackList(String configBlackList) {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public String getRocketmqHome() {			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public void setRocketmqHome(String rocketmqHome) {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public String getConfigStorePath() {			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void setConfigStorePath(String configStorePath) {			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			    public long getScanNotActiveBrokerInterval() {			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			    public void setScanNotActiveBrokerInterval(long scanNotActiveBrokerInterval) {			
",
,
			fromLine:"			232",
			toLine:"			232",
			content:"
			    public MetricsExporterType getMetricsExporterType() {			
",
,
			fromLine:"			236",
			toLine:"			236",
			content:"
			    public void setMetricsExporterType(MetricsExporterType metricsExporterType) {			
",
,
			fromLine:"			240",
			toLine:"			240",
			content:"
			    public void setMetricsExporterType(int metricsExporterType) {			
",
,
			fromLine:"			244",
			toLine:"			244",
			content:"
			    public void setMetricsExporterType(String metricsExporterType) {			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			    public String getMetricsGrpcExporterTarget() {			
",
,
			fromLine:"			252",
			toLine:"			252",
			content:"
			    public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {			
",
,
			fromLine:"			256",
			toLine:"			256",
			content:"
			    public String getMetricsGrpcExporterHeader() {			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			    public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			    public long getMetricGrpcExporterTimeOutInMills() {			
",
,
			fromLine:"			268",
			toLine:"			268",
			content:"
			    public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			    public long getMetricGrpcExporterIntervalInMills() {			
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
			    public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {			
",
,
			fromLine:"			280",
			toLine:"			280",
			content:"
			    public long getMetricLoggingExporterIntervalInMills() {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			    public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {			
",
,
			fromLine:"			288",
			toLine:"			288",
			content:"
			    public int getMetricsPromExporterPort() {			
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
			    public void setMetricsPromExporterPort(int metricsPromExporterPort) {			
",
,
			fromLine:"			296",
			toLine:"			296",
			content:"
			    public String getMetricsPromExporterHost() {			
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			    public void setMetricsPromExporterHost(String metricsPromExporterHost) {			
",
,
			fromLine:"			304",
			toLine:"			304",
			content:"
			    public String getMetricsLabel() {			
",
,
			fromLine:"			308",
			toLine:"			308",
			content:"
			    public void setMetricsLabel(String metricsLabel) {			
",
,
			fromLine:"			312",
			toLine:"			312",
			content:"
			    public boolean isMetricsInDelta() {			
",
,
			fromLine:"			316",
			toLine:"			316",
			content:"
			    public void setMetricsInDelta(boolean metricsInDelta) {			
",
,

		],
		container/src/main/java/org/apache/rocketmq/container/BrokerContainerConfig.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.container;
			
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.annotation.ImportantField;
			import org.apache.rocketmq.common.utils.NetworkUtil;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @ImportantField			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @ImportantField			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    @ImportantField			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			     */			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			     */			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getRocketmqHome() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setRocketmqHome(String rocketmqHome) {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public String getNamesrvAddr() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public void setNamesrvAddr(String namesrvAddr) {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public boolean isFetchNameSrvAddrByDnsLookup() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public void setFetchNameSrvAddrByDnsLookup(boolean fetchNameSrvAddrByDnsLookup) {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public boolean isFetchNamesrvAddrByAddressServer() {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void setFetchNamesrvAddrByAddressServer(boolean fetchNamesrvAddrByAddressServer) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public long getFetchNamesrvAddrInterval() {			
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    public void setFetchNamesrvAddrInterval(final long fetchNamesrvAddrInterval) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public String getConfigBlackList() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public void setConfigBlackList(String configBlackList) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/namesrv/NamesrvConfig.java:
		[
			fromLine:"			20",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.common.namesrv;
			
			import java.io.File;
			import org.apache.rocketmq.common.MixAll;
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    private String kvConfigPath = System.getProperty("user.home") + File.separator + "namesrv" + File.separator + "kvConfig.json";			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			     */			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			     */			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			    public String getConfigBlackList() {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			    public void setConfigBlackList(String configBlackList) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public String getRocketmqHome() {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public void setRocketmqHome(String rocketmqHome) {			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			    public String getConfigStorePath() {			
",
,
			fromLine:"			152",
			toLine:"			152",
			content:"
			    public void setConfigStorePath(final String configStorePath) {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public long getScanNotActiveBrokerInterval() {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			    public void setScanNotActiveBrokerInterval(long scanNotActiveBrokerInterval) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/ServiceThread.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicBoolean;
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    protected volatile AtomicBoolean hasNotified = new AtomicBoolean(false);			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public void start() {			
",
,
			fromLine:"			50",
			toLine:"			54",
			content:"
			        }
			        stopped = false;
			        this.thread = new Thread(this, getServiceName());
			        this.thread.setDaemon(isDaemon);
			        this.thread.start();			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public void shutdown(final boolean interrupt) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        }			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            if (interrupt) {			
",
,
			fromLine:"			78",
			toLine:"			79",
			content:"
			            long beginTime = System.currentTimeMillis();
			            if (!this.thread.isDaemon()) {			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
			    public long getJoinTime() {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        }			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    public boolean isStopped() {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/common/ServiceThread.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.remoting.common;
			
			
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			29",
			toLine:"			30",
			content:"
			
			    private static final long JOIN_TIME = 90 * 1000;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    protected volatile boolean hasNotified = false;			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public ServiceThread() {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public void start() {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public void shutdown(final boolean interrupt) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			            if (interrupt) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			            long beginTime = System.currentTimeMillis();			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			    public long getJointime() {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			    public boolean isStopped() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/TopicConfig.java:
		[
			fromLine:"			16",
			toLine:"			29",
			content:"
			 */
			package org.apache.rocketmq.common;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.TypeReference;
			import com.alibaba.fastjson.annotation.JSONField;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.Objects;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.PermName;
			
			import static org.apache.rocketmq.common.TopicAttributes.TOPIC_MESSAGE_TYPE_ATTRIBUTE;
						
",
,
			fromLine:"			35",
			toLine:"			40",
			content:"
			    };
			    private String topicName;
			    private int readQueueNums = defaultReadQueueNums;
			    private int writeQueueNums = defaultWriteQueueNums;
			    private int perm = PermName.PERM_READ | PermName.PERM_WRITE;
			    private TopicFilterType topicFilterType = TopicFilterType.SINGLE_TAG;			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public TopicConfig(String topicName) {			
",
,
			fromLine:"			53",
			toLine:"			55",
			content:"
			    public TopicConfig(String topicName, int readQueueNums, int writeQueueNums) {
			        this.topicName = topicName;
			        this.readQueueNums = readQueueNums;			
",
,
			fromLine:"			59",
			toLine:"			62",
			content:"
			    public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm) {
			        this.topicName = topicName;
			        this.readQueueNums = readQueueNums;
			        this.writeQueueNums = writeQueueNums;			
",
,
			fromLine:"			66",
			toLine:"			70",
			content:"
			    public TopicConfig(String topicName, int readQueueNums, int writeQueueNums, int perm, int topicSysFlag) {
			        this.topicName = topicName;
			        this.readQueueNums = readQueueNums;
			        this.writeQueueNums = writeQueueNums;
			        this.perm = perm;			
",
,
			fromLine:"			74",
			toLine:"			79",
			content:"
			    public TopicConfig(TopicConfig other) {
			        this.topicName = other.topicName;
			        this.readQueueNums = other.readQueueNums;
			        this.writeQueueNums = other.writeQueueNums;
			        this.perm = other.perm;
			        this.topicFilterType = other.topicFilterType;			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        //[0]			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        //[1]			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        //[2]			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        //[3]			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        //[4]			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			        if (strs.length >= 5) {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
						
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
						
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
						
",
,
			fromLine:"			137",
			toLine:"			137",
			content:"
			    public String getTopicName() {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			    public void setTopicName(String topicName) {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			    public int getReadQueueNums() {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			    public void setReadQueueNums(int readQueueNums) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			    public int getWriteQueueNums() {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			    public void setWriteQueueNums(int writeQueueNums) {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
			    public int getPerm() {			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public void setPerm(int perm) {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    public TopicFilterType getTopicFilterType() {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    public void setTopicFilterType(TopicFilterType topicFilterType) {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    public int getTopicSysFlag() {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			    public void setTopicSysFlag(int topicSysFlag) {			
",
,
			fromLine:"			228",
			toLine:"			228",
			content:"
						
",
,
			fromLine:"			231",
			toLine:"			231",
			content:"
			        }			
",
,
			fromLine:"			234",
			toLine:"			234",
			content:"
			        }			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			        }			
",
,
			fromLine:"			243",
			toLine:"			243",
			content:"
			        }			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        }			
",
,
			fromLine:"			254",
			toLine:"			259",
			content:"
			    public int hashCode() {
			        int result = topicName != null ? topicName.hashCode() : 0;
			        result = 31 * result + readQueueNums;
			        result = 31 * result + writeQueueNums;
			        result = 31 * result + perm;
			        result = 31 * result + (topicFilterType != null ? topicFilterType.hashCode() : 0);			
",
,
			fromLine:"			267",
			toLine:"			269",
			content:"
			    public String toString() {
			        return "TopicConfig [topicName=" + topicName + ", readQueueNums=" + readQueueNums
			            + ", writeQueueNums=" + writeQueueNums + ", perm=" + PermName.perm2String(perm)			
",
,

		],
		common/src/test/java/org/apache/rocketmq/common/TopicConfigTest.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.common;
			
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.PermName;
			import org.junit.Test;
			
			import static org.assertj.core.api.Assertions.assertThat;
			
			public class TopicConfigTest {			
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			    int queueNums = 8;
			    int perm = PermName.PERM_READ | PermName.PERM_WRITE;			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			        TopicConfig topicConfig = new TopicConfig();			
",
,
			fromLine:"			37",
			toLine:"			38",
			content:"
			        topicConfig.setWriteQueueNums(queueNums);
			        topicConfig.setPerm(perm);			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        TopicConfig topicConfig = new TopicConfig();			
",
,
			fromLine:"			55",
			toLine:"			56",
			content:"
			        topicConfig.setWriteQueueNums(queueNums);
			        topicConfig.setPerm(perm);			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        TopicConfig topicConfig = new TopicConfig();			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			        topicConfig.setWriteQueueNums(queueNums);
			        topicConfig.setPerm(perm);			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/route/QueueData.java:
		[
			fromLine:"			20",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.route;
						
",
,
			fromLine:"			24",
			toLine:"			27",
			content:"
			    private String brokerName;
			    private int readQueueNums;
			    private int writeQueueNums;
			    private int perm;			
",
,
			fromLine:"			36",
			toLine:"			39",
			content:"
			        this.brokerName = queueData.brokerName;
			        this.readQueueNums = queueData.readQueueNums;
			        this.writeQueueNums = queueData.writeQueueNums;
			        this.perm = queueData.perm;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public int getReadQueueNums() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setReadQueueNums(int readQueueNums) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public int getWriteQueueNums() {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public void setWriteQueueNums(int writeQueueNums) {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public int getPerm() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public void setPerm(int perm) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public int getTopicSysFlag() {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    public void setTopicSysFlag(int topicSysFlag) {			
",
,
			fromLine:"			79",
			toLine:"			82",
			content:"
			        result = prime * result + ((brokerName == null) ? 0 : brokerName.hashCode());
			        result = prime * result + perm;
			        result = prime * result + readQueueNums;
			        result = prime * result + writeQueueNums;			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            return false;			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            return false;			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			            return false;			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			            return false;			
",
,
			fromLine:"			111",
			toLine:"			112",
			content:"
			    public String toString() {
			        return "QueueData [brokerName=" + brokerName + ", readQueueNums=" + readQueueNums			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/common/ReceiptHandleGroupTest.java:
		[
			fromLine:"			16",
			toLine:"			39",
			content:"
			 */
			package org.apache.rocketmq.proxy.common;
			
			import java.time.Duration;
			import java.util.Random;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.CountDownLatch;
			import java.util.concurrent.Executors;
			import java.util.concurrent.atomic.AtomicBoolean;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.common.consumer.ReceiptHandle;
			import org.apache.rocketmq.common.message.MessageClientIDSetter;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertFalse;
			import static org.junit.Assert.assertNull;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			            .reviveQueueId(1)			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            .reviveQueueId(1)			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			            .reviveQueueId(1)			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/statistics/StatisticsBrief.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.common.statistics;
			
			import org.apache.commons.lang3.ArrayUtils;
			
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			    // max min avg total
			    private long max;
			    private long min;			
",
,
			fromLine:"			59",
			toLine:"			61",
			content:"
			        synchronized (this) {
			            max = 0;
			            min = Long.MAX_VALUE;			
",
,
			fromLine:"			93",
			toLine:"			95",
			content:"
			        synchronized (this) {
			            max = Math.max(max, value);
			            min = Math.min(min, value);			
",
,
			fromLine:"			165",
			toLine:"			165",
			content:"
			    public long getMax() {			
",
,
			fromLine:"			169",
			toLine:"			169",
			content:"
			    public long getMin() {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    public long getTotal() {			
",
,
			fromLine:"			181",
			toLine:"			181",
			content:"
			    public double getAvg() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/statistics/StatisticsItemScheduledIncrementPrinter.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.common.statistics;
			
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledFuture;
			import java.util.concurrent.TimeUnit;
						
",
,
			fromLine:"			241",
			toLine:"			243",
			content:"
			    public static class ItemSampleBrief {
			        private long max;
			        private long min;			
",
,
			fromLine:"			251",
			toLine:"			253",
			content:"
			        public void sample(long value) {
			            max = Math.max(max, value);
			            min = Math.min(min, value);			
",
,
			fromLine:"			258",
			toLine:"			260",
			content:"
			        public void reset() {
			            max = 0;
			            min = Long.MAX_VALUE;			
",
,
			fromLine:"			270",
			toLine:"			270",
			content:"
			        public long getMax() {			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
			        public long getMin() {			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        public long getTotal() {			
",
,
			fromLine:"			286",
			toLine:"			286",
			content:"
			        public double getAvg() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItem.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
						
",
,
			fromLine:"			29",
			toLine:"			32",
			content:"
			
			    private final String statsName;
			    private final String statsKey;
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			36",
			toLine:"			39",
			content:"
			        ScheduledExecutorService scheduledExecutorService, Logger log) {
			        this.statsName = statsName;
			        this.statsKey = statsKey;
			        this.scheduledExecutorService = scheduledExecutorService;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void init() {			
",
,
			fromLine:"			57",
			toLine:"			59",
			content:"
			    public void printAtMinutes() {
			        log.info("[{}] [{}] Stats Every 5 Minutes, Value: {}",
			            this.statsName,			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public String getStatsKey() {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			    public String getStatsName() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/MomentStatsItemSet.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			import java.util.Iterator;
			import java.util.Map.Entry;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
						
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			        new ConcurrentHashMap<>(128);
			    private final String statsName;
			    private final ScheduledExecutorService scheduledExecutorService;			
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			    public MomentStatsItemSet(String statsName, ScheduledExecutorService scheduledExecutorService, Logger log) {
			        this.statsName = statsName;
			        this.scheduledExecutorService = scheduledExecutorService;			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public String getStatsName() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            statsItem =			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/StatsItem.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			import java.util.LinkedList;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.LongAdder;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
						
",
,
			fromLine:"			38",
			toLine:"			40",
			content:"
			
			    private final String statsName;
			    private final String statsKey;			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			48",
			content:"
			    public StatsItem(String statsName, String statsKey, ScheduledExecutorService scheduledExecutorService, Logger logger) {
			        this.statsName = statsName;
			        this.statsKey = statsKey;
			        this.scheduledExecutorService = scheduledExecutorService;			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
						
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
						
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
						
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
						
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
						
",
,
			fromLine:"			195",
			toLine:"			195",
			content:"
			        StatsSnapshot ss = computeStatsData(this.csListMinute);			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        StatsSnapshot ss = computeStatsData(this.csListHour);			
",
,
			fromLine:"			206",
			toLine:"			206",
			content:"
			        StatsSnapshot ss = computeStatsData(this.csListDay);			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			    public String getStatsKey() {			
",
,
			fromLine:"			225",
			toLine:"			225",
			content:"
			    public String getStatsName() {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.common.stats;
						
",
,
			fromLine:"			20",
			toLine:"			41",
			content:"
			
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/stats/StatsSnapshot.java:
		[
			fromLine:"			17",
			toLine:"			21",
			content:"
			
			package org.apache.rocketmq.common.stats;
			
			public class StatsSnapshot {
			    private long sum;			
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
			    private long times;			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    public long getSum() {			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public void setSum(long sum) {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public double getTps() {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public void setTps(double tps) {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public double getAvgpt() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public void setAvgpt(double avgpt) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/BrokerStatsItem.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			public class BrokerStatsItem {
			    private long sum;
			    private double tps;			
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    public long getSum() {			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    public void setSum(long sum) {			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    public double getTps() {			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    public void setTps(double tps) {			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public double getAvgpt() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public void setAvgpt(double avgpt) {			
",
,

		],
		common/src/main/java/org/apache/rocketmq/common/thread/ThreadPoolWrapper.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.common.thread;
			
			import com.google.common.base.MoreObjects;
			import com.google.common.base.Objects;
			import java.util.List;
			import java.util.concurrent.ThreadPoolExecutor;
			
			public class ThreadPoolWrapper {
			    private String name;
			    private ThreadPoolExecutor threadPoolExecutor;			
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			        final List<ThreadPoolStatusMonitor> statusPrinters) {
			        this.name = name;
			        this.threadPoolExecutor = threadPoolExecutor;			
",
,
			fromLine:"			37",
			toLine:"			39",
			content:"
			    public static class ThreadPoolWrapperBuilder {
			        private String name;
			        private ThreadPoolExecutor threadPoolExecutor;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			        public ThreadPoolWrapper.ThreadPoolWrapperBuilder name(final String name) {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			            final ThreadPoolExecutor threadPoolExecutor) {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			            final List<ThreadPoolStatusMonitor> statusPrinters) {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			        public ThreadPoolWrapper build() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        public java.lang.String toString() {			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			    public String getName() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public ThreadPoolExecutor getThreadPoolExecutor() {			
",
,
			fromLine:"			84",
			toLine:"			84",
			content:"
			    public List<ThreadPoolStatusMonitor> getStatusPrinters() {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public void setName(final String name) {			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			    public void setThreadPoolExecutor(final ThreadPoolExecutor threadPoolExecutor) {			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			    public void setStatusPrinters(final List<ThreadPoolStatusMonitor> statusPrinters) {			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			        ThreadPoolWrapper wrapper = (ThreadPoolWrapper) o;			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			117",
			toLine:"			119",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("name", name)
			            .add("threadPoolExecutor", threadPoolExecutor)			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/DLedgerControllerStateMachine.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.controller.impl;
			
			import io.openmessaging.storage.dledger.entry.DLedgerEntry;
			import io.openmessaging.storage.dledger.snapshot.SnapshotReader;
			import io.openmessaging.storage.dledger.snapshot.SnapshotWriter;
			import io.openmessaging.storage.dledger.statemachine.CommittedEntryIterator;
			import io.openmessaging.storage.dledger.statemachine.StateMachine;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.controller.impl.event.EventMessage;
			import org.apache.rocketmq.controller.impl.event.EventSerializer;
			import org.apache.rocketmq.controller.impl.manager.ReplicasInfoManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			import java.util.concurrent.CompletableFuture;
						
",
,
			fromLine:"			36",
			toLine:"			38",
			content:"
			public class DLedgerControllerStateMachine implements StateMachine {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.CONTROLLER_LOGGER_NAME);
			    private final ReplicasInfoManager replicasInfoManager;			
",
,
			fromLine:"			43",
			toLine:"			44",
			content:"
			        final EventSerializer eventSerializer, final String dLedgerGroupId, final String dLedgerSelfId) {
			        this.replicasInfoManager = replicasInfoManager;			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			            if (body != null && body.length > 0) {
			                final EventMessage event = this.eventSerializer.deserialize(body);			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        }			
",
,

		],
		controller/src/main/java/org/apache/rocketmq/controller/impl/manager/SyncStateInfo.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.controller.impl.manager;
			
			import java.io.Serializable;
			import java.util.Collections;
			import java.util.HashSet;
			import java.util.Set;
			import java.util.concurrent.atomic.AtomicInteger;
						
",
,
			fromLine:"			28",
			toLine:"			29",
			content:"
			public class SyncStateInfo implements Serializable {
			    private final String clusterName;			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			38",
			toLine:"			39",
			content:"
			    public SyncStateInfo(String clusterName, String brokerName) {
			        this.clusterName = clusterName;			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public void updateMasterInfo(Long masterBrokerId) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public boolean isMasterExist() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public String getClusterName() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public String getBrokerName() {			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public Long getMasterBrokerId() {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/batch/SimpleBatchProducer.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.example.batch;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
						
",
,
			fromLine:"			28",
			toLine:"			31",
			content:"
			
			    public static final String PRODUCER_GROUP = "BatchProducerGroupName";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "BatchTest";			
",
,
			fromLine:"			34",
			toLine:"			34",
			content:"
			    public static void main(String[] args) throws Exception {			
",
,
			fromLine:"			42",
			toLine:"			44",
			content:"
			        List<Message> messages = new ArrayList<>();
			        messages.add(new Message(TOPIC, TAG, "OrderID001", "Hello world 0".getBytes(StandardCharsets.UTF_8)));
			        messages.add(new Message(TOPIC, TAG, "OrderID002", "Hello world 1".getBytes(StandardCharsets.UTF_8)));			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/batch/SplitBatchProducer.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.example.batch;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
						
",
,
			fromLine:"			30",
			toLine:"			31",
			content:"
			
			    public static final String PRODUCER_GROUP = "BatchProducerGroupName";			
",
,
			fromLine:"			33",
			toLine:"			35",
			content:"
			
			    public static final int MESSAGE_COUNT = 100 * 1000;
			    public static final String TOPIC = "BatchTest";			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			        //large batch
			        List<Message> messages = new ArrayList<>(MESSAGE_COUNT);
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/namespace/ProducerWithNamespace.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.example.namespace;
			
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			
			import java.nio.charset.StandardCharsets;
						
",
,
			fromLine:"			26",
			toLine:"			31",
			content:"
			
			    public static final String NAMESPACE = "InstanceTest";
			    public static final String PRODUCER_GROUP = "pidTest";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final int MESSAGE_COUNT = 100;
			    public static final String TOPIC = "NAMESPACE_TOPIC";			
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			
			        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP);			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			40",
			toLine:"			41",
			content:"
			        producer.start();
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/quickstart/Producer.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.example.quickstart;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
						
",
,
			fromLine:"			32",
			toLine:"			36",
			content:"
			     */
			    public static final int MESSAGE_COUNT = 1000;
			    public static final String PRODUCER_GROUP = "please_rename_unique_group_name";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "TopicTest";			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			         */			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			70",
			content:"
			                 */
			                Message msg = new Message(TOPIC /* Topic */,			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/schedule/ScheduledMessageProducer.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.example.schedule;
			
			import java.nio.charset.StandardCharsets;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
						
",
,
			fromLine:"			25",
			toLine:"			27",
			content:"
			
			    public static final String PRODUCER_GROUP = "ExampleProducerGroup";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			        // Instantiate a producer to send scheduled messages			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			        for (int i = 0; i < totalMessagesToSend; i++) {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/schedule/TimerMessageProducer.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.example.schedule;
			
			import java.nio.charset.StandardCharsets;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			
			    public static final String PRODUCER_GROUP = "TimerMessageProducerGroup";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        // Instantiate a producer to send scheduled messages			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        for (int i = 0; i < totalMessagesToSend; i++) {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/simple/Producer.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.example.simple;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import java.nio.charset.StandardCharsets;
						
",
,
			fromLine:"			26",
			toLine:"			29",
			content:"
			
			    public static final String PRODUCER_GROUP = "ProducerGroupName";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "TopicTest";			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
						
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			            try {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingProducer.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.example.tracemessage;
			
			import io.jaegertracing.Configuration;
			import io.jaegertracing.internal.samplers.ConstSampler;
			import io.opentracing.Tracer;
			import io.opentracing.util.GlobalTracer;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.trace.hook.SendMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
						
",
,
			fromLine:"			32",
			toLine:"			36",
			content:"
			
			    public static final String PRODUCER_GROUP = "ProducerGroupName";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "TopicTest";
			    public static final String TAG = "TagA";			
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			52",
			content:"
			        try {
			            Message msg = new Message(TOPIC,
			                TAG,			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingTransactionProducer.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.example.tracemessage;
			
			import io.jaegertracing.Configuration;
			import io.jaegertracing.internal.samplers.ConstSampler;
			import io.opentracing.Tracer;
			import io.opentracing.util.GlobalTracer;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.client.trace.hook.EndTransactionOpenTracingHookImpl;
			import org.apache.rocketmq.client.trace.hook.SendMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			
			import java.io.UnsupportedEncodingException;
						
",
,
			fromLine:"			38",
			toLine:"			43",
			content:"
			
			    public static final String PRODUCER_GROUP = "please_rename_unique_group_name";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "TopicTest";
			    public static final String TAG = "Tag";
			    public static final String KEY = "KEY";			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
						
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        try {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/tracemessage/TraceProducer.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.example.tracemessage;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
						
",
,
			fromLine:"			27",
			toLine:"			32",
			content:"
			
			    public static final String PRODUCER_GROUP = "ProducerGroupName";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
			    public static final String TOPIC = "TopicTest";
			    public static final String TAG = "TagA";
			    public static final String KEY = "OrderID188";			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			                {
			                    Message msg = new Message(TOPIC,
			                        TAG,			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/transaction/TransactionProducer.java:
		[
			fromLine:"			16",
			toLine:"			32",
			content:"
			 */
			package org.apache.rocketmq.example.transaction;
			
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			
			import java.io.UnsupportedEncodingException;
			import java.util.Arrays;
			import java.util.concurrent.ArrayBlockingQueue;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
						
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			
			    public static final String PRODUCER_GROUP = "please_rename_unique_group_name";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			42",
			content:"
			        TransactionListener transactionListener = new TransactionListenerImpl();			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			                Message msg =			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/benchmark/BatchProducer.java:
		[
			fromLine:"			16",
			toLine:"			52",
			content:"
			 */
			package org.apache.rocketmq.example.benchmark;
			
			import java.nio.charset.StandardCharsets;
			import java.util.ArrayList;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Random;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.atomic.LongAdder;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.compression.CompressionType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.SerializeType;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.srvutil.ServerUtil;
						
",
,
			fromLine:"			349",
			toLine:"			349",
			content:"
						
",
,
			fromLine:"			351",
			toLine:"			351",
			content:"
						
",
,
			fromLine:"			353",
			toLine:"			353",
			content:"
						
",
,
			fromLine:"			355",
			toLine:"			355",
			content:"
						
",
,
			fromLine:"			375",
			toLine:"			376",
			content:"
			            System.currentTimeMillis(),
			            this.sendRequestSuccessCount.longValue(),			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			            this.sendMessageFailedCount.longValue(),			
",
,
			fromLine:"			386",
			toLine:"			386",
			content:"
			    public LongAdder getSendRequestSuccessCount() {			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			    public LongAdder getSendRequestFailedCount() {			
",
,
			fromLine:"			394",
			toLine:"			394",
			content:"
			    public LongAdder getSendMessageSuccessTimeTotal() {			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
			    public AtomicLong getSendMessageMaxRT() {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/benchmark/Producer.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.example.benchmark;
			
			import java.nio.charset.StandardCharsets;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.atomic.LongAdder;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.commons.lang3.concurrent.BasicThreadFactory;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendCallback;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.compression.CompressionType;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.SerializeType;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.srvutil.ServerUtil;
			
			import java.util.Arrays;
			import java.util.LinkedList;
			import java.util.Random;
			import java.util.TimerTask;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			403",
			toLine:"			403",
			content:"
			class StatsBenchmarkProducer {			
",
,
			fromLine:"			405",
			toLine:"			405",
			content:"
						
",
,
			fromLine:"			411",
			toLine:"			411",
			content:"
						
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
						
",
,
			fromLine:"			418",
			toLine:"			419",
			content:"
			            System.currentTimeMillis(),
			            this.sendRequestSuccessCount.longValue(),			
",
,
			fromLine:"			422",
			toLine:"			422",
			content:"
			            this.receiveResponseFailedCount.longValue(),			
",
,
			fromLine:"			429",
			toLine:"			429",
			content:"
			    public LongAdder getSendRequestSuccessCount() {			
",
,
			fromLine:"			433",
			toLine:"			433",
			content:"
			    public LongAdder getSendRequestFailedCount() {			
",
,
			fromLine:"			445",
			toLine:"			445",
			content:"
			    public LongAdder getSendMessageSuccessTimeTotal() {			
",
,
			fromLine:"			449",
			toLine:"			449",
			content:"
			    public AtomicLong getSendMessageMaxRT() {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/benchmark/TransactionProducer.java:
		[
			fromLine:"			17",
			toLine:"			58",
			content:"
			
			package org.apache.rocketmq.example.benchmark;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.concurrent.BasicThreadFactory;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.LocalTransactionState;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.client.producer.TransactionListener;
			import org.apache.rocketmq.client.producer.TransactionMQProducer;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.remoting.RPCHook;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.SerializeType;
			import org.apache.rocketmq.srvutil.ServerUtil;
			
			import java.io.UnsupportedEncodingException;
			import java.nio.ByteBuffer;
			import java.text.SimpleDateFormat;
			import java.util.ArrayList;
			import java.util.Date;
			import java.util.LinkedHashMap;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.Map;
			import java.util.TimerTask;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.ThreadLocalRandom;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.LongAdder;
						
",
,
			fromLine:"			70",
			toLine:"			72",
			content:"
			        TxSendConfig config = new TxSendConfig();
			        config.topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
			        config.threadCount = commandLine.hasOption('w') ? Integer.parseInt(commandLine.getOptionValue('w')) : 32;			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
						
",
,
			fromLine:"			156",
			toLine:"			156",
			content:"
						
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			    private static Message buildMessage(TxSendConfig config) {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
			        Message msg = new Message();			
",
,
			fromLine:"			412",
			toLine:"			412",
			content:"
			class StatsBenchmarkTProducer {			
",
,
			fromLine:"			414",
			toLine:"			414",
			content:"
						
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
						
",
,
			fromLine:"			429",
			toLine:"			430",
			content:"
			        s.endTime = System.currentTimeMillis();
			        s.sendRequestSuccessCount = sendRequestSuccessCount.longValue();			
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
			        s.sendMessageTimeTotal = sendMessageTimeTotal.longValue();			
",
,
			fromLine:"			440",
			toLine:"			440",
			content:"
			    public LongAdder getSendRequestSuccessCount() {			
",
,
			fromLine:"			444",
			toLine:"			444",
			content:"
			    public LongAdder getSendRequestFailedCount() {			
",
,
			fromLine:"			452",
			toLine:"			452",
			content:"
			    public AtomicLong getSendMessageMaxRT() {			
",
,
			fromLine:"			469",
			toLine:"			471",
			content:"
			class TxSendConfig {
			    String topic;
			    int threadCount;			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/benchmark/timer/TimerProducer.java:
		[
			fromLine:"			16",
			toLine:"			49",
			content:"
			 */
			package org.apache.rocketmq.example.benchmark.timer;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.remoting.common.RemotingHelper;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.srvutil.ServerUtil;
			
			import java.io.UnsupportedEncodingException;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.TimerTask;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.LinkedBlockingQueue;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.ThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			52",
			toLine:"			54",
			content:"
			
			    private final String topic;
			    private final int threadCount;			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
						
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    private final StatsBenchmarkProducer statsBenchmark = new StatsBenchmarkProducer();			
",
,
			fromLine:"			77",
			toLine:"			79",
			content:"
			        final String namesrvAddr = commandLine.hasOption('n') ? commandLine.getOptionValue('t').trim() : "localhost:9876";
			        topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";
			        threadCount = commandLine.hasOption("tc") ? Integer.parseInt(commandLine.getOptionValue("tc")) : 16;			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        System.out.printf("namesrvAddr: %s, topic: %s, threadCount: %d, messageSize: %d, precisionMs: %d, slotsTotal: %d, msgsTotalPerSlotThread: %d, slotDis: %d%n",			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			        sendThreadPool = new ThreadPoolExecutor(
			                threadCount,			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			    public void startScheduleTask() {			
",
,
			fromLine:"			105",
			toLine:"			107",
			content:"
			            public void run() {
			                snapshotList.addLast(statsBenchmark.createSnapshot());
			                if (snapshotList.size() > 10) {			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
						
",
,
			fromLine:"			114",
			toLine:"			116",
			content:"
			            private void printStats() {
			                if (snapshotList.size() >= 10) {
			                    Long[] begin = snapshotList.getFirst();			
",
,
			fromLine:"			151",
			toLine:"			151",
			content:"
						
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			                            try {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/benchmark/timer/TimerConsumer.java:
		[
			fromLine:"			16",
			toLine:"			42",
			content:"
			 */
			package org.apache.rocketmq.example.benchmark.timer;
			
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.srvutil.ServerUtil;
			
			import java.util.ArrayList;
			import java.util.LinkedList;
			import java.util.List;
			import java.util.TimerTask;
			import java.util.concurrent.ConcurrentSkipListSet;
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.ScheduledThreadPoolExecutor;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			
			public class TimerConsumer {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    private final StatsBenchmarkConsumer statsBenchmark = new StatsBenchmarkConsumer();			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			        final String namesrvAddr = commandLine.hasOption('n') ? commandLine.getOptionValue('t').trim() : "localhost:9876";
			        topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : "BenchmarkTest";			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void startScheduleTask() {			
",
,
			fromLine:"			71",
			toLine:"			73",
			content:"
			            public void run() {
			                snapshotList.addLast(statsBenchmark.createSnapshot());
			                if (snapshotList.size() > 10) {			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			82",
			content:"
			            private void printStats() {
			                if (snapshotList.size() >= 10) {
			                    Long[] begin = snapshotList.getFirst();			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public void start() throws MQClientException {			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.example.broadcast;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			
			    public static final String CONSUMER_GROUP = "please_rename_unique_group_name_1";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/namespace/PushConsumerWithNamespace.java:
		[
			fromLine:"			16",
			toLine:"			26",
			content:"
			 */
			package org.apache.rocketmq.example.namespace;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			
			public class PushConsumerWithNamespace {
			    public static final String NAMESPACE = "InstanceTest";
			    public static final String CONSUMER_GROUP = "cidTest";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			29",
			toLine:"			32",
			content:"
			    public static void main(String[] args) throws Exception {
			        DefaultMQPushConsumer defaultMQPushConsumer = new DefaultMQPushConsumer(CONSUMER_GROUP);
			        defaultMQPushConsumer.setNamespaceV2(NAMESPACE);
			        defaultMQPushConsumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/quickstart/Consumer.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.example.quickstart;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
						
",
,
			fromLine:"			29",
			toLine:"			31",
			content:"
			
			    public static final String CONSUMER_GROUP = "please_rename_unique_group_name_4";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			         */			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			         */			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/schedule/ScheduledMessageConsumer.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.example.schedule;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.common.message.MessageExt;
						
",
,
			fromLine:"			25",
			toLine:"			27",
			content:"
			
			    public static final String CONSUMER_GROUP = "ExampleConsumer";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			        // Instantiate message consumer			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        // Subscribe topics			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/schedule/TimerMessageConsumer.java:
		[
			fromLine:"			16",
			toLine:"			23",
			content:"
			 */
			package org.apache.rocketmq.example.schedule;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.common.message.MessageExt;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			
			    public static final String CONSUMER_GROUP = "TimerMessageConsumerGroup";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        // Instantiate message consumer			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			        // Subscribe topics			
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/tracemessage/OpenTracingPushConsumer.java:
		[
			fromLine:"			17",
			toLine:"			30",
			content:"
			
			package org.apache.rocketmq.example.tracemessage;
			
			import io.jaegertracing.Configuration;
			import io.jaegertracing.internal.samplers.ConstSampler;
			import io.opentracing.Tracer;
			import io.opentracing.util.GlobalTracer;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.trace.hook.ConsumeMessageOpenTracingHookImpl;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
						
",
,
			fromLine:"			32",
			toLine:"			34",
			content:"
			
			    public static final String CONSUMER_GROUP = "CID_JODIE_1";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,

		],
		example/src/main/java/org/apache/rocketmq/example/tracemessage/TracePushConsumer.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.example.tracemessage;
			
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
						
",
,
			fromLine:"			27",
			toLine:"			29",
			content:"
			
			    public static final String CONSUMER_GROUP = "ProducerGroupName";
			    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        // Here,we use the default message track trace topic name			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			//        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);			
",
,

		],
		filter/src/test/java/org/apache/rocketmq/filter/ExpressionTest.java:
		[
			fromLine:"			17",
			toLine:"			33",
			content:"
			
			package org.apache.rocketmq.filter;
			
			import org.apache.rocketmq.filter.expression.ComparisonExpression;
			import org.apache.rocketmq.filter.expression.ConstantExpression;
			import org.apache.rocketmq.filter.expression.EvaluationContext;
			import org.apache.rocketmq.filter.expression.Expression;
			import org.apache.rocketmq.filter.expression.MQFilterException;
			import org.apache.rocketmq.filter.expression.PropertyExpression;
			import org.apache.rocketmq.filter.parser.SelectorParser;
			import org.junit.Test;
			
			import java.util.HashMap;
			import java.util.Map;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			35",
			toLine:"			39",
			content:"
			
			    private static String andExpression = "a=3 and b<>4 And c>5 AND d<=4";
			    private static String orExpression = "a=3 or b<>4 Or c>5 OR d<=4";
			    private static String inExpression = "a in ('3', '4', '5')";
			    private static String notInExpression = "a not in ('3', '4', '5')";			
",
,
			fromLine:"			618",
			toLine:"			618",
			content:"
			    public void testEvaluate_andTrue() throws Exception {			
",
,
			fromLine:"			651",
			toLine:"			651",
			content:"
			    public void testEvaluate_andFalse() throws Exception {			
",
,
			fromLine:"			675",
			toLine:"			675",
			content:"
			    public void testEvaluate_orTrue() throws Exception {			
",
,
			fromLine:"			710",
			toLine:"			710",
			content:"
			    public void testEvaluate_orFalse() throws Exception {			
",
,
			fromLine:"			723",
			toLine:"			723",
			content:"
			    public void testEvaluate_inTrue() throws Exception {			
",
,
			fromLine:"			743",
			toLine:"			743",
			content:"
			    public void testEvaluate_inFalse() throws Exception {			
",
,
			fromLine:"			753",
			toLine:"			753",
			content:"
			    public void testEvaluate_notInTrue() throws Exception {			
",
,
			fromLine:"			763",
			toLine:"			763",
			content:"
			    public void testEvaluate_notInFalse() throws Exception {			
",
,
			fromLine:"			783",
			toLine:"			783",
			content:"
			    public void testEvaluate_betweenTrue() throws Exception {			
",
,
			fromLine:"			803",
			toLine:"			803",
			content:"
			    public void testEvaluate_betweenFalse() throws Exception {			
",
,

		],
		filter/src/test/java/org/apache/rocketmq/filter/ParserTest.java:
		[
			fromLine:"			17",
			toLine:"			28",
			content:"
			
			package org.apache.rocketmq.filter;
			
			import org.apache.rocketmq.filter.expression.Expression;
			import org.apache.rocketmq.filter.expression.MQFilterException;
			import org.apache.rocketmq.filter.parser.SelectorParser;
			import org.junit.Test;
			
			import java.util.Arrays;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
						
",
,
			fromLine:"			32",
			toLine:"			35",
			content:"
			    private static String andExpressionHasBlank = "a=3  and    b<>4 And c>5 AND d<=4";
			    private static String orExpression = "a=3 or b<>4 Or c>5 OR d<=4";
			    private static String inExpression = "a in ('3', '4', '5')";
			    private static String notInExpression = "(a not in ('6', '4', '5')) or (b in ('3', '4', '5'))";			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			        for (String expr : Arrays.asList(			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
			        try {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,

		],
		namesrv/src/main/java/org/apache/rocketmq/namesrv/NamesrvStartup.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.namesrv;
			
			import java.io.BufferedInputStream;
			import java.io.InputStream;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.util.Properties;
			import java.util.concurrent.Callable;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Option;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.common.ControllerConfig;
			import org.apache.rocketmq.common.JraftConfig;
			import org.apache.rocketmq.common.MQVersion;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.namesrv.NamesrvConfig;
			import org.apache.rocketmq.controller.ControllerManager;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.remoting.netty.NettyClientConfig;
			import org.apache.rocketmq.remoting.netty.NettyServerConfig;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.srvutil.ShutdownHookThread;
						
",
,
			fromLine:"			48",
			toLine:"			50",
			content:"
			    private static Properties properties = null;
			    private static NamesrvConfig namesrvConfig = null;
			    private static NettyServerConfig nettyServerConfig = null;			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			        try {			
",
,
			fromLine:"			93",
			toLine:"			96",
			content:"
			
			        namesrvConfig = new NamesrvConfig();
			        nettyServerConfig = new NettyServerConfig();
			        nettyClientConfig = new NettyClientConfig();			
",
,
			fromLine:"			103",
			toLine:"			106",
			content:"
			                properties.load(in);
			                MixAll.properties2Object(properties, namesrvConfig);
			                MixAll.properties2Object(properties, nettyServerConfig);
			                MixAll.properties2Object(properties, nettyClientConfig);			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			                }			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
						
",
,
			fromLine:"			122",
			toLine:"			125",
			content:"
			        if (commandLine.hasOption('p')) {
			            MixAll.printObjectProperties(logConsole, namesrvConfig);
			            MixAll.printObjectProperties(logConsole, nettyServerConfig);
			            MixAll.printObjectProperties(logConsole, nettyClientConfig);			
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
						
",
,
			fromLine:"			135",
			toLine:"			136",
			content:"
			        }
			        MixAll.printObjectProperties(log, namesrvConfig);			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			    public static ControllerManager createControllerManager() throws Exception {
			        NettyServerConfig controllerNettyServerConfig = (NettyServerConfig) nettyServerConfig.clone();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/CommandLineArgument.java:
		[
			fromLine:"			16",
			toLine:"			20",
			content:"
			 */
			package org.apache.rocketmq.proxy;
			
			public class CommandLineArgument {
			    private String namesrvAddr;			
",
,
			fromLine:"			22",
			toLine:"			22",
			content:"
			    private String proxyConfigPath;			
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    public String getNamesrvAddr() {			
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    public void setNamesrvAddr(String namesrvAddr) {			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    public String getBrokerConfigPath() {			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			    public void setBrokerConfigPath(String brokerConfigPath) {			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			    public String getProxyMode() {			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public void setProxyMode(String proxyMode) {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/ProxyAndTlsProtocolNegotiator.java:
		[
			fromLine:"			16",
			toLine:"			61",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc;
			
			import io.grpc.Attributes;
			import io.grpc.netty.shaded.io.grpc.netty.GrpcHttp2ConnectionHandler;
			import io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts;
			import io.grpc.netty.shaded.io.grpc.netty.InternalProtocolNegotiationEvent;
			import io.grpc.netty.shaded.io.grpc.netty.InternalProtocolNegotiator;
			import io.grpc.netty.shaded.io.grpc.netty.InternalProtocolNegotiators;
			import io.grpc.netty.shaded.io.grpc.netty.ProtocolNegotiationEvent;
			import io.grpc.netty.shaded.io.netty.buffer.ByteBuf;
			import io.grpc.netty.shaded.io.netty.buffer.ByteBufUtil;
			import io.grpc.netty.shaded.io.netty.channel.ChannelHandler;
			import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;
			import io.grpc.netty.shaded.io.netty.channel.ChannelInboundHandlerAdapter;
			import io.grpc.netty.shaded.io.netty.handler.codec.ByteToMessageDecoder;
			import io.grpc.netty.shaded.io.netty.handler.codec.ProtocolDetectionResult;
			import io.grpc.netty.shaded.io.netty.handler.codec.ProtocolDetectionState;
			import io.grpc.netty.shaded.io.netty.handler.codec.haproxy.HAProxyMessage;
			import io.grpc.netty.shaded.io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
			import io.grpc.netty.shaded.io.netty.handler.codec.haproxy.HAProxyProtocolVersion;
			import io.grpc.netty.shaded.io.netty.handler.codec.haproxy.HAProxyTLV;
			import io.grpc.netty.shaded.io.netty.handler.ssl.ClientAuth;
			import io.grpc.netty.shaded.io.netty.handler.ssl.SslContext;
			import io.grpc.netty.shaded.io.netty.handler.ssl.SslHandler;
			import io.grpc.netty.shaded.io.netty.handler.ssl.util.InsecureTrustManagerFactory;
			import io.grpc.netty.shaded.io.netty.handler.ssl.util.SelfSignedCertificate;
			import io.grpc.netty.shaded.io.netty.util.AsciiString;
			import io.grpc.netty.shaded.io.netty.util.CharsetUtil;
			import java.io.InputStream;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			import java.util.List;
			import org.apache.commons.collections.CollectionUtils;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.constant.HAProxyConstants;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.BinaryUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.grpc.constant.AttributeKeys;
			import org.apache.rocketmq.remoting.common.TlsMode;
			import org.apache.rocketmq.remoting.netty.TlsSystemConfig;
						
",
,
			fromLine:"			64",
			toLine:"			66",
			content:"
			
			    private static final String HA_PROXY_DECODER = "HAProxyDecoder";
			    private static final String HA_PROXY_HANDLER = "HAProxyHandler";			
",
,
			fromLine:"			143",
			toLine:"			145",
			content:"
			                if (ha.state() == ProtocolDetectionState.DETECTED) {
			                    ctx.pipeline().addAfter(ctx.name(), HA_PROXY_DECODER, new HAProxyMessageDecoder())
			                            .addAfter(HA_PROXY_DECODER, HA_PROXY_HANDLER, new HAProxyMessageHandler())			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			                } else {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/AbstractMessingActivity.java:
		[
			fromLine:"			16",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2;
			
			import apache.rocketmq.v2.Resource;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcValidator;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			
			public abstract class AbstractMessingActivity {
			    protected static final Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
			    protected final MessagingProcessor messagingProcessor;
			    protected final GrpcClientSettingsManager grpcClientSettingsManager;			
",
,
			fromLine:"			35",
			toLine:"			37",
			content:"
			        GrpcClientSettingsManager grpcClientSettingsManager, GrpcChannelManager grpcChannelManager) {
			        this.messagingProcessor = messagingProcessor;
			        this.grpcClientSettingsManager = grpcClientSettingsManager;			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java:
		[
			fromLine:"			17",
			toLine:"			58",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.route;
			
			import apache.rocketmq.v2.Address;
			import apache.rocketmq.v2.AddressScheme;
			import apache.rocketmq.v2.Broker;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Endpoints;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.MessageType;
			import apache.rocketmq.v2.Permission;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryAssignmentResponse;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.Resource;
			import com.google.common.net.HostAndPort;
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.service.metadata.LocalMetadataService;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mockito;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.fail;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.anyString;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			63",
			toLine:"			66",
			content:"
			    private static final String CLUSTER = "cluster";
			    private static final String TOPIC = "topic";
			    private static final String GROUP = "group";
			    private static final String BROKER_NAME = "brokerName";			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    private static final Resource GRPC_TOPIC = Resource.newBuilder()			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			    private static final Resource GRPC_GROUP = Resource.newBuilder()			
",
,
			fromLine:"			92",
			toLine:"			92",
			content:"
			        super.before();			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        MetadataService metadataService = Mockito.mock(LocalMetadataService.class);			
",
,
			fromLine:"			109",
			toLine:"			109",
			content:"
			                .setEndpoints(grpcEndpoints)			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
			    public void testQueryRouteTopicExist() throws Throwable {			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public void testQueryAssignmentWithNoReadPerm() throws Throwable {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			    public void testQueryAssignmentWithNoReadQueue() throws Throwable {			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			    public void testQueryAssignment() throws Throwable {			
",
,
			fromLine:"			196",
			toLine:"			196",
			content:"
			    public void testQueryFifoAssignment() throws Throwable {			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			        subscriptionGroupConfig.setConsumeMessageOrderly(true);			
",
,
			fromLine:"			221",
			toLine:"			221",
			content:"
			        proxyBrokerData.setCluster(CLUSTER);			
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
			        QueueData queueData = new QueueData();			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.route;
			
			import apache.rocketmq.v2.Address;
			import apache.rocketmq.v2.AddressScheme;
			import apache.rocketmq.v2.Assignment;
			import apache.rocketmq.v2.Broker;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Endpoints;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.MessageType;
			import apache.rocketmq.v2.Permission;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryAssignmentResponse;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.Resource;
			import com.google.common.net.HostAndPort;
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.Collections;
			import java.util.HashMap;
			import java.util.List;
			import java.util.Map;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.attribute.TopicMessageType;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.AbstractMessingActivity;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			import org.apache.rocketmq.proxy.service.route.ProxyTopicRouteData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
						
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			            String topicName = request.getTopic().getName();			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
						
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			            boolean fifo = false;			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/common/GrpcClientSettingsManagerTest.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.common;
			
			import apache.rocketmq.v2.CustomizedBackoff;
			import apache.rocketmq.v2.ExponentialBackoff;
			import apache.rocketmq.v2.Publishing;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.RetryPolicy;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.Subscription;
			import com.google.protobuf.util.Durations;
			import org.apache.rocketmq.proxy.common.ContextVariable;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.BaseActivityTest;
			import org.apache.rocketmq.remoting.protocol.subscription.CustomizedRetryPolicy;
			import org.apache.rocketmq.remoting.protocol.subscription.ExponentialRetryPolicy;
			import org.apache.rocketmq.remoting.protocol.subscription.GroupRetryPolicyType;
			import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
			import org.junit.Before;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNotEquals;
			import static org.junit.Assert.assertNull;
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			        super.before();			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void testGetProducerData() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
						
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void testGetSubscriptionData() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			        SubscriptionGroupConfig subscriptionGroupConfig = new SubscriptionGroupConfig();			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/DefaultGrpcMessingActivity.java:
		[
			fromLine:"			16",
			toLine:"			59",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2;
			
			import apache.rocketmq.v2.AckMessageRequest;
			import apache.rocketmq.v2.AckMessageResponse;
			import apache.rocketmq.v2.ChangeInvisibleDurationRequest;
			import apache.rocketmq.v2.ChangeInvisibleDurationResponse;
			import apache.rocketmq.v2.EndTransactionRequest;
			import apache.rocketmq.v2.EndTransactionResponse;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest;
			import apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse;
			import apache.rocketmq.v2.HeartbeatRequest;
			import apache.rocketmq.v2.HeartbeatResponse;
			import apache.rocketmq.v2.NotifyClientTerminationRequest;
			import apache.rocketmq.v2.NotifyClientTerminationResponse;
			import apache.rocketmq.v2.QueryAssignmentRequest;
			import apache.rocketmq.v2.QueryAssignmentResponse;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.ReceiveMessageRequest;
			import apache.rocketmq.v2.ReceiveMessageResponse;
			import apache.rocketmq.v2.SendMessageRequest;
			import apache.rocketmq.v2.SendMessageResponse;
			import apache.rocketmq.v2.TelemetryCommand;
			import io.grpc.stub.StreamObserver;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcChannelManager;
			import org.apache.rocketmq.proxy.grpc.v2.client.ClientActivity;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.consumer.AckMessageActivity;
			import org.apache.rocketmq.proxy.grpc.v2.consumer.ChangeInvisibleDurationActivity;
			import org.apache.rocketmq.proxy.grpc.v2.consumer.ReceiveMessageActivity;
			import org.apache.rocketmq.proxy.grpc.v2.producer.ForwardMessageToDLQActivity;
			import org.apache.rocketmq.proxy.grpc.v2.producer.SendMessageActivity;
			import org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity;
			import org.apache.rocketmq.proxy.grpc.v2.transaction.EndTransactionActivity;
			import org.apache.rocketmq.proxy.processor.MessagingProcessor;
			
			public class DefaultGrpcMessingActivity extends AbstractStartAndShutdown implements GrpcMessingActivity {			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			
			    protected GrpcClientSettingsManager grpcClientSettingsManager;			
",
,
			fromLine:"			77",
			toLine:"			78",
			content:"
			    protected void init(MessagingProcessor messagingProcessor) {
			        this.grpcClientSettingsManager = new GrpcClientSettingsManager(messagingProcessor);			
",
,
			fromLine:"			80",
			toLine:"			87",
			content:"
			
			        this.receiveMessageActivity = new ReceiveMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.ackMessageActivity = new AckMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.changeInvisibleDurationActivity = new ChangeInvisibleDurationActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.sendMessageActivity = new SendMessageActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.forwardMessageToDLQActivity = new ForwardMessageToDLQActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.endTransactionActivity = new EndTransactionActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);
			        this.routeActivity = new RouteActivity(messagingProcessor, grpcClientSettingsManager, grpcChannelManager);			
",
,
			fromLine:"			89",
			toLine:"			89",
			content:"
						
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/GrpcMessagingApplicationTest.java:
		[
			fromLine:"			17",
			toLine:"			50",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2;
			
			import apache.rocketmq.v2.Address;
			import apache.rocketmq.v2.AddressScheme;
			import apache.rocketmq.v2.Code;
			import apache.rocketmq.v2.Endpoints;
			import apache.rocketmq.v2.MessageQueue;
			import apache.rocketmq.v2.QueryRouteRequest;
			import apache.rocketmq.v2.QueryRouteResponse;
			import apache.rocketmq.v2.Resource;
			import io.grpc.Context;
			import io.grpc.Metadata;
			import io.grpc.stub.StreamObserver;
			import java.util.UUID;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.constant.GrpcConstants;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.grpc.pipeline.ContextInitPipeline;
			import org.apache.rocketmq.proxy.grpc.pipeline.RequestPipeline;
			import org.apache.rocketmq.proxy.grpc.v2.common.ResponseBuilder;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.ArgumentCaptor;
			import org.mockito.Mock;
			import org.mockito.Mockito;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.awaitility.Awaitility.await;
			import static org.junit.Assert.assertEquals;
						
",
,
			fromLine:"			52",
			toLine:"			55",
			content:"
			public class GrpcMessagingApplicationTest extends InitConfigTest {
			    protected static final String REMOTE_ADDR = "192.168.0.1:8080";
			    protected static final String LOCAL_ADDR = "127.0.0.1:8080";
			    protected static final String CLIENT_ID = "client-id" + UUID.randomUUID();			
",
,
			fromLine:"			81",
			toLine:"			84",
			content:"
			        Metadata metadata = new Metadata();
			        metadata.put(GrpcConstants.CLIENT_ID, CLIENT_ID);
			        metadata.put(GrpcConstants.LANGUAGE, JAVA);
			        metadata.put(GrpcConstants.REMOTE_ADDRESS, REMOTE_ADDR);			
",
,
			fromLine:"			111",
			toLine:"			113",
			content:"
			        Metadata metadata = new Metadata();
			        metadata.put(GrpcConstants.LANGUAGE, JAVA);
			        metadata.put(GrpcConstants.REMOTE_ADDRESS, REMOTE_ADDR);			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannel.java:
		[
			fromLine:"			16",
			toLine:"			58",
			content:"
			 */
			package org.apache.rocketmq.proxy.grpc.v2.channel;
			
			import apache.rocketmq.v2.PrintThreadStackTraceCommand;
			import apache.rocketmq.v2.RecoverOrphanedTransactionCommand;
			import apache.rocketmq.v2.Settings;
			import apache.rocketmq.v2.TelemetryCommand;
			import apache.rocketmq.v2.VerifyMessageCommand;
			import com.google.common.base.MoreObjects;
			import com.google.common.collect.ComparisonChain;
			import com.google.protobuf.InvalidProtocolBufferException;
			import com.google.protobuf.TextFormat;
			import com.google.protobuf.util.JsonFormat;
			import io.grpc.StatusRuntimeException;
			import io.grpc.stub.StreamObserver;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelId;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.atomic.AtomicReference;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcConverter;
			import org.apache.rocketmq.proxy.processor.channel.ChannelExtendAttributeGetter;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannelConverter;
			import org.apache.rocketmq.proxy.service.relay.ProxyChannel;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayResult;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.transaction.TransactionData;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
						
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			
			    private final GrpcChannelManager grpcChannelManager;			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    private final Object telemetryWriteLock = new Object();			
",
,
			fromLine:"			73",
			toLine:"			75",
			content:"
			            ctx.getLocalAddress());
			        this.grpcChannelManager = grpcChannelManager;
			        this.grpcClientSettingsManager = grpcClientSettingsManager;			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public String getChannelExtendAttribute() {			
",
,
			fromLine:"			217",
			toLine:"			217",
			content:"
			            .setPrintThreadStackTraceCommand(PrintThreadStackTraceCommand.newBuilder()			
",
,
			fromLine:"			229",
			toLine:"			229",
			content:"
			            .setVerifyMessageCommand(VerifyMessageCommand.newBuilder()			
",
,
			fromLine:"			237",
			toLine:"			237",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			264",
			toLine:"			264",
			content:"
			        return MoreObjects.toStringHelper(this)			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/channel/GrpcClientChannelTest.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.proxy.grpc.v2.channel;
			
			import apache.rocketmq.v2.Publishing;
			import apache.rocketmq.v2.Resource;
			import apache.rocketmq.v2.Settings;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.grpc.v2.common.GrpcClientSettingsManager;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
			import org.apache.rocketmq.proxy.remoting.channel.RemotingChannel;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNull;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @Mock			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    @Mock			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			59",
			content:"
			        super.before();
			        this.clientId = RandomStringUtils.randomAlphabetic(10);			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			            ProxyContext.create().setRemoteAddress("10.152.39.53:9768").setLocalAddress("11.193.0.1:1210"),			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			            .build();			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/BaseServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			42",
			content:"
			
			package org.apache.rocketmq.proxy.service;
			
			import java.util.HashMap;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIExt;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.proxy.service.route.MessageQueueView;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.route.BrokerData;
			import org.apache.rocketmq.remoting.protocol.route.QueueData;
			import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Ignore;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.mockito.ArgumentMatchers.any;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			51",
			toLine:"			55",
			content:"
			    protected static final String ERR_TOPIC = "errTopic";
			    protected static final String TOPIC = "topic";
			    protected static final String GROUP = "group";
			    protected static final String BROKER_NAME = "broker";
			    protected static final String CLUSTER_NAME = "cluster";			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
						
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			        topicRouteData.setQueueDatas(Lists.newArrayList(queueData));
			        brokerData.setCluster(CLUSTER_NAME);			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        HashMap<Long, String> brokerAddrs = new HashMap<>();			
",
,
			fromLine:"			80",
			toLine:"			81",
			content:"
			        when(this.topicRouteService.getAllMessageQueueView(any(), eq(ERR_TOPIC))).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, ""));
			        when(this.topicRouteService.getAllMessageQueueView(any(), eq(TOPIC))).thenReturn(new MessageQueueView(TOPIC, topicRouteData, null));			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteServiceTest.java:
		[
			fromLine:"			17",
			toLine:"			45",
			content:"
			
			package org.apache.rocketmq.proxy.service.route;
			
			import com.google.common.net.HostAndPort;
			import java.util.ArrayList;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.topic.TopicConfigManager;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.proxy.common.Address;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.assertj.core.util.Lists;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mock;
			
			import static org.junit.Assert.assertEquals;
			import static org.mockito.ArgumentMatchers.anyLong;
			import static org.mockito.ArgumentMatchers.eq;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,
			fromLine:"			80",
			toLine:"			81",
			content:"
			        ProxyContext ctx = ProxyContext.create();
			        this.topicConfigTable.put(TOPIC, new TopicConfig(TOPIC, 3, 2, PermName.PERM_WRITE | PermName.PERM_READ));			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        ProxyContext ctx = ProxyContext.create();			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            Lists.newArrayList(new Address(Address.AddressScheme.IPv4, HostAndPort.fromParts(			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelectorTest.java:
		[
			fromLine:"			17",
			toLine:"			26",
			content:"
			
			package org.apache.rocketmq.proxy.service.route;
			
			import org.apache.rocketmq.common.constant.PermName;
			import org.apache.rocketmq.proxy.service.BaseServiceTest;
			import org.junit.Test;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertTrue;
						
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			        queueData.setReadQueueNums(0);			
",
,
			fromLine:"			37",
			toLine:"			37",
			content:"
			        queueData.setReadQueueNums(3);			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        queueData.setReadQueueNums(0);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        queueData.setWriteQueueNums(3);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
						
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannel.java:
		[
			fromLine:"			17",
			toLine:"			60",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.channel;
			
			import com.alibaba.fastjson.JSON;
			import com.alibaba.fastjson.TypeReference;
			import com.google.common.base.MoreObjects;
			import io.netty.channel.Channel;
			import io.netty.channel.ChannelConfig;
			import io.netty.channel.ChannelFuture;
			import io.netty.channel.ChannelFutureListener;
			import io.netty.channel.ChannelMetadata;
			import java.time.Duration;
			import java.util.Set;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.channel.ChannelHelper;
			import org.apache.rocketmq.common.utils.ExceptionUtils;
			import org.apache.rocketmq.common.utils.FutureUtils;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.processor.channel.ChannelExtendAttributeGetter;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannelConverter;
			import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
			import org.apache.rocketmq.proxy.remoting.common.RemotingConverter;
			import org.apache.rocketmq.proxy.service.relay.ProxyChannel;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayResult;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.transaction.TransactionData;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.remoting.protocol.RemotingCommand;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
			import org.apache.rocketmq.remoting.protocol.ResponseCode;
			import org.apache.rocketmq.remoting.protocol.body.ConsumeMessageDirectlyResult;
			import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
			import org.apache.rocketmq.remoting.protocol.header.CheckTransactionStateRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.ConsumeMessageDirectlyResultRequestHeader;
			import org.apache.rocketmq.remoting.protocol.header.GetConsumerRunningInfoRequestHeader;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
						
",
,
			fromLine:"			63",
			toLine:"			67",
			content:"
			    private static final long DEFAULT_MQ_CLIENT_TIMEOUT = Duration.ofSeconds(3).toMillis();
			    private final String clientId;
			    private final String remoteAddress;
			    private final String localAddress;
			    private final RemotingProxyOutClient remotingProxyOutClient;			
",
,
			fromLine:"			75",
			toLine:"			79",
			content:"
			            NetworkUtil.socketAddress2String(parent.localAddress()));
			        this.remotingProxyOutClient = remotingProxyOutClient;
			        this.clientId = clientId;
			        this.remoteAddress = NetworkUtil.socketAddress2String(parent.remoteAddress());
			        this.localAddress = NetworkUtil.socketAddress2String(parent.localAddress());			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_RUNNING_INFO, header);			
",
,
			fromLine:"			187",
			toLine:"			187",
			content:"
						
",
,
			fromLine:"			210",
			toLine:"			210",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			    public String getChannelExtendAttribute() {			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
			        }			
",
,
			fromLine:"			254",
			toLine:"			257",
			content:"
			            .add("parent", parent())
			            .add("clientId", clientId)
			            .add("remoteAddress", remoteAddress)
			            .add("localAddress", localAddress)			
",
,

		],
		proxy/src/test/java/org/apache/rocketmq/proxy/remoting/channel/RemotingChannelTest.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.proxy.remoting.channel;
			
			import io.netty.channel.Channel;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.proxy.config.InitConfigTest;
			import org.apache.rocketmq.proxy.grpc.v2.channel.GrpcClientChannel;
			import org.apache.rocketmq.proxy.processor.channel.ChannelProtocolType;
			import org.apache.rocketmq.proxy.processor.channel.RemoteChannel;
			import org.apache.rocketmq.proxy.remoting.RemotingProxyOutClient;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
			import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
			import org.junit.Before;
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.Mock;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.junit.Assert.assertEquals;
			import static org.junit.Assert.assertNull;
			import static org.mockito.Mockito.mock;
			import static org.mockito.Mockito.when;
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    @Mock			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    @Mock			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			
			    private String clientId;			
",
,
			fromLine:"			56",
			toLine:"			57",
			content:"
			
			    private final String remoteAddress = "10.152.39.53:9768";			
",
,
			fromLine:"			62",
			toLine:"			68",
			content:"
			        super.before();
			        this.clientId = RandomStringUtils.randomAlphabetic(10);
			        when(parent.remoteAddress()).thenReturn(NetworkUtil.string2SocketAddress(remoteAddress));
			        when(parent.localAddress()).thenReturn(NetworkUtil.string2SocketAddress(localAddress));
			        this.subscriptionData = new HashSet<>();
			        this.subscriptionData.add(FilterAPI.buildSubscriptionData("topic", "subTag"));
			        this.remotingChannel = new RemotingChannel(remotingProxyOutClient, proxyRelayService,			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			        assertEquals(ChannelProtocolType.REMOTING, remoteChannel.getType());
			        assertEquals(subscriptionData, RemotingChannel.parseChannelExtendAttribute(remoteChannel));			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/ClusterServiceManager.java:
		[
			fromLine:"			16",
			toLine:"			54",
			content:"
			 */
			package org.apache.rocketmq.proxy.service;
			
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.client.ClientChannelInfo;
			import org.apache.rocketmq.broker.client.ConsumerGroupEvent;
			import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.client.ProducerChangeListener;
			import org.apache.rocketmq.broker.client.ProducerGroupEvent;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.client.common.NameserverAccessConfig;
			import org.apache.rocketmq.client.impl.mqclient.DoNothingClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.proxy.common.ProxyContext;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.proxy.service.admin.DefaultAdminService;
			import org.apache.rocketmq.proxy.service.client.ClusterConsumerManager;
			import org.apache.rocketmq.proxy.service.client.ProxyClientRemotingProcessor;
			import org.apache.rocketmq.proxy.service.message.ClusterMessageService;
			import org.apache.rocketmq.proxy.service.message.MessageService;
			import org.apache.rocketmq.proxy.service.metadata.ClusterMetadataService;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.ClusterProxyRelayService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.ClusterTopicRouteService;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.proxy.service.transaction.ClusterTransactionService;
			import org.apache.rocketmq.proxy.service.transaction.TransactionService;
			import org.apache.rocketmq.remoting.RPCHook;
						
",
,
			fromLine:"			60",
			toLine:"			62",
			content:"
			    protected ClusterConsumerManager consumerManager;
			    protected TopicRouteService topicRouteService;
			    protected MessageService messageService;			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    protected ClusterMetadataService metadataService;			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			            proxyConfig.getNamesrvDomain(), proxyConfig.getNamesrvDomainSubgroup());			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			            rpcHook,			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			            rpcHook,			
",
,
			fromLine:"			93",
			toLine:"			96",
			content:"
			
			        this.topicRouteService = new ClusterTopicRouteService(operationClientAPIFactory);
			        this.messageService = new ClusterMessageService(this.topicRouteService, this.messagingClientAPIFactory);
			        this.metadataService = new ClusterMetadataService(topicRouteService, operationClientAPIFactory);			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        this.producerManager = new ProducerManager();			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			            rpcHook,
			            scheduledExecutorService);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            this.transactionClientAPIFactory);			
",
,
			fromLine:"			118",
			toLine:"			118",
			content:"
						
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        this.appendStartAndShutdown(this.transactionClientAPIFactory);			
",
,
			fromLine:"			139",
			toLine:"			139",
			content:"
			    public MessageService getMessageService() {			
",
,
			fromLine:"			144",
			toLine:"			144",
			content:"
			    public TopicRouteService getTopicRouteService() {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    public ProxyRelayService getProxyRelayService() {			
",
,
			fromLine:"			174",
			toLine:"			174",
			content:"
			    public AdminService getAdminService() {			
",
,

		],
		proxy/src/main/java/org/apache/rocketmq/proxy/service/LocalServiceManager.java:
		[
			fromLine:"			16",
			toLine:"			47",
			content:"
			 */
			package org.apache.rocketmq.proxy.service;
			
			import java.util.concurrent.ScheduledExecutorService;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.broker.BrokerController;
			import org.apache.rocketmq.broker.client.ConsumerManager;
			import org.apache.rocketmq.broker.client.ProducerManager;
			import org.apache.rocketmq.client.common.NameserverAccessConfig;
			import org.apache.rocketmq.client.impl.mqclient.DoNothingClientRemotingProcessor;
			import org.apache.rocketmq.client.impl.mqclient.MQClientAPIFactory;
			import org.apache.rocketmq.common.ThreadFactoryImpl;
			import org.apache.rocketmq.common.utils.AbstractStartAndShutdown;
			import org.apache.rocketmq.common.utils.StartAndShutdown;
			import org.apache.rocketmq.common.utils.ThreadUtils;
			import org.apache.rocketmq.proxy.config.ConfigurationManager;
			import org.apache.rocketmq.proxy.config.ProxyConfig;
			import org.apache.rocketmq.proxy.service.admin.AdminService;
			import org.apache.rocketmq.proxy.service.admin.DefaultAdminService;
			import org.apache.rocketmq.proxy.service.channel.ChannelManager;
			import org.apache.rocketmq.proxy.service.message.LocalMessageService;
			import org.apache.rocketmq.proxy.service.message.MessageService;
			import org.apache.rocketmq.proxy.service.metadata.LocalMetadataService;
			import org.apache.rocketmq.proxy.service.metadata.MetadataService;
			import org.apache.rocketmq.proxy.service.relay.LocalProxyRelayService;
			import org.apache.rocketmq.proxy.service.relay.ProxyRelayService;
			import org.apache.rocketmq.proxy.service.route.LocalTopicRouteService;
			import org.apache.rocketmq.proxy.service.route.TopicRouteService;
			import org.apache.rocketmq.proxy.service.transaction.LocalTransactionService;
			import org.apache.rocketmq.proxy.service.transaction.TransactionService;
			import org.apache.rocketmq.remoting.RPCHook;
						
",
,
			fromLine:"			50",
			toLine:"			51",
			content:"
			    private final BrokerController brokerController;
			    private final TopicRouteService topicRouteService;			
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    private final TransactionService transactionService;			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    private final MetadataService metadataService;			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
						
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        this.channelManager = new ChannelManager();			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			            rpcHook,			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        );			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			        this.transactionService = new LocalTransactionService(brokerController.getBrokerConfig());			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        this.metadataService = new LocalMetadataService(brokerController);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			        this.appendStartAndShutdown(this.mqClientAPIFactory);			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			    public MessageService getMessageService() {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public TopicRouteService getTopicRouteService() {			
",
,
			fromLine:"			119",
			toLine:"			119",
			content:"
			    public ProxyRelayService getProxyRelayService() {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    public AdminService getAdminService() {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        public void start() throws Exception {			
",
,
			fromLine:"			140",
			toLine:"			140",
			content:"
			        public void shutdown() throws Exception {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettySystemConfig.java:
		[
			fromLine:"			17",
			toLine:"			19",
			content:"
			
			package org.apache.rocketmq.remoting.netty;
						
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			        Integer.parseInt(System.getProperty(COM_ROCKETMQ_REMOTING_CLIENT_WORKER_SIZE, "4"));			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        Integer.parseInt(System.getProperty(COM_ROCKETMQ_REMOTING_CLIENT_CONNECT_TIMEOUT, "3000"));			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			        Integer.parseInt(System.getProperty(COM_ROCKETMQ_REMOTING_CLIENT_CHANNEL_MAX_IDLE_SECONDS, "120"));			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        Boolean.parseBoolean(System.getProperty(COM_ROCKETMQ_REMOTING_CLIENT_CLOSE_SOCKET_IF_TIMEOUT, "true"));			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        Integer.parseInt(System.getProperty(COM_ROCKETMQ_REMOTING_WRITE_BUFFER_HIGH_WATER_MARK_VALUE, "0"));			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyServerConfig.java:
		[
			fromLine:"			16",
			toLine:"			18",
			content:"
			 */
			package org.apache.rocketmq.remoting.netty;
						
",
,
			fromLine:"			35",
			toLine:"			36",
			content:"
			    private int serverSocketRcvBufSize = NettySystemConfig.socketRcvbufSize;
			    private int writeBufferHighWaterMark = NettySystemConfig.writeBufferHighWaterMark;			
",
,

		],
		remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyClientConfigTest.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.remoting.netty;
			
			import org.junit.Test;
			import org.junit.runner.RunWith;
			import org.mockito.junit.MockitoJUnitRunner;
			
			import static org.assertj.core.api.Assertions.assertThat;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			            Integer.parseInt(System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_CLIENT_WORKER_SIZE, "4"));			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
			            Integer.parseInt(System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_CLIENT_CONNECT_TIMEOUT, "3000"));			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			            Integer.parseInt(System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_CLIENT_CHANNEL_MAX_IDLE_SECONDS, "120"));			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/controller/GetReplicaInfoResponseHeader.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header.controller;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			23",
			toLine:"			25",
			content:"
			
			    private Long masterBrokerId;
			    private String masterAddress;			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public Integer getMasterEpoch() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setMasterEpoch(Integer masterEpoch) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public Long getMasterBrokerId() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setMasterBrokerId(Long masterBrokerId) {			
",
,
			fromLine:"			57",
			toLine:"			59",
			content:"
			        return "GetReplicaInfoResponseHeader{" +
			                "masterBrokerId=" + masterBrokerId +
			                ", masterAddress='" + masterAddress + '\'' +			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/Connection.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import org.apache.rocketmq.remoting.protocol.LanguageCode;
			
			public class Connection {			
",
,
			fromLine:"			24",
			toLine:"			25",
			content:"
			    private String clientAddr;
			    private LanguageCode language;			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public LanguageCode getLanguage() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setLanguage(LanguageCode language) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public int getVersion() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setVersion(int version) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/LockBatchRequestBody.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import com.google.common.base.MoreObjects;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			
			public class LockBatchRequestBody extends RemotingSerializable {
			    private String consumerGroup;
			    private String clientId;
			    private boolean onlyThisBroker = false;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public boolean isOnlyThisBroker() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setOnlyThisBroker(boolean onlyThisBroker) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public Set<MessageQueue> getMqSet() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setMqSet(Set<MessageQueue> mqSet) {			
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("clientId", clientId)
			            .add("onlyThisBroker", onlyThisBroker)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/body/UnlockBatchRequestBody.java:
		[
			fromLine:"			17",
			toLine:"			29",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.body;
			
			import com.google.common.base.MoreObjects;
			import java.util.HashSet;
			import java.util.Set;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
			
			public class UnlockBatchRequestBody extends RemotingSerializable {
			    private String consumerGroup;
			    private String clientId;
			    private boolean onlyThisBroker = false;			
",
,
			fromLine:"			32",
			toLine:"			32",
			content:"
			    public String getConsumerGroup() {			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    public void setConsumerGroup(String consumerGroup) {			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public String getClientId() {			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public void setClientId(String clientId) {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public boolean isOnlyThisBroker() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setOnlyThisBroker(boolean onlyThisBroker) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public Set<MessageQueue> getMqSet() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setMqSet(Set<MessageQueue> mqSet) {			
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			        return MoreObjects.toStringHelper(this)
			            .add("consumerGroup", consumerGroup)
			            .add("clientId", clientId)
			            .add("onlyThisBroker", onlyThisBroker)			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/CheckTransactionStateResponseHeader.java:
		[
			fromLine:"			20",
			toLine:"			27",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			29",
			toLine:"			29",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @CFNotNull			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public void checkFields() throws RemotingCommandException {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			53",
			toLine:"			53",
			content:"
			    public String getProducerGroup() {			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			    public void setProducerGroup(String producerGroup) {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			    public Long getTranStateTableOffset() {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public void setTranStateTableOffset(Long tranStateTableOffset) {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public Long getCommitLogOffset() {			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public void setCommitLogOffset(Long commitLogOffset) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			    public Integer getCommitOrRollback() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			    public void setCommitOrRollback(Integer commitOrRollback) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ExchangeHAInfoRequestHeader.java:
		[
			fromLine:"			17",
			toLine:"			27",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			30",
			toLine:"			30",
			content:"
			    @CFNullable			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			    @CFNullable			
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			    @CFNullable			
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public String getMasterHaAddress() {			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public void setMasterHaAddress(String masterHaAddress) {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public Long getMasterFlushOffset() {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public void setMasterFlushOffset(Long masterFlushOffset) {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/ExchangeHAInfoResponseHeader.java:
		[
			fromLine:"			17",
			toLine:"			23",
			content:"
			
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.remoting.CommandCustomHeader;
			import org.apache.rocketmq.remoting.annotation.CFNullable;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    @CFNullable			
",
,
			fromLine:"			28",
			toLine:"			28",
			content:"
			    @CFNullable			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    @CFNullable			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getMasterHaAddress() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setMasterHaAddress(String masterHaAddress) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public Long getMasterFlushOffset() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setMasterFlushOffset(Long masterFlushOffset) {			
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			    public String getMasterAddress() {			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void setMasterAddress(String masterAddress) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/header/UpdateGroupForbiddenRequestHeader.java:
		[
			fromLine:"			20",
			toLine:"			31",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.header;
			
			import org.apache.rocketmq.common.action.Action;
			import org.apache.rocketmq.common.action.RocketMQAction;
			import org.apache.rocketmq.common.resource.ResourceType;
			import org.apache.rocketmq.common.resource.RocketMQResource;
			import org.apache.rocketmq.remoting.annotation.CFNotNull;
			import org.apache.rocketmq.remoting.exception.RemotingCommandException;
			import org.apache.rocketmq.remoting.rpc.TopicRequestHeader;
			import org.apache.rocketmq.remoting.protocol.RequestCode;
						
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    @RocketMQResource(ResourceType.GROUP)			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    @RocketMQResource(ResourceType.TOPIC)			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			56",
			toLine:"			56",
			content:"
			    public String getGroup() {			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void setGroup(String group) {			
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			    public Boolean getReadable() {			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public void setReadable(Boolean readable) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/subscription/GroupForbidden.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.subscription;
			
			import org.apache.commons.lang3.builder.EqualsBuilder;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			26",
			toLine:"			28",
			content:"
			
			    private String  topic;
			    private String  group;			
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			35",
			toLine:"			35",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public String getGroup() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public void setGroup(String group) {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public Boolean getReadable() {			
",
,
			fromLine:"			51",
			toLine:"			51",
			content:"
			    public void setReadable(Boolean readable) {			
",
,
			fromLine:"			58",
			toLine:"			60",
			content:"
			        int result = 1;
			        result = prime * result + ((group == null) ? 0 : group.hashCode());
			        result = prime * result + ((readable == null) ? 0 : readable.hashCode());			
",
,
			fromLine:"			74",
			toLine:"			76",
			content:"
			        return new EqualsBuilder()
			                .append(topic, other.topic)
			                .append(group, other.group)			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			    public String toString() {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/statictopic/TopicQueueMappingContext.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.statictopic;
			
			import com.google.common.collect.ImmutableList;
			import java.util.List;
			
			public class TopicQueueMappingContext  {
			    private String topic;
			    private Integer globalId;			
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			    public TopicQueueMappingContext(String topic, Integer globalId, TopicQueueMappingDetail mappingDetail, List<LogicQueueMappingItem> mappingItemList, LogicQueueMappingItem leaderItem) {
			        this.topic = topic;
			        this.globalId = globalId;			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public boolean isLeader() {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void setTopic(String topic) {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public Integer getGlobalId() {			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			    public void setGlobalId(Integer globalId) {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			    public TopicQueueMappingDetail getMappingDetail() {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void setMappingDetail(TopicQueueMappingDetail mappingDetail) {			
",
,

		],
		remoting/src/main/java/org/apache/rocketmq/remoting/protocol/statictopic/TopicQueueMappingOne.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.remoting.protocol.statictopic;
			
			import java.util.List;
			import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
			    String bname;  //identify the hosted broker name			
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
			    List<LogicQueueMappingItem> items;			
",
,
			fromLine:"			30",
			toLine:"			31",
			content:"
			    public TopicQueueMappingOne(TopicQueueMappingDetail mappingDetail, String topic, String bname, Integer globalId, List<LogicQueueMappingItem> items) {
			        this.mappingDetail =  mappingDetail;			
",
,
			fromLine:"			33",
			toLine:"			33",
			content:"
			        this.bname = bname;			
",
,
			fromLine:"			38",
			toLine:"			38",
			content:"
			    public String getTopic() {			
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
			    public Integer getGlobalId() {			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public TopicQueueMappingDetail getMappingDetail() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
						
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			            return false;			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            return false;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        result = 31 * result + (bname != null ? bname.hashCode() : 0);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			        result = 31 * result + (items != null ? items.hashCode() : 0);			
",
,

		],
		srvutil/src/main/java/org/apache/rocketmq/srvutil/AclFileWatchService.java:
		[
			fromLine:"			17",
			toLine:"			36",
			content:"
			
			package org.apache.rocketmq.srvutil;
			
			import java.util.ArrayList;
			import java.util.List;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.security.MessageDigest;
			import java.util.HashMap;
			import java.util.Map;
			
			public class AclFileWatchService extends ServiceThread {			
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			    private final AclFileWatchService.Listener listener;
			    private static final int WATCH_INTERVAL = 5000;			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        if (!file.exists()) {			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void run() {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            try {			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			                if (aclFilesNum != realAclFilesNum) {			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			                    aclFilesNum = realAclFilesNum;			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        }			
",
,
			fromLine:"			141",
			toLine:"			142",
			content:"
			        Path path = Paths.get(filePath);
			        md.update(Files.readAllBytes(path));			
",
,

		],
		srvutil/src/main/java/org/apache/rocketmq/srvutil/FileWatchService.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.srvutil;
			
			import com.google.common.base.Strings;
			import java.io.File;
			import java.io.IOException;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.Paths;
			import java.security.MessageDigest;
			import java.util.HashMap;
			import java.util.Map;
			import org.apache.rocketmq.common.LifecycleAwareServiceThread;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			
			public class FileWatchService extends LifecycleAwareServiceThread {			
",
,
			fromLine:"			39",
			toLine:"			40",
			content:"
			    private final Listener listener;
			    private static final int WATCH_INTERVAL = 500;			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void run0() {			
",
,
			fromLine:"			63",
			toLine:"			63",
			content:"
			            try {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			            } catch (Exception e) {			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        }			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			103",
			toLine:"			104",
			content:"
			        }
			        md.update(raw);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/MultiPathMappedFileQueue.java:
		[
			fromLine:"			16",
			toLine:"			33",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.util.Arrays;
			import java.util.HashSet;
			import java.util.Set;
			import java.util.function.Supplier;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.MixAll;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.logfile.MappedFile;
			
			import java.io.File;
			import java.util.ArrayList;
			import java.util.Collections;
			import java.util.List;
						
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public MappedFile tryCreateMappedFile(long createOffset) {			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			        String nextNextFilePath = paths[(int) ((fileIdx + 1) % paths.length)] + File.separator			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/config/MessageStoreConfig.java:
		[
			fromLine:"			16",
			toLine:"			25",
			content:"
			 */
			package org.apache.rocketmq.store.config;
			
			import java.io.File;
			
			import org.apache.rocketmq.common.annotation.ImportantField;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.StoreType;
			import org.apache.rocketmq.store.queue.BatchConsumeQueue;
						
",
,
			fromLine:"			108",
			toLine:"			108",
			content:"
			    // ConsumeQueue file size,default is 30W			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			    private int mappedFileSizeConsumeQueueExt = 48 * 1024 * 1024;			
",
,
			fromLine:"			532",
			toLine:"			533",
			content:"
			    public int getMappedFileSizeConsumeQueue() {
			        int factor = (int) Math.ceil(this.mappedFileSizeConsumeQueue / (ConsumeQueue.CQ_STORE_UNIT_SIZE * 1.0));			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/queue/QueueTestBase.java:
		[
			fromLine:"			16",
			toLine:"			41",
			content:"
			 */
			package org.apache.rocketmq.store.queue;
			
			import org.apache.rocketmq.common.BrokerConfig;
			import org.apache.rocketmq.common.TopicAttributes;
			import org.apache.rocketmq.common.TopicConfig;
			import org.apache.rocketmq.common.attribute.CQType;
			import org.apache.rocketmq.common.message.MessageAccessor;
			import org.apache.rocketmq.common.message.MessageConst;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.sysflag.MessageSysFlag;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.apache.rocketmq.store.MessageStore;
			import org.apache.rocketmq.store.StoreTestBase;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.stats.BrokerStatsManager;
			
			import java.io.File;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.Callable;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
						
",
,
			fromLine:"			64",
			toLine:"			64",
			content:"
			        }			
",
,
			fromLine:"			67",
			toLine:"			68",
			content:"
			        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);
			        messageStoreConfig.setMappedFileSizeConsumeQueue(100 * ConsumeQueue.CQ_STORE_UNIT_SIZE);			
",
,
			fromLine:"			101",
			toLine:"			102",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatMessageFileTest.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.ConsumeQueue;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtilTest;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			40",
			toLine:"			43",
			content:"
			
			    private final String storePath = MessageStoreUtilTest.getRandomStorePath();
			    private MessageStoreConfig storeConfig;
			    private MetadataStore metadataStore;			
",
,
			fromLine:"			47",
			toLine:"			54",
			content:"
			    public void init() throws ClassNotFoundException, NoSuchMethodException {
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setBrokerName("brokerName");
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
			        storeConfig.setCommitLogRollingInterval(0);
			        storeConfig.setCommitLogRollingMinimumSize(999);
			        metadataStore = new DefaultMetadataStore(storeConfig);			
",
,
			fromLine:"			59",
			toLine:"			59",
			content:"
			    public void shutdown() throws IOException {			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			        String topic = "CommitLogTest";			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        flatFile.flushMetadata();			
",
,
			fromLine:"			123",
			toLine:"			125",
			content:"
			        String topic = "EqualsTest";
			        FlatMessageFile flatFile1 = new FlatMessageFile(flatFileFactory, topic, 0);
			        FlatMessageFile flatFile2 = new FlatMessageFile(flatFileFactory, topic, 0);			
",
,
			fromLine:"			143",
			toLine:"			144",
			content:"
			        // replace provider, need new factory again
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());			
",
,
			fromLine:"			148",
			toLine:"			148",
			content:"
			        MessageQueue mq = new MessageQueue("TopicTest", "BrokerName", 1);			
",
,
			fromLine:"			177",
			toLine:"			177",
			content:"
			        // append message to consume queue			
",
,

		],
		store/src/test/java/org/apache/rocketmq/store/StoreTestBase.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageDecoder;
			import org.apache.rocketmq.common.message.MessageExtBatch;
			import org.apache.rocketmq.common.message.MessageExtBrokerInner;
			import org.junit.After;
			
			import java.io.File;
			import java.net.InetAddress;
			import java.net.InetSocketAddress;
			import java.net.SocketAddress;
			import java.net.UnknownHostException;
			import java.util.ArrayList;
			import java.util.HashSet;
			import java.util.List;
			import java.util.Set;
			import java.util.UUID;
			import java.util.concurrent.atomic.AtomicInteger;
						
",
,
			fromLine:"			40",
			toLine:"			43",
			content:"
			    private static final int QUEUE_TOTAL = 100;
			    private AtomicInteger queueId = new AtomicInteger(0);
			    protected SocketAddress bornHost = new InetSocketAddress("127.0.0.1", 8123);
			    protected SocketAddress storeHost = bornHost;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        messageExtBatch.setKeys("Hello");			
",
,
			fromLine:"			62",
			toLine:"			63",
			content:"
			        messageExtBatch.setBornTimestamp(System.currentTimeMillis());
			        messageExtBatch.setBornHost(bornHost);			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			        msg.setBornTimestamp(System.currentTimeMillis());
			        msg.setStoreHost(storeHost);			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			        messageExtBatch.setKeys("Hello");			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        messageExtBatch.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        msg.setKeys("Hello");			
",
,
			fromLine:"			132",
			toLine:"			132",
			content:"
			        msg.setKeys(String.valueOf(System.currentTimeMillis()));			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			    public void clear() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/QueryMessageResult.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
						
",
,
			fromLine:"			24",
			toLine:"			24",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			31",
			toLine:"			31",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			    public void addMessage(final SelectMappedBufferResult mapedBuffer) {
			        this.messageMapedList.add(mapedBuffer);
			        this.messageBufferList.add(mapedBuffer.getByteBuffer());			
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			    public void release() {			
",
,
			fromLine:"			62",
			toLine:"			62",
			content:"
			    public List<ByteBuffer> getMessageBufferList() {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public int getBufferTotalSize() {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public List<SelectMappedBufferResult> getMessageMapedList() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/SelectMappedBufferResult.java:
		[
			fromLine:"			16",
			toLine:"			21",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.nio.ByteBuffer;
			import org.apache.rocketmq.store.logfile.MappedFile;
						
",
,
			fromLine:"			23",
			toLine:"			23",
			content:"
						
",
,
			fromLine:"			25",
			toLine:"			25",
			content:"
						
",
,
			fromLine:"			27",
			toLine:"			27",
			content:"
						
",
,
			fromLine:"			34",
			toLine:"			36",
			content:"
			    public SelectMappedBufferResult(long startOffset, ByteBuffer byteBuffer, int size, MappedFile mappedFile) {
			        this.startOffset = startOffset;
			        this.byteBuffer = byteBuffer;			
",
,
			fromLine:"			41",
			toLine:"			41",
			content:"
			    public ByteBuffer getByteBuffer() {			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    public int getSize() {			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    public void setSize(final int s) {
			        this.size = s;			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			75",
			toLine:"			76",
			content:"
			        }
			        long pos = startOffset - mappedFile.getFileFromOffset();			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/common/SelectBufferResult.java:
		[
			fromLine:"			17",
			toLine:"			22",
			content:"
			
			package org.apache.rocketmq.tieredstore.common;
			
			import java.nio.ByteBuffer;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			24",
			toLine:"			26",
			content:"
			
			    private final ByteBuffer byteBuffer;
			    private final long startOffset;			
",
,
			fromLine:"			31",
			toLine:"			33",
			content:"
			    public SelectBufferResult(ByteBuffer byteBuffer, long startOffset, int size, long tagCode) {
			        this.startOffset = startOffset;
			        this.byteBuffer = byteBuffer;			
",
,
			fromLine:"			39",
			toLine:"			39",
			content:"
			    public ByteBuffer getByteBuffer() {			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			    public long getStartOffset() {			
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			    public int getSize() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/StoreCheckpoint.java:
		[
			fromLine:"			16",
			toLine:"			30",
			content:"
			 */
			package org.apache.rocketmq.store;
			
			import java.io.File;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.FileChannel.MapMode;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
						
",
,
			fromLine:"			32",
			toLine:"			34",
			content:"
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private final RandomAccessFile randomAccessFile;
			    private final FileChannel fileChannel;			
",
,
			fromLine:"			46",
			toLine:"			48",
			content:"
			
			        this.randomAccessFile = new RandomAccessFile(file, "rw");
			        this.fileChannel = this.randomAccessFile.getChannel();			
",
,
			fromLine:"			52",
			toLine:"			56",
			content:"
			            log.info("store checkpoint file exists, " + scpPath);
			            this.physicMsgTimestamp = this.mappedByteBuffer.getLong(0);
			            this.logicsMsgTimestamp = this.mappedByteBuffer.getLong(8);
			            this.indexMsgTimestamp = this.mappedByteBuffer.getLong(16);
			            this.masterFlushedOffset = this.mappedByteBuffer.getLong(24);			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        // unmap mappedByteBuffer			
",
,
			fromLine:"			78",
			toLine:"			78",
			content:"
			        try {			
",
,
			fromLine:"			85",
			toLine:"			90",
			content:"
			    public void flush() {
			        this.mappedByteBuffer.putLong(0, this.physicMsgTimestamp);
			        this.mappedByteBuffer.putLong(8, this.logicsMsgTimestamp);
			        this.mappedByteBuffer.putLong(16, this.indexMsgTimestamp);
			        this.mappedByteBuffer.putLong(24, this.masterFlushedOffset);
			        this.mappedByteBuffer.putLong(32, this.confirmPhyOffset);			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/timer/TimerCheckpoint.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.store.timer;
			
			import java.io.File;
			import java.io.IOException;
			import java.io.RandomAccessFile;
			import java.nio.ByteBuffer;
			import java.nio.MappedByteBuffer;
			import java.nio.channels.FileChannel;
			import java.nio.channels.FileChannel.MapMode;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.UtilAll;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.protocol.DataVersion;
			import org.apache.rocketmq.store.logfile.DefaultMappedFile;
			
			public class TimerCheckpoint {
			    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private final RandomAccessFile randomAccessFile;
			    private final FileChannel fileChannel;			
",
,
			fromLine:"			45",
			toLine:"			47",
			content:"
			    public TimerCheckpoint() {
			        this.randomAccessFile = null;
			        this.fileChannel = null;			
",
,
			fromLine:"			55",
			toLine:"			57",
			content:"
			
			        this.randomAccessFile = new RandomAccessFile(file, "rw");
			        this.fileChannel = this.randomAccessFile.getChannel();			
",
,
			fromLine:"			60",
			toLine:"			64",
			content:"
			        if (fileExists) {
			            log.info("timer checkpoint file exists, " + scpPath);
			            this.lastReadTimeMs = this.mappedByteBuffer.getLong(0);
			            this.lastTimerLogFlushPos = this.mappedByteBuffer.getLong(8);
			            this.lastTimerQueueOffset = this.mappedByteBuffer.getLong(16);			
",
,
			fromLine:"			66",
			toLine:"			69",
			content:"
			            // new add to record dataVersion
			            if (this.mappedByteBuffer.hasRemaining()) {
			                dataVersion.setStateVersion(this.mappedByteBuffer.getLong(32));
			                dataVersion.setTimestamp(this.mappedByteBuffer.getLong(40));			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
						
",
,
			fromLine:"			74",
			toLine:"			79",
			content:"
			                + UtilAll.timeMillisToHumanString(this.lastReadTimeMs));
			            log.info("timer checkpoint file lastTimerLogFlushPos " + this.lastTimerLogFlushPos);
			            log.info("timer checkpoint file lastTimerQueueOffset " + this.lastTimerQueueOffset);
			            log.info("timer checkpoint file masterTimerQueueOffset " + this.masterTimerQueueOffset);
			            log.info("timer checkpoint file data version state version " + this.dataVersion.getStateVersion());
			            log.info("timer checkpoint file data version timestamp " + this.dataVersion.getTimestamp());			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        } else {			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			        // unmap mappedByteBuffer			
",
,
			fromLine:"			96",
			toLine:"			96",
			content:"
			        try {			
",
,
			fromLine:"			98",
			toLine:"			98",
			content:"
			        } catch (IOException e) {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
			    public void flush() {			
",
,
			fromLine:"			106",
			toLine:"			109",
			content:"
			        }
			        this.mappedByteBuffer.putLong(0, this.lastReadTimeMs);
			        this.mappedByteBuffer.putLong(8, this.lastTimerLogFlushPos);
			        this.mappedByteBuffer.putLong(16, this.lastTimerQueueOffset);			
",
,
			fromLine:"			111",
			toLine:"			114",
			content:"
			        // new add to record dataVersion
			        this.mappedByteBuffer.putLong(32, this.dataVersion.getStateVersion());
			        this.mappedByteBuffer.putLong(40, this.dataVersion.getTimestamp());
			        this.mappedByteBuffer.putLong(48, this.dataVersion.getCounter().get());			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/DefaultHAConnection.java:
		[
			fromLine:"			17",
			toLine:"			32",
			content:"
			
			package org.apache.rocketmq.store.ha;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.channels.SelectionKey;
			import java.nio.channels.Selector;
			import java.nio.channels.SocketChannel;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.netty.NettySystemConfig;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
						
",
,
			fromLine:"			47",
			toLine:"			47",
			content:"
			     */			
",
,
			fromLine:"			49",
			toLine:"			49",
			content:"
						
",
,
			fromLine:"			51",
			toLine:"			52",
			content:"
			    private final DefaultHAService haService;
			    private final SocketChannel socketChannel;			
",
,
			fromLine:"			55",
			toLine:"			58",
			content:"
			    private ReadSocketService readSocketService;
			    private volatile HAConnectionState currentState = HAConnectionState.TRANSFER;
			    private volatile long slaveRequestOffset = -1;
			    private volatile long slaveAckOffset = -1;			
",
,
			fromLine:"			62",
			toLine:"			66",
			content:"
			        this.haService = haService;
			        this.socketChannel = socketChannel;
			        this.clientAddress = this.socketChannel.socket().getRemoteSocketAddress().toString();
			        this.socketChannel.configureBlocking(false);
			        this.socketChannel.socket().setSoLinger(false, -1);			
",
,
			fromLine:"			68",
			toLine:"			68",
			content:"
			        if (NettySystemConfig.socketSndbufSize > 0) {			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			        if (NettySystemConfig.socketRcvbufSize > 0) {			
",
,
			fromLine:"			73",
			toLine:"			74",
			content:"
			        }
			        this.writeSocketService = new WriteSocketService(this.socketChannel);			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        this.haService.getConnectionCount().incrementAndGet();			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        changeCurrentState(HAConnectionState.TRANSFER);			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        this.readSocketService.shutdown(true);			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
			    public void close() {			
",
,
			fromLine:"			97",
			toLine:"			97",
			content:"
			            try {			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			    public SocketChannel getSocketChannel() {			
",
,
			fromLine:"			109",
			toLine:"			110",
			content:"
			    public void changeCurrentState(HAConnectionState currentState) {
			        log.info("change state to {}", currentState);			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public HAConnectionState getCurrentState() {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public String getClientAddress() {			
",
,
			fromLine:"			125",
			toLine:"			125",
			content:"
			    public long getSlaveAckOffset() {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			    public long getTransferredByteInSecond() {			
",
,
			fromLine:"			137",
			toLine:"			142",
			content:"
			    class ReadSocketService extends ServiceThread {
			        private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024;
			        private final Selector selector;
			        private final SocketChannel socketChannel;
			        private final ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);
			        private int processPosition = 0;			
",
,
			fromLine:"			145",
			toLine:"			147",
			content:"
			        public ReadSocketService(final SocketChannel socketChannel) throws IOException {
			            this.selector = NetworkUtil.openSelector();
			            this.socketChannel = socketChannel;			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			        public void run() {			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
			                try {			
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			                    if (!ok) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
						
",
,
			fromLine:"			166",
			toLine:"			166",
			content:"
			                    if (interval > DefaultHAConnection.this.haService.getDefaultMessageStore().getMessageStoreConfig().getHaHousekeepingInterval()) {			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			185",
			toLine:"			185",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			192",
			content:"
			            try {
			                this.selector.close();			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			197",
			toLine:"			197",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			199",
			content:"
						
",
,
			fromLine:"			213",
			toLine:"			215",
			content:"
			
			            if (!this.byteBufferRead.hasRemaining()) {
			                this.byteBufferRead.flip();			
",
,
			fromLine:"			218",
			toLine:"			218",
			content:"
						
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			                try {			
",
,
			fromLine:"			223",
			toLine:"			227",
			content:"
			                        readSizeZeroTimes = 0;
			                        this.lastReadTimestamp = DefaultHAConnection.this.haService.getDefaultMessageStore().getSystemClock().now();
			                        if ((this.byteBufferRead.position() - this.processPosition) >= DefaultHAClient.REPORT_HEADER_SIZE) {
			                            int pos = this.byteBufferRead.position() - (this.byteBufferRead.position() % DefaultHAClient.REPORT_HEADER_SIZE);
			                            long readOffset = this.byteBufferRead.getLong(pos - 8);			
",
,
			fromLine:"			229",
			toLine:"			232",
			content:"
			
			                            DefaultHAConnection.this.slaveAckOffset = readOffset;
			                            if (DefaultHAConnection.this.slaveRequestOffset < 0) {
			                                DefaultHAConnection.this.slaveRequestOffset = readOffset;			
",
,
			fromLine:"			235",
			toLine:"			235",
			content:"
						
",
,
			fromLine:"			242",
			toLine:"			242",
			content:"
			                    } else {			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			                } catch (IOException e) {			
",
,
			fromLine:"			256",
			toLine:"			257",
			content:"
			    class WriteSocketService extends ServiceThread {
			        private final Selector selector;			
",
,
			fromLine:"			259",
			toLine:"			260",
			content:"
			
			        private final ByteBuffer byteBufferHeader = ByteBuffer.allocate(TRANSFER_HEADER_SIZE);			
",
,
			fromLine:"			262",
			toLine:"			264",
			content:"
			        private SelectMappedBufferResult selectMappedBufferResult;
			        private boolean lastWriteOver = true;
			        private long lastPrintTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			267",
			toLine:"			269",
			content:"
			        public WriteSocketService(final SocketChannel socketChannel) throws IOException {
			            this.selector = NetworkUtil.openSelector();
			            this.socketChannel = socketChannel;			
",
,
			fromLine:"			275",
			toLine:"			275",
			content:"
			        public void run() {			
",
,
			fromLine:"			279",
			toLine:"			279",
			content:"
			                try {			
",
,
			fromLine:"			281",
			toLine:"			281",
			content:"
						
",
,
			fromLine:"			286",
			toLine:"			287",
			content:"
			
			                    if (-1 == this.nextTransferFromWhere) {			
",
,
			fromLine:"			298",
			toLine:"			298",
			content:"
						
",
,
			fromLine:"			300",
			toLine:"			300",
			content:"
			                        } else {			
",
,
			fromLine:"			303",
			toLine:"			304",
			content:"
			
			                        log.info("master transfer data from " + this.nextTransferFromWhere + " to slave[" + DefaultHAConnection.this.clientAddress			
",
,
			fromLine:"			307",
			toLine:"			307",
			content:"
						
",
,
			fromLine:"			310",
			toLine:"			310",
			content:"
			                        long interval =			
",
,
			fromLine:"			316",
			toLine:"			320",
			content:"
			                            // Build Header
			                            this.byteBufferHeader.position(0);
			                            this.byteBufferHeader.limit(TRANSFER_HEADER_SIZE);
			                            this.byteBufferHeader.putLong(this.nextTransferFromWhere);
			                            this.byteBufferHeader.putInt(0);			
",
,
			fromLine:"			322",
			toLine:"			323",
			content:"
			
			                            this.lastWriteOver = this.transferData();			
",
,
			fromLine:"			327",
			toLine:"			328",
			content:"
			                    } else {
			                        this.lastWriteOver = this.transferData();			
",
,
			fromLine:"			333",
			toLine:"			333",
			content:"
			                    SelectMappedBufferResult selectResult =			
",
,
			fromLine:"			340",
			toLine:"			340",
			content:"
						
",
,
			fromLine:"			342",
			toLine:"			346",
			content:"
			                        if (size > canTransferMaxBytes) {
			                            if (System.currentTimeMillis() - lastPrintTimestamp > 1000) {
			                                log.warn("Trigger HA flow control, max transfer speed {}KB/s, current speed: {}KB/s",
			                                    String.format("%.2f", flowMonitor.maxTransferByteInSecond() / 1024.0),
			                                    String.format("%.2f", flowMonitor.getTransferredByteInSecond() / 1024.0));			
",
,
			fromLine:"			351",
			toLine:"			352",
			content:"
			
			                        long thisOffset = this.nextTransferFromWhere;			
",
,
			fromLine:"			358",
			toLine:"			362",
			content:"
			                        // Build Header
			                        this.byteBufferHeader.position(0);
			                        this.byteBufferHeader.limit(TRANSFER_HEADER_SIZE);
			                        this.byteBufferHeader.putLong(thisOffset);
			                        this.byteBufferHeader.putInt(size);			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
						
",
,
			fromLine:"			371",
			toLine:"			371",
			content:"
						
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
						
",
,
			fromLine:"			396",
			toLine:"			397",
			content:"
			            try {
			                this.selector.close();			
",
,
			fromLine:"			399",
			toLine:"			399",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			402",
			toLine:"			402",
			content:"
						
",
,
			fromLine:"			404",
			toLine:"			404",
			content:"
						
",
,
			fromLine:"			410",
			toLine:"			411",
			content:"
			            // Write Header
			            while (this.byteBufferHeader.hasRemaining()) {			
",
,
			fromLine:"			413",
			toLine:"			413",
			content:"
			                if (writeSize > 0) {			
",
,
			fromLine:"			415",
			toLine:"			415",
			content:"
			                    writeSizeZeroTimes = 0;			
",
,
			fromLine:"			426",
			toLine:"			426",
			content:"
			            if (null == this.selectMappedBufferResult) {			
",
,
			fromLine:"			432",
			toLine:"			432",
			content:"
			            // Write Body			
",
,
			fromLine:"			434",
			toLine:"			434",
			content:"
			                while (this.selectMappedBufferResult.getByteBuffer().hasRemaining()) {			
",
,
			fromLine:"			437",
			toLine:"			437",
			content:"
			                        writeSizeZeroTimes = 0;			
",
,
			fromLine:"			448",
			toLine:"			448",
			content:"
						
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
			        public long getNextTransferFromWhere() {			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHAConnection.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.store.ha.autoswitch;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.nio.channels.SelectionKey;
			import java.nio.channels.Selector;
			import java.nio.channels.SocketChannel;
			import java.util.List;
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.utils.NetworkUtil;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.remoting.netty.NettySystemConfig;
			import org.apache.rocketmq.remoting.protocol.EpochEntry;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.store.config.MessageStoreConfig;
			import org.apache.rocketmq.store.ha.FlowMonitor;
			import org.apache.rocketmq.store.ha.HAConnection;
			import org.apache.rocketmq.store.ha.HAConnectionState;
			import org.apache.rocketmq.store.ha.io.AbstractHAReader;
			import org.apache.rocketmq.store.ha.io.HAWriter;
						
",
,
			fromLine:"			55",
			toLine:"			55",
			content:"
			     */			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			     */			
",
,
			fromLine:"			72",
			toLine:"			76",
			content:"
			    public static final int EPOCH_ENTRY_SIZE = 12;
			    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);
			    private final AutoSwitchHAService haService;
			    private final SocketChannel socketChannel;
			    private final String clientAddress;			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    private final ReadSocketService readSocketService;			
",
,
			fromLine:"			81",
			toLine:"			83",
			content:"
			
			    private volatile HAConnectionState currentState = HAConnectionState.HANDSHAKE;
			    private volatile long slaveRequestOffset = -1;			
",
,
			fromLine:"			105",
			toLine:"			111",
			content:"
			        EpochFileCache epochCache) throws IOException {
			        this.haService = haService;
			        this.socketChannel = socketChannel;
			        this.epochCache = epochCache;
			        this.clientAddress = this.socketChannel.socket().getRemoteSocketAddress().toString();
			        this.socketChannel.configureBlocking(false);
			        this.socketChannel.socket().setSoLinger(false, -1);			
",
,
			fromLine:"			113",
			toLine:"			113",
			content:"
			        if (NettySystemConfig.socketSndbufSize > 0) {			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			        if (NettySystemConfig.socketRcvbufSize > 0) {			
",
,
			fromLine:"			118",
			toLine:"			121",
			content:"
			        }
			        this.writeSocketService = new WriteSocketService(this.socketChannel);
			        this.readSocketService = new ReadSocketService(this.socketChannel);
			        this.haService.getConnectionCount().incrementAndGet();			
",
,
			fromLine:"			127",
			toLine:"			127",
			content:"
			        changeCurrentState(HAConnectionState.HANDSHAKE);			
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        changeCurrentState(HAConnectionState.SHUTDOWN);			
",
,
			fromLine:"			143",
			toLine:"			143",
			content:"
			    public void close() {			
",
,
			fromLine:"			145",
			toLine:"			145",
			content:"
			            try {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            } catch (final IOException e) {			
",
,
			fromLine:"			153",
			toLine:"			154",
			content:"
			    public void changeCurrentState(HAConnectionState connectionState) {
			        LOGGER.info("change state to {}", connectionState);			
",
,
			fromLine:"			163",
			toLine:"			163",
			content:"
			    public HAConnectionState getCurrentState() {			
",
,
			fromLine:"			168",
			toLine:"			168",
			content:"
			    public SocketChannel getSocketChannel() {			
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			    public String getClientAddress() {			
",
,
			fromLine:"			178",
			toLine:"			178",
			content:"
			    public long getSlaveAckOffset() {			
",
,
			fromLine:"			183",
			toLine:"			183",
			content:"
			    public long getTransferredByteInSecond() {			
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			        this.currentTransferEpochEndOffset = entry.getEndOffset();			
",
,
			fromLine:"			209",
			toLine:"			209",
			content:"
			    private synchronized void updateLastTransferInfo() {			
",
,
			fromLine:"			215",
			toLine:"			217",
			content:"
			        if (!this.isAsyncLearner && slaveMaxOffset >= this.lastMasterMaxOffset) {
			            long caughtUpTimeMs = this.haService.getDefaultMessageStore().getMaxPhyOffset() == slaveMaxOffset ? System.currentTimeMillis() : this.lastTransferTimeMs;
			            this.haService.updateConnectionLastCaughtUpTime(this.slaveId, caughtUpTimeMs);			
",
,
			fromLine:"			222",
			toLine:"			228",
			content:"
			    class ReadSocketService extends ServiceThread {
			        private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024;
			        private final Selector selector;
			        private final SocketChannel socketChannel;
			        private final ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);
			        private final AbstractHAReader haReader;
			        private int processPosition = 0;			
",
,
			fromLine:"			231",
			toLine:"			233",
			content:"
			        public ReadSocketService(final SocketChannel socketChannel) throws IOException {
			            this.selector = NetworkUtil.openSelector();
			            this.socketChannel = socketChannel;			
",
,
			fromLine:"			235",
			toLine:"			236",
			content:"
			            this.setDaemon(true);
			            haReader = new HAServerReader();			
",
,
			fromLine:"			238",
			toLine:"			239",
			content:"
			                if (readSize > 0) {
			                    ReadSocketService.this.lastReadTimestamp =			
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
			        public void run() {			
",
,
			fromLine:"			250",
			toLine:"			251",
			content:"
			                try {
			                    this.selector.select(1000);			
",
,
			fromLine:"			253",
			toLine:"			253",
			content:"
			                    if (!ok) {			
",
,
			fromLine:"			257",
			toLine:"			259",
			content:"
			
			                    long interval = haService.getDefaultMessageStore().getSystemClock().now() - this.lastReadTimestamp;
			                    if (interval > haService.getDefaultMessageStore().getMessageStoreConfig().getHaHousekeepingInterval()) {			
",
,
			fromLine:"			263",
			toLine:"			263",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			274",
			toLine:"			274",
			content:"
						
",
,
			fromLine:"			276",
			toLine:"			276",
			content:"
						
",
,
			fromLine:"			278",
			toLine:"			278",
			content:"
						
",
,
			fromLine:"			284",
			toLine:"			285",
			content:"
			            try {
			                this.selector.close();			
",
,
			fromLine:"			287",
			toLine:"			287",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
						
",
,
			fromLine:"			292",
			toLine:"			292",
			content:"
						
",
,
			fromLine:"			297",
			toLine:"			298",
			content:"
			        public String getServiceName() {
			            if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			309",
			toLine:"			309",
			content:"
			                    int readSocketPos = byteBufferRead.position();			
",
,
			fromLine:"			311",
			toLine:"			311",
			content:"
			                    if (diff >= AutoSwitchHAClient.MIN_HEADER_SIZE) {			
",
,
			fromLine:"			317",
			toLine:"			317",
			content:"
			                                // SlaveBrokerId			
",
,
			fromLine:"			320",
			toLine:"			320",
			content:"
			                                // Flag(isSyncFromLastFile)			
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
			                                // Flag(isAsyncLearner role)			
",
,
			fromLine:"			332",
			toLine:"			333",
			content:"
			                                byteBufferRead.position(readSocketPos);
			                                ReadSocketService.this.processPosition += AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE;			
",
,
			fromLine:"			338",
			toLine:"			338",
			content:"
			                                long slaveMaxOffset = byteBufferRead.getLong(readPosition + 4);			
",
,
			fromLine:"			340",
			toLine:"			342",
			content:"
			
			                                AutoSwitchHAConnection.this.slaveAckOffset = slaveMaxOffset;
			                                if (slaveRequestOffset < 0) {			
",
,
			fromLine:"			346",
			toLine:"			347",
			content:"
			                                maybeExpandInSyncStateSet(slaveMaxOffset);
			                                AutoSwitchHAConnection.this.haService.updateConfirmOffsetWhenSlaveAck(AutoSwitchHAConnection.this.slaveId);			
",
,
			fromLine:"			350",
			toLine:"			350",
			content:"
			                            default:			
",
,
			fromLine:"			354",
			toLine:"			355",
			content:"
			
			                        if (!slaveState.equals(currentState)) {			
",
,
			fromLine:"			364",
			toLine:"			364",
			content:"
			                    if (!byteBufferRead.hasRemaining()) {			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			                        byteBufferRead.compact();			
",
,
			fromLine:"			385",
			toLine:"			385",
			content:"
			        protected int getNextTransferDataSize() {			
",
,
			fromLine:"			407",
			toLine:"			407",
			content:"
			            // Write Header			
",
,
			fromLine:"			418",
			toLine:"			418",
			content:"
			            // Write Body			
",
,
			fromLine:"			435",
			toLine:"			436",
			content:"
			        public String getServiceName() {
			            if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {			
",
,
			fromLine:"			443",
			toLine:"			445",
			content:"
			    abstract class AbstractWriteSocketService extends ServiceThread {
			        protected final Selector selector;
			        protected final SocketChannel socketChannel;			
",
,
			fromLine:"			447",
			toLine:"			447",
			content:"
						
",
,
			fromLine:"			450",
			toLine:"			453",
			content:"
			        private final ByteBuffer handShakeBuffer = ByteBuffer.allocate(EPOCH_ENTRY_SIZE * 1000);
			        protected long nextTransferFromWhere = -1;
			        protected boolean lastWriteOver = true;
			        protected long lastWriteTimestamp = System.currentTimeMillis();			
",
,
			fromLine:"			457",
			toLine:"			459",
			content:"
			        public AbstractWriteSocketService(final SocketChannel socketChannel) throws IOException {
			            this.selector = NetworkUtil.openSelector();
			            this.socketChannel = socketChannel;			
",
,
			fromLine:"			461",
			toLine:"			463",
			content:"
			            this.setDaemon(true);
			            haWriter = new HAWriter();
			            haWriter.registerHook(writeSize -> {			
",
,
			fromLine:"			465",
			toLine:"			466",
			content:"
			                if (writeSize > 0) {
			                    AbstractWriteSocketService.this.lastWriteTimestamp =			
",
,
			fromLine:"			472",
			toLine:"			472",
			content:"
			        public long getNextTransferFromWhere() {			
",
,
			fromLine:"			476",
			toLine:"			480",
			content:"
			        private boolean buildHandshakeBuffer() {
			            final List<EpochEntry> epochEntries = AutoSwitchHAConnection.this.epochCache.getAllEntries();
			            final int lastEpoch = AutoSwitchHAConnection.this.epochCache.lastEpoch();
			            final long maxPhyOffset = AutoSwitchHAConnection.this.haService.getDefaultMessageStore().getMaxPhyOffset();
			            this.byteBufferHeader.position(0);			
",
,
			fromLine:"			482",
			toLine:"			482",
			content:"
			            // State			
",
,
			fromLine:"			484",
			toLine:"			484",
			content:"
			            // Body size			
",
,
			fromLine:"			486",
			toLine:"			486",
			content:"
			            // Offset			
",
,
			fromLine:"			488",
			toLine:"			489",
			content:"
			            // Epoch
			            this.byteBufferHeader.putInt(lastEpoch);			
",
,
			fromLine:"			501",
			toLine:"			501",
			content:"
			            this.handShakeBuffer.flip();			
",
,
			fromLine:"			507",
			toLine:"			507",
			content:"
			            // Write Header			
",
,
			fromLine:"			514",
			toLine:"			514",
			content:"
			            // Write Body			
",
,
			fromLine:"			520",
			toLine:"			520",
			content:"
						
",
,
			fromLine:"			526",
			toLine:"			526",
			content:"
			                if (nextOffset != -1 || currentTransferEpoch != -1 || bodySize > 0) {			
",
,
			fromLine:"			533",
			toLine:"			533",
			content:"
			                // Maybe it's used for heartbeat			
",
,
			fromLine:"			536",
			toLine:"			537",
			content:"
			            // Build Header
			            this.byteBufferHeader.position(0);			
",
,
			fromLine:"			539",
			toLine:"			539",
			content:"
			            // State			
",
,
			fromLine:"			541",
			toLine:"			541",
			content:"
			            // Body size			
",
,
			fromLine:"			543",
			toLine:"			543",
			content:"
			            // Offset			
",
,
			fromLine:"			545",
			toLine:"			545",
			content:"
			            // Epoch			
",
,
			fromLine:"			547",
			toLine:"			547",
			content:"
			            // EpochStartOffset			
",
,
			fromLine:"			549",
			toLine:"			551",
			content:"
			            // Additional info(confirm offset)
			            final long confirmOffset = AutoSwitchHAConnection.this.haService.getDefaultMessageStore().getConfirmOffset();
			            this.byteBufferHeader.putLong(confirmOffset);			
",
,
			fromLine:"			555",
			toLine:"			557",
			content:"
			        private boolean sendHeartbeatIfNeeded() throws Exception {
			            long interval = haService.getDefaultMessageStore().getSystemClock().now() - this.lastWriteTimestamp;
			            if (interval > haService.getDefaultMessageStore().getMessageStoreConfig().getHaSendHeartbeatInterval()) {			
",
,
			fromLine:"			564",
			toLine:"			565",
			content:"
			        private void transferToSlave() throws Exception {
			            if (this.lastWriteOver) {			
",
,
			fromLine:"			568",
			toLine:"			568",
			content:"
			                // maxTransferSize == -1 means to continue transfer remaining data.			
",
,
			fromLine:"			570",
			toLine:"			570",
			content:"
			            }			
",
,
			fromLine:"			576",
			toLine:"			577",
			content:"
			            if (size > 0) {
			                if (size > haService.getDefaultMessageStore().getMessageStoreConfig().getHaTransferBatchSize()) {			
",
,
			fromLine:"			579",
			toLine:"			579",
			content:"
			                }			
",
,
			fromLine:"			581",
			toLine:"			585",
			content:"
			                if (size > canTransferMaxBytes) {
			                    if (System.currentTimeMillis() - lastPrintTimestamp > 1000) {
			                        LOGGER.warn("Trigger HA flow control, max transfer speed {}KB/s, current speed: {}KB/s",
			                            String.format("%.2f", flowMonitor.maxTransferByteInSecond() / 1024.0),
			                            String.format("%.2f", flowMonitor.getTransferredByteInSecond() / 1024.0));			
",
,
			fromLine:"			598",
			toLine:"			599",
			content:"
			                final long currentEpochEndOffset = AutoSwitchHAConnection.this.currentTransferEpochEndOffset;
			                if (currentEpochEndOffset != -1 && this.nextTransferFromWhere + size > currentEpochEndOffset) {			
",
,
			fromLine:"			601",
			toLine:"			601",
			content:"
			                    if (epochEntry == null) {			
",
,
			fromLine:"			605",
			toLine:"			605",
			content:"
			                    }			
",
,
			fromLine:"			609",
			toLine:"			610",
			content:"
			
			                this.transferOffset = this.nextTransferFromWhere;			
",
,
			fromLine:"			616",
			toLine:"			616",
			content:"
						
",
,
			fromLine:"			619",
			toLine:"			620",
			content:"
			                // If size == 0, we should update the lastCatchupTimeMs
			                AutoSwitchHAConnection.this.haService.updateConnectionLastCaughtUpTime(AutoSwitchHAConnection.this.slaveId, System.currentTimeMillis());			
",
,
			fromLine:"			626",
			toLine:"			626",
			content:"
			        public void run() {			
",
,
			fromLine:"			630",
			toLine:"			630",
			content:"
			                try {			
",
,
			fromLine:"			632",
			toLine:"			632",
			content:"
						
",
,
			fromLine:"			640",
			toLine:"			640",
			content:"
						
",
,
			fromLine:"			642",
			toLine:"			642",
			content:"
			                                if (!buildHandshakeBuffer()) {			
",
,
			fromLine:"			648",
			toLine:"			649",
			content:"
			
			                            this.lastWriteOver = handshakeWithSlave();			
",
,
			fromLine:"			655",
			toLine:"			655",
			content:"
			                        case TRANSFER:			
",
,
			fromLine:"			660",
			toLine:"			661",
			content:"
			
			                            if (-1 == this.nextTransferFromWhere) {			
",
,
			fromLine:"			664",
			toLine:"			664",
			content:"
			                                    // must be the startOffset of a file (maybe the last file, or the minOffset)			
",
,
			fromLine:"			666",
			toLine:"			666",
			content:"
			                                    if (AutoSwitchHAConnection.this.isSyncFromLastFile) {			
",
,
			fromLine:"			671",
			toLine:"			671",
			content:"
			                                        }			
",
,
			fromLine:"			673",
			toLine:"			673",
			content:"
			                                    } else {			
",
,
			fromLine:"			676",
			toLine:"			676",
			content:"
			                                } else {			
",
,
			fromLine:"			680",
			toLine:"			680",
			content:"
			                                // nextTransferFromWhere is not found. It may be empty disk and no message is entered			
",
,
			fromLine:"			686",
			toLine:"			686",
			content:"
			                                // Setup initial transferEpoch			
",
,
			fromLine:"			688",
			toLine:"			688",
			content:"
			                                if (epochEntry == null) {			
",
,
			fromLine:"			694",
			toLine:"			695",
			content:"
			                                changeTransferEpochToNext(epochEntry);
			                                LOGGER.info("Master transfer data to slave {}, from offset:{}, currentEpoch:{}",			
",
,
			fromLine:"			700",
			toLine:"			700",
			content:"
			                        default:			
",
,
			fromLine:"			703",
			toLine:"			703",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			716",
			toLine:"			716",
			content:"
						
",
,
			fromLine:"			718",
			toLine:"			718",
			content:"
						
",
,
			fromLine:"			724",
			toLine:"			725",
			content:"
			            try {
			                this.selector.close();			
",
,
			fromLine:"			727",
			toLine:"			727",
			content:"
			            } catch (IOException e) {			
",
,
			fromLine:"			730",
			toLine:"			730",
			content:"
						
",
,
			fromLine:"			732",
			toLine:"			732",
			content:"
						
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/index/IndexHeader.java:
		[
			fromLine:"			16",
			toLine:"			22",
			content:"
			 */
			package org.apache.rocketmq.store.index;
			
			import java.nio.ByteBuffer;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			36",
			toLine:"			36",
			content:"
			public class IndexHeader {			
",
,
			fromLine:"			43",
			toLine:"			45",
			content:"
			    private static int indexCountIndex = 36;
			    private final ByteBuffer byteBuffer;
			    private final AtomicLong beginTimestamp = new AtomicLong(0);			
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
			    private final AtomicLong endPhyOffset = new AtomicLong(0);			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			    public IndexHeader(final ByteBuffer byteBuffer) {			
",
,
			fromLine:"			56",
			toLine:"			59",
			content:"
			    public void load() {
			        this.beginTimestamp.set(byteBuffer.getLong(beginTimestampIndex));
			        this.endTimestamp.set(byteBuffer.getLong(endTimestampIndex));
			        this.beginPhyOffset.set(byteBuffer.getLong(beginPhyoffsetIndex));			
",
,
			fromLine:"			61",
			toLine:"			62",
			content:"
			
			        this.hashSlotCount.set(byteBuffer.getInt(hashSlotcountIndex));			
",
,
			fromLine:"			70",
			toLine:"			75",
			content:"
			    public void updateByteBuffer() {
			        this.byteBuffer.putLong(beginTimestampIndex, this.beginTimestamp.get());
			        this.byteBuffer.putLong(endTimestampIndex, this.endTimestamp.get());
			        this.byteBuffer.putLong(beginPhyoffsetIndex, this.beginPhyOffset.get());
			        this.byteBuffer.putLong(endPhyoffsetIndex, this.endPhyOffset.get());
			        this.byteBuffer.putInt(hashSlotcountIndex, this.hashSlotCount.get());			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public long getBeginTimestamp() {			
",
,
			fromLine:"			83",
			toLine:"			84",
			content:"
			    public void setBeginTimestamp(long beginTimestamp) {
			        this.beginTimestamp.set(beginTimestamp);			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    public long getEndTimestamp() {			
",
,
			fromLine:"			92",
			toLine:"			93",
			content:"
			    public void setEndTimestamp(long endTimestamp) {
			        this.endTimestamp.set(endTimestamp);			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			        this.beginPhyOffset.set(beginPhyOffset);			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
			        this.endPhyOffset.set(endPhyOffset);			
",
,
			fromLine:"			115",
			toLine:"			115",
			content:"
			    public AtomicInteger getHashSlotCount() {			
",
,
			fromLine:"			119",
			toLine:"			120",
			content:"
			    public void incHashSlotCount() {
			        int value = this.hashSlotCount.incrementAndGet();			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        int value = this.indexCount.incrementAndGet();			
",
,

		],
		store/src/main/java/org/apache/rocketmq/store/util/PerfCounter.java:
		[
			fromLine:"			16",
			toLine:"			28",
			content:"
			 */
			package org.apache.rocketmq.store.util;
			
			import org.apache.rocketmq.common.ServiceThread;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			
			import java.sql.Timestamp;
			import java.util.Iterator;
			import java.util.Map;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.atomic.AtomicInteger;
			import java.util.concurrent.atomic.AtomicLong;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
			    public float getLastTps() {			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    private final AtomicLong allCount;
			    private final int maxNumPerCount;			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        allCount = new AtomicLong(0);			
",
,
			fromLine:"			71",
			toLine:"			72",
			content:"
			        }
			        this.maxNumPerCount = maxNumPerCount;			
",
,
			fromLine:"			84",
			toLine:"			85",
			content:"
			        count[getIndex(cost)].addAndGet(num);
			        if (allCount.get() >= maxNumPerCount			
",
,
			fromLine:"			87",
			toLine:"			88",
			content:"
			            synchronized (allCount) {
			                if (allCount.get() < maxNumPerCount			
",
,
			fromLine:"			120",
			toLine:"			121",
			content:"
			            count0t1, count2t5, count6t10, count11t50, count51t100, count101t500, count501t999, count1000t);
			        if (logger != null) {			
",
,
			fromLine:"			220",
			toLine:"			220",
			content:"
			    public static class Ticks extends ServiceThread {			
",
,
			fromLine:"			229",
			toLine:"			230",
			content:"
			
			        private final int maxNumPerCount;			
",
,
			fromLine:"			246",
			toLine:"			248",
			content:"
			        public Ticks(Logger logger, int maxNumPerCount, int maxTimeMsPerCount, int maxKeyNumPerf, int maxKeyNumDebug) {
			            this.logger = logger;
			            this.maxNumPerCount = maxNumPerCount;			
",
,
			fromLine:"			260",
			toLine:"			260",
			content:"
			                }			
",
,
			fromLine:"			324",
			toLine:"			324",
			content:"
			        public void run() {			
",
,
			fromLine:"			327",
			toLine:"			327",
			content:"
			                try {			
",
,
			fromLine:"			331",
			toLine:"			331",
			content:"
			                            || keyFreqs.size() >= maxKeyNumDebug) {			
",
,
			fromLine:"			358",
			toLine:"			358",
			content:"
			                } catch (Exception e) {			
",
,
			fromLine:"			366",
			toLine:"			366",
			content:"
			            }			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java:
		[
			fromLine:"			17",
			toLine:"			34",
			content:"
			
			package org.apache.rocketmq.test.client.producer.querymsg;
			
			import org.apache.rocketmq.common.message.MessageExt;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.base.BaseConf;
			import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
			import org.junit.AfterClass;
			import org.junit.Assert;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static com.google.common.truth.Truth.assertThat;
			
			public class QueryMsgByIdExceptionIT extends BaseConf {
			    private static Logger logger = LoggerFactory.getLogger(QueryMsgByKeyIT.class);
			    private static RMQNormalProducer producer = null;			
",
,
			fromLine:"			38",
			toLine:"			40",
			content:"
			    public static void setUp() {
			        topic = initTopic();
			        logger.info(String.format("use topic: %s;", topic));			
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
			    public void testQueryMsgByErrorMsgId() {			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			        String errorMsgId = "errorMsgId";
			        producer.send(msgSize);			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        try {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			    public void testQueryMsgByNullMsgId() {			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        String errorMsgId = null;
			        producer.send(msgSize);			
",
,
			fromLine:"			75",
			toLine:"			75",
			content:"
			        try {			
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java:
		[
			fromLine:"			17",
			toLine:"			35",
			content:"
			
			package org.apache.rocketmq.test.client.rmq;
			
			import java.nio.charset.StandardCharsets;
			import java.util.List;
			import java.util.Map;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.logging.org.slf4j.Logger;
			import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
			import org.apache.rocketmq.test.clientinterface.AbstractMQProducer;
			import org.apache.rocketmq.test.sendresult.ResultWrapper;
			
			public class RMQNormalProducer extends AbstractMQProducer {
			    private static Logger logger = LoggerFactory.getLogger(RMQNormalProducer.class);
			    private DefaultMQProducer producer = null;			
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			        super(topic);			
",
,
			fromLine:"			58",
			toLine:"			58",
			content:"
			        this.producerInstanceName = producerInstanceName;			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public DefaultMQProducer getProducer() {			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			    public void setProducer(DefaultMQProducer producer) {			
",
,
			fromLine:"			73",
			toLine:"			77",
			content:"
			    protected void create(boolean useTLS) {
			        producer = new DefaultMQProducer();
			        producer.setProducerGroup(getProducerGroupName());
			        producer.setInstanceName(getProducerInstanceName());
			        producer.setUseTLS(useTLS);			
",
,
			fromLine:"			79",
			toLine:"			80",
			content:"
			
			        if (nsAddr != null) {			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        try {			
",
,
			fromLine:"			91",
			toLine:"			91",
			content:"
			            super.setStartSuccess(false);			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			            long start = System.currentTimeMillis();			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			            if (isDebug) {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			            long start = System.currentTimeMillis();			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			            if (isDebug) {			
",
,
			fromLine:"			172",
			toLine:"			172",
			content:"
			    public void shutdown() {			
",
,
			fromLine:"			179",
			toLine:"			179",
			content:"
			        try {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.nio.charset.StandardCharsets;
			import java.util.HashMap;
			import java.util.Map;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Java6Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			43",
			toLine:"			43",
			content:"
			public class GetMaxOffsetFromSlaveIT extends ContainerIntegrationTestBase {			
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			
			    private static final String MSG = "Hello RocketMQ ";			
",
,
			fromLine:"			53",
			toLine:"			54",
			content:"
			    public static void beforeClass() throws MQClientException {
			        mqProducer = createProducer(GetMaxOffsetFromSlaveIT.class.getSimpleName() + "_Producer");			
",
,
			fromLine:"			59",
			toLine:"			60",
			content:"
			    public static void afterClass() {
			        if (mqProducer != null) {			
",
,
			fromLine:"			67",
			toLine:"			67",
			content:"
			        awaitUntilSlaveOK();			
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        for (int i = 0; i < 100; i++) {
			            Message msg = new Message(THREE_REPLICAS_TOPIC, MESSAGE_BODY);			
",
,
			fromLine:"			76",
			toLine:"			76",
			content:"
			        Map<Integer, Long> maxOffsetMap = new HashMap<>();			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        for (MessageQueue mq : publishInfo.getMessageQueueList()) {			
",
,
			fromLine:"			85",
			toLine:"			86",
			content:"
			
			        mqProducer.getDefaultMQProducerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(THREE_REPLICAS_TOPIC);			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			        for (MessageQueue mq : publishInfo.getMessageQueueList()) {			
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/GetMetadataReverseIT.java:
		[
			fromLine:"			17",
			toLine:"			41",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.time.Duration;
			import java.util.Map;
			import java.util.Random;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			44",
			toLine:"			44",
			content:"
						
",
,
			fromLine:"			46",
			toLine:"			46",
			content:"
						
",
,
			fromLine:"			48",
			toLine:"			48",
			content:"
						
",
,
			fromLine:"			50",
			toLine:"			50",
			content:"
						
",
,
			fromLine:"			58",
			toLine:"			60",
			content:"
			    public static void beforeClass() throws Throwable {
			        producer = createProducer(PushMultipleReplicasIT.class.getSimpleName() + "_PRODUCER");
			        producer.setSendMsgTimeout(15 * 1000);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public static void afterClass() throws Exception {			
",
,
			fromLine:"			70",
			toLine:"			70",
			content:"
			    public void testGetMetadataReverse_consumerOffset() throws Exception {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			        int sendSuccess = 0;			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			            Message msg = new Message(topic, Integer.toString(i).getBytes());			
",
,
			fromLine:"			87",
			toLine:"			87",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			95",
			toLine:"			95",
			content:"
						
",
,
			fromLine:"			105",
			toLine:"			105",
			content:"
			        pushConsumer.start();			
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			                if (slave.getBrokerConfig().getBrokerName().equals(master1With3Replicas.getBrokerConfig().getBrokerName())) {			
",
,
			fromLine:"			122",
			toLine:"			122",
			content:"
						
",
,
			fromLine:"			135",
			toLine:"			135",
			content:"
			        await().atMost(Duration.ofMinutes(1)).until(() -> {			
",
,
			fromLine:"			142",
			toLine:"			142",
			content:"
			            }			
",
,
			fromLine:"			150",
			toLine:"			150",
			content:"
			    public void testGetMetadataReverse_delayOffset() throws Exception {			
",
,
			fromLine:"			161",
			toLine:"			161",
			content:"
						
",
,
			fromLine:"			173",
			toLine:"			173",
			content:"
			        int sendSuccess = 0;			
",
,
			fromLine:"			176",
			toLine:"			176",
			content:"
			            msg.setDelayTimeLevel(delayLevel);			
",
,
			fromLine:"			182",
			toLine:"			182",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
						
",
,
			fromLine:"			194",
			toLine:"			194",
			content:"
			            pushConsumer.getDefaultMQPushConsumerImpl().persistConsumerOffset();			
",
,
			fromLine:"			200",
			toLine:"			200",
			content:"
			                }			
",
,
			fromLine:"			215",
			toLine:"			215",
			content:"
			            Map<Integer, Long> offsetTable = master1With3Replicas.getScheduleMessageService().getOffsetTable();			
",
,
			fromLine:"			223",
			toLine:"			223",
			content:"
			    public void testGetMetadataReverse_timerCheckPoint() throws Exception {			
",
,
			fromLine:"			233",
			toLine:"			233",
			content:"
						
",
,
			fromLine:"			245",
			toLine:"			245",
			content:"
			        int sendSuccess = 0;			
",
,
			fromLine:"			248",
			toLine:"			248",
			content:"
			            msg.setDelayTimeSec(30);			
",
,
			fromLine:"			254",
			toLine:"			254",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			262",
			toLine:"			262",
			content:"
						
",
,
			fromLine:"			266",
			toLine:"			266",
			content:"
			            pushConsumer.getDefaultMQPushConsumerImpl().persistConsumerOffset();			
",
,
			fromLine:"			272",
			toLine:"			272",
			content:"
			                }			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java:
		[
			fromLine:"			17",
			toLine:"			38",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.io.UnsupportedEncodingException;
			import java.time.Duration;
			import java.util.Map;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.rocketmq.container.InnerSalveBrokerController;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
			import org.apache.rocketmq.common.message.Message;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
			public class PushMultipleReplicasIT extends ContainerIntegrationTestBase {			
",
,
			fromLine:"			44",
			toLine:"			45",
			content:"
			    private static final String REDIRECT_TOPIC = PushMultipleReplicasIT.class.getSimpleName() + "_REDIRECT_TOPIC";
			    private static final String CONSUMER_GROUP = PushMultipleReplicasIT.class.getSimpleName() + "_Consumer";			
",
,
			fromLine:"			53",
			toLine:"			55",
			content:"
			        createTopicTo(master1With3Replicas, TOPIC,1, 1);
			        producer = createProducer(PushMultipleReplicasIT.class.getSimpleName() + "_PRODUCER");
			        producer.setSendMsgTimeout(15 * 1000);			
",
,
			fromLine:"			57",
			toLine:"			58",
			content:"
			
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public static void afterClass() throws Exception {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
			        isolateBroker(master1With3Replicas);			
",
,
			fromLine:"			86",
			toLine:"			86",
			content:"
			        pushConsumer.start();			
",
,
			fromLine:"			93",
			toLine:"			93",
			content:"
			                if (slave.getBrokerConfig().getBrokerName().equals(master1With3Replicas.getBrokerConfig().getBrokerName())) {			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java:
		[
			fromLine:"			17",
			toLine:"			40",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.nio.charset.StandardCharsets;
			import java.time.Duration;
			import java.util.Random;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.client.producer.SendResult;
			import org.apache.rocketmq.client.producer.SendStatus;
			import org.apache.rocketmq.common.BrokerIdentity;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			44",
			toLine:"			49",
			content:"
			
			    private static final String CONSUME_GROUP = ScheduleSlaveActingMasterIT.class.getSimpleName() + "_Consumer";
			    private static final int MESSAGE_COUNT = 32;
			    private final Random random = new Random();
			    private static DefaultMQProducer producer;
			    private static final String MESSAGE_STRING = RandomStringUtils.random(1024);			
",
,
			fromLine:"			59",
			toLine:"			61",
			content:"
			    public static void beforeClass() throws Throwable {
			        producer = createProducer(ScheduleSlaveActingMasterIT.class.getSimpleName() + "_PRODUCER");
			        producer.setSendMsgTimeout(5000);			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			    public static void afterClass() throws Exception {			
",
,
			fromLine:"			72",
			toLine:"			72",
			content:"
			        awaitUntilSlaveOK();			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			91",
			toLine:"			92",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			94",
			toLine:"			94",
			content:"
			            msg.setDelayTimeLevel(4);			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			111",
			toLine:"			111",
			content:"
						
",
,
			fromLine:"			131",
			toLine:"			131",
			content:"
			        awaitUntilSlaveOK();			
",
,
			fromLine:"			133",
			toLine:"			133",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			150",
			toLine:"			151",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			153",
			toLine:"			153",
			content:"
			            msg.setDelayTimeSec(30);			
",
,
			fromLine:"			159",
			toLine:"			159",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
						
",
,
			fromLine:"			191",
			toLine:"			191",
			content:"
						
",
,
			fromLine:"			199",
			toLine:"			200",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			202",
			toLine:"			202",
			content:"
			            msg.setDelayTimeLevel(4);			
",
,
			fromLine:"			208",
			toLine:"			208",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			212",
			toLine:"			212",
			content:"
						
",
,
			fromLine:"			246",
			toLine:"			246",
			content:"
						
",
,
			fromLine:"			273",
			toLine:"			273",
			content:"
						
",
,
			fromLine:"			281",
			toLine:"			282",
			content:"
			        int sendSuccess = 0;
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			284",
			toLine:"			284",
			content:"
			            msg.setDelayTimeSec(30);			
",
,
			fromLine:"			290",
			toLine:"			290",
			content:"
			        final int finalSendSuccess = sendSuccess;			
",
,
			fromLine:"			294",
			toLine:"			294",
			content:"
						
",
,
			fromLine:"			325",
			toLine:"			325",
			content:"
						
",
,

		],
		test/src/test/java/org/apache/rocketmq/test/container/ScheduledMessageIT.java:
		[
			fromLine:"			17",
			toLine:"			43",
			content:"
			
			package org.apache.rocketmq.test.container;
			
			import java.io.UnsupportedEncodingException;
			import java.nio.charset.StandardCharsets;
			import java.time.Duration;
			import java.util.Random;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicInteger;
			import org.apache.commons.lang3.RandomStringUtils;
			import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
			import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
			import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.producer.DefaultMQProducer;
			import org.apache.rocketmq.common.message.Message;
			import org.apache.rocketmq.remoting.exception.RemotingException;
			import org.apache.rocketmq.store.DefaultMessageStore;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Ignore;
			import org.junit.Test;
			
			import static org.assertj.core.api.Java6Assertions.assertThat;
			import static org.awaitility.Awaitility.await;
						
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			public class ScheduledMessageIT extends ContainerIntegrationTestBase {			
",
,
			fromLine:"			47",
			toLine:"			49",
			content:"
			
			    private static final String CONSUME_GROUP = ScheduledMessageIT.class.getSimpleName() + "_Consumer";
			    private static final String MESSAGE_STRING = RandomStringUtils.random(1024);			
",
,
			fromLine:"			52",
			toLine:"			53",
			content:"
			    private static final String TOPIC_PREFIX = ScheduledMessageIT.class.getSimpleName() + "_TOPIC";
			    private final Random random = new Random();			
",
,
			fromLine:"			66",
			toLine:"			68",
			content:"
			    public static void beforeClass() throws Throwable {
			        producer = createProducer(ScheduledMessageIT.class.getSimpleName() + "_PRODUCER");
			        producer.setSendMsgTimeout(5000);			
",
,
			fromLine:"			73",
			toLine:"			73",
			content:"
			    public static void afterClass() throws Exception {			
",
,
			fromLine:"			79",
			toLine:"			79",
			content:"
			    public void consumeScheduledMsg() throws MQClientException, RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			81",
			toLine:"			81",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			97",
			toLine:"			98",
			content:"
			
			        for (int i = 0; i < MESSAGE_COUNT; i++) {			
",
,
			fromLine:"			100",
			toLine:"			100",
			content:"
			            msg.setDelayTimeLevel(2);			
",
,
			fromLine:"			103",
			toLine:"			103",
			content:"
						
",
,
			fromLine:"			112",
			toLine:"			112",
			content:"
			    public void consumeScheduledMsgFromSlave() throws MQClientException, RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			114",
			toLine:"			114",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			123",
			toLine:"			123",
			content:"
						
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			            msg.setDelayTimeLevel(2);			
",
,
			fromLine:"			131",
			toLine:"			132",
			content:"
			
			        producer.getDefaultMQProducerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
						
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public void consumeTimerMsgFromSlave() throws MQClientException, RemotingException, InterruptedException, MQBrokerException {			
",
,
			fromLine:"			149",
			toLine:"			149",
			content:"
			        createTopic(topic);			
",
,
			fromLine:"			157",
			toLine:"			157",
			content:"
						
",
,
			fromLine:"			160",
			toLine:"			160",
			content:"
			            msg.setDelayTimeSec(3);			
",
,
			fromLine:"			165",
			toLine:"			166",
			content:"
			
			        producer.getDefaultMQProducerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);			
",
,
			fromLine:"			170",
			toLine:"			170",
			content:"
						
",
,

		],
		test/src/main/java/org/apache/rocketmq/test/util/RandomUtils.java:
		[
			fromLine:"			17",
			toLine:"			25",
			content:"
			
			package org.apache.rocketmq.test.util;
			
			import java.util.Random;
			import java.util.UUID;
			
			public class RandomUtils {
			    private static final int UNICODE_START = '\u4E00';
			    private static final int UNICODE_END = '\u9FA0';			
",
,
			fromLine:"			66",
			toLine:"			66",
			content:"
			        int size = arg.length;			
",
,
			fromLine:"			80",
			toLine:"			80",
			content:"
			    public static int getIntegerMoreThanZero() {			
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        while (res <= 0) {			
",
,
			fromLine:"			88",
			toLine:"			88",
			content:"
			    private static char getCheseChar() {			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatMessageFile.java:
		[
			fromLine:"			16",
			toLine:"			43",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import com.alibaba.fastjson.JSON;
			import java.nio.ByteBuffer;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.atomic.AtomicLong;
			import java.util.concurrent.locks.Lock;
			import java.util.concurrent.locks.ReentrantLock;
			import org.apache.commons.lang3.StringUtils;
			import org.apache.rocketmq.common.BoundaryType;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.store.DispatchRequest;
			import org.apache.rocketmq.store.SelectMappedBufferResult;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.QueueMetadata;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			45",
			toLine:"			46",
			content:"
			
			    protected static final Logger log = LoggerFactory.getLogger(MessageStoreUtil.TIERED_STORE_LOGGER_NAME);			
",
,
			fromLine:"			51",
			toLine:"			54",
			content:"
			
			    protected final String filePath;
			    protected final ReentrantLock fileLock;
			    protected final MessageStoreConfig storeConfig;			
",
,
			fromLine:"			71",
			toLine:"			74",
			content:"
			    public FlatMessageFile(FlatFileFactory fileFactory, String filePath) {
			        this.filePath = filePath;
			        this.fileLock = new ReentrantLock(false);
			        this.storeConfig = fileFactory.getStoreConfig();			
",
,
			fromLine:"			99",
			toLine:"			99",
			content:"
			    public TopicMetadata recoverTopicMetadata(String topic) {			
",
,
			fromLine:"			101",
			toLine:"			101",
			content:"
			        if (topicMetadata == null) {			
",
,
			fromLine:"			107",
			toLine:"			108",
			content:"
			    public QueueMetadata recoverQueueMetadata(String topic, int queueId) {
			        MessageQueue mq = new MessageQueue(topic, storeConfig.getBrokerName(), queueId);			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			        if (queueMetadata == null) {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			            queueMetadata.setUpdateTimestamp(System.currentTimeMillis());			
",
,
			fromLine:"			126",
			toLine:"			126",
			content:"
			    public Lock getFileLock() {			
",
,
			fromLine:"			136",
			toLine:"			136",
			content:"
			    public void initOffset(long offset) {			
",
,
			fromLine:"			141",
			toLine:"			141",
			content:"
			        } finally {			
",
,
			fromLine:"			147",
			toLine:"			147",
			content:"
			    public AppendResult appendCommitLog(ByteBuffer message) {			
",
,
			fromLine:"			155",
			toLine:"			155",
			content:"
			    public AppendResult appendCommitLog(SelectMappedBufferResult message) {			
",
,
			fromLine:"			164",
			toLine:"			164",
			content:"
			    public AppendResult appendConsumeQueue(DispatchRequest request) {			
",
,
			fromLine:"			190",
			toLine:"			190",
			content:"
			        if (queueMetadata != null) {			
",
,
			fromLine:"			294",
			toLine:"			295",
			content:"
			        if (storeTime < timestamp) {
			            log.info("FlatMessageFile getQueueOffsetByTimeAsync, exceeded maximum time, " +			
",
,
			fromLine:"			302",
			toLine:"			303",
			content:"
			        if (storeTime > timestamp) {
			            log.info("FlatMessageFile getQueueOffsetByTimeAsync, less than minimum time, " +			
",
,
			fromLine:"			341",
			toLine:"			342",
			content:"
			
			        log.info("FlatMessageFile getQueueOffsetByTimeAsync, filePath={}, timestamp={}, result={}, log={}",			
",
,
			fromLine:"			348",
			toLine:"			348",
			content:"
			    public int hashCode() {			
",
,
			fromLine:"			362",
			toLine:"			362",
			content:"
			        }			
",
,
			fromLine:"			367",
			toLine:"			368",
			content:"
			    public void shutdown() {
			        closed = true;			
",
,
			fromLine:"			373",
			toLine:"			373",
			content:"
			        } finally {			
",
,
			fromLine:"			379",
			toLine:"			379",
			content:"
			    public void destroyExpiredFile(long timestamp) {			
",
,
			fromLine:"			384",
			toLine:"			384",
			content:"
			        } finally {			
",
,
			fromLine:"			390",
			toLine:"			390",
			content:"
			        this.shutdown();			
",
,
			fromLine:"			395",
			toLine:"			395",
			content:"
			            if (queueMetadata != null) {			
",
,
			fromLine:"			398",
			toLine:"			398",
			content:"
			        } finally {			
",
,
			fromLine:"			406",
			toLine:"			406",
			content:"
			        }			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatCommitLogFile.java:
		[
			fromLine:"			16",
			toLine:"			24",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.tieredstore.common.FileSegmentType;
			import org.apache.rocketmq.tieredstore.provider.FileSegmentFactory;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
						
",
,
			fromLine:"			70",
			toLine:"			71",
			content:"
			        if (beforeOffset != afterOffset) {
			            log.info("CommitLog min cq offset reset, filePath={}, offset={}, expireTimestamp={}, change={}-{}",			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatCommitLogFileTest.java:
		[
			fromLine:"			16",
			toLine:"			36",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.io.IOException;
			import java.nio.ByteBuffer;
			import java.util.concurrent.TimeUnit;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.common.AppendResult;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtil;
			import org.apache.rocketmq.tieredstore.util.MessageFormatUtilTest;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
						
",
,
			fromLine:"			38",
			toLine:"			42",
			content:"
			
			    private final String storePath = MessageStoreUtilTest.getRandomStorePath();
			    private MessageQueue queue;
			    private MetadataStore metadataStore;
			    private MessageStoreConfig storeConfig;			
",
,
			fromLine:"			46",
			toLine:"			55",
			content:"
			    public void init() throws ClassNotFoundException, NoSuchMethodException {
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setBrokerName("brokerName");
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredStoreFilePath(storePath);
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
			        storeConfig.setTieredStoreCommitLogMaxSize(2000L);
			        storeConfig.setTieredStoreConsumeQueueMaxSize(2000L);
			        queue = new MessageQueue("TieredFlatFileTest", storeConfig.getBrokerName(), 0);
			        metadataStore = new DefaultMetadataStore(storeConfig);			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			    public void shutdown() throws IOException {			
",
,
			fromLine:"			65",
			toLine:"			66",
			content:"
			    public void constructTest() {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,
			fromLine:"			72",
			toLine:"			73",
			content:"
			    public void tryRollingFileTest() throws InterruptedException {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,
			fromLine:"			88",
			toLine:"			89",
			content:"
			    public void getMinOffsetFromFileAsyncTest() {
			        String filePath = MessageStoreUtil.toFilePath(queue);			
",
,

		],
		tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatFileStore.java:
		[
			fromLine:"			16",
			toLine:"			38",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import com.google.common.base.Stopwatch;
			import com.google.common.collect.ImmutableList;
			import java.util.ArrayList;
			import java.util.List;
			import java.util.concurrent.CompletableFuture;
			import java.util.concurrent.ConcurrentHashMap;
			import java.util.concurrent.ConcurrentMap;
			import java.util.concurrent.Semaphore;
			import java.util.concurrent.TimeUnit;
			import java.util.concurrent.atomic.AtomicLong;
			import org.apache.rocketmq.common.constant.LoggerName;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.entity.TopicMetadata;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtil;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
						
",
,
			fromLine:"			40",
			toLine:"			40",
			content:"
						
",
,
			fromLine:"			42",
			toLine:"			43",
			content:"
			
			    private final MetadataStore metadataStore;			
",
,
			fromLine:"			45",
			toLine:"			45",
			content:"
			    private final MessageStoreExecutor executor;			
",
,
			fromLine:"			49",
			toLine:"			50",
			content:"
			    public FlatFileStore(MessageStoreConfig storeConfig, MetadataStore metadataStore, MessageStoreExecutor executor) {
			        this.storeConfig = storeConfig;			
",
,
			fromLine:"			52",
			toLine:"			52",
			content:"
			        this.executor = executor;			
",
,
			fromLine:"			71",
			toLine:"			71",
			content:"
			            }, 60, 60, TimeUnit.SECONDS);			
",
,
			fromLine:"			74",
			toLine:"			74",
			content:"
			            long costTime = stopwatch.elapsed(TimeUnit.MILLISECONDS);			
",
,
			fromLine:"			83",
			toLine:"			83",
			content:"
			    public void recover() {			
",
,
			fromLine:"			85",
			toLine:"			85",
			content:"
			        List<CompletableFuture<Void>> futures = new ArrayList<>();			
",
,
			fromLine:"			90",
			toLine:"			90",
			content:"
			                    if (throwable != null) {			
",
,
			fromLine:"			102",
			toLine:"			102",
			content:"
			            AtomicLong queueCount = new AtomicLong();			
",
,
			fromLine:"			104",
			toLine:"			104",
			content:"
			                FlatMessageFile flatFile = this.computeIfAbsent(new MessageQueue(			
",
,
			fromLine:"			106",
			toLine:"			106",
			content:"
			                queueCount.incrementAndGet();			
",
,
			fromLine:"			110",
			toLine:"			110",
			content:"
			            });			
",
,
			fromLine:"			116",
			toLine:"			116",
			content:"
			    public MetadataStore getMetadataStore() {			
",
,
			fromLine:"			120",
			toLine:"			120",
			content:"
			    public MessageStoreConfig getStoreConfig() {			
",
,
			fromLine:"			124",
			toLine:"			124",
			content:"
			    public FlatFileFactory getFlatFileFactory() {			
",
,
			fromLine:"			129",
			toLine:"			129",
			content:"
			        return flatFileConcurrentMap.computeIfAbsent(messageQueue,			
",
,
			fromLine:"			154",
			toLine:"			154",
			content:"
			        }			
",
,

		],
		tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatFileStoreTest.java:
		[
			fromLine:"			16",
			toLine:"			37",
			content:"
			 */
			package org.apache.rocketmq.tieredstore.file;
			
			import java.io.IOException;
			import java.util.concurrent.CompletableFuture;
			import org.apache.rocketmq.common.message.MessageQueue;
			import org.apache.rocketmq.tieredstore.MessageStoreConfig;
			import org.apache.rocketmq.tieredstore.MessageStoreExecutor;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreErrorCode;
			import org.apache.rocketmq.tieredstore.exception.TieredStoreException;
			import org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStore;
			import org.apache.rocketmq.tieredstore.metadata.MetadataStore;
			import org.apache.rocketmq.tieredstore.provider.PosixFileSegment;
			import org.apache.rocketmq.tieredstore.util.MessageStoreUtilTest;
			import org.junit.After;
			import org.junit.Assert;
			import org.junit.Before;
			import org.junit.Test;
			import org.mockito.Mockito;
			
			import static org.mockito.ArgumentMatchers.any;
						
",
,
			fromLine:"			39",
			toLine:"			41",
			content:"
			
			    private final String storePath = MessageStoreUtilTest.getRandomStorePath();
			    private MessageStoreConfig storeConfig;			
",
,
			fromLine:"			45",
			toLine:"			49",
			content:"
			    public void init() {
			        storeConfig = new MessageStoreConfig();
			        storeConfig.setStorePathRootDir(storePath);
			        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());
			        storeConfig.setBrokerName("brokerName");			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			    public void shutdown() throws IOException {			
",
,
			fromLine:"			61",
			toLine:"			61",
			content:"
			        MessageStoreExecutor executor = new MessageStoreExecutor();			
",
,
			fromLine:"			64",
			toLine:"			65",
			content:"
			
			        Assert.assertEquals(storeConfig, fileStore.getStoreConfig());			
",
,
			fromLine:"			69",
			toLine:"			69",
			content:"
			        for (int i = 0; i < 4; i++) {			
",
,
			fromLine:"			77",
			toLine:"			77",
			content:"
						
",
,
			fromLine:"			82",
			toLine:"			82",
			content:"
			        for (int i = 1; i < 3; i++) {			
",
,

		],
		tools/src/test/java/org/apache/rocketmq/tools/command/broker/SendMsgStatusCommandTest.java:
		[
			fromLine:"			16",
			toLine:"			44",
			content:"
			 */
			package org.apache.rocketmq.tools.command.broker;
			
			import java.lang.reflect.Field;
			import org.apache.commons.cli.CommandLine;
			import org.apache.commons.cli.DefaultParser;
			import org.apache.commons.cli.Options;
			import org.apache.rocketmq.client.ClientConfig;
			import org.apache.rocketmq.client.exception.MQBrokerException;
			import org.apache.rocketmq.client.exception.MQClientException;
			import org.apache.rocketmq.client.impl.MQClientAPIImpl;
			import org.apache.rocketmq.client.impl.MQClientManager;
			import org.apache.rocketmq.client.impl.factory.MQClientInstance;
			import org.apache.rocketmq.remoting.exception.RemotingConnectException;
			import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
			import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
			import org.apache.rocketmq.srvutil.ServerUtil;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
			import org.apache.rocketmq.tools.admin.DefaultMQAdminExtImpl;
			import org.junit.AfterClass;
			import org.junit.BeforeClass;
			import org.junit.Test;
			
			import static org.mockito.Mockito.mock;
			
			public class SendMsgStatusCommandTest {
			    private static DefaultMQAdminExt defaultMQAdminExt;
			    private static DefaultMQAdminExtImpl defaultMQAdminExtImpl;
			    private static MQClientInstance mqClientInstance = MQClientManager.getInstance().getOrCreateMQClientInstance(new ClientConfig());			
",
,
			fromLine:"			48",
			toLine:"			50",
			content:"
			    public static void init() throws NoSuchFieldException, IllegalAccessException, InterruptedException, RemotingTimeoutException, MQClientException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {
			        mQClientAPIImpl = mock(MQClientAPIImpl.class);
			        defaultMQAdminExt = new DefaultMQAdminExt();			
",
,
			fromLine:"			54",
			toLine:"			54",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			57",
			toLine:"			57",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			60",
			toLine:"			60",
			content:"
			        field.setAccessible(true);			
",
,
			fromLine:"			65",
			toLine:"			65",
			content:"
			    public static void terminate() {			
",
,

		],
	
}
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.1",
