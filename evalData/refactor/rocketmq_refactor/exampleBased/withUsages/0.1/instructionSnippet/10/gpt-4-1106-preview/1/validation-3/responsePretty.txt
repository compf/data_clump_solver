"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 172,
                "toLine": 342,
                "oldContent": "                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n\n                    return false;\n                }\n\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n\n                String kind = item.getStatKind();\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n\n    private void initScheduleService() {\n        this.scheduledExecutorService =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"BrokerStatsThread\", true, brokerConfig));\n        this.commercialExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"CommercialStatsThread\", true, brokerConfig));\n        this.accountExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"AccountStatsThread\", true, brokerConfig));\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallSize() {\n        return momentStatsItemSetFallSize;\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallTime() {\n        return momentStatsItemSetFallTime;\n    }\n\n    public StateGetter getProducerStateGetter() {\n        return producerStateGetter;\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public StateGetter getConsumerStateGetter() {\n        return consumerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n\n    public void start() {\n    }\n\n    public void shutdown() {\n        this.scheduledExecutorService.shutdown();\n        this.commercialExecutor.shutdown();\n    }\n\n    public StatsItem getStatsItem(final String statsName, final String statsKey) {\n        try {\n            return this.statsTable.get(statsName).getStatsItem(statsKey);\n        } catch (Exception e) {\n        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");\n    }\n\n    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\n        }\n    }\n\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final int incValue) {\n        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\n    }\n\n    public void incProducerRegisterTime(final int incValue) {\n        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\n    }\n\n    public void incChannelConnectNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);\n    }\n\n    public void incChannelCloseNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);\n    }\n\n    public void incChannelExceptionNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);\n    }\n\n    public void incChannelIdleNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\n    }"}]} 
   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
   	   
"