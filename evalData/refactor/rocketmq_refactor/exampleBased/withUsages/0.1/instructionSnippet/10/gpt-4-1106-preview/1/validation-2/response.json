{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 138,
                "toLine": 167,
                "oldContent": "        if (enableQueueStat) {\n            // Initialization of statsTable with deprecated constants removed\n            // Corrected the syntax errors\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        }\n    }\n\n            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {\n            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = null;\n                try {\n                    strArr = splitAccountStatKey(item.getStatObject());\n                } catch (Exception e) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n\n                // TODO ugly\n                if (strArr == null || strArr.length < 4) {",
                "newContent": "        if (enableQueueStat) {\n            // Initialization of statsTable with deprecated constants removed\n            // Corrected the syntax errors\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            // Additional initializations corrected\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n            this.accountStatManager.addStatisticsKindMeta(new StatisticsKindMeta(\n                ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        }\n        // Set the state getter with corrected syntax\n        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {\n            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = splitAccountStatKey(item.getStatObject());\n                // Check for the correct length of the array\n                if (strArr.length < 4) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n                // Extract the relevant parts of the key\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n                // Determine the kind of statistic\n                String kind = item.getStatKind();\n                // Check if the producer or consumer is online based on the kind\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n"
            }
        ]
    },
    "extractedClasses": {}
}