{
    "messages": [
        {
            "content": "\nI will provide you one or more Java code files.\n\nRefactor all data clumps in the respective files.\nTo do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.\nAlso provide the content of all extracted classes.\nIf possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.\n\n\n Examples of data clump are provided below.\n## Examples\n/* \n    These examples show data clumps and how they might be refactored\n    Imports are missing so these examples would not compile\n*/\n// ### example 5#########################\n//'method parameters to method parameters' data clump\nclass Example1A {\n\n    // both methods share at least 3 parameters, so we can extract those 3\n    // parameters into a class\n\n    public static String buildServiceKey(String path, String group, String version) {\n        int length = path == null ? 0 : path.length();\n        length += group == null ? 0 : group.length();\n        length += version == null ? 0 : version.length();\n        length += 2;\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(group)) {\n            buf.append(group).append('/');\n        }\n        buf.append(path);\n        if (StringUtils.isNotEmpty(version)) {\n            buf.append(':').append(version);\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(String path, String group, String version, String prefix) {\n        return prefix + buildServiceKey(path, group, version);\n    }\n\n}\n\n// ## refactored ##################################\nclass KeyData {\n    private String path;\n    private String group;\n    private String version;\n\n    KeyData(String path, String group, String version) {\n        this.path = path;\n        this.group = group;\n        this.version = version;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public int getLength() {\n        return path == null ? 0\n                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;\n    }\n\n}\n\nclass Example1A {\n\n    public static String buildServiceKey(KeyData keyData) {\n        int length = keyData.getLength();\n        StringBuilder buf = new StringBuilder(length);\n        if (StringUtils.isNotEmpty(keyData.getGroup())) {\n            buf.append(keyData.getGroup()).append('/');\n        }\n        buf.append(keyData.getPath());\n        if (StringUtils.isNotEmpty(keyData.getVersion())) {\n            buf.append(':').append(keyData.getVersion());\n        }\n        return buf.toString().intern();\n    }\n\n    public static String buildKey(KeyData keyData, String prefix) {\n        return prefix + buildServiceKey(keyData);\n    }\n}\n// #### example 5 end ##################################\n\n//\n\n// ## example 2 ##################################\n// 'fields to fields' data clump\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a class\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\t\t\t\n\t\t\tint state = node.getId();\n\t\t\tstates.add(state);\n\t\t\tsuccessors.put(state, new ArrayList<Integer>());\n\t\t\tlabels.put(state, new ArrayList<Label>())\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + successors.get(state) + \", Labels: \"\n                    + labels.get(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## refactored ##################################\n\nclass StateGraphData {\n    private List<Integer> states;\n    private Map<Integer, List<Integer>> successors;\n    private Map<Integer, List<Label>> labels;\n\n    StateGraphData() {\n        this.states = new ArrayList<Integer>();\n        this.successors = new HashMap<Integer, List<Integer>>();\n        this.labels = new HashMap<Integer, List<Label>>();\n    }\n\n    public List<Integer> getStates() {\n        return states;\n    }\n\n    public Map<Integer, List<Integer>> getSuccessors(int state) {\n        return successors.get(state);\n    }\n\n    public Map<Integer, List<Label>> getLabels(int state) {\n        return labels.get(state);\n    }\n\n    public void addState(int state) {\n        states.add(state);\n        successors.put(state, new ArrayList<Integer>());\n        labels.put(state, new ArrayList<Label>());\n    }\n\n}\n\nclass Example2A {\n\n    // both classes share at least 3 fields, so we can extract those 3 fields into a\n    // class\n    private StateGraphData stateGraphData;\n    private SmPLMethodCFG cfg;\n\n    void init() {\n        for (ControlFlowNode node : cfg.vertexSet()) {\n\n            stateGraphData.addState(node.getId());\n        }\n    }\n\n}\n\n// Example2B.java\nclass Example2B {\n    private StateGraphData stateGraphData;\n    private Map<Integer, String> stateDescriptions;\n\n    void print() {\n        for (int state : states) {\n            System.out.println(\"State: \" + state + \", Successors: \" + stateGraphData.getSuccessor(state) + \", Labels: \"\n                    + stateGraphData.getLabel(state) + \", Description: \" + stateDescriptions.get(state));\n        }\n    }\n}\n// ## example 2 end ##################################\n\n// ## example 3 ##################################\n// 'parameters to fields' data clump\nclass Example3A {\n    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {\n        return parameterTypes.length == arguments.length;\n    }\n}\n\n// Example3B.java\nclass Example3B {\n\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private String methodName;\n\n    private Class<?>[] parameterTypes;\n\n    private Object[] arguments;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n\n}\n\n// ## refactored ##################################\nclass MethodCallData {\n    public String methodName;\n    public Class<?>[] parameterTypes;\n    public Object[] arguments;\n\n    public boolean isValid() {\n        return parameterTypes.length == arguments.length;\n    }\n\n}\n\nclass Example3A {\n    boolean validate(MethodCallData methodCallData) {\n        return methodCallData.isValid();\n    }\n}\n\nclass Example3B {\n    private URL consumerUrl;\n\n    private List<URL> urls;\n\n    private URL url;\n\n    private MethodCallData methodCallData;\n\n    private InetSocketAddress localAddress;\n\n    private InetSocketAddress remoteAddress;\n}\n// ## example 3 end ##################################\n\n// ## example 4 ##################################\nclass Example4A {\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        writer.incrementNumberReturned();\n        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));\n    }\n}\n\n// Example4B.java\nclass Example4B extends Example4A {\n     // This pair of methods do not constitute a data clump even if signature is copied because\n    // the method is overridden and therefore must have the same paremeters\n    @Override\n    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)\n            throws IOException {\n        root.reset();\n        super.beforeEvaluation(writer, root, feature);\n    }\n   \n}\n// ## example 4 end ##################################\n\n## Examples end\n\n\nUse the following JSON format for the output:\n\n## JSON\n\n{\n    \"refactorings\":{\n        // for each refactored file\n        \"file1Path\": [\n            // for each change in the file performed by you. Try to group changes of neighboring lines\n            {\n                \"fromLine\": \"<the fromLine>\",\n                \"toLine\":\"<the toLine>\",\n                \"oldContent\": \"the old content of the changed lines\",\n                \"newContent\": \"the new content of the changed lines\"\n            },\n            //...\n        ]\n    },\n    \"extractedClasses\":{\n          // for each extracted class\n        \"extractedClassPath1\": \"full content of the newly extracted class 1 \",\n        //...\n    }\n}\n\n## END JSON\n\n",
            "role": "user"
        },
        {
            "content": "//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.store.stats;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";\n    public static final String GROUP_CK_NUMS = \"GROUP_CK_NUMS\";\n    public static final String DLQ_PUT_NUMS = \"DLQ_PUT_NUMS\";\n    public static final String BROKER_ACK_NUMS = \"BROKER_ACK_NUMS\";\n    public static final String BROKER_CK_NUMS = \"BROKER_CK_NUMS\";\n    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String SNDBCK2DLQ_TIMES = \"SNDBCK2DLQ_TIMES\";\n\n    public static final String COMMERCIAL_OWNER = \"Owner\";\n\n    public static final String ACCOUNT_OWNER_PARENT = \"OWNER_PARENT\";\n    public static final String ACCOUNT_OWNER_SELF = \"OWNER_SELF\";\n\n    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;\n    public static final String ACCOUNT_AUTH_TYPE = \"AUTH_TYPE\";\n\n    public static final String ACCOUNT_SEND = \"SEND\";\n    public static final String ACCOUNT_RCV = \"RCV\";\n    public static final String ACCOUNT_SEND_BACK = \"SEND_BACK\";\n    public static final String ACCOUNT_SEND_BACK_TO_DLQ = \"SEND_BACK_TO_DLQ\";\n    public static final String ACCOUNT_AUTH_FAILED = \"AUTH_FAILED\";\n    public static final String ACCOUNT_SEND_REJ = \"SEND_REJ\";\n    public static final String ACCOUNT_REV_REJ = \"RCV_REJ\";\n\n    public static final String MSG_NUM = \"MSG_NUM\";\n    public static final String MSG_SIZE = \"MSG_SIZE\";\n    public static final String SUCCESS_MSG_NUM = \"SUCCESS_MSG_NUM\";\n    public static final String FAILURE_MSG_NUM = \"FAILURE_MSG_NUM\";\n    public static final String COMMERCIAL_MSG_NUM = \"COMMERCIAL_MSG_NUM\";\n    public static final String SUCCESS_REQ_NUM = \"SUCCESS_REQ_NUM\";\n    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time\n    public static final String PRODUCER_REGISTER_TIME = \"PRODUCER_REGISTER_TIME\";\n    public static final String CHANNEL_ACTIVITY = \"CHANNEL_ACTIVITY\";\n    public static final String CHANNEL_ACTIVITY_CONNECT = \"CONNECT\";\n    public static final String CHANNEL_ACTIVITY_IDLE = \"IDLE\";\n    public static final String CHANNEL_ACTIVITY_EXCEPTION = \"EXCEPTION\";\n    public static final String CHANNEL_ACTIVITY_CLOSE = \"CLOSE\";\n\n    /**\n     * read disk follow stats\n     */\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);\n    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(\n        LoggerName.COMMERCIAL_LOGGER_NAME);\n    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);\n    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(\n        LoggerName.DLQ_STATS_LOGGER_NAME);\n    private ScheduledExecutorService scheduledExecutorService;\n    private ScheduledExecutorService commercialExecutor;\n    private ScheduledExecutorService accountExecutor;\n\n    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();\n    private final String clusterName;\n    private final boolean enableQueueStat;\n    private MomentStatsItemSet momentStatsItemSetFallSize;\n    private MomentStatsItemSet momentStatsItemSetFallTime;\n\n    private final StatisticsManager accountStatManager = new StatisticsManager();\n    private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;\n\n    private BrokerConfig brokerConfig;\n\n    public BrokerStatsManager(BrokerConfig brokerConfig) {\n        this.brokerConfig = brokerConfig;\n        this.enableQueueStat = brokerConfig.isEnableDetailStat();\n        initScheduleService();\n        this.clusterName = brokerConfig.getBrokerClusterName();\n        init();\n    }\n\n    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {\n        this.clusterName = clusterName;\n        this.enableQueueStat = enableQueueStat;\n        initScheduleService();\n        init();\n    }\n\n    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n\n        this.statsTable.put(CONSUMER_REGISTER_TIME,\n            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));\n        this.statsTable.put(PRODUCER_REGISTER_TIME,\n            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));\n\n        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));\n\n        StatisticsItemFormatter formatter = new StatisticsItemFormatter();\n        accountStatManager.setBriefMeta(new Pair[] {\n            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),\n            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});\n        String[] itemNames = new String[] {\n            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,\n            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,\n            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,\n            RT, INNER_RT};\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {\n            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = null;\n                try {\n                    strArr = splitAccountStatKey(item.getStatObject());\n                } catch (Exception e) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n\n                // TODO ugly\n                if (strArr == null || strArr.length < 4) {\n                    return false;\n                }\n\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n\n                String kind = item.getStatKind();\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n\n    private void initScheduleService() {\n        this.scheduledExecutorService =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"BrokerStatsThread\", true, brokerConfig));\n        this.commercialExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"CommercialStatsThread\", true, brokerConfig));\n        this.accountExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"AccountStatsThread\", true, brokerConfig));\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallSize() {\n        return momentStatsItemSetFallSize;\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallTime() {\n        return momentStatsItemSetFallTime;\n    }\n\n    public StateGetter getProducerStateGetter() {\n        return producerStateGetter;\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public StateGetter getConsumerStateGetter() {\n        return consumerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n\n    public void start() {\n    }\n\n    public void shutdown() {\n        this.scheduledExecutorService.shutdown();\n        this.commercialExecutor.shutdown();\n    }\n\n    public StatsItem getStatsItem(final String statsName, final String statsKey) {\n        try {\n            return this.statsTable.get(statsName).getStatsItem(statsKey);\n        } catch (Exception e) {\n        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");\n    }\n\n    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\n        }\n    }\n\n    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\n        if (enableQueueStat) {\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\n        if (enableQueueStat) {\n            final String statsKey = buildStatsKey(topic, queueId, group);\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final int incValue) {\n        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\n    }\n\n    public void incProducerRegisterTime(final int incValue) {\n        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\n    }\n\n    public void incChannelConnectNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);\n    }\n\n    public void incChannelCloseNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);\n    }\n\n    public void incChannelExceptionNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);\n    }\n\n    public void incChannelIdleNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\n    }\n\n    public void incTopicPutNums(final String topic, int num, int times) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\n    }\n\n    public void incTopicPutSize(final String topic, final int size) {\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);\n    }\n\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupCkNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupAckNums(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public String buildStatsKey(String topic, String group) {\n        StringBuilder strBuilder;\n        if (topic != null && group != null) {\n            strBuilder = new StringBuilder(topic.length() + group.length() + 1);\n        } else {\n            strBuilder = new StringBuilder();\n        }\n        strBuilder.append(topic).append(\"@\").append(group);\n        return strBuilder.toString();\n    }\n\n    public String buildStatsKey(String topic, int queueId) {\n        StringBuilder strBuilder;\n        if (topic != null) {\n            strBuilder = new StringBuilder(topic.length() + 5);\n        } else {\n            strBuilder = new StringBuilder();\n        }\n        strBuilder.append(topic).append(\"@\").append(queueId);\n        return strBuilder.toString();\n    }\n\n    public String buildStatsKey(String topic, int queueId, String group) {\n        StringBuilder strBuilder;\n        if (topic != null && group != null) {\n            strBuilder = new StringBuilder(topic.length() + group.length() + 6);\n        } else {\n            strBuilder = new StringBuilder();\n        }\n        strBuilder.append(topic).append(\"@\").append(queueId).append(\"@\").append(group);\n        return strBuilder.toString();\n    }\n\n    public String buildStatsKey(int queueId, String topic, String group) {\n        StringBuilder strBuilder;\n        if (topic != null && group != null) {\n            strBuilder = new StringBuilder(topic.length() + group.length() + 6);\n        } else {\n            strBuilder = new StringBuilder();\n        }\n        strBuilder.append(queueId).append(\"@\").append(topic).append(\"@\").append(group);\n        return strBuilder.toString();\n    }\n\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {\n        String statsKey;\n        if (enableQueueStat) {\n            statsKey = buildStatsKey(queueId, topic, group);\n        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);\n    }\n\n    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {\n        StringBuilder statsKey;\n        if (topic != null) {\n            statsKey = new StringBuilder(topic.length() + 6);\n        } else {\n            statsKey = new StringBuilder(6);\n        }\n        statsKey.append(queueId).append(\"@\").append(topic);\n        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);\n    }\n\n    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerAckNums(final int incValue) {\n        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerCkNums(final int incValue) {\n        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public long getBrokerGetNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public long getBrokerPutNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public void incSendBackNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        final String statsKey = buildStatsKey(topic, group);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }\n\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void incDLQStatValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incCommercialValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final String flowlimitThreshold, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType, flowlimitThreshold);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {\n        StringBuilder strBuilder = new StringBuilder();\n        strBuilder.append(owner);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(type);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType, String flowlimitThreshold) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        strBuilder.append(\"@\");\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String[] splitAccountStatKey(final String accountStatKey) {\n        final String sep = \"\\\\|\";\n        return accountStatKey.split(sep);\n    }\n\n    private StatisticsKindMeta createStatisticsKindMeta(String name,\n        String[] itemNames,\n        ScheduledExecutorService executorService,\n        StatisticsItemFormatter formatter,\n        Logger log,\n        long interval) {\n        final BrokerConfig brokerConfig = this.brokerConfig;\n        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);\n        StatisticsKindMeta kindMeta = new StatisticsKindMeta();\n        kindMeta.setName(name);\n        kindMeta.setItemNames(itemNames);\n        kindMeta.setScheduledPrinter(\n            new StatisticsItemScheduledIncrementPrinter(\n                \"Stat In One Minute: \",\n                printer,\n                executorService,\n                new StatisticsItemScheduledPrinter.InitialDelay() {\n                    @Override\n                    public long get() {\n                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());\n                    }\n                },\n                interval,\n                new String[] {MSG_NUM},\n                new StatisticsItemScheduledIncrementPrinter.Valve() {\n                    @Override\n                    public boolean enabled() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;\n                    }\n\n                    @Override\n                    public boolean printZeroLine() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;\n                    }\n                }\n            )\n        );\n        return kindMeta;\n    }\n\n    public interface StateGetter {\n        boolean online(String instanceId, String group, String topic);\n    }\n\n    public enum StatsType {\n        SEND_SUCCESS,\n        SEND_FAILURE,\n\n        RCV_SUCCESS,\n        RCV_EPOLLS,\n        SEND_BACK,\n        SEND_BACK_TO_DLQ,\n\n        SEND_ORDER,\n        SEND_TIMER,\n        SEND_TRANSACTION,\n\n        PERM_FAILURE\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//common/src/main/java/org/apache/rocketmq/common/stats/Stats.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.common.stats;\n\npublic class Stats {\n\n    public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String QUEUE_PUT_SIZE = \"QUEUE_PUT_SIZE\";\n    public static final String QUEUE_GET_NUMS = \"QUEUE_GET_NUMS\";\n    public static final String QUEUE_GET_SIZE = \"QUEUE_GET_SIZE\";\n    public static final String TOPIC_PUT_NUMS = \"TOPIC_PUT_NUMS\";\n    public static final String TOPIC_PUT_SIZE = \"TOPIC_PUT_SIZE\";\n    public static final String GROUP_GET_NUMS = \"GROUP_GET_NUMS\";\n    public static final String GROUP_GET_SIZE = \"GROUP_GET_SIZE\";\n    public static final String SNDBCK_PUT_NUMS = \"SNDBCK_PUT_NUMS\";\n    public static final String BROKER_PUT_NUMS = \"BROKER_PUT_NUMS\";\n    public static final String BROKER_GET_NUMS = \"BROKER_GET_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_NUMS = \"GROUP_GET_FROM_DISK_NUMS\";\n    public static final String GROUP_GET_FROM_DISK_SIZE = \"GROUP_GET_FROM_DISK_SIZE\";\n    public static final String BROKER_GET_FROM_DISK_NUMS = \"BROKER_GET_FROM_DISK_NUMS\";\n    public static final String BROKER_GET_FROM_DISK_SIZE = \"BROKER_GET_FROM_DISK_SIZE\";\n    public static final String COMMERCIAL_SEND_TIMES = \"COMMERCIAL_SEND_TIMES\";\n    public static final String COMMERCIAL_SNDBCK_TIMES = \"COMMERCIAL_SNDBCK_TIMES\";\n    public static final String COMMERCIAL_RCV_TIMES = \"COMMERCIAL_RCV_TIMES\";\n    public static final String COMMERCIAL_RCV_EPOLLS = \"COMMERCIAL_RCV_EPOLLS\";\n    public static final String COMMERCIAL_SEND_SIZE = \"COMMERCIAL_SEND_SIZE\";\n    public static final String COMMERCIAL_RCV_SIZE = \"COMMERCIAL_RCV_SIZE\";\n    public static final String COMMERCIAL_PERM_FAILURES = \"COMMERCIAL_PERM_FAILURES\";\n\n    public static final String GROUP_GET_FALL_SIZE = \"GROUP_GET_FALL_SIZE\";\n    public static final String GROUP_GET_FALL_TIME = \"GROUP_GET_FALL_TIME\";\n    public static final String GROUP_GET_LATENCY = \"GROUP_GET_LATENCY\";\n}\n",
            "role": "user"
        },
        {
            "content": "//store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_FALL_TIME;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_LATENCY;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.GROUP_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_GET_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.QUEUE_PUT_SIZE;\nimport static org.apache.rocketmq.common.stats.Stats.SNDBCK_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BrokerStatsManagerTest {\n    private BrokerStatsManager brokerStatsManager;\n\n    private static final String TOPIC = \"TOPIC_TEST\";\n    private static final Integer QUEUE_ID = 0;\n    private static final String GROUP_NAME = \"GROUP_TEST\";\n    private static final String CLUSTER_NAME = \"DefaultCluster\";\n\n    @Before\n    public void init() {\n        brokerStatsManager = new BrokerStatsManager(CLUSTER_NAME, true);\n        brokerStatsManager.start();\n    }\n\n    @After\n    public void destroy() {\n        brokerStatsManager.shutdown();\n    }\n\n    @Test\n    public void testGetStatsItem() {\n        assertThat(brokerStatsManager.getStatsItem(\"TEST\", \"TEST\")).isNull();\n    }\n\n    @Test\n    public void testIncQueuePutNums() {\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, statsKey).getValue().doubleValue()).isEqualTo(3L);\n    }\n\n    @Test\n    public void testIncQueuePutSize() {\n        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 2);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID));\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, statsKey).getValue().doubleValue()).isEqualTo(2L);\n    }\n\n    @Test\n    public void testIncQueueGetNums() {\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncQueueGetSize() {\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        final String statsKey = brokerStatsManager.buildStatsKey(brokerStatsManager.buildStatsKey(TOPIC, String.valueOf(QUEUE_ID)), GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncTopicPutNums() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getTimes().doubleValue()).isEqualTo(1L);\n        brokerStatsManager.incTopicPutNums(TOPIC, 2, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC).getValue().doubleValue()).isEqualTo(3L);\n    }\n\n    @Test\n    public void testIncTopicPutSize() {\n        brokerStatsManager.incTopicPutSize(TOPIC, 2);\n        assertThat(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC).getValue().doubleValue()).isEqualTo(2L);\n    }\n\n    @Test\n    public void testIncGroupGetNums() {\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncGroupGetSize() {\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 1);\n        String statsKey = brokerStatsManager.buildStatsKey(TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncGroupGetLatency() {\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        String statsKey = String.format(\"%d@%s@%s\", 1, TOPIC, GROUP_NAME);\n        assertThat(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, statsKey).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncBrokerPutNums() {\n        brokerStatsManager.incBrokerPutNums();\n        assertThat(brokerStatsManager.getStatsItem(BROKER_PUT_NUMS, CLUSTER_NAME).getValue().doubleValue()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testOnTopicDeleted() {\n        brokerStatsManager.incTopicPutNums(TOPIC);\n        brokerStatsManager.incTopicPutSize(TOPIC, 100);\n        brokerStatsManager.incQueuePutNums(TOPIC, QUEUE_ID);\n        brokerStatsManager.incQueuePutSize(TOPIC, QUEUE_ID, 100);\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 100);\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 100);\n        brokerStatsManager.incSendBackNums(GROUP_NAME, TOPIC);\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);\n        brokerStatsManager.recordDiskFallBehindSize(GROUP_NAME, TOPIC, 1, 11L);\n\n        brokerStatsManager.onTopicDeleted(TOPIC);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_NUMS, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(TOPIC_PUT_SIZE, TOPIC));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_NUMS, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_PUT_SIZE, TOPIC + \"@\" + QUEUE_ID));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n\n    @Test\n    public void testOnGroupDeleted() {\n        brokerStatsManager.incGroupGetNums(GROUP_NAME, TOPIC, 1);\n        brokerStatsManager.incGroupGetSize(GROUP_NAME, TOPIC, 100);\n        brokerStatsManager.incQueueGetNums(GROUP_NAME, TOPIC, QUEUE_ID, 1);\n        brokerStatsManager.incQueueGetSize(GROUP_NAME, TOPIC, QUEUE_ID, 100);\n        brokerStatsManager.incSendBackNums(GROUP_NAME, TOPIC);\n        brokerStatsManager.incGroupGetLatency(GROUP_NAME, TOPIC, 1, 1);\n        brokerStatsManager.recordDiskFallBehindTime(GROUP_NAME, TOPIC, 1, 11L);\n        brokerStatsManager.recordDiskFallBehindSize(GROUP_NAME, TOPIC, 1, 11L);\n\n        brokerStatsManager.onGroupDeleted(GROUP_NAME);\n\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_SIZE, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_SIZE, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(QUEUE_GET_NUMS, TOPIC + \"@\" + QUEUE_ID + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(SNDBCK_PUT_NUMS, TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_LATENCY, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_SIZE, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n        Assert.assertNull(brokerStatsManager.getStatsItem(GROUP_GET_FALL_TIME, \"1@\" + TOPIC + \"@\" + GROUP_NAME));\n    }\n\n    @Test\n    public void testIncBrokerGetNumsWithoutSystemTopic() {\n        brokerStatsManager.incBrokerGetNumsWithoutSystemTopic(TOPIC, 1);\n        assertThat(brokerStatsManager.getStatsItem(BrokerStatsManager.BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, CLUSTER_NAME)\n            .getValue().doubleValue()).isEqualTo(1L);\n        assertThat(brokerStatsManager.getBrokerGetNumsWithoutSystemTopic()).isEqualTo(1L);\n\n        brokerStatsManager.incBrokerGetNumsWithoutSystemTopic(TopicValidator.RMQ_SYS_TRACE_TOPIC, 1);\n        assertThat(brokerStatsManager.getStatsItem(BrokerStatsManager.BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, CLUSTER_NAME)\n            .getValue().doubleValue()).isEqualTo(1L);\n        assertThat(brokerStatsManager.getBrokerGetNumsWithoutSystemTopic()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testIncBrokerPutNumsWithoutSystemTopic() {\n        brokerStatsManager.incBrokerPutNumsWithoutSystemTopic(TOPIC, 1);\n        assertThat(brokerStatsManager.getStatsItem(BrokerStatsManager.BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, CLUSTER_NAME)\n            .getValue().doubleValue()).isEqualTo(1L);\n        assertThat(brokerStatsManager.getBrokerPutNumsWithoutSystemTopic()).isEqualTo(1L);\n\n        brokerStatsManager.incBrokerPutNumsWithoutSystemTopic(TopicValidator.RMQ_SYS_TRACE_TOPIC, 1);\n        assertThat(brokerStatsManager.getStatsItem(BrokerStatsManager.BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, CLUSTER_NAME)\n            .getValue().doubleValue()).isEqualTo(1L);\n        assertThat(brokerStatsManager.getBrokerPutNumsWithoutSystemTopic()).isEqualTo(1L);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.broker.processor;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.transaction.OperationResult;\nimport org.apache.rocketmq.broker.transaction.TransactionMetrics;\nimport org.apache.rocketmq.broker.transaction.TransactionalMessageService;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.sysflag.MessageSysFlag;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.remoting.netty.NettyClientConfig;\nimport org.apache.rocketmq.remoting.netty.NettyServerConfig;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.header.EndTransactionRequestHeader;\nimport org.apache.rocketmq.store.AppendMessageResult;\nimport org.apache.rocketmq.store.AppendMessageStatus;\nimport org.apache.rocketmq.store.MessageStore;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.PutMessageStatus;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.nio.charset.StandardCharsets;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class EndTransactionProcessorTest {\n\n    private static final String TOPIC = \"trans_topic_test\";\n\n    private EndTransactionProcessor endTransactionProcessor;\n\n    @Mock\n    private ChannelHandlerContext handlerContext;\n\n    @Spy\n    private BrokerController\n        brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),\n            new MessageStoreConfig(), null);\n\n    @Mock\n    private MessageStore messageStore;\n\n    @Mock\n    private TransactionalMessageService transactionMsgService;\n\n    @Mock\n    private TransactionMetrics transactionMetrics;\n\n    @Before\n    public void init() {\n        when(transactionMsgService.getTransactionMetrics()).thenReturn(transactionMetrics);\n        brokerController.setMessageStore(messageStore);\n        brokerController.setTransactionalMessageService(transactionMsgService);\n        endTransactionProcessor = new EndTransactionProcessor(brokerController);\n    }\n\n    private OperationResult createResponse(int status) {\n        OperationResult response = new OperationResult();\n        response.setPrepareMessage(createDefaultMessageExt());\n        response.setResponseCode(status);\n        response.setResponseRemark(null);\n        return response;\n    }\n\n    @Test\n    public void testProcessRequest() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        when(messageStore.putMessage(any(MessageExtBrokerInner.class)))\n                .thenReturn(new PutMessageResult(PutMessageStatus.PUT_OK, createAppendMessageResult(AppendMessageStatus.PUT_OK)));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, brokerController.getBrokerConfig().getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_NUMS, TOPIC).getValue().sum()).isEqualTo(1L);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.TOPIC_PUT_SIZE, TOPIC).getValue().sum()).isEqualTo(1L);\n    }\n\n    @Test\n    public void testProcessRequest_NotType() throws RemotingCommandException {\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response).isNull();\n    }\n\n    @Test\n    public void testProcessRequest_RollBack() throws RemotingCommandException {\n        when(transactionMsgService.rollbackMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE, true);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n    }\n\n    @Test\n    public void testProcessRequest_RejectCommitMessage() throws RemotingCommandException {\n        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createRejectResponse());\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.ILLEGAL_OPERATION);\n    }\n\n    @Test\n    public void testProcessRequest_RejectRollBackMessage() throws RemotingCommandException {\n        when(transactionMsgService.rollbackMessage(any(EndTransactionRequestHeader.class))).thenReturn(createRejectResponse());\n        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE, false);\n        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.ILLEGAL_OPERATION);\n    }\n\n    private MessageExt createDefaultMessageExt() {\n        MessageExt messageExt = new MessageExt();\n        messageExt.setMsgId(\"12345678\");\n        messageExt.setQueueId(0);\n        messageExt.setCommitLogOffset(123456789L);\n        messageExt.setQueueOffset(1234);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_TOPIC, TOPIC);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_QUEUE_ID, \"0\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_PREPARED, \"true\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_PRODUCER_GROUP, \"testTransactionGroup\");\n        return messageExt;\n    }\n\n    private EndTransactionRequestHeader createEndTransactionRequestHeader(int status, boolean isCheckMsg) {\n        EndTransactionRequestHeader header = new EndTransactionRequestHeader();\n        header.setTopic(\"topic\");\n        header.setCommitLogOffset(123456789L);\n        header.setFromTransactionCheck(isCheckMsg);\n        header.setCommitOrRollback(status);\n        header.setMsgId(\"12345678\");\n        header.setTransactionId(\"123\");\n        header.setProducerGroup(\"testTransactionGroup\");\n        header.setTranStateTableOffset(1234L);\n        return header;\n    }\n\n    private RemotingCommand createEndTransactionMsgCommand(int status, boolean isCheckMsg) {\n        EndTransactionRequestHeader header = createEndTransactionRequestHeader(status, isCheckMsg);\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.END_TRANSACTION, header);\n        request.makeCustomHeaderToNet();\n        return request;\n    }\n\n    private OperationResult createRejectResponse() {\n        OperationResult response = new OperationResult();\n        response.setPrepareMessage(createRejectMessageExt());\n        response.setResponseCode(ResponseCode.SUCCESS);\n        response.setResponseRemark(null);\n        return response;\n    }\n    private MessageExt createRejectMessageExt() {\n        MessageExt messageExt = new MessageExt();\n        messageExt.setMsgId(\"12345678\");\n        messageExt.setQueueId(0);\n        messageExt.setCommitLogOffset(123456789L);\n        messageExt.setQueueOffset(1234);\n        messageExt.setBody(\"body\".getBytes(StandardCharsets.UTF_8));\n        messageExt.setBornTimestamp(System.currentTimeMillis() - 65 * 1000);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_QUEUE_ID, \"0\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_PREPARED, \"true\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_PRODUCER_GROUP, \"testTransactionGroup\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_TOPIC, \"TEST\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_CHECK_IMMUNITY_TIME_IN_SECONDS, \"60\");\n        return messageExt;\n    }\n\n    private AppendMessageResult createAppendMessageResult(AppendMessageStatus status) {\n        AppendMessageResult result = new AppendMessageResult(status);\n        result.setMsgId(\"12345678\");\n        result.setMsgNum(1);\n        result.setWroteBytes(1);\n        return result;\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.rocketmq.broker.schedule;\n\nimport java.io.File;\nimport java.lang.reflect.Field;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.failover.EscapeBridge;\nimport org.apache.rocketmq.broker.util.HookUtils;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.store.ConsumeQueueExt;\nimport org.apache.rocketmq.store.DefaultMessageStore;\nimport org.apache.rocketmq.store.GetMessageResult;\nimport org.apache.rocketmq.store.GetMessageStatus;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.PutMessageResult;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport static org.apache.rocketmq.common.stats.Stats.BROKER_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_NUMS;\nimport static org.apache.rocketmq.common.stats.Stats.TOPIC_PUT_SIZE;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n\npublic class ScheduleMessageServiceTest {\n\n    private BrokerController brokerController;\n    private ScheduleMessageService scheduleMessageService;\n\n    /**\n     * t defaultMessageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\"\n     */\n    String testMessageDelayLevel = \"5s 8s\";\n    /**\n     * choose delay level\n     */\n    int delayLevel = 3;\n\n    private static final String STORE_PATH = System.getProperty(\"java.io.tmpdir\") + File.separator + \"schedule_test#\" + UUID.randomUUID();\n    private static final int COMMIT_LOG_FILE_SIZE = 1024;\n    private static final int CQ_FILE_SIZE = 10;\n    private static final int CQ_EXT_FILE_SIZE = 10 * (ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + 64);\n\n    private static SocketAddress bornHost;\n    private static SocketAddress storeHost;\n    private DefaultMessageStore messageStore;\n    private MessageStoreConfig messageStoreConfig;\n    private BrokerConfig brokerConfig;\n\n    static String sendMessage = \" ------- schedule message test -------\";\n    static String topic = \"schedule_topic_test\";\n    static String messageGroup = \"delayGroupTest\";\n    private Random random = new Random();\n\n    static {\n        try {\n            bornHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n        try {\n            storeHost = new InetSocketAddress(InetAddress.getByName(\"127.0.0.1\"), 0);\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        messageStoreConfig = new MessageStoreConfig();\n        messageStoreConfig.setMessageDelayLevel(testMessageDelayLevel);\n        messageStoreConfig.setMappedFileSizeCommitLog(COMMIT_LOG_FILE_SIZE);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(CQ_FILE_SIZE);\n        messageStoreConfig.setMappedFileSizeConsumeQueueExt(CQ_EXT_FILE_SIZE);\n        messageStoreConfig.setMessageIndexEnable(false);\n        messageStoreConfig.setEnableConsumeQueueExt(true);\n        messageStoreConfig.setStorePathRootDir(STORE_PATH);\n        messageStoreConfig.setStorePathCommitLog(STORE_PATH + File.separator + \"commitlog\");\n        // Let OS pick an available port\n        messageStoreConfig.setHaListenPort(0);\n\n        brokerConfig = new BrokerConfig();\n        BrokerStatsManager manager = new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat());\n        messageStore = new DefaultMessageStore(messageStoreConfig, manager, new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());\n\n        assertThat(messageStore.load()).isTrue();\n\n        messageStore.start();\n        brokerController = Mockito.mock(BrokerController.class);\n        Mockito.when(brokerController.getMessageStore()).thenReturn(messageStore);\n        Mockito.when(brokerController.getMessageStoreConfig()).thenReturn(messageStoreConfig);\n        Mockito.when(brokerController.getBrokerConfig()).thenReturn(brokerConfig);\n        Mockito.when(brokerController.peekMasterBroker()).thenReturn(brokerController);\n        Mockito.when(brokerController.getBrokerStatsManager()).thenReturn(manager);\n        EscapeBridge escapeBridge = new EscapeBridge(brokerController);\n        Mockito.when(brokerController.getEscapeBridge()).thenReturn(escapeBridge);\n        scheduleMessageService = new ScheduleMessageService(brokerController);\n        scheduleMessageService.load();\n        scheduleMessageService.start();\n        Mockito.when(brokerController.getScheduleMessageService()).thenReturn(scheduleMessageService);\n    }\n\n    @Test\n    public void testLoad() {\n        ConcurrentMap<Integer, Long> offsetTable = scheduleMessageService.getOffsetTable();\n        //offsetTable.put(0, 1L);\n        offsetTable.put(1, 3L);\n        offsetTable.put(2, 5L);\n        scheduleMessageService.persist();\n\n        ScheduleMessageService controlInstance = new ScheduleMessageService(brokerController);\n        assertTrue(controlInstance.load());\n\n        ConcurrentMap<Integer, Long> loaded = controlInstance.getOffsetTable();\n        for (long offset : loaded.values()) {\n            assertEquals(0, offset);\n        }\n    }\n\n    @Test\n    public void testCorrectDelayOffset_whenInit() throws Exception {\n\n        ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable = null;\n\n        scheduleMessageService = new ScheduleMessageService(brokerController);\n        scheduleMessageService.parseDelayLevel();\n\n        ConcurrentMap<Integer /* level */, Long/* offset */> offsetTable1 = new ConcurrentHashMap<>();\n        for (int i = 1; i <= 2; i++) {\n            offsetTable1.put(i, random.nextLong());\n        }\n\n        Field field = scheduleMessageService.getClass().getDeclaredField(\"offsetTable\");\n        field.setAccessible(true);\n        field.set(scheduleMessageService, offsetTable1);\n\n        String jsonStr = scheduleMessageService.encode();\n        scheduleMessageService.decode(jsonStr);\n\n        offsetTable = (ConcurrentMap<Integer, Long>) field.get(scheduleMessageService);\n\n        for (Map.Entry<Integer, Long> entry : offsetTable.entrySet()) {\n            assertEquals(entry.getValue(), offsetTable1.get(entry.getKey()));\n        }\n\n        boolean success = scheduleMessageService.correctDelayOffset();\n\n        System.out.printf(\"correctDelayOffset %s\", success);\n\n        offsetTable = (ConcurrentMap<Integer, Long>) field.get(scheduleMessageService);\n\n        for (long offset : offsetTable.values()) {\n            assertEquals(0, offset);\n        }\n    }\n\n    @Test\n    public void testDeliverDelayedMessageTimerTask() throws Exception {\n        assertThat(messageStore.getMessageStoreConfig().isEnableScheduleMessageStats()).isTrue();\n\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic)).isNull();\n\n        MessageExtBrokerInner msg = buildMessage();\n        int realQueueId = msg.getQueueId();\n        // set delayLevel,and send delay message\n        msg.setDelayTimeLevel(delayLevel);\n        HookUtils.handleScheduleMessage(brokerController, msg);\n        PutMessageResult result = messageStore.putMessage(msg);\n        assertThat(result.isOk()).isTrue();\n\n        // consumer message\n        int delayQueueId = ScheduleMessageService.delayLevel2QueueId(delayLevel);\n        assertThat(delayQueueId).isEqualTo(delayLevel - 1);\n\n        Long offset = result.getAppendMessageResult().getLogicsOffset();\n\n        // now, no message in queue,must wait > delayTime\n        GetMessageResult messageResult = getMessage(realQueueId, offset);\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.NO_MESSAGE_IN_QUEUE);\n\n        // timer run maybe delay, then consumer message again\n        // and wait offsetTable\n        TimeUnit.SECONDS.sleep(15);\n        scheduleMessageService.buildRunningStats(new HashMap<>());\n\n        messageResult = getMessage(realQueueId, offset);\n        // now,found the message\n        assertThat(messageResult.getStatus()).isEqualTo(GetMessageStatus.FOUND);\n\n        // get the stats change\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_SIZE, topic).getValue().sum()).isEqualTo(messageResult.getBufferTotalSize());\n\n        // get the message body\n        ByteBuffer byteBuffer = ByteBuffer.allocate(messageResult.getBufferTotalSize());\n        List<ByteBuffer> byteBufferList = messageResult.getMessageBufferList();\n        for (ByteBuffer bb : byteBufferList) {\n            byteBuffer.put(bb);\n        }\n\n        // warp and decode the message\n        byteBuffer = ByteBuffer.wrap(byteBuffer.array());\n        List<MessageExt> msgList = MessageDecoder.decodes(byteBuffer);\n        String retryMsg = new String(msgList.get(0).getBody());\n        assertThat(sendMessage).isEqualTo(retryMsg);\n\n        //  method will wait 10s,so I run it by myself\n        scheduleMessageService.persist();\n\n        // add mapFile release\n        messageResult.release();\n\n    }\n\n    /**\n     * add some [error/no use] code test\n     */\n    @Test\n    public void otherTest() {\n        // the method no use ,why need ?\n        int queueId = ScheduleMessageService.queueId2DelayLevel(delayLevel);\n        assertThat(queueId).isEqualTo(delayLevel + 1);\n\n        // error delayLevelTest\n        Long time = scheduleMessageService.computeDeliverTimestamp(999, 0);\n        assertThat(time).isEqualTo(1000);\n\n        // just decode\n        scheduleMessageService.decode(new DelayOffsetSerializeWrapper().toJson());\n    }\n\n    private GetMessageResult getMessage(int queueId, Long offset) {\n        return messageStore.getMessage(messageGroup, topic,\n            queueId, offset, 1, null);\n\n    }\n\n    @After\n    public void shutdown() throws InterruptedException {\n        scheduleMessageService.shutdown();\n        messageStore.shutdown();\n        messageStore.destroy();\n        File file = new File(messageStoreConfig.getStorePathRootDir());\n        UtilAll.deleteFile(file);\n    }\n\n    public MessageExtBrokerInner buildMessage() {\n\n        byte[] msgBody = sendMessage.getBytes();\n        MessageExtBrokerInner msg = new MessageExtBrokerInner();\n        msg.setTopic(topic);\n        msg.setTags(\"schedule_tag\");\n        msg.setKeys(\"schedule_key\");\n        msg.setBody(msgBody);\n        msg.setSysFlag(0);\n        msg.setBornTimestamp(System.currentTimeMillis());\n        msg.setStoreHost(storeHost);\n        msg.setBornHost(bornHost);\n        return msg;\n    }\n\n    private class MyMessageArrivingListener implements MessageArrivingListener {\n        @Override\n        public void arriving(String topic, int queueId, long logicOffset, long tagsCode, long msgStoreTime,\n            byte[] filterBitMap, Map<String, String> properties) {\n        }\n    }\n}",
            "role": "user"
        },
        {
            "content": "//tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.tools.command.export;\n\nimport com.alibaba.fastjson.JSON;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.Connection;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerConnection;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\nimport org.apache.rocketmq.tools.command.stats.StatsAllSubCommand;\n\npublic class ExportMetricsCommand implements SubCommand {\n\n    @Override\n    public String commandName() {\n        return \"exportMetrics\";\n    }\n\n    @Override\n    public String commandDesc() {\n        return \"Export metrics.\";\n    }\n\n    @Override\n    public Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"c\", \"clusterName\", true, \"choose a cluster to export\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"f\", \"filePath\", true,\n            \"export metrics.json path | default /tmp/rocketmq/export\");\n        opt.setRequired(false);\n        options.addOption(opt);\n        return options;\n    }\n\n    @Override\n    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook)\n        throws SubCommandException {\n\n        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n\n        try {\n            String clusterName = commandLine.getOptionValue('c').trim();\n            String filePath = !commandLine.hasOption('f') ? \"/tmp/rocketmq/export\" : commandLine.getOptionValue('f')\n                .trim();\n\n            defaultMQAdminExt.start();\n\n            Map<String, Map<String, Map<String, Object>>> evaluateReportMap = new HashMap<>();\n            Map<String, Double> totalTpsMap = new HashMap<>();\n            Map<String, Long> totalOneDayNumMap = new HashMap<>();\n            initTotalMap(totalTpsMap, totalOneDayNumMap);\n\n            ClusterInfo clusterInfoSerializeWrapper = defaultMQAdminExt.examineBrokerClusterInfo();\n            Set<String> brokerNameSet = clusterInfoSerializeWrapper.getClusterAddrTable().get(clusterName);\n            for (String brokerName : brokerNameSet) {\n                BrokerData brokerData = clusterInfoSerializeWrapper.getBrokerAddrTable().get(brokerName);\n                if (brokerData != null) {\n                    String addr = brokerData.getBrokerAddrs().get(0L);\n\n                    KVTable kvTable = defaultMQAdminExt.fetchBrokerRuntimeStats(addr);\n\n                    Properties properties = defaultMQAdminExt.getBrokerConfig(addr);\n\n                    SubscriptionGroupWrapper subscriptionGroupWrapper = defaultMQAdminExt.getUserSubscriptionGroup(addr,\n                        10000);\n\n                    Map<String, Map<String, Object>> brokerInfo = new HashMap<>();\n\n                    //broker environment,machine configuration\n                    brokerInfo.put(\"runtimeEnv\", getRuntimeEnv(kvTable, properties));\n\n                    brokerInfo.put(\"runtimeQuota\",\n                        getRuntimeQuota(kvTable, defaultMQAdminExt, addr, totalTpsMap,\n                            totalOneDayNumMap, subscriptionGroupWrapper));\n\n                    // runtime version\n                    brokerInfo.put(\"runtimeVersion\",\n                        getRuntimeVersion(defaultMQAdminExt, subscriptionGroupWrapper));\n\n                    evaluateReportMap.put(brokerName, brokerInfo);\n                }\n\n            }\n\n            String path = filePath + \"/metrics.json\";\n\n            Map<String, Object> totalData = new HashMap<>();\n            totalData.put(\"totalTps\", totalTpsMap);\n            totalData.put(\"totalOneDayNum\", totalOneDayNumMap);\n\n            Map<String, Object> result = new HashMap<>();\n            result.put(\"evaluateReport\", evaluateReportMap);\n            result.put(\"totalData\", totalData);\n\n            MixAll.string2FileNotSafe(JSON.toJSONString(result, true), path);\n            System.out.printf(\"export %s success\", path);\n        } catch (Exception e) {\n            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n        } finally {\n            defaultMQAdminExt.shutdown();\n        }\n\n    }\n\n    private Map<String, Object> getRuntimeVersion(DefaultMQAdminExt defaultMQAdminExt,\n        SubscriptionGroupWrapper subscriptionGroupWrapper) {\n        Map<String, Object> runtimeVersionMap = new HashMap();\n\n        Set<String> clientInfoSet = new HashSet<>();\n        for (Map.Entry<String, SubscriptionGroupConfig> entry : subscriptionGroupWrapper\n            .getSubscriptionGroupTable().entrySet()) {\n            try {\n                ConsumerConnection cc = defaultMQAdminExt.examineConsumerConnectionInfo(\n                    entry.getValue().getGroupName());\n                for (Connection conn : cc.getConnectionSet()) {\n                    String clientInfo = conn.getLanguage() + \"%\" + MQVersion.getVersionDesc(conn.getVersion());\n                    clientInfoSet.add(clientInfo);\n                }\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        runtimeVersionMap.put(\"rocketmqVersion\", MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION));\n        runtimeVersionMap.put(\"clientInfo\", clientInfoSet);\n        return runtimeVersionMap;\n    }\n\n    private Map<String, Object> getRuntimeEnv(KVTable kvTable, Properties properties) {\n        Map<String, Object> runtimeEnvMap = new HashMap<>();\n        runtimeEnvMap.put(\"cpuNum\", properties.getProperty(\"clientCallbackExecutorThreads\"));\n        runtimeEnvMap.put(\"totalMemKBytes\", kvTable.getTable().get(\"totalMemKBytes\"));\n        return runtimeEnvMap;\n    }\n\n    private Map<String, Object> getRuntimeQuota(KVTable kvTable, DefaultMQAdminExt defaultMQAdminExt, String brokerAddr,\n        Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap,\n        SubscriptionGroupWrapper subscriptionGroupWrapper)\n        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {\n        TopicConfigSerializeWrapper topicConfigSerializeWrapper = defaultMQAdminExt.getUserTopicConfig(\n            brokerAddr, false, 10000);\n\n        BrokerStatsData transStatsData = null;\n\n        try {\n            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS,\n                TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        BrokerStatsData scheduleStatsData = null;\n        try {\n            scheduleStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,\n                Stats.TOPIC_PUT_NUMS, TopicValidator.RMQ_SYS_SCHEDULE_TOPIC);\n        } catch (MQClientException e) {\n        }\n\n        Map<String, Object> runtimeQuotaMap = new HashMap<>();\n        //disk use ratio\n        Map<String, Object> diskRatioMap = new HashMap<>();\n        diskRatioMap.put(\"commitLogDiskRatio\", kvTable.getTable().get(\"commitLogDiskRatio\"));\n        diskRatioMap.put(\"consumeQueueDiskRatio\", kvTable.getTable().get(\"consumeQueueDiskRatio\"));\n        runtimeQuotaMap.put(\"diskRatio\", diskRatioMap);\n\n        //inTps and outTps\n        Map<String, Double> tpsMap = new HashMap<>();\n        double normalInTps = 0;\n        double normalOutTps = 0;\n        String putTps = kvTable.getTable().get(\"putTps\");\n        String getTransferredTps = kvTable.getTable().get(\"getTransferredTps\");\n        String[] inTpss = putTps.split(\" \");\n        if (inTpss.length > 0) {\n            normalInTps = Double.parseDouble(inTpss[0]);\n        }\n\n        String[] outTpss = getTransferredTps.split(\" \");\n        if (outTpss.length > 0) {\n            normalOutTps = Double.parseDouble(outTpss[0]);\n        }\n\n        double transInTps = null != transStatsData ? transStatsData.getStatsMinute().getTps() : 0.0;\n        double scheduleInTps = null != scheduleStatsData ? scheduleStatsData.getStatsMinute().getTps() : 0.0;\n\n        long transOneDayInNum = null != transStatsData ? StatsAllSubCommand.compute24HourSum(transStatsData) : 0;\n        long scheduleOneDayInNum = null != scheduleStatsData ? StatsAllSubCommand.compute24HourSum(scheduleStatsData) : 0;\n\n        //current minute tps\n        tpsMap.put(\"normalInTps\", normalInTps);\n        tpsMap.put(\"normalOutTps\", normalOutTps);\n        tpsMap.put(\"transInTps\", transInTps);\n        tpsMap.put(\"scheduleInTps\", scheduleInTps);\n        runtimeQuotaMap.put(\"tps\", tpsMap);\n\n        //one day num\n        Map<String, Long> oneDayNumMap = new HashMap<>();\n        long normalOneDayInNum = Long.parseLong(kvTable.getTable().get(\"msgPutTotalTodayMorning\")) -\n            Long.parseLong(kvTable.getTable().get(\"msgPutTotalYesterdayMorning\"));\n        long normalOneDayOutNum = Long.parseLong(kvTable.getTable().get(\"msgGetTotalTodayMorning\")) -\n            Long.parseLong(kvTable.getTable().get(\"msgGetTotalYesterdayMorning\"));\n        oneDayNumMap.put(\"normalOneDayInNum\", normalOneDayInNum);\n        oneDayNumMap.put(\"normalOneDayOutNum\", normalOneDayOutNum);\n        oneDayNumMap.put(\"transOneDayInNum\", transOneDayInNum);\n        oneDayNumMap.put(\"scheduleOneDayInNum\", scheduleOneDayInNum);\n        runtimeQuotaMap.put(\"oneDayNum\", oneDayNumMap);\n\n        //all broker current minute tps\n        totalTpsMap.put(\"totalNormalInTps\", totalTpsMap.get(\"totalNormalInTps\") + normalInTps);\n        totalTpsMap.put(\"totalNormalOutTps\", totalTpsMap.get(\"totalNormalOutTps\") + normalOutTps);\n        totalTpsMap.put(\"totalTransInTps\", totalTpsMap.get(\"totalTransInTps\") + transInTps);\n        totalTpsMap.put(\"totalScheduleInTps\", totalTpsMap.get(\"totalScheduleInTps\") + scheduleInTps);\n\n\n        //all broker one day num\n        totalOneDayNumMap.put(\"normalOneDayInNum\", totalOneDayNumMap.get(\"normalOneDayInNum\") + normalOneDayInNum);\n        totalOneDayNumMap.put(\"normalOneDayOutNum\", totalOneDayNumMap.get(\"normalOneDayOutNum\") + normalOneDayOutNum);\n        totalOneDayNumMap.put(\"transOneDayInNum\", totalOneDayNumMap.get(\"transOneDayInNum\") + transOneDayInNum);\n        totalOneDayNumMap.put(\"scheduleOneDayInNum\", totalOneDayNumMap.get(\"scheduleOneDayInNum\") + scheduleOneDayInNum);\n\n        // putMessageAverageSize\n        runtimeQuotaMap.put(\"messageAverageSize\", kvTable.getTable().get(\"putMessageAverageSize\"));\n\n        //topicSize\n        runtimeQuotaMap.put(\"topicSize\", topicConfigSerializeWrapper.getTopicConfigTable().size());\n        runtimeQuotaMap.put(\"groupSize\", subscriptionGroupWrapper.getSubscriptionGroupTable().size());\n        return runtimeQuotaMap;\n    }\n\n    private void initTotalMap(Map<String, Double> totalTpsMap, Map<String, Long> totalOneDayNumMap) {\n        totalTpsMap.put(\"totalNormalInTps\", 0.0);\n        totalTpsMap.put(\"totalNormalOutTps\", 0.0);\n        totalTpsMap.put(\"totalTransInTps\", 0.0);\n        totalTpsMap.put(\"totalScheduleInTps\", 0.0);\n\n        totalOneDayNumMap.put(\"normalOneDayInNum\", 0L);\n        totalOneDayNumMap.put(\"normalOneDayOutNum\", 0L);\n        totalOneDayNumMap.put(\"transOneDayInNum\", 0L);\n        totalOneDayNumMap.put(\"scheduleOneDayInNum\", 0L);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.rocketmq.tools.command.stats;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.protocol.admin.ConsumeStats;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerStatsData;\nimport org.apache.rocketmq.remoting.protocol.body.GroupList;\nimport org.apache.rocketmq.remoting.protocol.body.TopicList;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\nimport org.apache.rocketmq.tools.command.SubCommand;\nimport org.apache.rocketmq.tools.command.SubCommandException;\n\npublic class StatsAllSubCommand implements SubCommand {\n    public static void printTopicDetail(final DefaultMQAdminExt admin, final String topic, final boolean activeTopic)\n        throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n        TopicRouteData topicRouteData = admin.examineTopicRouteInfo(topic);\n\n        GroupList groupList = admin.queryTopicConsumeByWho(topic);\n\n        double inTPS = 0;\n\n        long inMsgCntToday = 0;\n\n        for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n            String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n            if (masterAddr != null) {\n                try {\n                    BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.TOPIC_PUT_NUMS, topic);\n                    inTPS += bsd.getStatsMinute().getTps();\n                    inMsgCntToday += compute24HourSum(bsd);\n                } catch (Exception e) {\n                }\n            }\n        }\n\n        if (groupList != null && !groupList.getGroupList().isEmpty()) {\n\n            for (String group : groupList.getGroupList()) {\n                double outTPS = 0;\n                long outMsgCntToday = 0;\n\n                for (BrokerData bd : topicRouteData.getBrokerDatas()) {\n                    String masterAddr = bd.getBrokerAddrs().get(MixAll.MASTER_ID);\n                    if (masterAddr != null) {\n                        try {\n                            String statsKey = String.format(\"%s@%s\", topic, group);\n                            BrokerStatsData bsd = admin.viewBrokerStatsData(masterAddr, Stats.GROUP_GET_NUMS, statsKey);\n                            outTPS += bsd.getStatsMinute().getTps();\n                            outMsgCntToday += compute24HourSum(bsd);\n                        } catch (Exception e) {\n                        }\n                    }\n                }\n\n                long accumulate = 0;\n                try {\n                    ConsumeStats consumeStats = admin.examineConsumeStats(group, topic);\n                    if (consumeStats != null) {\n                        accumulate = consumeStats.computeTotalDiff();\n                        if (accumulate < 0) {\n                            accumulate = 0;\n                        }\n                    }\n                } catch (Exception e) {\n                }\n\n                if (!activeTopic || inMsgCntToday > 0 ||\n                    outMsgCntToday > 0) {\n\n                    System.out.printf(\"%-64s  %-64s %12d %11.2f %11.2f %14d %14d%n\",\n                        UtilAll.frontStringAtLeast(topic, 64),\n                        UtilAll.frontStringAtLeast(group, 64),\n                        accumulate,\n                        inTPS,\n                        outTPS,\n                        inMsgCntToday,\n                        outMsgCntToday\n                    );\n                }\n            }\n        } else {\n            if (!activeTopic || inMsgCntToday > 0) {\n\n                System.out.printf(\"%-64s  %-64s %12d %11.2f %11s %14d %14s%n\",\n                    UtilAll.frontStringAtLeast(topic, 64),\n                    \"\",\n                    0,\n                    inTPS,\n                    \"\",\n                    inMsgCntToday,\n                    \"NO_CONSUMER\"\n                );\n            }\n        }\n    }\n\n    public static long compute24HourSum(BrokerStatsData bsd) {\n        if (bsd.getStatsDay().getSum() != 0) {\n            return bsd.getStatsDay().getSum();\n        }\n\n        if (bsd.getStatsHour().getSum() != 0) {\n            return bsd.getStatsHour().getSum();\n        }\n\n        if (bsd.getStatsMinute().getSum() != 0) {\n            return bsd.getStatsMinute().getSum();\n        }\n\n        return 0;\n    }\n\n    @Override\n    public String commandName() {\n        return \"statsAll\";\n    }\n\n    @Override\n    public String commandDesc() {\n        return \"Topic and Consumer tps stats.\";\n    }\n\n    @Override\n    public Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"a\", \"activeTopic\", false, \"print active topic only\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"print select topic only\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }\n\n    @Override\n    public void execute(CommandLine commandLine, Options options, RPCHook rpcHook) throws SubCommandException {\n        DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);\n\n        defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));\n\n        try {\n            defaultMQAdminExt.start();\n\n            TopicList topicList = defaultMQAdminExt.fetchAllTopicList();\n\n            System.out.printf(\"%-64s  %-64s %12s %11s %11s %14s %14s%n\",\n                \"#Topic\",\n                \"#Consumer Group\",\n                \"#Accumulation\",\n                \"#InTPS\",\n                \"#OutTPS\",\n                \"#InMsg24Hour\",\n                \"#OutMsg24Hour\"\n            );\n\n            boolean activeTopic = commandLine.hasOption('a');\n            String selectTopic = commandLine.getOptionValue('t');\n\n            for (String topic : topicList.getTopicList()) {\n                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)) {\n                    continue;\n                }\n\n                if (selectTopic != null && !selectTopic.isEmpty() && !topic.equals(selectTopic)) {\n                    continue;\n                }\n\n                try {\n                    printTopicDetail(defaultMQAdminExt, topic, activeTopic);\n                } catch (Exception e) {\n                }\n            }\n        } catch (Exception e) {\n            throw new SubCommandException(this.getClass().getSimpleName() + \" command failed\", e);\n        } finally {\n            defaultMQAdminExt.shutdown();\n        }\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "\n{\n    \"refactorings\": {\n        \"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\": [\n            {\n                \"fromLine\": 1,\n                \"toLine\": 1,\n                \"oldContent\": \"package org.apache.rocketmq.store.stats;\",\n                \"newContent\": \"package org.apache.rocketmq.store.stats;\\n\\nimport org.apache.rocketmq.store.stats.dataclumps.StatsKeyBuilder;\"\n            },\n            {\n                \"fromLine\": 112,\n                \"toLine\": 112,\n                \"oldContent\": \"    public String buildStatsKey(String topic, String group) {\",\n                \"newContent\": \"    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 113,\n                \"toLine\": 113,\n                \"oldContent\": \"        StringBuilder strBuilder;\",\n                \"newContent\": \"        return statsKeyBuilder.buildStatsKey();\"\n            },\n            {\n                \"fromLine\": 114,\n                \"toLine\": 118,\n                \"oldContent\": \"        if (topic != null && group != null) {\\n            strBuilder = new StringBuilder(topic.length() + group.length() + 1);\\n        } else {\\n            strBuilder = new StringBuilder();\\n        }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 119,\n                \"toLine\": 121,\n                \"oldContent\": \"        strBuilder.append(topic).append(\\\"@\\\").append(group);\\n        return strBuilder.toString();\\n    }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 123,\n                \"toLine\": 123,\n                \"oldContent\": \"    public String buildStatsKey(String topic, int queueId) {\",\n                \"newContent\": \"    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 124,\n                \"toLine\": 124,\n                \"oldContent\": \"        StringBuilder strBuilder;\",\n                \"newContent\": \"        return statsKeyBuilder.buildStatsKey();\"\n            },\n            {\n                \"fromLine\": 125,\n                \"toLine\": 129,\n                \"oldContent\": \"        if (topic != null) {\\n            strBuilder = new StringBuilder(topic.length() + 5);\\n        } else {\\n            strBuilder = new StringBuilder();\\n        }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 130,\n                \"toLine\": 132,\n                \"oldContent\": \"        strBuilder.append(topic).append(\\\"@\\\").append(queueId);\\n        return strBuilder.toString();\\n    }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 134,\n                \"toLine\": 134,\n                \"oldContent\": \"    public String buildStatsKey(String topic, int queueId, String group) {\",\n                \"newContent\": \"    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 135,\n                \"toLine\": 135,\n                \"oldContent\": \"        StringBuilder strBuilder;\",\n                \"newContent\": \"        return statsKeyBuilder.buildStatsKey();\"\n            },\n            {\n                \"fromLine\": 136,\n                \"toLine\": 140,\n                \"oldContent\": \"        if (topic != null && group != null) {\\n            strBuilder = new StringBuilder(topic.length() + group.length() + 6);\\n        } else {\\n            strBuilder = new StringBuilder();\\n        }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 141,\n                \"toLine\": 143,\n                \"oldContent\": \"        strBuilder.append(topic).append(\\\"@\\\").append(queueId).append(\\\"@\\\").append(group);\\n        return strBuilder.toString();\\n    }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 145,\n                \"toLine\": 145,\n                \"oldContent\": \"    public String buildStatsKey(int queueId, String topic, String group) {\",\n                \"newContent\": \"    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 146,\n                \"toLine\": 146,\n                \"oldContent\": \"        StringBuilder strBuilder;\",\n                \"newContent\": \"        return statsKeyBuilder.buildStatsKey();\"\n            },\n            {\n                \"fromLine\": 147,\n                \"toLine\": 151,\n                \"oldContent\": \"        if (topic != null && group != null) {\\n            strBuilder = new StringBuilder(topic.length() + group.length() + 6);\\n        } else {\\n            strBuilder = new StringBuilder();\\n        }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 152,\n                \"toLine\": 154,\n                \"oldContent\": \"        strBuilder.append(queueId).append(\\\"@\\\").append(topic).append(\\\"@\\\").append(group);\\n        return strBuilder.toString();\\n    }\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 156,\n                \"toLine\": 156,\n                \"oldContent\": \"    public void incQueuePutNums(final String topic, final Integer queueId) {\",\n                \"newContent\": \"    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 157,\n                \"toLine\": 157,\n                \"oldContent\": \"        if (enableQueueStat) {\",\n                \"newContent\": \"        if (enableQueueStat) {\\n            String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 158,\n                \"toLine\": 158,\n                \"oldContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);\",\n                \"newContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, 1, 1);\"\n            },\n            {\n                \"fromLine\": 161,\n                \"toLine\": 161,\n                \"oldContent\": \"    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {\",\n                \"newContent\": \"    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\"\n            },\n            {\n                \"fromLine\": 162,\n                \"toLine\": 162,\n                \"oldContent\": \"        if (enableQueueStat) {\",\n                \"newContent\": \"        if (enableQueueStat) {\\n            String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 163,\n                \"toLine\": 163,\n                \"oldContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);\",\n                \"newContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, num, times);\"\n            },\n            {\n                \"fromLine\": 166,\n                \"toLine\": 166,\n                \"oldContent\": \"    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {\",\n                \"newContent\": \"    public void incQueuePutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\"\n            },\n            {\n                \"fromLine\": 167,\n                \"toLine\": 167,\n                \"oldContent\": \"        if (enableQueueStat) {\",\n                \"newContent\": \"        if (enableQueueStat) {\\n            String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 168,\n                \"toLine\": 168,\n                \"oldContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);\",\n                \"newContent\": \"            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(statsKey, size, 1);\"\n            },\n            {\n                \"fromLine\": 171,\n                \"toLine\": 171,\n                \"oldContent\": \"    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {\",\n                \"newContent\": \"    public void incQueueGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 172,\n                \"toLine\": 172,\n                \"oldContent\": \"        if (enableQueueStat) {\",\n                \"newContent\": \"        if (enableQueueStat) {\\n            String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 173,\n                \"toLine\": 173,\n                \"oldContent\": \"            final String statsKey = buildStatsKey(topic, queueId, group);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 174,\n                \"toLine\": 174,\n                \"oldContent\": \"            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 177,\n                \"toLine\": 177,\n                \"oldContent\": \"    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {\",\n                \"newContent\": \"    public void incQueueGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 178,\n                \"toLine\": 178,\n                \"oldContent\": \"        if (enableQueueStat) {\",\n                \"newContent\": \"        if (enableQueueStat) {\\n            String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 179,\n                \"toLine\": 179,\n                \"oldContent\": \"            final String statsKey = buildStatsKey(topic, queueId, group);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 180,\n                \"toLine\": 180,\n                \"oldContent\": \"            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 183,\n                \"toLine\": 183,\n                \"oldContent\": \"    public void incConsumerRegisterTime(final int incValue) {\",\n                \"newContent\": \"    public void incConsumerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 184,\n                \"toLine\": 184,\n                \"oldContent\": \"        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\\n        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 187,\n                \"toLine\": 187,\n                \"oldContent\": \"    public void incProducerRegisterTime(final int incValue) {\",\n                \"newContent\": \"    public void incProducerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 188,\n                \"toLine\": 188,\n                \"oldContent\": \"        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\\n        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 191,\n                \"toLine\": 191,\n                \"oldContent\": \"    public void incTopicPutNums(final String topic) {\",\n                \"newContent\": \"    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder) {\"\n            },\n            {\n                \"fromLine\": 192,\n                \"toLine\": 192,\n                \"oldContent\": \"        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, 1, 1);\"\n            },\n            {\n                \"fromLine\": 195,\n                \"toLine\": 195,\n                \"oldContent\": \"    public void incTopicPutNums(final String topic, int num, int times) {\",\n                \"newContent\": \"    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\"\n            },\n            {\n                \"fromLine\": 196,\n                \"toLine\": 196,\n                \"oldContent\": \"        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, num, times);\"\n            },\n            {\n                \"fromLine\": 199,\n                \"toLine\": 199,\n                \"oldContent\": \"    public void incTopicPutSize(final String topic, final int size) {\",\n                \"newContent\": \"    public void incTopicPutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\"\n            },\n            {\n                \"fromLine\": 200,\n                \"toLine\": 200,\n                \"oldContent\": \"        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(statsKey, size, 1);\"\n            },\n            {\n                \"fromLine\": 203,\n                \"toLine\": 203,\n                \"oldContent\": \"    public void incGroupGetNums(final String group, final String topic, final int incValue) {\",\n                \"newContent\": \"    public void incGroupGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 204,\n                \"toLine\": 204,\n                \"oldContent\": \"        final String statsKey = buildStatsKey(topic, group);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 205,\n                \"toLine\": 205,\n                \"oldContent\": \"        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 208,\n                \"toLine\": 208,\n                \"oldContent\": \"    public void incGroupCkNums(final String group, final String topic, final int incValue) {\",\n                \"newContent\": \"    public void incGroupCkNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 209,\n                \"toLine\": 209,\n                \"oldContent\": \"        final String statsKey = buildStatsKey(topic, group);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 210,\n                \"toLine\": 210,\n                \"oldContent\": \"        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 213,\n                \"toLine\": 213,\n                \"oldContent\": \"    public void incGroupAckNums(final String group, final String topic, final int incValue) {\",\n                \"newContent\": \"    public void incGroupAckNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 214,\n                \"toLine\": 214,\n                \"oldContent\": \"        final String statsKey = buildStatsKey(topic, group);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 215,\n                \"toLine\": 215,\n                \"oldContent\": \"        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 218,\n                \"toLine\": 218,\n                \"oldContent\": \"    public void incGroupGetSize(final String group, final String topic, final int incValue) {\",\n                \"newContent\": \"    public void incGroupGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 219,\n                \"toLine\": 219,\n                \"oldContent\": \"        final String statsKey = buildStatsKey(topic, group);\",\n                \"newContent\": \"        String statsKey = buildStatsKey(statsKeyBuilder);\"\n            },\n            {\n                \"fromLine\": 220,\n                \"toLine\": 220,\n                \"oldContent\": \"        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\",\n                \"newContent\": \"        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\"\n            },\n            {\n                \"fromLine\": 223,\n                \"toLine\": 223,\n                \"oldContent\": \"    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {\",\n                \"newContent\": \"    public void incGroupGetLatency(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\"\n            },\n            {\n                \"fromLine\": 224,\n                \"toLine\": 224,\n                \"oldContent\": \"        String statsKey;\",\n",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[497,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[502,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[507,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[512,5] illegal start of expression\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :rocketmq-store\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.store.stats.dataclumps.StatsKeyBuilder;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";\n    public static final String GROUP_CK_NUMS = \"GROUP_CK_NUMS\";\n    public static final String DLQ_PUT_NUMS = \"DLQ_PUT_NUMS\";\n    public static final String BROKER_ACK_NUMS = \"BROKER_ACK_NUMS\";\n    public static final String BROKER_CK_NUMS = \"BROKER_CK_NUMS\";\n    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String SNDBCK2DLQ_TIMES = \"SNDBCK2DLQ_TIMES\";\n\n    public static final String COMMERCIAL_OWNER = \"Owner\";\n\n    public static final String ACCOUNT_OWNER_PARENT = \"OWNER_PARENT\";\n    public static final String ACCOUNT_OWNER_SELF = \"OWNER_SELF\";\n\n    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;\n    public static final String ACCOUNT_AUTH_TYPE = \"AUTH_TYPE\";\n\n    public static final String ACCOUNT_SEND = \"SEND\";\n    public static final String ACCOUNT_RCV = \"RCV\";\n    public static final String ACCOUNT_SEND_BACK = \"SEND_BACK\";\n    public static final String ACCOUNT_SEND_BACK_TO_DLQ = \"SEND_BACK_TO_DLQ\";\n    public static final String ACCOUNT_AUTH_FAILED = \"AUTH_FAILED\";\n    public static final String ACCOUNT_SEND_REJ = \"SEND_REJ\";\n    public static final String ACCOUNT_REV_REJ = \"RCV_REJ\";\n\n    public static final String MSG_NUM = \"MSG_NUM\";\n    public static final String MSG_SIZE = \"MSG_SIZE\";\n    public static final String SUCCESS_MSG_NUM = \"SUCCESS_MSG_NUM\";\n    public static final String FAILURE_MSG_NUM = \"FAILURE_MSG_NUM\";\n    public static final String COMMERCIAL_MSG_NUM = \"COMMERCIAL_MSG_NUM\";\n    public static final String SUCCESS_REQ_NUM = \"SUCCESS_REQ_NUM\";\n    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time\n    public static final String PRODUCER_REGISTER_TIME = \"PRODUCER_REGISTER_TIME\";\n    public static final String CHANNEL_ACTIVITY = \"CHANNEL_ACTIVITY\";\n    public static final String CHANNEL_ACTIVITY_CONNECT = \"CONNECT\";\n    public static final String CHANNEL_ACTIVITY_IDLE = \"IDLE\";\n    public static final String CHANNEL_ACTIVITY_EXCEPTION = \"EXCEPTION\";\n    public static final String CHANNEL_ACTIVITY_CLOSE = \"CLOSE\";\n\n    /**\n     * read disk follow stats\n     */\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);\n    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(\n        LoggerName.COMMERCIAL_LOGGER_NAME);\n    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);\n    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(\n        LoggerName.DLQ_STATS_LOGGER_NAME);\n    private ScheduledExecutorService scheduledExecutorService;\n    private ScheduledExecutorService commercialExecutor;\n    private ScheduledExecutorService accountExecutor;\n\n    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();\n    private final String clusterName;\n    private final boolean enableQueueStat;\n    private MomentStatsItemSet momentStatsItemSetFallSize;\n    private MomentStatsItemSet momentStatsItemSetFallTime;\n\n    private final StatisticsManager accountStatManager = new StatisticsManager();\n    private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;\n\n    private BrokerConfig brokerConfig;\n\n    public BrokerStatsManager(BrokerConfig brokerConfig) {\n        this.brokerConfig = brokerConfig;\n        this.enableQueueStat = brokerConfig.isEnableDetailStat();\n        initScheduleService();\n        this.clusterName = brokerConfig.getBrokerClusterName();\n        init();\n    }\n\n    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {\n        this.clusterName = clusterName;\n        this.enableQueueStat = enableQueueStat;\n        initScheduleService();\n        init();\n    }\n\n    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n\n        this.statsTable.put(CONSUMER_REGISTER_TIME,\n            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));\n        this.statsTable.put(PRODUCER_REGISTER_TIME,\n            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));\n\n        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));\n\n        StatisticsItemFormatter formatter = new StatisticsItemFormatter();\n        accountStatManager.setBriefMeta(new Pair[] {\n            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),\n            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});\n        String[] itemNames = new String[] {\n            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,\n            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,\n            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,\n            RT, INNER_RT};\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {\n            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = null;\n                try {\n                    strArr = splitAccountStatKey(item.getStatObject());\n                } catch (Exception e) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n\n                // TODO ugly\n                if (strArr == null || strArr.length < 4) {\n                    return false;\n                }\n\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n\n                String kind = item.getStatKind();\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n\n    private void initScheduleService() {\n        this.scheduledExecutorService =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"BrokerStatsThread\", true, brokerConfig));\n        this.commercialExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"CommercialStatsThread\", true, brokerConfig));\n        this.accountExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"AccountStatsThread\", true, brokerConfig));\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallSize() {\n        return momentStatsItemSetFallSize;\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallTime() {\n        return momentStatsItemSetFallTime;\n    }\n\n    public StateGetter getProducerStateGetter() {\n        return producerStateGetter;\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public StateGetter getConsumerStateGetter() {\n        return consumerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n\n    public void start() {\n    }\n\n    public void shutdown() {\n        this.scheduledExecutorService.shutdown();\n        this.commercialExecutor.shutdown();\n    }\n\n    public StatsItem getStatsItem(final String statsName, final String statsKey) {\n        try {\n            return this.statsTable.get(statsName).getStatsItem(statsKey);\n        } catch (Exception e) {\n        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");\n    }\n\n    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");\n    }\n\n    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder) {\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, num, times);\n        }\n    }\n\n    public void incQueuePutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(statsKey, size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(statsKey, incValue, 1);\n    }\n\n    public void incProducerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(statsKey, incValue, 1);\n    }\n\n    public void incChannelConnectNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);\n    }\n\n    public void incChannelCloseNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);\n    }\n\n    public void incChannelExceptionNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);\n    }\n\n    public void incChannelIdleNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);\n    }\n\n    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, num, times);\n    }\n\n    public void incTopicPutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(statsKey, size, 1);\n    }\n\n    public void incGroupGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupCkNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupAckNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public void incGroupGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupGetLatency(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey;\n        if (enableQueueStat) {\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            String statsKey = buildStatsKey(statsKeyBuilder);\n            statsKey = buildStatsKey(queueId, topic, group);\n        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);\n    }\n\n    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {\n        StringBuilder statsKey;\n        if (topic != null) {\n            statsKey = new StringBuilder(topic.length() + 6);\n        } else {\n            statsKey = new StringBuilder(6);\n        }\n        statsKey.append(queueId).append(\"@\").append(topic);\n        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);\n    }\n\n    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerAckNums(final int incValue) {\n        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerCkNums(final int incValue) {\n        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public long getBrokerGetNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public long getBrokerPutNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public void incSendBackNums(final String group, final String topic) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }\n\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void incDLQStatValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incCommercialValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final String flowlimitThreshold, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType, flowlimitThreshold);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {\n        StringBuilder strBuilder = new StringBuilder();\n        strBuilder.append(owner);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(type);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType, String flowlimitThreshold) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        strBuilder.append(\"@\");\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String[] splitAccountStatKey(final String accountStatKey) {\n        final String sep = \"\\\\|\";\n        return accountStatKey.split(sep);\n    }\n\n    private StatisticsKindMeta createStatisticsKindMeta(String name,\n        String[] itemNames,\n        ScheduledExecutorService executorService,\n        StatisticsItemFormatter formatter,\n        Logger log,\n        long interval) {\n        final BrokerConfig brokerConfig = this.brokerConfig;\n        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);\n        StatisticsKindMeta kindMeta = new StatisticsKindMeta();\n        kindMeta.setName(name);\n        kindMeta.setItemNames(itemNames);\n        kindMeta.setScheduledPrinter(\n            new StatisticsItemScheduledIncrementPrinter(\n                \"Stat In One Minute: \",\n                printer,\n                executorService,\n                new StatisticsItemScheduledPrinter.InitialDelay() {\n                    @Override\n                    public long get() {\n                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());\n                    }\n                },\n                interval,\n                new String[] {MSG_NUM},\n                new StatisticsItemScheduledIncrementPrinter.Valve() {\n                    @Override\n                    public boolean enabled() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;\n                    }\n\n                    @Override\n                    public boolean printZeroLine() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;\n                    }\n                }\n            )\n        );\n        return kindMeta;\n    }\n\n    public interface StateGetter {\n        boolean online(String instanceId, String group, String topic);\n    }\n\n    public enum StatsType {\n        SEND_SUCCESS,\n        SEND_FAILURE,\n\n        RCV_SUCCESS,\n        RCV_EPOLLS,\n        SEND_BACK,\n        SEND_BACK_TO_DLQ,\n\n        SEND_ORDER,\n        SEND_TIMER,\n        SEND_TRANSACTION,\n\n        PERM_FAILURE\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "{\n    \"refactorings\": {\n        \"store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\": [\n            {\n                \"fromLine\": 497,\n                \"toLine\": 497,\n                \"oldContent\": \"            String statsKey = buildStatsKey(statsKeyBuilder);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 502,\n                \"toLine\": 502,\n                \"oldContent\": \"            String statsKey = buildStatsKey(statsKeyBuilder);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 507,\n                \"toLine\": 507,\n                \"oldContent\": \"            String statsKey = buildStatsKey(statsKeyBuilder);\",\n                \"newContent\": \"\"\n            },\n            {\n                \"fromLine\": 512,\n                \"toLine\": 512,\n                \"oldContent\": \"            String statsKey = buildStatsKey(statsKeyBuilder);\",\n                \"newContent\": \"\"\n            }\n        ]\n    }\n}",
            "role": "assistant"
        },
        {
            "content": "Correct the following errors. Use the same JSON format as in the initial refactoring.",
            "role": "user"
        },
        {
            "content": "[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: \n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[497,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[502,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[507,5] illegal start of expression\n[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[512,5] illegal start of expression\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :rocketmq-store\n",
            "role": "user"
        },
        {
            "content": "Below you find the current state of all the files affected by the errors in the same format as in the initial request.",
            "role": "user"
        },
        {
            "content": "//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.store.stats.dataclumps.StatsKeyBuilder;\n\nimport java.util.HashMap;\nimport java.util.concurrent.ScheduledExecutorService;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.statistics.StatisticsItem;\nimport org.apache.rocketmq.common.statistics.StatisticsItemFormatter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;\nimport org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;\nimport org.apache.rocketmq.common.statistics.StatisticsKindMeta;\nimport org.apache.rocketmq.common.statistics.StatisticsManager;\nimport org.apache.rocketmq.common.stats.MomentStatsItemSet;\nimport org.apache.rocketmq.common.stats.Stats;\nimport org.apache.rocketmq.common.stats.StatsItem;\nimport org.apache.rocketmq.common.stats.StatsItemSet;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.ThreadUtils;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class BrokerStatsManager {\n\n    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;\n    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;\n    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;\n\n    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;\n\n    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;\n    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;\n    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;\n    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;\n    // For commercial\n    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;\n    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;\n    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;\n    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;\n    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;\n    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;\n\n    // Send message latency\n    public static final String TOPIC_PUT_LATENCY = \"TOPIC_PUT_LATENCY\";\n    public static final String GROUP_ACK_NUMS = \"GROUP_ACK_NUMS\";\n    public static final String GROUP_CK_NUMS = \"GROUP_CK_NUMS\";\n    public static final String DLQ_PUT_NUMS = \"DLQ_PUT_NUMS\";\n    public static final String BROKER_ACK_NUMS = \"BROKER_ACK_NUMS\";\n    public static final String BROKER_CK_NUMS = \"BROKER_CK_NUMS\";\n    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = \"BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC\";\n    public static final String SNDBCK2DLQ_TIMES = \"SNDBCK2DLQ_TIMES\";\n\n    public static final String COMMERCIAL_OWNER = \"Owner\";\n\n    public static final String ACCOUNT_OWNER_PARENT = \"OWNER_PARENT\";\n    public static final String ACCOUNT_OWNER_SELF = \"OWNER_SELF\";\n\n    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;\n    public static final String ACCOUNT_AUTH_TYPE = \"AUTH_TYPE\";\n\n    public static final String ACCOUNT_SEND = \"SEND\";\n    public static final String ACCOUNT_RCV = \"RCV\";\n    public static final String ACCOUNT_SEND_BACK = \"SEND_BACK\";\n    public static final String ACCOUNT_SEND_BACK_TO_DLQ = \"SEND_BACK_TO_DLQ\";\n    public static final String ACCOUNT_AUTH_FAILED = \"AUTH_FAILED\";\n    public static final String ACCOUNT_SEND_REJ = \"SEND_REJ\";\n    public static final String ACCOUNT_REV_REJ = \"RCV_REJ\";\n\n    public static final String MSG_NUM = \"MSG_NUM\";\n    public static final String MSG_SIZE = \"MSG_SIZE\";\n    public static final String SUCCESS_MSG_NUM = \"SUCCESS_MSG_NUM\";\n    public static final String FAILURE_MSG_NUM = \"FAILURE_MSG_NUM\";\n    public static final String COMMERCIAL_MSG_NUM = \"COMMERCIAL_MSG_NUM\";\n    public static final String SUCCESS_REQ_NUM = \"SUCCESS_REQ_NUM\";\n    public static final String FAILURE_REQ_NUM = \"FAILURE_REQ_NUM\";\n    public static final String SUCCESS_MSG_SIZE = \"SUCCESS_MSG_SIZE\";\n    public static final String FAILURE_MSG_SIZE = \"FAILURE_MSG_SIZE\";\n    public static final String RT = \"RT\";\n    public static final String INNER_RT = \"INNER_RT\";\n\n    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;\n    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;\n    // Pull Message Latency\n    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;\n\n    // Consumer Register Time\n    public static final String CONSUMER_REGISTER_TIME = \"CONSUMER_REGISTER_TIME\";\n    // Producer Register Time\n    public static final String PRODUCER_REGISTER_TIME = \"PRODUCER_REGISTER_TIME\";\n    public static final String CHANNEL_ACTIVITY = \"CHANNEL_ACTIVITY\";\n    public static final String CHANNEL_ACTIVITY_CONNECT = \"CONNECT\";\n    public static final String CHANNEL_ACTIVITY_IDLE = \"IDLE\";\n    public static final String CHANNEL_ACTIVITY_EXCEPTION = \"EXCEPTION\";\n    public static final String CHANNEL_ACTIVITY_CLOSE = \"CLOSE\";\n\n    /**\n     * read disk follow stats\n     */\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);\n    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(\n        LoggerName.COMMERCIAL_LOGGER_NAME);\n    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);\n    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(\n        LoggerName.DLQ_STATS_LOGGER_NAME);\n    private ScheduledExecutorService scheduledExecutorService;\n    private ScheduledExecutorService commercialExecutor;\n    private ScheduledExecutorService accountExecutor;\n\n    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();\n    private final String clusterName;\n    private final boolean enableQueueStat;\n    private MomentStatsItemSet momentStatsItemSetFallSize;\n    private MomentStatsItemSet momentStatsItemSetFallTime;\n\n    private final StatisticsManager accountStatManager = new StatisticsManager();\n    private StateGetter producerStateGetter;\n    private StateGetter consumerStateGetter;\n\n    private BrokerConfig brokerConfig;\n\n    public BrokerStatsManager(BrokerConfig brokerConfig) {\n        this.brokerConfig = brokerConfig;\n        this.enableQueueStat = brokerConfig.isEnableDetailStat();\n        initScheduleService();\n        this.clusterName = brokerConfig.getBrokerClusterName();\n        init();\n    }\n\n    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {\n        this.clusterName = clusterName;\n        this.enableQueueStat = enableQueueStat;\n        initScheduleService();\n        init();\n    }\n\n    public void init() {\n        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,\n            scheduledExecutorService, log);\n\n        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,\n            scheduledExecutorService, log);\n\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));\n            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));\n        }\n        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,\n            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));\n        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,\n            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));\n\n        this.statsTable.put(SNDBCK2DLQ_TIMES,\n            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));\n\n        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,\n            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,\n            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));\n        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,\n            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));\n\n        this.statsTable.put(CONSUMER_REGISTER_TIME,\n            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));\n        this.statsTable.put(PRODUCER_REGISTER_TIME,\n            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));\n\n        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));\n\n        StatisticsItemFormatter formatter = new StatisticsItemFormatter();\n        accountStatManager.setBriefMeta(new Pair[] {\n            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),\n            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});\n        String[] itemNames = new String[] {\n            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,\n            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,\n            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,\n            RT, INNER_RT};\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(\n            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));\n        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {\n            @Override\n            public boolean online(StatisticsItem item) {\n                String[] strArr = null;\n                try {\n                    strArr = splitAccountStatKey(item.getStatObject());\n                } catch (Exception e) {\n                    log.warn(\"parse account stat key failed, key: {}\", item.getStatObject());\n                    return false;\n                }\n\n                // TODO ugly\n                if (strArr == null || strArr.length < 4) {\n                    return false;\n                }\n\n                String instanceId = strArr[1];\n                String topic = strArr[2];\n                String group = strArr[3];\n\n                String kind = item.getStatKind();\n                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {\n                    return producerStateGetter.online(instanceId, group, topic);\n                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {\n                    return consumerStateGetter.online(instanceId, group, topic);\n                }\n                return false;\n            }\n        });\n    }\n\n    private void initScheduleService() {\n        this.scheduledExecutorService =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"BrokerStatsThread\", true, brokerConfig));\n        this.commercialExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"CommercialStatsThread\", true, brokerConfig));\n        this.accountExecutor =\n            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"AccountStatsThread\", true, brokerConfig));\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallSize() {\n        return momentStatsItemSetFallSize;\n    }\n\n    public MomentStatsItemSet getMomentStatsItemSetFallTime() {\n        return momentStatsItemSetFallTime;\n    }\n\n    public StateGetter getProducerStateGetter() {\n        return producerStateGetter;\n    }\n\n    public void setProducerStateGetter(StateGetter producerStateGetter) {\n        this.producerStateGetter = producerStateGetter;\n    }\n\n    public StateGetter getConsumerStateGetter() {\n        return consumerStateGetter;\n    }\n\n    public void setConsumerStateGetter(StateGetter consumerStateGetter) {\n        this.consumerStateGetter = consumerStateGetter;\n    }\n\n    public void start() {\n    }\n\n    public void shutdown() {\n        this.scheduledExecutorService.shutdown();\n        this.commercialExecutor.shutdown();\n    }\n\n    public StatsItem getStatsItem(final String statsName, final String statsKey) {\n        try {\n            return this.statsTable.get(statsName).getStatsItem(statsKey);\n        } catch (Exception e) {\n        }\n\n        return null;\n    }\n\n    public void onTopicDeleted(final String topic) {\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, \"@\");\n        }\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, \"@\");\n        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, \"@\");\n    }\n\n    public void onGroupDeleted(final String group) {\n        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, \"@\");\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, \"@\");\n        }\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, \"@\");\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, \"@\");\n        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, \"@\");\n    }\n\n    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder) {\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, 1, 1);\n        }\n    }\n\n    public void incQueuePutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(statsKey, num, times);\n        }\n    }\n\n    public void incQueuePutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\n        if (enableQueueStat) {\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(statsKey, size, 1);\n        }\n    }\n\n    public void incQueueGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        if (enableQueueStat) {\n\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incQueueGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        if (enableQueueStat) {\n\n\n\n\n\n\n            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);\n        }\n    }\n\n    public void incConsumerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(statsKey, incValue, 1);\n    }\n\n    public void incProducerRegisterTime(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(statsKey, incValue, 1);\n    }\n\n    public void incChannelConnectNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);\n    }\n\n    public void incChannelCloseNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);\n    }\n\n    public void incChannelExceptionNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);\n    }\n\n    public void incChannelIdleNum() {\n        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);\n    }\n\n    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public void incTopicPutNums(final StatsKeyBuilder statsKeyBuilder, int num, int times) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(statsKey, num, times);\n    }\n\n    public void incTopicPutSize(final StatsKeyBuilder statsKeyBuilder, final int size) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(statsKey, size, 1);\n    }\n\n    public void incGroupGetNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupCkNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupAckNums(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);\n    }\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public String buildStatsKey(StatsKeyBuilder statsKeyBuilder) {\n        return statsKeyBuilder.buildStatsKey();\n\n\n\n    public void incGroupGetSize(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        \n        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);\n    }\n\n    public void incGroupGetLatency(final StatsKeyBuilder statsKeyBuilder, final int incValue) {\n        String statsKey;\n        if (enableQueueStat) {\n\n\n\n\n\n            statsKey = buildStatsKey(queueId, topic, group);\n        } else {\n            statsKey = buildStatsKey(topic, group);\n        }\n        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);\n    }\n\n    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {\n        StringBuilder statsKey;\n        if (topic != null) {\n            statsKey = new StringBuilder(topic.length() + 6);\n        } else {\n            statsKey = new StringBuilder(6);\n        }\n        statsKey.append(queueId).append(\"@\").append(topic);\n        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);\n    }\n\n    public void incBrokerPutNums() {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);\n    }\n\n    public void incBrokerPutNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        incBrokerPutNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerGetNums(final String topic, final int incValue) {\n        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);\n    }\n\n    public void incBrokerAckNums(final int incValue) {\n        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerCkNums(final int incValue) {\n        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {\n        if (TopicValidator.isSystemTopic(topic)) {\n            return;\n        }\n        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);\n    }\n\n    public long getBrokerGetNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public long getBrokerPutNumsWithoutSystemTopic() {\n        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);\n        if (statsItemSet == null) {\n            return 0;\n        }\n        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);\n        if (statsItem == null) {\n            return 0;\n        }\n        return statsItem.getValue().longValue();\n    }\n\n    public void incSendBackNums(final String group, final String topic) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);\n    }\n\n    public double tpsGroupGetNums(final String group, final String topic) {\n        String statsKey = buildStatsKey(statsKeyBuilder);\n        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();\n    }\n\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        final String statsKey = buildStatsKey(queueId, topic, group);\n        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);\n    }\n\n    public void incDLQStatValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incCommercialValue(final String key, final String owner, final String group,\n        final String topic, final String type, final int incValue) {\n        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,\n        final String instanceId, final String group, final String topic,\n        final String msgType, final String flowlimitThreshold, final int incValue) {\n        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,\n            msgType, flowlimitThreshold);\n        this.statsTable.get(key).addValue(statsKey, incValue, 1);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,\n        final String group, final String msgType, final String flowlimitThreshold,\n        final long... incValues) {\n        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);\n        this.accountStatManager.inc(statType, key, incValues);\n    }\n\n    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {\n        StringBuilder strBuilder = new StringBuilder();\n        strBuilder.append(owner);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(type);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,\n        String topic, String group, String msgType, String flowlimitThreshold) {\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(accountOwnerParent);\n        strBuilder.append(\"@\");\n        strBuilder.append(accountOwnerSelf);\n        strBuilder.append(\"@\");\n        strBuilder.append(instanceId);\n        strBuilder.append(\"@\");\n        strBuilder.append(topic);\n        strBuilder.append(\"@\");\n        strBuilder.append(group);\n        strBuilder.append(\"@\");\n        strBuilder.append(msgType);\n        strBuilder.append(\"@\");\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType);\n        return strBuilder.toString();\n    }\n\n    public String buildAccountStatKey(final String owner, final String instanceId,\n        final String topic, final String group,\n        final String msgType, String flowlimitThreshold) {\n        final String sep = \"|\";\n        StringBuffer strBuilder = new StringBuffer();\n        strBuilder.append(owner).append(sep);\n        strBuilder.append(instanceId).append(sep);\n        strBuilder.append(topic).append(sep);\n        strBuilder.append(group).append(sep);\n        strBuilder.append(msgType).append(sep);\n        strBuilder.append(flowlimitThreshold);\n        return strBuilder.toString();\n    }\n\n    public String[] splitAccountStatKey(final String accountStatKey) {\n        final String sep = \"\\\\|\";\n        return accountStatKey.split(sep);\n    }\n\n    private StatisticsKindMeta createStatisticsKindMeta(String name,\n        String[] itemNames,\n        ScheduledExecutorService executorService,\n        StatisticsItemFormatter formatter,\n        Logger log,\n        long interval) {\n        final BrokerConfig brokerConfig = this.brokerConfig;\n        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);\n        StatisticsKindMeta kindMeta = new StatisticsKindMeta();\n        kindMeta.setName(name);\n        kindMeta.setItemNames(itemNames);\n        kindMeta.setScheduledPrinter(\n            new StatisticsItemScheduledIncrementPrinter(\n                \"Stat In One Minute: \",\n                printer,\n                executorService,\n                new StatisticsItemScheduledPrinter.InitialDelay() {\n                    @Override\n                    public long get() {\n                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());\n                    }\n                },\n                interval,\n                new String[] {MSG_NUM},\n                new StatisticsItemScheduledIncrementPrinter.Valve() {\n                    @Override\n                    public boolean enabled() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;\n                    }\n\n                    @Override\n                    public boolean printZeroLine() {\n                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;\n                    }\n                }\n            )\n        );\n        return kindMeta;\n    }\n\n    public interface StateGetter {\n        boolean online(String instanceId, String group, String topic);\n    }\n\n    public enum StatsType {\n        SEND_SUCCESS,\n        SEND_FAILURE,\n\n        RCV_SUCCESS,\n        RCV_EPOLLS,\n        SEND_BACK,\n        SEND_BACK_TO_DLQ,\n\n        SEND_ORDER,\n        SEND_TIMER,\n        SEND_TRANSACTION,\n\n        PERM_FAILURE\n    }\n}\n",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.1
}