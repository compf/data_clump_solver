"{
    "refactorings": {
        "store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": [
            {
                "fromLine": 44,
                "toLine": 68,
                "oldContent": "   @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;\n    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;\n    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;\n ...",
                "newContent": ""
            },
            {
                "fromLine": 172,
                "toLine": 180,
                "oldContent": "if (enableQueueStat) {\n            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));\n  ...",
                "newContent": "if (enableQueueStat) {\n            initStatsItemSet(StatsItemKey.QUEUE_PUT_NUMS, this.scheduledExecutorService, log);\n  ..."
            },
            {
                "fromLine": 332,
                "toLine": 333,
                "oldContent": "this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);\n",
                "newContent": "this.statsTable.get(StatsItemKey.TOPIC_PUT_NUMS.getStatsName()).delValue(topic);\n"
            },
            {
                "fromLine": 418,
                "toLine": 418,
                "oldContent": "public void incTopicPutNums(final String topic) {\n",
                "newContent": "public void incTopicPutNums(final String topic) {\n        incStatsItem(StatsItemKey.TOPIC_PUT_NUMS, topic, 1);\n"
            },
            {
                "fromLine": 519,
                "toLine": 519,
                "oldContent": "public void incBrokerPutNums(final String topic, final int incValue) {\n",
                "newContent": "public void incBrokerPutNums(final String topic, final int incValue) {\n        incStatsItem(StatsItemKey.BROKER_PUT_NUMS, topic, incValue);\n"
            }
            ],
        "common/src/main/java/org/apache/rocketmq/common/stats/Stats.java": [
            {
                "fromLine": 20,
                "toLine": 45,
                "oldContent": "public static final String QUEUE_PUT_NUMS = \"QUEUE_PUT_NUMS\";\n    public static final String ...",
                "newContent": ""
            }
        ],
        "store/src/test/java/org/apache/rocketmq/store/stats/BrokerStatsManagerTest.java": [
            {
                "fromLine": 17,
                "toLine": 77,
                "oldContent": "package org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\n ...",
                "newContent": "package org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.junit.After;\n ..."
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/processor/EndTransactionProcessorTest.java": [
            {
                "fromLine": 104,
                "toLine": 106,
                "oldContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(Stats.BROKER_PUT_NUMS, ...",
                "newContent": "assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n        assertThat(brokerController.getBrokerStatsManager().getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getStatsName(), ..."
            }
        ],
        "broker/src/test/java/org/apache/rocketmq/broker/schedule/ScheduleMessageServiceTest.java": [
            {
                "fromLine": 228,
                "toLine": 230,
                "oldContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(BROKER_PUT_NUMS, brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(TOPIC_PUT_NUMS, topic).getValue().sum()).isEqualTo(1L);",
                "newContent": "        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.BROKER_PUT_NUMS.getStatsName(), brokerConfig.getBrokerClusterName()).getValue().sum()).isEqualTo(1);\n        assertThat(messageStore.getBrokerStatsManager().getStatsItem(StatsItemKey.TOPIC_PUT_NUMS.getStatsName(), topic).getValue().sum()).isEqualTo(1L);"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/export/ExportMetricsCommand.java": [
            {
                "fromLine": 186,
                "toLine": 186,
                "oldContent": "            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr,",
                "newContent": "            transStatsData = defaultMQAdminExt.viewBrokerStatsData(brokerAddr, StatsItemKey.TRANSACTION_CHECK_TIMES.getStatsName()"
            }
        ],
        "tools/src/main/java/org/apache/rocketmq/tools/command/stats/StatsAllSubCommand.java": [
            {
                "fromLine": 73,
                "toLine": 73,
                "oldContent": "                            String statsKey = String.format(\"%s@%s\", topic, group);",
                "newContent": "                            String statsKey = buildStatsKey(topic, group);"
            }
        ]
    },
    "extractedClasses": {
        "common/src/main/java/org/apache/rocketmq/common/stats/StatsItemKey.java": "package org.apache.rocketmq.common.stats;\n\n/**\n * Enum to encapsulate constants for stats items.\n */\npublic enum StatsItemKey {\n    QUEUE_PUT_NUMS(\"QUEUE_PUT_NUMS\"),\n    QUEUE_PUT_SIZE(\"QUEUE_PUT_SIZE\"),\n    QUEUE_GET_NUMS(\"QUEUE_GET_NUMS\"),\n    QUEUE_GET_SIZE(\"QUEUE_GET_SIZE\"),\n    TOPIC_PUT_NUMS(\"TOPIC_PUT_NUMS\"),\n    TOPIC_PUT_SIZE(\"TOPIC_PUT_SIZE\"),\n    GROUP_GET_NUMS(\"GROUP_GET_NUMS\"),\n    GROUP_GET_SIZE(\"GROUP_GET_SIZE\"),\n    SNDBCK_PUT_NUMS(\"SNDBCK_PUT_NUMS\"),\n    BROKER_PUT_NUMS(\"BROKER_PUT_NUMS\"),\n    BROKER_GET_NUMS(\"BROKER_GET_NUMS\"),\n    GROUP_GET_FROM_DISK_NUMS(\"GROUP_GET_FROM_DISK_NUMS\"),\n    GROUP_GET_FROM_DISK_SIZE(\"GROUP_GET_FROM_DISK_SIZE\"),\n    BROKER_GET_FROM_DISK_NUMS(\"BROKER_GET_FROM_DISK_NUMS\"),\n    BROKER_GET_FROM_DISK_SIZE(\"BROKER_GET_FROM_DISK_SIZE\"),\n    COMMERCIAL_SEND_TIMES(\"COMMERCIAL_SEND_TIMES\"),\n    COMMERCIAL_SNDBCK_TIMES(\"COMMERCIAL_SNDBCK_TIMES\"),\n    COMMERCIAL_RCV_TIMES(\"COMMERCIAL_RCV_TIMES\"),\n    COMMERCIAL_RCV_EPOLLS(\"COMMERCIAL_RCV_EPOLLS\"),\n    COMMERCIAL_SEND_SIZE(\"COMMERCIAL_SEND_SIZE\"),\n    COMMERCIAL_RCV_SIZE(\"COMMERCIAL_RCV_SIZE\"),\n    GROUP_GET_FALL_SIZE(\"GROUP_GET_FALL_SIZE\"),\n    GROUP_GET_FALL_TIME(\"GROUP_GET_FALL_TIME\"),\n    TRANSACTION_CHECK_TIMES(\"TRANSACTION_CHECK_TIMES\");\n\n    private final String statsName;\n\n    StatsItemKey(String statsName) {\n        this.statsName = statsName;\n    }\n\n    public String getStatsName() {\n        return statsName;\n    }\n\n    public static String buildStatsKey(String topic, String group) {\n        return topic + \"@\" + group;\n    }\n\n    // Additional methods and functionality can go here, such as formatting help\n}\n"
    }
}"