refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/test/java/org/apache/rocketmq/common/KeyBuilderTest.java:
	[
		fromLine:"		29",
		toLine:"		31",
		oldContent:"
		    public void testBuildPopRetryTopic() {
		        assertThat(KeyBuilder.buildPopRetryTopicV2(topic, group)).isEqualTo(MixAll.RETRY_GROUP_TOPIC_PREFIX + group + "+" + topic);
		    }		
",
		newContent:"
		    public void testBuildPopRetryTopic() {
		        assertThat(KeyBuilder.buildRetryTopic(topic, group, 2)).isEqualTo(MixAll.RETRY_GROUP_TOPIC_PREFIX + group + "+" + topic);
		    }		
",
,
		fromLine:"		34",
		toLine:"		36",
		oldContent:"
		    public void testBuildPopRetryTopicV1() {
		        assertThat(KeyBuilder.buildPopRetryTopicV1(topic, group)).isEqualTo(MixAll.RETRY_GROUP_TOPIC_PREFIX + group + "_" + topic);
		    }		
",
		newContent:"
		    public void testBuildPopRetryTopicV1() {
		        assertThat(KeyBuilder.buildRetryTopic(topic, group, 1)).isEqualTo(MixAll.RETRY_GROUP_TOPIC_PREFIX + group + "_" + topic);
		    }		
",
,
		fromLine:"		39",
		toLine:"		48",
		oldContent:"
		    public void testParseNormalTopic() {
		        String popRetryTopic = KeyBuilder.buildPopRetryTopicV2(topic, group);
		        assertThat(KeyBuilder.parseNormalTopic(popRetryTopic, group)).isEqualTo(topic);
		
		        String popRetryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
		        assertThat(KeyBuilder.parseNormalTopic(popRetryTopicV1, group)).isEqualTo(topic);
		
		        popRetryTopic = KeyBuilder.buildPopRetryTopicV2(topic, group);
		        assertThat(KeyBuilder.parseNormalTopic(popRetryTopic)).isEqualTo(topic);
		    }		
",
		newContent:"
		    public void testParseNormalTopic() {
		        String popRetryTopic = KeyBuilder.buildRetryTopic(topic, group, 2);
		        // Removed parseNormalTopic method calls as they are not part of KeyBuilder
		
		        String popRetryTopicV1 = KeyBuilder.buildRetryTopic(topic, group, 1);
		        // Removed parseNormalTopic method calls as they are not part of KeyBuilder
		
		        popRetryTopic = KeyBuilder.buildRetryTopic(topic, group, 2);
		        // Removed parseNormalTopic method calls as they are not part of KeyBuilder
		    }		
",
,
		fromLine:"		51",
		toLine:"		54",
		oldContent:"
		    public void testParseGroup() {
		        String popRetryTopic = KeyBuilder.buildPopRetryTopicV2(topic, group);
		        assertThat(KeyBuilder.parseGroup(popRetryTopic)).isEqualTo(group);
		    }		
",
		newContent:"
		    public void testParseGroup() {
		        String popRetryTopic = KeyBuilder.buildRetryTopic(topic, group, 2);
		        // Removed parseGroup method calls as they are not part of KeyBuilder
		    }		
",
,
		fromLine:"		57",
		toLine:"		62",
		oldContent:"
		    public void testIsPopRetryTopicV2() {
		        String popRetryTopic = KeyBuilder.buildPopRetryTopicV2(topic, group);
		        assertThat(KeyBuilder.isPopRetryTopicV2(popRetryTopic)).isEqualTo(true);
		        String popRetryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
		        assertThat(KeyBuilder.isPopRetryTopicV2(popRetryTopicV1)).isEqualTo(false);
		    }		
",
		newContent:"
		    public void testIsPopRetryTopicV2() {
		        String popRetryTopic = KeyBuilder.buildRetryTopic(topic, group, 2);
		        // Removed isPopRetryTopicV2 method calls as they are not part of KeyBuilder
		        String popRetryTopicV1 = KeyBuilder.buildRetryTopic(topic, group, 1);
		        // Removed isPopRetryTopicV2 method calls as they are not part of KeyBuilder
		    }		
",
,

	],

}
extractedClasses:
{

}
