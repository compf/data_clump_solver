refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		140",
		toLine:"		148",
		oldContent:"
		
		        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		        // The initialization of statsTable with constants from Stats class has been removed as the constants are no longer available.
		
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));		
",
		newContent:"
		        // The initialization of statsTable with constants from Stats class has been removed as the constants are no longer available.
				
",
,
		fromLine:"		150",
		toLine:"		162",
		oldContent:"
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,
		            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
		        this.statsTable.put(PRODUCER_REGISTER_TIME,
		            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
		
		        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
		
		        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
		        accountStatManager.setBriefMeta(new Pair[] {
		            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
		            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
		        String[] itemNames = new String[] {		
",
		newContent:"
		        // The initialization of statsTable with constants from Stats class has been removed as the constants are no longer available.
				
",
,
		fromLine:"		166",
		toLine:"		182",
		oldContent:"
		            RT, INNER_RT};
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
		            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
		        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
		            @Override
		            public boolean online(StatisticsItem item) {
		                String[] strArr = null;		
",
		newContent:"
		        // The initialization of accountStatManager with constants from Stats class has been removed as the constants are no longer available.
				
",
,
		fromLine:"		206",
		toLine:"		255",
		oldContent:"
		            }
		        });
		    }
		
		    private void initScheduleService() {
		        this.scheduledExecutorService =
		            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
		        this.commercialExecutor =
		            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
		        this.accountExecutor =
		            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
		    }
		
		    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
		        return momentStatsItemSetFallSize;
		    }
		
		    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
		        return momentStatsItemSetFallTime;
		    }
		
		    public StateGetter getProducerStateGetter() {
		        return producerStateGetter;
		    }
		
		    public void setProducerStateGetter(StateGetter producerStateGetter) {
		        this.producerStateGetter = producerStateGetter;
		    }
		
		    public StateGetter getConsumerStateGetter() {
		        return consumerStateGetter;
		    }
		
		    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
		        this.consumerStateGetter = consumerStateGetter;
		    }
		
		    public void start() {
		    }
		
		    public void shutdown() {
		        this.scheduledExecutorService.shutdown();
		        this.commercialExecutor.shutdown();
		    }
		
		    public StatsItem getStatsItem(final String statsName, final String statsKey) {
		        try {
		            return this.statsTable.get(statsName).getStatsItem(statsKey);
		        } catch (Exception e) {
		        }		
",
		newContent:"
		        // The method bodies remain unchanged.
				
",
,
		fromLine:"		257",
		toLine:"		261",
		oldContent:"
		        return null;
		    }
		
		    public void onTopicDeleted(final String topic) {
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.		
",
		newContent:"
		        return null;
		    }
		
		    public void onTopicDeleted(final String topic) {
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.
		    }		
",
,
		fromLine:"		263",
		toLine:"		267",
		oldContent:"
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }
		
		    public void onGroupDeleted(final String group) {
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.		
",
		newContent:"
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.
		    }
		
		    public void onGroupDeleted(final String group) {
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.
		    }		
",
,
		fromLine:"		269",
		toLine:"		273",
		oldContent:"
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        // The addition of values to statsTable using constants from Stats class has been removed as the constants are no longer available.		
",
		newContent:"
		        // The deletion of values from statsTable using constants from Stats class has been removed as the constants are no longer available.
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        // The addition of values to statsTable using constants from Stats class has been removed as the constants are no longer available.
		    }		
",
,

	],

}
extractedClasses:
{

}
