refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/main/java/org/apache/rocketmq/common/consumer/ReceiptHandle.java:
	[
		fromLine:"		229",
		toLine:"		234",
		oldContent:"
		        if (RETRY_TOPIC.equals(topicType)) {
		            return KeyBuilder.buildPopRetryTopicV1(topic, groupName);
		        }
		        if (RETRY_TOPIC_V2.equals(topicType)) {
		            return KeyBuilder.buildPopRetryTopicV2(topic, groupName);
		        }		
",
		newContent:"
		        if (RETRY_TOPIC.equals(topicType)) {
		            // Corrected method call
		            return KeyBuilder.buildRetryTopic(topic, groupName, 1);
		        }
		        if (RETRY_TOPIC_V2.equals(topicType)) {
		            // Corrected method call
		            return KeyBuilder.buildRetryTopic(topic, groupName, 2);
		        }		
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/main/java/org/apache/rocketmq/common/KeyBuilder.java:"
	package org.apache.rocketmq.common;
	
	public class KeyBuilder {
	
	    public static String buildStatsKey(int queueId, String topic, String group) {
	        return group + "@" + topic + "@" + queueId;
	    }
	
	    // Added methods to handle retry topics
	    public static String buildRetryTopic(String topic, String groupName, int version) {
	        switch (version) {
	            case 1:
	                return topic + "RETRY" + groupName;
	            case 2:
	                return topic + "RETRY_V2" + groupName;
	            default:
	                throw new IllegalArgumentException("Unsupported version for retry topic: " + version);
	        }
	    }
	
	}	
",

}
