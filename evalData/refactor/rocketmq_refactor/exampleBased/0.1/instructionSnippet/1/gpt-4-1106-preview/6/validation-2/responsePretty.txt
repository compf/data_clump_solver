refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		147",
		toLine:"		149",
		oldContent:"
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
				
",
		newContent:"
		        this.statsTable.put(StatsKey.SNDBCK2DLQ_TIMES,
		            new StatsItemSet(StatsKey.SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
				
",
,
		fromLine:"		259",
		toLine:"		261",
		oldContent:"
		
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }		
",
		newContent:"
		
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }
				
",
,
		fromLine:"		263",
		toLine:"		268",
		oldContent:"
		
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
				
",
		newContent:"
		
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        this.statsTable.get(StatsKey.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
		    }
				
",
,
		fromLine:"		270",
		toLine:"		272",
		oldContent:"
		
		    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
				
",
		newContent:"
		
		    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
		        this.statsTable.get(StatsKey.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
		    }
				
",
,
		fromLine:"		274",
		toLine:"		276",
		oldContent:"
		
		    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
				
",
		newContent:"
		
		    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
		        this.statsTable.get(StatsKey.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
		    }
				
",
,
		fromLine:"		278",
		toLine:"		280",
		oldContent:"
		
		    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {		
",
		newContent:"
		
		    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(StatsKey.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
		        }
		    }
				
",
,
		fromLine:"		283",
		toLine:"		285",
		oldContent:"
		
		    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {		
",
		newContent:"
		
		    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(StatsKey.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
		        }
		    }
				
",
,
		fromLine:"		288",
		toLine:"		312",
		oldContent:"
		
		    public void incConsumerRegisterTime(final int incValue) {
		        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incProducerRegisterTime(final int incValue) {
		        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incChannelConnectNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
		    }
		
		    public void incChannelCloseNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
		    }
		
		    public void incChannelExceptionNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
		    }
		
		    public void incChannelIdleNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
		    }
				
",
		newContent:"
		
		    public void incConsumerRegisterTime(final int incValue) {
		        this.statsTable.get(StatsKey.CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incProducerRegisterTime(final int incValue) {
		        this.statsTable.get(StatsKey.PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incChannelConnectNum() {
		        this.statsTable.get(StatsKey.CHANNEL_ACTIVITY).addValue(StatsKey.CHANNEL_ACTIVITY_CONNECT, 1, 1);
		    }
		
		    public void incChannelCloseNum() {
		        this.statsTable.get(StatsKey.CHANNEL_ACTIVITY).addValue(StatsKey.CHANNEL_ACTIVITY_CLOSE, 1, 1);
		    }
		
		    public void incChannelExceptionNum() {
		        this.statsTable.get(StatsKey.CHANNEL_ACTIVITY).addValue(StatsKey.CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
		    }
		
		    public void incChannelIdleNum() {
		        this.statsTable.get(StatsKey.CHANNEL_ACTIVITY).addValue(StatsKey.CHANNEL_ACTIVITY_IDLE, 1, 1);
		    }
				
",
,
		fromLine:"		318",
		toLine:"		384",
		oldContent:"
		
		    public void incGroupGetNums(final String group, final String topic, final int incValue) {
		
		
		    public void incGroupCkNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupAckNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public String buildStatsKey(String topic, String group) {
		        StringBuilder strBuilder;
		        if (topic != null && group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(String topic, int queueId) {
		        StringBuilder strBuilder;
		        if (topic != null) {
		            strBuilder = new StringBuilder(topic.length() + 5);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(queueId);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(String topic, int queueId, String group) {
		        StringBuilder strBuilder;
		        if (topic != null && group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
		        } else {
		            strBuilder = a new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(int queueId, String topic, String group) {
		        StringBuilder strBuilder;
		        if (topic != null and group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public void incGroupGetSize(final String group, final String topic, final int incValue) {
		
		
		    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
		        String statsKey;
		        if (enableQueueStat) {
		            statsKey = buildStatsKey(queueId, topic, group);
		        } else {
		            statsKey = buildStatsKey(topic, group);		
",
		newContent:"
		
		    public void incGroupGetNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(StatsKey.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupCkNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(StatsKey.GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupAckNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(StatsKey.GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public String buildStatsKey(String topic, String group) {
		        StringBuilder strBuilder;
		        if (topic != null && group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(String topic, int queueId) {
		        StringBuilder strBuilder;
		        if (topic != null) {
		            strBuilder = new StringBuilder(topic.length() + 5);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(queueId);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(String topic, int queueId, String group) {
		        StringBuilder strBuilder;
		        if (topic != null && group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public String buildStatsKey(int queueId, String topic, String group) {
		        StringBuilder strBuilder;
		        if (topic != null && group != null) {
		            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
		        } else {
		            strBuilder = new StringBuilder();
		        }
		        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
		        return strBuilder.toString();
		    }
		
		    public void incGroupGetSize(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(StatsKey.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
		        String statsKey;
		        if (enableQueueStat) {
		            statsKey = buildStatsKey(queueId, topic, group);
		        } else {
		            statsKey = buildStatsKey(topic, group);
		        }
		        this.statsTable.get(StatsKey.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
		    }
		
		    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
		        StringBuilder statsKey;
		        if (topic != null) {
		            statsKey = new StringBuilder(topic.length() + 6);
		        } else {
		            statsKey = new StringBuilder();
		        }
		        statsKey.append(topic).append("@").append(queueId);
		        this.statsTable.get(StatsKey.TOPIC_PUT_LATENCY).addRTValue(statsKey.toString(), incValue, 1);
		    }
				
",
,

	],

}
