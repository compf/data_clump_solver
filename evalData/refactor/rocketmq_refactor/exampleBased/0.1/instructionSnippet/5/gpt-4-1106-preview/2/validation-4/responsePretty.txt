refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		386",
		toLine:"		414",
		oldContent:"
		    public void incChannelIdleNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
		    }
		
		    public void incTopicPutNums(final String topic) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
		    }
		
		    public void incTopicPutNums(final String topic, int num, int times) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_NUMS).addValue(topic, num, times);
		    }
		
		    public void incTopicPutSize(final String topic, final int size) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_SIZE).addValue(topic, size, 1);
		    }
		
		    public void incGroupGetNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupCkNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupAckNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);		
",
		newContent:"
		    public void incChannelIdleNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
		    }
		
		    public void incTopicPutNums(final String topic) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
		    }
		
		    public void incTopicPutNums(final String topic, int num, int times) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_NUMS).addValue(topic, num, times);
		    }
		
		    public void incTopicPutSize(final String topic, final int size) {
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_SIZE).addValue(topic, size, 1);
		    }
		
		    public void incGroupGetNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupCkNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupAckNums(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);		
",
,
		fromLine:"		458",
		toLine:"		489",
		oldContent:"
		        return strBuilder.toString();
		    }
		
		    public void incGroupGetSize(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
		        String statsKey;
		        if (enableQueueStat) {
		            statsKey = buildStatsKey(queueId, topic, group);
		        } else {
		            statsKey = buildStatsKey(topic, group);
		        }
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
		    }
		
		    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
		        StringBuilder statsKey;
		        if (topic != null) {
		            statsKey = new StringBuilder(topic.length() + 6);
		        } else {
		            statsKey = new StringBuilder(6);
		        }
		        statsKey.append(queueId).append("@").append(topic);
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
		    }
		
		    public void incBrokerPutNums() {
		        this.statsTable.get(BrokerStatsItemKeys.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
		    }		
",
		newContent:"
		        return strBuilder.toString();
		    }
		
		    public void incGroupGetSize(final String group, final String topic, final int incValue) {
		        final String statsKey = buildStatsKey(topic, group);
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
		    }
		
		    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
		        String statsKey;
		        if (enableQueueStat) {
		            statsKey = buildStatsKey(queueId, topic, group);
		        } else {
		            statsKey = buildStatsKey(topic, group);
		        }
		        this.statsTable.get(BrokerStatsItemKeys.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
		    }
		
		    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
		        StringBuilder statsKey;
		        if (topic != null) {
		            statsKey = new StringBuilder(topic.length() + 6);
		        } else {
		            statsKey = new StringBuilder(6);
		        }
		        statsKey.append(queueId).append("@").append(topic);
		        this.statsTable.get(BrokerStatsItemKeys.TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
		    }
		
		    public void incBrokerPutNums() {
		        this.statsTable.get(BrokerStatsItemKeys.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
		    }		
",
,

	],

}
extractedClasses:
{

}
