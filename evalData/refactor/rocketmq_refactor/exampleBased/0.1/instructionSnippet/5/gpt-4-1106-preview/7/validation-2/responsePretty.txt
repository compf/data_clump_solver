refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		0",
		toLine:"		0",
		oldContent:"
				
",
		newContent:"
		/*
		 * Licensed to the Apache Software Foundation (ASF) under one or more
		 * contributor license agreements.  See the NOTICE file distributed with
		 * this work for additional information regarding copyright ownership.
		 * The ASF licenses this file to You under the Apache License, Version 2.0
		 * (the "License"); you may not use this file except in compliance with
		 * the License.  You may obtain a copy of the License at
		 */		
",
,
		fromLine:"		52",
		toLine:"		99",
		oldContent:"
		    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
		
		    /**
		     * read disk follow stats
		     */
		    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
		    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
		        LoggerName.COMMERCIAL_LOGGER_NAME);
		    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
		    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
		        LoggerName.DLQ_STATS_LOGGER_NAME);
		    private ScheduledExecutorService scheduledExecutorService;
		    private ScheduledExecutorService commercialExecutor;
		    private ScheduledExecutorService accountExecutor;
		
		    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
		    private final String clusterName;
		    private final boolean enableQueueStat;
		    private MomentStatsItemSet momentStatsItemSetFallSize;
		    private MomentStatsItemSet momentStatsItemSetFallTime;
		
		    private final StatisticsManager accountStatManager = new StatisticsManager();
		    private StateGetter producerStateGetter;
		    private StateGetter consumerStateGetter;
		
		    private BrokerConfig brokerConfig;
		
		    public BrokerStatsManager(BrokerConfig brokerConfig) {
		        this.brokerConfig = brokerConfig;
		        this.enableQueueStat = brokerConfig.isEnableDetailStat();
		        initScheduleService();
		        this.clusterName = brokerConfig.getBrokerClusterName();
		        init();
		    }
		
		    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
		        this.clusterName = clusterName;
		        this.enableQueueStat = enableQueueStat;
		        initScheduleService();
		        init();
		    }
		
		    public void init() {
		        // Initialization code goes here
		    }
		
		    private void initScheduleService() {
		        // Initialization code for scheduled services goes here		
",
		newContent:"
		package org.apache.rocketmq.store.stats;
		
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.logging.Logger;
		import org.apache.rocketmq.logging.LoggerFactory;
		import org.apache.rocketmq.common.constant.LoggerName;
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		
		public class BrokerStatsManager {
		    // Class members go here
		}		
",
,
		fromLine:"		101",
		toLine:"		204",
		oldContent:"
		
		    // Getters and setters
		}
		    }
		
		    public void start() {
		    }
		
		    public void shutdown() {
		        this.scheduledExecutorService.shutdown();
		        this.commercialExecutor.shutdown();
		    }
		
		    public StatsItem getStatsItem(final String statsName, final String statsKey) {
		        try {
		            return this.statsTable.get(statsName).getStatsItem(statsKey);
		        } catch (Exception e) {
		        }
		
		        return null;
		    }
		
		    public void onTopicDeleted(final String topic) {
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
		        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
		        }
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
		        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
		    }
		
		    public void onGroupDeleted(final String group) {
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
		        }
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
		        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
		        }
		    }
		
		    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
		        }
		    }
		
		    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
		        if (enableQueueStat) {
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
		        }
		    }
		
		    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
		        }
		    }
		
		    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
		        if (enableQueueStat) {
		            final String statsKey = buildStatsKey(topic, queueId, group);
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
		        }
		    }
		
		    public void incConsumerRegisterTime(final int incValue) {
		        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incProducerRegisterTime(final int incValue) {
		        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
		    }
		
		    public void incChannelConnectNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
		    }
		
		    public void incChannelCloseNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
		    }
		
		    public void incChannelExceptionNum() {
		        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
		    }
				
",
		newContent:"
				
",
,

	],

}
extractedClasses:
{

}
