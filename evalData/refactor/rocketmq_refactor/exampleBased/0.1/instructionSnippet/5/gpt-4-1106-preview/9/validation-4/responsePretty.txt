refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		195",
		oldContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		
		public class BrokerStatsManager {
		
		    // The class has been refactored and constants have been removed.
		}
		    // Send message latency
		    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
		    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
		    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
		    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
		    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
		    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
		    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
		    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
		    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
		
		    public static final String COMMERCIAL_OWNER = "Owner";
		
		    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
		    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
		
		    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
		    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
		
		    public static final String ACCOUNT_SEND = "SEND";
		    public static final String ACCOUNT_RCV = "RCV";
		    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
		    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
		    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
		    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
		    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
		
		    public static final String MSG_NUM = "MSG_NUM";
		    public static final String MSG_SIZE = "MSG_SIZE";
		    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
		    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
		    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
		    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
		    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
		    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
		    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
		    public static final String RT = "RT";
		    public static final String INNER_RT = "INNER_RT";
		
		    // Deprecated constants have been removed.
		
		    // Consumer Register Time
		    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
		    // Producer Register Time
		    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
		    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
		    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
		    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
		    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
		    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
		
		    /**
		     * read disk follow stats
		     */
		    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
		    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
		        LoggerName.COMMERCIAL_LOGGER_NAME);
		    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
		    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
		        LoggerName.DLQ_STATS_LOGGER_NAME);
		    private ScheduledExecutorService scheduledExecutorService;
		    private ScheduledExecutorService commercialExecutor;
		    private ScheduledExecutorService accountExecutor;
		
		    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
		    private final String clusterName;
		    private final boolean enableQueueStat;
		    private MomentStatsItemSet momentStatsItemSetFallSize;
		    private MomentStatsItemSet momentStatsItemSetFallTime;
		
		    private final StatisticsManager accountStatManager = new StatisticsManager();
		    private StateGetter producerStateGetter;
		    private StateGetter consumerStateGetter;
		
		    private BrokerConfig brokerConfig;
		
		    public BrokerStatsManager(BrokerConfig brokerConfig) {
		        this.brokerConfig = brokerConfig;
		        this.enableQueueStat = brokerConfig.isEnableDetailStat();
		        initScheduleService();
		        this.clusterName = brokerConfig.getBrokerClusterName();
		        init();
		    }
		
		    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
		        this.clusterName = clusterName;
		        this.enableQueueStat = enableQueueStat;
		        initScheduleService();
		        init();
		    }
		
		    public void init() {
		        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
		            scheduledExecutorService, log);
		
		        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
		            scheduledExecutorService, log);
		
		        if (enableQueueStat) {
		            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        }
		        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
		
		        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,		
",
,

	],

}
extractedClasses:
{

}
