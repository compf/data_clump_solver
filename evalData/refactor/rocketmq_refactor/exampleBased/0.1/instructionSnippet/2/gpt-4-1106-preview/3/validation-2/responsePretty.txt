refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		938",
		toLine:"		942",
		oldContent:"
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    BrokerStatsItem statsItem = new BrokerStatsItem(group, topic, queueId, fallBehind);
		                    brokerStatsManager.recordDiskFallBehindSize(statsItem);
		                }		
",
		newContent:"
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    BrokerStatsItem statsItem = new BrokerStatsItem(group, topic, queueId, fallBehind);
		                    brokerStatsManager.recordDiskFallBehindSize(statsItem);
		                }		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		167",
		toLine:"		196",
		oldContent:"
		        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
		
		        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,		
",
		newContent:"
		        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
		            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
		        this.statsTable.put(BrokerStatsItem.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(BrokerStatsItem.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BrokerStatsItem.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(BrokerStatsItem.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(BrokerStatsItem.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(BrokerStatsItem.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(BrokerStatsItem.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(BrokerStatsItem.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		
		        this.statsTable.put(SNDBCK2DLQ_TIMES,
		            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
		
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(BrokerStatsItem.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(BrokerStatsItem.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
		
		        this.statsTable.put(CONSUMER_REGISTER_TIME,		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		92",
		toLine:"		104",
		oldContent:"
		    @Override
		    public void recordDiskFallBehindTime(final BrokerStatsItem statsItem) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        BrokerStatsItem statsItem = new BrokerStatsItem(lmqGroup, lmqTopic, queueId, fallBehind);
		        super.recordDiskFallBehindTime(statsItem);
		    }		
",
		newContent:"
		    @Override
		    public void recordDiskFallBehindTime(final BrokerStatsItem statsItem) {
		        String lmqGroup = statsItem.getGroup();
		        String lmqTopic = statsItem.getTopic();
		        int queueId = statsItem.getQueueId();
		        long fallBehind = statsItem.getFallBehind();
		        if (MixAll.isLmq(lmqGroup)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(lmqTopic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        BrokerStatsItem lmqStatsItem = new BrokerStatsItem(lmqGroup, lmqTopic, queueId, fallBehind);
		        super.recordDiskFallBehindTime(lmqStatsItem);
		    }		
",
,
		fromLine:"		106",
		toLine:"		118",
		oldContent:"
		    @Override
		    public void recordDiskFallBehindSize(final BrokerStatsItem statsItem) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        BrokerStatsItem statsItem = new BrokerStatsItem(lmqGroup, lmqTopic, queueId, fallBehind);
		        super.recordDiskFallBehindSize(statsItem);
		    }		
",
		newContent:"
		    @Override
		    public void recordDiskFallBehindSize(final BrokerStatsItem statsItem) {
		        String lmqGroup = statsItem.getGroup();
		        String lmqTopic = statsItem.getTopic();
		        int queueId = statsItem.getQueueId();
		        long fallBehind = statsItem.getFallBehind();
		        if (MixAll.isLmq(lmqGroup)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(lmqTopic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        BrokerStatsItem lmqStatsItem = new BrokerStatsItem(lmqGroup, lmqTopic, queueId, fallBehind);
		        super.recordDiskFallBehindSize(lmqStatsItem);
		    }		
",
,

	],

}
extractedClasses:
{
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsItem.java:"
	package org.apache.rocketmq.store.stats;
	
	public class BrokerStatsItem {
	    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
	    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
	    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
	    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
	    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
	    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
	    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
	    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
	    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
	    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
	    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
	    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
	    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
	    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
	    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
	    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
	    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
	    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
	    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
	    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
	    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
	    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
	    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
	    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final long fallBehind;
	
	    public BrokerStatsItem(String group, String topic, int queueId, long fallBehind) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.fallBehind = fallBehind;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public long getFallBehind() {
	        return fallBehind;
	    }
	
	    public String getStatsKey() {
	        return buildStatsKey(queueId, topic, group);
	    }
	
	    private String buildStatsKey(int queueId, String topic, String group) {
	        // Implementation of building the stats key
	        return String.format("%s-%s-%d", group, topic, queueId);
	    }
	}
		
",

}
