refactorings:
{
	common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
	[
		fromLine:"		16",
		toLine:"		48",
		oldContent:"
		 */
		package org.apache.rocketmq.common.stats;
		
		public class Stats {
		
		    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
		    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
		    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
		    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
		    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
		    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
		    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
		    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
		    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
		    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
		    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
		    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
		    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
		    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
		    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
		    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
		    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
		    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
		    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
		    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
		    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
		    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
		
		    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
		    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
		    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
		}
				
",
		newContent:"
		 */
		package org.apache.rocketmq.common.stats;
		
		public class Stats {
		
		    // No longer needed as constants are now encapsulated in BrokerStatsItem class
		}
				
",
,

	],
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		16",
		toLine:"		71",
		oldContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.Stats;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		
		public class BrokerStatsManager {
		
		    // Deprecated constants are removed as they are now encapsulated in BrokerStatsItem class
		
		    // Send message latency		
",
		newContent:"
		 */
		package org.apache.rocketmq.store.stats;
		
		import java.util.HashMap;
		import java.util.concurrent.ScheduledExecutorService;
		import org.apache.commons.lang3.tuple.Pair;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.ThreadFactoryImpl;
		import org.apache.rocketmq.common.UtilAll;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.statistics.StatisticsItem;
		import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
		import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
		import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
		import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
		import org.apache.rocketmq.common.statistics.StatisticsManager;
		import org.apache.rocketmq.common.stats.MomentStatsItemSet;
		import org.apache.rocketmq.common.stats.StatsItem;
		import org.apache.rocketmq.common.stats.StatsItemSet;
		import org.apache.rocketmq.common.topic.TopicValidator;
		import org.apache.rocketmq.common.utils.ThreadUtils;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		
		public class BrokerStatsManager {
		
		    // Send message latency		
",
,
		fromLine:"		108",
		toLine:"		115",
		oldContent:"
		    public static final String INNER_RT = "INNER_RT";
		
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    // Pull Message Latency
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
		
		    // Consumer Register Time		
",
		newContent:"
		    public static final String INNER_RT = "INNER_RT";
		
		    // Pull Message Latency
		
		    // Consumer Register Time		
",
,
		fromLine:"		583",
		toLine:"		594",
		oldContent:"
		    }
		
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
		    }
		
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        final String statsKey = buildStatsKey(queueId, topic, group);
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);		
",
		newContent:"
		    }
		
		    public void recordDiskFallBehindTime(final BrokerStatsItem statsItem) {
		        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsItem.getStatsKey()).getValue().set(statsItem.getFallBehind());
		    }
		
		    public void recordDiskFallBehindSize(final BrokerStatsItem statsItem) {
		        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsItem.getStatsKey()).getValue().set(statsItem.getFallBehind());		
",
,

	],
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java:
	[
		fromLine:"		16",
		toLine:"		51",
		oldContent:"
		 */
		package org.apache.rocketmq.broker.metrics;
		
		import java.util.Map;
		import java.util.Set;
		import java.util.function.Consumer;
		import java.util.stream.Collectors;
		import org.apache.rocketmq.broker.BrokerController;
		import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
		import org.apache.rocketmq.broker.client.ConsumerManager;
		import org.apache.rocketmq.broker.filter.ConsumerFilterData;
		import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
		import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
		import org.apache.rocketmq.broker.processor.PopBufferMergeService;
		import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
		import org.apache.rocketmq.broker.sub.SubscriptionGroupManager;
		import org.apache.rocketmq.broker.topic.TopicConfigManager;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.KeyBuilder;
		import org.apache.rocketmq.common.MixAll;
		import org.apache.rocketmq.common.Pair;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.constant.PermName;
		import org.apache.rocketmq.common.filter.ExpressionType;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
		import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
		import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
		import org.apache.rocketmq.store.DefaultMessageFilter;
		import org.apache.rocketmq.store.MessageStore;
				
",
		newContent:"
		 */
		package org.apache.rocketmq.broker.metrics;
		
		import java.util.Map;
		import java.util.Set;
		import java.util.function.Consumer;
		import java.util.stream.Collectors;
		import org.apache.rocketmq.broker.BrokerController;
		import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
		import org.apache.rocketmq.broker.client.ConsumerManager;
		import org.apache.rocketmq.broker.filter.ConsumerFilterData;
		import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
		import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
		import org.apache.rocketmq.broker.processor.PopBufferMergeService;
		import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
		import org.apache.rocketmq.broker.sub.SubscriptionGroupManager;
		import org.apache.rocketmq.broker.topic.TopicConfigManager;
		import org.apache.rocketmq.common.BrokerConfig;
		import org.apache.rocketmq.common.KeyBuilder;
		import org.apache.rocketmq.common.MixAll;
		import org.apache.rocketmq.common.TopicConfig;
		import org.apache.rocketmq.common.constant.LoggerName;
		import org.apache.rocketmq.common.constant.PermName;
		import org.apache.rocketmq.common.filter.ExpressionType;
		import org.apache.rocketmq.logging.org.slf4j.Logger;
		import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
		import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
		import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
		import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
		import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
		import org.apache.rocketmq.store.DefaultMessageFilter;
		import org.apache.rocketmq.store.MessageStore;
				
",
,
		fromLine:"		299",
		toLine:"		303",
		oldContent:"
		    }
		
		    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
		        if (brokerOffset < 0) {		
",
		newContent:"
		    }
		
		    public Pair<Long, Long> getConsumerLagStats(ConsumerLagStatsItem statsItem) {
		        long brokerOffset = messageStore.getMaxOffsetInQueue(statsItem.getTopic(), statsItem.getQueueId());
		        if (brokerOffset < 0) {		
",
,
		fromLine:"		438",
		toLine:"		442",
		oldContent:"
		    }
		
		    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
		        long count = to - from;
				
",
		newContent:"
		    }
		
		    public long calculateMessageCount(ConsumerLagStatsItem statsItem) {
		        long count = statsItem.getTo() - statsItem.getFrom();
				
",
,

	],

}
extractedClasses:
{
	store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsItem.java:"
	package org.apache.rocketmq.store.stats;
	
	public class BrokerStatsItem {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final long fallBehind;
	
	    public BrokerStatsItem(String group, String topic, int queueId, long fallBehind) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.fallBehind = fallBehind;
	    }
	
	    public String getStatsKey() {
	        return buildStatsKey(queueId, topic, group);
	    }
	
	    public long getFallBehind() {
	        return fallBehind;
	    }
	
	    private String buildStatsKey(int queueId, String topic, String group) {
	        // Implementation of building the stats key
	        return String.format("%s-%s-%d", group, topic, queueId);
	    }
	}
		
",
	broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagStatsItem.java:"
	package org.apache.rocketmq.broker.metrics;
	
	public class ConsumerLagStatsItem {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	    private final long from;
	    private final long to;
	
	    public ConsumerLagStatsItem(String group, String topic, int queueId, long from, long to) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	        this.from = from;
	        this.to = to;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	
	    public long getFrom() {
	        return from;
	    }
	
	    public long getTo() {
	        return to;
	    }
	}
		
",

}
