refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java:
	[
		fromLine:"		68",
		toLine:"		88",
		oldContent:"
		        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
		        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);
		        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);
		        messageStoreConfig.setMaxHashSlotNum(10000);
		        messageStoreConfig.setMaxIndexNum(100 * 100);
		        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
		        messageStoreConfig.setHaListenPort(0);
		        String storeRootPath = System.getProperty("java.io.tmpdir") + File.separator + "store";
		        messageStoreConfig.setStorePathRootDir(storeRootPath);
		        messageStoreConfig.setHaListenPort(0);
		        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), null, new BrokerConfig(), new ConcurrentHashMap<>());
		    }
		
		}
				
",
		newContent:"
		        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
		        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);
		        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);
		        messageStoreConfig.setMaxHashSlotNum(10000);
		        messageStoreConfig.setMaxIndexNum(100 * 100);
		        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);
		        messageStoreConfig.setHaListenPort(0);
		        String storeRootPath = System.getProperty("java.io.tmpdir") + File.separator + "store";
		        messageStoreConfig.setStorePathRootDir(storeRootPath);
		        messageStoreConfig.setHaListenPort(0);
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(), null, new BrokerConfig(), new ConcurrentHashMap<>());
		    }
		
		}
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java:
	[
		fromLine:"		52",
		toLine:"		72",
		oldContent:"
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathCommitLog(base + File.separator + "commitlog");
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		
		        storeConfig.setEnableDLegerCommitLog(true);
		        storeConfig.setdLegerGroup(group);
		        storeConfig.setdLegerPeers(peers);
		        storeConfig.setdLegerSelfId(selfId);
		
		        storeConfig.setRecheckReputOffsetFromCq(true);
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		        DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();
		        if (leaderId != null) {
		            dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);
		            if (selfId.equals(leaderId)) {
		                dLegerServer.getMemberState().changeToLeader(0);
		            } else {
		                dLegerServer.getMemberState().changeToFollower(0, leaderId);
		            }		
",
		newContent:"
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathCommitLog(base + File.separator + "commitlog");
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		
		        storeConfig.setEnableDLegerCommitLog(true);
		        storeConfig.setdLegerGroup(group);
		        storeConfig.setdLegerPeers(peers);
		        storeConfig.setdLegerSelfId(selfId);
		
		        storeConfig.setRecheckReputOffsetFromCq(true);
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		        DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();
		        if (leaderId != null) {
		            dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);
		            if (selfId.equals(leaderId)) {
		                dLegerServer.getMemberState().changeToLeader(0);
		            } else {
		                dLegerServer.getMemberState().changeToFollower(0, leaderId);
		            }		
",
,
		fromLine:"		101",
		toLine:"		121",
		oldContent:"
		    protected DefaultMessageStore createMessageStore(String base, boolean createAbort) throws Exception {
		        baseDirs.add(base);
		        MessageStoreConfig storeConfig = new MessageStoreConfig();
		        storeConfig.setMappedFileSizeCommitLog(1024 * 100);
		        storeConfig.setMappedFileSizeConsumeQueue(1024);
		        storeConfig.setMaxHashSlotNum(100);
		        storeConfig.setMaxIndexNum(100 * 10);
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathCommitLog(base + File.separator + "commitlog");
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("CommitlogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		
		        if (createAbort) {
		            String fileName = StorePathConfigHelper.getAbortFile(storeConfig.getStorePathRootDir());
		            makeSureFileExists(fileName);
		        }
		        Assert.assertTrue(defaultMessageStore.load());
		        defaultMessageStore.start();
		        return defaultMessageStore;		
",
		newContent:"
		    protected DefaultMessageStore createMessageStore(String base, boolean createAbort) throws Exception {
		        baseDirs.add(base);
		        MessageStoreConfig storeConfig = new MessageStoreConfig();
		        storeConfig.setMappedFileSizeCommitLog(1024 * 100);
		        storeConfig.setMappedFileSizeConsumeQueue(1024);
		        storeConfig.setMaxHashSlotNum(100);
		        storeConfig.setMaxIndexNum(100 * 10);
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathCommitLog(base + File.separator + "commitlog");
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		
		        if (createAbort) {
		            String fileName = StorePathConfigHelper.getAbortFile(storeConfig.getStorePathRootDir());
		            makeSureFileExists(fileName);
		        }
		        Assert.assertTrue(defaultMessageStore.load());
		        defaultMessageStore.start();
		        return defaultMessageStore;		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java:
	[
		fromLine:"		99",
		toLine:"		119",
		oldContent:"
		        storeConfig.setMaxIndexNum(100 * 10);
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathDLedgerCommitLog(dLedgerCommitLogPath);
		        storeConfig.setReadOnlyCommitLogStorePaths(readOnlyPath);
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		
		        storeConfig.setEnableDLegerCommitLog(true);
		        storeConfig.setdLegerGroup(group);
		        storeConfig.setdLegerPeers(peers);
		        storeConfig.setdLegerSelfId(selfId);
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("DLedgerCommitLogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		        Assert.assertTrue(defaultMessageStore.load());
		        defaultMessageStore.start();
		        return defaultMessageStore;
		    }
		}
				
",
		newContent:"
		        storeConfig.setMaxIndexNum(100 * 10);
		        storeConfig.setStorePathRootDir(base);
		        storeConfig.setStorePathDLedgerCommitLog(dLedgerCommitLogPath);
		        storeConfig.setReadOnlyCommitLogStorePaths(readOnlyPath);
		        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);
		
		        storeConfig.setEnableDLegerCommitLog(true);
		        storeConfig.setdLegerGroup(group);
		        storeConfig.setdLegerPeers(peers);
		        storeConfig.setdLegerSelfId(selfId);
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		
		        }, new BrokerConfig(), new ConcurrentHashMap<>());
		        Assert.assertTrue(defaultMessageStore.load());
		        defaultMessageStore.start();
		        return defaultMessageStore;
		    }
		}
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java:
	[
		fromLine:"		138",
		toLine:"		158",
		oldContent:"
		
		    protected DefaultMessageStore gen() throws Exception {
		        MessageStoreConfig messageStoreConfig = buildStoreConfig(
		                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE
		        );
		
		        BrokerConfig brokerConfig = new BrokerConfig();
		
		        DefaultMessageStore master = new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),
		            new MessageArrivingListener() {
		                @Override
		                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
		                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
		                }
		            }
		            , brokerConfig, new ConcurrentHashMap<>());
		
		        assertThat(master.load()).isTrue();
				
",
		newContent:"
		
		    protected DefaultMessageStore gen() throws Exception {
		        MessageStoreConfig messageStoreConfig = buildStoreConfig(
		                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE
		        );
		
		        BrokerConfig brokerConfig = new BrokerConfig();
		
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        DefaultMessageStore master = new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager(),
		            new MessageArrivingListener() {
		                @Override
		                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
		                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
		                }
		            }
		            , brokerConfig, new ConcurrentHashMap<>());
		
		        assertThat(master.load()).isTrue();
				
",
,
		fromLine:"		166",
		toLine:"		186",
		oldContent:"
		                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE
		        );
		
		        messageStoreConfig.setEnableLmq(true);
		        messageStoreConfig.setEnableMultiDispatch(true);
		
		        BrokerConfig brokerConfig = new BrokerConfig();
		
		        DefaultMessageStore master = new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),
		            new MessageArrivingListener() {
		                @Override
		                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
		                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
		                }
		            }
		            , brokerConfig, new ConcurrentHashMap<>());
		
		        assertThat(master.load()).isTrue();
				
",
		newContent:"
		                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE
		        );
		
		        messageStoreConfig.setEnableLmq(true);
		        messageStoreConfig.setEnableMultiDispatch(true);
		
		        BrokerConfig brokerConfig = new BrokerConfig();
		
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        DefaultMessageStore master = new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager(),
		            new MessageArrivingListener() {
		                @Override
		                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,
		                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {
		                }
		            }
		            , brokerConfig, new ConcurrentHashMap<>());
		
		        assertThat(master.load()).isTrue();
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/queue/QueueTestBase.java:
	[
		fromLine:"		76",
		toLine:"		96",
		oldContent:"
		        messageStoreConfig.setMaxTransferBytesOnMessageInDisk(1024 * 1024);
		        messageStoreConfig.setMaxTransferBytesOnMessageInMemory(1024 * 1024);
		        messageStoreConfig.setMaxTransferCountOnMessageInDisk(1024);
		        messageStoreConfig.setMaxTransferCountOnMessageInMemory(1024);
		
		        messageStoreConfig.setFlushIntervalCommitLog(1);
		        messageStoreConfig.setFlushCommitLogThoroughInterval(2);
		
		        return new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager("simpleTest", true),
		            (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		            },
		            new BrokerConfig(), topicConfigTable);
		    }
		
		    public MessageExtBrokerInner buildMessage(String topic, int batchNum) {
		        MessageExtBrokerInner msg = a new MessageExtBrokerInner();
		        msg.setTopic(topic);
		        msg.setTags("TAG1");
		        msg.setKeys("Hello");		
",
		newContent:"
		        messageStoreConfig.setMaxTransferBytesOnMessageInDisk(1024 * 1024);
		        messageStoreConfig.setMaxTransferBytesOnMessageInMemory(1024 * 1024);
		        messageStoreConfig.setMaxTransferCountOnMessageInDisk(1024);
		        messageStoreConfig.setMaxTransferCountOnMessageInMemory(1024);
		
		        messageStoreConfig.setFlushIntervalCommitLog(1);
		        messageStoreConfig.setFlushCommitLogThoroughInterval(2);
		
		        // Updated constructor call to match the refactored BrokerStatsManager class.
		        return new DefaultMessageStore(
		            messageStoreConfig,
		            new BrokerStatsManager(),
		            (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
		            },
		            new BrokerConfig(), topicConfigTable);
		    }
		
		    public MessageExtBrokerInner buildMessage(String topic, int batchNum) {
		        MessageExtBrokerInner msg = a new MessageExtBrokerInner();
		        msg.setTopic(topic);
		        msg.setTags("TAG1");
		        msg.setKeys("Hello");		
",
,

	],

}
