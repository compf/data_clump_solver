{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreShutDownTest.java": [
            {
                "fromLine": 68,
                "toLine": 88,
                "oldContent": "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);\n        messageStoreConfig.setMaxHashSlotNum(10000);\n        messageStoreConfig.setMaxIndexNum(100 * 100);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n        messageStoreConfig.setHaListenPort(0);\n        String storeRootPath = System.getProperty(\"java.io.tmpdir\") + File.separator + \"store\";\n        messageStoreConfig.setStorePathRootDir(storeRootPath);\n        messageStoreConfig.setHaListenPort(0);\n        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(\"simpleTest\", true), null, new BrokerConfig(), new ConcurrentHashMap<>());\n    }\n\n}\n",
                "newContent": "        MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 1024 * 10);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 1024 * 10);\n        messageStoreConfig.setMaxHashSlotNum(10000);\n        messageStoreConfig.setMaxIndexNum(100 * 100);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n        messageStoreConfig.setHaListenPort(0);\n        String storeRootPath = System.getProperty(\"java.io.tmpdir\") + File.separator + \"store\";\n        messageStoreConfig.setStorePathRootDir(storeRootPath);\n        messageStoreConfig.setHaListenPort(0);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(), null, new BrokerConfig(), new ConcurrentHashMap<>());\n    }\n\n}\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/dledger/MessageStoreTestBase.java": [
            {
                "fromLine": 52,
                "toLine": 72,
                "oldContent": "        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathCommitLog(base + File.separator + \"commitlog\");\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n\n        storeConfig.setEnableDLegerCommitLog(true);\n        storeConfig.setdLegerGroup(group);\n        storeConfig.setdLegerPeers(peers);\n        storeConfig.setdLegerSelfId(selfId);\n\n        storeConfig.setRecheckReputOffsetFromCq(true);\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(\"DLedgerCommitlogTest\", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n        DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();\n        if (leaderId != null) {\n            dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);\n            if (selfId.equals(leaderId)) {\n                dLegerServer.getMemberState().changeToLeader(0);\n            } else {\n                dLegerServer.getMemberState().changeToFollower(0, leaderId);\n            }",
                "newContent": "        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathCommitLog(base + File.separator + \"commitlog\");\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n\n        storeConfig.setEnableDLegerCommitLog(true);\n        storeConfig.setdLegerGroup(group);\n        storeConfig.setdLegerPeers(peers);\n        storeConfig.setdLegerSelfId(selfId);\n\n        storeConfig.setRecheckReputOffsetFromCq(true);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n        DLedgerServer dLegerServer = ((DLedgerCommitLog) defaultMessageStore.getCommitLog()).getdLedgerServer();\n        if (leaderId != null) {\n            dLegerServer.getdLedgerConfig().setEnableLeaderElector(false);\n            if (selfId.equals(leaderId)) {\n                dLegerServer.getMemberState().changeToLeader(0);\n            } else {\n                dLegerServer.getMemberState().changeToFollower(0, leaderId);\n            }"
            },
            {
                "fromLine": 101,
                "toLine": 121,
                "oldContent": "    protected DefaultMessageStore createMessageStore(String base, boolean createAbort) throws Exception {\n        baseDirs.add(base);\n        MessageStoreConfig storeConfig = new MessageStoreConfig();\n        storeConfig.setMappedFileSizeCommitLog(1024 * 100);\n        storeConfig.setMappedFileSizeConsumeQueue(1024);\n        storeConfig.setMaxHashSlotNum(100);\n        storeConfig.setMaxIndexNum(100 * 10);\n        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathCommitLog(base + File.separator + \"commitlog\");\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(\"CommitlogTest\", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n\n        if (createAbort) {\n            String fileName = StorePathConfigHelper.getAbortFile(storeConfig.getStorePathRootDir());\n            makeSureFileExists(fileName);\n        }\n        Assert.assertTrue(defaultMessageStore.load());\n        defaultMessageStore.start();\n        return defaultMessageStore;",
                "newContent": "    protected DefaultMessageStore createMessageStore(String base, boolean createAbort) throws Exception {\n        baseDirs.add(base);\n        MessageStoreConfig storeConfig = new MessageStoreConfig();\n        storeConfig.setMappedFileSizeCommitLog(1024 * 100);\n        storeConfig.setMappedFileSizeConsumeQueue(1024);\n        storeConfig.setMaxHashSlotNum(100);\n        storeConfig.setMaxIndexNum(100 * 10);\n        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathCommitLog(base + File.separator + \"commitlog\");\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n\n        if (createAbort) {\n            String fileName = StorePathConfigHelper.getAbortFile(storeConfig.getStorePathRootDir());\n            makeSureFileExists(fileName);\n        }\n        Assert.assertTrue(defaultMessageStore.load());\n        defaultMessageStore.start();\n        return defaultMessageStore;"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java": [
            {
                "fromLine": 99,
                "toLine": 119,
                "oldContent": "        storeConfig.setMaxIndexNum(100 * 10);\n        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathDLedgerCommitLog(dLedgerCommitLogPath);\n        storeConfig.setReadOnlyCommitLogStorePaths(readOnlyPath);\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n\n        storeConfig.setEnableDLegerCommitLog(true);\n        storeConfig.setdLegerGroup(group);\n        storeConfig.setdLegerPeers(peers);\n        storeConfig.setdLegerSelfId(selfId);\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager(\"DLedgerCommitLogTest\", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n        Assert.assertTrue(defaultMessageStore.load());\n        defaultMessageStore.start();\n        return defaultMessageStore;\n    }\n}\n",
                "newContent": "        storeConfig.setMaxIndexNum(100 * 10);\n        storeConfig.setStorePathRootDir(base);\n        storeConfig.setStorePathDLedgerCommitLog(dLedgerCommitLogPath);\n        storeConfig.setReadOnlyCommitLogStorePaths(readOnlyPath);\n        storeConfig.setFlushDiskType(FlushDiskType.ASYNC_FLUSH);\n\n        storeConfig.setEnableDLegerCommitLog(true);\n        storeConfig.setdLegerGroup(group);\n        storeConfig.setdLegerPeers(peers);\n        storeConfig.setdLegerSelfId(selfId);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager(), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n\n        }, new BrokerConfig(), new ConcurrentHashMap<>());\n        Assert.assertTrue(defaultMessageStore.load());\n        defaultMessageStore.start();\n        return defaultMessageStore;\n    }\n}\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java": [
            {
                "fromLine": 138,
                "toLine": 158,
                "oldContent": "\n    protected DefaultMessageStore gen() throws Exception {\n        MessageStoreConfig messageStoreConfig = buildStoreConfig(\n                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE\n        );\n\n        BrokerConfig brokerConfig = new BrokerConfig();\n\n        DefaultMessageStore master = new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),\n            new MessageArrivingListener() {\n                @Override\n                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,\n                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n                }\n            }\n            , brokerConfig, new ConcurrentHashMap<>());\n\n        assertThat(master.load()).isTrue();\n",
                "newContent": "\n    protected DefaultMessageStore gen() throws Exception {\n        MessageStoreConfig messageStoreConfig = buildStoreConfig(\n                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE\n        );\n\n        BrokerConfig brokerConfig = new BrokerConfig();\n\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        DefaultMessageStore master = new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(),\n            new MessageArrivingListener() {\n                @Override\n                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,\n                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n                }\n            }\n            , brokerConfig, new ConcurrentHashMap<>());\n\n        assertThat(master.load()).isTrue();\n"
            },
            {
                "fromLine": 166,
                "toLine": 186,
                "oldContent": "                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE\n        );\n\n        messageStoreConfig.setEnableLmq(true);\n        messageStoreConfig.setEnableMultiDispatch(true);\n\n        BrokerConfig brokerConfig = new BrokerConfig();\n\n        DefaultMessageStore master = new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(brokerConfig.getBrokerClusterName(), brokerConfig.isEnableDetailStat()),\n            new MessageArrivingListener() {\n                @Override\n                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,\n                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n                }\n            }\n            , brokerConfig, new ConcurrentHashMap<>());\n\n        assertThat(master.load()).isTrue();\n",
                "newContent": "                COMMIT_LOG_FILE_SIZE, CQ_FILE_SIZE, true, CQ_EXT_FILE_SIZE\n        );\n\n        messageStoreConfig.setEnableLmq(true);\n        messageStoreConfig.setEnableMultiDispatch(true);\n\n        BrokerConfig brokerConfig = new BrokerConfig();\n\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        DefaultMessageStore master = new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(),\n            new MessageArrivingListener() {\n                @Override\n                public void arriving(String topic, int queueId, long logicOffset, long tagsCode,\n                    long msgStoreTime, byte[] filterBitMap, Map<String, String> properties) {\n                }\n            }\n            , brokerConfig, new ConcurrentHashMap<>());\n\n        assertThat(master.load()).isTrue();\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/queue/QueueTestBase.java": [
            {
                "fromLine": 76,
                "toLine": 96,
                "oldContent": "        messageStoreConfig.setMaxTransferBytesOnMessageInDisk(1024 * 1024);\n        messageStoreConfig.setMaxTransferBytesOnMessageInMemory(1024 * 1024);\n        messageStoreConfig.setMaxTransferCountOnMessageInDisk(1024);\n        messageStoreConfig.setMaxTransferCountOnMessageInMemory(1024);\n\n        messageStoreConfig.setFlushIntervalCommitLog(1);\n        messageStoreConfig.setFlushCommitLogThoroughInterval(2);\n\n        return new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(\"simpleTest\", true),\n            (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n            },\n            new BrokerConfig(), topicConfigTable);\n    }\n\n    public MessageExtBrokerInner buildMessage(String topic, int batchNum) {\n        MessageExtBrokerInner msg = a new MessageExtBrokerInner();\n        msg.setTopic(topic);\n        msg.setTags(\"TAG1\");\n        msg.setKeys(\"Hello\");",
                "newContent": "        messageStoreConfig.setMaxTransferBytesOnMessageInDisk(1024 * 1024);\n        messageStoreConfig.setMaxTransferBytesOnMessageInMemory(1024 * 1024);\n        messageStoreConfig.setMaxTransferCountOnMessageInDisk(1024);\n        messageStoreConfig.setMaxTransferCountOnMessageInMemory(1024);\n\n        messageStoreConfig.setFlushIntervalCommitLog(1);\n        messageStoreConfig.setFlushCommitLogThoroughInterval(2);\n\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        return new DefaultMessageStore(\n            messageStoreConfig,\n            new BrokerStatsManager(),\n            (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {\n            },\n            new BrokerConfig(), topicConfigTable);\n    }\n\n    public MessageExtBrokerInner buildMessage(String topic, int batchNum) {\n        MessageExtBrokerInner msg = a new MessageExtBrokerInner();\n        msg.setTopic(topic);\n        msg.setTags(\"TAG1\");\n        msg.setKeys(\"Hello\");"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java": [
            {
                "fromLine": 72,
                "toLine": 92,
                "oldContent": "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);\n        messageStoreConfig.setMaxHashSlotNum(100);\n        messageStoreConfig.setMaxIndexNum(100 * 10);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n        messageStoreConfig.setFlushIntervalConsumeQueue(1);\n        messageStoreConfig.setStorePathRootDir(System.getProperty(\"java.io.tmpdir\") + File.separator + \"putmessagesteststore\");\n        messageStoreConfig.setStorePathCommitLog(System.getProperty(\"java.io.tmpdir\") + File.separator\n            + \"putmessagesteststore\" + File.separator + \"commitlog\");\n        messageStoreConfig.setHaListenPort(0);\n        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(\"simpleTest\", true), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());\n    }\n\n    @Test\n    public void testPutMessages() throws Exception {\n        String batchPropK = \"extraKey\";\n        String batchPropV = \"extraValue\";\n        Map<String, String> batchProp = a new HashMap<>(1);\n        batchProp.put(batchPropK, batchPropV);\n        short batchPropLen = (short) messageProperties2String(batchProp).getBytes(MessageDecoder.CHARSET_UTF8).length;\n",
                "newContent": "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);\n        messageStoreConfig.setMaxHashSlotNum(100);\n        messageStoreConfig.setMaxIndexNum(100 * 10);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n
        {
                "fromLine": 72,
                "toLine": 92,
                "oldContent": "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);\n        messageStoreConfig.setMaxHashSlotNum(100);\n        messageStoreConfig.setMaxIndexNum(100 * 10);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n        messageStoreConfig.setFlushIntervalConsumeQueue(1);\n        messageStoreConfig.setStorePathRootDir(System.getProperty(\"java.io.tmpdir\") + File.separator + \"putmessagesteststore\");\n        messageStoreConfig.setStorePathCommitLog(System.getProperty(\"java.io.tmpdir\") + File.separator\n            + \"putmessagesteststore\" + File.separator + \"commitlog\");\n        messageStoreConfig.setHaListenPort(0);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());\n    }\n\n    @Test\n    public void testPutMessages() throws Exception {\n        String batchPropK = \"extraKey\";\n        String batchPropV = \"extraValue\";\n        Map<String, String> batchProp = a new HashMap<>(1);\n        batchProp.put(batchPropK, batchPropV);\n        short batchPropLen = (short) messageProperties2String(batchProp).getBytes(MessageDecoder.CHARSET_UTF8).length;\n",
                "newContent": "        messageStoreConfig.setMappedFileSizeCommitLog(1024 * 8);\n        messageStoreConfig.setMappedFileSizeConsumeQueue(1024 * 4);\n        messageStoreConfig.setMaxHashSlotNum(100);\n        messageStoreConfig.setMaxIndexNum(100 * 10);\n        messageStoreConfig.setFlushDiskType(FlushDiskType.SYNC_FLUSH);\n        messageStoreConfig.setFlushIntervalConsumeQueue(1);\n        messageStoreConfig.setStorePathRootDir(System.getProperty(\"java.io.tmpdir\") + File.separator + \"putmessagesteststore\");\n        messageStoreConfig.setStorePathCommitLog(System.getProperty(\"java.io.tmpdir\") + File.separator\n            + \"putmessagesteststore\" + File.separator + \"commitlog\");\n        messageStoreConfig.setHaListenPort(0);\n        // Updated constructor call to match the refactored BrokerStatsManager class.\n        return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager(), new MyMessageArrivingListener(), new BrokerConfig(), new ConcurrentHashMap<>());\n    }\n\n    @Test\n    public void testPutMessages() throws Exception {\n        String batchPropK = \"extraKey\";\n        String batchPropV = \"extraValue\";\n        Map<String, String> batchProp = a new HashMap<>(1);\n        batchProp.put(batchPropK, batchPropV);\n        short batchPropLen = (short) messageProperties2String(batchProp).getBytes(MessageDecoder.CHARSET_UTF8).length;\n"
            }
       