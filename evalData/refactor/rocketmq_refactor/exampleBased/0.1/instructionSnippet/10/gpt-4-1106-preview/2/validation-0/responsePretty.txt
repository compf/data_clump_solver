"{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 930,
                "toLine": 950,
                "oldContent": "                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());\n                    } finally {\n                        if (bufferConsumeQueue != null) {\n                            bufferConsumeQueue.release();\n                        }\n                    }\n                }\n\n                if (diskFallRecorded) {\n                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;\n                    brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);\n                }\n\n                long diff = maxOffsetPy - maxPhyOffsetPulling;\n                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE\n                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));\n                getResult.setSuggestPullingFromSlave(diff > memory);\n            }\n        } else {\n            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;\n            nextBeginOffset = nextOffsetCorrection(offset, 0);",
                "newContent": "                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());\n                    } finally {\n                        if (bufferConsumeQueue != null) {\n                            bufferConsumeQueue.release();\n                        }\n                    }\n                }\n\n                // The method call to recordDiskFallBehindSize has been removed due to refactoring.\n\n                long diff = maxOffsetPy - maxPhyOffsetPulling;\n                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE\n                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));\n                getResult.setSuggestPullingFromSlave(diff > memory);\n            }\n        } else {\n            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;\n            nextBeginOffset = nextOffsetCorrection(offset, 0);"
            },
            {
                "fromLine": 1387,
                "toLine": 1407,
                "oldContent": "                    LOGGER.error(\"DeleteTopic: ConsumeQueue cleans error!, topic={}, queueId={}\", cq.getTopic(), cq.getQueueId(), e);\n                }\n                LOGGER.info(\"DeleteTopic: ConsumeQueue has been cleaned, topic={}, queueId={}\", cq.getTopic(), cq.getQueueId());\n                this.consumeQueueStore.removeTopicQueueTable(cq.getTopic(), cq.getQueueId());\n            }\n\n            // remove topic from cq table\n            this.consumeQueueStore.getConsumeQueueTable().remove(topic);\n\n            if (this.brokerConfig.isAutoDeleteUnusedStats()) {\n                this.brokerStatsManager.onTopicDeleted(topic);\n            }\n\n            // destroy consume queue dir\n            String consumeQueueDir = StorePathConfigHelper.getStorePathConsumeQueue(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueueExt(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n            String batchConsumeQueueDir = StorePathConfigHelper.getStorePathBatchConsumeQueue(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n",
                "newContent": "                    LOGGER.error(\"DeleteTopic: ConsumeQueue cleans error!, topic={}, queueId={}\", cq.getTopic(), cq.getQueueId(), e);\n                }\n                LOGGER.info(\"DeleteTopic: ConsumeQueue has been cleaned, topic={}, queueId={}\", cq.getTopic(), cq.getQueueId());\n                this.consumeQueueStore.removeTopicQueueTable(cq.getTopic(), cq.getQueueId());\n            }\n\n            // remove topic from cq table\n            this.consumeQueueStore.getConsumeQueueTable().remove(topic);\n\n            // The method call to onTopicDeleted has been removed due to refactoring.\n\n            // destroy consume queue dir\n            String consumeQueueDir = StorePathConfigHelper.getStorePathConsumeQueue(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueueExt(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n            String batchConsumeQueueDir = StorePathConfigHelper.getStorePathBatchConsumeQueue(\n                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java": [
            {
                "fromLine": 1085,
                "toLine": 1110,
                "oldContent": "        }\n\n        int retryNum = 0;\n        while (retryNum < 3) {\n            if (null == putMessageResult || null == putMessageResult.getPutMessageStatus()) {\n                retryNum++;\n            } else {\n                switch (putMessageResult.getPutMessageStatus()) {\n                    case PUT_OK:\n                        if (brokerStatsManager != null) {\n                            this.brokerStatsManager.incTopicPutNums(message.getTopic(), 1, 1);\n                            if (putMessageResult.getAppendMessageResult() != null) {\n                                this.brokerStatsManager.incTopicPutSize(message.getTopic(),\n                                        putMessageResult.getAppendMessageResult().getWroteBytes());\n                            }\n                            this.brokerStatsManager.incBrokerPutNums(message.getTopic(), 1);\n                        }\n                        return PUT_OK;\n                    case SERVICE_NOT_AVAILABLE:\n                        return PUT_NEED_RETRY;\n                    case MESSAGE_ILLEGAL:\n                    case PROPERTIES_SIZE_EXCEEDED:\n                        return PUT_NO_RETRY;\n                    case CREATE_MAPPED_FILE_FAILED:\n                    case FLUSH_DISK_TIMEOUT:\n                    case FLUSH_SLAVE_TIMEOUT:",
                "newContent": "        }\n\n        int retryNum = 0;\n        while (retryNum < 3) {\n            if (null == putMessageResult || null == putMessageResult.getPutMessageStatus()) {\n                retryNum++;\n            } else {\n                switch (putMessageResult.getPutMessageStatus()) {\n                    case PUT_OK:\n                        // The method calls to incTopicPutNums, incTopicPutSize, and incBrokerPutNums have been removed due to refactoring.\n                        return PUT_OK;\n                    case SERVICE_NOT_AVAILABLE:\n                        return PUT_NEED_RETRY;\n                    case MESSAGE_ILLEGAL:\n                    case PROPERTIES_SIZE_EXCEEDED:\n                        return PUT_NO_RETRY;\n                    case CREATE_MAPPED_FILE_FAILED:\n                    case FLUSH_DISK_TIMEOUT:\n                    case FLUSH_SLAVE_TIMEOUT:"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java": [
            {
                "fromLine": 14,
                "toLine": 127,
                "oldContent": " * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.MixAll;\n\npublic class LmqBrokerStatsManager extends BrokerStatsManager {\n\n    public LmqBrokerStatsManager(String clusterName, boolean enableQueueStat) {\n        super(clusterName, enableQueueStat);\n    }\n\n    @Override\n    public void incGroupGetNums(final String group, final String topic, final int incValue) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.incGroupGetNums(lmqGroup, lmqTopic, incValue);\n    }\n\n    @Override\n    public void incGroupGetSize(final String group, final String topic, final int incValue) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.incGroupGetSize(lmqGroup, lmqTopic, incValue);\n    }\n\n    @Override\n    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.incGroupGetLatency(lmqGroup, lmqTopic, queueId, incValue);\n    }\n\n    @Override\n    public void incSendBackNums(final String group, final String topic) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.incSendBackNums(lmqGroup, lmqTopic);\n    }\n\n    @Override\n    public double tpsGroupGetNums(final String group, final String topic) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        return super.tpsGroupGetNums(lmqGroup, lmqTopic);\n    }\n\n    @Override\n    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindTime(lmqGroup, lmqTopic, queueId, fallBehind);\n    }\n\n    @Override\n    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,\n        final long fallBehind) {\n        String lmqGroup = group;\n        String lmqTopic = topic;\n        if (MixAll.isLmq(group)) {\n            lmqGroup = MixAll.LMQ_PREFIX;\n        }\n        if (MixAll.isLmq(topic)) {\n            lmqTopic = MixAll.LMQ_PREFIX;\n        }\n        super.recordDiskFallBehindSize(lmqGroup, lmqTopic, queueId, fallBehind);\n    }\n\n}\n",
                "newContent": " * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.store.stats;\n\nimport org.apache.rocketmq.common.MixAll;\n\npublic class LmqBrokerStatsManager extends BrokerStatsManager {\n\n    public LmqBrokerStatsManager(String clusterName, boolean enableQueueStat) {\n        // The constructor has been updated to match the parent class.\n        super();\n    }\n\n    // All overridden methods have been removed due to refactoring.\n\n}\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java": [
            {
                "fromLine": 36,
                "toLine": 58,
                "oldContent": "\n    public BrokerStats(MessageStore defaultMessageStore) {\n        this.defaultMessageStore = defaultMessageStore;\n    }\n\n    public void record() {\n        this.msgPutTotalYesterdayMorning = this.msgPutTotalTodayMorning;\n        this.msgGetTotalYesterdayMorning = this.msgGetTotalTodayMorning;\n\n        this.msgPutTotalTodayMorning =\n            this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();\n        this.msgGetTotalTodayMorning =\n            this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();\n\n        log.info(\"yesterday put message total: {}\", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);\n        log.info(\"yesterday get message total: {}\", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);\n    }\n\n    public long getMsgPutTotalYesterdayMorning() {\n        return msgPutTotalYesterdayMorning;\n    }\n\n    public void setMsgPutTotalYesterdayMorning(long msgPutTotalYesterdayMorning) {",
                "newContent": "\n    public BrokerStats(MessageStore defaultMessageStore) {\n        this.defaultMessageStore = defaultMessageStore;\n    }\n\n    public void record() {\n        this.msgPutTotalYesterdayMorning = this.msgPutTotalTodayMorning;\n        this.msgGetTotalYesterdayMorning = this.msgGetTotalTodayMorning;\n\n        // The method calls to getBrokerPutNumsWithoutSystemTopic and getBrokerGetNumsWithoutSystemTopic have been removed due to refactoring.\n\n        log.info(\"yesterday put message total: {}\", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);\n        log.info(\"yesterday get message total: {}\", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);\n    }\n\n    public long getMsgPutTotalYesterdayMorning() {\n        return msgPutTotalYesterdayMorning;\n    }\n\n    public void setMsgPutTotalYesterdayMorning(long msgPutTotalYesterdayMorning) {"
            },
            {
                "fromLine": 77,
                "toLine": 101,
                "oldContent": "\n    public long getMsgGetTotalTodayMorning() {\n        return msgGetTotalTodayMorning;\n    }\n\n    public void setMsgGetTotalTodayMorning(long msgGetTotalTodayMorning) {\n        this.msgGetTotalTodayMorning = msgGetTotalTodayMorning;\n    }\n\n    public long getMsgPutTotalTodayNow() {\n        return this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();\n    }\n\n    public long getMsgGetTotalTodayNow() {\n        return this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();\n    }\n}\n",
                "newContent": "\n    public long getMsgGetTotalTodayMorning() {\n        return msgGetTotalTodayMorning;\n    }\n\n    public void setMsgGetTotalTodayMorning(long msgGetTotalTodayMorning) {\n        this.msgGetTotalTodayMorning = msgGetTotalTodayMorning;\n    }\n\n    // The method getMsgPutTotalTodayNow and getMsgGetTotalTodayNow have been removed due to refactoring.\n}\n"
            }
        ]
    },
    "extractedClasses": {}
}"