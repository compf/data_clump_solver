{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java": [
            {
                "fromLine": 148,
                "toLine": 168,
                "oldContent": "    private CompactionService compactionService;\n\n    private final StoreStatsService storeStatsService;\n\n    private final TransientStorePool transientStorePool;\n\n    protected final RunningFlags runningFlags = new RunningFlags();\n    private final SystemClock systemClock = new SystemClock();\n\n    private final ScheduledExecutorService scheduledExecutorService;\n    private final BrokerStatsManager brokerStatsManager;\n    private final MessageArrivingListener messageArrivingListener;\n    private final BrokerConfig brokerConfig;\n\n    private volatile boolean shutdown = true;\n    protected boolean notifyMessageArriveInBatch = false;\n\n    private StoreCheckpoint storeCheckpoint;\n    private TimerMessageStore timerMessageStore;\n\n    private final LinkedList<CommitLogDispatcher> dispatcherList;",
                "newContent": "    private CompactionService compactionService;\n\n    private final StoreStatsService storeStatsService;\n\n    private final TransientStorePool transientStorePool;\n\n    protected final RunningFlags runningFlags = new RunningFlags();\n    private final SystemClock systemClock = new SystemClock();\n\n    private final ScheduledExecutorService scheduledExecutorService;\n    // private final BrokerStatsManager brokerStatsManager; // Removed as part of refactoring\n    private final MessageArrivingListener messageArrivingListener;\n    private final BrokerConfig brokerConfig;\n\n    private volatile boolean shutdown = true;\n    protected boolean notifyMessageArriveInBatch = false;\n\n    private StoreCheckpoint storeCheckpoint;\n    private TimerMessageStore timerMessageStore;\n\n    private final LinkedList<CommitLogDispatcher> dispatcherList;"
            },
            {
                "fromLine": 205,
                "toLine": 225,
                "oldContent": "    private final DispatchRequestOrderlyQueue dispatchRequestOrderlyQueue = new DispatchRequestOrderlyQueue(dispatchRequestOrderlyQueueSize);\n\n    private long stateMachineVersion = 0L;\n\n    // this is a unmodifiableMap\n    private ConcurrentMap<String, TopicConfig> topicConfigTable;\n\n    private final ScheduledExecutorService scheduledCleanQueueExecutorService =\n        ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"StoreCleanQueueScheduledThread\"));\n\n    public DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws IOException {\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.messageStoreConfig = messageStoreConfig;\n        this.aliveReplicasNum = messageStoreConfig.getTotalReplicas();\n        this.brokerStatsManager = brokerStatsManager;\n        this.topicConfigTable = topicConfigTable;\n        this.allocateMappedFileService = new AllocateMappedFileService(this);\n        if (messageStoreConfig.isEnableDLegerCommitLog()) {\n            this.commitLog = new DLedgerCommitLog(this);",
                "newContent": "    private final DispatchRequestOrderlyQueue dispatchRequestOrderlyQueue = new DispatchRequestOrderlyQueue(dispatchRequestOrderlyQueueSize);\n\n    private long stateMachineVersion = 0L;\n\n    // this is a unmodifiableMap\n    private ConcurrentMap<String, TopicConfig> topicConfigTable;\n\n    private final ScheduledExecutorService scheduledCleanQueueExecutorService =\n        ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\"StoreCleanQueueScheduledThread\"));\n\n    // Constructor modified to remove BrokerStatsManager\n    public DefaultMessageStore(final MessageStoreConfig messageStoreConfig,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws IOException {\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.messageStoreConfig = messageStoreConfig;\n        this.aliveReplicasNum = messageStoreConfig.getTotalReplicas();\n        // this.brokerStatsManager = brokerStatsManager; // Removed as part of refactoring\n        this.topicConfigTable = topicConfigTable;\n        this.allocateMappedFileService = new AllocateMappedFileService(this);\n        if (messageStoreConfig.isEnableDLegerCommitLog()) {\n            this.commitLog = new DLedgerCommitLog(this);"
            },
            {
                "fromLine": 1996,
                "toLine": 2016,
                "oldContent": "\n    @Override\n    public long getStateMachineVersion() {\n        return stateMachineVersion;\n    }\n\n    public void setStateMachineVersion(long stateMachineVersion) {\n        this.stateMachineVersion = stateMachineVersion;\n    }\n\n    public BrokerStatsManager getBrokerStatsManager() {\n        return brokerStatsManager;\n    }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;\n    }\n\n    public int remainTransientStoreBufferNumbs() {\n        if (this.isTransientStorePoolEnable()) {\n            return this.transientStorePool.availableBufferNums();",
                "newContent": "\n    @Override\n    public long getStateMachineVersion() {\n        return stateMachineVersion;\n    }\n\n    public void setStateMachineVersion(long stateMachineVersion) {\n        this.stateMachineVersion = stateMachineVersion;\n    }\n\n    // The following method has been removed as part of the refactoring process.\n    // public BrokerStatsManager getBrokerStatsManager() {\n    //     return brokerStatsManager;\n    // }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;\n    }\n\n    public int remainTransientStoreBufferNumbs() {\n        if (this.isTransientStorePoolEnable()) {\n            return this.transientStorePool.availableBufferNums();"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java": [
            {
                "fromLine": 149,
                "toLine": 174,
                "oldContent": "    protected long lastTimeOfCheckMetrics = System.currentTimeMillis();\n    protected AtomicInteger frequency = new AtomicInteger(0);\n\n    private volatile BrokerRole lastBrokerRole = BrokerRole.SLAVE;\n    //the dequeue is an asynchronous process, use this flag to track if the status has changed\n    private boolean dequeueStatusChangeFlag = false;\n    private long shouldStartTime;\n\n    // True if current store is master or current brokerId is equal to the minimum brokerId of the replica group in slaveActingMaster mode.\n    protected volatile boolean shouldRunningDequeue;\n    private final BrokerStatsManager brokerStatsManager;\n    private Function<MessageExtBrokerInner, PutMessageResult> escapeBridgeHook;\n\n    public TimerMessageStore(final MessageStore messageStore, final MessageStoreConfig storeConfig,\n        TimerCheckpoint timerCheckpoint, TimerMetrics timerMetrics,\n        final BrokerStatsManager brokerStatsManager) throws IOException {\n\n        this.messageStore = messageStore;\n        this.storeConfig = storeConfig;\n        this.commitLogFileSize = storeConfig.getMappedFileSizeCommitLog();\n        this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();\n        this.precisionMs = storeConfig.getTimerPrecisionMs();\n\n        // TimerWheel contains the fixed number of slots regardless of precision.\n        this.slotsTotal = TIMER_WHEEL_TTL_DAY * DAY_SECS;\n        this.timerWheel = new TimerWheel(",
                "newContent": "    protected long lastTimeOfCheckMetrics = System.currentTimeMillis();\n    protected AtomicInteger frequency = new AtomicInteger(0);\n\n    private volatile BrokerRole lastBrokerRole = BrokerRole.SLAVE;\n    //the dequeue is an asynchronous process, use this flag to track if the status has changed\n    private boolean dequeueStatusChangeFlag = false;\n    private long shouldStartTime;\n\n    // True if current store is master or current brokerId is equal to the minimum brokerId of the replica group in slaveActingMaster mode.\n    protected volatile boolean shouldRunningDequeue;\n    // private final BrokerStatsManager brokerStatsManager; // Removed as part of refactoring\n    private Function<MessageExtBrokerInner, PutMessageResult> escapeBridgeHook;\n\n    // Constructor modified to remove BrokerStatsManager\n    public TimerMessageStore(final MessageStore messageStore, final MessageStoreConfig storeConfig,\n        TimerCheckpoint timerCheckpoint, TimerMetrics timerMetrics) throws IOException {\n\n        this.messageStore = messageStore;\n        this.storeConfig = storeConfig;\n        this.commitLogFileSize = storeConfig.getMappedFileSizeCommitLog();\n        this.timerLogFileSize = storeConfig.getMappedFileSizeTimerLog();\n        this.precisionMs = storeConfig.getTimerPrecisionMs();\n\n        // TimerWheel contains the fixed number of slots regardless of precision.\n        this.slotsTotal = TIMER_WHEEL_TTL_DAY * DAY_SECS;\n        this.timerWheel = new TimerWheel("
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/MessageStore.java": [
            {
                "fromLine": 595,
                "toLine": 615,
                "oldContent": "     * @param queueId Queue ID.\n     * @return Consume queue.\n     */\n    ConsumeQueueInterface findConsumeQueue(String topic, int queueId);\n\n    /**\n     * Get BrokerStatsManager of the messageStore.\n     *\n     * @return BrokerStatsManager.\n     */\n    BrokerStatsManager getBrokerStatsManager();\n\n    /**\n     * Will be triggered when a new message is appended to commit log.\n     *\n     * @param msg           the msg that is appended to commit log\n     * @param result        append message result\n     * @param commitLogFile commit log file\n     */\n    void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile);\n",
                "newContent": "     * @param queueId Queue ID.\n     * @return Consume queue.\n     */\n    ConsumeQueueInterface findConsumeQueue(String topic, int queueId);\n\n    /**\n     * The following method has been removed as part of the refactoring process.\n     *\n     * // Get BrokerStatsManager of the messageStore.\n     * // @return BrokerStatsManager.\n     * // BrokerStatsManager getBrokerStatsManager();\n     *\n     * Will be triggered when a new message is appended to commit log.\n     *\n     * @param msg           the msg that is appended to commit log\n     * @param result        append message result\n     * @param commitLogFile commit log file\n     */\n    void onCommitLogAppend(MessageExtBrokerInner msg, AppendMessageResult result, MappedFile commitLogFile);\n"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/RocksDBMessageStore.java": [
            {
                "fromLine": 16,
                "toLine": 52,
                "oldContent": " */\npackage org.apache.rocketmq.store;\n\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.metrics.RocksDBStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueue;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\nimport org.rocksdb.RocksDBException;\n\npublic class RocksDBMessageStore extends DefaultMessageStore {\n\n    public RocksDBMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws\n        IOException {\n        super(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig, topicConfigTable);\n        notifyMessageArriveInBatch = true;\n    }\n\n    @Override\n    public ConsumeQueueStoreInterface createConsumeQueueStore() {\n        return new RocksDBConsumeQueueStore(this);\n    }",
                "newContent": " */\npackage org.apache.rocketmq.store;\n\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.function.Supplier;\n\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport io.opentelemetry.api.metrics.Meter;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.TopicConfig;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.config.StorePathConfigHelper;\nimport org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager;\nimport org.apache.rocketmq.store.metrics.RocksDBStoreMetricsManager;\nimport org.apache.rocketmq.store.queue.ConsumeQueueInterface;\nimport org.apache.rocketmq.store.queue.ConsumeQueueStoreInterface;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueue;\nimport org.apache.rocketmq.store.queue.RocksDBConsumeQueueStore;\n// import org.apache.rocketmq.store.stats.BrokerStatsManager; // Removed as part of refactoring\nimport org.rocksdb.RocksDBException;\n\npublic class RocksDBMessageStore extends DefaultMessageStore {\n\n    // Constructor modified to remove BrokerStatsManager\n    public RocksDBMessageStore(final MessageStoreConfig messageStoreConfig,\n        final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig, final ConcurrentMap<String, TopicConfig> topicConfigTable) throws\n        IOException {\n        super(messageStoreConfig, messageArrivingListener, brokerConfig, topicConfigTable);\n        notifyMessageArriveInBatch = true;\n    }\n\n    @Override\n    public ConsumeQueueStoreInterface createConsumeQueueStore() {\n        return new RocksDBConsumeQueueStore(this);\n    }"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/plugin/AbstractPluginMessageStore.java": [
            {
                "fromLine": 326,
                "toLine": 346,
                "oldContent": "    public ConsumeQueueInterface getConsumeQueue(String topic, int queueId) {\n        return next.getConsumeQueue(topic, queueId);\n    }\n\n    @Override\n    public ConsumeQueueInterface findConsumeQueue(String topic, int queueId) {\n        return next.findConsumeQueue(topic, queueId);\n    }\n\n    @Override\n    public BrokerStatsManager getBrokerStatsManager() {\n        return next.getBrokerStatsManager();\n    }\n\n    @Override\n    public int remainTransientStoreBufferNumbs() {\n        return next.remainTransientStoreBufferNumbs();\n    }\n\n    @Override\n    public long remainHowManyDataToCommit() {",
                "newContent": "    public ConsumeQueueInterface getConsumeQueue(String topic, int queueId) {\n        return next.getConsumeQueue(topic, queueId);\n    }\n\n    @Override\n    public ConsumeQueueInterface findConsumeQueue(String topic, int queueId) {\n        return next.findConsumeQueue(topic, queueId);\n    }\n\n    // The following method has been removed as part of the refactoring process.\n    // @Override\n    // public BrokerStatsManager getBrokerStatsManager() {\n    //     return next.getBrokerStatsManager();\n    // }\n\n    @Override\n    public int remainTransientStoreBufferNumbs() {\n        return next.remainTransientStoreBufferNumbs();\n    }\n\n    @Override\n    public long remainHowManyDataToCommit() {"
            }
        ],
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/plugin/MessageStorePluginContext.java": [
            {
                "fromLine": 17,
                "toLine": 59,
                "oldContent": "\npackage org.apache.rocketmq.store.plugin;\n\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.remoting.Configuration;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\n\npublic class MessageStorePluginContext {\n    private MessageStoreConfig messageStoreConfig;\n    private BrokerStatsManager brokerStatsManager;\n    private MessageArrivingListener messageArrivingListener;\n    private BrokerConfig brokerConfig;\n    private final Configuration configuration;\n\n    public MessageStorePluginContext(MessageStoreConfig messageStoreConfig,\n        BrokerStatsManager brokerStatsManager, MessageArrivingListener messageArrivingListener,\n        BrokerConfig brokerConfig, Configuration configuration) {\n        super();\n        this.messageStoreConfig = messageStoreConfig;\n        this.brokerStatsManager = brokerStatsManager;\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.configuration = configuration;\n    }\n\n    public MessageStoreConfig getMessageStoreConfig() {\n        return messageStoreConfig;\n    }\n\n    public BrokerStatsManager getBrokerStatsManager() {\n        return brokerStatsManager;\n    }\n\n    public MessageArrivingListener getMessageArrivingListener() {\n        return messageArrivingListener;\n    }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;\n    }",
                "newContent": "\npackage org.apache.rocketmq.store.plugin;\n\nimport

{
    "refactorings": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/plugin/MessageStorePluginContext.java": [
            {
                "fromLine": 17,
                "toLine": 59,
                "oldContent": "\npackage org.apache.rocketmq.store.plugin;\n\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.remoting.Configuration;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.store.stats.BrokerStatsManager;\n\npublic class MessageStorePluginContext {\n    private MessageStoreConfig messageStoreConfig;\n    private BrokerStatsManager brokerStatsManager;\n    private MessageArrivingListener messageArrivingListener;\n    private BrokerConfig brokerConfig;\n    private final Configuration configuration;\n\n    public MessageStorePluginContext(MessageStoreConfig messageStoreConfig,\n        BrokerStatsManager brokerStatsManager, MessageArrivingListener messageArrivingListener,\n        BrokerConfig brokerConfig, Configuration configuration) {\n        super();\n        this.messageStoreConfig = messageStoreConfig;\n        this.brokerStatsManager = brokerStatsManager;\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.configuration = configuration;\n    }\n\n    public MessageStoreConfig getMessageStoreConfig() {\n        return messageStoreConfig;\n    }\n\n    public BrokerStatsManager getBrokerStatsManager() {\n        return brokerStatsManager;\n    }\n\n    public MessageArrivingListener getMessageArrivingListener() {\n        return messageArrivingListener;\n    }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;\n    }",
                "newContent": "\npackage org.apache.rocketmq.store.plugin;\n\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.remoting.Configuration;\nimport org.apache.rocketmq.store.MessageArrivingListener;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\n// import org.apache.rocketmq.store.stats.BrokerStatsManager; // Removed as part of refactoring\n\npublic class MessageStorePluginContext {\n    private MessageStoreConfig messageStoreConfig;\n    // private BrokerStatsManager brokerStatsManager; // Removed as part of refactoring\n    private MessageArrivingListener messageArrivingListener;\n    private BrokerConfig brokerConfig;\n    private final Configuration configuration;\n\n    // Constructor modified to remove BrokerStatsManager\n    public MessageStorePluginContext(MessageStoreConfig messageStoreConfig,\n        MessageArrivingListener messageArrivingListener,\n        BrokerConfig brokerConfig, Configuration configuration) {\n        super();\n        this.messageStoreConfig = messageStoreConfig;\n        // this.brokerStatsManager = brokerStatsManager; // Removed as part of refactoring\n        this.messageArrivingListener = messageArrivingListener;\n        this.brokerConfig = brokerConfig;\n        this.configuration = configuration;\n    }\n\n    public MessageStoreConfig getMessageStoreConfig() {\n        return messageStoreConfig;\n    }\n\n    // The following method has been removed as part of the refactoring process.\n    // public BrokerStatsManager getBrokerStatsManager() {\n    //     return brokerStatsManager;\n    // }\n\n    public MessageArrivingListener getMessageArrivingListener() {\n        return messageArrivingListener;\n    }\n\n    public BrokerConfig getBrokerConfig() {\n        return brokerConfig;\n    }"
            }
        ]
    },
    "extractedClasses": {
        "/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java": "package org.apache.rocketmq.store.stats;\n\n// The content of this class has been removed as part of the refactoring process.\n"
    }
}