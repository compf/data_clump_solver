refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		0",
		toLine:"		19",
		oldContent:"
				
",
		newContent:"
		package org.apache.rocketmq.store.stats;
		
		// The content of this class has been removed as part of the refactoring process.
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		930",
		toLine:"		950",
		oldContent:"
		                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());
		                    } finally {
		                        if (bufferConsumeQueue != null) {
		                            bufferConsumeQueue.release();
		                        }
		                    }
		                }
		
		                if (diskFallRecorded) {
		                    long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                    brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		                }
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));
		                getResult.setSuggestPullingFromSlave(diff > memory);
		            }
		        } else {
		            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;
		            nextBeginOffset = nextOffsetCorrection(offset, 0);		
",
		newContent:"
		                            group, topic, queueId, offset, minOffset, maxOffset, e.getMessage());
		                    } finally {
		                        if (bufferConsumeQueue != null) {
		                            bufferConsumeQueue.release();
		                        }
		                    }
		                }
		
		                // The following code has been removed as part of the refactoring process.
		                // if (diskFallRecorded) {
		                //     long fallBehind = maxOffsetPy - maxPhyOffsetPulling;
		                //     brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);
		                // }
		
		                long diff = maxOffsetPy - maxPhyOffsetPulling;
		                long memory = (long) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE
		                    * (this.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / 100.0));
		                getResult.setSuggestPullingFromSlave(diff > memory);
		            }
		        } else {
		            status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;
		            nextBeginOffset = nextOffsetCorrection(offset, 0);		
",
,
		fromLine:"		1387",
		toLine:"		1407",
		oldContent:"
		                    LOGGER.error("DeleteTopic: ConsumeQueue cleans error!, topic={}, queueId={}", cq.getTopic(), cq.getQueueId(), e);
		                }
		                LOGGER.info("DeleteTopic: ConsumeQueue has been cleaned, topic={}, queueId={}", cq.getTopic(), cq.getQueueId());
		                this.consumeQueueStore.removeTopicQueueTable(cq.getTopic(), cq.getQueueId());
		            }
		
		            // remove topic from cq table
		            this.consumeQueueStore.getConsumeQueueTable().remove(topic);
		
		            if (this.brokerConfig.isAutoDeleteUnusedStats()) {
		                this.brokerStatsManager.onTopicDeleted(topic);
		            }
		
		            // destroy consume queue dir
		            String consumeQueueDir = StorePathConfigHelper.getStorePathConsumeQueue(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
		            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueueExt(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
		            String batchConsumeQueueDir = StorePathConfigHelper.getStorePathBatchConsumeQueue(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
				
",
		newContent:"
		                    LOGGER.error("DeleteTopic: ConsumeQueue cleans error!, topic={}, queueId={}", cq.getTopic(), cq.getQueueId(), e);
		                }
		                LOGGER.info("DeleteTopic: ConsumeQueue has been cleaned, topic={}, queueId={}", cq.getTopic(), cq.getQueueId());
		                this.consumeQueueStore.removeTopicQueueTable(cq.getTopic(), cq.getQueueId());
		            }
		
		            // remove topic from cq table
		            this.consumeQueueStore.getConsumeQueueTable().remove(topic);
		
		            // The following code has been removed as part of the refactoring process.
		            // if (this.brokerConfig.isAutoDeleteUnusedStats()) {
		            //     this.brokerStatsManager.onTopicDeleted(topic);
		            // }
		
		            // destroy consume queue dir
		            String consumeQueueDir = StorePathConfigHelper.getStorePathConsumeQueue(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
		            String consumeQueueExtDir = StorePathConfigHelper.getStorePathConsumeQueueExt(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
		            String batchConsumeQueueDir = StorePathConfigHelper.getStorePathBatchConsumeQueue(
		                this.messageStoreConfig.getStorePathRootDir()) + File.separator + topic;
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/timer/TimerMessageStore.java:
	[
		fromLine:"		1085",
		toLine:"		1110",
		oldContent:"
		        }
		
		        int retryNum = 0;
		        while (retryNum < 3) {
		            if (null == putMessageResult || null == putMessageResult.getPutMessageStatus()) {
		                retryNum++;
		            } else {
		                switch (putMessageResult.getPutMessageStatus()) {
		                    case PUT_OK:
		                        if (brokerStatsManager != null) {
		                            this.brokerStatsManager.incTopicPutNums(message.getTopic(), 1, 1);
		                            if (putMessageResult.getAppendMessageResult() != null) {
		                                this.brokerStatsManager.incTopicPutSize(message.getTopic(),
		                                        putMessageResult.getAppendMessageResult().getWroteBytes());
		                            }
		                            this.brokerStatsManager.incBrokerPutNums(message.getTopic(), 1);
		                        }
		                        return PUT_OK;
		                    case SERVICE_NOT_AVAILABLE:
		                        return PUT_NEED_RETRY;
		                    case MESSAGE_ILLEGAL:
		                    case PROPERTIES_SIZE_EXCEEDED:
		                        return PUT_NO_RETRY;
		                    case CREATE_MAPPED_FILE_FAILED:
		                    case FLUSH_DISK_TIMEOUT:
		                    case FLUSH_SLAVE_TIMEOUT:		
",
		newContent:"
		        }
		
		        int retryNum = 0;
		        while (retryNum < 3) {
		            if (null == putMessageResult || null == putMessageResult.getPutMessageStatus()) {
		                retryNum++;
		            } else {
		                switch (putMessageResult.getPutMessageStatus()) {
		                    case PUT_OK:
		                        // The following code has been removed as part of the refactoring process.
		                        // if (brokerStatsManager != null) {
		                        //     this.brokerStatsManager.incTopicPutNums(message.getTopic(), 1, 1);
		                        //     if (putMessageResult.getAppendMessageResult() != null) {
		                        //         this.brokerStatsManager.incTopicPutSize(message.getTopic(),
		                        //                 putMessageResult.getAppendMessageResult().getWroteBytes());
		                        //     }
		                        //     this.brokerStatsManager.incBrokerPutNums(message.getTopic(), 1);
		                        // }
		                        return PUT_OK;
		                    case SERVICE_NOT_AVAILABLE:
		                        return PUT_NEED_RETRY;
		                    case MESSAGE_ILLEGAL:
		                    case PROPERTIES_SIZE_EXCEEDED:
		                        return PUT_NO_RETRY;
		                    case CREATE_MAPPED_FILE_FAILED:
		                    case FLUSH_DISK_TIMEOUT:
		                    case FLUSH_SLAVE_TIMEOUT:		
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		14",
		toLine:"		127",
		oldContent:"
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		package org.apache.rocketmq.store.stats;
		
		import org.apache.rocketmq.common.MixAll;
		
		public class LmqBrokerStatsManager extends BrokerStatsManager {
		
		    public LmqBrokerStatsManager(String clusterName, boolean enableQueueStat) {
		        super(clusterName, enableQueueStat);
		    }
		
		    @Override
		    public void incGroupGetNums(final String group, final String topic, final int incValue) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.incGroupGetNums(lmqGroup, lmqTopic, incValue);
		    }
		
		    @Override
		    public void incGroupGetSize(final String group, final String topic, final int incValue) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.incGroupGetSize(lmqGroup, lmqTopic, incValue);
		    }
		
		    @Override
		    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.incGroupGetLatency(lmqGroup, lmqTopic, queueId, incValue);
		    }
		
		    @Override
		    public void incSendBackNums(final String group, final String topic) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.incSendBackNums(lmqGroup, lmqTopic);
		    }
		
		    @Override
		    public double tpsGroupGetNums(final String group, final String topic) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        return super.tpsGroupGetNums(lmqGroup, lmqTopic);
		    }
		
		    @Override
		    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindTime(lmqGroup, lmqTopic, queueId, fallBehind);
		    }
		
		    @Override
		    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
		        final long fallBehind) {
		        String lmqGroup = group;
		        String lmqTopic = topic;
		        if (MixAll.isLmq(group)) {
		            lmqGroup = MixAll.LMQ_PREFIX;
		        }
		        if (MixAll.isLmq(topic)) {
		            lmqTopic = MixAll.LMQ_PREFIX;
		        }
		        super.recordDiskFallBehindSize(lmqGroup, lmqTopic, queueId, fallBehind);
		    }
		
		}
				
",
		newContent:"
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		package org.apache.rocketmq.store.stats;
		
		import org.apache.rocketmq.common.MixAll;
		
		public class LmqBrokerStatsManager extends BrokerStatsManager {
		
		    // The content of this class has been removed as part of the refactoring process.
		}
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStats.java:
	[
		fromLine:"		36",
		toLine:"		58",
		oldContent:"
		
		    public BrokerStats(MessageStore defaultMessageStore) {
		        this.defaultMessageStore = defaultMessageStore;
		    }
		
		    public void record() {
		        this.msgPutTotalYesterdayMorning = this.msgPutTotalTodayMorning;
		        this.msgGetTotalYesterdayMorning = this.msgGetTotalTodayMorning;
		
		        this.msgPutTotalTodayMorning =
		            this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
		        this.msgGetTotalTodayMorning =
		            this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
		
		        log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
		        log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
		    }
		
		    public long getMsgPutTotalYesterdayMorning() {
		        return msgPutTotalYesterdayMorning;
		    }
		
		    public void setMsgPutTotalYesterdayMorning(long msgPutTotalYesterdayMorning) {		
",
		newContent:"
		
		    public BrokerStats(MessageStore defaultMessageStore) {
		        this.defaultMessageStore = defaultMessageStore;
		    }
		
		    public void record() {
		        this.msgPutTotalYesterdayMorning = this.msgPutTotalTodayMorning;
		        this.msgGetTotalYesterdayMorning = this.msgGetTotalTodayMorning;
		
		        // The following code has been removed as part of the refactoring process.
		        // this.msgPutTotalTodayMorning =
		        //     this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
		        // this.msgGetTotalTodayMorning =
		        //     this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
		
		        log.info("yesterday put message total: {}", msgPutTotalTodayMorning - msgPutTotalYesterdayMorning);
		        log.info("yesterday get message total: {}", msgGetTotalTodayMorning - msgGetTotalYesterdayMorning);
		    }
		
		    public long getMsgPutTotalYesterdayMorning() {
		        return msgPutTotalYesterdayMorning;
		    }
		
		    public void setMsgPutTotalYesterdayMorning(long msgPutTotalYesterdayMorning) {		
",
,
		fromLine:"		77",
		toLine:"		101",
		oldContent:"
		
		    public long getMsgGetTotalTodayMorning() {
		        return msgGetTotalTodayMorning;
		    }
		
		    public void setMsgGetTotalTodayMorning(long msgGetTotalTodayMorning) {
		        this.msgGetTotalTodayMorning = msgGetTotalTodayMorning;
		    }
		
		    public long getMsgPutTotalTodayNow() {
		        return this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
		    }
		
		    public long getMsgGetTotalTodayNow() {
		        return this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
		    }
		}
				
",
		newContent:"
		
		    public long getMsgGetTotalTodayMorning() {
		        return msgGetTotalTodayMorning;
		    }
		
		    public void setMsgGetTotalTodayMorning(long msgGetTotalTodayMorning) {
		        this.msgGetTotalTodayMorning = msgGetTotalTodayMorning;
		    }
		
		    // The following code has been removed as part of the refactoring process.
		    // public long getMsgPutTotalTodayNow() {
		    //     return this.defaultMessageStore.getBrokerStatsManager().getBrokerPutNumsWithoutSystemTopic();
		    // }
		
		    // public long getMsgGetTotalTodayNow() {
		    //     return this.defaultMessageStore.getBrokerStatsManager().getBrokerGetNumsWithoutSystemTopic();
		    // }
		}
				
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:"
	package org.apache.rocketmq.store.stats;
	
	// The content of this class has been removed as part of the refactoring process.
		
",

}
