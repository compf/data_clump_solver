refactorings:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
	[
		fromLine:"		89",
		toLine:"		92",
		oldContent:"
		    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
		    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
		    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;		
",
		newContent:"
				
",
,
		fromLine:"		152",
		toLine:"		200",
		oldContent:"
		            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
		            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
		            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
		        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
		            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
		            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
		        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
		            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));		
",
		newContent:"
				
",
,
		fromLine:"		312",
		toLine:"		323",
		oldContent:"
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
		        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");		
",
		newContent:"
				
",
,
		fromLine:"		329",
		toLine:"		336",
		oldContent:"
		        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");		
",
		newContent:"
				
",
,
		fromLine:"		343",
		toLine:"		556",
		oldContent:"
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
		            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
		            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
		            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
		            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
		        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
		        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
		        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
		        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
		        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
		        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
		        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
		        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
		        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);		
",
		newContent:"
				
",
,
		fromLine:"		561",
		toLine:"		561",
		oldContent:"
		        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();		
",
		newContent:"
				
",
,
		fromLine:"		564",
		toLine:"		564",
		oldContent:"
		    public void recordDiskFallBehindTime(final ConsumerGroupTopicQueue groupTopicQueue, final long fallBehind) {		
",
		newContent:"
				
",
,
		fromLine:"		569",
		toLine:"		569",
		oldContent:"
		    public void recordDiskFallBehindSize(final ConsumerGroupTopicQueue groupTopicQueue, final long fallBehind) {		
",
		newContent:"
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/DefaultMessageStore.java:
	[
		fromLine:"		940",
		toLine:"		940",
		oldContent:"
		                    brokerStatsManager.recordDiskFallBehindSize(new ConsumerGroupTopicQueue(group, topic, queueId), fallBehind);		
",
		newContent:"
				
",
,

	],
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/LmqBrokerStatsManager.java:
	[
		fromLine:"		103",
		toLine:"		103",
		oldContent:"
		        super.recordDiskFallBehindTime(new ConsumerGroupTopicQueue(lmqGroup, lmqTopic, queueId), fallBehind);		
",
		newContent:"
				
",
,
		fromLine:"		117",
		toLine:"		117",
		oldContent:"
		        super.recordDiskFallBehindSize(new ConsumerGroupTopicQueue(lmqGroup, lmqTopic, queueId), fallBehind);		
",
		newContent:"
				
",
,

	],

}
extractedClasses:
{
	/root/data_clump_solver/cloned_projects/rocketmq_refactor/common/src/main/java/org/apache/rocketmq/common/stats/ConsumerGroupTopicQueue.java:"
	package org.apache.rocketmq.common.stats;
	
	public class ConsumerGroupTopicQueue {
	    private final String group;
	    private final String topic;
	    private final int queueId;
	
	    public ConsumerGroupTopicQueue(String group, String topic, int queueId) {
	        this.group = group;
	        this.topic = topic;
	        this.queueId = queueId;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getTopic() {
	        return topic;
	    }
	
	    public int getQueueId() {
	        return queueId;
	    }
	}
		
",

}
