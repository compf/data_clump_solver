messages:
[
	content:"
	
	I will provide you one or more Java code files.
	
	Refactor all data clumps in the respective files.
	To do this, replace the method parameters or fields of all data clump variables by a reference to the extracted class, and update all usages accordingly.
	Also provide the content of all extracted classes.
	If possible, the extracted classes should not be just mere data classes but contain additional functionality to increase readability and usability.
	
	
	 Examples of data clump are provided below.
	## Examples
	/* 
	    These examples show data clumps and how they might be refactored
	    Imports are missing so these examples would not compile
	*/
	// ### example 5#########################
	//'method parameters to method parameters' data clump
	class Example1A {
	
	    // both methods share at least 3 parameters, so we can extract those 3
	    // parameters into a class
	
	    public static String buildServiceKey(String path, String group, String version) {
	        int length = path == null ? 0 : path.length();
	        length += group == null ? 0 : group.length();
	        length += version == null ? 0 : version.length();
	        length += 2;
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(group)) {
	            buf.append(group).append('/');
	        }
	        buf.append(path);
	        if (StringUtils.isNotEmpty(version)) {
	            buf.append(':').append(version);
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(String path, String group, String version, String prefix) {
	        return prefix + buildServiceKey(path, group, version);
	    }
	
	}
	
	// ## refactored ##################################
	class KeyData {
	    private String path;
	    private String group;
	    private String version;
	
	    KeyData(String path, String group, String version) {
	        this.path = path;
	        this.group = group;
	        this.version = version;
	    }
	
	    public String getPath() {
	        return path;
	    }
	
	    public String getGroup() {
	        return group;
	    }
	
	    public String getVersion() {
	        return version;
	    }
	
	    public int getLength() {
	        return path == null ? 0
	                : path.length() + group == null ? 0 : group.length() + version == null ? 0 : version.length() + 2;
	    }
	
	}
	
	class Example1A {
	
	    public static String buildServiceKey(KeyData keyData) {
	        int length = keyData.getLength();
	        StringBuilder buf = new StringBuilder(length);
	        if (StringUtils.isNotEmpty(keyData.getGroup())) {
	            buf.append(keyData.getGroup()).append('/');
	        }
	        buf.append(keyData.getPath());
	        if (StringUtils.isNotEmpty(keyData.getVersion())) {
	            buf.append(':').append(keyData.getVersion());
	        }
	        return buf.toString().intern();
	    }
	
	    public static String buildKey(KeyData keyData, String prefix) {
	        return prefix + buildServiceKey(keyData);
	    }
	}
	// #### example 5 end ##################################
	
	//
	
	// ## example 2 ##################################
	// 'fields to fields' data clump
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a class
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
				
				int state = node.getId();
				states.add(state);
				successors.put(state, new ArrayList<Integer>());
				labels.put(state, new ArrayList<Label>())
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + successors.get(state) + ", Labels: "
	                    + labels.get(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## refactored ##################################
	
	class StateGraphData {
	    private List<Integer> states;
	    private Map<Integer, List<Integer>> successors;
	    private Map<Integer, List<Label>> labels;
	
	    StateGraphData() {
	        this.states = new ArrayList<Integer>();
	        this.successors = new HashMap<Integer, List<Integer>>();
	        this.labels = new HashMap<Integer, List<Label>>();
	    }
	
	    public List<Integer> getStates() {
	        return states;
	    }
	
	    public Map<Integer, List<Integer>> getSuccessors(int state) {
	        return successors.get(state);
	    }
	
	    public Map<Integer, List<Label>> getLabels(int state) {
	        return labels.get(state);
	    }
	
	    public void addState(int state) {
	        states.add(state);
	        successors.put(state, new ArrayList<Integer>());
	        labels.put(state, new ArrayList<Label>());
	    }
	
	}
	
	class Example2A {
	
	    // both classes share at least 3 fields, so we can extract those 3 fields into a
	    // class
	    private StateGraphData stateGraphData;
	    private SmPLMethodCFG cfg;
	
	    void init() {
	        for (ControlFlowNode node : cfg.vertexSet()) {
	
	            stateGraphData.addState(node.getId());
	        }
	    }
	
	}
	
	// Example2B.java
	class Example2B {
	    private StateGraphData stateGraphData;
	    private Map<Integer, String> stateDescriptions;
	
	    void print() {
	        for (int state : states) {
	            System.out.println("State: " + state + ", Successors: " + stateGraphData.getSuccessor(state) + ", Labels: "
	                    + stateGraphData.getLabel(state) + ", Description: " + stateDescriptions.get(state));
	        }
	    }
	}
	// ## example 2 end ##################################
	
	// ## example 3 ##################################
	// 'parameters to fields' data clump
	class Example3A {
	    boolean validate(String methodName, Class<?>[] parameterTypes, Object[] arguments) {
	        return parameterTypes.length == arguments.length;
	    }
	}
	
	// Example3B.java
	class Example3B {
	
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private String methodName;
	
	    private Class<?>[] parameterTypes;
	
	    private Object[] arguments;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	
	}
	
	// ## refactored ##################################
	class MethodCallData {
	    public String methodName;
	    public Class<?>[] parameterTypes;
	    public Object[] arguments;
	
	    public boolean isValid() {
	        return parameterTypes.length == arguments.length;
	    }
	
	}
	
	class Example3A {
	    boolean validate(MethodCallData methodCallData) {
	        return methodCallData.isValid();
	    }
	}
	
	class Example3B {
	    private URL consumerUrl;
	
	    private List<URL> urls;
	
	    private URL url;
	
	    private MethodCallData methodCallData;
	
	    private InetSocketAddress localAddress;
	
	    private InetSocketAddress remoteAddress;
	}
	// ## example 3 end ##################################
	
	// ## example 4 ##################################
	class Example4A {
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        writer.incrementNumberReturned();
	        writer.setAxisOrder(CRS.getAxisOrder(featureCrs));
	    }
	}
	
	// Example4B.java
	class Example4B extends Example4A {
	     // This pair of methods do not constitute a data clump even if signature is copied because
	    // the method is overridden and therefore must have the same paremeters
	    @Override
	    protected void beforeEvaluation(TemplateOutputWriter writer, RootBuilder root, Feature feature)
	            throws IOException {
	        root.reset();
	        super.beforeEvaluation(writer, root, feature);
	    }
	   
	}
	// ## example 4 end ##################################
	
	## Examples end
	
	
	Use the following JSON format for the output:
	
	## JSON
	
	{
	    "refactorings":{
	        // for each refactored file
	        "file1Path": [
	            // for each change in the file performed by you. Try to group changes of neighboring lines
	            {
	                "fromLine": "<the fromLine>",
	                "toLine":"<the toLine>",
	                "oldContent": "the old content of the changed lines",
	                "newContent": "the new content of the changed lines"
	            },
	            //...
	        ]
	    },
	    "extractedClasses":{
	          // for each extracted class
	        "extractedClassPath1": "full content of the newly extracted class 1 ",
	        //...
	    }
	}
	
	## END JSON
	
		
",
	role:"
	user	
",
,
	content:"
	//common/src/main/java/org/apache/rocketmq/common/stats/Stats.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.common.stats;
	
	public class Stats {
	
	    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
	    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
	    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
	    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
	    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
	    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
	    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
	    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
	    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
	    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
	    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
	    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
	    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
	    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
	    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
	    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
	    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
	    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
	    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
	    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
	    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
	    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
	
	    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
	    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
	    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
	}
		
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
	    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
	    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
	    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
	    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
	    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
	
	    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
	    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;
	
	    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
	    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
	    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
	    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
	    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
	    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
	    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;
	    // For commercial
	    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
	    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
	    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
	    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
	    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
	    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
	    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
	    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
	    // Pull Message Latency
	    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.broker.metrics;
	
	import java.util.Map;
	import java.util.Set;
	import java.util.function.Consumer;
	import java.util.stream.Collectors;
	import org.apache.rocketmq.broker.BrokerController;
	import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
	import org.apache.rocketmq.broker.client.ConsumerManager;
	import org.apache.rocketmq.broker.filter.ConsumerFilterData;
	import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
	import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
	import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
	import org.apache.rocketmq.broker.processor.PopBufferMergeService;
	import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
	import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
	import org.apache.rocketmq.broker.topic.TopicConfigManager;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.KeyBuilder;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.common.TopicConfig;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.constant.PermName;
	import org.apache.rocketmq.common.filter.ExpressionType;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
	import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
	import org.apache.rocketmq.store.DefaultMessageFilter;
	import org.apache.rocketmq.store.MessageStore;
	
	public class ConsumerLagCalculator {
	    private final BrokerConfig brokerConfig;
	    private final TopicConfigManager topicConfigManager;
	    private final ConsumerManager consumerManager;
	    private final ConsumerOffsetManager offsetManager;
	    private final ConsumerFilterManager consumerFilterManager;
	    private final SubscriptionGroupManager subscriptionGroupManager;
	    private final MessageStore messageStore;
	    private final PopBufferMergeService popBufferMergeService;
	    private final PopInflightMessageCounter popInflightMessageCounter;
	
	    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
	
	    public ConsumerLagCalculator(BrokerController brokerController) {
	        this.brokerConfig = brokerController.getBrokerConfig();
	        this.topicConfigManager = brokerController.getTopicConfigManager();
	        this.consumerManager = brokerController.getConsumerManager();
	        this.offsetManager = brokerController.getConsumerOffsetManager();
	        this.consumerFilterManager = brokerController.getConsumerFilterManager();
	        this.subscriptionGroupManager = brokerController.getSubscriptionGroupManager();
	        this.messageStore = brokerController.getMessageStore();
	        this.popBufferMergeService = brokerController.getPopMessageProcessor().getPopBufferMergeService();
	        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();
	    }
	
	    private static class ProcessGroupInfo {
	        public String group;
	        public String topic;
	        public boolean isPop;
	        public String retryTopic;
	
	        public ProcessGroupInfo(String group, String topic, boolean isPop,
	            String retryTopic) {
	            this.group = group;
	            this.topic = topic;
	            this.isPop = isPop;
	            this.retryTopic = retryTopic;
	        }
	    }
	
	    public static class BaseCalculateResult {
	        public String group;
	        public String topic;
	        public boolean isRetry;
	
	        public BaseCalculateResult(String group, String topic, boolean isRetry) {
	            this.group = group;
	            this.topic = topic;
	            this.isRetry = isRetry;
	        }
	    }
	
	    public static class CalculateLagResult extends BaseCalculateResult {
	        public long lag;
	        public long earliestUnconsumedTimestamp;
	
	        public CalculateLagResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateInflightResult extends BaseCalculateResult {
	        public long inFlight;
	        public long earliestUnPulledTimestamp;
	
	        public CalculateInflightResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateAvailableResult extends BaseCalculateResult {
	        public long available;
	
	        public CalculateAvailableResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {
	        for (Map.Entry<String, SubscriptionGroupConfig> subscriptionEntry :
	            subscriptionGroupManager.getSubscriptionGroupTable().entrySet()) {
	
	            String group = subscriptionEntry.getKey();
	            ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	            boolean isPop = false;
	            if (consumerGroupInfo != null) {
	                isPop = consumerGroupInfo.getConsumeType() == ConsumeType.CONSUME_POP;
	            }
	            Set<String> topics;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionEntry.getValue();
	                if (subscriptionGroupConfig.getSubscriptionDataSet() == null ||
	                    subscriptionGroupConfig.getSubscriptionDataSet().isEmpty()) {
	                    continue;
	                }
	                topics = subscriptionGroupConfig.getSubscriptionDataSet()
	                    .stream()
	                    .map(SimpleSubscriptionData::getTopic)
	                    .collect(Collectors.toSet());
	            } else {
	                if (consumerGroupInfo == null) {
	                    continue;
	                }
	                topics = consumerGroupInfo.getSubscribeTopics();
	            }
	
	            if (null == topics || topics.isEmpty()) {
	                continue;
	            }
	            for (String topic : topics) {
	                // skip retry topic
	                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
	                    continue;
	                }
	
	                TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	                if (topicConfig == null) {
	                    continue;
	                }
	
	                // skip no perm topic
	                int topicPerm = topicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                if (!PermName.isReadable(topicPerm) && !PermName.isWriteable(topicPerm)) {
	                    continue;
	                }
	
	                if (isPop) {
	                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group, brokerConfig.isEnableRetryTopicV2());
	                    TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig(retryTopic);
	                    if (retryTopicConfig != null) {
	                        int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                        if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                            consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopic));
	                            continue;
	                        }
	                    }
	                    if (brokerConfig.isEnableRetryTopicV2() && brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
	                        String retryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
	                        TopicConfig retryTopicConfigV1 = topicConfigManager.selectTopicConfig(retryTopicV1);
	                        if (retryTopicConfigV1 != null) {
	                            int retryTopicPerm = retryTopicConfigV1.getPerm() & brokerConfig.getBrokerPermission();
	                            if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                                consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopicV1));
	                                continue;
	                            }
	                        }
	                    }
	                    consumer.accept(new ProcessGroupInfo(group, topic, true, null));
	                } else {
	                    consumer.accept(new ProcessGroupInfo(group, topic, false, null));
	                }
	            }
	        }
	    }
	
	    public void calculateLag(Consumer<CalculateLagResult> lagRecorder) {
	        processAllGroup(info -> {
	            if (info.group == null || info.topic == null) {
	                return;
	            }
	
	            CalculateLagResult result = new CalculateLagResult(info.group, info.topic, false);
	
	            Pair<Long, Long> lag = getConsumerLagStats(info.group, info.topic, info.isPop);
	            if (lag != null) {
	                result.lag = lag.getObject1();
	                result.earliestUnconsumedTimestamp = lag.getObject2();
	            }
	            lagRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryLag = getConsumerLagStats(info.group, info.retryTopic, true);
	
	                result = new CalculateLagResult(info.group, info.topic, true);
	                if (retryLag != null) {
	                    result.lag = retryLag.getObject1();
	                    result.earliestUnconsumedTimestamp = retryLag.getObject2();
	                }
	                lagRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateInflight(Consumer<CalculateInflightResult> inflightRecorder) {
	        processAllGroup(info -> {
	            CalculateInflightResult result = new CalculateInflightResult(info.group, info.topic, false);
	            Pair<Long, Long> inFlight = getInFlightMsgStats(info.group, info.topic, info.isPop);
	            if (inFlight != null) {
	                result.inFlight = inFlight.getObject1();
	                result.earliestUnPulledTimestamp = inFlight.getObject2();
	            }
	            inflightRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryInFlight = getInFlightMsgStats(info.group, info.retryTopic, true);
	
	                result = new CalculateInflightResult(info.group, info.topic, true);
	                if (retryInFlight != null) {
	                    result.inFlight = retryInFlight.getObject1();
	                    result.earliestUnPulledTimestamp = retryInFlight.getObject2();
	                }
	                inflightRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateAvailable(Consumer<CalculateAvailableResult> availableRecorder) {
	        processAllGroup(info -> {
	            CalculateAvailableResult result = new CalculateAvailableResult(info.group, info.topic, false);
	
	            result.available = getAvailableMsgCount(info.group, info.topic, info.isPop);
	            availableRecorder.accept(result);
	
	            if (info.isPop) {
	                long retryAvailable = getAvailableMsgCount(info.group, info.retryTopic, true);
	
	                result = new CalculateAvailableResult(info.group, info.topic, true);
	                result.available = retryAvailable;
	                availableRecorder.accept(result);
	            }
	        });
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnconsumedTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnconsumedTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getConsumerLagStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnconsumedTimestamp = Math.min(earliestUnconsumedTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnconsumedTimestamp < 0 || earliestUnconsumedTimestamp == Long.MAX_VALUE) {
	            earliestUnconsumedTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnconsumedTimestamp);
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        if (isPop) {
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	            long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long lag = calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset) + inFlightNum;
	            long consumerOffset = pullOffset - inFlightNum;
	            long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	            return new Pair<>(lag, consumerStoreTimeStamp);
	        }
	
	        long consumerOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (consumerOffset < 0) {
	            consumerOffset = brokerOffset;
	        }
	
	        long lag = calculateMessageCount(group, topic, queueId, consumerOffset, brokerOffset);
	        long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	        return new Pair<>(lag, consumerStoreTimeStamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnPulledTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnPulledTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getInFlightMsgStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnPulledTimestamp = Math.min(earliestUnPulledTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnPulledTimestamp < 0 || earliestUnPulledTimestamp == Long.MAX_VALUE) {
	            earliestUnPulledTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnPulledTimestamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {
	        if (isPop) {
	            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	            }
	            long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	            return new Pair<>(inflight, pullStoreTimeStamp);
	        }
	
	        long pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        if (pullOffset < 0) {
	            pullOffset = 0;
	        }
	
	        long commitOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (commitOffset < 0) {
	            commitOffset = pullOffset;
	        }
	
	        long inflight = calculateMessageCount(group, topic, queueId, commitOffset, pullOffset);
	        long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	        return new Pair<>(inflight, pullStoreTimeStamp);
	    }
	
	    public long getAvailableMsgCount(String group, String topic, boolean isPop) {
	        long total = 0L;
	
	        if (group == null || topic == null) {
	            return total;
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                total += getAvailableMsgCount(group, topic, queueId, isPop);
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        return total;
	    }
	
	    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        long pullOffset;
	        if (isPop) {
	            pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	        } else {
	            pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        }
	        if (pullOffset < 0) {
	            pullOffset = brokerOffset;
	        }
	
	        return calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset);
	    }
	
	    public long getStoreTimeStamp(String topic, int queueId, long offset) {
	        long storeTimeStamp = Long.MAX_VALUE;
	        if (offset >= 0) {
	            storeTimeStamp = messageStore.getMessageStoreTimeStamp(topic, queueId, offset);
	            storeTimeStamp = storeTimeStamp > 0 ? storeTimeStamp : Long.MAX_VALUE;
	        }
	        return storeTimeStamp;
	    }
	
	    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
	        long count = to - from;
	
	        if (brokerConfig.isEstimateAccumulation() && to > from) {
	            SubscriptionData subscriptionData = null;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(group);
	                if (subscriptionGroupConfig != null) {
	                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
	                        if (topic.equals(simpleSubscriptionData.getTopic())) {
	                            try {
	                                subscriptionData = FilterAPI.buildSubscriptionData(simpleSubscriptionData.getTopic(),
	                                    simpleSubscriptionData.getExpression(), simpleSubscriptionData.getExpressionType());
	                            } catch (Exception e) {
	                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", group, topic, e);
	                            }
	                            break;
	                        }
	                    }
	                }
	            } else {
	                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	                if (consumerGroupInfo != null) {
	                    subscriptionData = consumerGroupInfo.findSubscriptionData(topic);
	                }
	            }
	
	            if (null != subscriptionData) {
	                if (ExpressionType.TAG.equalsIgnoreCase(subscriptionData.getExpressionType())
	                    && !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new DefaultMessageFilter(subscriptionData));
	                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
	                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new ExpressionMessageFilter(subscriptionData,
	                            consumerFilterData,
	                            consumerFilterManager));
	                }
	            }
	
	        }
	        return count < 0 ? 0 : count;
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					common/src/main/java/org/apache/rocketmq/common/stats/Stats.java:
			[
				fromLine:"				23",
				toLine:"				23",
				oldContent:"
				public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";				
",
				newContent:"
				// Removed QUEUE_PUT_NUMS constant				
",
,
				fromLine:"				24",
				toLine:"				24",
				oldContent:"
				public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";				
",
				newContent:"
				// Removed QUEUE_PUT_SIZE constant				
",
,
				fromLine:"				25",
				toLine:"				25",
				oldContent:"
				public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";				
",
				newContent:"
				// Removed QUEUE_GET_NUMS constant				
",
,
				fromLine:"				26",
				toLine:"				26",
				oldContent:"
				public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";				
",
				newContent:"
				// Removed QUEUE_GET_SIZE constant				
",
,
				fromLine:"				27",
				toLine:"				27",
				oldContent:"
				public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";				
",
				newContent:"
				// Removed TOPIC_PUT_NUMS constant				
",
,
				fromLine:"				28",
				toLine:"				28",
				oldContent:"
				public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";				
",
				newContent:"
				// Removed TOPIC_PUT_SIZE constant				
",
,
				fromLine:"				29",
				toLine:"				29",
				oldContent:"
				public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";				
",
				newContent:"
				// Removed GROUP_GET_NUMS constant				
",
,
				fromLine:"				30",
				toLine:"				30",
				oldContent:"
				public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";				
",
				newContent:"
				// Removed GROUP_GET_SIZE constant				
",
,
				fromLine:"				31",
				toLine:"				31",
				oldContent:"
				public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";				
",
				newContent:"
				// Removed SNDBCK_PUT_NUMS constant				
",
,
				fromLine:"				32",
				toLine:"				32",
				oldContent:"
				public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";				
",
				newContent:"
				// Removed BROKER_PUT_NUMS constant				
",
,
				fromLine:"				33",
				toLine:"				33",
				oldContent:"
				public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";				
",
				newContent:"
				// Removed BROKER_GET_NUMS constant				
",
,
				fromLine:"				34",
				toLine:"				34",
				oldContent:"
				public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";				
",
				newContent:"
				// Removed GROUP_GET_FROM_DISK_NUMS constant				
",
,
				fromLine:"				35",
				toLine:"				35",
				oldContent:"
				public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";				
",
				newContent:"
				// Removed GROUP_GET_FROM_DISK_SIZE constant				
",
,
				fromLine:"				36",
				toLine:"				36",
				oldContent:"
				public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";				
",
				newContent:"
				// Removed BROKER_GET_FROM_DISK_NUMS constant				
",
,
				fromLine:"				37",
				toLine:"				37",
				oldContent:"
				public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";				
",
				newContent:"
				// Removed BROKER_GET_FROM_DISK_SIZE constant				
",
,
				fromLine:"				38",
				toLine:"				38",
				oldContent:"
				public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";				
",
				newContent:"
				// Removed COMMERCIAL_SEND_TIMES constant				
",
,
				fromLine:"				39",
				toLine:"				39",
				oldContent:"
				public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";				
",
				newContent:"
				// Removed COMMERCIAL_SNDBCK_TIMES constant				
",
,
				fromLine:"				40",
				toLine:"				40",
				oldContent:"
				public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";				
",
				newContent:"
				// Removed COMMERCIAL_RCV_TIMES constant				
",
,
				fromLine:"				41",
				toLine:"				41",
				oldContent:"
				public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";				
",
				newContent:"
				// Removed COMMERCIAL_RCV_EPOLLS constant				
",
,
				fromLine:"				42",
				toLine:"				42",
				oldContent:"
				public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";				
",
				newContent:"
				// Removed COMMERCIAL_SEND_SIZE constant				
",
,
				fromLine:"				43",
				toLine:"				43",
				oldContent:"
				public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";				
",
				newContent:"
				// Removed COMMERCIAL_RCV_SIZE constant				
",
,
				fromLine:"				44",
				toLine:"				44",
				oldContent:"
				public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";				
",
				newContent:"
				// Removed COMMERCIAL_PERM_FAILURES constant				
",
,
				fromLine:"				46",
				toLine:"				46",
				oldContent:"
				public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";				
",
				newContent:"
				// Removed GROUP_GET_FALL_SIZE constant				
",
,
				fromLine:"				47",
				toLine:"				47",
				oldContent:"
				public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";				
",
				newContent:"
				// Removed GROUP_GET_FALL_TIME constant				
",
,
				fromLine:"				48",
				toLine:"				48",
				oldContent:"
				public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";				
",
				newContent:"
				// Removed GROUP_GET_LATENCY constant				
",
,

			],
			store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
			[
				fromLine:"				43",
				toLine:"				43",
				oldContent:"
				@Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;				
",
				newContent:"
				// Removed QUEUE_PUT_NUMS constant				
",
,
				fromLine:"				44",
				toLine:"				44",
				oldContent:"
				@Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;				
",
				newContent:"
				// Removed QUEUE_PUT_SIZE constant				
",
,
				fromLine:"				45",
				toLine:"				45",
				oldContent:"
				@Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;				
",
				newContent:"
				// Removed QUEUE_GET_NUMS constant				
",
,
				fromLine:"				46",
				toLine:"				46",
				oldContent:"
				@Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;				
",
				newContent:"
				// Removed QUEUE_GET_SIZE constant				
",
,
				fromLine:"				47",
				toLine:"				47",
				oldContent:"
				@Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;				
",
				newContent:"
				// Removed TOPIC_PUT_NUMS constant				
",
,
				fromLine:"				48",
				toLine:"				48",
				oldContent:"
				@Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;				
",
				newContent:"
				// Removed TOPIC_PUT_SIZE constant				
",
,
				fromLine:"				50",
				toLine:"				50",
				oldContent:"
				@Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;				
",
				newContent:"
				// Removed GROUP_GET_NUMS constant				
",
,
				fromLine:"				51",
				toLine:"				51",
				oldContent:"
				@Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;				
",
				newContent:"
				// Removed GROUP_GET_SIZE constant				
",
,
				fromLine:"				53",
				toLine:"				53",
				oldContent:"
				@Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;				
",
				newContent:"
				// Removed SNDBCK_PUT_NUMS constant				
",
,
				fromLine:"				54",
				toLine:"				54",
				oldContent:"
				@Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;				
",
				newContent:"
				// Removed BROKER_PUT_NUMS constant				
",
,
				fromLine:"				55",
				toLine:"				55",
				oldContent:"
				@Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;				
",
				newContent:"
				// Removed BROKER_GET_NUMS constant				
",
,
				fromLine:"				56",
				toLine:"				56",
				oldContent:"
				@Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;				
",
				newContent:"
				// Removed GROUP_GET_FROM_DISK_NUMS constant				
",
,
				fromLine:"				57",
				toLine:"				57",
				oldContent:"
				@Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;				
",
				newContent:"
				// Removed GROUP_GET_FROM_DISK_SIZE constant				
",
,
				fromLine:"				58",
				toLine:"				58",
				oldContent:"
				@Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;				
",
				newContent:"
				// Removed BROKER_GET_FROM_DISK_NUMS constant				
",
,
				fromLine:"				59",
				toLine:"				59",
				oldContent:"
				@Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;				
",
				newContent:"
				// Removed BROKER_GET_FROM_DISK_SIZE constant				
",
,
				fromLine:"				61",
				toLine:"				61",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;				
",
				newContent:"
				// Removed COMMERCIAL_SEND_TIMES constant				
",
,
				fromLine:"				62",
				toLine:"				62",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;				
",
				newContent:"
				// Removed COMMERCIAL_SNDBCK_TIMES constant				
",
,
				fromLine:"				63",
				toLine:"				63",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;				
",
				newContent:"
				// Removed COMMERCIAL_RCV_TIMES constant				
",
,
				fromLine:"				64",
				toLine:"				64",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;				
",
				newContent:"
				// Removed COMMERCIAL_RCV_EPOLLS constant				
",
,
				fromLine:"				65",
				toLine:"				65",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;				
",
				newContent:"
				// Removed COMMERCIAL_SEND_SIZE constant				
",
,
				fromLine:"				66",
				toLine:"				66",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;				
",
				newContent:"
				// Removed COMMERCIAL_RCV_SIZE constant				
",
,
				fromLine:"				67",
				toLine:"				67",
				oldContent:"
				@Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;				
",
				newContent:"
				// Removed COMMERCIAL_PERM_FAILURES constant				
",
,
				fromLine:"				69",
				toLine:"				69",
				oldContent:"
				@Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;				
",
				newContent:"
				// Removed GROUP_GET_FALL_SIZE constant				
",
,
				fromLine:"				70",
				toLine:"				70",
				oldContent:"
				@Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;				
",
				newContent:"
				// Removed GROUP_GET_FALL_TIME constant				
",
,
				fromLine:"				72",
				toLine:"				72",
				oldContent:"
				@Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;				
",
				newContent:"
				// Removed GROUP_GET_LATENCY constant				
",
,

			],
		
}
		extractedClasses:
{
					common/src/main/java/org/apache/rocketmq/common/stats/StatsConstants.java:"
			package org.apache.rocketmq.common.stats;
			
			public class StatsConstants {
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[166,61] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_SIZE
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[169,61] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_TIME
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,73] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,73] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,73] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,73] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,76] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,74] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[196,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[197,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[198,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[199,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[200,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[201,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[202,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[203,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[208,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[209,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[210,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[211,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[212,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[213,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[214,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[215,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[216,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_EPOLLS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[217,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_EPOLLS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[218,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SNDBCK_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[219,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SNDBCK_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[220,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_PERM_FAILURES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[221,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_PERM_FAILURES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[333,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[334,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[336,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[337,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[339,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[340,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[341,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[342,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[343,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[344,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[350,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[351,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[353,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[354,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[356,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[357,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[364,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[370,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[376,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[383,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[390,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[419,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[423,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[427,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[432,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[491,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[501,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[516,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[520,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[525,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[577,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[582,41] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :rocketmq-store
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    // Removed QUEUE_PUT_NUMS constant
	    // Removed QUEUE_PUT_SIZE constant
	    // Removed QUEUE_GET_NUMS constant
	    // Removed QUEUE_GET_SIZE constant
	    // Removed TOPIC_PUT_NUMS constant
	    // Removed TOPIC_PUT_SIZE constant
	
	    // Removed GROUP_GET_NUMS constant
	    // Removed GROUP_GET_SIZE constant
	
	    // Removed SNDBCK_PUT_NUMS constant
	    // Removed BROKER_PUT_NUMS constant
	    // Removed BROKER_GET_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_SIZE constant
	    // Removed BROKER_GET_FROM_DISK_NUMS constant
	    // Removed BROKER_GET_FROM_DISK_SIZE constant
	    // For commercial
	    // Removed COMMERCIAL_SEND_TIMES constant
	    // Removed COMMERCIAL_SNDBCK_TIMES constant
	    // Removed COMMERCIAL_RCV_TIMES constant
	    // Removed COMMERCIAL_RCV_EPOLLS constant
	    // Removed COMMERCIAL_SEND_SIZE constant
	    // Removed COMMERCIAL_RCV_SIZE constant
	    // Removed COMMERCIAL_PERM_FAILURES constant
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    // Removed GROUP_GET_FALL_SIZE constant
	    // Removed GROUP_GET_FALL_TIME constant
	    // Pull Message Latency
	    // Removed GROUP_GET_LATENCY constant
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
			[
				fromLine:"				166",
				toLine:"				166",
				oldContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,				
",
				newContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,				
",
,
				fromLine:"				169",
				toLine:"				169",
				oldContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,				
",
				newContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,				
",
,
				fromLine:"				173",
				toLine:"				176",
				oldContent:"
				this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				178",
				toLine:"				181",
				oldContent:"
				this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				184",
				toLine:"				184",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
,
				fromLine:"				186",
				toLine:"				186",
				oldContent:"
				this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				188",
				toLine:"				188",
				oldContent:"
				this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				189",
				toLine:"				189",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				196",
				toLine:"				196",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				197",
				toLine:"				197",
				oldContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				198",
				toLine:"				198",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				199",
				toLine:"				199",
				oldContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				200",
				toLine:"				200",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				201",
				toLine:"				201",
				oldContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				202",
				toLine:"				202",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				203",
				toLine:"				203",
				oldContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				208",
				toLine:"				208",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,				
",
,
				fromLine:"				209",
				toLine:"				209",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				210",
				toLine:"				210",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,				
",
,
				fromLine:"				211",
				toLine:"				211",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				212",
				toLine:"				212",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,				
",
,
				fromLine:"				213",
				toLine:"				213",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				214",
				toLine:"				214",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,				
",
,
				fromLine:"				215",
				toLine:"				215",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				216",
				toLine:"				216",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,				
",
,
				fromLine:"				217",
				toLine:"				217",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				218",
				toLine:"				218",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,				
",
,
				fromLine:"				219",
				toLine:"				219",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				220",
				toLine:"				220",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,				
",
,
				fromLine:"				221",
				toLine:"				221",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,

			],
		
}
		extractedClasses:
{
					common/src/main/java/org/apache/rocketmq/common/stats/StatsConstants.java:"
			package org.apache.rocketmq.common.stats;
			
			public class StatsConstants {
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[166,61] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[169,61] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,77] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,80] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[196,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[197,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[198,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[199,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[200,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[201,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[202,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[203,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[208,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[209,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[210,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[211,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[212,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[213,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[214,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[215,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[216,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[217,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[218,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[219,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[220,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[221,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[333,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[334,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[336,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[337,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[339,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[340,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[341,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[342,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[343,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[344,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[350,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[351,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[353,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[354,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[356,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[357,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[364,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[370,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[376,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[383,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[390,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[419,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[423,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[427,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[432,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[491,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[501,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[516,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[520,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[525,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[577,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[582,41] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :rocketmq-store
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    // Removed QUEUE_PUT_NUMS constant
	    // Removed QUEUE_PUT_SIZE constant
	    // Removed QUEUE_GET_NUMS constant
	    // Removed QUEUE_GET_SIZE constant
	    // Removed TOPIC_PUT_NUMS constant
	    // Removed TOPIC_PUT_SIZE constant
	
	    // Removed GROUP_GET_NUMS constant
	    // Removed GROUP_GET_SIZE constant
	
	    // Removed SNDBCK_PUT_NUMS constant
	    // Removed BROKER_PUT_NUMS constant
	    // Removed BROKER_GET_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_SIZE constant
	    // Removed BROKER_GET_FROM_DISK_NUMS constant
	    // Removed BROKER_GET_FROM_DISK_SIZE constant
	    // For commercial
	    // Removed COMMERCIAL_SEND_TIMES constant
	    // Removed COMMERCIAL_SNDBCK_TIMES constant
	    // Removed COMMERCIAL_RCV_TIMES constant
	    // Removed COMMERCIAL_RCV_EPOLLS constant
	    // Removed COMMERCIAL_SEND_SIZE constant
	    // Removed COMMERCIAL_RCV_SIZE constant
	    // Removed COMMERCIAL_PERM_FAILURES constant
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    // Removed GROUP_GET_FALL_SIZE constant
	    // Removed GROUP_GET_FALL_TIME constant
	    // Pull Message Latency
	    // Removed GROUP_GET_LATENCY constant
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
			[
				fromLine:"				166",
				toLine:"				166",
				oldContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,				
",
				newContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,				
",
,
				fromLine:"				169",
				toLine:"				169",
				oldContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,				
",
				newContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,				
",
,
				fromLine:"				173",
				toLine:"				176",
				oldContent:"
				this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				178",
				toLine:"				181",
				oldContent:"
				this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				184",
				toLine:"				184",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
,
				fromLine:"				186",
				toLine:"				186",
				oldContent:"
				this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				188",
				toLine:"				188",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				189",
				toLine:"				189",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				196",
				toLine:"				196",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				197",
				toLine:"				197",
				oldContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				198",
				toLine:"				198",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				199",
				toLine:"				199",
				oldContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				200",
				toLine:"				200",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				201",
				toLine:"				201",
				oldContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				202",
				toLine:"				202",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				203",
				toLine:"				203",
				oldContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				208",
				toLine:"				208",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,				
",
,
				fromLine:"				209",
				toLine:"				209",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				210",
				toLine:"				210",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,				
",
,
				fromLine:"				211",
				toLine:"				211",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				212",
				toLine:"				212",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,				
",
,
				fromLine:"				213",
				toLine:"				213",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				214",
				toLine:"				214",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,				
",
,
				fromLine:"				215",
				toLine:"				215",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				216",
				toLine:"				216",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,				
",
,
				fromLine:"				217",
				toLine:"				217",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				218",
				toLine:"				218",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,				
",
,
				fromLine:"				219",
				toLine:"				219",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				220",
				toLine:"				220",
				oldContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,				
",
				newContent:"
				this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,				
",
,
				fromLine:"				221",
				toLine:"				221",
				oldContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,

			],
		
}
		extractedClasses:
{
					common/src/main/java/org/apache/rocketmq/common/stats/StatsConstants.java:"
			package org.apache.rocketmq.common.stats;
			
			public class StatsConstants {
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[166,66] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[169,66] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_TIME
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,73] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,38] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,77] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,38] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,77] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,38] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,77] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,76] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,74] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[196,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[197,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[198,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[199,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[200,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[201,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[202,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[203,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[208,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[209,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[210,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[211,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[212,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[213,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SEND_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[214,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[215,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[216,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_EPOLLS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[217,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_RCV_EPOLLS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[218,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SNDBCK_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[219,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_SNDBCK_TIMES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[220,34] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_PERM_FAILURES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[221,35] cannot find symbol
	[ERROR]   symbol:   variable COMMERCIAL_PERM_FAILURES
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[333,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[334,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[336,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[337,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[339,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[340,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[341,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[342,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[343,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[344,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[350,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[351,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[353,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[354,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[356,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[357,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[364,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[370,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[376,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[383,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[390,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[419,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[423,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[427,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[432,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[491,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[501,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[516,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[520,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[525,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[577,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[582,41] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :rocketmq-store
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    // Removed QUEUE_PUT_NUMS constant
	    // Removed QUEUE_PUT_SIZE constant
	    // Removed QUEUE_GET_NUMS constant
	    // Removed QUEUE_GET_SIZE constant
	    // Removed TOPIC_PUT_NUMS constant
	    // Removed TOPIC_PUT_SIZE constant
	
	    // Removed GROUP_GET_NUMS constant
	    // Removed GROUP_GET_SIZE constant
	
	    // Removed SNDBCK_PUT_NUMS constant
	    // Removed BROKER_PUT_NUMS constant
	    // Removed BROKER_GET_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_SIZE constant
	    // Removed BROKER_GET_FROM_DISK_NUMS constant
	    // Removed BROKER_GET_FROM_DISK_SIZE constant
	    // For commercial
	    // Removed COMMERCIAL_SEND_TIMES constant
	    // Removed COMMERCIAL_SNDBCK_TIMES constant
	    // Removed COMMERCIAL_RCV_TIMES constant
	    // Removed COMMERCIAL_RCV_EPOLLS constant
	    // Removed COMMERCIAL_SEND_SIZE constant
	    // Removed COMMERCIAL_RCV_SIZE constant
	    // Removed COMMERCIAL_PERM_FAILURES constant
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    // Removed GROUP_GET_FALL_SIZE constant
	    // Removed GROUP_GET_FALL_TIME constant
	    // Pull Message Latency
	    // Removed GROUP_GET_LATENCY constant
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
			[
				fromLine:"				166",
				toLine:"				166",
				oldContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,				
",
				newContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,				
",
,
				fromLine:"				169",
				toLine:"				169",
				oldContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,				
",
				newContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,				
",
,
				fromLine:"				173",
				toLine:"				176",
				oldContent:"
				this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				178",
				toLine:"				181",
				oldContent:"
				this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				184",
				toLine:"				184",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
,
				fromLine:"				186",
				toLine:"				186",
				oldContent:"
				this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				188",
				toLine:"				188",
				oldContent:"
				this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				189",
				toLine:"				189",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				196",
				toLine:"				196",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				197",
				toLine:"				197",
				oldContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				198",
				toLine:"				198",
				oldContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				199",
				toLine:"				199",
				oldContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				200",
				toLine:"				200",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				201",
				toLine:"				201",
				oldContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				202",
				toLine:"				202",
				oldContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				203",
				toLine:"				203",
				oldContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				208",
				toLine:"				208",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,				
",
,
				fromLine:"				209",
				toLine:"				209",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				210",
				toLine:"				210",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,				
",
,
				fromLine:"				211",
				toLine:"				211",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				212",
				toLine:"				212",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,				
",
,
				fromLine:"				213",
				toLine:"				213",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				214",
				toLine:"				214",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,				
",
,
				fromLine:"				215",
				toLine:"				215",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				216",
				toLine:"				216",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,				
",
,
				fromLine:"				217",
				toLine:"				217",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				218",
				toLine:"				218",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,				
",
,
				fromLine:"				219",
				toLine:"				219",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				220",
				toLine:"				220",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,				
",
,
				fromLine:"				221",
				toLine:"				221",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,

			],
		
}
		extractedClasses:
{
					common/src/main/java/org/apache/rocketmq/common/stats/StatsConstants.java:"
			package org.apache.rocketmq.common.stats;
			
			public class StatsConstants {
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[166,61] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[169,61] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,77] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,33] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,81] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,80] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,78] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[196,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[197,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[198,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[199,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[200,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[201,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[202,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[203,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[208,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[209,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[210,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[211,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[212,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[213,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[214,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[215,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[216,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[217,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[218,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[219,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[220,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[221,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[333,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[334,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[336,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[337,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[339,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[340,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[341,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[342,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[343,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[344,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[350,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[351,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[353,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[354,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[356,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[357,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[364,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[370,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[376,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[383,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[390,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[419,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[423,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[427,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[432,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[491,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[501,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[516,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[520,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[525,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[577,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[582,41] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :rocketmq-store
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    // Removed QUEUE_PUT_NUMS constant
	    // Removed QUEUE_PUT_SIZE constant
	    // Removed QUEUE_GET_NUMS constant
	    // Removed QUEUE_GET_SIZE constant
	    // Removed TOPIC_PUT_NUMS constant
	    // Removed TOPIC_PUT_SIZE constant
	
	    // Removed GROUP_GET_NUMS constant
	    // Removed GROUP_GET_SIZE constant
	
	    // Removed SNDBCK_PUT_NUMS constant
	    // Removed BROKER_PUT_NUMS constant
	    // Removed BROKER_GET_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_SIZE constant
	    // Removed BROKER_GET_FROM_DISK_NUMS constant
	    // Removed BROKER_GET_FROM_DISK_SIZE constant
	    // For commercial
	    // Removed COMMERCIAL_SEND_TIMES constant
	    // Removed COMMERCIAL_SNDBCK_TIMES constant
	    // Removed COMMERCIAL_RCV_TIMES constant
	    // Removed COMMERCIAL_RCV_EPOLLS constant
	    // Removed COMMERCIAL_SEND_SIZE constant
	    // Removed COMMERCIAL_RCV_SIZE constant
	    // Removed COMMERCIAL_PERM_FAILURES constant
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    // Removed GROUP_GET_FALL_SIZE constant
	    // Removed GROUP_GET_FALL_TIME constant
	    // Pull Message Latency
	    // Removed GROUP_GET_LATENCY constant
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:
{
			refactorings:
{
					store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:
			[
				fromLine:"				166",
				toLine:"				166",
				oldContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_SIZE,				
",
				newContent:"
				momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,				
",
,
				fromLine:"				169",
				toLine:"				169",
				oldContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(StatsConstants.GROUP_GET_FALL_TIME,				
",
				newContent:"
				momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,				
",
,
				fromLine:"				173",
				toLine:"				176",
				oldContent:"
				this.statsTable.put(StatsConstants.QUEUE_PUT_NUMS, new StatsItemSet(StatsConstants.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_PUT_SIZE, new StatsItemSet(StatsConstants.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_NUMS, new StatsItemSet(StatsConstants.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.QUEUE_GET_SIZE, new StatsItemSet(StatsConstants.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				178",
				toLine:"				181",
				oldContent:"
				this.statsTable.put(StatsConstants.TOPIC_PUT_NUMS, new StatsItemSet(StatsConstants.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.TOPIC_PUT_SIZE, new StatsItemSet(StatsConstants.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_NUMS, new StatsItemSet(StatsConstants.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(StatsConstants.GROUP_GET_SIZE, new StatsItemSet(StatsConstants.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
				            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				184",
				toLine:"				184",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_LATENCY, new StatsItemSet(StatsConstants.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));				
",
,
				fromLine:"				186",
				toLine:"				186",
				oldContent:"
				this.statsTable.put(StatsConstants.SNDBCK_PUT_NUMS, new StatsItemSet(StatsConstants.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				188",
				toLine:"				188",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_PUT_NUMS, new StatsItemSet(StatsConstants.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				189",
				toLine:"				189",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_NUMS, new StatsItemSet(StatsConstants.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				196",
				toLine:"				196",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				197",
				toLine:"				197",
				oldContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				198",
				toLine:"				198",
				oldContent:"
				this.statsTable.put(StatsConstants.GROUP_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				199",
				toLine:"				199",
				oldContent:"
				new StatsItemSet(StatsConstants.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				200",
				toLine:"				200",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_NUMS,				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,				
",
,
				fromLine:"				201",
				toLine:"				201",
				oldContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));				
",
,
				fromLine:"				202",
				toLine:"				202",
				oldContent:"
				this.statsTable.put(StatsConstants.BROKER_GET_FROM_DISK_SIZE,				
",
				newContent:"
				this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,				
",
,
				fromLine:"				203",
				toLine:"				203",
				oldContent:"
				new StatsItemSet(StatsConstants.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
				newContent:"
				new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));				
",
,
				fromLine:"				208",
				toLine:"				208",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,				
",
,
				fromLine:"				209",
				toLine:"				209",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				210",
				toLine:"				210",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,				
",
,
				fromLine:"				211",
				toLine:"				211",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				212",
				toLine:"				212",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,				
",
,
				fromLine:"				213",
				toLine:"				213",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				214",
				toLine:"				214",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,				
",
,
				fromLine:"				215",
				toLine:"				215",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				216",
				toLine:"				216",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,				
",
,
				fromLine:"				217",
				toLine:"				217",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				218",
				toLine:"				218",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,				
",
,
				fromLine:"				219",
				toLine:"				219",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,
				fromLine:"				220",
				toLine:"				220",
				oldContent:"
				this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,				
",
				newContent:"
				this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,				
",
,
				fromLine:"				221",
				toLine:"				221",
				oldContent:"
				new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
				newContent:"
				new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));				
",
,

			],
		
}
		extractedClasses:
{
					common/src/main/java/org/apache/rocketmq/common/stats/StatsConstants.java:"
			package org.apache.rocketmq.common.stats;
			
			public class StatsConstants {
			    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
			    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
			    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
			    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
			    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
			    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
			    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
			    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
			    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
			    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
			    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
			    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
			    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
			    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
			    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
			    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
			    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
			    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
			    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
			    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
			    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
			    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
			    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
			    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
			    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
			}
						
",
		
}
	
}
	role:"
	assistant	
",
,
	content:"
	Correct the following errors. Use the same JSON format as in the initial refactoring.	
",
	role:"
	user	
",
,
	content:"
	[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-store: Compilation failure: Compilation failure: 
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[166,66] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[169,66] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FALL_TIME
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[173,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[174,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[175,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[176,77] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[178,73] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,38] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[179,77] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,38] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[180,77] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,38] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[181,77] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[184,76] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[186,74] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[188,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[189,74] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[196,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[197,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[198,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[199,35] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[200,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[201,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[202,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[203,35] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_FROM_DISK_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[208,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[209,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[210,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[211,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[212,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[213,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[214,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[215,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[216,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[217,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[218,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[219,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[220,29] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[221,30] cannot find symbol
	[ERROR]   symbol:   variable StatsConstants
	[ERROR]   location: class org.apache.rocketmq.store.stats.BrokerStatsManager
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[333,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[334,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[336,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[337,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[339,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[340,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[341,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[342,34] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[343,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[344,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[350,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[351,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[353,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[354,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[356,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[357,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[364,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[370,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[376,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[383,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[390,38] cannot find symbol
	[ERROR]   symbol:   variable QUEUE_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[419,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[423,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[427,34] cannot find symbol
	[ERROR]   symbol:   variable TOPIC_PUT_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[432,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[491,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_SIZE
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[501,34] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_LATENCY
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[516,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[520,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[525,34] cannot find symbol
	[ERROR]   symbol:   variable BROKER_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[577,34] cannot find symbol
	[ERROR]   symbol:   variable SNDBCK_PUT_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] /root/data_clump_solver/cloned_projects/rocketmq_refactor/store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java:[582,41] cannot find symbol
	[ERROR]   symbol:   variable GROUP_GET_NUMS
	[ERROR]   location: class org.apache.rocketmq.common.stats.Stats
	[ERROR] -> [Help 1]
	[ERROR] 
	[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
	[ERROR] Re-run Maven using the -X switch to enable full debug logging.
	[ERROR] 
	[ERROR] For more information about the errors and possible solutions, please read the following articles:
	[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
	[ERROR] 
	[ERROR] After correcting the problems, you can resume the build with the command
	[ERROR]   mvn <args> -rf :rocketmq-store
		
",
	role:"
	user	
",
,
	content:"
	Below you find the current state of all the files affected by the errors in the same format as in the initial request.	
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    // Removed QUEUE_PUT_NUMS constant
	    // Removed QUEUE_PUT_SIZE constant
	    // Removed QUEUE_GET_NUMS constant
	    // Removed QUEUE_GET_SIZE constant
	    // Removed TOPIC_PUT_NUMS constant
	    // Removed TOPIC_PUT_SIZE constant
	
	    // Removed GROUP_GET_NUMS constant
	    // Removed GROUP_GET_SIZE constant
	
	    // Removed SNDBCK_PUT_NUMS constant
	    // Removed BROKER_PUT_NUMS constant
	    // Removed BROKER_GET_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_NUMS constant
	    // Removed GROUP_GET_FROM_DISK_SIZE constant
	    // Removed BROKER_GET_FROM_DISK_NUMS constant
	    // Removed BROKER_GET_FROM_DISK_SIZE constant
	    // For commercial
	    // Removed COMMERCIAL_SEND_TIMES constant
	    // Removed COMMERCIAL_SNDBCK_TIMES constant
	    // Removed COMMERCIAL_RCV_TIMES constant
	    // Removed COMMERCIAL_RCV_EPOLLS constant
	    // Removed COMMERCIAL_SEND_SIZE constant
	    // Removed COMMERCIAL_RCV_SIZE constant
	    // Removed COMMERCIAL_PERM_FAILURES constant
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    // Removed GROUP_GET_FALL_SIZE constant
	    // Removed GROUP_GET_FALL_TIME constant
	    // Pull Message Latency
	    // Removed GROUP_GET_LATENCY constant
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(Stats.GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(Stats.GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(StatsConstants.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(StatsConstants.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(StatsConstants.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.1",
