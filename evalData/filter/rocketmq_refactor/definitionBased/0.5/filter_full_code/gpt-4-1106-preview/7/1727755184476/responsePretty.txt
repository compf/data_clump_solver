"{
    "key":"//common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.common;\n\nimport org.apache.rocketmq.common.annotation.ImportantField;\nimport org.apache.rocketmq.common.constant.PermName;\nimport org.apache.rocketmq.common.message.MessageRequestMode;\nimport org.apache.rocketmq.common.metrics.MetricsExporterType;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.common.utils.NetworkUtil;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class BrokerConfig extends BrokerIdentity {\n\n    private String brokerConfigPath = null;\n\n    private String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));\n    @ImportantField\n    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));\n\n    /**\n     * Listen port for single broker\n     */\n    @ImportantField\n    private int listenPort = 6888;\n\n    @ImportantField\n    private String brokerIP1 = NetworkUtil.getLocalAddress();\n    private String brokerIP2 = NetworkUtil.getLocalAddress();\n\n    @ImportantField\n    private boolean recoverConcurrently = false;\n\n    private int brokerPermission = PermName.PERM_READ | PermName.PERM_WRITE;\n    private int defaultTopicQueueNums = 8;\n    @ImportantField\n    private boolean autoCreateTopicEnable = true;\n\n    private boolean clusterTopicEnable = true;\n\n    private boolean brokerTopicEnable = true;\n    @ImportantField\n    private boolean autoCreateSubscriptionGroup = true;\n    private String messageStorePlugIn = \"\";\n\n    private static final int PROCESSOR_NUMBER = Runtime.getRuntime().availableProcessors();\n    @ImportantField\n    private String msgTraceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;\n    @ImportantField\n    private boolean traceTopicEnable = false;\n    /**\n     * thread numbers for send message thread pool.\n     */\n    private int sendMessageThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);\n    private int putMessageFutureThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);\n    private int pullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;\n    private int litePullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;\n    private int ackMessageThreadPoolNums = 3;\n    private int processReplyMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;\n    private int queryMessageThreadPoolNums = 8 + PROCESSOR_NUMBER;\n\n    private int adminBrokerThreadPoolNums = 16;\n    private int clientManageThreadPoolNums = 32;\n    private int consumerManageThreadPoolNums = 32;\n    private int loadBalanceProcessorThreadPoolNums = 32;\n    private int heartbeatThreadPoolNums = Math.min(32, PROCESSOR_NUMBER);\n    private int recoverThreadPoolNums = 32;\n\n    /**\n     * Thread numbers for EndTransactionProcessor\n     */\n    private int endTransactionThreadPoolNums = Math.max(8 + PROCESSOR_NUMBER * 2,\n            sendMessageThreadPoolNums * 4);\n\n    private int flushConsumerOffsetInterval = 1000 * 5;\n\n    private int flushConsumerOffsetHistoryInterval = 1000 * 60;\n\n    @ImportantField\n    private boolean rejectTransactionMessage = false;\n\n    @ImportantField\n    private boolean fetchNameSrvAddrByDnsLookup = false;\n\n    @ImportantField\n    private boolean fetchNamesrvAddrByAddressServer = false;\n\n    private int sendThreadPoolQueueCapacity = 10000;\n    private int putThreadPoolQueueCapacity = 10000;\n    private int pullThreadPoolQueueCapacity = 100000;\n    private int litePullThreadPoolQueueCapacity = 100000;\n    private int ackThreadPoolQueueCapacity = 100000;\n    private int replyThreadPoolQueueCapacity = 10000;\n    private int queryThreadPoolQueueCapacity = 20000;\n    private int clientManagerThreadPoolQueueCapacity = 1000000;\n    private int consumerManagerThreadPoolQueueCapacity = 1000000;\n    private int heartbeatThreadPoolQueueCapacity = 50000;\n    private int endTransactionPoolQueueCapacity = 100000;\n    private int adminBrokerThreadPoolQueueCapacity = 10000;\n    private int loadBalanceThreadPoolQueueCapacity = 100000;\n\n    private boolean longPollingEnable = true;\n\n    private long shortPollingTimeMills = 1000;\n\n    private boolean notifyConsumerIdsChangedEnable = true;\n\n    private boolean highSpeedMode = false;\n\n    private int commercialBaseCount = 1;\n\n    private int commercialSizePerMsg = 4 * 1024;\n\n    private boolean accountStatsEnable = true;\n    private boolean accountStatsPrintZeroValues = true;\n\n    private boolean transferMsgByHeap = true;\n\n    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;\n    private int registerBrokerTimeoutMills = 24000;\n\n    private int sendHeartbeatTimeoutMillis = 1000;\n\n    private boolean slaveReadEnable = false;\n\n    private boolean disableConsumeIfConsumerReadSlowly = false;\n    private long consumerFallbehindThreshold = 1024L * 1024 * 1024 * 16;\n\n    private boolean brokerFastFailureEnable = true;\n    private long waitTimeMillsInSendQueue = 200;\n    private long waitTimeMillsInPullQueue = 5 * 1000;\n    private long waitTimeMillsInLitePullQueue = 5 * 1000;\n    private long waitTimeMillsInHeartbeatQueue = 31 * 1000;\n    private long waitTimeMillsInTransactionQueue = 3 * 1000;\n    private long waitTimeMillsInAckQueue = 3000;\n\n    private long startAcceptSendRequestTimeStamp = 0L;\n\n    private boolean traceOn = true;\n\n    // Switch of filter bit map calculation.\n    // If switch on:\n    // 1. Calculate filter bit map when construct queue.\n    // 2. Filter bit map will be saved to consume queue extend file if allowed.\n    private boolean enableCalcFilterBitMap = false;\n\n    //Reject the pull consumer instance to pull messages from broker.\n    private boolean rejectPullConsumerEnable = false;\n\n    // Expect num of consumers will use filter.\n    private int expectConsumerNumUseFilter = 32;\n\n    // Error rate of bloom filter, 1~100.\n    private int maxErrorRateOfBloomFilter = 20;\n\n    //how long to clean filter data after dead.Default: 24h\n    private long filterDataCleanTimeSpan = 24 * 3600 * 1000;\n\n    // whether do filter when retry.\n    private boolean filterSupportRetry = false;\n    private boolean enablePropertyFilter = false;\n\n    private boolean compressedRegister = false;\n\n    private boolean forceRegister = true;\n\n    /**\n     * This configurable item defines interval of topics registration of broker to name server. Allowing values are\n     * between 10,000 and 60,000 milliseconds.\n     */\n    private int registerNameServerPeriod = 1000 * 30;\n\n    /**\n     * the interval to send heartbeat to name server for liveness detection.\n     */\n    private int brokerHeartbeatInterval = 1000;\n\n    /**\n     * How long the broker will be considered as inactive by nameserver since last heartbeat. Effective only if\n     * enableSlaveActingMaster is true\n     */\n    private long brokerNotActiveTimeoutMillis = 10 * 1000;\n\n    private boolean enableNetWorkFlowControl = false;\n\n    private boolean enableBroadcastOffsetStore = true;\n\n    private long broadcastOffsetExpireSecond = 2 * 60;\n\n    private long broadcastOffsetExpireMaxSecond = 5 * 60;\n\n    private int popPollingSize = 1024;\n    private int popPollingMapSize = 100000;\n    // 20w cost 200M heap memory.\n    private long maxPopPollingSize = 100000;\n    private int reviveQueueNum = 8;\n    private long reviveInterval = 1000;\n    private long reviveMaxSlow = 3;\n    private long reviveScanTime = 10000;\n    private boolean enableSkipLongAwaitingAck = false;\n    private long reviveAckWaitMs = TimeUnit.MINUTES.toMillis(3);\n    private boolean enablePopLog = false;\n    private boolean enablePopBufferMerge = false;\n    private int popCkStayBufferTime = 10 * 1000;\n    private int popCkStayBufferTimeOut = 3 * 1000;\n    private int popCkMaxBufferSize = 200000;\n    private int popCkOffsetMaxQueueSize = 20000;\n    private boolean enablePopBatchAck = false;\n    private boolean enableNotifyAfterPopOrderLockRelease = true;\n    private boolean initPopOffsetByCheckMsgInMem = true;\n    // read message from pop retry topic v1, for the compatibility, will be removed in the future version\n    private boolean retrieveMessageFromPopRetryTopicV1 = true;\n    private boolean enableRetryTopicV2 = false;\n\n    private boolean realTimeNotifyConsumerChange = true;\n\n    private boolean litePullMessageEnable = true;\n\n    // The period to sync broker member group from namesrv, default value is 1 second\n    private int syncBrokerMemberGroupPeriod = 1000;\n\n    /**\n     * the interval of pulling topic information from the named server\n     */\n    private long loadBalancePollNameServerInterval = 1000 * 30;\n\n    /**\n     * the interval of cleaning\n     */\n    private int cleanOfflineBrokerInterval = 1000 * 30;\n\n    private boolean serverLoadBalancerEnable = true;\n\n    private MessageRequestMode defaultMessageRequestMode = MessageRequestMode.PULL;\n\n    private int defaultPopShareQueueNum = -1;\n\n    /**\n     * The minimum time of the transactional message  to be checked firstly, one message only exceed this time interval\n     * that can be checked.\n     */\n    @ImportantField\n    private long transactionTimeOut = 6 * 1000;\n\n    /**\n     * The maximum number of times the message was checked, if exceed this value, this message will be discarded.\n     */\n    @ImportantField\n    private int transactionCheckMax = 15;\n\n    /**\n     * Transaction message check interval.\n     */\n    @ImportantField\n    private long transactionCheckInterval = 30 * 1000;\n\n    private long transactionMetricFlushInterval = 3 * 1000;\n\n    /**\n     * transaction batch op message\n     */\n    private int transactionOpMsgMaxSize = 4096;\n\n    private int transactionOpBatchInterval = 3000;\n\n    /**\n     * Acl feature switch\n     */\n    @ImportantField\n    private boolean aclEnable = false;\n\n    private boolean storeReplyMessageEnable = true;\n\n    private boolean enableDetailStat = true;\n\n    private boolean autoDeleteUnusedStats = false;\n\n    /**\n     * Whether to distinguish log paths when multiple brokers are deployed on the same machine\n     */\n    private boolean isolateLogEnable = false;\n\n    private long forwardTimeout = 3 * 1000;\n\n    /**\n     * Slave will act master when failover. For example, if master down, timer or transaction message which is expire in slave will\n     * put to master (master of the same process in broker container mode or other masters in cluster when enableFailoverRemotingActing is true)\n     * when enableSlaveActingMaster is true\n     */\n    private boolean enableSlaveActingMaster = false;\n\n    private boolean enableRemoteEscape = false;\n\n    private boolean skipPreOnline = false;\n\n    private boolean asyncSendEnable = true;\n\n    private boolean useServerSideResetOffset = true;\n\n    private long consumerOffsetUpdateVersionStep = 500;\n\n    private long delayOffsetUpdateVersionStep = 200;\n\n    /**\n     * Whether to lock quorum replicas.\n     *\n     * True: need to lock quorum replicas succeed. False: only need to lock one replica succeed.\n     */\n    private boolean lockInStrictMode = false;\n\n    private boolean compatibleWithOldNameSrv = true;\n\n    /**\n     * Is startup controller mode, which support auto switch broker's role.\n     */\n    private boolean enableControllerMode = false;\n\n    private String controllerAddr = \"\";\n\n    private boolean fetchControllerAddrByDnsLookup = false;\n\n    private long syncBrokerMetadataPeriod = 5 * 1000;\n\n    private long checkSyncStateSetPeriod = 5 * 1000;\n\n    private long syncControllerMetadataPeriod = 10 * 1000;\n\n    private long controllerHeartBeatTimeoutMills = 10 * 1000;\n\n    private boolean validateSystemTopicWhenUpdateTopic = true;\n\n    /**\n     * It is an important basis for the controller to choose the broker master.\n     * The lower the value of brokerElectionPriority, the higher the priority of the broker being selected as the master.\n     * You can set a lower priority for the broker with better machine conditions.\n     */\n    private int brokerElectionPriority = Integer.MAX_VALUE;\n\n    private boolean useStaticSubscription = false;\n\n    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;\n\n    private int metricsOtelCardinalityLimit = 50 * 1000;\n    private String metricsGrpcExporterTarget = \"\";\n    private String metricsGrpcExporterHeader = \"\";\n    private long metricGrpcExporterTimeOutInMills = 3 * 1000;\n    private long metricGrpcExporterIntervalInMills = 60 * 1000;\n    private long metricLoggingExporterIntervalInMills = 10 * 1000;\n\n    private int metricsPromExporterPort = 5557;\n    private String metricsPromExporterHost = \"\";\n\n    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx\n    private String metricsLabel = \"\";\n\n    private boolean metricsInDelta = false;\n\n    private long channelExpiredTimeout = 1000 * 120;\n    private long subscriptionExpiredTimeout = 1000 * 60 * 10;\n\n    // remoting\n    private boolean enableRemotingLocalProxyGrpc = true;\n    private int localProxyConnectTimeoutMs = 3000;\n    private String remotingAccessAddr = \"\";\n    private int remotingListenPort = 8080;\n\n    // related to proxy's send strategy in cluster mode.\n    private boolean sendLatencyEnable = false;\n    private boolean startDetectorEnable = false;\n    private int detectTimeout = 200;\n    private int detectInterval = 2 * 1000;\n\n    private int remotingHeartbeatThreadPoolNums = 2 * PROCESSOR_NUMBER;\n    private int remotingTopicRouteThreadPoolNums = 2 * PROCESSOR_NUMBER;\n    private int remotingSendMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;\n    private int remotingPullMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;\n    private int remotingUpdateOffsetThreadPoolNums = 4 * PROCESSOR_NUMBER;\n    private int remotingDefaultThreadPoolNums = 4 * PROCESSOR_NUMBER;\n\n    private int remotingHeartbeatThreadPoolQueueCapacity = 50000;\n    private int remotingTopicRouteThreadPoolQueueCapacity = 50000;\n    private int remotingSendThreadPoolQueueCapacity = 10000;\n    private int remotingPullThreadPoolQueueCapacity = 50000;\n    private int remotingUpdateOffsetThreadPoolQueueCapacity = 10000;\n    private int remotingDefaultThreadPoolQueueCapacity = 50000;\n\n    private long remotingWaitTimeMillsInSendQueue = 3 * 1000;\n    private long remotingWaitTimeMillsInPullQueue = 5 * 1000;\n    private long remotingWaitTimeMillsInHeartbeatQueue = 31 * 1000;\n    private long remotingWaitTimeMillsInUpdateOffsetQueue = 3 * 1000;\n    private long remotingWaitTimeMillsInTopicRouteQueue = 3 * 1000;\n    private long remotingWaitTimeMillsInDefaultQueue = 3 * 1000;\n\n    private boolean enableBatchAck = false;\n\n    @Override\n    public void initData() {\n        parseDelayLevel();\n        if (StringUtils.isEmpty(localServeAddr)) {\n            this.localServeAddr = NetworkUtil.getLocalAddress();\n        }\n        if (StringUtils.isBlank(localServeAddr)) {\n            throw new ProxyException(ProxyExceptionCode.INTERNAL_SERVER_ERROR, \"get local serve ip failed\");\n        }\n        if (StringUtils.isBlank(remotingAccessAddr)) {\n            this.remotingAccessAddr = this.localServeAddr;\n        }\n        if (StringUtils.isBlank(heartbeatSyncerTopicClusterName)) {\n           
{
    "key":"//broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.broker.metrics;\n\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Collectors;\nimport org.apache.rocketmq.broker.BrokerController;\nimport org.apache.rocketmq.broker.client.ConsumerGroupInfo;\nimport org.apache.rocketmq.broker.client.ConsumerManager;\nimport org.apache.rocketmq.broker.filter.ConsumerFilterData;\nimport org.apache.rocketmq.broker.filter.ConsumerFilterManager;\nimport org.apache.rocketmq.broker.offset.ConsumerOffsetManager;\nimport org.apache.rocketmq.broker.processor.PopBufferMergeService;\nimport org.apache.rocketmq.broker.processor.PopInflightMessageCounter;\nimport org.apache.rocketmq.broker.subscriptionscription.SubscriptionGroupManager;\nimport org.apache.rocketmq.broker.topic.TopicConfigManager;\nimport org.apache.rocketmq.common.BrokerConfig;\nimport org.apache.rocketmq.common.KeyBuilder;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.constant.PermName;\nimport org.apache.rocketmq.common.filter.ExpressionMessageFilter;\nimport org.apache.rocketmq.common.filter.ExpressionType;\nimport org.apache.rocketmq.common.message.MessageStore;\nimport org.apache.rocketmq.common.sysflag.PullSysFlag;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;\nimport org.apache.rocketmq.remoting.protocol.DataVersion;\nimport org.apache.rocketmq.remoting.protocol.RemotingSerializable;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;\nimport org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicRouteData;\nimport org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;\nimport org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.QueueData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.remoting.rpc.ClientMetadata;\nimport org.apache.rocketmq.remoting.rpc.RpcClient;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\n\n/**\n * Consumer lag calculator.\n */\npublic class ConsumerLagCalculator {\n    private final BrokerConfig brokerConfig;\n    private final TopicConfigManager topicConfigManager;\n    private final ConsumerManager consumerManager;\n    private final ConsumerOffsetManager offsetManager;\n    private final ConsumerFilterManager consumerFilterManager;\n    private final SubscriptionGroupManager subscriptionGroupManager;\n    private final MessageStore messageStore;\n    private final PopBufferMergeService popBufferMergeService;\n    private final PopInflightMessageCounter popInflightMessageCounter;\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n\n    public ConsumerLagCalculator(BrokerController brokerController) {\n        this.brokerConfig = brokerController.getBrokerConfig();\n        this.topicConfigManager = brokerController.getTopicConfigManager();\n        this.consumerManager = brokerController.getConsumerManager();\n        this.offsetManager = brokerController.getConsumerOffsetManager();\n        this.consumerFilterManager = brokerController.getConsumerFilterManager();\n        this.subscriptionGroupManager = brokerController.getSubscriptionGroupManager();\n        this.messageStore = brokerController.getMessageStore();\n        this.popBufferMergeService = brokerController.getPopMessageProcessor().getPopBufferMergeService();\n        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();\n    }\n\n    private static class ProcessGroupInfo {\n        public String group;\n        public String topic;\n        public boolean isPop;\n        public String retryTopic;\n\n        public ProcessGroupInfo(String group, String topic, boolean isPop,\n            String retryTopic) {\n            this.group = group;\n            this.topic = topic;\n            this.isPop = isPop;\n            this.retryTopic = retryTopic;\n        }\n    }\n\n    public static class BaseCalculateResult {\n        public String group;\n        public String topic;\n        public boolean isRetry;\n\n        public BaseCalculateResult(String group, String topic, boolean isRetry) {\n            this.group = group;\n            this.topic = topic;\n            this.isRetry = isRetry;\n        }\n    }\n\n    public static class CalculateLagResult extends BaseCalculateResult {\n        public long lag;\n        public long earliestUnconsumedTimestamp;\n\n        public CalculateLagResult(String group, String topic, boolean isRetry) {\n            super(group, topic, isRetry);\n        }\n    }\n\n    public static class CalculateInflightResult extends BaseCalculateResult {\n        public long inFlight;\n        public long earliestUnPulledTimestamp;\n\n        public CalculateInflightResult(String group, String topic, boolean isRetry) {\n            super(group, topic, isRetry);\n        }\n    }\n\n    public static class CalculateAvailableResult extends BaseCalculateResult {\n        public long available;\n\n        public CalculateAvailableResult(String group, String topic, boolean isRetry) {\n            super(group, topic, isRetry);\n        }\n    }\n\n    private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {\n        for (Map.Entry<String, SubscriptionGroupConfig> subscriptionEntry :\n            subscriptionGroupManager.getSubscriptionGroupTable().entrySet()) {\n\n            String group = subscriptionEntry.getKey();\n            ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);\n            boolean isPop = false;\n            if (consumerGroupInfo != null) {\n                isPop = consumerGroupInfo.getConsumeType() == ConsumeType.CONSUME_POP;\n            }\n            Set<String> topics;\n            if (brokerConfig.isUseStaticSubscription()) {\n                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionEntry.getValue();\n                if (subscriptionGroupConfig.getSubscriptionDataSet() == null ||\n                    subscriptionGroupConfig.getSubscriptionDataSet().isEmpty()) {\n                    continue;\n                }\n                topics = subscriptionGroupConfig.getSubscriptionDataSet()\n                    .stream()\n                    .map(SimpleSubscriptionData::getTopic)\n                    .collect(Collectors.toSet());\n            } else {\n                if (consumerGroupInfo == null) {\n                    continue;\n                }\n                topics = consumerGroupInfo.getSubscribeTopics();\n            }\n\n            if (null == topics || topics.isEmpty()) {\n                continue;\n            }\n            for (String topic : topics) {\n                // skip retry topic\n                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n                    continue;\n                }\n\n                TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);\n                if (topicConfig == null) {\n                    continue;\n                }\n\n                // skip no perm topic\n                int topicPerm = topicConfig.getPerm() & brokerConfig.getBrokerPermission();\n                if (!PermName.isReadable(topicPerm) && !PermName.isWriteable(topicPerm)) {\n                    continue;\n                }\n\n                if (isPop) {\n                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group, brokerConfig.isEnableRetryTopicV2());\n                    TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig
{
    "key":"//broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.broker.out;\n\nimport com.alibaba.fastjson2.JSON;\nimport java.io.UnsupportedEncodingException;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.rocketmq.acl.common.AclClientRPCHook;\nimport org.apache.rocketmq.acl.common.SessionCredentials;\nimport org.apache.rocketmq.auth.config.AuthConfig;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.consumer.PullStatus;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.impl.consumer.PullResultExt;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.common.AbstractBrokerRunnable;\nimport org.apache.rocketmq.common.BrokerIdentity;\nimport org.apache.rocketmq.common.LockCallback;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.Pair;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.UnlockCallback;\nimport org.apache.rocketmq.common.UtilAll;\nimport org.apache.rocketmq.common.constant.LoggerName;\nimport org.apache.rocketmq.common.constant.PermName;\nimport org.apache.rocketmq.common.filter.ExpressionType;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageAccessor;\nimport org.apache.rocketmq.common.message.MessageBatch;\nimport org.apache.rocketmq.common.message.MessageClientIDSetter;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.common.message.MessageDecoder;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageExtBrokerInner;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.sysflag.PullSysFlag;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.remoting.InvokeCallback;\nimport org.apache.rocketmq.remoting.RPCHook;\nimport org.apache.rocketmq.remoting.RemotingClient;\nimport org.apache.rocketmq.remoting.RemotingCommand;\nimport org.apache.rocketmq.remoting.exception.RemotingCommandException;\nimport org.apache.rocketmq.remoting.exception.RemotingConnectException;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.apache.rocketmq.remoting.exception.RemotingSendRequestException;\nimport org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\nimport org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;\nimport org.apache.rocketmq.remoting.netty.NettyClientConfig;\nimport org.apache.rocketmq.remoting.netty.NettyRemotingClient;\nimport org.apache.rocketmq.remoting.netty.ResponseFuture;\nimport org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;\nimport org.apache.rocketmq.remoting.protocol.DataVersion;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\nimport org.apache.rocketmq.remoting.protocol.RemotingSerializable;\nimport org.apache.rocketmq.remoting.protocol.RequestCode;\nimport org.apache.rocketmq.remoting.protocol.ResponseCode;\nimport org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;\nimport org.apache.rocketmq.remoting.protocol.body.ClusterInfo;\nimport org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.KVTable;\nimport org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;\nimport org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;\nimport org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;\nimport org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;\nimport org.apache.rocketmq.remoting.protocol.body.TopicRouteData;\nimport org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;\nimport org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;\nimport org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.QueueData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.remoting.rpc.ClientMetadata;\nimport org.apache.rocketmq.remoting.rpc.RpcClient;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache.rocketmq.remoting.rpc.RpcClientImpl;\nimport org.apache
{
    "key":"//example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.rocketmq.example.broadcast;\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;\n\npublic class PushConsumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_1\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n\n    public static final String SUB_EXPRESSION = \"TagA || TagC || TagD\";\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n\n        // Uncomment the following line while debugging, namesrvAddr should be set to your local address\n//        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n\n        consumer.subscribe(TOPIC, SUB_EXPRESSION);\n\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n\n        consumer.start();\n        System.out.printf(\"Broadcast Consumer Started.%n\");\n    }\n}"
}"