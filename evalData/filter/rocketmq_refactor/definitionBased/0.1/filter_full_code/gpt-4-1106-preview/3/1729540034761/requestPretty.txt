messages:
[
	content:"
	
	I will provide you Java files that contain data clumps.
	Choose one data clump that you think is most important and should be refactored.
	
	A data clump exists if
	1) two methods (in the same or in different classes) have at least 3 common parameters
	    and one of those methods does not override the other,
	
	or  
	2) At least three fields in a class are common with the parameters of a method (in the same or in a different class),
	
	or
	3) Two different classes have at least three common fields
	
	
	Return the key of that data clump.
	Justify your response. 
	Use the following  output format in JSON:
	
	The "reason" attribute should be equal to as follows:
	        "size" -> if you choose the data clump because of its large number of parameters/fields
	        "occurrence" -> if you choose the data clump because it occurs very often and leads to much duplication
	        "affected_files" -> if you choose this data clump because many files are affected by this data clump
	        "domain" -> if you choose this data clump because the variables share a common domain so that extracting a class is a good idea
	        "other" -> if none of the options above fits
	
	### JSON
	{
	    "key":"<a portion of the source code, as submitted, that shows where the data clump is located",,
	    "reason":"<as explained above>,
	    "justification":"<Your justification which explains the 'reason' in more details>",
	    "suggestedName":"<A suitable name for an extracted class if the data clumps variables were to be extracted>"
	
	}
	
	### END JSON
		
",
	role:"
	user	
",
,
	content:"
	//common/src/main/java/org/apache/rocketmq/common/stats/Stats.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.common.stats;
	
	public class Stats {
	
	    public static final String QUEUE_PUT_NUMS = "QUEUE_PUT_NUMS";
	    public static final String QUEUE_PUT_SIZE = "QUEUE_PUT_SIZE";
	    public static final String QUEUE_GET_NUMS = "QUEUE_GET_NUMS";
	    public static final String QUEUE_GET_SIZE = "QUEUE_GET_SIZE";
	    public static final String TOPIC_PUT_NUMS = "TOPIC_PUT_NUMS";
	    public static final String TOPIC_PUT_SIZE = "TOPIC_PUT_SIZE";
	    public static final String GROUP_GET_NUMS = "GROUP_GET_NUMS";
	    public static final String GROUP_GET_SIZE = "GROUP_GET_SIZE";
	    public static final String SNDBCK_PUT_NUMS = "SNDBCK_PUT_NUMS";
	    public static final String BROKER_PUT_NUMS = "BROKER_PUT_NUMS";
	    public static final String BROKER_GET_NUMS = "BROKER_GET_NUMS";
	    public static final String GROUP_GET_FROM_DISK_NUMS = "GROUP_GET_FROM_DISK_NUMS";
	    public static final String GROUP_GET_FROM_DISK_SIZE = "GROUP_GET_FROM_DISK_SIZE";
	    public static final String BROKER_GET_FROM_DISK_NUMS = "BROKER_GET_FROM_DISK_NUMS";
	    public static final String BROKER_GET_FROM_DISK_SIZE = "BROKER_GET_FROM_DISK_SIZE";
	    public static final String COMMERCIAL_SEND_TIMES = "COMMERCIAL_SEND_TIMES";
	    public static final String COMMERCIAL_SNDBCK_TIMES = "COMMERCIAL_SNDBCK_TIMES";
	    public static final String COMMERCIAL_RCV_TIMES = "COMMERCIAL_RCV_TIMES";
	    public static final String COMMERCIAL_RCV_EPOLLS = "COMMERCIAL_RCV_EPOLLS";
	    public static final String COMMERCIAL_SEND_SIZE = "COMMERCIAL_SEND_SIZE";
	    public static final String COMMERCIAL_RCV_SIZE = "COMMERCIAL_RCV_SIZE";
	    public static final String COMMERCIAL_PERM_FAILURES = "COMMERCIAL_PERM_FAILURES";
	
	    public static final String GROUP_GET_FALL_SIZE = "GROUP_GET_FALL_SIZE";
	    public static final String GROUP_GET_FALL_TIME = "GROUP_GET_FALL_TIME";
	    public static final String GROUP_GET_LATENCY = "GROUP_GET_LATENCY";
	}
		
",
	role:"
	user	
",
,
	content:"
	//store/src/main/java/org/apache/rocketmq/store/stats/BrokerStatsManager.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.store.stats;
	
	import java.util.HashMap;
	import java.util.concurrent.ScheduledExecutorService;
	import org.apache.commons.lang3.tuple.Pair;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.statistics.StatisticsItem;
	import org.apache.rocketmq.common.statistics.StatisticsItemFormatter;
	import org.apache.rocketmq.common.statistics.StatisticsItemPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledIncrementPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemScheduledPrinter;
	import org.apache.rocketmq.common.statistics.StatisticsItemStateGetter;
	import org.apache.rocketmq.common.statistics.StatisticsKindMeta;
	import org.apache.rocketmq.common.statistics.StatisticsManager;
	import org.apache.rocketmq.common.stats.MomentStatsItemSet;
	import org.apache.rocketmq.common.stats.Stats;
	import org.apache.rocketmq.common.stats.StatsItem;
	import org.apache.rocketmq.common.stats.StatsItemSet;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class BrokerStatsManager {
	
	    @Deprecated public static final String QUEUE_PUT_NUMS = Stats.QUEUE_PUT_NUMS;
	    @Deprecated public static final String QUEUE_PUT_SIZE = Stats.QUEUE_PUT_SIZE;
	    @Deprecated public static final String QUEUE_GET_NUMS = Stats.QUEUE_GET_NUMS;
	    @Deprecated public static final String QUEUE_GET_SIZE = Stats.QUEUE_GET_SIZE;
	    @Deprecated public static final String TOPIC_PUT_NUMS = Stats.TOPIC_PUT_NUMS;
	    @Deprecated public static final String TOPIC_PUT_SIZE = Stats.TOPIC_PUT_SIZE;
	
	    @Deprecated public static final String GROUP_GET_NUMS = Stats.GROUP_GET_NUMS;
	    @Deprecated public static final String GROUP_GET_SIZE = Stats.GROUP_GET_SIZE;
	
	    @Deprecated public static final String SNDBCK_PUT_NUMS = Stats.SNDBCK_PUT_NUMS;
	    @Deprecated public static final String BROKER_PUT_NUMS = Stats.BROKER_PUT_NUMS;
	    @Deprecated public static final String BROKER_GET_NUMS = Stats.BROKER_GET_NUMS;
	    @Deprecated public static final String GROUP_GET_FROM_DISK_NUMS = Stats.GROUP_GET_FROM_DISK_NUMS;
	    @Deprecated public static final String GROUP_GET_FROM_DISK_SIZE = Stats.GROUP_GET_FROM_DISK_SIZE;
	    @Deprecated public static final String BROKER_GET_FROM_DISK_NUMS = Stats.BROKER_GET_FROM_DISK_NUMS;
	    @Deprecated public static final String BROKER_GET_FROM_DISK_SIZE = Stats.BROKER_GET_FROM_DISK_SIZE;
	    // For commercial
	    @Deprecated public static final String COMMERCIAL_SEND_TIMES = Stats.COMMERCIAL_SEND_TIMES;
	    @Deprecated public static final String COMMERCIAL_SNDBCK_TIMES = Stats.COMMERCIAL_SNDBCK_TIMES;
	    @Deprecated public static final String COMMERCIAL_RCV_TIMES = Stats.COMMERCIAL_RCV_TIMES;
	    @Deprecated public static final String COMMERCIAL_RCV_EPOLLS = Stats.COMMERCIAL_RCV_EPOLLS;
	    @Deprecated public static final String COMMERCIAL_SEND_SIZE = Stats.COMMERCIAL_SEND_SIZE;
	    @Deprecated public static final String COMMERCIAL_RCV_SIZE = Stats.COMMERCIAL_RCV_SIZE;
	    @Deprecated public static final String COMMERCIAL_PERM_FAILURES = Stats.COMMERCIAL_PERM_FAILURES;
	
	    // Send message latency
	    public static final String TOPIC_PUT_LATENCY = "TOPIC_PUT_LATENCY";
	    public static final String GROUP_ACK_NUMS = "GROUP_ACK_NUMS";
	    public static final String GROUP_CK_NUMS = "GROUP_CK_NUMS";
	    public static final String DLQ_PUT_NUMS = "DLQ_PUT_NUMS";
	    public static final String BROKER_ACK_NUMS = "BROKER_ACK_NUMS";
	    public static final String BROKER_CK_NUMS = "BROKER_CK_NUMS";
	    public static final String BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC = "BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC";
	    public static final String SNDBCK2DLQ_TIMES = "SNDBCK2DLQ_TIMES";
	
	    public static final String COMMERCIAL_OWNER = "Owner";
	
	    public static final String ACCOUNT_OWNER_PARENT = "OWNER_PARENT";
	    public static final String ACCOUNT_OWNER_SELF = "OWNER_SELF";
	
	    public static final long ACCOUNT_STAT_INVERTAL = 60 * 1000;
	    public static final String ACCOUNT_AUTH_TYPE = "AUTH_TYPE";
	
	    public static final String ACCOUNT_SEND = "SEND";
	    public static final String ACCOUNT_RCV = "RCV";
	    public static final String ACCOUNT_SEND_BACK = "SEND_BACK";
	    public static final String ACCOUNT_SEND_BACK_TO_DLQ = "SEND_BACK_TO_DLQ";
	    public static final String ACCOUNT_AUTH_FAILED = "AUTH_FAILED";
	    public static final String ACCOUNT_SEND_REJ = "SEND_REJ";
	    public static final String ACCOUNT_REV_REJ = "RCV_REJ";
	
	    public static final String MSG_NUM = "MSG_NUM";
	    public static final String MSG_SIZE = "MSG_SIZE";
	    public static final String SUCCESS_MSG_NUM = "SUCCESS_MSG_NUM";
	    public static final String FAILURE_MSG_NUM = "FAILURE_MSG_NUM";
	    public static final String COMMERCIAL_MSG_NUM = "COMMERCIAL_MSG_NUM";
	    public static final String SUCCESS_REQ_NUM = "SUCCESS_REQ_NUM";
	    public static final String FAILURE_REQ_NUM = "FAILURE_REQ_NUM";
	    public static final String SUCCESS_MSG_SIZE = "SUCCESS_MSG_SIZE";
	    public static final String FAILURE_MSG_SIZE = "FAILURE_MSG_SIZE";
	    public static final String RT = "RT";
	    public static final String INNER_RT = "INNER_RT";
	
	    @Deprecated public static final String GROUP_GET_FALL_SIZE = Stats.GROUP_GET_FALL_SIZE;
	    @Deprecated public static final String GROUP_GET_FALL_TIME = Stats.GROUP_GET_FALL_TIME;
	    // Pull Message Latency
	    @Deprecated public static final String GROUP_GET_LATENCY = Stats.GROUP_GET_LATENCY;
	
	    // Consumer Register Time
	    public static final String CONSUMER_REGISTER_TIME = "CONSUMER_REGISTER_TIME";
	    // Producer Register Time
	    public static final String PRODUCER_REGISTER_TIME = "PRODUCER_REGISTER_TIME";
	    public static final String CHANNEL_ACTIVITY = "CHANNEL_ACTIVITY";
	    public static final String CHANNEL_ACTIVITY_CONNECT = "CONNECT";
	    public static final String CHANNEL_ACTIVITY_IDLE = "IDLE";
	    public static final String CHANNEL_ACTIVITY_EXCEPTION = "EXCEPTION";
	    public static final String CHANNEL_ACTIVITY_CLOSE = "CLOSE";
	
	    /**
	     * read disk follow stats
	     */
	    private static final Logger log = LoggerFactory.getLogger(LoggerName.ROCKETMQ_STATS_LOGGER_NAME);
	    private static final Logger COMMERCIAL_LOG = LoggerFactory.getLogger(
	        LoggerName.COMMERCIAL_LOGGER_NAME);
	    private static final Logger ACCOUNT_LOG = LoggerFactory.getLogger(LoggerName.ACCOUNT_LOGGER_NAME);
	    private static final Logger DLQ_STAT_LOG = LoggerFactory.getLogger(
	        LoggerName.DLQ_STATS_LOGGER_NAME);
	    private ScheduledExecutorService scheduledExecutorService;
	    private ScheduledExecutorService commercialExecutor;
	    private ScheduledExecutorService accountExecutor;
	
	    private final HashMap<String, StatsItemSet> statsTable = new HashMap<>();
	    private final String clusterName;
	    private final boolean enableQueueStat;
	    private MomentStatsItemSet momentStatsItemSetFallSize;
	    private MomentStatsItemSet momentStatsItemSetFallTime;
	
	    private final StatisticsManager accountStatManager = new StatisticsManager();
	    private StateGetter producerStateGetter;
	    private StateGetter consumerStateGetter;
	
	    private BrokerConfig brokerConfig;
	
	    public BrokerStatsManager(BrokerConfig brokerConfig) {
	        this.brokerConfig = brokerConfig;
	        this.enableQueueStat = brokerConfig.isEnableDetailStat();
	        initScheduleService();
	        this.clusterName = brokerConfig.getBrokerClusterName();
	        init();
	    }
	
	    public BrokerStatsManager(String clusterName, boolean enableQueueStat) {
	        this.clusterName = clusterName;
	        this.enableQueueStat = enableQueueStat;
	        initScheduleService();
	        init();
	    }
	
	    public void init() {
	        momentStatsItemSetFallSize = new MomentStatsItemSet(GROUP_GET_FALL_SIZE,
	            scheduledExecutorService, log);
	
	        momentStatsItemSetFallTime = new MomentStatsItemSet(GROUP_GET_FALL_TIME,
	            scheduledExecutorService, log);
	
	        if (enableQueueStat) {
	            this.statsTable.put(Stats.QUEUE_PUT_NUMS, new StatsItemSet(Stats.QUEUE_PUT_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_PUT_SIZE, new StatsItemSet(Stats.QUEUE_PUT_SIZE, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_NUMS, new StatsItemSet(Stats.QUEUE_GET_NUMS, this.scheduledExecutorService, log));
	            this.statsTable.put(Stats.QUEUE_GET_SIZE, new StatsItemSet(Stats.QUEUE_GET_SIZE, this.scheduledExecutorService, log));
	        }
	        this.statsTable.put(Stats.TOPIC_PUT_NUMS, new StatsItemSet(Stats.TOPIC_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.TOPIC_PUT_SIZE, new StatsItemSet(Stats.TOPIC_PUT_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_NUMS, new StatsItemSet(Stats.GROUP_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_SIZE, new StatsItemSet(Stats.GROUP_GET_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_ACK_NUMS, new StatsItemSet(GROUP_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(GROUP_CK_NUMS, new StatsItemSet(GROUP_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_LATENCY, new StatsItemSet(Stats.GROUP_GET_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(TOPIC_PUT_LATENCY, new StatsItemSet(TOPIC_PUT_LATENCY, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.SNDBCK_PUT_NUMS, new StatsItemSet(Stats.SNDBCK_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(DLQ_PUT_NUMS, new StatsItemSet(DLQ_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_PUT_NUMS, new StatsItemSet(Stats.BROKER_PUT_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_NUMS, new StatsItemSet(Stats.BROKER_GET_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_ACK_NUMS, new StatsItemSet(BROKER_ACK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_CK_NUMS, new StatsItemSet(BROKER_CK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC,
	            new StatsItemSet(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.GROUP_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.GROUP_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_NUMS,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_NUMS, this.scheduledExecutorService, log));
	        this.statsTable.put(Stats.BROKER_GET_FROM_DISK_SIZE,
	            new StatsItemSet(Stats.BROKER_GET_FROM_DISK_SIZE, this.scheduledExecutorService, log));
	
	        this.statsTable.put(SNDBCK2DLQ_TIMES,
	            new StatsItemSet(SNDBCK2DLQ_TIMES, this.scheduledExecutorService, DLQ_STAT_LOG));
	
	        this.statsTable.put(Stats.COMMERCIAL_SEND_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SEND_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_SEND_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_SIZE,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_SIZE, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_RCV_EPOLLS,
	            new StatsItemSet(Stats.COMMERCIAL_RCV_EPOLLS, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_SNDBCK_TIMES,
	            new StatsItemSet(Stats.COMMERCIAL_SNDBCK_TIMES, this.commercialExecutor, COMMERCIAL_LOG));
	        this.statsTable.put(Stats.COMMERCIAL_PERM_FAILURES,
	            new StatsItemSet(Stats.COMMERCIAL_PERM_FAILURES, this.commercialExecutor, COMMERCIAL_LOG));
	
	        this.statsTable.put(CONSUMER_REGISTER_TIME,
	            new StatsItemSet(CONSUMER_REGISTER_TIME, this.scheduledExecutorService, log));
	        this.statsTable.put(PRODUCER_REGISTER_TIME,
	            new StatsItemSet(PRODUCER_REGISTER_TIME, this.scheduledExecutorService, log));
	
	        this.statsTable.put(CHANNEL_ACTIVITY, new StatsItemSet(CHANNEL_ACTIVITY, this.scheduledExecutorService, log));
	
	        StatisticsItemFormatter formatter = new StatisticsItemFormatter();
	        accountStatManager.setBriefMeta(new Pair[] {
	            Pair.of(RT, new long[][] {{50, 50}, {100, 10}, {1000, 10}}),
	            Pair.of(INNER_RT, new long[][] {{10, 10}, {100, 10}, {1000, 10}})});
	        String[] itemNames = new String[] {
	            MSG_NUM, SUCCESS_MSG_NUM, FAILURE_MSG_NUM, COMMERCIAL_MSG_NUM,
	            SUCCESS_REQ_NUM, FAILURE_REQ_NUM,
	            MSG_SIZE, SUCCESS_MSG_SIZE, FAILURE_MSG_SIZE,
	            RT, INNER_RT};
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_RCV, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_BACK_TO_DLQ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_SEND_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.addStatisticsKindMeta(createStatisticsKindMeta(
	            ACCOUNT_REV_REJ, itemNames, this.accountExecutor, formatter, ACCOUNT_LOG, ACCOUNT_STAT_INVERTAL));
	        this.accountStatManager.setStatisticsItemStateGetter(new StatisticsItemStateGetter() {
	            @Override
	            public boolean online(StatisticsItem item) {
	                String[] strArr = null;
	                try {
	                    strArr = splitAccountStatKey(item.getStatObject());
	                } catch (Exception e) {
	                    log.warn("parse account stat key failed, key: {}", item.getStatObject());
	                    return false;
	                }
	
	                // TODO ugly
	                if (strArr == null || strArr.length < 4) {
	                    return false;
	                }
	
	                String instanceId = strArr[1];
	                String topic = strArr[2];
	                String group = strArr[3];
	
	                String kind = item.getStatKind();
	                if (ACCOUNT_SEND.equals(kind) || ACCOUNT_SEND_REJ.equals(kind)) {
	                    return producerStateGetter.online(instanceId, group, topic);
	                } else if (ACCOUNT_RCV.equals(kind) || ACCOUNT_SEND_BACK.equals(kind) || ACCOUNT_SEND_BACK_TO_DLQ.equals(kind) || ACCOUNT_REV_REJ.equals(kind)) {
	                    return consumerStateGetter.online(instanceId, group, topic);
	                }
	                return false;
	            }
	        });
	    }
	
	    private void initScheduleService() {
	        this.scheduledExecutorService =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("BrokerStatsThread", true, brokerConfig));
	        this.commercialExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("CommercialStatsThread", true, brokerConfig));
	        this.accountExecutor =
	            ThreadUtils.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("AccountStatsThread", true, brokerConfig));
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallSize() {
	        return momentStatsItemSetFallSize;
	    }
	
	    public MomentStatsItemSet getMomentStatsItemSetFallTime() {
	        return momentStatsItemSetFallTime;
	    }
	
	    public StateGetter getProducerStateGetter() {
	        return producerStateGetter;
	    }
	
	    public void setProducerStateGetter(StateGetter producerStateGetter) {
	        this.producerStateGetter = producerStateGetter;
	    }
	
	    public StateGetter getConsumerStateGetter() {
	        return consumerStateGetter;
	    }
	
	    public void setConsumerStateGetter(StateGetter consumerStateGetter) {
	        this.consumerStateGetter = consumerStateGetter;
	    }
	
	    public void start() {
	    }
	
	    public void shutdown() {
	        this.scheduledExecutorService.shutdown();
	        this.commercialExecutor.shutdown();
	    }
	
	    public StatsItem getStatsItem(final String statsName, final String statsKey) {
	        try {
	            return this.statsTable.get(statsName).getStatsItem(statsKey);
	        } catch (Exception e) {
	        }
	
	        return null;
	    }
	
	    public void onTopicDeleted(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).delValue(topic);
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).delValue(topic);
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).delValueByPrefixKey(topic, "@");
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).delValueByPrefixKey(topic, "@");
	        }
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueByPrefixKey(topic, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallSize.delValueByInfixKey(topic, "@");
	        this.momentStatsItemSetFallTime.delValueByInfixKey(topic, "@");
	    }
	
	    public void onGroupDeleted(final String group) {
	        this.statsTable.get(Stats.GROUP_GET_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_SIZE).delValueBySuffixKey(group, "@");
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).delValueBySuffixKey(group, "@");
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).delValueBySuffixKey(group, "@");
	        }
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).delValueBySuffixKey(group, "@");
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallSize.delValueBySuffixKey(group, "@");
	        this.momentStatsItemSetFallTime.delValueBySuffixKey(group, "@");
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), 1, 1);
	        }
	    }
	
	    public void incQueuePutNums(final String topic, final Integer queueId, int num, int times) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_NUMS).addValue(buildStatsKey(topic, queueId), num, times);
	        }
	    }
	
	    public void incQueuePutSize(final String topic, final Integer queueId, final int size) {
	        if (enableQueueStat) {
	            this.statsTable.get(Stats.QUEUE_PUT_SIZE).addValue(buildStatsKey(topic, queueId), size, 1);
	        }
	    }
	
	    public void incQueueGetNums(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_NUMS).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incQueueGetSize(final String group, final String topic, final Integer queueId, final int incValue) {
	        if (enableQueueStat) {
	            final String statsKey = buildStatsKey(topic, queueId, group);
	            this.statsTable.get(Stats.QUEUE_GET_SIZE).addValue(statsKey, incValue, 1);
	        }
	    }
	
	    public void incConsumerRegisterTime(final int incValue) {
	        this.statsTable.get(CONSUMER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incProducerRegisterTime(final int incValue) {
	        this.statsTable.get(PRODUCER_REGISTER_TIME).addValue(this.clusterName, incValue, 1);
	    }
	
	    public void incChannelConnectNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CONNECT, 1, 1);
	    }
	
	    public void incChannelCloseNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_CLOSE, 1, 1);
	    }
	
	    public void incChannelExceptionNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_EXCEPTION, 1, 1);
	    }
	
	    public void incChannelIdleNum() {
	        this.statsTable.get(CHANNEL_ACTIVITY).addValue(CHANNEL_ACTIVITY_IDLE, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, 1, 1);
	    }
	
	    public void incTopicPutNums(final String topic, int num, int times) {
	        this.statsTable.get(Stats.TOPIC_PUT_NUMS).addValue(topic, num, times);
	    }
	
	    public void incTopicPutSize(final String topic, final int size) {
	        this.statsTable.get(Stats.TOPIC_PUT_SIZE).addValue(topic, size, 1);
	    }
	
	    public void incGroupGetNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupCkNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_CK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupAckNums(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(GROUP_ACK_NUMS).addValue(statsKey, incValue, 1);
	    }
	
	    public String buildStatsKey(String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 1);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId) {
	        StringBuilder strBuilder;
	        if (topic != null) {
	            strBuilder = new StringBuilder(topic.length() + 5);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(String topic, int queueId, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(topic).append("@").append(queueId).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public String buildStatsKey(int queueId, String topic, String group) {
	        StringBuilder strBuilder;
	        if (topic != null && group != null) {
	            strBuilder = new StringBuilder(topic.length() + group.length() + 6);
	        } else {
	            strBuilder = new StringBuilder();
	        }
	        strBuilder.append(queueId).append("@").append(topic).append("@").append(group);
	        return strBuilder.toString();
	    }
	
	    public void incGroupGetSize(final String group, final String topic, final int incValue) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.GROUP_GET_SIZE).addValue(statsKey, incValue, 1);
	    }
	
	    public void incGroupGetLatency(final String group, final String topic, final int queueId, final int incValue) {
	        String statsKey;
	        if (enableQueueStat) {
	            statsKey = buildStatsKey(queueId, topic, group);
	        } else {
	            statsKey = buildStatsKey(topic, group);
	        }
	        this.statsTable.get(Stats.GROUP_GET_LATENCY).addRTValue(statsKey, incValue, 1);
	    }
	
	    public void incTopicPutLatency(final String topic, final int queueId, final int incValue) {
	        StringBuilder statsKey;
	        if (topic != null) {
	            statsKey = new StringBuilder(topic.length() + 6);
	        } else {
	            statsKey = new StringBuilder(6);
	        }
	        statsKey.append(queueId).append("@").append(topic);
	        this.statsTable.get(TOPIC_PUT_LATENCY).addValue(statsKey.toString(), incValue, 1);
	    }
	
	    public void incBrokerPutNums() {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(1);
	    }
	
	    public void incBrokerPutNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_PUT_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        incBrokerPutNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerGetNums(final String topic, final int incValue) {
	        this.statsTable.get(Stats.BROKER_GET_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	        this.incBrokerGetNumsWithoutSystemTopic(topic, incValue);
	    }
	
	    public void incBrokerAckNums(final int incValue) {
	        this.statsTable.get(BROKER_ACK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerCkNums(final int incValue) {
	        this.statsTable.get(BROKER_CK_NUMS).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerGetNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public void incBrokerPutNumsWithoutSystemTopic(final String topic, final int incValue) {
	        if (TopicValidator.isSystemTopic(topic)) {
	            return;
	        }
	        this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC).getAndCreateStatsItem(this.clusterName).getValue().add(incValue);
	    }
	
	    public long getBrokerGetNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_GET_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public long getBrokerPutNumsWithoutSystemTopic() {
	        final StatsItemSet statsItemSet = this.statsTable.get(BROKER_PUT_NUMS_WITHOUT_SYSTEM_TOPIC);
	        if (statsItemSet == null) {
	            return 0;
	        }
	        final StatsItem statsItem = statsItemSet.getStatsItem(this.clusterName);
	        if (statsItem == null) {
	            return 0;
	        }
	        return statsItem.getValue().longValue();
	    }
	
	    public void incSendBackNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        this.statsTable.get(Stats.SNDBCK_PUT_NUMS).addValue(statsKey, 1, 1);
	    }
	
	    public double tpsGroupGetNums(final String group, final String topic) {
	        final String statsKey = buildStatsKey(topic, group);
	        return this.statsTable.get(Stats.GROUP_GET_NUMS).getStatsDataInMinute(statsKey).getTps();
	    }
	
	    public void recordDiskFallBehindTime(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallTime.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void recordDiskFallBehindSize(final String group, final String topic, final int queueId,
	        final long fallBehind) {
	        final String statsKey = buildStatsKey(queueId, topic, group);
	        this.momentStatsItemSetFallSize.getAndCreateStatsItem(statsKey).getValue().set(fallBehind);
	    }
	
	    public void incDLQStatValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incCommercialValue(final String key, final String owner, final String group,
	        final String topic, final String type, final int incValue) {
	        final String statsKey = buildCommercialStatsKey(owner, topic, group, type);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String key, final String accountOwnerParent, final String accountOwnerSelf,
	        final String instanceId, final String group, final String topic,
	        final String msgType, final String flowlimitThreshold, final int incValue) {
	        final String statsKey = buildAccountStatsKey(accountOwnerParent, accountOwnerSelf, instanceId, topic, group,
	            msgType, flowlimitThreshold);
	        this.statsTable.get(key).addValue(statsKey, incValue, 1);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public void incAccountValue(final String statType, final String owner, final String instanceId, final String topic,
	        final String group, final String msgType, final String flowlimitThreshold,
	        final long... incValues) {
	        final String key = buildAccountStatKey(owner, instanceId, topic, group, msgType, flowlimitThreshold);
	        this.accountStatManager.inc(statType, key, incValues);
	    }
	
	    public String buildCommercialStatsKey(String owner, String topic, String group, String type) {
	        StringBuilder strBuilder = new StringBuilder();
	        strBuilder.append(owner);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(type);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatsKey(String accountOwnerParent, String accountOwnerSelf, String instanceId,
	        String topic, String group, String msgType, String flowlimitThreshold) {
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(accountOwnerParent);
	        strBuilder.append("@");
	        strBuilder.append(accountOwnerSelf);
	        strBuilder.append("@");
	        strBuilder.append(instanceId);
	        strBuilder.append("@");
	        strBuilder.append(topic);
	        strBuilder.append("@");
	        strBuilder.append(group);
	        strBuilder.append("@");
	        strBuilder.append(msgType);
	        strBuilder.append("@");
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType);
	        return strBuilder.toString();
	    }
	
	    public String buildAccountStatKey(final String owner, final String instanceId,
	        final String topic, final String group,
	        final String msgType, String flowlimitThreshold) {
	        final String sep = "|";
	        StringBuffer strBuilder = new StringBuffer();
	        strBuilder.append(owner).append(sep);
	        strBuilder.append(instanceId).append(sep);
	        strBuilder.append(topic).append(sep);
	        strBuilder.append(group).append(sep);
	        strBuilder.append(msgType).append(sep);
	        strBuilder.append(flowlimitThreshold);
	        return strBuilder.toString();
	    }
	
	    public String[] splitAccountStatKey(final String accountStatKey) {
	        final String sep = "\\|";
	        return accountStatKey.split(sep);
	    }
	
	    private StatisticsKindMeta createStatisticsKindMeta(String name,
	        String[] itemNames,
	        ScheduledExecutorService executorService,
	        StatisticsItemFormatter formatter,
	        Logger log,
	        long interval) {
	        final BrokerConfig brokerConfig = this.brokerConfig;
	        StatisticsItemPrinter printer = new StatisticsItemPrinter(formatter, log);
	        StatisticsKindMeta kindMeta = new StatisticsKindMeta();
	        kindMeta.setName(name);
	        kindMeta.setItemNames(itemNames);
	        kindMeta.setScheduledPrinter(
	            new StatisticsItemScheduledIncrementPrinter(
	                "Stat In One Minute: ",
	                printer,
	                executorService,
	                new StatisticsItemScheduledPrinter.InitialDelay() {
	                    @Override
	                    public long get() {
	                        return Math.abs(UtilAll.computeNextMinutesTimeMillis() - System.currentTimeMillis());
	                    }
	                },
	                interval,
	                new String[] {MSG_NUM},
	                new StatisticsItemScheduledIncrementPrinter.Valve() {
	                    @Override
	                    public boolean enabled() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsEnable() : true;
	                    }
	
	                    @Override
	                    public boolean printZeroLine() {
	                        return brokerConfig != null ? brokerConfig.isAccountStatsPrintZeroValues() : true;
	                    }
	                }
	            )
	        );
	        return kindMeta;
	    }
	
	    public interface StateGetter {
	        boolean online(String instanceId, String group, String topic);
	    }
	
	    public enum StatsType {
	        SEND_SUCCESS,
	        SEND_FAILURE,
	
	        RCV_SUCCESS,
	        RCV_EPOLLS,
	        SEND_BACK,
	        SEND_BACK_TO_DLQ,
	
	        SEND_ORDER,
	        SEND_TIMER,
	        SEND_TRANSACTION,
	
	        PERM_FAILURE
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultLitePullConsumerImpl.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.client.impl.consumer;
	
	import java.util.ArrayList;
	import java.util.Collection;
	import java.util.Collections;
	import java.util.HashMap;
	import java.util.HashSet;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Map;
	import java.util.Properties;
	import java.util.Set;
	import java.util.concurrent.BlockingQueue;
	import java.util.concurrent.ConcurrentHashMap;
	import java.util.concurrent.ConcurrentMap;
	import java.util.concurrent.Executors;
	import java.util.concurrent.LinkedBlockingQueue;
	import java.util.concurrent.ScheduledExecutorService;
	import java.util.concurrent.ScheduledThreadPoolExecutor;
	import java.util.concurrent.TimeUnit;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.rocketmq.client.Validators;
	import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
	import org.apache.rocketmq.client.consumer.MessageQueueListener;
	import org.apache.rocketmq.client.consumer.MessageSelector;
	import org.apache.rocketmq.client.consumer.PullResult;
	import org.apache.rocketmq.client.consumer.TopicMessageQueueChangeListener;
	import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
	import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
	import org.apache.rocketmq.client.consumer.store.OffsetStore;
	import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
	import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
	import org.apache.rocketmq.client.exception.MQBrokerException;
	import org.apache.rocketmq.client.exception.MQClientException;
	import org.apache.rocketmq.client.hook.ConsumeMessageContext;
	import org.apache.rocketmq.client.hook.ConsumeMessageHook;
	import org.apache.rocketmq.client.hook.FilterMessageHook;
	import org.apache.rocketmq.client.impl.CommunicationMode;
	import org.apache.rocketmq.client.impl.MQClientManager;
	import org.apache.rocketmq.client.impl.factory.MQClientInstance;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.ServiceState;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
	import org.apache.rocketmq.common.filter.ExpressionType;
	import org.apache.rocketmq.common.help.FAQUrl;
	import org.apache.rocketmq.common.message.MessageExt;
	import org.apache.rocketmq.common.message.MessageQueue;
	import org.apache.rocketmq.common.sysflag.PullSysFlag;
	import org.apache.rocketmq.remoting.RPCHook;
	import org.apache.rocketmq.remoting.exception.RemotingException;
	import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
	import org.apache.rocketmq.remoting.protocol.ResponseCode;
	import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
	import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
	import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
	import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
	import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class DefaultLitePullConsumerImpl implements MQConsumerInner {
	
	    private static final Logger log = LoggerFactory.getLogger(DefaultLitePullConsumerImpl.class);
	
	    private final long consumerStartTimestamp = System.currentTimeMillis();
	
	    private final RPCHook rpcHook;
	
	    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();
	
	    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;
	
	    protected MQClientInstance mQClientFactory;
	
	    private PullAPIWrapper pullAPIWrapper;
	
	    private OffsetStore offsetStore;
	
	    private RebalanceImpl rebalanceImpl = new RebalanceLitePullImpl(this);
	
	    private enum SubscriptionType {
	        NONE, SUBSCRIBE, ASSIGN
	    }
	
	    private static final String NOT_RUNNING_EXCEPTION_MESSAGE = "The consumer not running, please start it first.";
	
	    private static final String SUBSCRIPTION_CONFLICT_EXCEPTION_MESSAGE = "Subscribe and assign are mutually exclusive.";
	    /**
	     * the type of subscription
	     */
	    private SubscriptionType subscriptionType = SubscriptionType.NONE;
	    /**
	     * Delay some time when exception occur
	     */
	    private long pullTimeDelayMillsWhenException = 1000;
	    /**
	     * Flow control interval when message cache is full
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL = 50;
	    /**
	     * Flow control interval when broker return flow control
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL = 20;
	    /**
	     * Delay some time when suspend pull service
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_PAUSE = 1000;
	
	    private static final long PULL_TIME_DELAY_MILLS_ON_EXCEPTION = 3 * 1000;
	
	    private ConcurrentHashMap<String/* topic */, String/* subExpression */> topicToSubExpression = new ConcurrentHashMap<>();
	
	    private DefaultLitePullConsumer defaultLitePullConsumer;
	
	    private final ConcurrentMap<MessageQueue, PullTaskImpl> taskTable =
	        new ConcurrentHashMap<>();
	
	    private AssignedMessageQueue assignedMessageQueue = new AssignedMessageQueue();
	
	    private final BlockingQueue<ConsumeRequest> consumeRequestCache = new LinkedBlockingQueue<>();
	
	    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;
	
	    private final ScheduledExecutorService scheduledExecutorService;
	
	    private Map<String, TopicMessageQueueChangeListener> topicMessageQueueChangeListenerMap = new HashMap<>();
	
	    private Map<String, Set<MessageQueue>> messageQueuesForTopic = new HashMap<>();
	
	    private long consumeRequestFlowControlTimes = 0L;
	
	    private long queueFlowControlTimes = 0L;
	
	    private long queueMaxSpanFlowControlTimes = 0L;
	
	    private long nextAutoCommitDeadline = -1L;
	
	    private final MessageQueueLock messageQueueLock = new MessageQueueLock();
	
	    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
	
	    // only for test purpose, will be modified by reflection in unit test.
	    @SuppressWarnings("FieldMayBeFinal")
	    private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;
	
	    public DefaultLitePullConsumerImpl(final DefaultLitePullConsumer defaultLitePullConsumer, final RPCHook rpcHook) {
	        this.defaultLitePullConsumer = defaultLitePullConsumer;
	        this.rpcHook = rpcHook;
	        this.scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(
	            this.defaultLitePullConsumer.getPullThreadNums(),
	            new ThreadFactoryImpl("PullMsgThread-" + this.defaultLitePullConsumer.getConsumerGroup())
	        );
	        this.scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("MonitorMessageQueueChangeThread"));
	        this.pullTimeDelayMillsWhenException = defaultLitePullConsumer.getPullTimeDelayMillsWhenException();
	    }
	
	    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
	        this.consumeMessageHookList.add(hook);
	        log.info("register consumeMessageHook Hook, {}", hook.hookName());
	    }
	
	    public void executeHookBefore(final ConsumeMessageContext context) {
	        if (!this.consumeMessageHookList.isEmpty()) {
	            for (ConsumeMessageHook hook : this.consumeMessageHookList) {
	                try {
	                    hook.consumeMessageBefore(context);
	                } catch (Throwable e) {
	                    log.error("consumeMessageHook {} executeHookBefore exception", hook.hookName(), e);
	                }
	            }
	        }
	    }
	
	    public void executeHookAfter(final ConsumeMessageContext context) {
	        if (!this.consumeMessageHookList.isEmpty()) {
	            for (ConsumeMessageHook hook : this.consumeMessageHookList) {
	                try {
	                    hook.consumeMessageAfter(context);
	                } catch (Throwable e) {
	                    log.error("consumeMessageHook {} executeHookAfter exception", hook.hookName(), e);
	                }
	            }
	        }
	    }
	
	    private void checkServiceState() {
	        if (this.serviceState != ServiceState.RUNNING) {
	            throw new IllegalStateException(NOT_RUNNING_EXCEPTION_MESSAGE);
	        }
	    }
	
	    public void updateNameServerAddr(String newAddresses) {
	        this.mQClientFactory.getMQClientAPIImpl().updateNameServerAddressList(newAddresses);
	    }
	
	    private synchronized void setSubscriptionType(SubscriptionType type) {
	        if (this.subscriptionType == SubscriptionType.NONE) {
	            this.subscriptionType = type;
	        } else if (this.subscriptionType != type) {
	            throw new IllegalStateException(SUBSCRIPTION_CONFLICT_EXCEPTION_MESSAGE);
	        }
	    }
	
	    private void updateAssignedMessageQueue(String topic, Set<MessageQueue> assignedMessageQueue) {
	        this.assignedMessageQueue.updateAssignedMessageQueue(topic, assignedMessageQueue);
	    }
	
	    private void updatePullTask(String topic, Set<MessageQueue> mqNewSet) {
	        Iterator<Map.Entry<MessageQueue, PullTaskImpl>> it = this.taskTable.entrySet().iterator();
	        while (it.hasNext()) {
	            Map.Entry<MessageQueue, PullTaskImpl> next = it.next();
	            if (next.getKey().getTopic().equals(topic)) {
	                if (!mqNewSet.contains(next.getKey())) {
	                    next.getValue().setCancelled(true);
	                    it.remove();
	                }
	            }
	        }
	        startPullTask(mqNewSet);
	    }
	
	    class MessageQueueListenerImpl implements MessageQueueListener {
	        @Override
	        public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<MessageQueue> mqDivided) {
	            updateAssignQueueAndStartPullTask(topic, mqAll, mqDivided);
	        }
	    }
	
	    public void updateAssignQueueAndStartPullTask(String topic, Set<MessageQueue> mqAll, Set<MessageQueue> mqDivided) {
	        MessageModel messageModel = defaultLitePullConsumer.getMessageModel();
	        switch (messageModel) {
	            case BROADCASTING:
	                updateAssignedMessageQueue(topic, mqAll);
	                updatePullTask(topic, mqAll);
	                break;
	            case CLUSTERING:
	                updateAssignedMessageQueue(topic, mqDivided);
	                updatePullTask(topic, mqDivided);
	                break;
	            default:
	                break;
	        }
	    }
	
	    public synchronized void shutdown() {
	        switch (this.serviceState) {
	            case CREATE_JUST:
	                break;
	            case RUNNING:
	                persistConsumerOffset();
	                this.mQClientFactory.unregisterConsumer(this.defaultLitePullConsumer.getConsumerGroup());
	                scheduledThreadPoolExecutor.shutdown();
	                scheduledExecutorService.shutdown();
	                this.mQClientFactory.shutdown();
	                this.serviceState = ServiceState.SHUTDOWN_ALREADY;
	                log.info("the consumer [{}] shutdown OK", this.defaultLitePullConsumer.getConsumerGroup());
	                break;
	            default:
	                break;
	        }
	    }
	
	    public synchronized boolean isRunning() {
	        return this.serviceState == ServiceState.RUNNING;
	    }
	
	    public synchronized void start() throws MQClientException {
	        switch (this.serviceState) {
	            case CREATE_JUST:
	                this.serviceState = ServiceState.START_FAILED;
	
	                this.checkConfig();
	
	                if (this.defaultLitePullConsumer.getMessageModel() == MessageModel.CLUSTERING) {
	                    this.defaultLitePullConsumer.changeInstanceNameToPID();
	                }
	
	                initMQClientFactory();
	
	                initRebalanceImpl();
	
	                initPullAPIWrapper();
	
	                initOffsetStore();
	
	                mQClientFactory.start();
	
	                startScheduleTask();
	
	                this.serviceState = ServiceState.RUNNING;
	
	                log.info("the consumer [{}] start OK", this.defaultLitePullConsumer.getConsumerGroup());
	
	                operateAfterRunning();
	
	                break;
	            case RUNNING:
	            case START_FAILED:
	            case SHUTDOWN_ALREADY:
	                throw new MQClientException("The PullConsumer service state not OK, maybe started once, "
	                    + this.serviceState
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),
	                    null);
	            default:
	                break;
	        }
	    }
	
	    private void initMQClientFactory() throws MQClientException {
	        this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultLitePullConsumer, this.rpcHook);
	        boolean registerOK = mQClientFactory.registerConsumer(this.defaultLitePullConsumer.getConsumerGroup(), this);
	        if (!registerOK) {
	            this.serviceState = ServiceState.CREATE_JUST;
	
	            throw new MQClientException("The consumer group[" + this.defaultLitePullConsumer.getConsumerGroup()
	                + "] has been created before, specify another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),
	                null);
	        }
	    }
	
	    private void initRebalanceImpl() {
	        this.rebalanceImpl.setConsumerGroup(this.defaultLitePullConsumer.getConsumerGroup());
	        this.rebalanceImpl.setMessageModel(this.defaultLitePullConsumer.getMessageModel());
	        this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultLitePullConsumer.getAllocateMessageQueueStrategy());
	        this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
	    }
	
	    private void initPullAPIWrapper() {
	        this.pullAPIWrapper = new PullAPIWrapper(
	            mQClientFactory,
	            this.defaultLitePullConsumer.getConsumerGroup(), isUnitMode());
	        this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);
	    }
	
	    private void initOffsetStore() throws MQClientException {
	        if (this.defaultLitePullConsumer.getOffsetStore() != null) {
	            this.offsetStore = this.defaultLitePullConsumer.getOffsetStore();
	        } else {
	            switch (this.defaultLitePullConsumer.getMessageModel()) {
	                case BROADCASTING:
	                    this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultLitePullConsumer.getConsumerGroup());
	                    break;
	                case CLUSTERING:
	                    this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultLitePullConsumer.getConsumerGroup());
	                    break;
	                default:
	                    break;
	            }
	            this.defaultLitePullConsumer.setOffsetStore(this.offsetStore);
	        }
	        this.offsetStore.load();
	    }
	
	    private void startScheduleTask() {
	        scheduledExecutorService.scheduleAtFixedRate(
	            new Runnable() {
	                @Override
	                public void run() {
	                    try {
	                        fetchTopicMessageQueuesAndCompare();
	                    } catch (Exception e) {
	                        log.error("ScheduledTask fetchMessageQueuesAndCompare exception", e);
	                    }
	                }
	            }, 1000 * 10, this.getDefaultLitePullConsumer().getTopicMetadataCheckIntervalMillis(), TimeUnit.MILLISECONDS);
	    }
	
	    private void operateAfterRunning() throws MQClientException {
	        // If subscribe function invoke before start function, then update topic subscribe info after initialization.
	        if (subscriptionType == SubscriptionType.SUBSCRIBE) {
	            updateTopicSubscribeInfoWhenSubscriptionChanged();
	        }
	        // If assign function invoke before start function, then update pull task after initialization.
	        if (subscriptionType == SubscriptionType.ASSIGN) {
	            updateAssignPullTask(assignedMessageQueue.getAssignedMessageQueues());
	        }
	
	        for (String topic : topicMessageQueueChangeListenerMap.keySet()) {
	            Set<MessageQueue> messageQueues = fetchMessageQueues(topic);
	            messageQueuesForTopic.put(topic, messageQueues);
	        }
	        this.mQClientFactory.checkClientInBroker();
	    }
	
	    private void checkConfig() throws MQClientException {
	        // Check consumerGroup
	        Validators.checkGroup(this.defaultLitePullConsumer.getConsumerGroup());
	
	        // Check consumerGroup name is not equal default consumer group name.
	        if (this.defaultLitePullConsumer.getConsumerGroup().equals(MixAll.DEFAULT_CONSUMER_GROUP)) {
	            throw new MQClientException(
	                "consumerGroup can not equal "
	                    + MixAll.DEFAULT_CONSUMER_GROUP
	                    + ", please specify another one."
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // Check messageModel is not null.
	        if (null == this.defaultLitePullConsumer.getMessageModel()) {
	            throw new MQClientException(
	                "messageModel is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // Check allocateMessageQueueStrategy is not null
	        if (null == this.defaultLitePullConsumer.getAllocateMessageQueueStrategy()) {
	            throw new MQClientException(
	                "allocateMessageQueueStrategy is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        if (this.defaultLitePullConsumer.getConsumerTimeoutMillisWhenSuspend() < this.defaultLitePullConsumer.getBrokerSuspendMaxTimeMillis()) {
	            throw new MQClientException(
	                "Long polling mode, the consumer consumerTimeoutMillisWhenSuspend must greater than brokerSuspendMaxTimeMillis"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	    }
	
	    public PullAPIWrapper getPullAPIWrapper() {
	        return pullAPIWrapper;
	    }
	
	    private void startPullTask(Collection<MessageQueue> mqSet) {
	        for (MessageQueue messageQueue : mqSet) {
	            if (!this.taskTable.containsKey(messageQueue)) {
	                PullTaskImpl pullTask = new PullTaskImpl(messageQueue);
	                this.taskTable.put(messageQueue, pullTask);
	                this.scheduledThreadPoolExecutor.schedule(pullTask, 0, TimeUnit.MILLISECONDS);
	            }
	        }
	    }
	
	    private void updateAssignPullTask(Collection<MessageQueue> mqNewSet) {
	        Iterator<Map.Entry<MessageQueue, PullTaskImpl>> it = this.taskTable.entrySet().iterator();
	        while (it.hasNext()) {
	            Map.Entry<MessageQueue, PullTaskImpl> next = it.next();
	            if (!mqNewSet.contains(next.getKey())) {
	                next.getValue().setCancelled(true);
	                it.remove();
	            }
	        }
	
	        startPullTask(mqNewSet);
	    }
	
	    private void updateTopicSubscribeInfoWhenSubscriptionChanged() {
	        if (doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged) {
	            return;
	        }
	        Map<String, SubscriptionData> subTable = rebalanceImpl.getSubscriptionInner();
	        if (subTable != null) {
	            for (final Map.Entry<String, SubscriptionData> entry : subTable.entrySet()) {
	                final String topic = entry.getKey();
	                this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
	            }
	        }
	    }
	
	    /**
	     * subscribe data by customizing messageQueueListener
	     *
	     * @param topic
	     * @param subExpression
	     * @param messageQueueListener
	     * @throws MQClientException
	     */
	    public synchronized void subscribe(String topic, String subExpression,
	        MessageQueueListener messageQueueListener) throws MQClientException {
	        try {
	            if (StringUtils.isEmpty(topic)) {
	                throw new IllegalArgumentException("Topic can not be null or empty.");
	            }
	            setSubscriptionType(SubscriptionType.SUBSCRIBE);
	            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            this.defaultLitePullConsumer.setMessageQueueListener(new MessageQueueListener() {
	                @Override
	                public void messageQueueChanged(String topic, Set<MessageQueue> mqAll, Set<MessageQueue> mqDivided) {
	                    // First, update the assign queue
	                    updateAssignQueueAndStartPullTask(topic, mqAll, mqDivided);
	                    // run custom listener
	                    messageQueueListener.messageQueueChanged(topic, mqAll, mqDivided);
	                }
	            });
	            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
	            if (serviceState == ServiceState.RUNNING) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	                updateTopicSubscribeInfoWhenSubscriptionChanged();
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscribe exception", e);
	        }
	    }
	
	    public synchronized void subscribe(String topic, String subExpression) throws MQClientException {
	        try {
	            if (topic == null || "".equals(topic)) {
	                throw new IllegalArgumentException("Topic can not be null or empty.");
	            }
	            setSubscriptionType(SubscriptionType.SUBSCRIBE);
	            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            this.defaultLitePullConsumer.setMessageQueueListener(new MessageQueueListenerImpl());
	            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
	            if (serviceState == ServiceState.RUNNING) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	                updateTopicSubscribeInfoWhenSubscriptionChanged();
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscribe exception", e);
	        }
	    }
	
	    public synchronized void subscribe(String topic, MessageSelector messageSelector) throws MQClientException {
	        try {
	            if (topic == null || "".equals(topic)) {
	                throw new IllegalArgumentException("Topic can not be null or empty.");
	            }
	            setSubscriptionType(SubscriptionType.SUBSCRIBE);
	            if (messageSelector == null) {
	                subscribe(topic, SubscriptionData.SUB_ALL);
	                return;
	            }
	            SubscriptionData subscriptionData = FilterAPI.build(topic,
	                messageSelector.getExpression(), messageSelector.getExpressionType());
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            this.defaultLitePullConsumer.setMessageQueueListener(new MessageQueueListenerImpl());
	            assignedMessageQueue.setRebalanceImpl(this.rebalanceImpl);
	            if (serviceState == ServiceState.RUNNING) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	                updateTopicSubscribeInfoWhenSubscriptionChanged();
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscribe exception", e);
	        }
	    }
	
	    public synchronized void unsubscribe(final String topic) {
	        this.rebalanceImpl.getSubscriptionInner().remove(topic);
	        removePullTaskCallback(topic);
	        assignedMessageQueue.removeAssignedMessageQueue(topic);
	    }
	
	    public synchronized void assign(Collection<MessageQueue> messageQueues) {
	        if (messageQueues == null || messageQueues.isEmpty()) {
	            throw new IllegalArgumentException("Message queues can not be null or empty.");
	        }
	        setSubscriptionType(SubscriptionType.ASSIGN);
	        assignedMessageQueue.updateAssignedMessageQueue(messageQueues);
	        if (serviceState == ServiceState.RUNNING) {
	            updateAssignPullTask(messageQueues);
	        }
	    }
	
	    public synchronized void setSubExpressionForAssign(final String topic, final String subExpression) {
	        if (StringUtils.isBlank(subExpression)) {
	            throw new IllegalArgumentException("subExpression can not be null or empty.");
	        }
	        if (serviceState != ServiceState.CREATE_JUST) {
	            throw new IllegalStateException("setAssignTag only can be called before start.");
	        }
	        setSubscriptionType(SubscriptionType.ASSIGN);
	        topicToSubExpression.put(topic, subExpression);
	    }
	
	    private void maybeAutoCommit() {
	        long now = System.currentTimeMillis();
	        if (now >= nextAutoCommitDeadline) {
	            commitAll();
	            nextAutoCommitDeadline = now + defaultLitePullConsumer.getAutoCommitIntervalMillis();
	        }
	    }
	
	    public synchronized List<MessageExt> poll(long timeout) {
	        try {
	            checkServiceState();
	            if (timeout < 0) {
	                throw new IllegalArgumentException("Timeout must not be negative");
	            }
	
	            if (defaultLitePullConsumer.isAutoCommit()) {
	                maybeAutoCommit();
	            }
	            long endTime = System.currentTimeMillis() + timeout;
	
	            ConsumeRequest consumeRequest = consumeRequestCache.poll(endTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
	
	            if (endTime - System.currentTimeMillis() > 0) {
	                while (consumeRequest != null && consumeRequest.getProcessQueue().isDropped()) {
	                    consumeRequest = consumeRequestCache.poll(endTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
	                    if (endTime - System.currentTimeMillis() <= 0) {
	                        break;
	                    }
	                }
	            }
	
	            if (consumeRequest != null && !consumeRequest.getProcessQueue().isDropped()) {
	                List<MessageExt> messages = consumeRequest.getMessageExts();
	                long offset = consumeRequest.getProcessQueue().removeMessage(messages);
	                assignedMessageQueue.updateConsumeOffset(consumeRequest.getMessageQueue(), offset);
	                //If namespace not null , reset Topic without namespace.
	                this.resetTopic(messages);
	                if (!this.consumeMessageHookList.isEmpty()) {
	                    ConsumeMessageContext consumeMessageContext = new ConsumeMessageContext();
	                    consumeMessageContext.setNamespace(defaultLitePullConsumer.getNamespace());
	                    consumeMessageContext.setConsumerGroup(this.groupName());
	                    consumeMessageContext.setMq(consumeRequest.getMessageQueue());
	                    consumeMessageContext.setMsgList(messages);
	                    consumeMessageContext.setSuccess(false);
	                    this.executeHookBefore(consumeMessageContext);
	                    consumeMessageContext.setStatus(ConsumeConcurrentlyStatus.CONSUME_SUCCESS.toString());
	                    consumeMessageContext.setSuccess(true);
	                    consumeMessageContext.setAccessChannel(defaultLitePullConsumer.getAccessChannel());
	                    this.executeHookAfter(consumeMessageContext);
	                }
	                consumeRequest.getProcessQueue().setLastConsumeTimestamp(System.currentTimeMillis());
	                return messages;
	            }
	        } catch (InterruptedException ignore) {
	
	        }
	
	        return Collections.emptyList();
	    }
	
	    public void pause(Collection<MessageQueue> messageQueues) {
	        assignedMessageQueue.pause(messageQueues);
	    }
	
	    public void resume(Collection<MessageQueue> messageQueues) {
	        assignedMessageQueue.resume(messageQueues);
	    }
	
	    public synchronized void seek(MessageQueue messageQueue, long offset) throws MQClientException {
	        if (!assignedMessageQueue.getAssignedMessageQueues().contains(messageQueue)) {
	            if (subscriptionType == SubscriptionType.SUBSCRIBE) {
	                throw new MQClientException("The message queue is not in assigned list, may be rebalancing, message queue: " + messageQueue, null);
	            } else {
	                throw new MQClientException("The message queue is not in assigned list, message queue: " + messageQueue, null);
	            }
	        }
	        long minOffset = minOffset(messageQueue);
	        long maxOffset = maxOffset(messageQueue);
	        if (offset < minOffset || offset > maxOffset) {
	            throw new MQClientException("Seek offset illegal, seek offset = " + offset + ", min offset = " + minOffset + ", max offset = " + maxOffset, null);
	        }
	        final Object objLock = messageQueueLock.fetchLockObject(messageQueue);
	        synchronized (objLock) {
	            clearMessageQueueInCache(messageQueue);
	
	            PullTaskImpl oldPullTaskImpl = this.taskTable.get(messageQueue);
	            if (oldPullTaskImpl != null) {
	                oldPullTaskImpl.tryInterrupt();
	                this.taskTable.remove(messageQueue);
	            }
	            assignedMessageQueue.setSeekOffset(messageQueue, offset);
	            if (!this.taskTable.containsKey(messageQueue)) {
	                PullTaskImpl pullTask = new PullTaskImpl(messageQueue);
	                this.taskTable.put(messageQueue, pullTask);
	                this.scheduledThreadPoolExecutor.schedule(pullTask, 0, TimeUnit.MILLISECONDS);
	            }
	        }
	    }
	
	    public void seekToBegin(MessageQueue messageQueue) throws MQClientException {
	        long begin = minOffset(messageQueue);
	        this.seek(messageQueue, begin);
	    }
	
	    public void seekToEnd(MessageQueue messageQueue) throws MQClientException {
	        long end = maxOffset(messageQueue);
	        this.seek(messageQueue, end);
	    }
	
	    private long maxOffset(MessageQueue messageQueue) throws MQClientException {
	        checkServiceState();
	        return this.mQClientFactory.getMQAdminImpl().maxOffset(messageQueue);
	    }
	
	    private long minOffset(MessageQueue messageQueue) throws MQClientException {
	        checkServiceState();
	        return this.mQClientFactory.getMQAdminImpl().minOffset(messageQueue);
	    }
	
	    private void removePullTaskCallback(final String topic) {
	        removePullTask(topic);
	    }
	
	    private void removePullTask(final String topic) {
	        Iterator<Map.Entry<MessageQueue, PullTaskImpl>> it = this.taskTable.entrySet().iterator();
	        while (it.hasNext()) {
	            Map.Entry<MessageQueue, PullTaskImpl> next = it.next();
	            if (next.getKey().getTopic().equals(topic)) {
	                next.getValue().setCancelled(true);
	                it.remove();
	            }
	        }
	    }
	
	    public synchronized void commitAll() {
	        for (MessageQueue messageQueue : assignedMessageQueue.getAssignedMessageQueues()) {
	            try {
	                commit(messageQueue);
	            } catch (Exception e) {
	                log.error("An error occurred when update consume offset Automatically.");
	            }
	        }
	    }
	
	    /**
	     * Specify offset commit
	     *
	     * @param messageQueues
	     * @param persist
	     */
	    public synchronized void commit(final Map<MessageQueue, Long> messageQueues, boolean persist) {
	        if (messageQueues == null || messageQueues.size() == 0) {
	            log.warn("MessageQueues is empty, Ignore this commit ");
	            return;
	        }
	        for (Map.Entry<MessageQueue, Long> messageQueueEntry : messageQueues.entrySet()) {
	            MessageQueue messageQueue = messageQueueEntry.getKey();
	            long offset = messageQueueEntry.getValue();
	            if (offset != -1) {
	                ProcessQueue processQueue = assignedMessageQueue.getProcessQueue(messageQueue);
	                if (processQueue != null && !processQueue.isDropped()) {
	                    updateConsumeOffset(messageQueue, offset);
	                }
	            } else {
	                log.error("consumerOffset is -1 in messageQueue [" + messageQueue + "].");
	            }
	        }
	
	        if (persist) {
	            this.offsetStore.persistAll(messageQueues.keySet());
	        }
	    }
	
	    /**
	     * Get the queue assigned in subscribe mode
	     *
	     * @return
	     */
	    public synchronized Set<MessageQueue> assignment() {
	        return assignedMessageQueue.getAssignedMessageQueues();
	    }
	
	    public synchronized void commit(final Set<MessageQueue> messageQueues, boolean persist) {
	        if (messageQueues == null || messageQueues.size() == 0) {
	            return;
	        }
	
	        for (MessageQueue messageQueue : messageQueues) {
	            commit(messageQueue);
	        }
	
	        if (persist) {
	            this.offsetStore.persistAll(messageQueues);
	        }
	    }
	
	    private synchronized void commit(MessageQueue messageQueue) {
	        long consumerOffset = assignedMessageQueue.getConsumerOffset(messageQueue);
	
	        if (consumerOffset != -1) {
	            ProcessQueue processQueue = assignedMessageQueue.getProcessQueue(messageQueue);
	            if (processQueue != null && !processQueue.isDropped()) {
	                updateConsumeOffset(messageQueue, consumerOffset);
	            }
	        } else {
	            log.error("consumerOffset is -1 in messageQueue [" + messageQueue + "].");
	        }
	    }
	
	    private void updatePullOffset(MessageQueue messageQueue, long nextPullOffset, ProcessQueue processQueue) {
	        if (assignedMessageQueue.getSeekOffset(messageQueue) == -1) {
	            assignedMessageQueue.updatePullOffset(messageQueue, nextPullOffset, processQueue);
	        }
	    }
	
	    private void submitConsumeRequest(ConsumeRequest consumeRequest) {
	        try {
	            consumeRequestCache.put(consumeRequest);
	        } catch (InterruptedException e) {
	            log.error("Submit consumeRequest error", e);
	        }
	    }
	
	    private long fetchConsumeOffset(MessageQueue messageQueue) throws MQClientException {
	        checkServiceState();
	        long offset = this.rebalanceImpl.computePullFromWhereWithException(messageQueue);
	        return offset;
	    }
	
	    public long committed(MessageQueue messageQueue) throws MQClientException {
	        checkServiceState();
	        long offset = this.offsetStore.readOffset(messageQueue, ReadOffsetType.MEMORY_FIRST_THEN_STORE);
	        if (offset == -2) {
	            throw new MQClientException("Fetch consume offset from broker exception", null);
	        }
	        return offset;
	    }
	
	    private void clearMessageQueueInCache(MessageQueue messageQueue) {
	        ProcessQueue processQueue = assignedMessageQueue.getProcessQueue(messageQueue);
	        if (processQueue != null) {
	            processQueue.clear();
	        }
	        Iterator<ConsumeRequest> iter = consumeRequestCache.iterator();
	        while (iter.hasNext()) {
	            if (iter.next().getMessageQueue().equals(messageQueue)) {
	                iter.remove();
	            }
	        }
	    }
	
	    private long nextPullOffset(MessageQueue messageQueue) throws MQClientException {
	        long offset = -1;
	        long seekOffset = assignedMessageQueue.getSeekOffset(messageQueue);
	        if (seekOffset != -1) {
	            offset = seekOffset;
	            assignedMessageQueue.updateConsumeOffset(messageQueue, offset);
	            assignedMessageQueue.setSeekOffset(messageQueue, -1);
	        } else {
	            offset = assignedMessageQueue.getPullOffset(messageQueue);
	            if (offset == -1) {
	                offset = fetchConsumeOffset(messageQueue);
	            }
	        }
	        return offset;
	    }
	
	    public long searchOffset(MessageQueue mq, long timestamp) throws MQClientException {
	        checkServiceState();
	        return this.mQClientFactory.getMQAdminImpl().searchOffset(mq, timestamp);
	    }
	
	    public class PullTaskImpl implements Runnable {
	        private final MessageQueue messageQueue;
	        private volatile boolean cancelled = false;
	        private Thread currentThread;
	
	        public PullTaskImpl(final MessageQueue messageQueue) {
	            this.messageQueue = messageQueue;
	        }
	
	        public void tryInterrupt() {
	            setCancelled(true);
	            if (currentThread == null) {
	                return;
	            }
	            if (!currentThread.isInterrupted()) {
	                currentThread.interrupt();
	            }
	        }
	
	        @Override
	        public void run() {
	
	            if (!this.isCancelled()) {
	
	                this.currentThread = Thread.currentThread();
	
	                if (assignedMessageQueue.isPaused(messageQueue)) {
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_PAUSE, TimeUnit.MILLISECONDS);
	                    log.debug("Message Queue: {} has been paused!", messageQueue);
	                    return;
	                }
	
	                ProcessQueue processQueue = assignedMessageQueue.getProcessQueue(messageQueue);
	
	                if (null == processQueue || processQueue.isDropped()) {
	                    log.info("The message queue not be able to poll, because it's dropped. group={}, messageQueue={}", defaultLitePullConsumer.getConsumerGroup(), this.messageQueue);
	                    return;
	                }
	
	                processQueue.setLastPullTimestamp(System.currentTimeMillis());
	
	                if ((long) consumeRequestCache.size() * defaultLitePullConsumer.getPullBatchSize() > defaultLitePullConsumer.getPullThresholdForAll()) {
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
	                    if ((consumeRequestFlowControlTimes++ % 1000) == 0) {
	                        log.warn("The consume request count exceeds threshold {}, so do flow control, consume request count={}, flowControlTimes={}",
	                                (int)Math.ceil((double)defaultLitePullConsumer.getPullThresholdForAll() / defaultLitePullConsumer.getPullBatchSize()),
	                                consumeRequestCache.size(), consumeRequestFlowControlTimes);
	                    }
	                    return;
	                }
	
	                long cachedMessageCount = processQueue.getMsgCount().get();
	                long cachedMessageSizeInMiB = processQueue.getMsgSize().get() / (1024 * 1024);
	
	                if (cachedMessageCount > defaultLitePullConsumer.getPullThresholdForQueue()) {
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
	                    if ((queueFlowControlTimes++ % 1000) == 0) {
	                        log.warn(
	                            "The cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, flowControlTimes={}",
	                            defaultLitePullConsumer.getPullThresholdForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, queueFlowControlTimes);
	                    }
	                    return;
	                }
	
	                if (cachedMessageSizeInMiB > defaultLitePullConsumer.getPullThresholdSizeForQueue()) {
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
	                    if ((queueFlowControlTimes++ % 1000) == 0) {
	                        log.warn(
	                            "The cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, flowControlTimes={}",
	                            defaultLitePullConsumer.getPullThresholdSizeForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, queueFlowControlTimes);
	                    }
	                    return;
	                }
	
	                if (processQueue.getMaxSpan() > defaultLitePullConsumer.getConsumeMaxSpan()) {
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL, TimeUnit.MILLISECONDS);
	                    if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {
	                        log.warn(
	                            "The queue's messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, flowControlTimes={}",
	                            processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(), queueMaxSpanFlowControlTimes);
	                    }
	                    return;
	                }
	
	                long offset = 0L;
	                try {
	                    offset = nextPullOffset(messageQueue);
	                } catch (Exception e) {
	                    log.error("Failed to get next pull offset", e);
	                    scheduledThreadPoolExecutor.schedule(this, PULL_TIME_DELAY_MILLS_ON_EXCEPTION, TimeUnit.MILLISECONDS);
	                    return;
	                }
	
	                if (this.isCancelled() || processQueue.isDropped()) {
	                    return;
	                }
	                long pullDelayTimeMills = 0;
	                try {
	                    SubscriptionData subscriptionData;
	                    String topic = this.messageQueue.getTopic();
	                    if (subscriptionType == SubscriptionType.SUBSCRIBE) {
	                        subscriptionData = rebalanceImpl.getSubscriptionInner().get(topic);
	                    } else {
	                        String subExpression4Assign = topicToSubExpression.get(topic);
	                        subExpression4Assign = subExpression4Assign == null ? SubscriptionData.SUB_ALL : subExpression4Assign;
	                        subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression4Assign);
	                    }
	
	                    PullResult pullResult = pull(messageQueue, subscriptionData, offset, defaultLitePullConsumer.getPullBatchSize());
	                    if (this.isCancelled() || processQueue.isDropped()) {
	                        return;
	                    }
	                    switch (pullResult.getPullStatus()) {
	                        case FOUND:
	                            final Object objLock = messageQueueLock.fetchLockObject(messageQueue);
	                            synchronized (objLock) {
	                                if (pullResult.getMsgFoundList() != null && !pullResult.getMsgFoundList().isEmpty() && assignedMessageQueue.getSeekOffset(messageQueue) == -1) {
	                                    processQueue.putMessage(pullResult.getMsgFoundList());
	                                    submitConsumeRequest(new ConsumeRequest(pullResult.getMsgFoundList(), messageQueue, processQueue));
	                                }
	                            }
	                            break;
	                        case OFFSET_ILLEGAL:
	                            log.warn("The pull request offset illegal, {}", pullResult.toString());
	                            break;
	                        default:
	                            break;
	                    }
	                    updatePullOffset(messageQueue, pullResult.getNextBeginOffset(), processQueue);
	                } catch (InterruptedException interruptedException) {
	                    log.warn("Polling thread was interrupted.", interruptedException);
	                } catch (Throwable e) {
	                    if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {
	                        pullDelayTimeMills = PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL;
	                    } else {
	                        pullDelayTimeMills = pullTimeDelayMillsWhenException;
	                    }
	                    log.error("An error occurred in pull message process.", e);
	                }
	
	                if (!this.isCancelled()) {
	                    scheduledThreadPoolExecutor.schedule(this, pullDelayTimeMills, TimeUnit.MILLISECONDS);
	                } else {
	                    log.warn("The Pull Task is cancelled after doPullTask, {}", messageQueue);
	                }
	            }
	        }
	
	        public boolean isCancelled() {
	            return cancelled;
	        }
	
	        public void setCancelled(boolean cancelled) {
	            this.cancelled = cancelled;
	        }
	
	        public MessageQueue getMessageQueue() {
	            return messageQueue;
	        }
	    }
	
	    private PullResult pull(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums)
	        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
	        return pull(mq, subscriptionData, offset, maxNums, this.defaultLitePullConsumer.getConsumerPullTimeoutMillis());
	    }
	
	    private PullResult pull(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums, long timeout)
	        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
	        return this.pullSyncImpl(mq, subscriptionData, offset, maxNums, true, timeout);
	    }
	
	    private PullResult pullSyncImpl(MessageQueue mq, SubscriptionData subscriptionData, long offset, int maxNums,
	        boolean block,
	        long timeout)
	        throws MQClientException, RemotingException, MQBrokerException, InterruptedException {
	
	        if (null == mq) {
	            throw new MQClientException("mq is null", null);
	        }
	
	        if (offset < 0) {
	            throw new MQClientException("offset < 0", null);
	        }
	
	        if (maxNums <= 0) {
	            throw new MQClientException("maxNums <= 0", null);
	        }
	
	        int sysFlag = PullSysFlag.buildSysFlag(false, block, true, false, true);
	
	        long timeoutMillis = block ? this.defaultLitePullConsumer.getConsumerTimeoutMillisWhenSuspend() : timeout;
	
	        boolean isTagType = ExpressionType.isTagType(subscriptionData.getExpressionType());
	        PullResult pullResult = this.pullAPIWrapper.pullKernelImpl(
	            mq,
	            subscriptionData.getSubString(),
	            subscriptionData.getExpressionType(),
	            isTagType ? 0L : subscriptionData.getSubVersion(),
	            offset,
	            maxNums,
	            sysFlag,
	            0,
	            this.defaultLitePullConsumer.getBrokerSuspendMaxTimeMillis(),
	            timeoutMillis,
	            CommunicationMode.SYNC,
	            null
	        );
	        this.pullAPIWrapper.processPullResult(mq, pullResult, subscriptionData);
	        return pullResult;
	    }
	
	    private void resetTopic(List<MessageExt> msgList) {
	        if (null == msgList || msgList.size() == 0) {
	            return;
	        }
	
	        //If namespace not null , reset Topic without namespace.
	        for (MessageExt messageExt : msgList) {
	            if (null != this.defaultLitePullConsumer.getNamespace()) {
	                messageExt.setTopic(NamespaceUtil.withoutNamespace(messageExt.getTopic(), this.defaultLitePullConsumer.getNamespace()));
	            }
	        }
	
	    }
	
	    public void updateConsumeOffset(MessageQueue mq, long offset) {
	        checkServiceState();
	        this.offsetStore.updateOffset(mq, offset, false);
	    }
	
	    @Override
	    public String groupName() {
	        return this.defaultLitePullConsumer.getConsumerGroup();
	    }
	
	    @Override
	    public MessageModel messageModel() {
	        return this.defaultLitePullConsumer.getMessageModel();
	    }
	
	    @Override
	    public ConsumeType consumeType() {
	        return ConsumeType.CONSUME_ACTIVELY;
	    }
	
	    @Override
	    public ConsumeFromWhere consumeFromWhere() {
	        return ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;
	    }
	
	    @Override
	    public Set<SubscriptionData> subscriptions() {
	        Set<SubscriptionData> subSet = new HashSet<>();
	
	        subSet.addAll(this.rebalanceImpl.getSubscriptionInner().values());
	
	        return subSet;
	    }
	
	    @Override
	    public void doRebalance() {
	        if (this.rebalanceImpl != null) {
	            this.rebalanceImpl.doRebalance(false);
	        }
	    }
	
	    @Override
	    public boolean tryRebalance() {
	        if (this.rebalanceImpl != null) {
	            return this.rebalanceImpl.doRebalance(false);
	        }
	        return false;
	    }
	
	    @Override
	    public void persistConsumerOffset() {
	        try {
	            checkServiceState();
	            Set<MessageQueue> mqs = new HashSet<>();
	            if (this.subscriptionType == SubscriptionType.SUBSCRIBE) {
	                Set<MessageQueue> allocateMq = this.rebalanceImpl.getProcessQueueTable().keySet();
	                mqs.addAll(allocateMq);
	            } else if (this.subscriptionType == SubscriptionType.ASSIGN) {
	                Set<MessageQueue> assignedMessageQueue = this.assignedMessageQueue.getAssignedMessageQueues();
	                mqs.addAll(assignedMessageQueue);
	            }
	            this.offsetStore.persistAll(mqs);
	        } catch (Exception e) {
	            log.error("Persist consumer offset error for group: {} ", this.defaultLitePullConsumer.getConsumerGroup(), e);
	        }
	    }
	
	    @Override
	    public void updateTopicSubscribeInfo(String topic, Set<MessageQueue> info) {
	        Map<String, SubscriptionData> subTable = this.rebalanceImpl.getSubscriptionInner();
	        if (subTable != null) {
	            if (subTable.containsKey(topic)) {
	                this.rebalanceImpl.getTopicSubscribeInfoTable().put(topic, info);
	            }
	        }
	    }
	
	    @Override
	    public boolean isSubscribeTopicNeedUpdate(String topic) {
	        Map<String, SubscriptionData> subTable = this.rebalanceImpl.getSubscriptionInner();
	        if (subTable != null) {
	            if (subTable.containsKey(topic)) {
	                return !this.rebalanceImpl.topicSubscribeInfoTable.containsKey(topic);
	            }
	        }
	
	        return false;
	    }
	
	    @Override
	    public boolean isUnitMode() {
	        return this.defaultLitePullConsumer.isUnitMode();
	    }
	
	    @Override
	    public ConsumerRunningInfo consumerRunningInfo() {
	        ConsumerRunningInfo info = new ConsumerRunningInfo();
	
	        Properties prop = MixAll.object2Properties(this.defaultLitePullConsumer);
	        prop.put(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP, String.valueOf(this.consumerStartTimestamp));
	        info.setProperties(prop);
	
	        info.getSubscriptionSet().addAll(this.subscriptions());
	
	        for (MessageQueue mq : this.assignedMessageQueue.getAssignedMessageQueues()) {
	            ProcessQueue pq = this.assignedMessageQueue.getProcessQueue(mq);
	            ProcessQueueInfo pqInfo = new ProcessQueueInfo();
	            pqInfo.setCommitOffset(this.offsetStore.readOffset(mq, ReadOffsetType.MEMORY_FIRST_THEN_STORE));
	            pq.fillProcessQueueInfo(pqInfo);
	            info.getMqTable().put(mq, pqInfo);
	        }
	
	        return info;
	    }
	
	    private void updateConsumeOffsetToBroker(MessageQueue mq, long offset, boolean isOneway) throws RemotingException,
	        MQBrokerException, InterruptedException, MQClientException {
	        this.offsetStore.updateConsumeOffsetToBroker(mq, offset, isOneway);
	    }
	
	    public OffsetStore getOffsetStore() {
	        return offsetStore;
	    }
	
	    public DefaultLitePullConsumer getDefaultLitePullConsumer() {
	        return defaultLitePullConsumer;
	    }
	
	    public Set<MessageQueue> fetchMessageQueues(String topic) throws MQClientException {
	        checkServiceState();
	        Set<MessageQueue> result = this.mQClientFactory.getMQAdminImpl().fetchSubscribeMessageQueues(topic);
	        return parseMessageQueues(result);
	    }
	
	    private synchronized void fetchTopicMessageQueuesAndCompare() throws MQClientException {
	        for (Map.Entry<String, TopicMessageQueueChangeListener> entry : topicMessageQueueChangeListenerMap.entrySet()) {
	            String topic = entry.getKey();
	            TopicMessageQueueChangeListener topicMessageQueueChangeListener = entry.getValue();
	            Set<MessageQueue> oldMessageQueues = messageQueuesForTopic.get(topic);
	            Set<MessageQueue> newMessageQueues = fetchMessageQueues(topic);
	            boolean isChanged = !isSetEqual(newMessageQueues, oldMessageQueues);
	            if (isChanged) {
	                messageQueuesForTopic.put(topic, newMessageQueues);
	                if (topicMessageQueueChangeListener != null) {
	                    topicMessageQueueChangeListener.onChanged(topic, newMessageQueues);
	                }
	            }
	        }
	    }
	
	    private boolean isSetEqual(Set<MessageQueue> set1, Set<MessageQueue> set2) {
	        if (set1 == null && set2 == null) {
	            return true;
	        }
	
	        if (set1 == null || set2 == null || set1.size() != set2.size()) {
	            return false;
	        }
	
	        for (MessageQueue messageQueue : set2) {
	            if (!set1.contains(messageQueue)) {
	                return false;
	            }
	        }
	        return true;
	    }
	
	    public AssignedMessageQueue getAssignedMessageQueue() {
	        return assignedMessageQueue;
	    }
	
	    public synchronized void registerTopicMessageQueueChangeListener(String topic,
	        TopicMessageQueueChangeListener listener) throws MQClientException {
	        if (topic == null || listener == null) {
	            throw new MQClientException("Topic or listener is null", null);
	        }
	        if (topicMessageQueueChangeListenerMap.containsKey(topic)) {
	            log.warn("Topic {} had been registered, new listener will overwrite the old one", topic);
	        }
	        topicMessageQueueChangeListenerMap.put(topic, listener);
	        if (this.serviceState == ServiceState.RUNNING) {
	            Set<MessageQueue> messageQueues = fetchMessageQueues(topic);
	            messageQueuesForTopic.put(topic, messageQueues);
	        }
	    }
	
	    private Set<MessageQueue> parseMessageQueues(Set<MessageQueue> queueSet) {
	        Set<MessageQueue> resultQueues = new HashSet<>();
	        for (MessageQueue messageQueue : queueSet) {
	            String userTopic = NamespaceUtil.withoutNamespace(messageQueue.getTopic(),
	                this.defaultLitePullConsumer.getNamespace());
	            resultQueues.add(new MessageQueue(userTopic, messageQueue.getBrokerName(), messageQueue.getQueueId()));
	        }
	        return resultQueues;
	    }
	
	    public class ConsumeRequest {
	        private final List<MessageExt> messageExts;
	        private final MessageQueue messageQueue;
	        private final ProcessQueue processQueue;
	
	        public ConsumeRequest(final List<MessageExt> messageExts, final MessageQueue messageQueue,
	            final ProcessQueue processQueue) {
	            this.messageExts = messageExts;
	            this.messageQueue = messageQueue;
	            this.processQueue = processQueue;
	        }
	
	        public List<MessageExt> getMessageExts() {
	            return messageExts;
	        }
	
	        public MessageQueue getMessageQueue() {
	            return messageQueue;
	        }
	
	        public ProcessQueue getProcessQueue() {
	            return processQueue;
	        }
	
	    }
	
	    public void setPullTimeDelayMillsWhenException(long pullTimeDelayMillsWhenException) {
	        this.pullTimeDelayMillsWhenException = pullTimeDelayMillsWhenException;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.client.impl.consumer;
	
	import java.util.ArrayList;
	import java.util.Date;
	import java.util.HashMap;
	import java.util.HashSet;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Map;
	import java.util.Map.Entry;
	import java.util.Properties;
	import java.util.Set;
	import java.util.concurrent.ConcurrentMap;
	import org.apache.commons.collections.CollectionUtils;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.rocketmq.client.QueryResult;
	import org.apache.rocketmq.client.Validators;
	import org.apache.rocketmq.client.consumer.AckCallback;
	import org.apache.rocketmq.client.consumer.AckResult;
	import org.apache.rocketmq.client.consumer.AckStatus;
	import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
	import org.apache.rocketmq.client.consumer.MessageQueueListener;
	import org.apache.rocketmq.client.consumer.MessageSelector;
	import org.apache.rocketmq.client.consumer.PopCallback;
	import org.apache.rocketmq.client.consumer.PopResult;
	import org.apache.rocketmq.client.consumer.PopStatus;
	import org.apache.rocketmq.client.consumer.PullCallback;
	import org.apache.rocketmq.client.consumer.PullResult;
	import org.apache.rocketmq.client.consumer.listener.MessageListener;
	import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
	import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
	import org.apache.rocketmq.client.consumer.store.LocalFileOffsetStore;
	import org.apache.rocketmq.client.consumer.store.OffsetStore;
	import org.apache.rocketmq.client.consumer.store.ReadOffsetType;
	import org.apache.rocketmq.client.consumer.store.RemoteBrokerOffsetStore;
	import org.apache.rocketmq.client.exception.MQBrokerException;
	import org.apache.rocketmq.client.exception.MQClientException;
	import org.apache.rocketmq.client.hook.ConsumeMessageContext;
	import org.apache.rocketmq.client.hook.ConsumeMessageHook;
	import org.apache.rocketmq.client.hook.FilterMessageContext;
	import org.apache.rocketmq.client.hook.FilterMessageHook;
	import org.apache.rocketmq.client.impl.CommunicationMode;
	import org.apache.rocketmq.client.impl.FindBrokerResult;
	import org.apache.rocketmq.client.impl.MQClientManager;
	import org.apache.rocketmq.client.impl.factory.MQClientInstance;
	import org.apache.rocketmq.client.stat.ConsumerStatsManager;
	import org.apache.rocketmq.common.KeyBuilder;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.ServiceState;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
	import org.apache.rocketmq.common.help.FAQUrl;
	import org.apache.rocketmq.common.message.Message;
	import org.apache.rocketmq.common.message.MessageAccessor;
	import org.apache.rocketmq.common.message.MessageConst;
	import org.apache.rocketmq.common.message.MessageExt;
	import org.apache.rocketmq.common.message.MessageQueue;
	import org.apache.rocketmq.common.sysflag.PullSysFlag;
	import org.apache.rocketmq.remoting.RPCHook;
	import org.apache.rocketmq.remoting.common.RemotingHelper;
	import org.apache.rocketmq.remoting.exception.RemotingException;
	import org.apache.rocketmq.remoting.protocol.NamespaceUtil;
	import org.apache.rocketmq.remoting.protocol.ResponseCode;
	import org.apache.rocketmq.remoting.protocol.body.ConsumeStatus;
	import org.apache.rocketmq.remoting.protocol.body.ConsumerRunningInfo;
	import org.apache.rocketmq.remoting.protocol.body.PopProcessQueueInfo;
	import org.apache.rocketmq.remoting.protocol.body.ProcessQueueInfo;
	import org.apache.rocketmq.remoting.protocol.body.QueueTimeSpan;
	import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
	import org.apache.rocketmq.remoting.protocol.header.AckMessageRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.ChangeInvisibleTimeRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.ExtraInfoUtil;
	import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
	import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.remoting.protocol.route.BrokerData;
	import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	
	public class DefaultMQPushConsumerImpl implements MQConsumerInner {
	    /**
	     * Delay some time when exception occur
	     */
	    private long pullTimeDelayMillsWhenException = 3000;
	    /**
	     * Flow control interval when message cache is full
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL = 50;
	    /**
	     * Flow control interval when broker return flow control
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL = 20;
	    /**
	     * Delay some time when suspend pull service
	     */
	    private static final long PULL_TIME_DELAY_MILLS_WHEN_SUSPEND = 1000;
	    private static final long BROKER_SUSPEND_MAX_TIME_MILLIS = 1000 * 15;
	    private static final long CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND = 1000 * 30;
	    private static final Logger log = LoggerFactory.getLogger(DefaultMQPushConsumerImpl.class);
	    private final DefaultMQPushConsumer defaultMQPushConsumer;
	    private final RebalanceImpl rebalanceImpl = new RebalancePushImpl(this);
	    private final ArrayList<FilterMessageHook> filterMessageHookList = new ArrayList<>();
	    private final long consumerStartTimestamp = System.currentTimeMillis();
	    private final ArrayList<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();
	    private final RPCHook rpcHook;
	    private volatile ServiceState serviceState = ServiceState.CREATE_JUST;
	    private MQClientInstance mQClientFactory;
	    private PullAPIWrapper pullAPIWrapper;
	    private volatile boolean pause = false;
	    private boolean consumeOrderly = false;
	    private MessageListener messageListenerInner;
	    private OffsetStore offsetStore;
	    private ConsumeMessageService consumeMessageService;
	    private ConsumeMessageService consumeMessagePopService;
	    private long queueFlowControlTimes = 0;
	    private long queueMaxSpanFlowControlTimes = 0;
	
	    //10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
	    private final int[] popDelayLevel = new int[] {10, 30, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 1200, 1800, 3600, 7200};
	
	    private static final int MAX_POP_INVISIBLE_TIME = 300000;
	    private static final int MIN_POP_INVISIBLE_TIME = 5000;
	    private static final int ASYNC_TIMEOUT = 3000;
	
	    // only for test purpose, will be modified by reflection in unit test.
	    @SuppressWarnings("FieldMayBeFinal")
	    private static boolean doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged = false;
	
	    public DefaultMQPushConsumerImpl(DefaultMQPushConsumer defaultMQPushConsumer, RPCHook rpcHook) {
	        this.defaultMQPushConsumer = defaultMQPushConsumer;
	        this.rpcHook = rpcHook;
	        this.pullTimeDelayMillsWhenException = defaultMQPushConsumer.getPullTimeDelayMillsWhenException();
	    }
	
	    public void registerFilterMessageHook(final FilterMessageHook hook) {
	        this.filterMessageHookList.add(hook);
	        log.info("register FilterMessageHook Hook, {}", hook.hookName());
	    }
	
	    public boolean hasHook() {
	        return !this.consumeMessageHookList.isEmpty();
	    }
	
	    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {
	        this.consumeMessageHookList.add(hook);
	        log.info("register consumeMessageHook Hook, {}", hook.hookName());
	    }
	
	    public void executeHookBefore(final ConsumeMessageContext context) {
	        if (!this.consumeMessageHookList.isEmpty()) {
	            for (ConsumeMessageHook hook : this.consumeMessageHookList) {
	                try {
	                    hook.consumeMessageBefore(context);
	                } catch (Throwable e) {
	                    log.warn("consumeMessageHook {} executeHookBefore exception", hook.hookName(), e);
	                }
	            }
	        }
	    }
	
	    public void executeHookAfter(final ConsumeMessageContext context) {
	        if (!this.consumeMessageHookList.isEmpty()) {
	            for (ConsumeMessageHook hook : this.consumeMessageHookList) {
	                try {
	                    hook.consumeMessageAfter(context);
	                } catch (Throwable e) {
	                    log.warn("consumeMessageHook {} executeHookAfter exception", hook.hookName(), e);
	                }
	            }
	        }
	    }
	
	    public void createTopic(String key, String newTopic, int queueNum) throws MQClientException {
	        createTopic(key, newTopic, queueNum, 0);
	    }
	
	    public void createTopic(String key, String newTopic, int queueNum, int topicSysFlag) throws MQClientException {
	        this.mQClientFactory.getMQAdminImpl().createTopic(key, newTopic, queueNum, topicSysFlag, null);
	    }
	
	    public Set<MessageQueue> fetchSubscribeMessageQueues(String topic) throws MQClientException {
	        Set<MessageQueue> result = this.rebalanceImpl.getTopicSubscribeInfoTable().get(topic);
	        if (null == result) {
	            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
	            result = this.rebalanceImpl.getTopicSubscribeInfoTable().get(topic);
	        }
	
	        if (null == result) {
	            throw new MQClientException("The topic[" + topic + "] not exist", null);
	        }
	
	        return parseSubscribeMessageQueues(result);
	    }
	
	    public Set<MessageQueue> parseSubscribeMessageQueues(Set<MessageQueue> messageQueueList) {
	        Set<MessageQueue> resultQueues = new HashSet<>();
	        for (MessageQueue queue : messageQueueList) {
	            String userTopic = NamespaceUtil.withoutNamespace(queue.getTopic(), this.defaultMQPushConsumer.getNamespace());
	            resultQueues.add(new MessageQueue(userTopic, queue.getBrokerName(), queue.getQueueId()));
	        }
	
	        return resultQueues;
	    }
	
	    public DefaultMQPushConsumer getDefaultMQPushConsumer() {
	        return defaultMQPushConsumer;
	    }
	
	    public long earliestMsgStoreTime(MessageQueue mq) throws MQClientException {
	        return this.mQClientFactory.getMQAdminImpl().earliestMsgStoreTime(mq);
	    }
	
	    public long maxOffset(MessageQueue mq) throws MQClientException {
	        return this.mQClientFactory.getMQAdminImpl().maxOffset(mq);
	    }
	
	    public long minOffset(MessageQueue mq) throws MQClientException {
	        return this.mQClientFactory.getMQAdminImpl().minOffset(mq);
	    }
	
	    public OffsetStore getOffsetStore() {
	        return offsetStore;
	    }
	
	    public void setOffsetStore(OffsetStore offsetStore) {
	        this.offsetStore = offsetStore;
	    }
	
	    public void pullMessage(final PullRequest pullRequest) {
	        final ProcessQueue processQueue = pullRequest.getProcessQueue();
	        if (processQueue.isDropped()) {
	            log.info("the pull request[{}] is dropped.", pullRequest.toString());
	            return;
	        }
	
	        pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());
	
	        try {
	            this.makeSureStateOK();
	        } catch (MQClientException e) {
	            log.warn("pullMessage exception, consumer state not ok", e);
	            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	            return;
	        }
	
	        if (this.isPause()) {
	            log.warn("consumer was paused, execute pull request later. instanceName={}, group={}", this.defaultMQPushConsumer.getInstanceName(), this.defaultMQPushConsumer.getConsumerGroup());
	            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);
	            return;
	        }
	
	        long cachedMessageCount = processQueue.getMsgCount().get();
	        long cachedMessageSizeInMiB = processQueue.getMsgSize().get() / (1024 * 1024);
	
	        if (cachedMessageCount > this.defaultMQPushConsumer.getPullThresholdForQueue()) {
	            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
	            if ((queueFlowControlTimes++ % 1000) == 0) {
	                log.warn(
	                    "the cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",
	                    this.defaultMQPushConsumer.getPullThresholdForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);
	            }
	            return;
	        }
	
	        if (cachedMessageSizeInMiB > this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) {
	            this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
	            if ((queueFlowControlTimes++ % 1000) == 0) {
	                log.warn(
	                    "the cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}",
	                    this.defaultMQPushConsumer.getPullThresholdSizeForQueue(), processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), cachedMessageCount, cachedMessageSizeInMiB, pullRequest, queueFlowControlTimes);
	            }
	            return;
	        }
	
	        if (!this.consumeOrderly) {
	            if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {
	                this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
	                if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {
	                    log.warn(
	                        "the queue's messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, pullRequest={}, flowControlTimes={}",
	                        processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),
	                        pullRequest, queueMaxSpanFlowControlTimes);
	                }
	                return;
	            }
	        } else {
	            if (processQueue.isLocked()) {
	                if (!pullRequest.isPreviouslyLocked()) {
	                    long offset = -1L;
	                    try {
	                        offset = this.rebalanceImpl.computePullFromWhereWithException(pullRequest.getMessageQueue());
	                        if (offset < 0) {
	                            throw new MQClientException(ResponseCode.SYSTEM_ERROR, "Unexpected offset " + offset);
	                        }
	                    } catch (Exception e) {
	                        this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	                        log.error("Failed to compute pull offset, pullResult: {}", pullRequest, e);
	                        return;
	                    }
	                    boolean brokerBusy = offset < pullRequest.getNextOffset();
	                    log.info("the first time to pull message, so fix offset from broker. pullRequest: {} NewOffset: {} brokerBusy: {}",
	                        pullRequest, offset, brokerBusy);
	                    if (brokerBusy) {
	                        log.info("[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: {} NewOffset: {}",
	                            pullRequest, offset);
	                    }
	
	                    pullRequest.setPreviouslyLocked(true);
	                    pullRequest.setNextOffset(offset);
	                }
	            } else {
	                this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	                log.info("pull message later because not locked in broker, {}", pullRequest);
	                return;
	            }
	        }
	
	        final MessageQueue messageQueue = pullRequest.getMessageQueue();
	        final SubscriptionData subscriptionData = this.rebalanceImpl.getSubscriptionInner().get(messageQueue.getTopic());
	        if (null == subscriptionData) {
	            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	            log.warn("find the consumer's subscription failed, {}", pullRequest);
	            return;
	        }
	
	        final long beginTimestamp = System.currentTimeMillis();
	
	        PullCallback pullCallback = new PullCallback() {
	            @Override
	            public void onSuccess(PullResult pullResult) {
	                if (pullResult != null) {
	                    pullResult = DefaultMQPushConsumerImpl.this.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,
	                        subscriptionData);
	
	                    switch (pullResult.getPullStatus()) {
	                        case FOUND:
	                            long prevRequestOffset = pullRequest.getNextOffset();
	                            pullRequest.setNextOffset(pullResult.getNextBeginOffset());
	                            long pullRT = System.currentTimeMillis() - beginTimestamp;
	                            DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),
	                                pullRequest.getMessageQueue().getTopic(), pullRT);
	
	                            long firstMsgOffset = Long.MAX_VALUE;
	                            if (pullResult.getMsgFoundList() == null || pullResult.getMsgFoundList().isEmpty()) {
	                                DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);
	                            } else {
	                                firstMsgOffset = pullResult.getMsgFoundList().get(0).getQueueOffset();
	
	                                DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),
	                                    pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());
	
	                                boolean dispatchToConsume = processQueue.putMessage(pullResult.getMsgFoundList());
	                                DefaultMQPushConsumerImpl.this.consumeMessageService.submitConsumeRequest(
	                                    pullResult.getMsgFoundList(),
	                                    processQueue,
	                                    pullRequest.getMessageQueue(),
	                                    dispatchToConsume);
	
	                                if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() > 0) {
	                                    DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,
	                                        DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval());
	                                } else {
	                                    DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);
	                                }
	                            }
	
	                            if (pullResult.getNextBeginOffset() < prevRequestOffset
	                                || firstMsgOffset < prevRequestOffset) {
	                                log.warn(
	                                    "[BUG] pull message result maybe data wrong, nextBeginOffset: {} firstMsgOffset: {} prevRequestOffset: {}",
	                                    pullResult.getNextBeginOffset(),
	                                    firstMsgOffset,
	                                    prevRequestOffset);
	                            }
	
	                            break;
	                        case NO_NEW_MSG:
	                        case NO_MATCHED_MSG:
	                            pullRequest.setNextOffset(pullResult.getNextBeginOffset());
	
	                            DefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);
	
	                            DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);
	                            break;
	                        case OFFSET_ILLEGAL:
	                            log.warn("the pull request offset illegal, {} {}",
	                                pullRequest.toString(), pullResult.toString());
	                            pullRequest.setNextOffset(pullResult.getNextBeginOffset());
	
	                            pullRequest.getProcessQueue().setDropped(true);
	                            DefaultMQPushConsumerImpl.this.executeTask(new Runnable() {
	
	                                @Override
	                                public void run() {
	                                    try {
	                                        DefaultMQPushConsumerImpl.this.offsetStore.updateAndFreezeOffset(pullRequest.getMessageQueue(),
	                                            pullRequest.getNextOffset());
	
	                                        DefaultMQPushConsumerImpl.this.offsetStore.persist(pullRequest.getMessageQueue());
	
	                                        // removeProcessQueue will also remove offset to cancel the frozen status.
	                                        DefaultMQPushConsumerImpl.this.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());
	                                        DefaultMQPushConsumerImpl.this.rebalanceImpl.getmQClientFactory().rebalanceImmediately();
	
	                                        log.warn("fix the pull request offset, {}", pullRequest);
	                                    } catch (Throwable e) {
	                                        log.error("executeTaskLater Exception", e);
	                                    }
	                                }
	                            });
	                            break;
	                        default:
	                            break;
	                    }
	                }
	            }
	
	            @Override
	            public void onException(Throwable e) {
	                if (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
	                    if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.SUBSCRIPTION_NOT_LATEST) {
	                        log.warn("the subscription is not latest, group={}, messageQueue={}", groupName(), messageQueue);
	                    } else {
	                        log.warn("execute the pull request exception, group={}, messageQueue={}", groupName(), messageQueue, e);
	                    }
	                }
	
	                if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {
	                    DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL);
	                } else {
	                    DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	                }
	            }
	        };
	
	        boolean commitOffsetEnable = false;
	        long commitOffsetValue = 0L;
	        if (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) {
	            commitOffsetValue = this.offsetStore.readOffset(pullRequest.getMessageQueue(), ReadOffsetType.READ_FROM_MEMORY);
	            if (commitOffsetValue > 0) {
	                commitOffsetEnable = true;
	            }
	        }
	
	        String subExpression = null;
	        boolean classFilter = false;
	        SubscriptionData sd = this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());
	        if (sd != null) {
	            if (this.defaultMQPushConsumer.isPostSubscriptionWhenPull() && !sd.isClassFilterMode()) {
	                subExpression = sd.getSubString();
	            }
	
	            classFilter = sd.isClassFilterMode();
	        }
	
	        int sysFlag = PullSysFlag.buildSysFlag(
	            commitOffsetEnable, // commitOffset
	            true, // suspend
	            subExpression != null, // subscription
	            classFilter // class filter
	        );
	        try {
	            this.pullAPIWrapper.pullKernelImpl(
	                pullRequest.getMessageQueue(),
	                subExpression,
	                subscriptionData.getExpressionType(),
	                subscriptionData.getSubVersion(),
	                pullRequest.getNextOffset(),
	                this.defaultMQPushConsumer.getPullBatchSize(),
	                this.defaultMQPushConsumer.getPullBatchSizeInBytes(),
	                sysFlag,
	                commitOffsetValue,
	                BROKER_SUSPEND_MAX_TIME_MILLIS,
	                CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,
	                CommunicationMode.ASYNC,
	                pullCallback
	            );
	        } catch (Exception e) {
	            log.error("pullKernelImpl exception", e);
	            this.executePullRequestLater(pullRequest, pullTimeDelayMillsWhenException);
	        }
	    }
	
	    void popMessage(final PopRequest popRequest) {
	        final PopProcessQueue processQueue = popRequest.getPopProcessQueue();
	        if (processQueue.isDropped()) {
	            log.info("the pop request[{}] is dropped.", popRequest.toString());
	            return;
	        }
	
	        processQueue.setLastPopTimestamp(System.currentTimeMillis());
	
	        try {
	            this.makeSureStateOK();
	        } catch (MQClientException e) {
	            log.warn("pullMessage exception, consumer state not ok", e);
	            this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	            return;
	        }
	
	        if (this.isPause()) {
	            log.warn("consumer was paused, execute pull request later. instanceName={}, group={}", this.defaultMQPushConsumer.getInstanceName(), this.defaultMQPushConsumer.getConsumerGroup());
	            this.executePopPullRequestLater(popRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);
	            return;
	        }
	
	        if (processQueue.getWaiAckMsgCount() > this.defaultMQPushConsumer.getPopThresholdForQueue()) {
	            this.executePopPullRequestLater(popRequest, PULL_TIME_DELAY_MILLS_WHEN_CACHE_FLOW_CONTROL);
	            if ((queueFlowControlTimes++ % 1000) == 0) {
	                log.warn("the messages waiting to ack exceeds the threshold {}, so do flow control, popRequest={}, flowControlTimes={}, wait count={}",
	                    this.defaultMQPushConsumer.getPopThresholdForQueue(), popRequest, queueFlowControlTimes, processQueue.getWaiAckMsgCount());
	            }
	            return;
	        }
	
	        //POPTODO think of pop mode orderly implementation later.
	        final SubscriptionData subscriptionData = this.rebalanceImpl.getSubscriptionInner().get(popRequest.getMessageQueue().getTopic());
	        if (null == subscriptionData) {
	            this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	            log.warn("find the consumer's subscription failed, {}", popRequest);
	            return;
	        }
	
	        final long beginTimestamp = System.currentTimeMillis();
	
	        PopCallback popCallback = new PopCallback() {
	            @Override
	            public void onSuccess(PopResult popResult) {
	                if (popResult == null) {
	                    log.error("pop callback popResult is null");
	                    DefaultMQPushConsumerImpl.this.executePopPullRequestImmediately(popRequest);
	                    return;
	                }
	
	                processPopResult(popResult, subscriptionData);
	
	                switch (popResult.getPopStatus()) {
	                    case FOUND:
	                        long pullRT = System.currentTimeMillis() - beginTimestamp;
	                        DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullRT(popRequest.getConsumerGroup(),
	                            popRequest.getMessageQueue().getTopic(), pullRT);
	                        if (popResult.getMsgFoundList() == null || popResult.getMsgFoundList().isEmpty()) {
	                            DefaultMQPushConsumerImpl.this.executePopPullRequestImmediately(popRequest);
	                        } else {
	                            DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(popRequest.getConsumerGroup(),
	                                popRequest.getMessageQueue().getTopic(), popResult.getMsgFoundList().size());
	                            popRequest.getPopProcessQueue().incFoundMsg(popResult.getMsgFoundList().size());
	
	                            DefaultMQPushConsumerImpl.this.consumeMessagePopService.submitPopConsumeRequest(
	                                popResult.getMsgFoundList(),
	                                processQueue,
	                                popRequest.getMessageQueue());
	
	                            if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() > 0) {
	                                DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest,
	                                    DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval());
	                            } else {
	                                DefaultMQPushConsumerImpl.this.executePopPullRequestImmediately(popRequest);
	                            }
	                        }
	                        break;
	                    case NO_NEW_MSG:
	                    case POLLING_NOT_FOUND:
	                        DefaultMQPushConsumerImpl.this.executePopPullRequestImmediately(popRequest);
	                        break;
	                    case POLLING_FULL:
	                        DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	                        break;
	                    default:
	                        DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	                        break;
	                }
	
	            }
	
	            @Override
	            public void onException(Throwable e) {
	                if (!popRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
	                    log.warn("execute the pull request exception: {}", e);
	                }
	
	                if (e instanceof MQBrokerException && ((MQBrokerException) e).getResponseCode() == ResponseCode.FLOW_CONTROL) {
	                    DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, PULL_TIME_DELAY_MILLS_WHEN_BROKER_FLOW_CONTROL);
	                } else {
	                    DefaultMQPushConsumerImpl.this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	                }
	            }
	        };
	
	
	        try {
	
	            long invisibleTime = this.defaultMQPushConsumer.getPopInvisibleTime();
	            if (invisibleTime < MIN_POP_INVISIBLE_TIME || invisibleTime > MAX_POP_INVISIBLE_TIME) {
	                invisibleTime = 60000;
	            }
	            this.pullAPIWrapper.popAsync(popRequest.getMessageQueue(), invisibleTime, this.defaultMQPushConsumer.getPopBatchNums(),
	                popRequest.getConsumerGroup(), BROKER_SUSPEND_MAX_TIME_MILLIS, popCallback, true, popRequest.getInitMode(),
	                false, subscriptionData.getExpressionType(), subscriptionData.getSubString());
	        } catch (Exception e) {
	            log.error("popAsync exception", e);
	            this.executePopPullRequestLater(popRequest, pullTimeDelayMillsWhenException);
	        }
	    }
	
	    private PopResult processPopResult(final PopResult popResult, final SubscriptionData subscriptionData) {
	        if (PopStatus.FOUND == popResult.getPopStatus()) {
	            List<MessageExt> msgFoundList = popResult.getMsgFoundList();
	            List<MessageExt> msgListFilterAgain = msgFoundList;
	            if (!subscriptionData.getTagsSet().isEmpty() && !subscriptionData.isClassFilterMode()
	                && popResult.getMsgFoundList().size() > 0) {
	                msgListFilterAgain = new ArrayList<>(popResult.getMsgFoundList().size());
	                for (MessageExt msg : popResult.getMsgFoundList()) {
	                    if (msg.getTags() != null) {
	                        if (subscriptionData.getTagsSet().contains(msg.getTags())) {
	                            msgListFilterAgain.add(msg);
	                        }
	                    }
	                }
	            }
	
	            if (!this.filterMessageHookList.isEmpty()) {
	                FilterMessageContext filterMessageContext = new FilterMessageContext();
	                filterMessageContext.setUnitMode(this.defaultMQPushConsumer.isUnitMode());
	                filterMessageContext.setMsgList(msgListFilterAgain);
	                if (!this.filterMessageHookList.isEmpty()) {
	                    for (FilterMessageHook hook : this.filterMessageHookList) {
	                        try {
	                            hook.filterMessage(filterMessageContext);
	                        } catch (Throwable e) {
	                            log.error("execute hook error. hookName={}", hook.hookName());
	                        }
	                    }
	                }
	            }
	
	            if (msgFoundList.size() != msgListFilterAgain.size()) {
	                for (MessageExt msg : msgFoundList) {
	                    if (!msgListFilterAgain.contains(msg)) {
	                        ackAsync(msg, this.groupName());
	                    }
	                }
	            }
	
	            popResult.setMsgFoundList(msgListFilterAgain);
	        }
	
	        return popResult;
	    }
	
	    private void makeSureStateOK() throws MQClientException {
	        if (this.serviceState != ServiceState.RUNNING) {
	            throw new MQClientException("The consumer service state not OK, "
	                + this.serviceState
	                + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),
	                null);
	        }
	    }
	
	    void executePullRequestLater(final PullRequest pullRequest, final long timeDelay) {
	        this.mQClientFactory.getPullMessageService().executePullRequestLater(pullRequest, timeDelay);
	    }
	
	    public boolean isPause() {
	        return pause;
	    }
	
	    public void setPause(boolean pause) {
	        this.pause = pause;
	    }
	
	    public ConsumerStatsManager getConsumerStatsManager() {
	        return this.mQClientFactory.getConsumerStatsManager();
	    }
	
	    public void executePullRequestImmediately(final PullRequest pullRequest) {
	        this.mQClientFactory.getPullMessageService().executePullRequestImmediately(pullRequest);
	    }
	
	    void executePopPullRequestLater(final PopRequest pullRequest, final long timeDelay) {
	        this.mQClientFactory.getPullMessageService().executePopPullRequestLater(pullRequest, timeDelay);
	    }
	
	    void executePopPullRequestImmediately(final PopRequest pullRequest) {
	        this.mQClientFactory.getPullMessageService().executePopPullRequestImmediately(pullRequest);
	    }
	
	    private void correctTagsOffset(final PullRequest pullRequest) {
	        if (0L == pullRequest.getProcessQueue().getMsgCount().get()) {
	            this.offsetStore.updateOffset(pullRequest.getMessageQueue(), pullRequest.getNextOffset(), true);
	        }
	    }
	
	    public void executeTaskLater(final Runnable r, final long timeDelay) {
	        this.mQClientFactory.getPullMessageService().executeTaskLater(r, timeDelay);
	    }
	
	    public void executeTask(final Runnable r) {
	        this.mQClientFactory.getPullMessageService().executeTask(r);
	    }
	
	    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end)
	        throws MQClientException, InterruptedException {
	        return this.mQClientFactory.getMQAdminImpl().queryMessage(topic, key, maxNum, begin, end);
	    }
	
	    public MessageExt queryMessageByUniqKey(String topic, String uniqKey) throws MQClientException,
	        InterruptedException {
	        return this.mQClientFactory.getMQAdminImpl().queryMessageByUniqKey(topic, uniqKey);
	    }
	
	    public void registerMessageListener(MessageListener messageListener) {
	        this.messageListenerInner = messageListener;
	    }
	
	    public void resume() {
	        this.pause = false;
	        doRebalance();
	        log.info("resume this consumer, {}", this.defaultMQPushConsumer.getConsumerGroup());
	    }
	
	    @Deprecated
	    public void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName)
	            throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
	        sendMessageBack(msg, delayLevel, brokerName, null);
	    }
	
	    public void sendMessageBack(MessageExt msg, int delayLevel, final MessageQueue mq)
	            throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
	        sendMessageBack(msg, delayLevel, null, mq);
	    }
	
	
	    private void sendMessageBack(MessageExt msg, int delayLevel, final String brokerName, final MessageQueue mq)
	        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
	        boolean needRetry = true;
	        try {
	            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)
	                || mq != null && mq.getBrokerName().startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {
	                needRetry = false;
	                sendMessageBackAsNormalMessage(msg);
	            } else {
	                String brokerAddr = (null != brokerName) ? this.mQClientFactory.findBrokerAddressInPublish(brokerName)
	                    : RemotingHelper.parseSocketAddressAddr(msg.getStoreHost());
	                this.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, brokerName, msg,
	                    this.defaultMQPushConsumer.getConsumerGroup(), delayLevel, 5000, getMaxReconsumeTimes());
	            }
	        } catch (Throwable t) {
	            log.error("Failed to send message back, consumerGroup={}, brokerName={}, mq={}, message={}",
	                this.defaultMQPushConsumer.getConsumerGroup(), brokerName, mq, msg, t);
	            if (needRetry) {
	                sendMessageBackAsNormalMessage(msg);
	            }
	        } finally {
	            msg.setTopic(NamespaceUtil.withoutNamespace(msg.getTopic(), this.defaultMQPushConsumer.getNamespace()));
	        }
	    }
	
	    private void sendMessageBackAsNormalMessage(MessageExt msg) throws  RemotingException, MQBrokerException, InterruptedException, MQClientException {
	        Message newMsg = new Message(MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());
	
	        String originMsgId = MessageAccessor.getOriginMessageId(msg);
	        MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);
	
	        newMsg.setFlag(msg.getFlag());
	        MessageAccessor.setProperties(newMsg, msg.getProperties());
	        MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());
	        MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes() + 1));
	        MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));
	        MessageAccessor.clearProperty(newMsg, MessageConst.PROPERTY_TRANSACTION_PREPARED);
	        newMsg.setDelayTimeLevel(3 + msg.getReconsumeTimes());
	
	        this.mQClientFactory.getDefaultMQProducer().send(newMsg);
	    }
	
	    void ackAsync(MessageExt message, String consumerGroup) {
	        final String extraInfo = message.getProperty(MessageConst.PROPERTY_POP_CK);
	
	        try {
	            String[] extraInfoStrs = ExtraInfoUtil.split(extraInfo);
	            String brokerName = ExtraInfoUtil.getBrokerName(extraInfoStrs);
	            int queueId = ExtraInfoUtil.getQueueId(extraInfoStrs);
	            long queueOffset = ExtraInfoUtil.getQueueOffset(extraInfoStrs);
	            String topic = message.getTopic();
	
	            String desBrokerName = brokerName;
	            if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {
	                desBrokerName = this.mQClientFactory.getBrokerNameFromMessageQueue(this.defaultMQPushConsumer.queueWithNamespace(new MessageQueue(topic, brokerName, queueId)));
	            }
	
	
	            FindBrokerResult
	                findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(desBrokerName, MixAll.MASTER_ID, true);
	            if (null == findBrokerResult) {
	                this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
	                findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(desBrokerName, MixAll.MASTER_ID, true);
	            }
	
	            if (findBrokerResult == null) {
	                log.error("The broker[" + desBrokerName + "] not exist");
	                return;
	            }
	
	            AckMessageRequestHeader requestHeader = new AckMessageRequestHeader();
	            requestHeader.setTopic(ExtraInfoUtil.getRealTopic(extraInfoStrs, topic, consumerGroup));
	            requestHeader.setQueueId(queueId);
	            requestHeader.setOffset(queueOffset);
	            requestHeader.setConsumerGroup(consumerGroup);
	            requestHeader.setExtraInfo(extraInfo);
	            requestHeader.setBrokerName(brokerName);
	            this.mQClientFactory.getMQClientAPIImpl().ackMessageAsync(findBrokerResult.getBrokerAddr(), ASYNC_TIMEOUT, new AckCallback() {
	                @Override
	                public void onSuccess(AckResult ackResult) {
	                    if (ackResult != null && !AckStatus.OK.equals(ackResult.getStatus())) {
	                        log.warn("Ack message fail. ackResult: {}, extraInfo: {}", ackResult, extraInfo);
	                    }
	                }
	                @Override
	                public void onException(Throwable e) {
	                    log.warn("Ack message fail. extraInfo: {}  error message: {}", extraInfo, e.toString());
	                }
	            }, requestHeader);
	
	        } catch (Throwable t) {
	            log.error("ack async error.", t);
	        }
	    }
	
	    void changePopInvisibleTimeAsync(String topic, String consumerGroup, String extraInfo, long invisibleTime, AckCallback callback)
	        throws MQClientException, RemotingException, InterruptedException, MQBrokerException {
	        String[] extraInfoStrs = ExtraInfoUtil.split(extraInfo);
	        String brokerName = ExtraInfoUtil.getBrokerName(extraInfoStrs);
	        int queueId = ExtraInfoUtil.getQueueId(extraInfoStrs);
	
	        String desBrokerName = brokerName;
	        if (brokerName != null && brokerName.startsWith(MixAll.LOGICAL_QUEUE_MOCK_BROKER_PREFIX)) {
	            desBrokerName = this.mQClientFactory.getBrokerNameFromMessageQueue(this.defaultMQPushConsumer.queueWithNamespace(new MessageQueue(topic, brokerName, queueId)));
	        }
	
	        FindBrokerResult
	            findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(desBrokerName, MixAll.MASTER_ID, true);
	        if (null == findBrokerResult) {
	            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
	            findBrokerResult = this.mQClientFactory.findBrokerAddressInSubscribe(desBrokerName, MixAll.MASTER_ID, true);
	        }
	        if (findBrokerResult != null) {
	            ChangeInvisibleTimeRequestHeader requestHeader = new ChangeInvisibleTimeRequestHeader();
	            requestHeader.setTopic(ExtraInfoUtil.getRealTopic(extraInfoStrs, topic, consumerGroup));
	            requestHeader.setQueueId(queueId);
	            requestHeader.setOffset(ExtraInfoUtil.getQueueOffset(extraInfoStrs));
	            requestHeader.setConsumerGroup(consumerGroup);
	            requestHeader.setExtraInfo(extraInfo);
	            requestHeader.setInvisibleTime(invisibleTime);
	            requestHeader.setBrokerName(brokerName);
	            //here the broker should be polished
	            this.mQClientFactory.getMQClientAPIImpl().changeInvisibleTimeAsync(brokerName, findBrokerResult.getBrokerAddr(), requestHeader, ASYNC_TIMEOUT, callback);
	            return;
	        }
	        throw new MQClientException("The broker[" + desBrokerName + "] not exist", null);
	    }
	
	    public int getMaxReconsumeTimes() {
	        // default reconsume times: 16
	        if (this.defaultMQPushConsumer.getMaxReconsumeTimes() == -1) {
	            return 16;
	        } else {
	            return this.defaultMQPushConsumer.getMaxReconsumeTimes();
	        }
	    }
	
	    public void shutdown() {
	        shutdown(0);
	    }
	
	    public synchronized void shutdown(long awaitTerminateMillis) {
	        switch (this.serviceState) {
	            case CREATE_JUST:
	                break;
	            case RUNNING:
	                this.consumeMessageService.shutdown(awaitTerminateMillis);
	                this.persistConsumerOffset();
	                this.mQClientFactory.unregisterConsumer(this.defaultMQPushConsumer.getConsumerGroup());
	                this.mQClientFactory.shutdown();
	                log.info("the consumer [{}] shutdown OK", this.defaultMQPushConsumer.getConsumerGroup());
	                this.rebalanceImpl.destroy();
	                this.serviceState = ServiceState.SHUTDOWN_ALREADY;
	                break;
	            case SHUTDOWN_ALREADY:
	                break;
	            default:
	                break;
	        }
	    }
	
	    public synchronized void start() throws MQClientException {
	        switch (this.serviceState) {
	            case CREATE_JUST:
	                log.info("the consumer [{}] start beginning. messageModel={}, isUnitMode={}", this.defaultMQPushConsumer.getConsumerGroup(),
	                    this.defaultMQPushConsumer.getMessageModel(), this.defaultMQPushConsumer.isUnitMode());
	                this.serviceState = ServiceState.START_FAILED;
	
	                this.checkConfig();
	
	                this.copySubscription();
	
	                if (this.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) {
	                    this.defaultMQPushConsumer.changeInstanceNameToPID();
	                }
	
	                this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);
	
	                this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
	                this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());
	                this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());
	                this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);
	
	                if (this.pullAPIWrapper == null) {
	                    this.pullAPIWrapper = new PullAPIWrapper(
	                        mQClientFactory,
	                        this.defaultMQPushConsumer.getConsumerGroup(), isUnitMode());
	                }
	                this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);
	
	                if (this.defaultMQPushConsumer.getOffsetStore() != null) {
	                    this.offsetStore = this.defaultMQPushConsumer.getOffsetStore();
	                } else {
	                    switch (this.defaultMQPushConsumer.getMessageModel()) {
	                        case BROADCASTING:
	                            this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());
	                            break;
	                        case CLUSTERING:
	                            this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());
	                            break;
	                        default:
	                            break;
	                    }
	                    this.defaultMQPushConsumer.setOffsetStore(this.offsetStore);
	                }
	                this.offsetStore.load();
	
	                if (this.getMessageListenerInner() instanceof MessageListenerOrderly) {
	                    this.consumeOrderly = true;
	                    this.consumeMessageService =
	                        new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());
	                    //POPTODO reuse Executor ?
	                    this.consumeMessagePopService = new ConsumeMessagePopOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());
	                } else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) {
	                    this.consumeOrderly = false;
	                    this.consumeMessageService =
	                        new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());
	                    //POPTODO reuse Executor ?
	                    this.consumeMessagePopService =
	                        new ConsumeMessagePopConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());
	                }
	
	                this.consumeMessageService.start();
	                // POPTODO
	                this.consumeMessagePopService.start();
	
	                boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this);
	                if (!registerOK) {
	                    this.serviceState = ServiceState.CREATE_JUST;
	                    this.consumeMessageService.shutdown(defaultMQPushConsumer.getAwaitTerminationMillisWhenShutdown());
	                    throw new MQClientException("The consumer group[" + this.defaultMQPushConsumer.getConsumerGroup()
	                        + "] has been created before, specify another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),
	                        null);
	                }
	
	                mQClientFactory.start();
	                log.info("the consumer [{}] start OK.", this.defaultMQPushConsumer.getConsumerGroup());
	                this.serviceState = ServiceState.RUNNING;
	                break;
	            case RUNNING:
	            case START_FAILED:
	            case SHUTDOWN_ALREADY:
	                throw new MQClientException("The PushConsumer service state not OK, maybe started once, "
	                    + this.serviceState
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),
	                    null);
	            default:
	                break;
	        }
	
	        this.updateTopicSubscribeInfoWhenSubscriptionChanged();
	        this.mQClientFactory.checkClientInBroker();
	        if (this.mQClientFactory.sendHeartbeatToAllBrokerWithLock()) {
	            this.mQClientFactory.rebalanceImmediately();
	        }
	    }
	
	    private void checkConfig() throws MQClientException {
	        Validators.checkGroup(this.defaultMQPushConsumer.getConsumerGroup());
	
	        if (null == this.defaultMQPushConsumer.getConsumerGroup()) {
	            throw new MQClientException(
	                "consumerGroup is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        if (this.defaultMQPushConsumer.getConsumerGroup().equals(MixAll.DEFAULT_CONSUMER_GROUP)) {
	            throw new MQClientException(
	                "consumerGroup can not equal "
	                    + MixAll.DEFAULT_CONSUMER_GROUP
	                    + ", please specify another one."
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        if (null == this.defaultMQPushConsumer.getMessageModel()) {
	            throw new MQClientException(
	                "messageModel is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        if (null == this.defaultMQPushConsumer.getConsumeFromWhere()) {
	            throw new MQClientException(
	                "consumeFromWhere is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        Date dt = UtilAll.parseDate(this.defaultMQPushConsumer.getConsumeTimestamp(), UtilAll.YYYYMMDDHHMMSS);
	        if (null == dt) {
	            throw new MQClientException(
	                "consumeTimestamp is invalid, the valid format is yyyyMMddHHmmss,but received "
	                    + this.defaultMQPushConsumer.getConsumeTimestamp()
	                    + " " + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL), null);
	        }
	
	        // allocateMessageQueueStrategy
	        if (null == this.defaultMQPushConsumer.getAllocateMessageQueueStrategy()) {
	            throw new MQClientException(
	                "allocateMessageQueueStrategy is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // subscription
	        if (null == this.defaultMQPushConsumer.getSubscription()) {
	            throw new MQClientException(
	                "subscription is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // messageListener
	        if (null == this.defaultMQPushConsumer.getMessageListener()) {
	            throw new MQClientException(
	                "messageListener is null"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        boolean orderly = this.defaultMQPushConsumer.getMessageListener() instanceof MessageListenerOrderly;
	        boolean concurrently = this.defaultMQPushConsumer.getMessageListener() instanceof MessageListenerConcurrently;
	        if (!orderly && !concurrently) {
	            throw new MQClientException(
	                "messageListener must be instanceof MessageListenerOrderly or MessageListenerConcurrently"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // consumeThreadMin
	        if (this.defaultMQPushConsumer.getConsumeThreadMin() < 1
	            || this.defaultMQPushConsumer.getConsumeThreadMin() > 1000) {
	            throw new MQClientException(
	                "consumeThreadMin Out of range [1, 1000]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // consumeThreadMax
	        if (this.defaultMQPushConsumer.getConsumeThreadMax() < 1 || this.defaultMQPushConsumer.getConsumeThreadMax() > 1000) {
	            throw new MQClientException(
	                "consumeThreadMax Out of range [1, 1000]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // consumeThreadMin can't be larger than consumeThreadMax
	        if (this.defaultMQPushConsumer.getConsumeThreadMin() > this.defaultMQPushConsumer.getConsumeThreadMax()) {
	            throw new MQClientException(
	                "consumeThreadMin (" + this.defaultMQPushConsumer.getConsumeThreadMin() + ") "
	                    + "is larger than consumeThreadMax (" + this.defaultMQPushConsumer.getConsumeThreadMax() + ")",
	                null);
	        }
	
	        // consumeConcurrentlyMaxSpan
	        if (this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan() < 1
	            || this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan() > 65535) {
	            throw new MQClientException(
	                "consumeConcurrentlyMaxSpan Out of range [1, 65535]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // pullThresholdForQueue
	        if (this.defaultMQPushConsumer.getPullThresholdForQueue() < 1 || this.defaultMQPushConsumer.getPullThresholdForQueue() > 65535) {
	            throw new MQClientException(
	                "pullThresholdForQueue Out of range [1, 65535]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // pullThresholdForTopic
	        if (this.defaultMQPushConsumer.getPullThresholdForTopic() != -1) {
	            if (this.defaultMQPushConsumer.getPullThresholdForTopic() < 1 || this.defaultMQPushConsumer.getPullThresholdForTopic() > 6553500) {
	                throw new MQClientException(
	                    "pullThresholdForTopic Out of range [1, 6553500]"
	                        + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                    null);
	            }
	        }
	
	        // pullThresholdSizeForQueue
	        if (this.defaultMQPushConsumer.getPullThresholdSizeForQueue() < 1 || this.defaultMQPushConsumer.getPullThresholdSizeForQueue() > 1024) {
	            throw new MQClientException(
	                "pullThresholdSizeForQueue Out of range [1, 1024]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        if (this.defaultMQPushConsumer.getPullThresholdSizeForTopic() != -1) {
	            // pullThresholdSizeForTopic
	            if (this.defaultMQPushConsumer.getPullThresholdSizeForTopic() < 1 || this.defaultMQPushConsumer.getPullThresholdSizeForTopic() > 102400) {
	                throw new MQClientException(
	                    "pullThresholdSizeForTopic Out of range [1, 102400]"
	                        + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                    null);
	            }
	        }
	
	        // pullInterval
	        if (this.defaultMQPushConsumer.getPullInterval() < 0 || this.defaultMQPushConsumer.getPullInterval() > 65535) {
	            throw new MQClientException(
	                "pullInterval Out of range [0, 65535]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // consumeMessageBatchMaxSize
	        if (this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize() < 1
	            || this.defaultMQPushConsumer.getConsumeMessageBatchMaxSize() > 1024) {
	            throw new MQClientException(
	                "consumeMessageBatchMaxSize Out of range [1, 1024]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // pullBatchSize
	        if (this.defaultMQPushConsumer.getPullBatchSize() < 1 || this.defaultMQPushConsumer.getPullBatchSize() > 1024) {
	            throw new MQClientException(
	                "pullBatchSize Out of range [1, 1024]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // popInvisibleTime
	        if (this.defaultMQPushConsumer.getPopInvisibleTime() < MIN_POP_INVISIBLE_TIME
	            || this.defaultMQPushConsumer.getPopInvisibleTime() > MAX_POP_INVISIBLE_TIME) {
	            throw new MQClientException(
	                "popInvisibleTime Out of range [" + MIN_POP_INVISIBLE_TIME + ", " + MAX_POP_INVISIBLE_TIME + "]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	
	        // popBatchNums
	        if (this.defaultMQPushConsumer.getPopBatchNums() <= 0 || this.defaultMQPushConsumer.getPopBatchNums() > 32) {
	            throw new MQClientException(
	                "popBatchNums Out of range [1, 32]"
	                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_PARAMETER_CHECK_URL),
	                null);
	        }
	    }
	
	    private void copySubscription() throws MQClientException {
	        try {
	            Map<String, String> sub = this.defaultMQPushConsumer.getSubscription();
	            if (sub != null) {
	                for (final Map.Entry<String, String> entry : sub.entrySet()) {
	                    final String topic = entry.getKey();
	                    final String subString = entry.getValue();
	                    SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subString);
	                    this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	                }
	            }
	
	            if (null == this.messageListenerInner) {
	                this.messageListenerInner = this.defaultMQPushConsumer.getMessageListener();
	            }
	
	            switch (this.defaultMQPushConsumer.getMessageModel()) {
	                case BROADCASTING:
	                    break;
	                case CLUSTERING:
	                    final String retryTopic = MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup());
	                    SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(retryTopic, SubscriptionData.SUB_ALL);
	                    this.rebalanceImpl.getSubscriptionInner().put(retryTopic, subscriptionData);
	                    break;
	                default:
	                    break;
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscription exception", e);
	        }
	    }
	
	    public MessageListener getMessageListenerInner() {
	        return messageListenerInner;
	    }
	
	    private void updateTopicSubscribeInfoWhenSubscriptionChanged() {
	        if (doNotUpdateTopicSubscribeInfoWhenSubscriptionChanged) {
	            return;
	        }
	        Map<String, SubscriptionData> subTable = this.getSubscriptionInner();
	        if (subTable != null) {
	            for (final Map.Entry<String, SubscriptionData> entry : subTable.entrySet()) {
	                final String topic = entry.getKey();
	                this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);
	            }
	        }
	    }
	
	    public ConcurrentMap<String, SubscriptionData> getSubscriptionInner() {
	        return this.rebalanceImpl.getSubscriptionInner();
	    }
	
	    public void subscribe(String topic, String subExpression) throws MQClientException {
	        try {
	            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subExpression);
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            if (this.mQClientFactory != null) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscription exception", e);
	        }
	    }
	
	    public void subscribe(String topic, String fullClassName, String filterClassSource) throws MQClientException {
	        try {
	            SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, SubscriptionData.SUB_ALL);
	            subscriptionData.setSubString(fullClassName);
	            subscriptionData.setClassFilterMode(true);
	            subscriptionData.setFilterClassSource(filterClassSource);
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            if (this.mQClientFactory != null) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	            }
	
	        } catch (Exception e) {
	            throw new MQClientException("subscription exception", e);
	        }
	    }
	
	    public void subscribe(final String topic, final MessageSelector messageSelector) throws MQClientException {
	        try {
	            if (messageSelector == null) {
	                subscribe(topic, SubscriptionData.SUB_ALL);
	                return;
	            }
	
	            SubscriptionData subscriptionData = FilterAPI.build(topic,
	                messageSelector.getExpression(), messageSelector.getExpressionType());
	
	            this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
	            if (this.mQClientFactory != null) {
	                this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();
	            }
	        } catch (Exception e) {
	            throw new MQClientException("subscription exception", e);
	        }
	    }
	
	    public void suspend() {
	        this.pause = true;
	        log.info("suspend this consumer, {}", this.defaultMQPushConsumer.getConsumerGroup());
	    }
	
	    public void unsubscribe(String topic) {
	        this.rebalanceImpl.getSubscriptionInner().remove(topic);
	    }
	
	    public void updateConsumeOffset(MessageQueue mq, long offset) {
	        this.offsetStore.updateOffset(mq, offset, false);
	    }
	
	    public void updateCorePoolSize(int corePoolSize) {
	        this.consumeMessageService.updateCorePoolSize(corePoolSize);
	    }
	
	    public MessageExt viewMessage(String topic, String msgId)
	        throws RemotingException, MQBrokerException, InterruptedException, MQClientException {
	        return this.mQClientFactory.getMQAdminImpl().viewMessage(topic, msgId);
	    }
	
	    public RebalanceImpl getRebalanceImpl() {
	        return rebalanceImpl;
	    }
	
	    public boolean isConsumeOrderly() {
	        return consumeOrderly;
	    }
	
	    public void setConsumeOrderly(boolean consumeOrderly) {
	        this.consumeOrderly = consumeOrderly;
	    }
	
	    public void resetOffsetByTimeStamp(long timeStamp) throws MQClientException {
	        for (String topic : rebalanceImpl.getSubscriptionInner().keySet()) {
	            Set<MessageQueue> mqs = rebalanceImpl.getTopicSubscribeInfoTable().get(topic);
	            if (CollectionUtils.isNotEmpty(mqs)) {
	                Map<MessageQueue, Long> offsetTable = new HashMap<>(mqs.size(), 1);
	                for (MessageQueue mq : mqs) {
	                    long offset = searchOffset(mq, timeStamp);
	                    offsetTable.put(mq, offset);
	                }
	                this.mQClientFactory.resetOffset(topic, groupName(), offsetTable);
	            }
	        }
	    }
	
	    public long searchOffset(MessageQueue mq, long timestamp) throws MQClientException {
	        return this.mQClientFactory.getMQAdminImpl().searchOffset(mq, timestamp);
	    }
	
	    @Override
	    public String groupName() {
	        return this.defaultMQPushConsumer.getConsumerGroup();
	    }
	
	    @Override
	    public MessageModel messageModel() {
	        return this.defaultMQPushConsumer.getMessageModel();
	    }
	
	    @Override
	    public ConsumeType consumeType() {
	        return ConsumeType.CONSUME_PASSIVELY;
	    }
	
	    @Override
	    public ConsumeFromWhere consumeFromWhere() {
	        return this.defaultMQPushConsumer.getConsumeFromWhere();
	    }
	
	    @Override
	    public Set<SubscriptionData> subscriptions() {
	        return new HashSet<>(this.rebalanceImpl.getSubscriptionInner().values());
	    }
	
	    @Override
	    public void doRebalance() {
	        if (!this.pause) {
	            this.rebalanceImpl.doRebalance(this.isConsumeOrderly());
	        }
	    }
	
	    @Override
	    public boolean tryRebalance() {
	        if (!this.pause) {
	            return this.rebalanceImpl.doRebalance(this.isConsumeOrderly());
	        }
	        return false;
	    }
	
	    @Override
	    public void persistConsumerOffset() {
	        try {
	            this.makeSureStateOK();
	            Set<MessageQueue> mqs = new HashSet<>();
	            Set<MessageQueue> allocateMq = this.rebalanceImpl.getProcessQueueTable().keySet();
	            mqs.addAll(allocateMq);
	
	            this.offsetStore.persistAll(mqs);
	        } catch (Exception e) {
	            log.error("group: " + this.defaultMQPushConsumer.getConsumerGroup() + " persistConsumerOffset exception", e);
	        }
	    }
	
	    @Override
	    public void updateTopicSubscribeInfo(String topic, Set<MessageQueue> info) {
	        Map<String, SubscriptionData> subTable = this.getSubscriptionInner();
	        if (subTable != null) {
	            if (subTable.containsKey(topic)) {
	                this.rebalanceImpl.topicSubscribeInfoTable.put(topic, info);
	            }
	        }
	    }
	
	    @Override
	    public boolean isSubscribeTopicNeedUpdate(String topic) {
	        Map<String, SubscriptionData> subTable = this.getSubscriptionInner();
	        if (subTable != null) {
	            if (subTable.containsKey(topic)) {
	                return !this.rebalanceImpl.topicSubscribeInfoTable.containsKey(topic);
	            }
	        }
	
	        return false;
	    }
	
	    @Override
	    public boolean isUnitMode() {
	        return this.defaultMQPushConsumer.isUnitMode();
	    }
	
	    @Override
	    public ConsumerRunningInfo consumerRunningInfo() {
	        ConsumerRunningInfo info = new ConsumerRunningInfo();
	
	        Properties prop = MixAll.object2Properties(this.defaultMQPushConsumer);
	
	        prop.put(ConsumerRunningInfo.PROP_CONSUME_ORDERLY, String.valueOf(this.consumeOrderly));
	        prop.put(ConsumerRunningInfo.PROP_THREADPOOL_CORE_SIZE, String.valueOf(this.consumeMessageService.getCorePoolSize()));
	        prop.put(ConsumerRunningInfo.PROP_CONSUMER_START_TIMESTAMP, String.valueOf(this.consumerStartTimestamp));
	
	        info.setProperties(prop);
	
	        Set<SubscriptionData> subSet = this.subscriptions();
	        info.getSubscriptionSet().addAll(subSet);
	
	        Iterator<Entry<MessageQueue, ProcessQueue>> it = this.rebalanceImpl.getProcessQueueTable().entrySet().iterator();
	        while (it.hasNext()) {
	            Entry<MessageQueue, ProcessQueue> next = it.next();
	            MessageQueue mq = next.getKey();
	            ProcessQueue pq = next.getValue();
	
	            ProcessQueueInfo pqinfo = new ProcessQueueInfo();
	            pqinfo.setCommitOffset(this.offsetStore.readOffset(mq, ReadOffsetType.MEMORY_FIRST_THEN_STORE));
	            pq.fillProcessQueueInfo(pqinfo);
	            info.getMqTable().put(mq, pqinfo);
	        }
	
	        Iterator<Entry<MessageQueue, PopProcessQueue>> popIt = this.rebalanceImpl.getPopProcessQueueTable().entrySet().iterator();
	        while (popIt.hasNext()) {
	            Entry<MessageQueue, PopProcessQueue> next = popIt.next();
	            MessageQueue mq = next.getKey();
	            PopProcessQueue pq = next.getValue();
	
	            PopProcessQueueInfo pqinfo = new PopProcessQueueInfo();
	            pq.fillPopProcessQueueInfo(pqinfo);
	            info.getMqPopTable().put(mq, pqinfo);
	        }
	
	        for (SubscriptionData sd : subSet) {
	            ConsumeStatus consumeStatus = this.mQClientFactory.getConsumerStatsManager().consumeStatus(this.groupName(), sd.getTopic());
	            info.getStatusTable().put(sd.getTopic(), consumeStatus);
	        }
	
	        return info;
	    }
	
	    public MQClientInstance getmQClientFactory() {
	        return mQClientFactory;
	    }
	
	    public void setmQClientFactory(MQClientInstance mQClientFactory) {
	        this.mQClientFactory = mQClientFactory;
	    }
	
	    public ServiceState getServiceState() {
	        return serviceState;
	    }
	
	    //Don't use this deprecated setter, which will be removed soon.
	    @Deprecated
	    public synchronized void setServiceState(ServiceState serviceState) {
	        this.serviceState = serviceState;
	    }
	
	    public void adjustThreadPool() {
	        long computeAccTotal = this.computeAccumulationTotal();
	        long adjustThreadPoolNumsThreshold = this.defaultMQPushConsumer.getAdjustThreadPoolNumsThreshold();
	
	        long incThreshold = (long) (adjustThreadPoolNumsThreshold * 1.0);
	
	        long decThreshold = (long) (adjustThreadPoolNumsThreshold * 0.8);
	
	        if (computeAccTotal >= incThreshold) {
	            this.consumeMessageService.incCorePoolSize();
	        }
	
	        if (computeAccTotal < decThreshold) {
	            this.consumeMessageService.decCorePoolSize();
	        }
	    }
	
	    private long computeAccumulationTotal() {
	        long msgAccTotal = 0;
	        ConcurrentMap<MessageQueue, ProcessQueue> processQueueTable = this.rebalanceImpl.getProcessQueueTable();
	        Iterator<Entry<MessageQueue, ProcessQueue>> it = processQueueTable.entrySet().iterator();
	        while (it.hasNext()) {
	            Entry<MessageQueue, ProcessQueue> next = it.next();
	            ProcessQueue value = next.getValue();
	            msgAccTotal += value.getMsgAccCnt();
	        }
	
	        return msgAccTotal;
	    }
	
	    public List<QueueTimeSpan> queryConsumeTimeSpan(final String topic)
	        throws RemotingException, MQClientException, InterruptedException, MQBrokerException {
	        List<QueueTimeSpan> queueTimeSpan = new ArrayList<>();
	        TopicRouteData routeData = this.mQClientFactory.getMQClientAPIImpl().getTopicRouteInfoFromNameServer(topic, 3000);
	        for (BrokerData brokerData : routeData.getBrokerDatas()) {
	            String addr = brokerData.selectBrokerAddr();
	            queueTimeSpan.addAll(this.mQClientFactory.getMQClientAPIImpl().queryConsumeTimeSpan(addr, topic, groupName(), 3000));
	        }
	
	        return queueTimeSpan;
	    }
	
	    public void tryResetPopRetryTopic(final List<MessageExt> msgs, String consumerGroup) {
	        String popRetryPrefix = MixAll.RETRY_GROUP_TOPIC_PREFIX + consumerGroup + "_";
	        for (MessageExt msg : msgs) {
	            if (msg.getTopic().startsWith(popRetryPrefix)) {
	                String normalTopic = KeyBuilder.parseNormalTopic(msg.getTopic(), consumerGroup);
	                if (normalTopic != null && !normalTopic.isEmpty()) {
	                    msg.setTopic(normalTopic);
	                }
	            }
	        }
	    }
	
	
	    public void resetRetryAndNamespace(final List<MessageExt> msgs, String consumerGroup) {
	        final String groupTopic = MixAll.getRetryTopic(consumerGroup);
	        for (MessageExt msg : msgs) {
	            String retryTopic = msg.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);
	            if (retryTopic != null && groupTopic.equals(msg.getTopic())) {
	                msg.setTopic(retryTopic);
	            }
	
	            if (StringUtils.isNotEmpty(this.defaultMQPushConsumer.getNamespace())) {
	                msg.setTopic(NamespaceUtil.withoutNamespace(msg.getTopic(), this.defaultMQPushConsumer.getNamespace()));
	            }
	        }
	    }
	
	    public ConsumeMessageService getConsumeMessageService() {
	        return consumeMessageService;
	    }
	
	    public void setConsumeMessageService(ConsumeMessageService consumeMessageService) {
	        this.consumeMessageService = consumeMessageService;
	
	    }
	
	    public void setPullTimeDelayMillsWhenException(long pullTimeDelayMillsWhenException) {
	        this.pullTimeDelayMillsWhenException = pullTimeDelayMillsWhenException;
	    }
	
	    int[] getPopDelayLevel() {
	        return popDelayLevel;
	    }
	
	    public MessageQueueListener getMessageQueueListener() {
	        if (null == defaultMQPushConsumer) {
	            return null;
	        }
	        return defaultMQPushConsumer.getMessageQueueListener();
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//common/src/main/java/org/apache/rocketmq/common/BrokerConfig.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.common;
	
	import org.apache.rocketmq.common.annotation.ImportantField;
	import org.apache.rocketmq.common.constant.PermName;
	import org.apache.rocketmq.common.message.MessageRequestMode;
	import org.apache.rocketmq.common.metrics.MetricsExporterType;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.NetworkUtil;
	
	import java.util.concurrent.TimeUnit;
	
	public class BrokerConfig extends BrokerIdentity {
	
	    private String brokerConfigPath = null;
	
	    private String rocketmqHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY, System.getenv(MixAll.ROCKETMQ_HOME_ENV));
	    @ImportantField
	    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));
	
	    /**
	     * Listen port for single broker
	     */
	    @ImportantField
	    private int listenPort = 6888;
	
	    @ImportantField
	    private String brokerIP1 = NetworkUtil.getLocalAddress();
	    private String brokerIP2 = NetworkUtil.getLocalAddress();
	
	    @ImportantField
	    private boolean recoverConcurrently = false;
	
	    private int brokerPermission = PermName.PERM_READ | PermName.PERM_WRITE;
	    private int defaultTopicQueueNums = 8;
	    @ImportantField
	    private boolean autoCreateTopicEnable = true;
	
	    private boolean clusterTopicEnable = true;
	
	    private boolean brokerTopicEnable = true;
	    @ImportantField
	    private boolean autoCreateSubscriptionGroup = true;
	    private String messageStorePlugIn = "";
	
	    private static final int PROCESSOR_NUMBER = Runtime.getRuntime().availableProcessors();
	    @ImportantField
	    private String msgTraceTopicName = TopicValidator.RMQ_SYS_TRACE_TOPIC;
	    @ImportantField
	    private boolean traceTopicEnable = false;
	    /**
	     * thread numbers for send message thread pool.
	     */
	    private int sendMessageThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
	    private int putMessageFutureThreadPoolNums = Math.min(PROCESSOR_NUMBER, 4);
	    private int pullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
	    private int litePullMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
	    private int ackMessageThreadPoolNums = 3;
	    private int processReplyMessageThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
	    private int queryMessageThreadPoolNums = 8 + PROCESSOR_NUMBER;
	
	    private int adminBrokerThreadPoolNums = 16;
	    private int clientManageThreadPoolNums = 32;
	    private int consumerManageThreadPoolNums = 32;
	    private int loadBalanceProcessorThreadPoolNums = 32;
	    private int heartbeatThreadPoolNums = Math.min(32, PROCESSOR_NUMBER);
	    private int recoverThreadPoolNums = 32;
	
	    /**
	     * Thread numbers for EndTransactionProcessor
	     */
	    private int endTransactionThreadPoolNums = Math.max(8 + PROCESSOR_NUMBER * 2,
	            sendMessageThreadPoolNums * 4);
	
	    private int flushConsumerOffsetInterval = 1000 * 5;
	
	    private int flushConsumerOffsetHistoryInterval = 1000 * 60;
	
	    @ImportantField
	    private boolean rejectTransactionMessage = false;
	
	    @ImportantField
	    private boolean fetchNameSrvAddrByDnsLookup = false;
	
	    @ImportantField
	    private boolean fetchNamesrvAddrByAddressServer = false;
	
	    private int sendThreadPoolQueueCapacity = 10000;
	    private int putThreadPoolQueueCapacity = 10000;
	    private int pullThreadPoolQueueCapacity = 100000;
	    private int litePullThreadPoolQueueCapacity = 100000;
	    private int ackThreadPoolQueueCapacity = 100000;
	    private int replyThreadPoolQueueCapacity = 10000;
	    private int queryThreadPoolQueueCapacity = 20000;
	    private int clientManagerThreadPoolQueueCapacity = 1000000;
	    private int consumerManagerThreadPoolQueueCapacity = 1000000;
	    private int heartbeatThreadPoolQueueCapacity = 50000;
	    private int endTransactionPoolQueueCapacity = 100000;
	    private int adminBrokerThreadPoolQueueCapacity = 10000;
	    private int loadBalanceThreadPoolQueueCapacity = 100000;
	
	    private boolean longPollingEnable = true;
	
	    private long shortPollingTimeMills = 1000;
	
	    private boolean notifyConsumerIdsChangedEnable = true;
	
	    private boolean highSpeedMode = false;
	
	    private int commercialBaseCount = 1;
	
	    private int commercialSizePerMsg = 4 * 1024;
	
	    private boolean accountStatsEnable = true;
	    private boolean accountStatsPrintZeroValues = true;
	
	    private boolean transferMsgByHeap = true;
	
	    private String regionId = MixAll.DEFAULT_TRACE_REGION_ID;
	    private int registerBrokerTimeoutMills = 24000;
	
	    private int sendHeartbeatTimeoutMillis = 1000;
	
	    private boolean slaveReadEnable = false;
	
	    private boolean disableConsumeIfConsumerReadSlowly = false;
	    private long consumerFallbehindThreshold = 1024L * 1024 * 1024 * 16;
	
	    private boolean brokerFastFailureEnable = true;
	    private long waitTimeMillsInSendQueue = 200;
	    private long waitTimeMillsInPullQueue = 5 * 1000;
	    private long waitTimeMillsInLitePullQueue = 5 * 1000;
	    private long waitTimeMillsInHeartbeatQueue = 31 * 1000;
	    private long waitTimeMillsInTransactionQueue = 3 * 1000;
	    private long waitTimeMillsInAckQueue = 3000;
	
	    private long startAcceptSendRequestTimeStamp = 0L;
	
	    private boolean traceOn = true;
	
	    // Switch of filter bit map calculation.
	    // If switch on:
	    // 1. Calculate filter bit map when construct queue.
	    // 2. Filter bit map will be saved to consume queue extend file if allowed.
	    private boolean enableCalcFilterBitMap = false;
	
	    //Reject the pull consumer instance to pull messages from broker.
	    private boolean rejectPullConsumerEnable = false;
	
	    // Expect num of consumers will use filter.
	    private int expectConsumerNumUseFilter = 32;
	
	    // Error rate of bloom filter, 1~100.
	    private int maxErrorRateOfBloomFilter = 20;
	
	    //how long to clean filter data after dead.Default: 24h
	    private long filterDataCleanTimeSpan = 24 * 3600 * 1000;
	
	    // whether do filter when retry.
	    private boolean filterSupportRetry = false;
	    private boolean enablePropertyFilter = false;
	
	    private boolean compressedRegister = false;
	
	    private boolean forceRegister = true;
	
	    /**
	     * This configurable item defines interval of topics registration of broker to name server. Allowing values are
	     * between 10,000 and 60,000 milliseconds.
	     */
	    private int registerNameServerPeriod = 1000 * 30;
	
	    /**
	     * the interval to send heartbeat to name server for liveness detection.
	     */
	    private int brokerHeartbeatInterval = 1000;
	
	    /**
	     * How long the broker will be considered as inactive by nameserver since last heartbeat. Effective only if
	     * enableSlaveActingMaster is true
	     */
	    private long brokerNotActiveTimeoutMillis = 10 * 1000;
	
	    private boolean enableNetWorkFlowControl = false;
	
	    private boolean enableBroadcastOffsetStore = true;
	
	    private long broadcastOffsetExpireSecond = 2 * 60;
	
	    private long broadcastOffsetExpireMaxSecond = 5 * 60;
	
	    private int popPollingSize = 1024;
	    private int popPollingMapSize = 100000;
	    // 20w cost 200M heap memory.
	    private long maxPopPollingSize = 100000;
	    private int reviveQueueNum = 8;
	    private long reviveInterval = 1000;
	    private long reviveMaxSlow = 3;
	    private long reviveScanTime = 10000;
	    private boolean enableSkipLongAwaitingAck = false;
	    private long reviveAckWaitMs = TimeUnit.MINUTES.toMillis(3);
	    private boolean enablePopLog = false;
	    private boolean enablePopBufferMerge = false;
	    private int popCkStayBufferTime = 10 * 1000;
	    private int popCkStayBufferTimeOut = 3 * 1000;
	    private int popCkMaxBufferSize = 200000;
	    private int popCkOffsetMaxQueueSize = 20000;
	    private boolean enablePopBatchAck = false;
	    private boolean enableNotifyAfterPopOrderLockRelease = true;
	    private boolean initPopOffsetByCheckMsgInMem = true;
	    // read message from pop retry topic v1, for the compatibility, will be removed in the future version
	    private boolean retrieveMessageFromPopRetryTopicV1 = true;
	    private boolean enableRetryTopicV2 = false;
	
	    private boolean realTimeNotifyConsumerChange = true;
	
	    private boolean litePullMessageEnable = true;
	
	    // The period to sync broker member group from namesrv, default value is 1 second
	    private int syncBrokerMemberGroupPeriod = 1000;
	
	    /**
	     * the interval of pulling topic information from the named server
	     */
	    private long loadBalancePollNameServerInterval = 1000 * 30;
	
	    /**
	     * the interval of cleaning
	     */
	    private int cleanOfflineBrokerInterval = 1000 * 30;
	
	    private boolean serverLoadBalancerEnable = true;
	
	    private MessageRequestMode defaultMessageRequestMode = MessageRequestMode.PULL;
	
	    private int defaultPopShareQueueNum = -1;
	
	    /**
	     * The minimum time of the transactional message  to be checked firstly, one message only exceed this time interval
	     * that can be checked.
	     */
	    @ImportantField
	    private long transactionTimeOut = 6 * 1000;
	
	    /**
	     * The maximum number of times the message was checked, if exceed this value, this message will be discarded.
	     */
	    @ImportantField
	    private int transactionCheckMax = 15;
	
	    /**
	     * Transaction message check interval.
	     */
	    @ImportantField
	    private long transactionCheckInterval = 30 * 1000;
	
	    private long transactionMetricFlushInterval = 3 * 1000;
	
	    /**
	     * transaction batch op message
	     */
	    private int transactionOpMsgMaxSize = 4096;
	
	    private int transactionOpBatchInterval = 3000;
	
	    /**
	     * Acl feature switch
	     */
	    @ImportantField
	    private boolean aclEnable = false;
	
	    private boolean storeReplyMessageEnable = true;
	
	    private boolean enableDetailStat = true;
	
	    private boolean autoDeleteUnusedStats = false;
	
	    /**
	     * Whether to distinguish log paths when multiple brokers are deployed on the same machine
	     */
	    private boolean isolateLogEnable = false;
	
	    private long forwardTimeout = 3 * 1000;
	
	    /**
	     * Slave will act master when failover. For example, if master down, timer or transaction message which is expire in slave will
	     * put to master (master of the same process in broker container mode or other masters in cluster when enableFailoverRemotingActing is true)
	     * when enableSlaveActingMaster is true
	     */
	    private boolean enableSlaveActingMaster = false;
	
	    private boolean enableRemoteEscape = false;
	
	    private boolean skipPreOnline = false;
	
	    private boolean asyncSendEnable = true;
	
	    private boolean useServerSideResetOffset = true;
	
	    private long consumerOffsetUpdateVersionStep = 500;
	
	    private long delayOffsetUpdateVersionStep = 200;
	
	    /**
	     * Whether to lock quorum replicas.
	     *
	     * True: need to lock quorum replicas succeed. False: only need to lock one replica succeed.
	     */
	    private boolean lockInStrictMode = false;
	
	    private boolean compatibleWithOldNameSrv = true;
	
	    /**
	     * Is startup controller mode, which support auto switch broker's role.
	     */
	    private boolean enableControllerMode = false;
	
	    private String controllerAddr = "";
	
	    private boolean fetchControllerAddrByDnsLookup = false;
	
	    private long syncBrokerMetadataPeriod = 5 * 1000;
	
	    private long checkSyncStateSetPeriod = 5 * 1000;
	
	    private long syncControllerMetadataPeriod = 10 * 1000;
	
	    private long controllerHeartBeatTimeoutMills = 10 * 1000;
	
	    private boolean validateSystemTopicWhenUpdateTopic = true;
	
	    /**
	     * It is an important basis for the controller to choose the broker master.
	     * The lower the value of brokerElectionPriority, the higher the priority of the broker being selected as the master.
	     * You can set a lower priority for the broker with better machine conditions.
	     */
	    private int brokerElectionPriority = Integer.MAX_VALUE;
	
	    private boolean useStaticSubscription = false;
	
	    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;
	
	    private int metricsOtelCardinalityLimit = 50 * 1000;
	    private String metricsGrpcExporterTarget = "";
	    private String metricsGrpcExporterHeader = "";
	    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
	    private long metricGrpcExporterIntervalInMills = 60 * 1000;
	    private long metricLoggingExporterIntervalInMills = 10 * 1000;
	
	    private int metricsPromExporterPort = 5557;
	    private String metricsPromExporterHost = "";
	
	    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx
	    private String metricsLabel = "";
	
	    private boolean metricsInDelta = false;
	
	    private long channelExpiredTimeout = 1000 * 120;
	    private long subscriptionExpiredTimeout = 1000 * 60 * 10;
	
	    /**
	     * Estimate accumulation or not when subscription filter type is tag and is not SUB_ALL.
	     */
	    private boolean estimateAccumulation = true;
	
	    private boolean coldCtrStrategyEnable = false;
	    private boolean usePIDColdCtrStrategy = true;
	    private long cgColdReadThreshold = 3 * 1024 * 1024;
	    private long globalColdReadThreshold = 100 * 1024 * 1024;
	    
	    /**
	     * The interval to fetch namesrv addr, default value is 10 second
	     */
	    private long fetchNamesrvAddrInterval = 10 * 1000;
	
	    /**
	     * Pop response returns the actual retry topic rather than tampering with the original topic
	     */
	    private boolean popResponseReturnActualRetryTopic = false;
	
	    /**
	     * If both the deleteTopicWithBrokerRegistration flag in the NameServer configuration and this flag are set to true,
	     * it guarantees the ultimate consistency of data between the broker and the nameserver during topic deletion.
	     */
	    private boolean enableSingleTopicRegister = false;
	
	    private boolean enableMixedMessageType = false;
	
	    /**
	     * This flag and deleteTopicWithBrokerRegistration flag in the NameServer cannot be set to true at the same time,
	     * otherwise there will be a loss of routing
	     */
	    private boolean enableSplitRegistration = false;
	
	    private long popInflightMessageThreshold = 10000;
	    private boolean enablePopMessageThreshold = false;
	
	    private int splitRegistrationSize = 800;
	
	    /**
	     * Config in this black list will be not allowed to update by command.
	     * Try to update this config black list by restart process.
	     * Try to update configures in black list by restart process.
	     */
	    private String configBlackList = "configBlackList;brokerConfigPath";
	
	    public String getConfigBlackList() {
	        return configBlackList;
	    }
	
	    public void setConfigBlackList(String configBlackList) {
	        this.configBlackList = configBlackList;
	    }
	
	    public long getMaxPopPollingSize() {
	        return maxPopPollingSize;
	    }
	
	    public void setMaxPopPollingSize(long maxPopPollingSize) {
	        this.maxPopPollingSize = maxPopPollingSize;
	    }
	
	    public int getReviveQueueNum() {
	        return reviveQueueNum;
	    }
	
	    public void setReviveQueueNum(int reviveQueueNum) {
	        this.reviveQueueNum = reviveQueueNum;
	    }
	
	    public long getReviveInterval() {
	        return reviveInterval;
	    }
	
	    public void setReviveInterval(long reviveInterval) {
	        this.reviveInterval = reviveInterval;
	    }
	
	    public int getPopCkStayBufferTime() {
	        return popCkStayBufferTime;
	    }
	
	    public void setPopCkStayBufferTime(int popCkStayBufferTime) {
	        this.popCkStayBufferTime = popCkStayBufferTime;
	    }
	
	    public int getPopCkStayBufferTimeOut() {
	        return popCkStayBufferTimeOut;
	    }
	
	    public void setPopCkStayBufferTimeOut(int popCkStayBufferTimeOut) {
	        this.popCkStayBufferTimeOut = popCkStayBufferTimeOut;
	    }
	
	    public int getPopPollingMapSize() {
	        return popPollingMapSize;
	    }
	
	    public void setPopPollingMapSize(int popPollingMapSize) {
	        this.popPollingMapSize = popPollingMapSize;
	    }
	
	    public long getReviveScanTime() {
	        return reviveScanTime;
	    }
	
	    public void setReviveScanTime(long reviveScanTime) {
	        this.reviveScanTime = reviveScanTime;
	    }
	
	    public long getReviveMaxSlow() {
	        return reviveMaxSlow;
	    }
	
	    public void setReviveMaxSlow(long reviveMaxSlow) {
	        this.reviveMaxSlow = reviveMaxSlow;
	    }
	
	    public int getPopPollingSize() {
	        return popPollingSize;
	    }
	
	    public void setPopPollingSize(int popPollingSize) {
	        this.popPollingSize = popPollingSize;
	    }
	
	    public boolean isEnablePopBufferMerge() {
	        return enablePopBufferMerge;
	    }
	
	    public void setEnablePopBufferMerge(boolean enablePopBufferMerge) {
	        this.enablePopBufferMerge = enablePopBufferMerge;
	    }
	
	    public int getPopCkMaxBufferSize() {
	        return popCkMaxBufferSize;
	    }
	
	    public void setPopCkMaxBufferSize(int popCkMaxBufferSize) {
	        this.popCkMaxBufferSize = popCkMaxBufferSize;
	    }
	
	    public int getPopCkOffsetMaxQueueSize() {
	        return popCkOffsetMaxQueueSize;
	    }
	
	    public void setPopCkOffsetMaxQueueSize(int popCkOffsetMaxQueueSize) {
	        this.popCkOffsetMaxQueueSize = popCkOffsetMaxQueueSize;
	    }
	
	    public boolean isEnablePopBatchAck() {
	        return enablePopBatchAck;
	    }
	
	    public void setEnablePopBatchAck(boolean enablePopBatchAck) {
	        this.enablePopBatchAck = enablePopBatchAck;
	    }
	
	    public boolean isEnableSkipLongAwaitingAck() {
	        return enableSkipLongAwaitingAck;
	    }
	
	    public void setEnableSkipLongAwaitingAck(boolean enableSkipLongAwaitingAck) {
	        this.enableSkipLongAwaitingAck = enableSkipLongAwaitingAck;
	    }
	
	    public long getReviveAckWaitMs() {
	        return reviveAckWaitMs;
	    }
	
	    public void setReviveAckWaitMs(long reviveAckWaitMs) {
	        this.reviveAckWaitMs = reviveAckWaitMs;
	    }
	
	    public boolean isEnablePopLog() {
	        return enablePopLog;
	    }
	
	    public void setEnablePopLog(boolean enablePopLog) {
	        this.enablePopLog = enablePopLog;
	    }
	
	    public boolean isTraceOn() {
	        return traceOn;
	    }
	
	    public void setTraceOn(final boolean traceOn) {
	        this.traceOn = traceOn;
	    }
	
	    public long getStartAcceptSendRequestTimeStamp() {
	        return startAcceptSendRequestTimeStamp;
	    }
	
	    public void setStartAcceptSendRequestTimeStamp(final long startAcceptSendRequestTimeStamp) {
	        this.startAcceptSendRequestTimeStamp = startAcceptSendRequestTimeStamp;
	    }
	
	    public long getWaitTimeMillsInSendQueue() {
	        return waitTimeMillsInSendQueue;
	    }
	
	    public void setWaitTimeMillsInSendQueue(final long waitTimeMillsInSendQueue) {
	        this.waitTimeMillsInSendQueue = waitTimeMillsInSendQueue;
	    }
	
	    public long getConsumerFallbehindThreshold() {
	        return consumerFallbehindThreshold;
	    }
	
	    public void setConsumerFallbehindThreshold(final long consumerFallbehindThreshold) {
	        this.consumerFallbehindThreshold = consumerFallbehindThreshold;
	    }
	
	    public boolean isBrokerFastFailureEnable() {
	        return brokerFastFailureEnable;
	    }
	
	    public void setBrokerFastFailureEnable(final boolean brokerFastFailureEnable) {
	        this.brokerFastFailureEnable = brokerFastFailureEnable;
	    }
	
	    public long getWaitTimeMillsInPullQueue() {
	        return waitTimeMillsInPullQueue;
	    }
	
	    public void setWaitTimeMillsInPullQueue(final long waitTimeMillsInPullQueue) {
	        this.waitTimeMillsInPullQueue = waitTimeMillsInPullQueue;
	    }
	
	    public boolean isDisableConsumeIfConsumerReadSlowly() {
	        return disableConsumeIfConsumerReadSlowly;
	    }
	
	    public void setDisableConsumeIfConsumerReadSlowly(final boolean disableConsumeIfConsumerReadSlowly) {
	        this.disableConsumeIfConsumerReadSlowly = disableConsumeIfConsumerReadSlowly;
	    }
	
	    public boolean isSlaveReadEnable() {
	        return slaveReadEnable;
	    }
	
	    public void setSlaveReadEnable(final boolean slaveReadEnable) {
	        this.slaveReadEnable = slaveReadEnable;
	    }
	
	    public int getRegisterBrokerTimeoutMills() {
	        return registerBrokerTimeoutMills;
	    }
	
	    public void setRegisterBrokerTimeoutMills(final int registerBrokerTimeoutMills) {
	        this.registerBrokerTimeoutMills = registerBrokerTimeoutMills;
	    }
	
	    public String getRegionId() {
	        return regionId;
	    }
	
	    public void setRegionId(final String regionId) {
	        this.regionId = regionId;
	    }
	
	    public boolean isTransferMsgByHeap() {
	        return transferMsgByHeap;
	    }
	
	    public void setTransferMsgByHeap(final boolean transferMsgByHeap) {
	        this.transferMsgByHeap = transferMsgByHeap;
	    }
	
	    public String getMessageStorePlugIn() {
	        return messageStorePlugIn;
	    }
	
	    public void setMessageStorePlugIn(String messageStorePlugIn) {
	        this.messageStorePlugIn = messageStorePlugIn;
	    }
	
	    public boolean isHighSpeedMode() {
	        return highSpeedMode;
	    }
	
	    public void setHighSpeedMode(final boolean highSpeedMode) {
	        this.highSpeedMode = highSpeedMode;
	    }
	
	    public int getBrokerPermission() {
	        return brokerPermission;
	    }
	
	    public void setBrokerPermission(int brokerPermission) {
	        this.brokerPermission = brokerPermission;
	    }
	
	    public int getDefaultTopicQueueNums() {
	        return defaultTopicQueueNums;
	    }
	
	    public void setDefaultTopicQueueNums(int defaultTopicQueueNums) {
	        this.defaultTopicQueueNums = defaultTopicQueueNums;
	    }
	
	    public boolean isAutoCreateTopicEnable() {
	        return autoCreateTopicEnable;
	    }
	
	    public void setAutoCreateTopicEnable(boolean autoCreateTopic) {
	        this.autoCreateTopicEnable = autoCreateTopic;
	    }
	
	    public String getBrokerIP1() {
	        return brokerIP1;
	    }
	
	    public void setBrokerIP1(String brokerIP1) {
	        this.brokerIP1 = brokerIP1;
	    }
	
	    public String getBrokerIP2() {
	        return brokerIP2;
	    }
	
	    public void setBrokerIP2(String brokerIP2) {
	        this.brokerIP2 = brokerIP2;
	    }
	
	    public int getSendMessageThreadPoolNums() {
	        return sendMessageThreadPoolNums;
	    }
	
	    public void setSendMessageThreadPoolNums(int sendMessageThreadPoolNums) {
	        this.sendMessageThreadPoolNums = sendMessageThreadPoolNums;
	    }
	
	    public int getPutMessageFutureThreadPoolNums() {
	        return putMessageFutureThreadPoolNums;
	    }
	
	    public void setPutMessageFutureThreadPoolNums(int putMessageFutureThreadPoolNums) {
	        this.putMessageFutureThreadPoolNums = putMessageFutureThreadPoolNums;
	    }
	
	    public int getPullMessageThreadPoolNums() {
	        return pullMessageThreadPoolNums;
	    }
	
	    public void setPullMessageThreadPoolNums(int pullMessageThreadPoolNums) {
	        this.pullMessageThreadPoolNums = pullMessageThreadPoolNums;
	    }
	
	    public int getAckMessageThreadPoolNums() {
	        return ackMessageThreadPoolNums;
	    }
	
	    public void setAckMessageThreadPoolNums(int ackMessageThreadPoolNums) {
	        this.ackMessageThreadPoolNums = ackMessageThreadPoolNums;
	    }
	
	    public int getProcessReplyMessageThreadPoolNums() {
	        return processReplyMessageThreadPoolNums;
	    }
	
	    public void setProcessReplyMessageThreadPoolNums(int processReplyMessageThreadPoolNums) {
	        this.processReplyMessageThreadPoolNums = processReplyMessageThreadPoolNums;
	    }
	
	    public int getQueryMessageThreadPoolNums() {
	        return queryMessageThreadPoolNums;
	    }
	
	    public void setQueryMessageThreadPoolNums(final int queryMessageThreadPoolNums) {
	        this.queryMessageThreadPoolNums = queryMessageThreadPoolNums;
	    }
	
	    public int getAdminBrokerThreadPoolNums() {
	        return adminBrokerThreadPoolNums;
	    }
	
	    public void setAdminBrokerThreadPoolNums(int adminBrokerThreadPoolNums) {
	        this.adminBrokerThreadPoolNums = adminBrokerThreadPoolNums;
	    }
	
	    public int getFlushConsumerOffsetInterval() {
	        return flushConsumerOffsetInterval;
	    }
	
	    public void setFlushConsumerOffsetInterval(int flushConsumerOffsetInterval) {
	        this.flushConsumerOffsetInterval = flushConsumerOffsetInterval;
	    }
	
	    public int getFlushConsumerOffsetHistoryInterval() {
	        return flushConsumerOffsetHistoryInterval;
	    }
	
	    public void setFlushConsumerOffsetHistoryInterval(int flushConsumerOffsetHistoryInterval) {
	        this.flushConsumerOffsetHistoryInterval = flushConsumerOffsetHistoryInterval;
	    }
	
	    public boolean isClusterTopicEnable() {
	        return clusterTopicEnable;
	    }
	
	    public void setClusterTopicEnable(boolean clusterTopicEnable) {
	        this.clusterTopicEnable = clusterTopicEnable;
	    }
	
	    public String getNamesrvAddr() {
	        return namesrvAddr;
	    }
	
	    public void setNamesrvAddr(String namesrvAddr) {
	        this.namesrvAddr = namesrvAddr;
	    }
	
	    public boolean isAutoCreateSubscriptionGroup() {
	        return autoCreateSubscriptionGroup;
	    }
	
	    public void setAutoCreateSubscriptionGroup(boolean autoCreateSubscriptionGroup) {
	        this.autoCreateSubscriptionGroup = autoCreateSubscriptionGroup;
	    }
	
	    public String getBrokerConfigPath() {
	        return brokerConfigPath;
	    }
	
	    public void setBrokerConfigPath(String brokerConfigPath) {
	        this.brokerConfigPath = brokerConfigPath;
	    }
	
	    public String getRocketmqHome() {
	        return rocketmqHome;
	    }
	
	    public void setRocketmqHome(String rocketmqHome) {
	        this.rocketmqHome = rocketmqHome;
	    }
	
	    public int getListenPort() {
	        return listenPort;
	    }
	
	    public void setListenPort(int listenPort) {
	        this.listenPort = listenPort;
	    }
	
	    public int getLitePullMessageThreadPoolNums() {
	        return litePullMessageThreadPoolNums;
	    }
	
	    public void setLitePullMessageThreadPoolNums(int litePullMessageThreadPoolNums) {
	        this.litePullMessageThreadPoolNums = litePullMessageThreadPoolNums;
	    }
	
	    public int getLitePullThreadPoolQueueCapacity() {
	        return litePullThreadPoolQueueCapacity;
	    }
	
	    public void setLitePullThreadPoolQueueCapacity(int litePullThreadPoolQueueCapacity) {
	        this.litePullThreadPoolQueueCapacity = litePullThreadPoolQueueCapacity;
	    }
	
	    public int getAdminBrokerThreadPoolQueueCapacity() {
	        return adminBrokerThreadPoolQueueCapacity;
	    }
	
	    public void setAdminBrokerThreadPoolQueueCapacity(int adminBrokerThreadPoolQueueCapacity) {
	        this.adminBrokerThreadPoolQueueCapacity = adminBrokerThreadPoolQueueCapacity;
	    }
	
	    public int getLoadBalanceThreadPoolQueueCapacity() {
	        return loadBalanceThreadPoolQueueCapacity;
	    }
	
	    public void setLoadBalanceThreadPoolQueueCapacity(int loadBalanceThreadPoolQueueCapacity) {
	        this.loadBalanceThreadPoolQueueCapacity = loadBalanceThreadPoolQueueCapacity;
	    }
	
	    public int getSendHeartbeatTimeoutMillis() {
	        return sendHeartbeatTimeoutMillis;
	    }
	
	    public void setSendHeartbeatTimeoutMillis(int sendHeartbeatTimeoutMillis) {
	        this.sendHeartbeatTimeoutMillis = sendHeartbeatTimeoutMillis;
	    }
	
	    public long getWaitTimeMillsInLitePullQueue() {
	        return waitTimeMillsInLitePullQueue;
	    }
	
	    public void setWaitTimeMillsInLitePullQueue(long waitTimeMillsInLitePullQueue) {
	        this.waitTimeMillsInLitePullQueue = waitTimeMillsInLitePullQueue;
	    }
	
	    public boolean isLitePullMessageEnable() {
	        return litePullMessageEnable;
	    }
	
	    public void setLitePullMessageEnable(boolean litePullMessageEnable) {
	        this.litePullMessageEnable = litePullMessageEnable;
	    }
	
	    public int getSyncBrokerMemberGroupPeriod() {
	        return syncBrokerMemberGroupPeriod;
	    }
	
	    public void setSyncBrokerMemberGroupPeriod(int syncBrokerMemberGroupPeriod) {
	        this.syncBrokerMemberGroupPeriod = syncBrokerMemberGroupPeriod;
	    }
	
	    public boolean isRejectTransactionMessage() {
	        return rejectTransactionMessage;
	    }
	
	    public void setRejectTransactionMessage(boolean rejectTransactionMessage) {
	        this.rejectTransactionMessage = rejectTransactionMessage;
	    }
	
	    public boolean isFetchNamesrvAddrByAddressServer() {
	        return fetchNamesrvAddrByAddressServer;
	    }
	
	    public void setFetchNamesrvAddrByAddressServer(boolean fetchNamesrvAddrByAddressServer) {
	        this.fetchNamesrvAddrByAddressServer = fetchNamesrvAddrByAddressServer;
	    }
	
	    public int getSendThreadPoolQueueCapacity() {
	        return sendThreadPoolQueueCapacity;
	    }
	
	    public void setSendThreadPoolQueueCapacity(int sendThreadPoolQueueCapacity) {
	        this.sendThreadPoolQueueCapacity = sendThreadPoolQueueCapacity;
	    }
	
	    public int getPutThreadPoolQueueCapacity() {
	        return putThreadPoolQueueCapacity;
	    }
	
	    public void setPutThreadPoolQueueCapacity(int putThreadPoolQueueCapacity) {
	        this.putThreadPoolQueueCapacity = putThreadPoolQueueCapacity;
	    }
	
	    public int getPullThreadPoolQueueCapacity() {
	        return pullThreadPoolQueueCapacity;
	    }
	
	    public void setPullThreadPoolQueueCapacity(int pullThreadPoolQueueCapacity) {
	        this.pullThreadPoolQueueCapacity = pullThreadPoolQueueCapacity;
	    }
	
	    public int getAckThreadPoolQueueCapacity() {
	        return ackThreadPoolQueueCapacity;
	    }
	
	    public void setAckThreadPoolQueueCapacity(int ackThreadPoolQueueCapacity) {
	        this.ackThreadPoolQueueCapacity = ackThreadPoolQueueCapacity;
	    }
	
	    public int getReplyThreadPoolQueueCapacity() {
	        return replyThreadPoolQueueCapacity;
	    }
	
	    public void setReplyThreadPoolQueueCapacity(int replyThreadPoolQueueCapacity) {
	        this.replyThreadPoolQueueCapacity = replyThreadPoolQueueCapacity;
	    }
	
	    public int getQueryThreadPoolQueueCapacity() {
	        return queryThreadPoolQueueCapacity;
	    }
	
	    public void setQueryThreadPoolQueueCapacity(final int queryThreadPoolQueueCapacity) {
	        this.queryThreadPoolQueueCapacity = queryThreadPoolQueueCapacity;
	    }
	
	    public boolean isBrokerTopicEnable() {
	        return brokerTopicEnable;
	    }
	
	    public void setBrokerTopicEnable(boolean brokerTopicEnable) {
	        this.brokerTopicEnable = brokerTopicEnable;
	    }
	
	    public boolean isLongPollingEnable() {
	        return longPollingEnable;
	    }
	
	    public void setLongPollingEnable(boolean longPollingEnable) {
	        this.longPollingEnable = longPollingEnable;
	    }
	
	    public boolean isNotifyConsumerIdsChangedEnable() {
	        return notifyConsumerIdsChangedEnable;
	    }
	
	    public void setNotifyConsumerIdsChangedEnable(boolean notifyConsumerIdsChangedEnable) {
	        this.notifyConsumerIdsChangedEnable = notifyConsumerIdsChangedEnable;
	    }
	
	    public long getShortPollingTimeMills() {
	        return shortPollingTimeMills;
	    }
	
	    public void setShortPollingTimeMills(long shortPollingTimeMills) {
	        this.shortPollingTimeMills = shortPollingTimeMills;
	    }
	
	    public int getClientManageThreadPoolNums() {
	        return clientManageThreadPoolNums;
	    }
	
	    public void setClientManageThreadPoolNums(int clientManageThreadPoolNums) {
	        this.clientManageThreadPoolNums = clientManageThreadPoolNums;
	    }
	
	    public int getClientManagerThreadPoolQueueCapacity() {
	        return clientManagerThreadPoolQueueCapacity;
	    }
	
	    public void setClientManagerThreadPoolQueueCapacity(int clientManagerThreadPoolQueueCapacity) {
	        this.clientManagerThreadPoolQueueCapacity = clientManagerThreadPoolQueueCapacity;
	    }
	
	    public int getConsumerManagerThreadPoolQueueCapacity() {
	        return consumerManagerThreadPoolQueueCapacity;
	    }
	
	    public void setConsumerManagerThreadPoolQueueCapacity(int consumerManagerThreadPoolQueueCapacity) {
	        this.consumerManagerThreadPoolQueueCapacity = consumerManagerThreadPoolQueueCapacity;
	    }
	
	    public int getConsumerManageThreadPoolNums() {
	        return consumerManageThreadPoolNums;
	    }
	
	    public void setConsumerManageThreadPoolNums(int consumerManageThreadPoolNums) {
	        this.consumerManageThreadPoolNums = consumerManageThreadPoolNums;
	    }
	
	    public int getCommercialBaseCount() {
	        return commercialBaseCount;
	    }
	
	    public void setCommercialBaseCount(int commercialBaseCount) {
	        this.commercialBaseCount = commercialBaseCount;
	    }
	
	    public boolean isEnableCalcFilterBitMap() {
	        return enableCalcFilterBitMap;
	    }
	
	    public void setEnableCalcFilterBitMap(boolean enableCalcFilterBitMap) {
	        this.enableCalcFilterBitMap = enableCalcFilterBitMap;
	    }
	
	    public int getExpectConsumerNumUseFilter() {
	        return expectConsumerNumUseFilter;
	    }
	
	    public void setExpectConsumerNumUseFilter(int expectConsumerNumUseFilter) {
	        this.expectConsumerNumUseFilter = expectConsumerNumUseFilter;
	    }
	
	    public int getMaxErrorRateOfBloomFilter() {
	        return maxErrorRateOfBloomFilter;
	    }
	
	    public void setMaxErrorRateOfBloomFilter(int maxErrorRateOfBloomFilter) {
	        this.maxErrorRateOfBloomFilter = maxErrorRateOfBloomFilter;
	    }
	
	    public long getFilterDataCleanTimeSpan() {
	        return filterDataCleanTimeSpan;
	    }
	
	    public void setFilterDataCleanTimeSpan(long filterDataCleanTimeSpan) {
	        this.filterDataCleanTimeSpan = filterDataCleanTimeSpan;
	    }
	
	    public boolean isFilterSupportRetry() {
	        return filterSupportRetry;
	    }
	
	    public void setFilterSupportRetry(boolean filterSupportRetry) {
	        this.filterSupportRetry = filterSupportRetry;
	    }
	
	    public boolean isEnablePropertyFilter() {
	        return enablePropertyFilter;
	    }
	
	    public void setEnablePropertyFilter(boolean enablePropertyFilter) {
	        this.enablePropertyFilter = enablePropertyFilter;
	    }
	
	    public boolean isCompressedRegister() {
	        return compressedRegister;
	    }
	
	    public void setCompressedRegister(boolean compressedRegister) {
	        this.compressedRegister = compressedRegister;
	    }
	
	    public boolean isForceRegister() {
	        return forceRegister;
	    }
	
	    public void setForceRegister(boolean forceRegister) {
	        this.forceRegister = forceRegister;
	    }
	
	    public int getHeartbeatThreadPoolQueueCapacity() {
	        return heartbeatThreadPoolQueueCapacity;
	    }
	
	    public void setHeartbeatThreadPoolQueueCapacity(int heartbeatThreadPoolQueueCapacity) {
	        this.heartbeatThreadPoolQueueCapacity = heartbeatThreadPoolQueueCapacity;
	    }
	
	    public int getHeartbeatThreadPoolNums() {
	        return heartbeatThreadPoolNums;
	    }
	
	    public void setHeartbeatThreadPoolNums(int heartbeatThreadPoolNums) {
	        this.heartbeatThreadPoolNums = heartbeatThreadPoolNums;
	    }
	
	    public long getWaitTimeMillsInHeartbeatQueue() {
	        return waitTimeMillsInHeartbeatQueue;
	    }
	
	    public void setWaitTimeMillsInHeartbeatQueue(long waitTimeMillsInHeartbeatQueue) {
	        this.waitTimeMillsInHeartbeatQueue = waitTimeMillsInHeartbeatQueue;
	    }
	
	    public int getRegisterNameServerPeriod() {
	        return registerNameServerPeriod;
	    }
	
	    public void setRegisterNameServerPeriod(int registerNameServerPeriod) {
	        this.registerNameServerPeriod = registerNameServerPeriod;
	    }
	
	    public long getTransactionTimeOut() {
	        return transactionTimeOut;
	    }
	
	    public void setTransactionTimeOut(long transactionTimeOut) {
	        this.transactionTimeOut = transactionTimeOut;
	    }
	
	    public int getTransactionCheckMax() {
	        return transactionCheckMax;
	    }
	
	    public void setTransactionCheckMax(int transactionCheckMax) {
	        this.transactionCheckMax = transactionCheckMax;
	    }
	
	    public long getTransactionCheckInterval() {
	        return transactionCheckInterval;
	    }
	
	    public void setTransactionCheckInterval(long transactionCheckInterval) {
	        this.transactionCheckInterval = transactionCheckInterval;
	    }
	
	    public int getEndTransactionThreadPoolNums() {
	        return endTransactionThreadPoolNums;
	    }
	
	    public void setEndTransactionThreadPoolNums(int endTransactionThreadPoolNums) {
	        this.endTransactionThreadPoolNums = endTransactionThreadPoolNums;
	    }
	
	    public int getEndTransactionPoolQueueCapacity() {
	        return endTransactionPoolQueueCapacity;
	    }
	
	    public void setEndTransactionPoolQueueCapacity(int endTransactionPoolQueueCapacity) {
	        this.endTransactionPoolQueueCapacity = endTransactionPoolQueueCapacity;
	    }
	
	    public long getWaitTimeMillsInTransactionQueue() {
	        return waitTimeMillsInTransactionQueue;
	    }
	
	    public void setWaitTimeMillsInTransactionQueue(long waitTimeMillsInTransactionQueue) {
	        this.waitTimeMillsInTransactionQueue = waitTimeMillsInTransactionQueue;
	    }
	
	    public String getMsgTraceTopicName() {
	        return msgTraceTopicName;
	    }
	
	    public void setMsgTraceTopicName(String msgTraceTopicName) {
	        this.msgTraceTopicName = msgTraceTopicName;
	    }
	
	    public boolean isTraceTopicEnable() {
	        return traceTopicEnable;
	    }
	
	    public void setTraceTopicEnable(boolean traceTopicEnable) {
	        this.traceTopicEnable = traceTopicEnable;
	    }
	
	    public boolean isAclEnable() {
	        return aclEnable;
	    }
	
	    public void setAclEnable(boolean aclEnable) {
	        this.aclEnable = aclEnable;
	    }
	
	    public boolean isStoreReplyMessageEnable() {
	        return storeReplyMessageEnable;
	    }
	
	    public void setStoreReplyMessageEnable(boolean storeReplyMessageEnable) {
	        this.storeReplyMessageEnable = storeReplyMessageEnable;
	    }
	
	    public boolean isEnableDetailStat() {
	        return enableDetailStat;
	    }
	
	    public void setEnableDetailStat(boolean enableDetailStat) {
	        this.enableDetailStat = enableDetailStat;
	    }
	
	    public boolean isAutoDeleteUnusedStats() {
	        return autoDeleteUnusedStats;
	    }
	
	    public void setAutoDeleteUnusedStats(boolean autoDeleteUnusedStats) {
	        this.autoDeleteUnusedStats = autoDeleteUnusedStats;
	    }
	
	    public long getLoadBalancePollNameServerInterval() {
	        return loadBalancePollNameServerInterval;
	    }
	
	    public void setLoadBalancePollNameServerInterval(long loadBalancePollNameServerInterval) {
	        this.loadBalancePollNameServerInterval = loadBalancePollNameServerInterval;
	    }
	
	    public int getCleanOfflineBrokerInterval() {
	        return cleanOfflineBrokerInterval;
	    }
	
	    public void setCleanOfflineBrokerInterval(int cleanOfflineBrokerInterval) {
	        this.cleanOfflineBrokerInterval = cleanOfflineBrokerInterval;
	    }
	
	    public int getLoadBalanceProcessorThreadPoolNums() {
	        return loadBalanceProcessorThreadPoolNums;
	    }
	
	    public void setLoadBalanceProcessorThreadPoolNums(int loadBalanceProcessorThreadPoolNums) {
	        this.loadBalanceProcessorThreadPoolNums = loadBalanceProcessorThreadPoolNums;
	    }
	
	    public boolean isServerLoadBalancerEnable() {
	        return serverLoadBalancerEnable;
	    }
	
	    public void setServerLoadBalancerEnable(boolean serverLoadBalancerEnable) {
	        this.serverLoadBalancerEnable = serverLoadBalancerEnable;
	    }
	
	    public MessageRequestMode getDefaultMessageRequestMode() {
	        return defaultMessageRequestMode;
	    }
	
	    public void setDefaultMessageRequestMode(String defaultMessageRequestMode) {
	        this.defaultMessageRequestMode = MessageRequestMode.valueOf(defaultMessageRequestMode);
	    }
	
	    public int getDefaultPopShareQueueNum() {
	        return defaultPopShareQueueNum;
	    }
	
	    public void setDefaultPopShareQueueNum(int defaultPopShareQueueNum) {
	        this.defaultPopShareQueueNum = defaultPopShareQueueNum;
	    }
	
	    public long getForwardTimeout() {
	        return forwardTimeout;
	    }
	
	    public void setForwardTimeout(long timeout) {
	        this.forwardTimeout = timeout;
	    }
	
	    public int getBrokerHeartbeatInterval() {
	        return brokerHeartbeatInterval;
	    }
	
	    public void setBrokerHeartbeatInterval(int brokerHeartbeatInterval) {
	        this.brokerHeartbeatInterval = brokerHeartbeatInterval;
	    }
	
	    public long getBrokerNotActiveTimeoutMillis() {
	        return brokerNotActiveTimeoutMillis;
	    }
	
	    public void setBrokerNotActiveTimeoutMillis(long brokerNotActiveTimeoutMillis) {
	        this.brokerNotActiveTimeoutMillis = brokerNotActiveTimeoutMillis;
	    }
	
	    public boolean isEnableNetWorkFlowControl() {
	        return enableNetWorkFlowControl;
	    }
	
	    public void setEnableNetWorkFlowControl(boolean enableNetWorkFlowControl) {
	        this.enableNetWorkFlowControl = enableNetWorkFlowControl;
	    }
	
	    public boolean isEnableNotifyAfterPopOrderLockRelease() {
	        return enableNotifyAfterPopOrderLockRelease;
	    }
	
	    public void setEnableNotifyAfterPopOrderLockRelease(boolean enableNotifyAfterPopOrderLockRelease) {
	        this.enableNotifyAfterPopOrderLockRelease = enableNotifyAfterPopOrderLockRelease;
	    }
	
	    public boolean isInitPopOffsetByCheckMsgInMem() {
	        return initPopOffsetByCheckMsgInMem;
	    }
	
	    public void setInitPopOffsetByCheckMsgInMem(boolean initPopOffsetByCheckMsgInMem) {
	        this.initPopOffsetByCheckMsgInMem = initPopOffsetByCheckMsgInMem;
	    }
	
	    public boolean isRetrieveMessageFromPopRetryTopicV1() {
	        return retrieveMessageFromPopRetryTopicV1;
	    }
	
	    public void setRetrieveMessageFromPopRetryTopicV1(boolean retrieveMessageFromPopRetryTopicV1) {
	        this.retrieveMessageFromPopRetryTopicV1 = retrieveMessageFromPopRetryTopicV1;
	    }
	
	    public boolean isEnableRetryTopicV2() {
	        return enableRetryTopicV2;
	    }
	
	    public void setEnableRetryTopicV2(boolean enableRetryTopicV2) {
	        this.enableRetryTopicV2 = enableRetryTopicV2;
	    }
	
	    public boolean isRealTimeNotifyConsumerChange() {
	        return realTimeNotifyConsumerChange;
	    }
	
	    public void setRealTimeNotifyConsumerChange(boolean realTimeNotifyConsumerChange) {
	        this.realTimeNotifyConsumerChange = realTimeNotifyConsumerChange;
	    }
	
	    public boolean isEnableSlaveActingMaster() {
	        return enableSlaveActingMaster;
	    }
	
	    public void setEnableSlaveActingMaster(boolean enableSlaveActingMaster) {
	        this.enableSlaveActingMaster = enableSlaveActingMaster;
	    }
	
	    public boolean isEnableRemoteEscape() {
	        return enableRemoteEscape;
	    }
	
	    public void setEnableRemoteEscape(boolean enableRemoteEscape) {
	        this.enableRemoteEscape = enableRemoteEscape;
	    }
	
	    public boolean isSkipPreOnline() {
	        return skipPreOnline;
	    }
	
	    public void setSkipPreOnline(boolean skipPreOnline) {
	        this.skipPreOnline = skipPreOnline;
	    }
	
	    public boolean isAsyncSendEnable() {
	        return asyncSendEnable;
	    }
	
	    public void setAsyncSendEnable(boolean asyncSendEnable) {
	        this.asyncSendEnable = asyncSendEnable;
	    }
	
	    public long getConsumerOffsetUpdateVersionStep() {
	        return consumerOffsetUpdateVersionStep;
	    }
	
	    public void setConsumerOffsetUpdateVersionStep(long consumerOffsetUpdateVersionStep) {
	        this.consumerOffsetUpdateVersionStep = consumerOffsetUpdateVersionStep;
	    }
	
	    public long getDelayOffsetUpdateVersionStep() {
	        return delayOffsetUpdateVersionStep;
	    }
	
	    public void setDelayOffsetUpdateVersionStep(long delayOffsetUpdateVersionStep) {
	        this.delayOffsetUpdateVersionStep = delayOffsetUpdateVersionStep;
	    }
	
	    public int getCommercialSizePerMsg() {
	        return commercialSizePerMsg;
	    }
	
	    public void setCommercialSizePerMsg(int commercialSizePerMsg) {
	        this.commercialSizePerMsg = commercialSizePerMsg;
	    }
	
	    public long getWaitTimeMillsInAckQueue() {
	        return waitTimeMillsInAckQueue;
	    }
	
	    public void setWaitTimeMillsInAckQueue(long waitTimeMillsInAckQueue) {
	        this.waitTimeMillsInAckQueue = waitTimeMillsInAckQueue;
	    }
	
	    public boolean isRejectPullConsumerEnable() {
	        return rejectPullConsumerEnable;
	    }
	
	    public void setRejectPullConsumerEnable(boolean rejectPullConsumerEnable) {
	        this.rejectPullConsumerEnable = rejectPullConsumerEnable;
	    }
	
	    public boolean isAccountStatsEnable() {
	        return accountStatsEnable;
	    }
	
	    public void setAccountStatsEnable(boolean accountStatsEnable) {
	        this.accountStatsEnable = accountStatsEnable;
	    }
	
	    public boolean isAccountStatsPrintZeroValues() {
	        return accountStatsPrintZeroValues;
	    }
	
	    public void setAccountStatsPrintZeroValues(boolean accountStatsPrintZeroValues) {
	        this.accountStatsPrintZeroValues = accountStatsPrintZeroValues;
	    }
	
	    public boolean isLockInStrictMode() {
	        return lockInStrictMode;
	    }
	
	    public void setLockInStrictMode(boolean lockInStrictMode) {
	        this.lockInStrictMode = lockInStrictMode;
	    }
	
	    public boolean isIsolateLogEnable() {
	        return isolateLogEnable;
	    }
	
	    public void setIsolateLogEnable(boolean isolateLogEnable) {
	        this.isolateLogEnable = isolateLogEnable;
	    }
	
	    public boolean isCompatibleWithOldNameSrv() {
	        return compatibleWithOldNameSrv;
	    }
	
	    public void setCompatibleWithOldNameSrv(boolean compatibleWithOldNameSrv) {
	        this.compatibleWithOldNameSrv = compatibleWithOldNameSrv;
	    }
	
	    public boolean isEnableControllerMode() {
	        return enableControllerMode;
	    }
	
	    public void setEnableControllerMode(boolean enableControllerMode) {
	        this.enableControllerMode = enableControllerMode;
	    }
	
	    public String getControllerAddr() {
	        return controllerAddr;
	    }
	
	    public void setControllerAddr(String controllerAddr) {
	        this.controllerAddr = controllerAddr;
	    }
	
	    public boolean isFetchControllerAddrByDnsLookup() {
	        return fetchControllerAddrByDnsLookup;
	    }
	
	    public void setFetchControllerAddrByDnsLookup(boolean fetchControllerAddrByDnsLookup) {
	        this.fetchControllerAddrByDnsLookup = fetchControllerAddrByDnsLookup;
	    }
	
	    public long getSyncBrokerMetadataPeriod() {
	        return syncBrokerMetadataPeriod;
	    }
	
	    public void setSyncBrokerMetadataPeriod(long syncBrokerMetadataPeriod) {
	        this.syncBrokerMetadataPeriod = syncBrokerMetadataPeriod;
	    }
	
	    public long getCheckSyncStateSetPeriod() {
	        return checkSyncStateSetPeriod;
	    }
	
	    public void setCheckSyncStateSetPeriod(long checkSyncStateSetPeriod) {
	        this.checkSyncStateSetPeriod = checkSyncStateSetPeriod;
	    }
	
	    public long getSyncControllerMetadataPeriod() {
	        return syncControllerMetadataPeriod;
	    }
	
	    public void setSyncControllerMetadataPeriod(long syncControllerMetadataPeriod) {
	        this.syncControllerMetadataPeriod = syncControllerMetadataPeriod;
	    }
	
	    public int getBrokerElectionPriority() {
	        return brokerElectionPriority;
	    }
	
	    public void setBrokerElectionPriority(int brokerElectionPriority) {
	        this.brokerElectionPriority = brokerElectionPriority;
	    }
	
	    public long getControllerHeartBeatTimeoutMills() {
	        return controllerHeartBeatTimeoutMills;
	    }
	
	    public void setControllerHeartBeatTimeoutMills(long controllerHeartBeatTimeoutMills) {
	        this.controllerHeartBeatTimeoutMills = controllerHeartBeatTimeoutMills;
	    }
	
	    public boolean isRecoverConcurrently() {
	        return recoverConcurrently;
	    }
	
	    public void setRecoverConcurrently(boolean recoverConcurrently) {
	        this.recoverConcurrently = recoverConcurrently;
	    }
	
	    public int getRecoverThreadPoolNums() {
	        return recoverThreadPoolNums;
	    }
	
	    public void setRecoverThreadPoolNums(int recoverThreadPoolNums) {
	        this.recoverThreadPoolNums = recoverThreadPoolNums;
	    }
	
	    public boolean isFetchNameSrvAddrByDnsLookup() {
	        return fetchNameSrvAddrByDnsLookup;
	    }
	
	    public void setFetchNameSrvAddrByDnsLookup(boolean fetchNameSrvAddrByDnsLookup) {
	        this.fetchNameSrvAddrByDnsLookup = fetchNameSrvAddrByDnsLookup;
	    }
	
	    public boolean isUseServerSideResetOffset() {
	        return useServerSideResetOffset;
	    }
	
	    public void setUseServerSideResetOffset(boolean useServerSideResetOffset) {
	        this.useServerSideResetOffset = useServerSideResetOffset;
	    }
	
	    public boolean isEnableBroadcastOffsetStore() {
	        return enableBroadcastOffsetStore;
	    }
	
	    public void setEnableBroadcastOffsetStore(boolean enableBroadcastOffsetStore) {
	        this.enableBroadcastOffsetStore = enableBroadcastOffsetStore;
	    }
	
	    public long getBroadcastOffsetExpireSecond() {
	        return broadcastOffsetExpireSecond;
	    }
	
	    public void setBroadcastOffsetExpireSecond(long broadcastOffsetExpireSecond) {
	        this.broadcastOffsetExpireSecond = broadcastOffsetExpireSecond;
	    }
	
	    public long getBroadcastOffsetExpireMaxSecond() {
	        return broadcastOffsetExpireMaxSecond;
	    }
	
	    public void setBroadcastOffsetExpireMaxSecond(long broadcastOffsetExpireMaxSecond) {
	        this.broadcastOffsetExpireMaxSecond = broadcastOffsetExpireMaxSecond;
	    }
	
	    public MetricsExporterType getMetricsExporterType() {
	        return metricsExporterType;
	    }
	
	    public void setMetricsExporterType(MetricsExporterType metricsExporterType) {
	        this.metricsExporterType = metricsExporterType;
	    }
	
	    public void setMetricsExporterType(int metricsExporterType) {
	        this.metricsExporterType = MetricsExporterType.valueOf(metricsExporterType);
	    }
	
	    public void setMetricsExporterType(String metricsExporterType) {
	        this.metricsExporterType = MetricsExporterType.valueOf(metricsExporterType);
	    }
	
	    public int getMetricsOtelCardinalityLimit() {
	        return metricsOtelCardinalityLimit;
	    }
	
	    public void setMetricsOtelCardinalityLimit(int metricsOtelCardinalityLimit) {
	        this.metricsOtelCardinalityLimit = metricsOtelCardinalityLimit;
	    }
	
	    public String getMetricsGrpcExporterTarget() {
	        return metricsGrpcExporterTarget;
	    }
	
	    public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {
	        this.metricsGrpcExporterTarget = metricsGrpcExporterTarget;
	    }
	
	    public String getMetricsGrpcExporterHeader() {
	        return metricsGrpcExporterHeader;
	    }
	
	    public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {
	        this.metricsGrpcExporterHeader = metricsGrpcExporterHeader;
	    }
	
	    public long getMetricGrpcExporterTimeOutInMills() {
	        return metricGrpcExporterTimeOutInMills;
	    }
	
	    public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {
	        this.metricGrpcExporterTimeOutInMills = metricGrpcExporterTimeOutInMills;
	    }
	
	    public long getMetricGrpcExporterIntervalInMills() {
	        return metricGrpcExporterIntervalInMills;
	    }
	
	    public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {
	        this.metricGrpcExporterIntervalInMills = metricGrpcExporterIntervalInMills;
	    }
	
	    public long getMetricLoggingExporterIntervalInMills() {
	        return metricLoggingExporterIntervalInMills;
	    }
	
	    public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {
	        this.metricLoggingExporterIntervalInMills = metricLoggingExporterIntervalInMills;
	    }
	
	    public String getMetricsLabel() {
	        return metricsLabel;
	    }
	
	    public void setMetricsLabel(String metricsLabel) {
	        this.metricsLabel = metricsLabel;
	    }
	
	    public boolean isMetricsInDelta() {
	        return metricsInDelta;
	    }
	
	    public void setMetricsInDelta(boolean metricsInDelta) {
	        this.metricsInDelta = metricsInDelta;
	    }
	
	    public int getMetricsPromExporterPort() {
	        return metricsPromExporterPort;
	    }
	
	    public void setMetricsPromExporterPort(int metricsPromExporterPort) {
	        this.metricsPromExporterPort = metricsPromExporterPort;
	    }
	
	    public String getMetricsPromExporterHost() {
	        return metricsPromExporterHost;
	    }
	
	    public void setMetricsPromExporterHost(String metricsPromExporterHost) {
	        this.metricsPromExporterHost = metricsPromExporterHost;
	    }
	
	    public int getTransactionOpMsgMaxSize() {
	        return transactionOpMsgMaxSize;
	    }
	
	    public void setTransactionOpMsgMaxSize(int transactionOpMsgMaxSize) {
	        this.transactionOpMsgMaxSize = transactionOpMsgMaxSize;
	    }
	
	    public int getTransactionOpBatchInterval() {
	        return transactionOpBatchInterval;
	    }
	
	    public void setTransactionOpBatchInterval(int transactionOpBatchInterval) {
	        this.transactionOpBatchInterval = transactionOpBatchInterval;
	    }
	
	    public long getChannelExpiredTimeout() {
	        return channelExpiredTimeout;
	    }
	
	    public void setChannelExpiredTimeout(long channelExpiredTimeout) {
	        this.channelExpiredTimeout = channelExpiredTimeout;
	    }
	
	    public long getSubscriptionExpiredTimeout() {
	        return subscriptionExpiredTimeout;
	    }
	
	    public void setSubscriptionExpiredTimeout(long subscriptionExpiredTimeout) {
	        this.subscriptionExpiredTimeout = subscriptionExpiredTimeout;
	    }
	
	    public boolean isValidateSystemTopicWhenUpdateTopic() {
	        return validateSystemTopicWhenUpdateTopic;
	    }
	
	    public void setValidateSystemTopicWhenUpdateTopic(boolean validateSystemTopicWhenUpdateTopic) {
	        this.validateSystemTopicWhenUpdateTopic = validateSystemTopicWhenUpdateTopic;
	    }
	
	    public boolean isEstimateAccumulation() {
	        return estimateAccumulation;
	    }
	
	    public void setEstimateAccumulation(boolean estimateAccumulation) {
	        this.estimateAccumulation = estimateAccumulation;
	    }
	
	    public boolean isColdCtrStrategyEnable() {
	        return coldCtrStrategyEnable;
	    }
	
	    public void setColdCtrStrategyEnable(boolean coldCtrStrategyEnable) {
	        this.coldCtrStrategyEnable = coldCtrStrategyEnable;
	    }
	
	    public boolean isUsePIDColdCtrStrategy() {
	        return usePIDColdCtrStrategy;
	    }
	
	    public void setUsePIDColdCtrStrategy(boolean usePIDColdCtrStrategy) {
	        this.usePIDColdCtrStrategy = usePIDColdCtrStrategy;
	    }
	
	    public long getCgColdReadThreshold() {
	        return cgColdReadThreshold;
	    }
	
	    public void setCgColdReadThreshold(long cgColdReadThreshold) {
	        this.cgColdReadThreshold = cgColdReadThreshold;
	    }
	
	    public long getGlobalColdReadThreshold() {
	        return globalColdReadThreshold;
	    }
	
	    public void setGlobalColdReadThreshold(long globalColdReadThreshold) {
	        this.globalColdReadThreshold = globalColdReadThreshold;
	    }
	
	    public boolean isUseStaticSubscription() {
	        return useStaticSubscription;
	    }
	
	    public void setUseStaticSubscription(boolean useStaticSubscription) {
	        this.useStaticSubscription = useStaticSubscription;
	    }
	    
	    public long getFetchNamesrvAddrInterval() {
	        return fetchNamesrvAddrInterval;
	    }
	    
	    public void setFetchNamesrvAddrInterval(final long fetchNamesrvAddrInterval) {
	        this.fetchNamesrvAddrInterval = fetchNamesrvAddrInterval;
	    }
	
	    public boolean isPopResponseReturnActualRetryTopic() {
	        return popResponseReturnActualRetryTopic;
	    }
	
	    public void setPopResponseReturnActualRetryTopic(boolean popResponseReturnActualRetryTopic) {
	        this.popResponseReturnActualRetryTopic = popResponseReturnActualRetryTopic;
	    }
	
	    public boolean isEnableSingleTopicRegister() {
	        return enableSingleTopicRegister;
	    }
	
	    public void setEnableSingleTopicRegister(boolean enableSingleTopicRegister) {
	        this.enableSingleTopicRegister = enableSingleTopicRegister;
	    }
	
	    public boolean isEnableMixedMessageType() {
	        return enableMixedMessageType;
	    }
	
	    public void setEnableMixedMessageType(boolean enableMixedMessageType) {
	        this.enableMixedMessageType = enableMixedMessageType;
	    }
	
	    public boolean isEnableSplitRegistration() {
	        return enableSplitRegistration;
	    }
	
	    public void setEnableSplitRegistration(boolean enableSplitRegistration) {
	        this.enableSplitRegistration = enableSplitRegistration;
	    }
	
	    public int getSplitRegistrationSize() {
	        return splitRegistrationSize;
	    }
	
	    public void setSplitRegistrationSize(int splitRegistrationSize) {
	        this.splitRegistrationSize = splitRegistrationSize;
	    }
	
	    public long getTransactionMetricFlushInterval() {
	        return transactionMetricFlushInterval;
	    }
	
	    public void setTransactionMetricFlushInterval(long transactionMetricFlushInterval) {
	        this.transactionMetricFlushInterval = transactionMetricFlushInterval;
	    }
	
	    public long getPopInflightMessageThreshold() {
	        return popInflightMessageThreshold;
	    }
	
	    public void setPopInflightMessageThreshold(long popInflightMessageThreshold) {
	        this.popInflightMessageThreshold = popInflightMessageThreshold;
	    }
	
	    public boolean isEnablePopMessageThreshold() {
	        return enablePopMessageThreshold;
	    }
	
	    public void setEnablePopMessageThreshold(boolean enablePopMessageThreshold) {
	        this.enablePopMessageThreshold = enablePopMessageThreshold;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//proxy/src/main/java/org/apache/rocketmq/proxy/config/ProxyConfig.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.rocketmq.proxy.config;
	
	import java.net.InetAddress;
	import java.net.UnknownHostException;
	import java.time.Duration;
	import java.util.Comparator;
	import java.util.HashMap;
	import java.util.List;
	import java.util.Map;
	import java.util.concurrent.ConcurrentSkipListMap;
	import java.util.concurrent.TimeUnit;
	import java.util.stream.Collectors;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.metrics.MetricsExporterType;
	import org.apache.rocketmq.common.utils.NetworkUtil;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.proxy.ProxyMode;
	import org.apache.rocketmq.proxy.common.ProxyException;
	import org.apache.rocketmq.proxy.common.ProxyExceptionCode;
	
	public class ProxyConfig implements ConfigFile {
	    private final static Logger log = LoggerFactory.getLogger(LoggerName.PROXY_LOGGER_NAME);
	    public final static String DEFAULT_CONFIG_FILE_NAME = "rmq-proxy.json";
	    private static final int PROCESSOR_NUMBER = Runtime.getRuntime().availableProcessors();
	    private static final String DEFAULT_CLUSTER_NAME = "DefaultCluster";
	
	    private static String localHostName;
	
	    static {
	        try {
	            localHostName = InetAddress.getLocalHost().getHostName();
	        } catch (UnknownHostException e) {
	            log.error("Failed to obtain the host name", e);
	        }
	    }
	
	    private String rocketMQClusterName = DEFAULT_CLUSTER_NAME;
	    private String proxyClusterName = DEFAULT_CLUSTER_NAME;
	    private String proxyName = StringUtils.isEmpty(localHostName) ? "DEFAULT_PROXY" : localHostName;
	
	    private String localServeAddr = "";
	
	    private String heartbeatSyncerTopicClusterName = "";
	    private int heartbeatSyncerThreadPoolNums = 4;
	    private int heartbeatSyncerThreadPoolQueueCapacity = 100;
	
	    private String heartbeatSyncerTopicName = "DefaultHeartBeatSyncerTopic";
	
	    /**
	     * configuration for ThreadPoolMonitor
	     */
	    private boolean enablePrintJstack = true;
	    private long printJstackInMillis = Duration.ofSeconds(60).toMillis();
	    private long printThreadPoolStatusInMillis = Duration.ofSeconds(3).toMillis();
	
	    private String namesrvAddr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));
	    private String namesrvDomain = "";
	    private String namesrvDomainSubgroup = "";
	    /**
	     * TLS
	     */
	    private boolean tlsTestModeEnable = true;
	    private String tlsKeyPath = ConfigurationManager.getProxyHome() + "/conf/tls/rocketmq.key";
	    private String tlsCertPath = ConfigurationManager.getProxyHome() + "/conf/tls/rocketmq.crt";
	    /**
	     * gRPC
	     */
	    private String proxyMode = ProxyMode.CLUSTER.name();
	    private Integer grpcServerPort = 8081;
	    private long grpcShutdownTimeSeconds = 30;
	    private int grpcBossLoopNum = 1;
	    private int grpcWorkerLoopNum = PROCESSOR_NUMBER * 2;
	    private boolean enableGrpcEpoll = false;
	    private int grpcThreadPoolNums = 16 + PROCESSOR_NUMBER * 2;
	    private int grpcThreadPoolQueueCapacity = 100000;
	    private String brokerConfigPath = ConfigurationManager.getProxyHome() + "/conf/broker.conf";
	    /**
	     * gRPC max message size
	     * 130M = 4M * 32 messages + 2M attributes
	     */
	    private int grpcMaxInboundMessageSize = 130 * 1024 * 1024;
	    /**
	     * max message body size, 0 or negative number means no limit for proxy
	     */
	    private int maxMessageSize = 4 * 1024 * 1024;
	    /**
	     * max user property size, 0 or negative number means no limit for proxy
	     */
	    private int maxUserPropertySize = 16 * 1024;
	    private int userPropertyMaxNum = 128;
	
	    /**
	     * max message group size, 0 or negative number means no limit for proxy
	     */
	    private int maxMessageGroupSize = 64;
	
	    /**
	     * When a message pops, the message is invisible by default
	     */
	    private long defaultInvisibleTimeMills = Duration.ofSeconds(60).toMillis();
	    private long minInvisibleTimeMillsForRecv = Duration.ofSeconds(10).toMillis();
	    private long maxInvisibleTimeMills = Duration.ofHours(12).toMillis();
	    private long maxDelayTimeMills = Duration.ofDays(1).toMillis();
	    private long maxTransactionRecoverySecond = Duration.ofHours(1).getSeconds();
	    private boolean enableTopicMessageTypeCheck = true;
	
	    private int grpcClientProducerMaxAttempts = 3;
	    private long grpcClientProducerBackoffInitialMillis = 10;
	    private long grpcClientProducerBackoffMaxMillis = 1000;
	    private int grpcClientProducerBackoffMultiplier = 2;
	    private long grpcClientConsumerMinLongPollingTimeoutMillis = Duration.ofSeconds(5).toMillis();
	    private long grpcClientConsumerMaxLongPollingTimeoutMillis = Duration.ofSeconds(20).toMillis();
	    private int grpcClientConsumerLongPollingBatchSize = 32;
	    private long grpcClientIdleTimeMills = Duration.ofSeconds(120).toMillis();
	
	    private int channelExpiredInSeconds = 60;
	    private int contextExpiredInSeconds = 30;
	
	    private int rocketmqMQClientNum = 6;
	
	    private long grpcProxyRelayRequestTimeoutInSeconds = 5;
	    private int grpcProducerThreadPoolNums = PROCESSOR_NUMBER;
	    private int grpcProducerThreadQueueCapacity = 10000;
	    private int grpcConsumerThreadPoolNums = PROCESSOR_NUMBER;
	    private int grpcConsumerThreadQueueCapacity = 10000;
	    private int grpcRouteThreadPoolNums = PROCESSOR_NUMBER;
	    private int grpcRouteThreadQueueCapacity = 10000;
	    private int grpcClientManagerThreadPoolNums = PROCESSOR_NUMBER;
	    private int grpcClientManagerThreadQueueCapacity = 10000;
	    private int grpcTransactionThreadPoolNums = PROCESSOR_NUMBER;
	    private int grpcTransactionThreadQueueCapacity = 10000;
	
	    private int producerProcessorThreadPoolNums = PROCESSOR_NUMBER;
	    private int producerProcessorThreadPoolQueueCapacity = 10000;
	    private int consumerProcessorThreadPoolNums = PROCESSOR_NUMBER;
	    private int consumerProcessorThreadPoolQueueCapacity = 10000;
	
	    private boolean useEndpointPortFromRequest = false;
	
	    private int topicRouteServiceCacheExpiredSeconds = 300;
	    private int topicRouteServiceCacheRefreshSeconds = 20;
	    private int topicRouteServiceCacheMaxNum = 20000;
	    private int topicRouteServiceThreadPoolNums = PROCESSOR_NUMBER;
	    private int topicRouteServiceThreadPoolQueueCapacity = 5000;
	    private int topicConfigCacheExpiredSeconds = 300;
	    private int topicConfigCacheRefreshSeconds = 20;
	    private int topicConfigCacheMaxNum = 20000;
	    private int subscriptionGroupConfigCacheExpiredSeconds = 300;
	    private int subscriptionGroupConfigCacheRefreshSeconds = 20;
	    private int subscriptionGroupConfigCacheMaxNum = 20000;
	    private int userCacheExpiredSeconds = 300;
	    private int userCacheRefreshSeconds = 20;
	    private int userCacheMaxNum = 20000;
	    private int aclCacheExpiredSeconds = 300;
	    private int aclCacheRefreshSeconds = 20;
	    private int aclCacheMaxNum = 20000;
	    private int metadataThreadPoolNums = 3;
	    private int metadataThreadPoolQueueCapacity = 100000;
	
	    private int transactionHeartbeatThreadPoolNums = 20;
	    private int transactionHeartbeatThreadPoolQueueCapacity = 200;
	    private int transactionHeartbeatPeriodSecond = 20;
	    private int transactionHeartbeatBatchNum = 100;
	    private long transactionDataExpireScanPeriodMillis = Duration.ofSeconds(10).toMillis();
	    private long transactionDataMaxWaitClearMillis = Duration.ofSeconds(30).toMillis();
	    private long transactionDataExpireMillis = Duration.ofSeconds(30).toMillis();
	    private int transactionDataMaxNum = 15;
	
	    private long longPollingReserveTimeInMillis = 100;
	
	    private long invisibleTimeMillisWhenClear = 1000L;
	    private boolean enableProxyAutoRenew = true;
	    private int maxRenewRetryTimes = 3;
	    private int renewThreadPoolNums = 2;
	    private int renewMaxThreadPoolNums = 4;
	    private int renewThreadPoolQueueCapacity = 300;
	    private long lockTimeoutMsInHandleGroup = TimeUnit.SECONDS.toMillis(3);
	    private long renewAheadTimeMillis = TimeUnit.SECONDS.toMillis(10);
	    private long renewMaxTimeMillis = TimeUnit.HOURS.toMillis(3);
	    private long renewSchedulePeriodMillis = TimeUnit.SECONDS.toMillis(5);
	
	    private boolean enableACL = false;
	
	    private boolean enableAclRpcHookForClusterMode = false;
	
	    private boolean useDelayLevel = false;
	    private String messageDelayLevel = "1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h";
	    private transient ConcurrentSkipListMap<Integer /* level */, Long/* delay timeMillis */> delayLevelTable = new ConcurrentSkipListMap<>();
	
	    private String metricCollectorMode = MetricCollectorMode.OFF.getModeString();
	    // Example address: 127.0.0.1:1234
	    private String metricCollectorAddress = "";
	
	    private String regionId = "";
	
	    private boolean traceOn = false;
	
	    private MetricsExporterType metricsExporterType = MetricsExporterType.DISABLE;
	
	    private String metricsGrpcExporterTarget = "";
	    private String metricsGrpcExporterHeader = "";
	    private long metricGrpcExporterTimeOutInMills = 3 * 1000;
	    private long metricGrpcExporterIntervalInMills = 60 * 1000;
	    private long metricLoggingExporterIntervalInMills = 10 * 1000;
	
	    private int metricsPromExporterPort = 5557;
	    private String metricsPromExporterHost = "";
	
	    // Label pairs in CSV. Each label follows pattern of Key:Value. eg: instance_id:xxx,uid:xxx
	    private String metricsLabel = "";
	
	    private boolean metricsInDelta = false;
	
	    private long channelExpiredTimeout = 1000 * 120;
	
	    // remoting
	    private boolean enableRemotingLocalProxyGrpc = true;
	    private int localProxyConnectTimeoutMs = 3000;
	    private String remotingAccessAddr = "";
	    private int remotingListenPort = 8080;
	
	    // related to proxy's send strategy in cluster mode.
	    private boolean sendLatencyEnable = false;
	    private boolean startDetectorEnable = false;
	    private int detectTimeout = 200;
	    private int detectInterval = 2 * 1000;
	
	    private int remotingHeartbeatThreadPoolNums = 2 * PROCESSOR_NUMBER;
	    private int remotingTopicRouteThreadPoolNums = 2 * PROCESSOR_NUMBER;
	    private int remotingSendMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
	    private int remotingPullMessageThreadPoolNums = 4 * PROCESSOR_NUMBER;
	    private int remotingUpdateOffsetThreadPoolNums = 4 * PROCESSOR_NUMBER;
	    private int remotingDefaultThreadPoolNums = 4 * PROCESSOR_NUMBER;
	
	    private int remotingHeartbeatThreadPoolQueueCapacity = 50000;
	    private int remotingTopicRouteThreadPoolQueueCapacity = 50000;
	    private int remotingSendThreadPoolQueueCapacity = 10000;
	    private int remotingPullThreadPoolQueueCapacity = 50000;
	    private int remotingUpdateOffsetThreadPoolQueueCapacity = 10000;
	    private int remotingDefaultThreadPoolQueueCapacity = 50000;
	
	    private long remotingWaitTimeMillsInSendQueue = 3 * 1000;
	    private long remotingWaitTimeMillsInPullQueue = 5 * 1000;
	    private long remotingWaitTimeMillsInHeartbeatQueue = 31 * 1000;
	    private long remotingWaitTimeMillsInUpdateOffsetQueue = 3 * 1000;
	    private long remotingWaitTimeMillsInTopicRouteQueue = 3 * 1000;
	    private long remotingWaitTimeMillsInDefaultQueue = 3 * 1000;
	
	    private boolean enableBatchAck = false;
	
	    @Override
	    public void initData() {
	        parseDelayLevel();
	        if (StringUtils.isEmpty(localServeAddr)) {
	            this.localServeAddr = NetworkUtil.getLocalAddress();
	        }
	        if (StringUtils.isBlank(localServeAddr)) {
	            throw new ProxyException(ProxyExceptionCode.INTERNAL_SERVER_ERROR, "get local serve ip failed");
	        }
	        if (StringUtils.isBlank(remotingAccessAddr)) {
	            this.remotingAccessAddr = this.localServeAddr;
	        }
	        if (StringUtils.isBlank(heartbeatSyncerTopicClusterName)) {
	            this.heartbeatSyncerTopicClusterName = this.rocketMQClusterName;
	        }
	    }
	
	    public int computeDelayLevel(long timeMillis) {
	        long intervalMillis = timeMillis - System.currentTimeMillis();
	        List<Map.Entry<Integer, Long>> sortedLevels = delayLevelTable.entrySet().stream().sorted(Comparator.comparingLong(Map.Entry::getValue)).collect(Collectors.toList());
	        for (Map.Entry<Integer, Long> entry : sortedLevels) {
	            if (entry.getValue() > intervalMillis) {
	                return entry.getKey();
	            }
	        }
	        return sortedLevels.get(sortedLevels.size() - 1).getKey();
	    }
	
	    public void parseDelayLevel() {
	        this.delayLevelTable = new ConcurrentSkipListMap<>();
	        Map<String, Long> timeUnitTable = new HashMap<>();
	        timeUnitTable.put("s", 1000L);
	        timeUnitTable.put("m", 1000L * 60);
	        timeUnitTable.put("h", 1000L * 60 * 60);
	        timeUnitTable.put("d", 1000L * 60 * 60 * 24);
	
	        String levelString = this.getMessageDelayLevel();
	        try {
	            String[] levelArray = levelString.split(" ");
	            for (int i = 0; i < levelArray.length; i++) {
	                String value = levelArray[i];
	                String ch = value.substring(value.length() - 1);
	                Long tu = timeUnitTable.get(ch);
	
	                int level = i + 1;
	                long num = Long.parseLong(value.substring(0, value.length() - 1));
	                long delayTimeMillis = tu * num;
	                this.delayLevelTable.put(level, delayTimeMillis);
	            }
	        } catch (Exception e) {
	            log.error("parse delay level failed. messageDelayLevel:{}", messageDelayLevel, e);
	        }
	    }
	
	    public String getRocketMQClusterName() {
	        return rocketMQClusterName;
	    }
	
	    public void setRocketMQClusterName(String rocketMQClusterName) {
	        this.rocketMQClusterName = rocketMQClusterName;
	    }
	
	    public String getProxyClusterName() {
	        return proxyClusterName;
	    }
	
	    public void setProxyClusterName(String proxyClusterName) {
	        this.proxyClusterName = proxyClusterName;
	    }
	
	    public String getProxyName() {
	        return proxyName;
	    }
	
	    public void setProxyName(String proxyName) {
	        this.proxyName = proxyName;
	    }
	
	    public String getLocalServeAddr() {
	        return localServeAddr;
	    }
	
	    public void setLocalServeAddr(String localServeAddr) {
	        this.localServeAddr = localServeAddr;
	    }
	
	    public String getHeartbeatSyncerTopicClusterName() {
	        return heartbeatSyncerTopicClusterName;
	    }
	
	    public void setHeartbeatSyncerTopicClusterName(String heartbeatSyncerTopicClusterName) {
	        this.heartbeatSyncerTopicClusterName = heartbeatSyncerTopicClusterName;
	    }
	
	    public int getHeartbeatSyncerThreadPoolNums() {
	        return heartbeatSyncerThreadPoolNums;
	    }
	
	    public void setHeartbeatSyncerThreadPoolNums(int heartbeatSyncerThreadPoolNums) {
	        this.heartbeatSyncerThreadPoolNums = heartbeatSyncerThreadPoolNums;
	    }
	
	    public int getHeartbeatSyncerThreadPoolQueueCapacity() {
	        return heartbeatSyncerThreadPoolQueueCapacity;
	    }
	
	    public void setHeartbeatSyncerThreadPoolQueueCapacity(int heartbeatSyncerThreadPoolQueueCapacity) {
	        this.heartbeatSyncerThreadPoolQueueCapacity = heartbeatSyncerThreadPoolQueueCapacity;
	    }
	
	    public String getHeartbeatSyncerTopicName() {
	        return heartbeatSyncerTopicName;
	    }
	
	    public void setHeartbeatSyncerTopicName(String heartbeatSyncerTopicName) {
	        this.heartbeatSyncerTopicName = heartbeatSyncerTopicName;
	    }
	
	    public boolean isEnablePrintJstack() {
	        return enablePrintJstack;
	    }
	
	    public void setEnablePrintJstack(boolean enablePrintJstack) {
	        this.enablePrintJstack = enablePrintJstack;
	    }
	
	    public long getPrintJstackInMillis() {
	        return printJstackInMillis;
	    }
	
	    public void setPrintJstackInMillis(long printJstackInMillis) {
	        this.printJstackInMillis = printJstackInMillis;
	    }
	
	    public long getPrintThreadPoolStatusInMillis() {
	        return printThreadPoolStatusInMillis;
	    }
	
	    public void setPrintThreadPoolStatusInMillis(long printThreadPoolStatusInMillis) {
	        this.printThreadPoolStatusInMillis = printThreadPoolStatusInMillis;
	    }
	
	    public String getNamesrvAddr() {
	        return namesrvAddr;
	    }
	
	    public void setNamesrvAddr(String namesrvAddr) {
	        this.namesrvAddr = namesrvAddr;
	    }
	
	    public String getNamesrvDomain() {
	        return namesrvDomain;
	    }
	
	    public void setNamesrvDomain(String namesrvDomain) {
	        this.namesrvDomain = namesrvDomain;
	    }
	
	    public String getNamesrvDomainSubgroup() {
	        return namesrvDomainSubgroup;
	    }
	
	    public void setNamesrvDomainSubgroup(String namesrvDomainSubgroup) {
	        this.namesrvDomainSubgroup = namesrvDomainSubgroup;
	    }
	
	    public String getProxyMode() {
	        return proxyMode;
	    }
	
	    public void setProxyMode(String proxyMode) {
	        this.proxyMode = proxyMode;
	    }
	
	    public Integer getGrpcServerPort() {
	        return grpcServerPort;
	    }
	
	    public void setGrpcServerPort(Integer grpcServerPort) {
	        this.grpcServerPort = grpcServerPort;
	    }
	
	    public long getGrpcShutdownTimeSeconds() {
	        return grpcShutdownTimeSeconds;
	    }
	
	    public void setGrpcShutdownTimeSeconds(long grpcShutdownTimeSeconds) {
	        this.grpcShutdownTimeSeconds = grpcShutdownTimeSeconds;
	    }
	
	    public boolean isUseEndpointPortFromRequest() {
	        return useEndpointPortFromRequest;
	    }
	
	    public void setUseEndpointPortFromRequest(boolean useEndpointPortFromRequest) {
	        this.useEndpointPortFromRequest = useEndpointPortFromRequest;
	    }
	
	    public boolean isTlsTestModeEnable() {
	        return tlsTestModeEnable;
	    }
	
	    public void setTlsTestModeEnable(boolean tlsTestModeEnable) {
	        this.tlsTestModeEnable = tlsTestModeEnable;
	    }
	
	    public String getTlsKeyPath() {
	        return tlsKeyPath;
	    }
	
	    public void setTlsKeyPath(String tlsKeyPath) {
	        this.tlsKeyPath = tlsKeyPath;
	    }
	
	    public String getTlsCertPath() {
	        return tlsCertPath;
	    }
	
	    public void setTlsCertPath(String tlsCertPath) {
	        this.tlsCertPath = tlsCertPath;
	    }
	
	    public int getGrpcBossLoopNum() {
	        return grpcBossLoopNum;
	    }
	
	    public void setGrpcBossLoopNum(int grpcBossLoopNum) {
	        this.grpcBossLoopNum = grpcBossLoopNum;
	    }
	
	    public int getGrpcWorkerLoopNum() {
	        return grpcWorkerLoopNum;
	    }
	
	    public void setGrpcWorkerLoopNum(int grpcWorkerLoopNum) {
	        this.grpcWorkerLoopNum = grpcWorkerLoopNum;
	    }
	
	    public boolean isEnableGrpcEpoll() {
	        return enableGrpcEpoll;
	    }
	
	    public void setEnableGrpcEpoll(boolean enableGrpcEpoll) {
	        this.enableGrpcEpoll = enableGrpcEpoll;
	    }
	
	    public int getGrpcThreadPoolNums() {
	        return grpcThreadPoolNums;
	    }
	
	    public void setGrpcThreadPoolNums(int grpcThreadPoolNums) {
	        this.grpcThreadPoolNums = grpcThreadPoolNums;
	    }
	
	    public int getGrpcThreadPoolQueueCapacity() {
	        return grpcThreadPoolQueueCapacity;
	    }
	
	    public void setGrpcThreadPoolQueueCapacity(int grpcThreadPoolQueueCapacity) {
	        this.grpcThreadPoolQueueCapacity = grpcThreadPoolQueueCapacity;
	    }
	
	    public String getBrokerConfigPath() {
	        return brokerConfigPath;
	    }
	
	    public void setBrokerConfigPath(String brokerConfigPath) {
	        this.brokerConfigPath = brokerConfigPath;
	    }
	
	    public int getGrpcMaxInboundMessageSize() {
	        return grpcMaxInboundMessageSize;
	    }
	
	    public void setGrpcMaxInboundMessageSize(int grpcMaxInboundMessageSize) {
	        this.grpcMaxInboundMessageSize = grpcMaxInboundMessageSize;
	    }
	
	    public int getMaxMessageSize() {
	        return maxMessageSize;
	    }
	
	    public void setMaxMessageSize(int maxMessageSize) {
	        this.maxMessageSize = maxMessageSize;
	    }
	
	    public int getMaxUserPropertySize() {
	        return maxUserPropertySize;
	    }
	
	    public void setMaxUserPropertySize(int maxUserPropertySize) {
	        this.maxUserPropertySize = maxUserPropertySize;
	    }
	
	    public int getUserPropertyMaxNum() {
	        return userPropertyMaxNum;
	    }
	
	    public void setUserPropertyMaxNum(int userPropertyMaxNum) {
	        this.userPropertyMaxNum = userPropertyMaxNum;
	    }
	
	    public int getMaxMessageGroupSize() {
	        return maxMessageGroupSize;
	    }
	
	    public void setMaxMessageGroupSize(int maxMessageGroupSize) {
	        this.maxMessageGroupSize = maxMessageGroupSize;
	    }
	
	    public long getMinInvisibleTimeMillsForRecv() {
	        return minInvisibleTimeMillsForRecv;
	    }
	
	    public void setMinInvisibleTimeMillsForRecv(long minInvisibleTimeMillsForRecv) {
	        this.minInvisibleTimeMillsForRecv = minInvisibleTimeMillsForRecv;
	    }
	
	    public long getDefaultInvisibleTimeMills() {
	        return defaultInvisibleTimeMills;
	    }
	
	    public void setDefaultInvisibleTimeMills(long defaultInvisibleTimeMills) {
	        this.defaultInvisibleTimeMills = defaultInvisibleTimeMills;
	    }
	
	    public long getMaxInvisibleTimeMills() {
	        return maxInvisibleTimeMills;
	    }
	
	    public void setMaxInvisibleTimeMills(long maxInvisibleTimeMills) {
	        this.maxInvisibleTimeMills = maxInvisibleTimeMills;
	    }
	
	    public long getMaxDelayTimeMills() {
	        return maxDelayTimeMills;
	    }
	
	    public void setMaxDelayTimeMills(long maxDelayTimeMills) {
	        this.maxDelayTimeMills = maxDelayTimeMills;
	    }
	
	    public long getMaxTransactionRecoverySecond() {
	        return maxTransactionRecoverySecond;
	    }
	
	    public void setMaxTransactionRecoverySecond(long maxTransactionRecoverySecond) {
	        this.maxTransactionRecoverySecond = maxTransactionRecoverySecond;
	    }
	
	    public int getGrpcClientProducerMaxAttempts() {
	        return grpcClientProducerMaxAttempts;
	    }
	
	    public void setGrpcClientProducerMaxAttempts(int grpcClientProducerMaxAttempts) {
	        this.grpcClientProducerMaxAttempts = grpcClientProducerMaxAttempts;
	    }
	
	    public long getGrpcClientProducerBackoffInitialMillis() {
	        return grpcClientProducerBackoffInitialMillis;
	    }
	
	    public void setGrpcClientProducerBackoffInitialMillis(long grpcClientProducerBackoffInitialMillis) {
	        this.grpcClientProducerBackoffInitialMillis = grpcClientProducerBackoffInitialMillis;
	    }
	
	    public long getGrpcClientProducerBackoffMaxMillis() {
	        return grpcClientProducerBackoffMaxMillis;
	    }
	
	    public void setGrpcClientProducerBackoffMaxMillis(long grpcClientProducerBackoffMaxMillis) {
	        this.grpcClientProducerBackoffMaxMillis = grpcClientProducerBackoffMaxMillis;
	    }
	
	    public int getGrpcClientProducerBackoffMultiplier() {
	        return grpcClientProducerBackoffMultiplier;
	    }
	
	    public void setGrpcClientProducerBackoffMultiplier(int grpcClientProducerBackoffMultiplier) {
	        this.grpcClientProducerBackoffMultiplier = grpcClientProducerBackoffMultiplier;
	    }
	
	    public long getGrpcClientConsumerMinLongPollingTimeoutMillis() {
	        return grpcClientConsumerMinLongPollingTimeoutMillis;
	    }
	
	    public void setGrpcClientConsumerMinLongPollingTimeoutMillis(long grpcClientConsumerMinLongPollingTimeoutMillis) {
	        this.grpcClientConsumerMinLongPollingTimeoutMillis = grpcClientConsumerMinLongPollingTimeoutMillis;
	    }
	
	    public long getGrpcClientConsumerMaxLongPollingTimeoutMillis() {
	        return grpcClientConsumerMaxLongPollingTimeoutMillis;
	    }
	
	    public void setGrpcClientConsumerMaxLongPollingTimeoutMillis(long grpcClientConsumerMaxLongPollingTimeoutMillis) {
	        this.grpcClientConsumerMaxLongPollingTimeoutMillis = grpcClientConsumerMaxLongPollingTimeoutMillis;
	    }
	
	    public int getGrpcClientConsumerLongPollingBatchSize() {
	        return grpcClientConsumerLongPollingBatchSize;
	    }
	
	    public void setGrpcClientConsumerLongPollingBatchSize(int grpcClientConsumerLongPollingBatchSize) {
	        this.grpcClientConsumerLongPollingBatchSize = grpcClientConsumerLongPollingBatchSize;
	    }
	
	    public int getChannelExpiredInSeconds() {
	        return channelExpiredInSeconds;
	    }
	
	    public void setChannelExpiredInSeconds(int channelExpiredInSeconds) {
	        this.channelExpiredInSeconds = channelExpiredInSeconds;
	    }
	
	    public int getContextExpiredInSeconds() {
	        return contextExpiredInSeconds;
	    }
	
	    public void setContextExpiredInSeconds(int contextExpiredInSeconds) {
	        this.contextExpiredInSeconds = contextExpiredInSeconds;
	    }
	
	    public int getRocketmqMQClientNum() {
	        return rocketmqMQClientNum;
	    }
	
	    public void setRocketmqMQClientNum(int rocketmqMQClientNum) {
	        this.rocketmqMQClientNum = rocketmqMQClientNum;
	    }
	
	    public long getGrpcProxyRelayRequestTimeoutInSeconds() {
	        return grpcProxyRelayRequestTimeoutInSeconds;
	    }
	
	    public void setGrpcProxyRelayRequestTimeoutInSeconds(long grpcProxyRelayRequestTimeoutInSeconds) {
	        this.grpcProxyRelayRequestTimeoutInSeconds = grpcProxyRelayRequestTimeoutInSeconds;
	    }
	
	    public int getGrpcProducerThreadPoolNums() {
	        return grpcProducerThreadPoolNums;
	    }
	
	    public void setGrpcProducerThreadPoolNums(int grpcProducerThreadPoolNums) {
	        this.grpcProducerThreadPoolNums = grpcProducerThreadPoolNums;
	    }
	
	    public int getGrpcProducerThreadQueueCapacity() {
	        return grpcProducerThreadQueueCapacity;
	    }
	
	    public void setGrpcProducerThreadQueueCapacity(int grpcProducerThreadQueueCapacity) {
	        this.grpcProducerThreadQueueCapacity = grpcProducerThreadQueueCapacity;
	    }
	
	    public int getGrpcConsumerThreadPoolNums() {
	        return grpcConsumerThreadPoolNums;
	    }
	
	    public void setGrpcConsumerThreadPoolNums(int grpcConsumerThreadPoolNums) {
	        this.grpcConsumerThreadPoolNums = grpcConsumerThreadPoolNums;
	    }
	
	    public int getGrpcConsumerThreadQueueCapacity() {
	        return grpcConsumerThreadQueueCapacity;
	    }
	
	    public void setGrpcConsumerThreadQueueCapacity(int grpcConsumerThreadQueueCapacity) {
	        this.grpcConsumerThreadQueueCapacity = grpcConsumerThreadQueueCapacity;
	    }
	
	    public int getGrpcRouteThreadPoolNums() {
	        return grpcRouteThreadPoolNums;
	    }
	
	    public void setGrpcRouteThreadPoolNums(int grpcRouteThreadPoolNums) {
	        this.grpcRouteThreadPoolNums = grpcRouteThreadPoolNums;
	    }
	
	    public int getGrpcRouteThreadQueueCapacity() {
	        return grpcRouteThreadQueueCapacity;
	    }
	
	    public void setGrpcRouteThreadQueueCapacity(int grpcRouteThreadQueueCapacity) {
	        this.grpcRouteThreadQueueCapacity = grpcRouteThreadQueueCapacity;
	    }
	
	    public int getGrpcClientManagerThreadPoolNums() {
	        return grpcClientManagerThreadPoolNums;
	    }
	
	    public void setGrpcClientManagerThreadPoolNums(int grpcClientManagerThreadPoolNums) {
	        this.grpcClientManagerThreadPoolNums = grpcClientManagerThreadPoolNums;
	    }
	
	    public int getGrpcClientManagerThreadQueueCapacity() {
	        return grpcClientManagerThreadQueueCapacity;
	    }
	
	    public void setGrpcClientManagerThreadQueueCapacity(int grpcClientManagerThreadQueueCapacity) {
	        this.grpcClientManagerThreadQueueCapacity = grpcClientManagerThreadQueueCapacity;
	    }
	
	    public int getGrpcTransactionThreadPoolNums() {
	        return grpcTransactionThreadPoolNums;
	    }
	
	    public void setGrpcTransactionThreadPoolNums(int grpcTransactionThreadPoolNums) {
	        this.grpcTransactionThreadPoolNums = grpcTransactionThreadPoolNums;
	    }
	
	    public int getGrpcTransactionThreadQueueCapacity() {
	        return grpcTransactionThreadQueueCapacity;
	    }
	
	    public void setGrpcTransactionThreadQueueCapacity(int grpcTransactionThreadQueueCapacity) {
	        this.grpcTransactionThreadQueueCapacity = grpcTransactionThreadQueueCapacity;
	    }
	
	    public int getProducerProcessorThreadPoolNums() {
	        return producerProcessorThreadPoolNums;
	    }
	
	    public void setProducerProcessorThreadPoolNums(int producerProcessorThreadPoolNums) {
	        this.producerProcessorThreadPoolNums = producerProcessorThreadPoolNums;
	    }
	
	    public int getProducerProcessorThreadPoolQueueCapacity() {
	        return producerProcessorThreadPoolQueueCapacity;
	    }
	
	    public void setProducerProcessorThreadPoolQueueCapacity(int producerProcessorThreadPoolQueueCapacity) {
	        this.producerProcessorThreadPoolQueueCapacity = producerProcessorThreadPoolQueueCapacity;
	    }
	
	    public int getConsumerProcessorThreadPoolNums() {
	        return consumerProcessorThreadPoolNums;
	    }
	
	    public void setConsumerProcessorThreadPoolNums(int consumerProcessorThreadPoolNums) {
	        this.consumerProcessorThreadPoolNums = consumerProcessorThreadPoolNums;
	    }
	
	    public int getConsumerProcessorThreadPoolQueueCapacity() {
	        return consumerProcessorThreadPoolQueueCapacity;
	    }
	
	    public void setConsumerProcessorThreadPoolQueueCapacity(int consumerProcessorThreadPoolQueueCapacity) {
	        this.consumerProcessorThreadPoolQueueCapacity = consumerProcessorThreadPoolQueueCapacity;
	    }
	
	    public int getTopicRouteServiceCacheExpiredSeconds() {
	        return topicRouteServiceCacheExpiredSeconds;
	    }
	
	    public void setTopicRouteServiceCacheExpiredSeconds(int topicRouteServiceCacheExpiredSeconds) {
	        this.topicRouteServiceCacheExpiredSeconds = topicRouteServiceCacheExpiredSeconds;
	    }
	
	    public int getTopicRouteServiceCacheRefreshSeconds() {
	        return topicRouteServiceCacheRefreshSeconds;
	    }
	
	    public void setTopicRouteServiceCacheRefreshSeconds(int topicRouteServiceCacheRefreshSeconds) {
	        this.topicRouteServiceCacheRefreshSeconds = topicRouteServiceCacheRefreshSeconds;
	    }
	
	    public int getTopicRouteServiceCacheMaxNum() {
	        return topicRouteServiceCacheMaxNum;
	    }
	
	    public void setTopicRouteServiceCacheMaxNum(int topicRouteServiceCacheMaxNum) {
	        this.topicRouteServiceCacheMaxNum = topicRouteServiceCacheMaxNum;
	    }
	
	    public int getTopicRouteServiceThreadPoolNums() {
	        return topicRouteServiceThreadPoolNums;
	    }
	
	    public void setTopicRouteServiceThreadPoolNums(int topicRouteServiceThreadPoolNums) {
	        this.topicRouteServiceThreadPoolNums = topicRouteServiceThreadPoolNums;
	    }
	
	    public int getTopicRouteServiceThreadPoolQueueCapacity() {
	        return topicRouteServiceThreadPoolQueueCapacity;
	    }
	
	    public void setTopicRouteServiceThreadPoolQueueCapacity(int topicRouteServiceThreadPoolQueueCapacity) {
	        this.topicRouteServiceThreadPoolQueueCapacity = topicRouteServiceThreadPoolQueueCapacity;
	    }
	
	    public int getTopicConfigCacheRefreshSeconds() {
	        return topicConfigCacheRefreshSeconds;
	    }
	
	    public void setTopicConfigCacheRefreshSeconds(int topicConfigCacheRefreshSeconds) {
	        this.topicConfigCacheRefreshSeconds = topicConfigCacheRefreshSeconds;
	    }
	
	    public int getTopicConfigCacheExpiredSeconds() {
	        return topicConfigCacheExpiredSeconds;
	    }
	
	    public void setTopicConfigCacheExpiredSeconds(int topicConfigCacheExpiredSeconds) {
	        this.topicConfigCacheExpiredSeconds = topicConfigCacheExpiredSeconds;
	    }
	
	    public int getTopicConfigCacheMaxNum() {
	        return topicConfigCacheMaxNum;
	    }
	
	    public void setTopicConfigCacheMaxNum(int topicConfigCacheMaxNum) {
	        this.topicConfigCacheMaxNum = topicConfigCacheMaxNum;
	    }
	
	    public int getSubscriptionGroupConfigCacheRefreshSeconds() {
	        return subscriptionGroupConfigCacheRefreshSeconds;
	    }
	
	    public void setSubscriptionGroupConfigCacheRefreshSeconds(int subscriptionGroupConfigCacheRefreshSeconds) {
	        this.subscriptionGroupConfigCacheRefreshSeconds = subscriptionGroupConfigCacheRefreshSeconds;
	    }
	
	    public int getSubscriptionGroupConfigCacheExpiredSeconds() {
	        return subscriptionGroupConfigCacheExpiredSeconds;
	    }
	
	    public void setSubscriptionGroupConfigCacheExpiredSeconds(int subscriptionGroupConfigCacheExpiredSeconds) {
	        this.subscriptionGroupConfigCacheExpiredSeconds = subscriptionGroupConfigCacheExpiredSeconds;
	    }
	
	    public int getSubscriptionGroupConfigCacheMaxNum() {
	        return subscriptionGroupConfigCacheMaxNum;
	    }
	
	    public void setSubscriptionGroupConfigCacheMaxNum(int subscriptionGroupConfigCacheMaxNum) {
	        this.subscriptionGroupConfigCacheMaxNum = subscriptionGroupConfigCacheMaxNum;
	    }
	
	    public int getUserCacheExpiredSeconds() {
	        return userCacheExpiredSeconds;
	    }
	
	    public void setUserCacheExpiredSeconds(int userCacheExpiredSeconds) {
	        this.userCacheExpiredSeconds = userCacheExpiredSeconds;
	    }
	
	    public int getUserCacheRefreshSeconds() {
	        return userCacheRefreshSeconds;
	    }
	
	    public void setUserCacheRefreshSeconds(int userCacheRefreshSeconds) {
	        this.userCacheRefreshSeconds = userCacheRefreshSeconds;
	    }
	
	    public int getUserCacheMaxNum() {
	        return userCacheMaxNum;
	    }
	
	    public void setUserCacheMaxNum(int userCacheMaxNum) {
	        this.userCacheMaxNum = userCacheMaxNum;
	    }
	
	    public int getAclCacheExpiredSeconds() {
	        return aclCacheExpiredSeconds;
	    }
	
	    public void setAclCacheExpiredSeconds(int aclCacheExpiredSeconds) {
	        this.aclCacheExpiredSeconds = aclCacheExpiredSeconds;
	    }
	
	    public int getAclCacheRefreshSeconds() {
	        return aclCacheRefreshSeconds;
	    }
	
	    public void setAclCacheRefreshSeconds(int aclCacheRefreshSeconds) {
	        this.aclCacheRefreshSeconds = aclCacheRefreshSeconds;
	    }
	
	    public int getAclCacheMaxNum() {
	        return aclCacheMaxNum;
	    }
	
	    public void setAclCacheMaxNum(int aclCacheMaxNum) {
	        this.aclCacheMaxNum = aclCacheMaxNum;
	    }
	
	    public int getMetadataThreadPoolNums() {
	        return metadataThreadPoolNums;
	    }
	
	    public void setMetadataThreadPoolNums(int metadataThreadPoolNums) {
	        this.metadataThreadPoolNums = metadataThreadPoolNums;
	    }
	
	    public int getMetadataThreadPoolQueueCapacity() {
	        return metadataThreadPoolQueueCapacity;
	    }
	
	    public void setMetadataThreadPoolQueueCapacity(int metadataThreadPoolQueueCapacity) {
	        this.metadataThreadPoolQueueCapacity = metadataThreadPoolQueueCapacity;
	    }
	
	    public int getTransactionHeartbeatThreadPoolNums() {
	        return transactionHeartbeatThreadPoolNums;
	    }
	
	    public void setTransactionHeartbeatThreadPoolNums(int transactionHeartbeatThreadPoolNums) {
	        this.transactionHeartbeatThreadPoolNums = transactionHeartbeatThreadPoolNums;
	    }
	
	    public int getTransactionHeartbeatThreadPoolQueueCapacity() {
	        return transactionHeartbeatThreadPoolQueueCapacity;
	    }
	
	    public void setTransactionHeartbeatThreadPoolQueueCapacity(int transactionHeartbeatThreadPoolQueueCapacity) {
	        this.transactionHeartbeatThreadPoolQueueCapacity = transactionHeartbeatThreadPoolQueueCapacity;
	    }
	
	    public int getTransactionHeartbeatPeriodSecond() {
	        return transactionHeartbeatPeriodSecond;
	    }
	
	    public void setTransactionHeartbeatPeriodSecond(int transactionHeartbeatPeriodSecond) {
	        this.transactionHeartbeatPeriodSecond = transactionHeartbeatPeriodSecond;
	    }
	
	    public int getTransactionHeartbeatBatchNum() {
	        return transactionHeartbeatBatchNum;
	    }
	
	    public void setTransactionHeartbeatBatchNum(int transactionHeartbeatBatchNum) {
	        this.transactionHeartbeatBatchNum = transactionHeartbeatBatchNum;
	    }
	
	    public long getTransactionDataExpireScanPeriodMillis() {
	        return transactionDataExpireScanPeriodMillis;
	    }
	
	    public void setTransactionDataExpireScanPeriodMillis(long transactionDataExpireScanPeriodMillis) {
	        this.transactionDataExpireScanPeriodMillis = transactionDataExpireScanPeriodMillis;
	    }
	
	    public long getTransactionDataMaxWaitClearMillis() {
	        return transactionDataMaxWaitClearMillis;
	    }
	
	    public void setTransactionDataMaxWaitClearMillis(long transactionDataMaxWaitClearMillis) {
	        this.transactionDataMaxWaitClearMillis = transactionDataMaxWaitClearMillis;
	    }
	
	    public long getTransactionDataExpireMillis() {
	        return transactionDataExpireMillis;
	    }
	
	    public void setTransactionDataExpireMillis(long transactionDataExpireMillis) {
	        this.transactionDataExpireMillis = transactionDataExpireMillis;
	    }
	
	    public int getTransactionDataMaxNum() {
	        return transactionDataMaxNum;
	    }
	
	    public void setTransactionDataMaxNum(int transactionDataMaxNum) {
	        this.transactionDataMaxNum = transactionDataMaxNum;
	    }
	
	    public long getLongPollingReserveTimeInMillis() {
	        return longPollingReserveTimeInMillis;
	    }
	
	    public void setLongPollingReserveTimeInMillis(long longPollingReserveTimeInMillis) {
	        this.longPollingReserveTimeInMillis = longPollingReserveTimeInMillis;
	    }
	
	    public boolean isEnableACL() {
	        return enableACL;
	    }
	
	    public void setEnableACL(boolean enableACL) {
	        this.enableACL = enableACL;
	    }
	
	    public boolean isEnableAclRpcHookForClusterMode() {
	        return enableAclRpcHookForClusterMode;
	    }
	
	    public void setEnableAclRpcHookForClusterMode(boolean enableAclRpcHookForClusterMode) {
	        this.enableAclRpcHookForClusterMode = enableAclRpcHookForClusterMode;
	    }
	
	    public boolean isEnableTopicMessageTypeCheck() {
	        return enableTopicMessageTypeCheck;
	    }
	
	    public void setEnableTopicMessageTypeCheck(boolean enableTopicMessageTypeCheck) {
	        this.enableTopicMessageTypeCheck = enableTopicMessageTypeCheck;
	    }
	
	    public long getInvisibleTimeMillisWhenClear() {
	        return invisibleTimeMillisWhenClear;
	    }
	
	    public void setInvisibleTimeMillisWhenClear(long invisibleTimeMillisWhenClear) {
	        this.invisibleTimeMillisWhenClear = invisibleTimeMillisWhenClear;
	    }
	
	    public boolean isEnableProxyAutoRenew() {
	        return enableProxyAutoRenew;
	    }
	
	    public void setEnableProxyAutoRenew(boolean enableProxyAutoRenew) {
	        this.enableProxyAutoRenew = enableProxyAutoRenew;
	    }
	
	    public int getMaxRenewRetryTimes() {
	        return maxRenewRetryTimes;
	    }
	
	    public void setMaxRenewRetryTimes(int maxRenewRetryTimes) {
	        this.maxRenewRetryTimes = maxRenewRetryTimes;
	    }
	
	    public int getRenewThreadPoolNums() {
	        return renewThreadPoolNums;
	    }
	
	    public void setRenewThreadPoolNums(int renewThreadPoolNums) {
	        this.renewThreadPoolNums = renewThreadPoolNums;
	    }
	
	    public int getRenewMaxThreadPoolNums() {
	        return renewMaxThreadPoolNums;
	    }
	
	    public void setRenewMaxThreadPoolNums(int renewMaxThreadPoolNums) {
	        this.renewMaxThreadPoolNums = renewMaxThreadPoolNums;
	    }
	
	    public int getRenewThreadPoolQueueCapacity() {
	        return renewThreadPoolQueueCapacity;
	    }
	
	    public void setRenewThreadPoolQueueCapacity(int renewThreadPoolQueueCapacity) {
	        this.renewThreadPoolQueueCapacity = renewThreadPoolQueueCapacity;
	    }
	
	    public long getLockTimeoutMsInHandleGroup() {
	        return lockTimeoutMsInHandleGroup;
	    }
	
	    public void setLockTimeoutMsInHandleGroup(long lockTimeoutMsInHandleGroup) {
	        this.lockTimeoutMsInHandleGroup = lockTimeoutMsInHandleGroup;
	    }
	
	    public long getRenewAheadTimeMillis() {
	        return renewAheadTimeMillis;
	    }
	
	    public void setRenewAheadTimeMillis(long renewAheadTimeMillis) {
	        this.renewAheadTimeMillis = renewAheadTimeMillis;
	    }
	
	    public long getRenewMaxTimeMillis() {
	        return renewMaxTimeMillis;
	    }
	
	    public void setRenewMaxTimeMillis(long renewMaxTimeMillis) {
	        this.renewMaxTimeMillis = renewMaxTimeMillis;
	    }
	
	    public long getRenewSchedulePeriodMillis() {
	        return renewSchedulePeriodMillis;
	    }
	
	    public void setRenewSchedulePeriodMillis(long renewSchedulePeriodMillis) {
	        this.renewSchedulePeriodMillis = renewSchedulePeriodMillis;
	    }
	
	    public String getMetricCollectorMode() {
	        return metricCollectorMode;
	    }
	
	    public void setMetricCollectorMode(String metricCollectorMode) {
	        this.metricCollectorMode = metricCollectorMode;
	    }
	
	    public String getMetricCollectorAddress() {
	        return metricCollectorAddress;
	    }
	
	    public void setMetricCollectorAddress(String metricCollectorAddress) {
	        this.metricCollectorAddress = metricCollectorAddress;
	    }
	
	    public boolean isUseDelayLevel() {
	        return useDelayLevel;
	    }
	
	    public void setUseDelayLevel(boolean useDelayLevel) {
	        this.useDelayLevel = useDelayLevel;
	    }
	
	    public String getMessageDelayLevel() {
	        return messageDelayLevel;
	    }
	
	    public void setMessageDelayLevel(String messageDelayLevel) {
	        this.messageDelayLevel = messageDelayLevel;
	    }
	
	    public ConcurrentSkipListMap<Integer, Long> getDelayLevelTable() {
	        return delayLevelTable;
	    }
	
	    public long getGrpcClientIdleTimeMills() {
	        return grpcClientIdleTimeMills;
	    }
	
	    public void setGrpcClientIdleTimeMills(final long grpcClientIdleTimeMills) {
	        this.grpcClientIdleTimeMills = grpcClientIdleTimeMills;
	    }
	
	    public String getRegionId() {
	        return regionId;
	    }
	
	    public void setRegionId(String regionId) {
	        this.regionId = regionId;
	    }
	
	    public boolean isTraceOn() {
	        return traceOn;
	    }
	
	    public void setTraceOn(boolean traceOn) {
	        this.traceOn = traceOn;
	    }
	
	    public String getRemotingAccessAddr() {
	        return remotingAccessAddr;
	    }
	
	    public void setRemotingAccessAddr(String remotingAccessAddr) {
	        this.remotingAccessAddr = remotingAccessAddr;
	    }
	
	    public MetricsExporterType getMetricsExporterType() {
	        return metricsExporterType;
	    }
	
	    public void setMetricsExporterType(MetricsExporterType metricsExporterType) {
	        this.metricsExporterType = metricsExporterType;
	    }
	
	    public void setMetricsExporterType(int metricsExporterType) {
	        this.metricsExporterType = MetricsExporterType.valueOf(metricsExporterType);
	    }
	
	    public void setMetricsExporterType(String metricsExporterType) {
	        this.metricsExporterType = MetricsExporterType.valueOf(metricsExporterType);
	    }
	
	    public String getMetricsGrpcExporterTarget() {
	        return metricsGrpcExporterTarget;
	    }
	
	    public void setMetricsGrpcExporterTarget(String metricsGrpcExporterTarget) {
	        this.metricsGrpcExporterTarget = metricsGrpcExporterTarget;
	    }
	
	    public String getMetricsGrpcExporterHeader() {
	        return metricsGrpcExporterHeader;
	    }
	
	    public void setMetricsGrpcExporterHeader(String metricsGrpcExporterHeader) {
	        this.metricsGrpcExporterHeader = metricsGrpcExporterHeader;
	    }
	
	    public long getMetricGrpcExporterTimeOutInMills() {
	        return metricGrpcExporterTimeOutInMills;
	    }
	
	    public void setMetricGrpcExporterTimeOutInMills(long metricGrpcExporterTimeOutInMills) {
	        this.metricGrpcExporterTimeOutInMills = metricGrpcExporterTimeOutInMills;
	    }
	
	    public long getMetricGrpcExporterIntervalInMills() {
	        return metricGrpcExporterIntervalInMills;
	    }
	
	    public void setMetricGrpcExporterIntervalInMills(long metricGrpcExporterIntervalInMills) {
	        this.metricGrpcExporterIntervalInMills = metricGrpcExporterIntervalInMills;
	    }
	
	    public long getMetricLoggingExporterIntervalInMills() {
	        return metricLoggingExporterIntervalInMills;
	    }
	
	    public void setMetricLoggingExporterIntervalInMills(long metricLoggingExporterIntervalInMills) {
	        this.metricLoggingExporterIntervalInMills = metricLoggingExporterIntervalInMills;
	    }
	
	    public int getMetricsPromExporterPort() {
	        return metricsPromExporterPort;
	    }
	
	    public void setMetricsPromExporterPort(int metricsPromExporterPort) {
	        this.metricsPromExporterPort = metricsPromExporterPort;
	    }
	
	    public String getMetricsPromExporterHost() {
	        return metricsPromExporterHost;
	    }
	
	    public void setMetricsPromExporterHost(String metricsPromExporterHost) {
	        this.metricsPromExporterHost = metricsPromExporterHost;
	    }
	
	    public String getMetricsLabel() {
	        return metricsLabel;
	    }
	
	    public void setMetricsLabel(String metricsLabel) {
	        this.metricsLabel = metricsLabel;
	    }
	
	    public boolean isMetricsInDelta() {
	        return metricsInDelta;
	    }
	
	    public void setMetricsInDelta(boolean metricsInDelta) {
	        this.metricsInDelta = metricsInDelta;
	    }
	
	    public long getChannelExpiredTimeout() {
	        return channelExpiredTimeout;
	    }
	
	    public boolean isEnableRemotingLocalProxyGrpc() {
	        return enableRemotingLocalProxyGrpc;
	    }
	
	    public void setChannelExpiredTimeout(long channelExpiredTimeout) {
	        this.channelExpiredTimeout = channelExpiredTimeout;
	    }
	
	    public void setEnableRemotingLocalProxyGrpc(boolean enableRemotingLocalProxyGrpc) {
	        this.enableRemotingLocalProxyGrpc = enableRemotingLocalProxyGrpc;
	    }
	
	    public int getLocalProxyConnectTimeoutMs() {
	        return localProxyConnectTimeoutMs;
	    }
	
	    public void setLocalProxyConnectTimeoutMs(int localProxyConnectTimeoutMs) {
	        this.localProxyConnectTimeoutMs = localProxyConnectTimeoutMs;
	    }
	
	    public int getRemotingListenPort() {
	        return remotingListenPort;
	    }
	
	    public void setRemotingListenPort(int remotingListenPort) {
	        this.remotingListenPort = remotingListenPort;
	    }
	
	    public int getRemotingHeartbeatThreadPoolNums() {
	        return remotingHeartbeatThreadPoolNums;
	    }
	
	    public void setRemotingHeartbeatThreadPoolNums(int remotingHeartbeatThreadPoolNums) {
	        this.remotingHeartbeatThreadPoolNums = remotingHeartbeatThreadPoolNums;
	    }
	
	    public int getRemotingTopicRouteThreadPoolNums() {
	        return remotingTopicRouteThreadPoolNums;
	    }
	
	    public void setRemotingTopicRouteThreadPoolNums(int remotingTopicRouteThreadPoolNums) {
	        this.remotingTopicRouteThreadPoolNums = remotingTopicRouteThreadPoolNums;
	    }
	
	    public int getRemotingSendMessageThreadPoolNums() {
	        return remotingSendMessageThreadPoolNums;
	    }
	
	    public void setRemotingSendMessageThreadPoolNums(int remotingSendMessageThreadPoolNums) {
	        this.remotingSendMessageThreadPoolNums = remotingSendMessageThreadPoolNums;
	    }
	
	    public int getRemotingPullMessageThreadPoolNums() {
	        return remotingPullMessageThreadPoolNums;
	    }
	
	    public void setRemotingPullMessageThreadPoolNums(int remotingPullMessageThreadPoolNums) {
	        this.remotingPullMessageThreadPoolNums = remotingPullMessageThreadPoolNums;
	    }
	
	    public int getRemotingUpdateOffsetThreadPoolNums() {
	        return remotingUpdateOffsetThreadPoolNums;
	    }
	
	    public void setRemotingUpdateOffsetThreadPoolNums(int remotingUpdateOffsetThreadPoolNums) {
	        this.remotingUpdateOffsetThreadPoolNums = remotingUpdateOffsetThreadPoolNums;
	    }
	
	    public int getRemotingDefaultThreadPoolNums() {
	        return remotingDefaultThreadPoolNums;
	    }
	
	    public void setRemotingDefaultThreadPoolNums(int remotingDefaultThreadPoolNums) {
	        this.remotingDefaultThreadPoolNums = remotingDefaultThreadPoolNums;
	    }
	
	    public int getRemotingHeartbeatThreadPoolQueueCapacity() {
	        return remotingHeartbeatThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingHeartbeatThreadPoolQueueCapacity(int remotingHeartbeatThreadPoolQueueCapacity) {
	        this.remotingHeartbeatThreadPoolQueueCapacity = remotingHeartbeatThreadPoolQueueCapacity;
	    }
	
	    public int getRemotingTopicRouteThreadPoolQueueCapacity() {
	        return remotingTopicRouteThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingTopicRouteThreadPoolQueueCapacity(int remotingTopicRouteThreadPoolQueueCapacity) {
	        this.remotingTopicRouteThreadPoolQueueCapacity = remotingTopicRouteThreadPoolQueueCapacity;
	    }
	
	    public int getRemotingSendThreadPoolQueueCapacity() {
	        return remotingSendThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingSendThreadPoolQueueCapacity(int remotingSendThreadPoolQueueCapacity) {
	        this.remotingSendThreadPoolQueueCapacity = remotingSendThreadPoolQueueCapacity;
	    }
	
	    public int getRemotingPullThreadPoolQueueCapacity() {
	        return remotingPullThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingPullThreadPoolQueueCapacity(int remotingPullThreadPoolQueueCapacity) {
	        this.remotingPullThreadPoolQueueCapacity = remotingPullThreadPoolQueueCapacity;
	    }
	
	    public int getRemotingUpdateOffsetThreadPoolQueueCapacity() {
	        return remotingUpdateOffsetThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingUpdateOffsetThreadPoolQueueCapacity(int remotingUpdateOffsetThreadPoolQueueCapacity) {
	        this.remotingUpdateOffsetThreadPoolQueueCapacity = remotingUpdateOffsetThreadPoolQueueCapacity;
	    }
	
	    public int getRemotingDefaultThreadPoolQueueCapacity() {
	        return remotingDefaultThreadPoolQueueCapacity;
	    }
	
	    public void setRemotingDefaultThreadPoolQueueCapacity(int remotingDefaultThreadPoolQueueCapacity) {
	        this.remotingDefaultThreadPoolQueueCapacity = remotingDefaultThreadPoolQueueCapacity;
	    }
	
	    public long getRemotingWaitTimeMillsInSendQueue() {
	        return remotingWaitTimeMillsInSendQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInSendQueue(long remotingWaitTimeMillsInSendQueue) {
	        this.remotingWaitTimeMillsInSendQueue = remotingWaitTimeMillsInSendQueue;
	    }
	
	    public long getRemotingWaitTimeMillsInPullQueue() {
	        return remotingWaitTimeMillsInPullQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInPullQueue(long remotingWaitTimeMillsInPullQueue) {
	        this.remotingWaitTimeMillsInPullQueue = remotingWaitTimeMillsInPullQueue;
	    }
	
	    public long getRemotingWaitTimeMillsInHeartbeatQueue() {
	        return remotingWaitTimeMillsInHeartbeatQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInHeartbeatQueue(long remotingWaitTimeMillsInHeartbeatQueue) {
	        this.remotingWaitTimeMillsInHeartbeatQueue = remotingWaitTimeMillsInHeartbeatQueue;
	    }
	
	    public long getRemotingWaitTimeMillsInUpdateOffsetQueue() {
	        return remotingWaitTimeMillsInUpdateOffsetQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInUpdateOffsetQueue(long remotingWaitTimeMillsInUpdateOffsetQueue) {
	        this.remotingWaitTimeMillsInUpdateOffsetQueue = remotingWaitTimeMillsInUpdateOffsetQueue;
	    }
	
	    public long getRemotingWaitTimeMillsInTopicRouteQueue() {
	        return remotingWaitTimeMillsInTopicRouteQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInTopicRouteQueue(long remotingWaitTimeMillsInTopicRouteQueue) {
	        this.remotingWaitTimeMillsInTopicRouteQueue = remotingWaitTimeMillsInTopicRouteQueue;
	    }
	
	    public long getRemotingWaitTimeMillsInDefaultQueue() {
	        return remotingWaitTimeMillsInDefaultQueue;
	    }
	
	    public void setRemotingWaitTimeMillsInDefaultQueue(long remotingWaitTimeMillsInDefaultQueue) {
	        this.remotingWaitTimeMillsInDefaultQueue = remotingWaitTimeMillsInDefaultQueue;
	    }
	
	    public boolean isSendLatencyEnable() {
	        return sendLatencyEnable;
	    }
	
	    public boolean isStartDetectorEnable() {
	        return startDetectorEnable;
	    }
	
	    public void setStartDetectorEnable(boolean startDetectorEnable) {
	        this.startDetectorEnable = startDetectorEnable;
	    }
	
	    public void setSendLatencyEnable(boolean sendLatencyEnable) {
	        this.sendLatencyEnable = sendLatencyEnable;
	    }
	
	    public boolean getStartDetectorEnable() {
	        return this.startDetectorEnable;
	    }
	
	    public boolean getSendLatencyEnable() {
	        return this.sendLatencyEnable;
	    }
	
	    public int getDetectTimeout() {
	        return detectTimeout;
	    }
	
	    public void setDetectTimeout(int detectTimeout) {
	        this.detectTimeout = detectTimeout;
	    }
	
	    public int getDetectInterval() {
	        return detectInterval;
	    }
	
	    public void setDetectInterval(int detectInterval) {
	        this.detectInterval = detectInterval;
	    }
	
	    public boolean isEnableBatchAck() {
	        return enableBatchAck;
	    }
	
	    public void setEnableBatchAck(boolean enableBatchAck) {
	        this.enableBatchAck = enableBatchAck;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//broker/src/main/java/org/apache/rocketmq/broker/metrics/ConsumerLagCalculator.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.broker.metrics;
	
	import java.util.Map;
	import java.util.Set;
	import java.util.function.Consumer;
	import java.util.stream.Collectors;
	import org.apache.rocketmq.broker.BrokerController;
	import org.apache.rocketmq.broker.client.ConsumerGroupInfo;
	import org.apache.rocketmq.broker.client.ConsumerManager;
	import org.apache.rocketmq.broker.filter.ConsumerFilterData;
	import org.apache.rocketmq.broker.filter.ConsumerFilterManager;
	import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;
	import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;
	import org.apache.rocketmq.broker.processor.PopBufferMergeService;
	import org.apache.rocketmq.broker.processor.PopInflightMessageCounter;
	import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;
	import org.apache.rocketmq.broker.topic.TopicConfigManager;
	import org.apache.rocketmq.common.BrokerConfig;
	import org.apache.rocketmq.common.KeyBuilder;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.common.TopicConfig;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.constant.PermName;
	import org.apache.rocketmq.common.filter.ExpressionType;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.remoting.protocol.filter.FilterAPI;
	import org.apache.rocketmq.remoting.protocol.heartbeat.ConsumeType;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SimpleSubscriptionData;
	import org.apache.rocketmq.remoting.protocol.subscription.SubscriptionGroupConfig;
	import org.apache.rocketmq.store.DefaultMessageFilter;
	import org.apache.rocketmq.store.MessageStore;
	
	public class ConsumerLagCalculator {
	    private final BrokerConfig brokerConfig;
	    private final TopicConfigManager topicConfigManager;
	    private final ConsumerManager consumerManager;
	    private final ConsumerOffsetManager offsetManager;
	    private final ConsumerFilterManager consumerFilterManager;
	    private final SubscriptionGroupManager subscriptionGroupManager;
	    private final MessageStore messageStore;
	    private final PopBufferMergeService popBufferMergeService;
	    private final PopInflightMessageCounter popInflightMessageCounter;
	
	    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
	
	    public ConsumerLagCalculator(BrokerController brokerController) {
	        this.brokerConfig = brokerController.getBrokerConfig();
	        this.topicConfigManager = brokerController.getTopicConfigManager();
	        this.consumerManager = brokerController.getConsumerManager();
	        this.offsetManager = brokerController.getConsumerOffsetManager();
	        this.consumerFilterManager = brokerController.getConsumerFilterManager();
	        this.subscriptionGroupManager = brokerController.getSubscriptionGroupManager();
	        this.messageStore = brokerController.getMessageStore();
	        this.popBufferMergeService = brokerController.getPopMessageProcessor().getPopBufferMergeService();
	        this.popInflightMessageCounter = brokerController.getPopInflightMessageCounter();
	    }
	
	    private static class ProcessGroupInfo {
	        public String group;
	        public String topic;
	        public boolean isPop;
	        public String retryTopic;
	
	        public ProcessGroupInfo(String group, String topic, boolean isPop,
	            String retryTopic) {
	            this.group = group;
	            this.topic = topic;
	            this.isPop = isPop;
	            this.retryTopic = retryTopic;
	        }
	    }
	
	    public static class BaseCalculateResult {
	        public String group;
	        public String topic;
	        public boolean isRetry;
	
	        public BaseCalculateResult(String group, String topic, boolean isRetry) {
	            this.group = group;
	            this.topic = topic;
	            this.isRetry = isRetry;
	        }
	    }
	
	    public static class CalculateLagResult extends BaseCalculateResult {
	        public long lag;
	        public long earliestUnconsumedTimestamp;
	
	        public CalculateLagResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateInflightResult extends BaseCalculateResult {
	        public long inFlight;
	        public long earliestUnPulledTimestamp;
	
	        public CalculateInflightResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    public static class CalculateAvailableResult extends BaseCalculateResult {
	        public long available;
	
	        public CalculateAvailableResult(String group, String topic, boolean isRetry) {
	            super(group, topic, isRetry);
	        }
	    }
	
	    private void processAllGroup(Consumer<ProcessGroupInfo> consumer) {
	        for (Map.Entry<String, SubscriptionGroupConfig> subscriptionEntry :
	            subscriptionGroupManager.getSubscriptionGroupTable().entrySet()) {
	
	            String group = subscriptionEntry.getKey();
	            ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	            boolean isPop = false;
	            if (consumerGroupInfo != null) {
	                isPop = consumerGroupInfo.getConsumeType() == ConsumeType.CONSUME_POP;
	            }
	            Set<String> topics;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionEntry.getValue();
	                if (subscriptionGroupConfig.getSubscriptionDataSet() == null ||
	                    subscriptionGroupConfig.getSubscriptionDataSet().isEmpty()) {
	                    continue;
	                }
	                topics = subscriptionGroupConfig.getSubscriptionDataSet()
	                    .stream()
	                    .map(SimpleSubscriptionData::getTopic)
	                    .collect(Collectors.toSet());
	            } else {
	                if (consumerGroupInfo == null) {
	                    continue;
	                }
	                topics = consumerGroupInfo.getSubscribeTopics();
	            }
	
	            if (null == topics || topics.isEmpty()) {
	                continue;
	            }
	            for (String topic : topics) {
	                // skip retry topic
	                if (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {
	                    continue;
	                }
	
	                TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	                if (topicConfig == null) {
	                    continue;
	                }
	
	                // skip no perm topic
	                int topicPerm = topicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                if (!PermName.isReadable(topicPerm) && !PermName.isWriteable(topicPerm)) {
	                    continue;
	                }
	
	                if (isPop) {
	                    String retryTopic = KeyBuilder.buildPopRetryTopic(topic, group, brokerConfig.isEnableRetryTopicV2());
	                    TopicConfig retryTopicConfig = topicConfigManager.selectTopicConfig(retryTopic);
	                    if (retryTopicConfig != null) {
	                        int retryTopicPerm = retryTopicConfig.getPerm() & brokerConfig.getBrokerPermission();
	                        if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                            consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopic));
	                            continue;
	                        }
	                    }
	                    if (brokerConfig.isEnableRetryTopicV2() && brokerConfig.isRetrieveMessageFromPopRetryTopicV1()) {
	                        String retryTopicV1 = KeyBuilder.buildPopRetryTopicV1(topic, group);
	                        TopicConfig retryTopicConfigV1 = topicConfigManager.selectTopicConfig(retryTopicV1);
	                        if (retryTopicConfigV1 != null) {
	                            int retryTopicPerm = retryTopicConfigV1.getPerm() & brokerConfig.getBrokerPermission();
	                            if (PermName.isReadable(retryTopicPerm) || PermName.isWriteable(retryTopicPerm)) {
	                                consumer.accept(new ProcessGroupInfo(group, topic, true, retryTopicV1));
	                                continue;
	                            }
	                        }
	                    }
	                    consumer.accept(new ProcessGroupInfo(group, topic, true, null));
	                } else {
	                    consumer.accept(new ProcessGroupInfo(group, topic, false, null));
	                }
	            }
	        }
	    }
	
	    public void calculateLag(Consumer<CalculateLagResult> lagRecorder) {
	        processAllGroup(info -> {
	            if (info.group == null || info.topic == null) {
	                return;
	            }
	
	            CalculateLagResult result = new CalculateLagResult(info.group, info.topic, false);
	
	            Pair<Long, Long> lag = getConsumerLagStats(info.group, info.topic, info.isPop);
	            if (lag != null) {
	                result.lag = lag.getObject1();
	                result.earliestUnconsumedTimestamp = lag.getObject2();
	            }
	            lagRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryLag = getConsumerLagStats(info.group, info.retryTopic, true);
	
	                result = new CalculateLagResult(info.group, info.topic, true);
	                if (retryLag != null) {
	                    result.lag = retryLag.getObject1();
	                    result.earliestUnconsumedTimestamp = retryLag.getObject2();
	                }
	                lagRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateInflight(Consumer<CalculateInflightResult> inflightRecorder) {
	        processAllGroup(info -> {
	            CalculateInflightResult result = new CalculateInflightResult(info.group, info.topic, false);
	            Pair<Long, Long> inFlight = getInFlightMsgStats(info.group, info.topic, info.isPop);
	            if (inFlight != null) {
	                result.inFlight = inFlight.getObject1();
	                result.earliestUnPulledTimestamp = inFlight.getObject2();
	            }
	            inflightRecorder.accept(result);
	
	            if (info.isPop) {
	                Pair<Long, Long> retryInFlight = getInFlightMsgStats(info.group, info.retryTopic, true);
	
	                result = new CalculateInflightResult(info.group, info.topic, true);
	                if (retryInFlight != null) {
	                    result.inFlight = retryInFlight.getObject1();
	                    result.earliestUnPulledTimestamp = retryInFlight.getObject2();
	                }
	                inflightRecorder.accept(result);
	            }
	        });
	    }
	
	    public void calculateAvailable(Consumer<CalculateAvailableResult> availableRecorder) {
	        processAllGroup(info -> {
	            CalculateAvailableResult result = new CalculateAvailableResult(info.group, info.topic, false);
	
	            result.available = getAvailableMsgCount(info.group, info.topic, info.isPop);
	            availableRecorder.accept(result);
	
	            if (info.isPop) {
	                long retryAvailable = getAvailableMsgCount(info.group, info.retryTopic, true);
	
	                result = new CalculateAvailableResult(info.group, info.topic, true);
	                result.available = retryAvailable;
	                availableRecorder.accept(result);
	            }
	        });
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnconsumedTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnconsumedTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getConsumerLagStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnconsumedTimestamp = Math.min(earliestUnconsumedTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnconsumedTimestamp < 0 || earliestUnconsumedTimestamp == Long.MAX_VALUE) {
	            earliestUnconsumedTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnconsumedTimestamp);
	    }
	
	    public Pair<Long, Long> getConsumerLagStats(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        if (isPop) {
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	            long inFlightNum = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long lag = calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset) + inFlightNum;
	            long consumerOffset = pullOffset - inFlightNum;
	            long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	            return new Pair<>(lag, consumerStoreTimeStamp);
	        }
	
	        long consumerOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (consumerOffset < 0) {
	            consumerOffset = brokerOffset;
	        }
	
	        long lag = calculateMessageCount(group, topic, queueId, consumerOffset, brokerOffset);
	        long consumerStoreTimeStamp = getStoreTimeStamp(topic, queueId, consumerOffset);
	        return new Pair<>(lag, consumerStoreTimeStamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, boolean isPop) {
	        long total = 0L;
	        long earliestUnPulledTimestamp = Long.MAX_VALUE;
	
	        if (group == null || topic == null) {
	            return new Pair<>(total, earliestUnPulledTimestamp);
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                Pair<Long, Long> pair = getInFlightMsgStats(group, topic, queueId, isPop);
	                total += pair.getObject1();
	                earliestUnPulledTimestamp = Math.min(earliestUnPulledTimestamp, pair.getObject2());
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        if (earliestUnPulledTimestamp < 0 || earliestUnPulledTimestamp == Long.MAX_VALUE) {
	            earliestUnPulledTimestamp = 0L;
	        }
	
	        return new Pair<>(total, earliestUnPulledTimestamp);
	    }
	
	    public Pair<Long, Long> getInFlightMsgStats(String group, String topic, int queueId, boolean isPop) {
	        if (isPop) {
	            long inflight = popInflightMessageCounter.getGroupPopInFlightMessageNum(topic, group, queueId);
	            long pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	            }
	            long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	            return new Pair<>(inflight, pullStoreTimeStamp);
	        }
	
	        long pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        if (pullOffset < 0) {
	            pullOffset = 0;
	        }
	
	        long commitOffset = offsetManager.queryOffset(group, topic, queueId);
	        if (commitOffset < 0) {
	            commitOffset = pullOffset;
	        }
	
	        long inflight = calculateMessageCount(group, topic, queueId, commitOffset, pullOffset);
	        long pullStoreTimeStamp = getStoreTimeStamp(topic, queueId, pullOffset);
	        return new Pair<>(inflight, pullStoreTimeStamp);
	    }
	
	    public long getAvailableMsgCount(String group, String topic, boolean isPop) {
	        long total = 0L;
	
	        if (group == null || topic == null) {
	            return total;
	        }
	
	        TopicConfig topicConfig = topicConfigManager.selectTopicConfig(topic);
	        if (topicConfig != null) {
	            for (int queueId = 0; queueId < topicConfig.getWriteQueueNums(); queueId++) {
	                total += getAvailableMsgCount(group, topic, queueId, isPop);
	            }
	        } else {
	            LOGGER.warn("failed to get config of topic {}", topic);
	        }
	
	        return total;
	    }
	
	    public long getAvailableMsgCount(String group, String topic, int queueId, boolean isPop) {
	        long brokerOffset = messageStore.getMaxOffsetInQueue(topic, queueId);
	        if (brokerOffset < 0) {
	            brokerOffset = 0;
	        }
	
	        long pullOffset;
	        if (isPop) {
	            pullOffset = popBufferMergeService.getLatestOffset(topic, group, queueId);
	            if (pullOffset < 0) {
	                pullOffset = offsetManager.queryOffset(group, topic, queueId);
	            }
	            if (pullOffset < 0) {
	                pullOffset = brokerOffset;
	            }
	        } else {
	            pullOffset = offsetManager.queryPullOffset(group, topic, queueId);
	        }
	        if (pullOffset < 0) {
	            pullOffset = brokerOffset;
	        }
	
	        return calculateMessageCount(group, topic, queueId, pullOffset, brokerOffset);
	    }
	
	    public long getStoreTimeStamp(String topic, int queueId, long offset) {
	        long storeTimeStamp = Long.MAX_VALUE;
	        if (offset >= 0) {
	            storeTimeStamp = messageStore.getMessageStoreTimeStamp(topic, queueId, offset);
	            storeTimeStamp = storeTimeStamp > 0 ? storeTimeStamp : Long.MAX_VALUE;
	        }
	        return storeTimeStamp;
	    }
	
	    public long calculateMessageCount(String group, String topic, int queueId, long from, long to) {
	        long count = to - from;
	
	        if (brokerConfig.isEstimateAccumulation() && to > from) {
	            SubscriptionData subscriptionData = null;
	            if (brokerConfig.isUseStaticSubscription()) {
	                SubscriptionGroupConfig subscriptionGroupConfig = subscriptionGroupManager.findSubscriptionGroupConfig(group);
	                if (subscriptionGroupConfig != null) {
	                    for (SimpleSubscriptionData simpleSubscriptionData : subscriptionGroupConfig.getSubscriptionDataSet()) {
	                        if (topic.equals(simpleSubscriptionData.getTopic())) {
	                            try {
	                                subscriptionData = FilterAPI.buildSubscriptionData(simpleSubscriptionData.getTopic(),
	                                    simpleSubscriptionData.getExpression(), simpleSubscriptionData.getExpressionType());
	                            } catch (Exception e) {
	                                LOGGER.error("Try to build subscription for group:{}, topic:{} exception.", group, topic, e);
	                            }
	                            break;
	                        }
	                    }
	                }
	            } else {
	                ConsumerGroupInfo consumerGroupInfo = consumerManager.getConsumerGroupInfo(group, true);
	                if (consumerGroupInfo != null) {
	                    subscriptionData = consumerGroupInfo.findSubscriptionData(topic);
	                }
	            }
	
	            if (null != subscriptionData) {
	                if (ExpressionType.TAG.equalsIgnoreCase(subscriptionData.getExpressionType())
	                    && !SubscriptionData.SUB_ALL.equals(subscriptionData.getSubString())) {
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new DefaultMessageFilter(subscriptionData));
	                } else if (ExpressionType.SQL92.equalsIgnoreCase(subscriptionData.getExpressionType())) {
	                    ConsumerFilterData consumerFilterData = consumerFilterManager.get(topic, group);
	                    count = messageStore.estimateMessageCount(topic, queueId, from, to,
	                        new ExpressionMessageFilter(subscriptionData,
	                            consumerFilterData,
	                            consumerFilterManager));
	                }
	            }
	
	        }
	        return count < 0 ? 0 : count;
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//broker/src/main/java/org/apache/rocketmq/broker/out/BrokerOuterAPI.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.broker.out;
	
	import com.alibaba.fastjson2.JSON;
	import java.io.UnsupportedEncodingException;
	import java.net.InetAddress;
	import java.nio.ByteBuffer;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.List;
	import java.util.Set;
	import java.util.concurrent.ArrayBlockingQueue;
	import java.util.concurrent.CompletableFuture;
	import java.util.concurrent.CopyOnWriteArrayList;
	import java.util.concurrent.CountDownLatch;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.TimeUnit;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.rocketmq.acl.common.AclClientRPCHook;
	import org.apache.rocketmq.acl.common.SessionCredentials;
	import org.apache.rocketmq.auth.config.AuthConfig;
	import org.apache.rocketmq.client.consumer.PullResult;
	import org.apache.rocketmq.client.consumer.PullStatus;
	import org.apache.rocketmq.client.exception.MQBrokerException;
	import org.apache.rocketmq.client.impl.consumer.PullResultExt;
	import org.apache.rocketmq.client.producer.SendResult;
	import org.apache.rocketmq.client.producer.SendStatus;
	import org.apache.rocketmq.common.AbstractBrokerRunnable;
	import org.apache.rocketmq.common.BrokerIdentity;
	import org.apache.rocketmq.common.LockCallback;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.TopicConfig;
	import org.apache.rocketmq.common.UnlockCallback;
	import org.apache.rocketmq.common.UtilAll;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.filter.ExpressionType;
	import org.apache.rocketmq.common.message.Message;
	import org.apache.rocketmq.common.message.MessageAccessor;
	import org.apache.rocketmq.common.message.MessageBatch;
	import org.apache.rocketmq.common.message.MessageClientIDSetter;
	import org.apache.rocketmq.common.message.MessageConst;
	import org.apache.rocketmq.common.message.MessageDecoder;
	import org.apache.rocketmq.common.message.MessageExt;
	import org.apache.rocketmq.common.message.MessageQueue;
	import org.apache.rocketmq.common.namesrv.DefaultTopAddressing;
	import org.apache.rocketmq.common.namesrv.TopAddressing;
	import org.apache.rocketmq.common.sysflag.PullSysFlag;
	import org.apache.rocketmq.common.topic.TopicValidator;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.remoting.InvokeCallback;
	import org.apache.rocketmq.remoting.RPCHook;
	import org.apache.rocketmq.remoting.RemotingClient;
	import org.apache.rocketmq.remoting.exception.RemotingCommandException;
	import org.apache.rocketmq.remoting.exception.RemotingConnectException;
	import org.apache.rocketmq.remoting.exception.RemotingException;
	import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
	import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
	import org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException;
	import org.apache.rocketmq.remoting.netty.NettyClientConfig;
	import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
	import org.apache.rocketmq.remoting.netty.ResponseFuture;
	import org.apache.rocketmq.remoting.protocol.BrokerSyncInfo;
	import org.apache.rocketmq.remoting.protocol.DataVersion;
	import org.apache.rocketmq.remoting.protocol.RemotingCommand;
	import org.apache.rocketmq.remoting.protocol.RemotingSerializable;
	import org.apache.rocketmq.remoting.protocol.RequestCode;
	import org.apache.rocketmq.remoting.protocol.ResponseCode;
	import org.apache.rocketmq.remoting.protocol.body.BrokerMemberGroup;
	import org.apache.rocketmq.remoting.protocol.body.ClusterInfo;
	import org.apache.rocketmq.remoting.protocol.body.ConsumerOffsetSerializeWrapper;
	import org.apache.rocketmq.remoting.protocol.body.ElectMasterResponseBody;
	import org.apache.rocketmq.remoting.protocol.body.GetBrokerMemberGroupResponseBody;
	import org.apache.rocketmq.remoting.protocol.body.KVTable;
	import org.apache.rocketmq.remoting.protocol.body.LockBatchRequestBody;
	import org.apache.rocketmq.remoting.protocol.body.LockBatchResponseBody;
	import org.apache.rocketmq.remoting.protocol.body.MessageRequestModeSerializeWrapper;
	import org.apache.rocketmq.remoting.protocol.body.RegisterBrokerBody;
	import org.apache.rocketmq.remoting.protocol.body.SubscriptionGroupWrapper;
	import org.apache.rocketmq.remoting.protocol.body.SyncStateSet;
	import org.apache.rocketmq.remoting.protocol.body.TopicConfigAndMappingSerializeWrapper;
	import org.apache.rocketmq.remoting.protocol.body.TopicConfigSerializeWrapper;
	import org.apache.rocketmq.remoting.protocol.body.UnlockBatchRequestBody;
	import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.ExchangeHAInfoResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.GetBrokerMemberGroupRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.GetMaxOffsetResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.GetMinOffsetResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.LockBatchMqRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.PullMessageResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.SendMessageRequestHeaderV2;
	import org.apache.rocketmq.remoting.protocol.header.SendMessageResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.UnlockBatchMqRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.AlterSyncStateSetRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.ElectMasterResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.GetMetaDataResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.GetReplicaInfoResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.ApplyBrokerIdResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.GetNextBrokerIdResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.controller.register.RegisterBrokerToControllerResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.BrokerHeartbeatRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.GetRouteInfoRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.QueryDataVersionResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterBrokerResponseHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.RegisterTopicRequestHeader;
	import org.apache.rocketmq.remoting.protocol.header.namesrv.UnRegisterBrokerRequestHeader;
	import org.apache.rocketmq.remoting.protocol.heartbeat.SubscriptionData;
	import org.apache.rocketmq.remoting.protocol.namesrv.RegisterBrokerResult;
	import org.apache.rocketmq.remoting.protocol.route.BrokerData;
	import org.apache.rocketmq.remoting.protocol.route.QueueData;
	import org.apache.rocketmq.remoting.protocol.route.TopicRouteData;
	import org.apache.rocketmq.remoting.rpc.ClientMetadata;
	import org.apache.rocketmq.remoting.rpc.RpcClient;
	import org.apache.rocketmq.remoting.rpc.RpcClientImpl;
	import org.apache.rocketmq.remoting.rpchook.DynamicalExtFieldRPCHook;
	import org.apache.rocketmq.store.timer.TimerCheckpoint;
	import org.apache.rocketmq.store.timer.TimerMetrics;
	
	import static org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode.SUCCESS;
	import static org.apache.rocketmq.remoting.protocol.ResponseCode.CONTROLLER_MASTER_STILL_EXIST;
	
	public class BrokerOuterAPI {
	    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
	    private final RemotingClient remotingClient;
	    private final TopAddressing topAddressing = new DefaultTopAddressing(MixAll.getWSAddr());
	    private final ExecutorService brokerOuterExecutor = ThreadUtils.newThreadPoolExecutor(4, 10, 1, TimeUnit.MINUTES,
	            new ArrayBlockingQueue<>(32), new ThreadFactoryImpl("brokerOutApi_thread_", true));
	    private final ClientMetadata clientMetadata;
	    private final RpcClient rpcClient;
	    private String nameSrvAddr = null;
	
	    public BrokerOuterAPI(final NettyClientConfig nettyClientConfig, AuthConfig authConfig) {
	        this(nettyClientConfig, authConfig, new DynamicalExtFieldRPCHook(), new ClientMetadata());
	    }
	
	    private BrokerOuterAPI(final NettyClientConfig nettyClientConfig, AuthConfig authConfig, RPCHook rpcHook, ClientMetadata clientMetadata) {
	        this.remotingClient = new NettyRemotingClient(nettyClientConfig);
	        this.clientMetadata = clientMetadata;
	        this.remotingClient.registerRPCHook(rpcHook);
	        this.remotingClient.registerRPCHook(newAclRPCHook(authConfig));
	        this.rpcClient = new RpcClientImpl(this.clientMetadata, this.remotingClient);
	    }
	
	    private RPCHook newAclRPCHook(AuthConfig config) {
	        if (config == null || StringUtils.isBlank(config.getInnerClientAuthenticationCredentials())) {
	            return null;
	        }
	        SessionCredentials sessionCredentials =
	            JSON.parseObject(config.getInnerClientAuthenticationCredentials(), SessionCredentials.class);
	        if (StringUtils.isBlank(sessionCredentials.getAccessKey()) || StringUtils.isBlank(sessionCredentials.getSecretKey())) {
	            return null;
	        }
	        return new AclClientRPCHook(sessionCredentials);
	    }
	
	    public void start() {
	        this.remotingClient.start();
	    }
	
	    public void shutdown() {
	        this.remotingClient.shutdown();
	        this.brokerOuterExecutor.shutdown();
	    }
	
	    public List<String> getNameServerAddressList() {
	        return this.remotingClient.getNameServerAddressList();
	    }
	
	    public String fetchNameServerAddr() {
	        try {
	            String addrs = this.topAddressing.fetchNSAddr();
	            if (!UtilAll.isBlank(addrs)) {
	                if (!addrs.equals(this.nameSrvAddr)) {
	                    LOGGER.info("name server address changed, old: {} new: {}", this.nameSrvAddr, addrs);
	                    this.updateNameServerAddressList(addrs);
	                    this.nameSrvAddr = addrs;
	                    return nameSrvAddr;
	                }
	            }
	        } catch (Exception e) {
	            LOGGER.error("fetchNameServerAddr Exception", e);
	        }
	        return nameSrvAddr;
	    }
	
	    public List<String> dnsLookupAddressByDomain(String domain) {
	        List<String> addressList = new ArrayList<>();
	        try {
	            java.security.Security.setProperty("networkaddress.cache.ttl", "10");
	            int index = domain.indexOf(":");
	            String portStr = domain.substring(index);
	            String domainStr = domain.substring(0, index);
	            InetAddress[] addresses = InetAddress.getAllByName(domainStr);
	            for (InetAddress address : addresses) {
	                addressList.add(address.getHostAddress() + portStr);
	            }
	            LOGGER.info("dns lookup address by domain success, domain={}, result={}", domain, addressList);
	        } catch (Exception e) {
	            LOGGER.error("dns lookup address by domain error, domain={}", domain, e);
	        }
	        return addressList;
	    }
	
	    public boolean checkAddressReachable(String address) {
	        return this.remotingClient.isAddressReachable(address);
	    }
	
	    public void updateNameServerAddressList(final String addrs) {
	        String[] addrArray = addrs.split(";");
	        List<String> lst = new ArrayList<String>(Arrays.asList(addrArray));
	        this.remotingClient.updateNameServerAddressList(lst);
	    }
	
	    public void updateNameServerAddressListByDnsLookup(final String domain) {
	        List<String> lst = this.dnsLookupAddressByDomain(domain);
	        this.remotingClient.updateNameServerAddressList(lst);
	    }
	
	    public BrokerMemberGroup syncBrokerMemberGroup(String clusterName, String brokerName)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
	        return syncBrokerMemberGroup(clusterName, brokerName, false);
	    }
	
	    public BrokerMemberGroup syncBrokerMemberGroup(String clusterName, String brokerName,
	        boolean isCompatibleWithOldNameSrv)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
	        if (isCompatibleWithOldNameSrv) {
	            return getBrokerMemberGroupCompatible(clusterName, brokerName);
	        } else {
	            return getBrokerMemberGroup(clusterName, brokerName);
	        }
	    }
	
	    public BrokerMemberGroup getBrokerMemberGroup(String clusterName, String brokerName)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
	        BrokerMemberGroup brokerMemberGroup = new BrokerMemberGroup(clusterName, brokerName);
	
	        GetBrokerMemberGroupRequestHeader requestHeader = new GetBrokerMemberGroupRequestHeader();
	        requestHeader.setClusterName(clusterName);
	        requestHeader.setBrokerName(brokerName);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_MEMBER_GROUP, requestHeader);
	
	        RemotingCommand response = null;
	        response = this.remotingClient.invokeSync(null, request, 3000);
	        assert response != null;
	
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                byte[] body = response.getBody();
	                if (body != null) {
	                    GetBrokerMemberGroupResponseBody brokerMemberGroupResponseBody =
	                        GetBrokerMemberGroupResponseBody.decode(body, GetBrokerMemberGroupResponseBody.class);
	
	                    return brokerMemberGroupResponseBody.getBrokerMemberGroup();
	                }
	            }
	            default:
	                break;
	        }
	
	        return brokerMemberGroup;
	    }
	
	    public BrokerMemberGroup getBrokerMemberGroupCompatible(String clusterName, String brokerName)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
	        BrokerMemberGroup brokerMemberGroup = new BrokerMemberGroup(clusterName, brokerName);
	
	        GetRouteInfoRequestHeader requestHeader = new GetRouteInfoRequestHeader();
	        requestHeader.setTopic(TopicValidator.SYNC_BROKER_MEMBER_GROUP_PREFIX + brokerName);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ROUTEINFO_BY_TOPIC, requestHeader);
	
	        RemotingCommand response;
	        response = this.remotingClient.invokeSync(null, request, 3000);
	        assert response != null;
	
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                byte[] body = response.getBody();
	                if (body != null) {
	                    TopicRouteData topicRouteData = TopicRouteData.decode(body, TopicRouteData.class);
	                    for (BrokerData brokerData : topicRouteData.getBrokerDatas()) {
	                        if (brokerData != null
	                            && brokerData.getBrokerName().equals(brokerName)
	                            && brokerData.getCluster().equals(clusterName)) {
	                            brokerMemberGroup.getBrokerAddrs().putAll(brokerData.getBrokerAddrs());
	                            break;
	                        }
	                    }
	                    return brokerMemberGroup;
	                }
	            }
	            default:
	                break;
	        }
	
	        return brokerMemberGroup;
	    }
	
	    public void sendHeartbeatViaDataVersion(
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final Long brokerId,
	        final int timeoutMillis,
	        final DataVersion dataVersion,
	        final boolean isInBrokerContainer) {
	        List<String> nameServerAddressList = this.remotingClient.getAvailableNameSrvList();
	        if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
	            final QueryDataVersionRequestHeader requestHeader = new QueryDataVersionRequestHeader();
	            requestHeader.setBrokerAddr(brokerAddr);
	            requestHeader.setBrokerName(brokerName);
	            requestHeader.setBrokerId(brokerId);
	            requestHeader.setClusterName(clusterName);
	
	            for (final String namesrvAddr : nameServerAddressList) {
	                brokerOuterExecutor.execute(new AbstractBrokerRunnable(new BrokerIdentity(clusterName, brokerName, brokerId, isInBrokerContainer)) {
	
	                    @Override
	                    public void run0() {
	                        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_DATA_VERSION, requestHeader);
	                        request.setBody(dataVersion.encode());
	
	                        try {
	                            BrokerOuterAPI.this.remotingClient.invokeOneway(namesrvAddr, request, timeoutMillis);
	                        } catch (Exception e) {
	                            LOGGER.error("sendHeartbeat Exception " + namesrvAddr, e);
	                        }
	                    }
	                });
	            }
	        }
	    }
	
	    public void sendHeartbeat(final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final Long brokerId,
	        final int timeoutMills,
	        final boolean isInBrokerContainer) {
	        List<String> nameServerAddressList = this.remotingClient.getAvailableNameSrvList();
	
	        final BrokerHeartbeatRequestHeader requestHeader = new BrokerHeartbeatRequestHeader();
	        requestHeader.setClusterName(clusterName);
	        requestHeader.setBrokerAddr(brokerAddr);
	        requestHeader.setBrokerName(brokerName);
	
	        if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
	            for (final String namesrvAddr : nameServerAddressList) {
	                brokerOuterExecutor.execute(new AbstractBrokerRunnable(new BrokerIdentity(clusterName, brokerName, brokerId, isInBrokerContainer)) {
	                    @Override
	                    public void run0() {
	                        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.BROKER_HEARTBEAT, requestHeader);
	
	                        try {
	                            BrokerOuterAPI.this.remotingClient.invokeOneway(namesrvAddr, request, timeoutMills);
	                        } catch (Exception e) {
	                            LOGGER.error("sendHeartbeat Exception " + namesrvAddr, e);
	                        }
	                    }
	                });
	            }
	        }
	    }
	
	    public BrokerSyncInfo retrieveBrokerHaInfo(String masterBrokerAddr)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException,
	        MQBrokerException, RemotingCommandException {
	        ExchangeHAInfoRequestHeader requestHeader = new ExchangeHAInfoRequestHeader();
	        requestHeader.setMasterHaAddress(null);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.EXCHANGE_BROKER_HA_INFO, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(masterBrokerAddr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                ExchangeHAInfoResponseHeader responseHeader = (ExchangeHAInfoResponseHeader) response.decodeCommandCustomHeader(ExchangeHAInfoResponseHeader.class);
	                return new BrokerSyncInfo(responseHeader.getMasterHaAddress(), responseHeader.getMasterFlushOffset(), responseHeader.getMasterAddress());
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public void sendBrokerHaInfo(String brokerAddr, String masterHaAddr, long brokerInitMaxOffset, String masterAddr)
	        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {
	        ExchangeHAInfoRequestHeader requestHeader = new ExchangeHAInfoRequestHeader();
	        requestHeader.setMasterHaAddress(masterHaAddr);
	        requestHeader.setMasterFlushOffset(brokerInitMaxOffset);
	        requestHeader.setMasterAddress(masterAddr);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.EXCHANGE_BROKER_HA_INFO, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(brokerAddr, request, 3000);
	
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return;
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public List<RegisterBrokerResult> registerBrokerAll(
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final long brokerId,
	        final String haServerAddr,
	        final TopicConfigSerializeWrapper topicConfigWrapper,
	        final List<String> filterServerList,
	        final boolean oneway,
	        final int timeoutMills,
	        final boolean enableActingMaster,
	        final boolean compressed,
	        final BrokerIdentity brokerIdentity) {
	        return registerBrokerAll(clusterName,
	            brokerAddr,
	            brokerName,
	            brokerId,
	            haServerAddr,
	            topicConfigWrapper,
	            filterServerList,
	            oneway, timeoutMills,
	            enableActingMaster,
	            compressed,
	            null,
	            brokerIdentity);
	    }
	
	    /**
	     * Considering compression brings much CPU overhead to name server, stream API will not support compression and
	     * compression feature is deprecated.
	     *
	     * @param clusterName
	     * @param brokerAddr
	     * @param brokerName
	     * @param brokerId
	     * @param haServerAddr
	     * @param topicConfigWrapper
	     * @param filterServerList
	     * @param oneway
	     * @param timeoutMills
	     * @param compressed         default false
	     * @return
	     */
	    public List<RegisterBrokerResult> registerBrokerAll(
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final long brokerId,
	        final String haServerAddr,
	        final TopicConfigSerializeWrapper topicConfigWrapper,
	        final List<String> filterServerList,
	        final boolean oneway,
	        final int timeoutMills,
	        final boolean enableActingMaster,
	        final boolean compressed,
	        final Long heartbeatTimeoutMillis,
	        final BrokerIdentity brokerIdentity) {
	
	        final List<RegisterBrokerResult> registerBrokerResultList = new CopyOnWriteArrayList<>();
	        List<String> nameServerAddressList = this.remotingClient.getAvailableNameSrvList();
	        if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
	
	            final RegisterBrokerRequestHeader requestHeader = new RegisterBrokerRequestHeader();
	            requestHeader.setBrokerAddr(brokerAddr);
	            requestHeader.setBrokerId(brokerId);
	            requestHeader.setBrokerName(brokerName);
	            requestHeader.setClusterName(clusterName);
	            requestHeader.setHaServerAddr(haServerAddr);
	            requestHeader.setEnableActingMaster(enableActingMaster);
	            requestHeader.setCompressed(false);
	            if (heartbeatTimeoutMillis != null) {
	                requestHeader.setHeartbeatTimeoutMillis(heartbeatTimeoutMillis);
	            }
	
	            RegisterBrokerBody requestBody = new RegisterBrokerBody();
	            requestBody.setTopicConfigSerializeWrapper(TopicConfigAndMappingSerializeWrapper.from(topicConfigWrapper));
	            requestBody.setFilterServerList(filterServerList);
	            final byte[] body = requestBody.encode(compressed);
	            final int bodyCrc32 = UtilAll.crc32(body);
	            requestHeader.setBodyCrc32(bodyCrc32);
	            final CountDownLatch countDownLatch = new CountDownLatch(nameServerAddressList.size());
	            for (final String namesrvAddr : nameServerAddressList) {
	                brokerOuterExecutor.execute(new AbstractBrokerRunnable(brokerIdentity) {
	                    @Override
	                    public void run0() {
	                        try {
	                            RegisterBrokerResult result = registerBroker(namesrvAddr, oneway, timeoutMills, requestHeader, body);
	                            if (result != null) {
	                                registerBrokerResultList.add(result);
	                            }
	
	                            LOGGER.info("Registering current broker to name server completed. TargetHost={}", namesrvAddr);
	                        } catch (Exception e) {
	                            LOGGER.error("Failed to register current broker to name server. TargetHost={}", namesrvAddr, e);
	                        } finally {
	                            countDownLatch.countDown();
	                        }
	                    }
	                });
	            }
	
	            try {
	                if (!countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS)) {
	                    LOGGER.warn("Registration to one or more name servers does NOT complete within deadline. Timeout threshold: {}ms", timeoutMills);
	                }
	            } catch (InterruptedException ignore) {
	            }
	        }
	
	        return registerBrokerResultList;
	    }
	
	    private RegisterBrokerResult registerBroker(
	        final String namesrvAddr,
	        final boolean oneway,
	        final int timeoutMills,
	        final RegisterBrokerRequestHeader requestHeader,
	        final byte[] body
	    ) throws RemotingCommandException, MQBrokerException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException,
	        InterruptedException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.REGISTER_BROKER, requestHeader);
	        request.setBody(body);
	
	        if (oneway) {
	            try {
	                this.remotingClient.invokeOneway(namesrvAddr, request, timeoutMills);
	            } catch (RemotingTooMuchRequestException e) {
	                // Ignore
	            }
	            return null;
	        }
	
	        RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, timeoutMills);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                RegisterBrokerResponseHeader responseHeader =
	                    (RegisterBrokerResponseHeader) response.decodeCommandCustomHeader(RegisterBrokerResponseHeader.class);
	                RegisterBrokerResult result = new RegisterBrokerResult();
	                result.setMasterAddr(responseHeader.getMasterAddr());
	                result.setHaServerAddr(responseHeader.getHaServerAddr());
	                if (response.getBody() != null) {
	                    result.setKvTable(KVTable.decode(response.getBody(), KVTable.class));
	                }
	                return result;
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), requestHeader == null ? null : requestHeader.getBrokerAddr());
	    }
	
	    public void unregisterBrokerAll(
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final long brokerId
	    ) {
	        List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
	        if (nameServerAddressList != null) {
	            for (String namesrvAddr : nameServerAddressList) {
	                try {
	                    this.unregisterBroker(namesrvAddr, clusterName, brokerAddr, brokerName, brokerId);
	                    LOGGER.info("unregisterBroker OK, NamesrvAddr: {}", namesrvAddr);
	                } catch (Exception e) {
	                    LOGGER.warn("unregisterBroker Exception, NamesrvAddr: {}", namesrvAddr, e);
	                }
	            }
	        }
	    }
	
	    public void unregisterBroker(
	        final String namesrvAddr,
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final long brokerId
	    ) throws RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException, InterruptedException, MQBrokerException {
	        UnRegisterBrokerRequestHeader requestHeader = new UnRegisterBrokerRequestHeader();
	        requestHeader.setBrokerAddr(brokerAddr);
	        requestHeader.setBrokerId(brokerId);
	        requestHeader.setBrokerName(brokerName);
	        requestHeader.setClusterName(clusterName);
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UNREGISTER_BROKER, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(namesrvAddr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return;
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), brokerAddr);
	    }
	
	    /**
	     * Register the topic route info of single topic to all name server nodes.
	     * This method is used to replace incremental broker registration feature.
	     */
	    public void registerSingleTopicAll(
	        final String brokerName,
	        final TopicConfig topicConfig,
	        final int timeoutMills) {
	        String topic = topicConfig.getTopicName();
	        RegisterTopicRequestHeader requestHeader = new RegisterTopicRequestHeader();
	        requestHeader.setTopic(topic);
	
	        TopicRouteData topicRouteData = new TopicRouteData();
	        List<QueueData> queueDatas = new ArrayList<>();
	        topicRouteData.setQueueDatas(queueDatas);
	
	        final QueueData queueData = new QueueData();
	        queueData.setBrokerName(brokerName);
	        queueData.setPerm(topicConfig.getPerm());
	        queueData.setReadQueueNums(topicConfig.getReadQueueNums());
	        queueData.setWriteQueueNums(topicConfig.getWriteQueueNums());
	        queueData.setTopicSysFlag(topicConfig.getTopicSysFlag());
	        queueDatas.add(queueData);
	        final byte[] topicRouteBody = topicRouteData.encode();
	
	        List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
	        final CountDownLatch countDownLatch = new CountDownLatch(nameServerAddressList.size());
	        for (final String namesrvAddr : nameServerAddressList) {
	            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.REGISTER_TOPIC_IN_NAMESRV, requestHeader);
	            request.setBody(topicRouteBody);
	
	            try {
	                brokerOuterExecutor.execute(() -> {
	                    try {
	                        RemotingCommand response = BrokerOuterAPI.this.remotingClient.invokeSync(namesrvAddr, request, timeoutMills);
	                        assert response != null;
	                        LOGGER.info("Register single topic {} to broker {} with response code {}", topic, brokerName, response.getCode());
	                    } catch (Exception e) {
	                        LOGGER.warn("Register single topic {} to broker {} exception", topic, brokerName, e);
	                    } finally {
	                        countDownLatch.countDown();
	                    }
	                });
	            } catch (Exception e) {
	                LOGGER.warn("Execute single topic registration task failed, topic {}, broker name {}", topic, brokerName);
	                countDownLatch.countDown();
	            }
	
	        }
	
	        try {
	            if (!countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS)) {
	                LOGGER.warn("Registration single topic to one or more name servers timeout. Timeout threshold: {}ms", timeoutMills);
	            }
	        } catch (InterruptedException ignore) {
	        }
	    }
	
	    public List<Boolean> needRegister(
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final long brokerId,
	        final TopicConfigSerializeWrapper topicConfigWrapper,
	        final int timeoutMills,
	        final boolean isInBrokerContainer) {
	        final List<Boolean> changedList = new CopyOnWriteArrayList<>();
	        List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
	        if (nameServerAddressList != null && nameServerAddressList.size() > 0) {
	            final CountDownLatch countDownLatch = new CountDownLatch(nameServerAddressList.size());
	            for (final String namesrvAddr : nameServerAddressList) {
	                brokerOuterExecutor.execute(new AbstractBrokerRunnable(new BrokerIdentity(clusterName, brokerName, brokerId, isInBrokerContainer)) {
	                    @Override
	                    public void run0() {
	                        try {
	                            QueryDataVersionRequestHeader requestHeader = new QueryDataVersionRequestHeader();
	                            requestHeader.setBrokerAddr(brokerAddr);
	                            requestHeader.setBrokerId(brokerId);
	                            requestHeader.setBrokerName(brokerName);
	                            requestHeader.setClusterName(clusterName);
	                            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.QUERY_DATA_VERSION, requestHeader);
	                            request.setBody(topicConfigWrapper.getDataVersion().encode());
	                            RemotingCommand response = remotingClient.invokeSync(namesrvAddr, request, timeoutMills);
	                            DataVersion nameServerDataVersion = null;
	                            Boolean changed = false;
	                            switch (response.getCode()) {
	                                case ResponseCode.SUCCESS: {
	                                    QueryDataVersionResponseHeader queryDataVersionResponseHeader =
	                                        (QueryDataVersionResponseHeader) response.decodeCommandCustomHeader(QueryDataVersionResponseHeader.class);
	                                    changed = queryDataVersionResponseHeader.getChanged();
	                                    byte[] body = response.getBody();
	                                    if (body != null) {
	                                        nameServerDataVersion = DataVersion.decode(body, DataVersion.class);
	                                        if (!topicConfigWrapper.getDataVersion().equals(nameServerDataVersion)) {
	                                            changed = true;
	                                        }
	                                    }
	                                    if (changed == null || changed) {
	                                        changedList.add(Boolean.TRUE);
	                                    }
	                                }
	                                default:
	                                    break;
	                            }
	                            LOGGER.warn("Query data version from name server {} OK, changed {}, broker {}, name server {}", namesrvAddr, changed, topicConfigWrapper.getDataVersion(), nameServerDataVersion == null ? "" : nameServerDataVersion);
	                        } catch (Exception e) {
	                            changedList.add(Boolean.TRUE);
	                            LOGGER.error("Query data version from name server {} exception", namesrvAddr, e);
	                        } finally {
	                            countDownLatch.countDown();
	                        }
	                    }
	                });
	
	            }
	            try {
	                countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS);
	            } catch (InterruptedException e) {
	                LOGGER.error("query dataversion from nameserver countDownLatch await Exception", e);
	            }
	        }
	        return changedList;
	    }
	
	    public TopicConfigAndMappingSerializeWrapper getAllTopicConfig(
	        final String addr) throws RemotingConnectException, RemotingSendRequestException,
	        RemotingTimeoutException, InterruptedException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_TOPIC_CONFIG, null);
	
	        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(true, addr), request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return TopicConfigSerializeWrapper.decode(response.getBody(), TopicConfigAndMappingSerializeWrapper.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public TimerCheckpoint getTimerCheckPoint(
	        final String addr) throws RemotingConnectException, RemotingSendRequestException,
	        RemotingTimeoutException, InterruptedException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_TIMER_CHECK_POINT, null);
	
	        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(true, addr), request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return TimerCheckpoint.decode(ByteBuffer.wrap(response.getBody()));
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public TimerMetrics.TimerMetricsSerializeWrapper getTimerMetrics(
	        final String addr) throws RemotingConnectException, RemotingSendRequestException,
	        RemotingTimeoutException, InterruptedException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_TIMER_METRICS, null);
	
	        RemotingCommand response = this.remotingClient.invokeSync(MixAll.brokerVIPChannel(true, addr), request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return TimerMetrics.TimerMetricsSerializeWrapper.decode(response.getBody(), TimerMetrics.TimerMetricsSerializeWrapper.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public ConsumerOffsetSerializeWrapper getAllConsumerOffset(
	        final String addr) throws InterruptedException, RemotingTimeoutException,
	        RemotingSendRequestException, RemotingConnectException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_CONSUMER_OFFSET, null);
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return ConsumerOffsetSerializeWrapper.decode(response.getBody(), ConsumerOffsetSerializeWrapper.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public String getAllDelayOffset(
	        final String addr) throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException,
	        RemotingConnectException, MQBrokerException, UnsupportedEncodingException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_DELAY_OFFSET, null);
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return new String(response.getBody(), MixAll.DEFAULT_CHARSET);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public SubscriptionGroupWrapper getAllSubscriptionGroupConfig(
	        final String addr) throws InterruptedException, RemotingTimeoutException,
	        RemotingSendRequestException, RemotingConnectException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_SUBSCRIPTIONGROUP_CONFIG, null);
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return SubscriptionGroupWrapper.decode(response.getBody(), SubscriptionGroupWrapper.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public void registerRPCHook(RPCHook rpcHook) {
	        remotingClient.registerRPCHook(rpcHook);
	    }
	
	    public void clearRPCHook() {
	        remotingClient.clearRPCHook();
	    }
	
	    public long getMaxOffset(final String addr, final String topic, final int queueId, final boolean committed,
	        final boolean isOnlyThisBroker)
	        throws RemotingException, MQBrokerException, InterruptedException {
	        GetMaxOffsetRequestHeader requestHeader = new GetMaxOffsetRequestHeader();
	        requestHeader.setTopic(topic);
	        requestHeader.setQueueId(queueId);
	        requestHeader.setCommitted(committed);
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_MAX_OFFSET, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                GetMaxOffsetResponseHeader responseHeader = (GetMaxOffsetResponseHeader) response.decodeCommandCustomHeader(GetMaxOffsetResponseHeader.class);
	
	                return responseHeader.getOffset();
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public long getMinOffset(final String addr, final String topic, final int queueId, final boolean isOnlyThisBroker)
	        throws RemotingException, MQBrokerException, InterruptedException {
	        GetMinOffsetRequestHeader requestHeader = new GetMinOffsetRequestHeader();
	        requestHeader.setTopic(topic);
	        requestHeader.setQueueId(queueId);
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_MIN_OFFSET, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                GetMinOffsetResponseHeader responseHeader = (GetMinOffsetResponseHeader) response.decodeCommandCustomHeader(GetMinOffsetResponseHeader.class);
	
	                return responseHeader.getOffset();
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public void lockBatchMQAsync(
	        final String addr,
	        final LockBatchRequestBody requestBody,
	        final long timeoutMillis,
	        final LockCallback callback) throws RemotingException, InterruptedException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.LOCK_BATCH_MQ, new LockBatchMqRequestHeader());
	
	        request.setBody(requestBody.encode());
	        this.remotingClient.invokeAsync(addr, request, timeoutMillis, new InvokeCallback() {
	            @Override
	            public void operationComplete(ResponseFuture responseFuture) {
	
	            }
	
	            @Override
	            public void operationSucceed(RemotingCommand response) {
	                if (callback == null) {
	                    return;
	                }
	                if (response.getCode() == ResponseCode.SUCCESS) {
	                    LockBatchResponseBody responseBody = LockBatchResponseBody.decode(response.getBody(),
	                        LockBatchResponseBody.class);
	                    Set<MessageQueue> messageQueues = responseBody.getLockOKMQSet();
	                    callback.onSuccess(messageQueues);
	                } else {
	                    callback.onException(new MQBrokerException(response.getCode(), response.getRemark()));
	                }
	            }
	
	            @Override
	            public void operationFail(Throwable throwable) {
	                if (callback == null) {
	                    return;
	                }
	                callback.onException(throwable);
	            }
	        });
	    }
	
	    public void unlockBatchMQAsync(
	        final String addr,
	        final UnlockBatchRequestBody requestBody,
	        final long timeoutMillis,
	        final UnlockCallback callback) throws RemotingException, InterruptedException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UNLOCK_BATCH_MQ, new UnlockBatchMqRequestHeader());
	
	        request.setBody(requestBody.encode());
	
	        this.remotingClient.invokeAsync(addr, request, timeoutMillis, new InvokeCallback() {
	            @Override
	            public void operationComplete(ResponseFuture responseFuture) {
	
	            }
	
	            @Override
	            public void operationSucceed(RemotingCommand response) {
	                if (callback == null) {
	                    return;
	                }
	                if (response.getCode() == ResponseCode.SUCCESS) {
	                    callback.onSuccess();
	                } else {
	                    callback.onException(new MQBrokerException(response.getCode(), response.getRemark()));
	                }
	            }
	
	            @Override
	            public void operationFail(Throwable throwable) {
	                if (callback == null) {
	                    return;
	                }
	                callback.onException(throwable);
	            }
	        });
	    }
	
	    public RemotingClient getRemotingClient() {
	        return this.remotingClient;
	    }
	
	    public SendResult sendMessageToSpecificBroker(String brokerAddr, final String brokerName,
	        final MessageExt msg, String group,
	        long timeoutMillis) throws RemotingException, MQBrokerException, InterruptedException {
	
	        RemotingCommand request = buildSendMessageRequest(msg, group);
	        RemotingCommand response = this.remotingClient.invokeSync(brokerAddr, request, timeoutMillis);
	        return this.processSendResponse(brokerName, msg, response);
	    }
	
	    public CompletableFuture<SendResult> sendMessageToSpecificBrokerAsync(String brokerAddr, final String brokerName,
	        final MessageExt msg, String group,
	        long timeoutMillis) {
	        RemotingCommand request = buildSendMessageRequest(msg, group);
	
	        CompletableFuture<SendResult> cf = new CompletableFuture<>();
	        final String msgId = msg.getMsgId();
	        try {
	            this.remotingClient.invokeAsync(brokerAddr, request, timeoutMillis, new InvokeCallback() {
	                @Override
	                public void operationComplete(ResponseFuture responseFuture) {
	
	                }
	
	                @Override
	                public void operationSucceed(RemotingCommand response) {
	                    try {
	                        SendResult sendResult = processSendResponse(brokerName, msg, response);
	                        cf.complete(sendResult);
	                    } catch (MQBrokerException | RemotingCommandException e) {
	                        LOGGER.error("processSendResponse in sendMessageToSpecificBrokerAsync failed, msgId=" + msgId, e);
	                        cf.completeExceptionally(e);
	                    }
	                }
	
	                @Override
	                public void operationFail(Throwable throwable) {
	                    cf.completeExceptionally(throwable);
	                }
	            });
	        } catch (Throwable t) {
	            LOGGER.error("invokeAsync failed in sendMessageToSpecificBrokerAsync, msgId=" + msgId, t);
	            cf.completeExceptionally(t);
	        }
	        return cf;
	    }
	
	    private static RemotingCommand buildSendMessageRequest(MessageExt msg, String group) {
	        SendMessageRequestHeaderV2 requestHeaderV2 = buildSendMessageRequestHeaderV2(msg, group);
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE_V2, requestHeaderV2);
	
	        request.setBody(msg.getBody());
	        return request;
	    }
	
	    private static SendMessageRequestHeaderV2 buildSendMessageRequestHeaderV2(MessageExt msg, String group) {
	        SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();
	        requestHeader.setProducerGroup(group);
	        requestHeader.setTopic(msg.getTopic());
	        requestHeader.setDefaultTopic(TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC);
	        requestHeader.setDefaultTopicQueueNums(8);
	        requestHeader.setQueueId(msg.getQueueId());
	        requestHeader.setSysFlag(msg.getSysFlag());
	        requestHeader.setBornTimestamp(msg.getBornTimestamp());
	        requestHeader.setFlag(msg.getFlag());
	        requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));
	        requestHeader.setReconsumeTimes(msg.getReconsumeTimes());
	        requestHeader.setBatch(false);
	
	        SendMessageRequestHeaderV2 requestHeaderV2 = SendMessageRequestHeaderV2.createSendMessageRequestHeaderV2(requestHeader);
	        return requestHeaderV2;
	    }
	
	    private SendResult processSendResponse(
	        final String brokerName,
	        final Message msg,
	        final RemotingCommand response
	    ) throws MQBrokerException, RemotingCommandException {
	        SendStatus sendStatus = null;
	        switch (response.getCode()) {
	            case ResponseCode.FLUSH_DISK_TIMEOUT:
	                sendStatus = SendStatus.FLUSH_DISK_TIMEOUT;
	                break;
	            case ResponseCode.FLUSH_SLAVE_TIMEOUT:
	                sendStatus = SendStatus.FLUSH_SLAVE_TIMEOUT;
	                break;
	            case ResponseCode.SLAVE_NOT_AVAILABLE:
	                sendStatus = SendStatus.SLAVE_NOT_AVAILABLE;
	                break;
	            case ResponseCode.SUCCESS: {
	                sendStatus = SendStatus.SEND_OK;
	                break;
	            }
	            default:
	                break;
	        }
	        if (sendStatus != null) {
	            SendMessageResponseHeader responseHeader =
	                (SendMessageResponseHeader) response.decodeCommandCustomHeader(SendMessageResponseHeader.class);
	
	            //If namespace not null , reset Topic without namespace.
	            String topic = msg.getTopic();
	
	            MessageQueue messageQueue = new MessageQueue(topic, brokerName, responseHeader.getQueueId());
	
	            String uniqMsgId = MessageClientIDSetter.getUniqID(msg);
	            if (msg instanceof MessageBatch) {
	                StringBuilder sb = new StringBuilder();
	                for (Message message : (MessageBatch) msg) {
	                    sb.append(sb.length() == 0 ? "" : ",").append(MessageClientIDSetter.getUniqID(message));
	                }
	                uniqMsgId = sb.toString();
	            }
	            SendResult sendResult = new SendResult(sendStatus,
	                uniqMsgId,
	                responseHeader.getMsgId(), messageQueue, responseHeader.getQueueOffset());
	            sendResult.setTransactionId(responseHeader.getTransactionId());
	            String regionId = response.getExtFields().get(MessageConst.PROPERTY_MSG_REGION);
	            String traceOn = response.getExtFields().get(MessageConst.PROPERTY_TRACE_SWITCH);
	            if (regionId == null || regionId.isEmpty()) {
	                regionId = MixAll.DEFAULT_TRACE_REGION_ID;
	            }
	            if (traceOn != null && traceOn.equals("false")) {
	                sendResult.setTraceOn(false);
	            } else {
	                sendResult.setTraceOn(true);
	            }
	            sendResult.setRegionId(regionId);
	            return sendResult;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public ExecutorService getBrokerOuterExecutor() {
	        return brokerOuterExecutor;
	    }
	
	    public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final long timeoutMillis)
	        throws RemotingException, MQBrokerException, InterruptedException {
	        return getTopicRouteInfoFromNameServer(topic, timeoutMillis, true);
	    }
	
	    public TopicRouteData getTopicRouteInfoFromNameServer(final String topic, final long timeoutMillis,
	        boolean allowTopicNotExist) throws MQBrokerException, InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
	        GetRouteInfoRequestHeader requestHeader = new GetRouteInfoRequestHeader();
	        requestHeader.setTopic(topic);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ROUTEINFO_BY_TOPIC, requestHeader);
	
	        RemotingCommand response = this.remotingClient.invokeSync(null, request, timeoutMillis);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.TOPIC_NOT_EXIST: {
	                if (allowTopicNotExist) {
	                    LOGGER.warn("get Topic [{}] RouteInfoFromNameServer is not exist value", topic);
	                }
	
	                break;
	            }
	            case ResponseCode.SUCCESS: {
	                byte[] body = response.getBody();
	                if (body != null) {
	                    return TopicRouteData.decode(body, TopicRouteData.class);
	                }
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public ClusterInfo getBrokerClusterInfo() throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException, MQBrokerException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_BROKER_CLUSTER_INFO, null);
	        RemotingCommand response = this.remotingClient.invokeSync(null, request, 3_000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return ClusterInfo.decode(response.getBody(), ClusterInfo.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public void forwardRequest(String brokerAddr, RemotingCommand request, long timeoutMillis,
	        InvokeCallback invokeCallback) throws InterruptedException, RemotingSendRequestException, RemotingTimeoutException, RemotingTooMuchRequestException, RemotingConnectException {
	        this.remotingClient.invokeAsync(brokerAddr, request, timeoutMillis, invokeCallback);
	    }
	
	    public void refreshMetadata() throws Exception {
	        ClusterInfo brokerClusterInfo = getBrokerClusterInfo();
	        clientMetadata.refreshClusterInfo(brokerClusterInfo);
	    }
	
	    public ClientMetadata getClientMetadata() {
	        return clientMetadata;
	    }
	
	    public RpcClient getRpcClient() {
	        return rpcClient;
	    }
	
	    public MessageRequestModeSerializeWrapper getAllMessageRequestMode(
	        final String addr) throws RemotingSendRequestException, RemotingConnectException,
	        MQBrokerException, RemotingTimeoutException, InterruptedException {
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_MESSAGE_REQUEST_MODE, null);
	        RemotingCommand response = this.remotingClient.invokeSync(addr, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS: {
	                return MessageRequestModeSerializeWrapper.decode(response.getBody(), MessageRequestModeSerializeWrapper.class);
	            }
	            default:
	                break;
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	    }
	
	    public GetMetaDataResponseHeader getControllerMetaData(final String controllerAddress) throws Exception {
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_METADATA_INFO, null);
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        if (response.getCode() == SUCCESS) {
	            return (GetMetaDataResponseHeader) response.decodeCommandCustomHeader(GetMetaDataResponseHeader.class);
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    /**
	     * Alter syncStateSet
	     */
	    public SyncStateSet alterSyncStateSet(
	        final String controllerAddress,
	        final String brokerName,
	        final Long masterBrokerId, final int masterEpoch,
	        final Set<Long> newSyncStateSet, final int syncStateSetEpoch) throws Exception {
	
	        final AlterSyncStateSetRequestHeader requestHeader = new AlterSyncStateSetRequestHeader(brokerName, masterBrokerId, masterEpoch);
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ALTER_SYNC_STATE_SET, requestHeader);
	        request.setBody(new SyncStateSet(newSyncStateSet, syncStateSetEpoch).encode());
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case SUCCESS: {
	                assert response.getBody() != null;
	                return RemotingSerializable.decode(response.getBody(), SyncStateSet.class);
	            }
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    /**
	     * Broker try to elect itself as a master in broker set
	     */
	    public Pair<ElectMasterResponseHeader, Set<Long>> brokerElect(String controllerAddress, String clusterName,
	        String brokerName,
	        Long brokerId) throws Exception {
	
	        final ElectMasterRequestHeader requestHeader = ElectMasterRequestHeader.ofBrokerTrigger(clusterName, brokerName, brokerId);
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_ELECT_MASTER, requestHeader);
	        RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            // Only record success response.
	            case CONTROLLER_MASTER_STILL_EXIST:
	            case SUCCESS:
	                final ElectMasterResponseHeader responseHeader = (ElectMasterResponseHeader) response.decodeCommandCustomHeader(ElectMasterResponseHeader.class);
	                final ElectMasterResponseBody responseBody = RemotingSerializable.decode(response.getBody(), ElectMasterResponseBody.class);
	                return new Pair<>(responseHeader, responseBody.getSyncStateSet());
	        }
	
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public GetNextBrokerIdResponseHeader getNextBrokerId(final String clusterName, final String brokerName,
	        final String controllerAddress) throws Exception {
	        final GetNextBrokerIdRequestHeader requestHeader = new GetNextBrokerIdRequestHeader(clusterName, brokerName);
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_NEXT_BROKER_ID, requestHeader);
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        if (response.getCode() == SUCCESS) {
	            return (GetNextBrokerIdResponseHeader) response.decodeCommandCustomHeader(GetNextBrokerIdResponseHeader.class);
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public ApplyBrokerIdResponseHeader applyBrokerId(final String clusterName, final String brokerName,
	        final Long brokerId, final String registerCheckCode, final String controllerAddress) throws Exception {
	        final ApplyBrokerIdRequestHeader requestHeader = new ApplyBrokerIdRequestHeader(clusterName, brokerName, brokerId, registerCheckCode);
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_APPLY_BROKER_ID, requestHeader);
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        if (response.getCode() == SUCCESS) {
	            return (ApplyBrokerIdResponseHeader) response.decodeCommandCustomHeader(ApplyBrokerIdResponseHeader.class);
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    public Pair<RegisterBrokerToControllerResponseHeader, Set<Long>> registerBrokerToController(
	        final String clusterName, final String brokerName, final Long brokerId, final String brokerAddress,
	        final String controllerAddress) throws Exception {
	        final RegisterBrokerToControllerRequestHeader requestHeader = new RegisterBrokerToControllerRequestHeader(clusterName, brokerName, brokerId, brokerAddress);
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_REGISTER_BROKER, requestHeader);
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        if (response.getCode() == SUCCESS) {
	            RegisterBrokerToControllerResponseHeader responseHeader = (RegisterBrokerToControllerResponseHeader) response.decodeCommandCustomHeader(RegisterBrokerToControllerResponseHeader.class);
	            Set<Long> syncStateSet = RemotingSerializable.decode(response.getBody(), SyncStateSet.class).getSyncStateSet();
	            return new Pair<>(responseHeader, syncStateSet);
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    /**
	     * Get broker replica info
	     */
	    public Pair<GetReplicaInfoResponseHeader, SyncStateSet> getReplicaInfo(final String controllerAddress,
	        final String brokerName) throws Exception {
	        final GetReplicaInfoRequestHeader requestHeader = new GetReplicaInfoRequestHeader(brokerName);
	        final RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONTROLLER_GET_REPLICA_INFO, requestHeader);
	        final RemotingCommand response = this.remotingClient.invokeSync(controllerAddress, request, 3000);
	        assert response != null;
	        switch (response.getCode()) {
	            case SUCCESS: {
	                final GetReplicaInfoResponseHeader header = (GetReplicaInfoResponseHeader) response.decodeCommandCustomHeader(GetReplicaInfoResponseHeader.class);
	                assert response.getBody() != null;
	                final SyncStateSet stateSet = RemotingSerializable.decode(response.getBody(), SyncStateSet.class);
	                return new Pair<>(header, stateSet);
	            }
	        }
	        throw new MQBrokerException(response.getCode(), response.getRemark());
	    }
	
	    /**
	     * Send heartbeat to controller
	     */
	    public void sendHeartbeatToController(final String controllerAddress,
	        final String clusterName,
	        final String brokerAddr,
	        final String brokerName,
	        final Long brokerId,
	        final int sendHeartBeatTimeoutMills,
	        final boolean isInBrokerContainer,
	        final int epoch,
	        final long maxOffset,
	        final long confirmOffset,
	        final long controllerHeartBeatTimeoutMills,
	        final int electionPriority) {
	        if (StringUtils.isEmpty(controllerAddress)) {
	            return;
	        }
	
	        final BrokerHeartbeatRequestHeader requestHeader = new BrokerHeartbeatRequestHeader();
	        requestHeader.setClusterName(clusterName);
	        requestHeader.setBrokerAddr(brokerAddr);
	        requestHeader.setBrokerName(brokerName);
	        requestHeader.setEpoch(epoch);
	        requestHeader.setMaxOffset(maxOffset);
	        requestHeader.setConfirmOffset(confirmOffset);
	        requestHeader.setHeartbeatTimeoutMills(controllerHeartBeatTimeoutMills);
	        requestHeader.setElectionPriority(electionPriority);
	        requestHeader.setBrokerId(brokerId);
	        brokerOuterExecutor.execute(new AbstractBrokerRunnable(new BrokerIdentity(clusterName, brokerName, brokerId, isInBrokerContainer)) {
	            @Override
	            public void run0() {
	                RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.BROKER_HEARTBEAT, requestHeader);
	
	                try {
	                    BrokerOuterAPI.this.remotingClient.invokeOneway(controllerAddress, request, sendHeartBeatTimeoutMills);
	                } catch (Exception e) {
	                    LOGGER.error("Error happen when send heartbeat to controller {}", controllerAddress, e);
	                }
	            }
	        });
	    }
	
	    public CompletableFuture<PullResult> pullMessageFromSpecificBrokerAsync(String brokerName, String brokerAddr,
	        String consumerGroup, String topic, int queueId, long offset,
	        int maxNums, long timeoutMillis) throws RemotingException, InterruptedException {
	        PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();
	        requestHeader.setConsumerGroup(consumerGroup);
	        requestHeader.setTopic(topic);
	        requestHeader.setQueueId(queueId);
	        requestHeader.setQueueOffset(offset);
	        requestHeader.setMaxMsgNums(maxNums);
	        requestHeader.setSysFlag(PullSysFlag.buildSysFlag(false, false, true, false));
	        requestHeader.setCommitOffset(0L);
	        requestHeader.setSuspendTimeoutMillis(0L);
	        requestHeader.setSubscription(SubscriptionData.SUB_ALL);
	        requestHeader.setSubVersion(System.currentTimeMillis());
	        requestHeader.setMaxMsgBytes(Integer.MAX_VALUE);
	        requestHeader.setExpressionType(ExpressionType.TAG);
	        requestHeader.setBrokerName(brokerName);
	
	        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, requestHeader);
	        CompletableFuture<PullResult> pullResultFuture = new CompletableFuture<>();
	        this.remotingClient.invokeAsync(brokerAddr, request, timeoutMillis, new InvokeCallback() {
	            @Override
	            public void operationComplete(ResponseFuture responseFuture) {
	
	            }
	
	            @Override
	            public void operationSucceed(RemotingCommand response) {
	                try {
	                    PullResultExt pullResultExt = processPullResponse(response, brokerAddr);
	                    processPullResult(pullResultExt, brokerName, queueId);
	                    pullResultFuture.complete(pullResultExt);
	                } catch (Exception e) {
	                    pullResultFuture.complete(new PullResult(PullStatus.NO_MATCHED_MSG, -1, -1, -1, new ArrayList<>()));
	                }
	            }
	
	            @Override
	            public void operationFail(Throwable throwable) {
	                pullResultFuture.complete(new PullResult(PullStatus.NO_MATCHED_MSG, -1, -1, -1, new ArrayList<>()));
	            }
	        });
	        return pullResultFuture;
	    }
	
	    private PullResultExt processPullResponse(
	        final RemotingCommand response,
	        final String addr) throws MQBrokerException, RemotingCommandException {
	        PullStatus pullStatus = PullStatus.NO_NEW_MSG;
	        switch (response.getCode()) {
	            case ResponseCode.SUCCESS:
	                pullStatus = PullStatus.FOUND;
	                break;
	            case ResponseCode.PULL_NOT_FOUND:
	                pullStatus = PullStatus.NO_NEW_MSG;
	                break;
	            case ResponseCode.PULL_RETRY_IMMEDIATELY:
	                pullStatus = PullStatus.NO_MATCHED_MSG;
	                break;
	            case ResponseCode.PULL_OFFSET_MOVED:
	                pullStatus = PullStatus.OFFSET_ILLEGAL;
	                break;
	
	            default:
	                throw new MQBrokerException(response.getCode(), response.getRemark(), addr);
	        }
	
	        PullMessageResponseHeader responseHeader =
	            (PullMessageResponseHeader) response.decodeCommandCustomHeader(PullMessageResponseHeader.class);
	
	        return new PullResultExt(pullStatus, responseHeader.getNextBeginOffset(), responseHeader.getMinOffset(),
	            responseHeader.getMaxOffset(), null, responseHeader.getSuggestWhichBrokerId(), response.getBody(), responseHeader.getOffsetDelta());
	
	    }
	
	    private PullResult processPullResult(final PullResultExt pullResult, String brokerName, int queueId) {
	
	        if (PullStatus.FOUND == pullResult.getPullStatus()) {
	            ByteBuffer byteBuffer = ByteBuffer.wrap(pullResult.getMessageBinary());
	            List<MessageExt> msgList = MessageDecoder.decodesBatch(
	                byteBuffer,
	                true,
	                true,
	                true
	            );
	
	            // Currently batch messages are not supported
	            for (MessageExt msg : msgList) {
	                String traFlag = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);
	                if (Boolean.parseBoolean(traFlag)) {
	                    msg.setTransactionId(msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
	                }
	                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MIN_OFFSET,
	                    Long.toString(pullResult.getMinOffset()));
	                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MAX_OFFSET,
	                    Long.toString(pullResult.getMaxOffset()));
	                msg.setBrokerName(brokerName);
	                msg.setQueueId(queueId);
	                if (pullResult.getOffsetDelta() != null) {
	                    msg.setQueueOffset(pullResult.getOffsetDelta() + msg.getQueueOffset());
	                }
	            }
	
	            pullResult.setMsgFoundList(msgList);
	        }
	
	        pullResult.setMessageBinary(null);
	
	        return pullResult;
	    }
	
	}
		
",
	role:"
	user	
",
,
	content:"
	//broker/src/main/java/org/apache/rocketmq/broker/failover/EscapeBridge.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	package org.apache.rocketmq.broker.failover;
	
	import java.nio.ByteBuffer;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.concurrent.BlockingQueue;
	import java.util.concurrent.CompletableFuture;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.LinkedBlockingQueue;
	import java.util.concurrent.TimeUnit;
	import org.apache.commons.lang3.StringUtils;
	import org.apache.rocketmq.broker.BrokerController;
	import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;
	import org.apache.rocketmq.client.consumer.PullStatus;
	import org.apache.rocketmq.client.exception.MQBrokerException;
	import org.apache.rocketmq.client.impl.producer.TopicPublishInfo;
	import org.apache.rocketmq.client.producer.SendResult;
	import org.apache.rocketmq.client.producer.SendStatus;
	import org.apache.rocketmq.common.MixAll;
	import org.apache.rocketmq.common.Pair;
	import org.apache.rocketmq.common.ThreadFactoryImpl;
	import org.apache.rocketmq.common.constant.LoggerName;
	import org.apache.rocketmq.common.message.MessageConst;
	import org.apache.rocketmq.common.message.MessageDecoder;
	import org.apache.rocketmq.common.message.MessageExt;
	import org.apache.rocketmq.common.message.MessageExtBrokerInner;
	import org.apache.rocketmq.common.message.MessageQueue;
	import org.apache.rocketmq.common.utils.ThreadUtils;
	import org.apache.rocketmq.logging.org.slf4j.Logger;
	import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
	import org.apache.rocketmq.remoting.exception.RemotingException;
	import org.apache.rocketmq.store.GetMessageResult;
	import org.apache.rocketmq.store.GetMessageStatus;
	import org.apache.rocketmq.store.MessageStore;
	import org.apache.rocketmq.store.PutMessageResult;
	import org.apache.rocketmq.store.PutMessageStatus;
	
	public class EscapeBridge {
	    protected static final Logger LOG = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);
	    private static final long SEND_TIMEOUT = 3000L;
	    private static final long DEFAULT_PULL_TIMEOUT_MILLIS = 1000 * 10L;
	    private final String innerProducerGroupName;
	    private final String innerConsumerGroupName;
	
	    private final BrokerController brokerController;
	
	    private ExecutorService defaultAsyncSenderExecutor;
	
	    public EscapeBridge(BrokerController brokerController) {
	        this.brokerController = brokerController;
	        this.innerProducerGroupName = "InnerProducerGroup_" + brokerController.getBrokerConfig().getBrokerName() + "_" + brokerController.getBrokerConfig().getBrokerId();
	        this.innerConsumerGroupName = "InnerConsumerGroup_" + brokerController.getBrokerConfig().getBrokerName() + "_" + brokerController.getBrokerConfig().getBrokerId();
	    }
	
	    public void start() throws Exception {
	        if (brokerController.getBrokerConfig().isEnableSlaveActingMaster() && brokerController.getBrokerConfig().isEnableRemoteEscape()) {
	            final BlockingQueue<Runnable> asyncSenderThreadPoolQueue = new LinkedBlockingQueue<>(50000);
	            this.defaultAsyncSenderExecutor = ThreadUtils.newThreadPoolExecutor(
	                Runtime.getRuntime().availableProcessors(),
	                Runtime.getRuntime().availableProcessors(),
	                1000 * 60,
	                TimeUnit.MILLISECONDS,
	                asyncSenderThreadPoolQueue,
	                new ThreadFactoryImpl("AsyncEscapeBridgeExecutor_", this.brokerController.getBrokerIdentity())
	            );
	            LOG.info("init executor for escaping messages asynchronously success.");
	        }
	    }
	
	    public void shutdown() {
	        if (null != this.defaultAsyncSenderExecutor) {
	            this.defaultAsyncSenderExecutor.shutdown();
	        }
	    }
	
	    public PutMessageResult putMessage(MessageExtBrokerInner messageExt) {
	        BrokerController masterBroker = this.brokerController.peekMasterBroker();
	        if (masterBroker != null) {
	            return masterBroker.getMessageStore().putMessage(messageExt);
	        } else if (this.brokerController.getBrokerConfig().isEnableSlaveActingMaster()
	            && this.brokerController.getBrokerConfig().isEnableRemoteEscape()) {
	
	            try {
	                messageExt.setWaitStoreMsgOK(false);
	                final SendResult sendResult = putMessageToRemoteBroker(messageExt);
	                return transformSendResult2PutResult(sendResult);
	            } catch (Exception e) {
	                LOG.error("sendMessageInFailover to remote failed", e);
	                return new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true);
	            }
	        } else {
	            LOG.warn("Put message failed, enableSlaveActingMaster={}, enableRemoteEscape={}.",
	                this.brokerController.getBrokerConfig().isEnableSlaveActingMaster(), this.brokerController.getBrokerConfig().isEnableRemoteEscape());
	            return new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null);
	        }
	    }
	
	    private SendResult putMessageToRemoteBroker(MessageExtBrokerInner messageExt) {
	        final boolean isTransHalfMessage = TransactionalMessageUtil.buildHalfTopic().equals(messageExt.getTopic());
	        MessageExtBrokerInner messageToPut = messageExt;
	        if (isTransHalfMessage) {
	            messageToPut = TransactionalMessageUtil.buildTransactionalMessageFromHalfMessage(messageExt);
	        }
	        final TopicPublishInfo topicPublishInfo = this.brokerController.getTopicRouteInfoManager().tryToFindTopicPublishInfo(messageToPut.getTopic());
	        if (null == topicPublishInfo || !topicPublishInfo.ok()) {
	            LOG.warn("putMessageToRemoteBroker: no route info of topic {} when escaping message, msgId={}",
	                messageToPut.getTopic(), messageToPut.getMsgId());
	            return null;
	        }
	
	        final MessageQueue mqSelected = topicPublishInfo.selectOneMessageQueue(this.brokerController.getBrokerConfig().getBrokerName());
	
	        messageToPut.setQueueId(mqSelected.getQueueId());
	
	        final String brokerNameToSend = mqSelected.getBrokerName();
	        final String brokerAddrToSend = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInPublish(brokerNameToSend);
	
	        final long beginTimestamp = System.currentTimeMillis();
	        try {
	            final SendResult sendResult = this.brokerController.getBrokerOuterAPI().sendMessageToSpecificBroker(
	                brokerAddrToSend, brokerNameToSend,
	                messageToPut, this.getProducerGroup(messageToPut), SEND_TIMEOUT);
	            if (null != sendResult && SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {
	                return sendResult;
	            } else {
	                LOG.error("Escaping failed! cost {}ms, Topic: {}, MsgId: {}, Broker: {}",
	                    System.currentTimeMillis() - beginTimestamp, messageExt.getTopic(),
	                    messageExt.getMsgId(), brokerNameToSend);
	            }
	        } catch (RemotingException | MQBrokerException e) {
	            LOG.error(String.format("putMessageToRemoteBroker exception, MsgId: %s, RT: %sms, Broker: %s",
	                messageToPut.getMsgId(), System.currentTimeMillis() - beginTimestamp, mqSelected), e);
	        } catch (InterruptedException e) {
	            LOG.error(String.format("putMessageToRemoteBroker interrupted, MsgId: %s, RT: %sms, Broker: %s",
	                messageToPut.getMsgId(), System.currentTimeMillis() - beginTimestamp, mqSelected), e);
	            Thread.currentThread().interrupt();
	        }
	
	        return null;
	    }
	
	    public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner messageExt) {
	        BrokerController masterBroker = this.brokerController.peekMasterBroker();
	        if (masterBroker != null) {
	            return masterBroker.getMessageStore().asyncPutMessage(messageExt);
	        } else if (this.brokerController.getBrokerConfig().isEnableSlaveActingMaster()
	            && this.brokerController.getBrokerConfig().isEnableRemoteEscape()) {
	            try {
	                messageExt.setWaitStoreMsgOK(false);
	
	                final TopicPublishInfo topicPublishInfo = this.brokerController.getTopicRouteInfoManager().tryToFindTopicPublishInfo(messageExt.getTopic());
	                final String producerGroup = getProducerGroup(messageExt);
	
	                final MessageQueue mqSelected = topicPublishInfo.selectOneMessageQueue();
	                messageExt.setQueueId(mqSelected.getQueueId());
	
	                final String brokerNameToSend = mqSelected.getBrokerName();
	                final String brokerAddrToSend = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInPublish(brokerNameToSend);
	                final CompletableFuture<SendResult> future = this.brokerController.getBrokerOuterAPI().sendMessageToSpecificBrokerAsync(brokerAddrToSend,
	                    brokerNameToSend, messageExt,
	                    producerGroup, SEND_TIMEOUT);
	
	                return future.exceptionally(throwable -> null)
	                    .thenApplyAsync(sendResult -> transformSendResult2PutResult(sendResult), this.defaultAsyncSenderExecutor)
	                    .exceptionally(throwable -> transformSendResult2PutResult(null));
	
	            } catch (Exception e) {
	                LOG.error("sendMessageInFailover to remote failed", e);
	                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true));
	            }
	        } else {
	            LOG.warn("Put message failed, enableSlaveActingMaster={}, enableRemoteEscape={}.",
	                this.brokerController.getBrokerConfig().isEnableSlaveActingMaster(), this.brokerController.getBrokerConfig().isEnableRemoteEscape());
	            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null));
	        }
	    }
	
	
	    private String getProducerGroup(MessageExtBrokerInner messageExt) {
	        if (null == messageExt) {
	            return this.innerProducerGroupName;
	        }
	        String producerGroup = messageExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP);
	        if (StringUtils.isEmpty(producerGroup)) {
	            producerGroup = this.innerProducerGroupName;
	        }
	        return producerGroup;
	    }
	
	
	    public PutMessageResult putMessageToSpecificQueue(MessageExtBrokerInner messageExt) {
	        BrokerController masterBroker = this.brokerController.peekMasterBroker();
	        if (masterBroker != null) {
	            return masterBroker.getMessageStore().putMessage(messageExt);
	        } else if (this.brokerController.getBrokerConfig().isEnableSlaveActingMaster()
	            && this.brokerController.getBrokerConfig().isEnableRemoteEscape()) {
	            try {
	                messageExt.setWaitStoreMsgOK(false);
	
	                final TopicPublishInfo topicPublishInfo = this.brokerController.getTopicRouteInfoManager().tryToFindTopicPublishInfo(messageExt.getTopic());
	                List<MessageQueue> mqs = topicPublishInfo.getMessageQueueList();
	
	                if (null == mqs || mqs.isEmpty()) {
	                    return new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true);
	                }
	
	                String id = messageExt.getTopic() + messageExt.getStoreHost();
	                final int index = Math.floorMod(id.hashCode(), mqs.size());
	
	                MessageQueue mq = mqs.get(index);
	                messageExt.setQueueId(mq.getQueueId());
	
	                String brokerNameToSend = mq.getBrokerName();
	                String brokerAddrToSend = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInPublish(brokerNameToSend);
	                final SendResult sendResult = this.brokerController.getBrokerOuterAPI().sendMessageToSpecificBroker(
	                    brokerAddrToSend, brokerNameToSend,
	                    messageExt, this.getProducerGroup(messageExt), SEND_TIMEOUT);
	
	                return transformSendResult2PutResult(sendResult);
	            } catch (Exception e) {
	                LOG.error("sendMessageInFailover to remote failed", e);
	                return new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true);
	            }
	        } else {
	            LOG.warn("Put message to specific queue failed, enableSlaveActingMaster={}, enableRemoteEscape={}.",
	                this.brokerController.getBrokerConfig().isEnableSlaveActingMaster(), this.brokerController.getBrokerConfig().isEnableRemoteEscape());
	            return new PutMessageResult(PutMessageStatus.SERVICE_NOT_AVAILABLE, null);
	        }
	    }
	
	    private PutMessageResult transformSendResult2PutResult(SendResult sendResult) {
	        if (sendResult == null) {
	            return new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true);
	        }
	        switch (sendResult.getSendStatus()) {
	            case SEND_OK:
	                return new PutMessageResult(PutMessageStatus.PUT_OK, null, true);
	            case SLAVE_NOT_AVAILABLE:
	                return new PutMessageResult(PutMessageStatus.SLAVE_NOT_AVAILABLE, null, true);
	            case FLUSH_DISK_TIMEOUT:
	                return new PutMessageResult(PutMessageStatus.FLUSH_DISK_TIMEOUT, null, true);
	            case FLUSH_SLAVE_TIMEOUT:
	                return new PutMessageResult(PutMessageStatus.FLUSH_SLAVE_TIMEOUT, null, true);
	            default:
	                return new PutMessageResult(PutMessageStatus.PUT_TO_REMOTE_BROKER_FAIL, null, true);
	        }
	    }
	
	    public Pair<GetMessageStatus, MessageExt> getMessage(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {
	        return getMessageAsync(topic, offset, queueId, brokerName, deCompressBody).join();
	    }
	
	    public CompletableFuture<Pair<GetMessageStatus, MessageExt>> getMessageAsync(String topic, long offset, int queueId, String brokerName, boolean deCompressBody) {
	        MessageStore messageStore = brokerController.getMessageStoreByBrokerName(brokerName);
	        if (messageStore != null) {
	            return messageStore.getMessageAsync(innerConsumerGroupName, topic, queueId, offset, 1, null)
	                .thenApply(result -> {
	                    if (result == null) {
	                        LOG.warn("getMessageResult is null , innerConsumerGroupName {}, topic {}, offset {}, queueId {}", innerConsumerGroupName, topic, offset, queueId);
	                        return new Pair<>(GetMessageStatus.MESSAGE_WAS_REMOVING, null);
	                    }
	                    List<MessageExt> list = decodeMsgList(result, deCompressBody);
	                    if (list == null || list.isEmpty()) {
	                        LOG.warn("Can not get msg , topic {}, offset {}, queueId {}, result is {}", topic, offset, queueId, result);
	                        return new Pair<>(result.getStatus(), null);
	                    }
	                    return new Pair<>(result.getStatus(), list.get(0));
	                });
	        } else {
	            return getMessageFromRemoteAsync(topic, offset, queueId, brokerName)
	                .thenApply(msg -> {
	                    if (msg == null) {
	                        return new Pair<>(GetMessageStatus.MESSAGE_WAS_REMOVING, null);
	                    }
	                    return new Pair<>(GetMessageStatus.FOUND, msg);
	                });
	        }
	    }
	
	    protected List<MessageExt> decodeMsgList(GetMessageResult getMessageResult, boolean deCompressBody) {
	        List<MessageExt> foundList = new ArrayList<>();
	        try {
	            List<ByteBuffer> messageBufferList = getMessageResult.getMessageBufferList();
	            if (messageBufferList != null) {
	                for (int i = 0; i < messageBufferList.size(); i++) {
	                    ByteBuffer bb = messageBufferList.get(i);
	                    if (bb == null) {
	                        LOG.error("bb is null {}", getMessageResult);
	                        continue;
	                    }
	                    MessageExt msgExt = MessageDecoder.decode(bb, true, deCompressBody);
	                    if (msgExt == null) {
	                        LOG.error("decode msgExt is null {}", getMessageResult);
	                        continue;
	                    }
	                    // use CQ offset, not offset in Message
	                    msgExt.setQueueOffset(getMessageResult.getMessageQueueOffset().get(i));
	                    foundList.add(msgExt);
	                }
	            }
	        } finally {
	            getMessageResult.release();
	        }
	
	        return foundList;
	    }
	
	    protected MessageExt getMessageFromRemote(String topic, long offset, int queueId, String brokerName) {
	        return getMessageFromRemoteAsync(topic, offset, queueId, brokerName).join();
	    }
	
	    protected CompletableFuture<MessageExt> getMessageFromRemoteAsync(String topic, long offset, int queueId, String brokerName) {
	        try {
	            String brokerAddr = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInSubscribe(brokerName, MixAll.MASTER_ID, false);
	            if (null == brokerAddr) {
	                this.brokerController.getTopicRouteInfoManager().updateTopicRouteInfoFromNameServer(topic, true, false);
	                brokerAddr = this.brokerController.getTopicRouteInfoManager().findBrokerAddressInSubscribe(brokerName, MixAll.MASTER_ID, false);
	
	                if (null == brokerAddr) {
	                    LOG.warn("can't find broker address for topic {}", topic);
	                    return CompletableFuture.completedFuture(null);
	                }
	            }
	
	            return this.brokerController.getBrokerOuterAPI().pullMessageFromSpecificBrokerAsync(brokerName,
	                brokerAddr, this.innerConsumerGroupName, topic, queueId, offset, 1, DEFAULT_PULL_TIMEOUT_MILLIS)
	                .thenApply(pullResult -> {
	                    if (pullResult.getPullStatus().equals(PullStatus.FOUND) && !pullResult.getMsgFoundList().isEmpty()) {
	                        return pullResult.getMsgFoundList().get(0);
	                    }
	                    return null;
	                });
	        } catch (Exception e) {
	            LOG.error("Get message from remote failed.", e);
	        }
	
	        return CompletableFuture.completedFuture(null);
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//example/src/main/java/org/apache/rocketmq/example/broadcast/PushConsumer.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.example.broadcast;
	
	import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
	import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
	import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
	import org.apache.rocketmq.client.exception.MQClientException;
	import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
	import org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;
	
	public class PushConsumer {
	
	    public static final String CONSUMER_GROUP = "please_rename_unique_group_name_1";
	    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
	    public static final String TOPIC = "TopicTest";
	
	    public static final String SUB_EXPRESSION = "TagA || TagC || TagD";
	
	    public static void main(String[] args) throws InterruptedException, MQClientException {
	
	        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);
	
	        // Uncomment the following line while debugging, namesrvAddr should be set to your local address
	//        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
	
	        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
	
	        consumer.setMessageModel(MessageModel.BROADCASTING);
	
	        consumer.subscribe(TOPIC, SUB_EXPRESSION);
	
	        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
	            System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
	            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
	        });
	
	        consumer.start();
	        System.out.printf("Broadcast Consumer Started.%n");
	    }
	}
		
",
	role:"
	user	
",
,
	content:"
	//example/src/main/java/org/apache/rocketmq/example/namespace/PullConsumerWithNamespace.java
	/*
	 * Licensed to the Apache Software Foundation (ASF) under one or more
	 * contributor license agreements.  See the NOTICE file distributed with
	 * this work for additional information regarding copyright ownership.
	 * The ASF licenses this file to You under the Apache License, Version 2.0
	 * (the "License"); you may not use this file except in compliance with
	 * the License.  You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	package org.apache.rocketmq.example.namespace;
	
	import java.util.HashMap;
	import java.util.Map;
	import java.util.Set;
	
	import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
	import org.apache.rocketmq.client.consumer.PullResult;
	import org.apache.rocketmq.common.message.MessageQueue;
	
	public class PullConsumerWithNamespace {
	
	    public static final String NAMESPACE = "InstanceTest";
	    public static final String CONSUMER_GROUP = "cidTest";
	    public static final String DEFAULT_NAMESRVADDR = "127.0.0.1:9876";
	    public static final String TOPIC = "NAMESPACE_TOPIC";
	
	    private static final Map<MessageQueue, Long> OFFSET_TABLE = new HashMap<>();
	
	    public static void main(String[] args) throws Exception {
	        DefaultMQPullConsumer pullConsumer = new DefaultMQPullConsumer(CONSUMER_GROUP);
	        pullConsumer.setNamespaceV2(NAMESPACE);
	        pullConsumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);
	        pullConsumer.start();
	
	        Set<MessageQueue> mqs = pullConsumer.fetchSubscribeMessageQueues(TOPIC);
	        for (MessageQueue mq : mqs) {
	            System.out.printf("Consume from the topic: %s, queue: %s%n", mq.getTopic(), mq);
	            SINGLE_MQ:
	            while (true) {
	                try {
	                    PullResult pullResult =
	                        pullConsumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);
	                    System.out.printf("%s%n", pullResult);
	
	                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());
	                    switch (pullResult.getPullStatus()) {
	                        case FOUND:
	                            dealWithPullResult(pullResult);
	                            break;
	                        case NO_MATCHED_MSG:
	                            break;
	                        case NO_NEW_MSG:
	                            break SINGLE_MQ;
	                        case OFFSET_ILLEGAL:
	                            break;
	                        default:
	                            break;
	                    }
	                } catch (Exception e) {
	                    e.printStackTrace();
	                }
	            }
	        }
	
	        pullConsumer.shutdown();
	    }
	
	    private static long getMessageQueueOffset(MessageQueue mq) {
	        Long offset = OFFSET_TABLE.get(mq);
	        if (offset != null) {
	            return offset;
	        }
	
	        return 0;
	    }
	
	    private static void dealWithPullResult(PullResult pullResult) {
	        if (null == pullResult || pullResult.getMsgFoundList().isEmpty()) {
	            return;
	        }
	        pullResult.getMsgFoundList().forEach(
	            msg -> System.out.printf("Topic is:%s, msgId is:%s%n", msg.getTopic(), msg.getMsgId()));
	    }
	
	    private static void putMessageQueueOffset(MessageQueue mq, long offset) {
	        OFFSET_TABLE.put(mq, offset);
	    }
	}	
",
	role:"
	user	
",
,

],
model:"
gpt-4-1106-preview
",
response_format:
{
	type:"
	json_object	
",

}
temperature:"0.1",
