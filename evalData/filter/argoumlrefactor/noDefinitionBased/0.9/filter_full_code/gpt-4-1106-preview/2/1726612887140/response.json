
{
    "key":" //src/argouml-app/src/org/argouml/ui/TreeModelSupport.java\n/* $Id$\n *******************************************************************************\n Copyright (c) 2009 Contributors - see below\n All rights reserved. This program and the accompanying materials\n are made available under the terms of the Eclipse Public License v1.0\n which accompanies this distribution, and is available at\n http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    tfmorris\n *******************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 1996-2008 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.ui;\n\nimport javax.swing.event.EventListenerList;\nimport javax.swing.event.TreeModelEvent;\nimport javax.swing.event.TreeModelListener;\n\n/**\n * Helper class for tree models that provides tree event handling.<p>\n *\n * @author  alexb\n * @since 0.13.5, Created on 15 April 2003\n */\npublic class TreeModelSupport extends PerspectiveSupport {\n\n    /** tree model listener list. */\n    private EventListenerList listenerList = new EventListenerList();\n\n    /**\n     * The constructor.\n     *\n     * @param name the name that will be localized\n     */\n    public TreeModelSupport(String name) {\n        super(name);\n    }\n\n    // ---------------- listener management ----------------\n\n    /**\n     * Add a TreeModelListener to the list of listeners.\n     *\n     * @param l the listener to be added\n     */\n    public void addTreeModelListener(TreeModelListener l) {\n        listenerList.add(TreeModelListener.class, l);\n    }\n\n    /**\n     * Remove a TreeModelListener from the list of listeners..\n     *\n     * @param l the listener to be removed\n     */\n    public void removeTreeModelListener(TreeModelListener l) {\n        listenerList.remove(TreeModelListener.class, l);\n    }\n\n    // --------------- tree nodes -------------------------\n\n    /**\n     * Notify all listeners that a node (or a set of siblings) has changed in\n     * some way. The node(s) have not changed locations in the tree or altered\n     * their children arrays, but other attributes have changed and may affect\n     * presentation. \n     * <p>\n     * To indicate the root has changed, childIndices and children will be null.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param source the Object responsible for generating the event (typically\n     *                the creator of the event object passes this for its value)\n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @param childIndices an array of int that specifies the index values of\n     *                the removed items. The indices must be in sorted order,\n     *                from lowest to highest\n     * @param children an array of Object containing the inserted, removed, or\n     *                changed objects\n     * @see TreeModelListener#treeNodesChanged(TreeModelEvent)\n     */\n    protected void fireTreeNodesChanged(\n\t\t\t\t\tfinal Object source,\n\t\t\t\t\tfinal Object[] path,\n\t\t\t\t\tfinal int[] childIndices,\n\t\t\t\t\tfinal Object[] children) {\n\n        // Guaranteed to return a non-null array\n        Object[] listeners = listenerList.getListenerList();\n        TreeModelEvent e = null;\n        // Process the listeners last to first, notifying\n        // those that are interested in this event\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == TreeModelListener.class) {\n                // Lazily create the event:\n                if (e == null) {\n                    e =\n                        new TreeModelEvent(\n\t\t\t\t\t   source,\n\t\t\t\t\t   path,\n\t\t\t\t\t   childIndices,\n\t\t\t\t\t   children);\n                }\n                ((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);\n            }\n        }\n    }\n\n    /**\n     * Notify all listeners a node has been inserted.  The event instance\n     * is lazily created using the parameters passed into\n     * the fire method.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param source the Object responsible for generating the event (typically\n     *                the creator of the event object passes this for its value)\n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @param childIndices an array of int that specifies the index values of\n     *                the removed items. The indices must be in sorted order,\n     *                from lowest to highest\n     * @param children an array of Object containing the inserted, removed, or\n     *                changed objects\n     * @see TreeModelListener#treeNodesChanged(TreeModelEvent)\n     */\n    protected void fireTreeNodesInserted(\n\t\t\t\t Object source,\n\t\t\t\t Object[] path,\n\t\t\t\t int[] childIndices,\n\t\t\t\t Object[] children) {\n\n        // Guaranteed to return a non-null array\n        Object[] listeners = listenerList.getListenerList();\n        TreeModelEvent e = null;\n        // Process the listeners last to first, notifying\n        // those that are interested in this event\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == TreeModelListener.class) {\n                // Lazily create the event:\n                if (e == null) {\n                    e =\n                        new TreeModelEvent(\n\t\t\t\t\t   source,\n\t\t\t\t\t   path,\n\t\t\t\t\t   childIndices,\n\t\t\t\t\t   children);\n                }\n                ((TreeModelListener) listeners[i + 1]).treeNodesInserted(e);\n            }\n        }\n    }\n\n    /**\n     * Notify all listeners that nodes have been removed from the tree. Note\n     * that if a subtree is removed from the tree, this method may only be\n     * invoked once for the root of the removed subtree, not once for each\n     * individual set of siblings removed.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param source the Object responsible for generating the event (typically\n     *                the creator of the event object passes this for its value)\n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @param childIndices an array of int that specifies the index values of\n     *                the removed items. The indices must be in sorted order,\n     *                from lowest to highest\n     * @param children an array of Object containing the inserted, removed, or\n     *                changed objects\n     * @see TreeModelListener#treeNodesChanged(TreeModelEvent)\n     * @see EventListenerList\n     */\n    protected void fireTreeNodesRemoved(\n\t\t\t\tObject source,\n\t\t\t\tObject[] path,\n\t\t\t\tint[] childIndices,\n\t\t\t\tObject[] children) {\n\n        // Guaranteed to return a non-null array\n        Object[] listeners = listenerList.getListenerList();\n        TreeModelEvent e = null;\n        // Process the listeners last to first, notifying\n        // those that are interested in this event\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == TreeModelListener.class) {\n                // Lazily create the event:\n                if (e == null) {\n                    e =\n                        new TreeModelEvent(\n\t\t\t\t\t   source,\n\t\t\t\t\t   path,\n\t\t\t\t\t   childIndices,\n\t\t\t\t\t   children);\n                }\n                ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(e);\n            }\n        }\n    }\n\n    // ------------- tree structure -----------------\n\n    /**\n     * Notify all listeners that the tree has drastically changed\n     * structure from a given node down. If the path returned by e.getPath() is\n     * of length one and the first element does not identify the current root\n     * node the first element should become the new root of the tree.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @see TreeModelListener#treeStructureChanged(TreeModelEvent)\n     */\n    protected void fireTreeStructureChanged(Object[] path) {\n        fireTreeStructureChanged(this, path);\n    }\n\n    /**\n     * Notify all listeners that the tree has drastically changed\n     * structure from a given node down. If the path returned by e.getPath() is\n     * of length one and the first element does not identify the current root\n     * node the first element should become the new root of the tree.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param source the Object responsible for generating the event (typically\n     *                the creator of the event object passes this for its value)\n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @see TreeModelListener#treeStructureChanged(TreeModelEvent)\n     */\n    protected void fireTreeStructureChanged(Object source, Object[] path) {\n        fireTreeStructureChanged(source, path, null, null);\n    }\n\n    /**\n     * Notify all listeners that the tree has drastically changed structure from\n     * a given node down. If the path returned by e.getPath() is of length one\n     * and the first element does not identify the current root node the first\n     * element should become the new root of the tree.\n     * <p>\n     * <em>NOTE:</em> This is a Swing method which must be invoked on the\n     * Swing/AWT event thread.\n     * \n     * @param source the Object responsible for generating the event (typically\n     *                the creator of the event object passes this for its value)\n     * @param path an array of Object identifying the path to the parent of the\n     *                modified item(s), where the first element of the array is\n     *                the Object stored at the root node and the last element is\n     *                the Object stored at the parent node\n     * @param childIndices an array of int that specifies the index values of\n     *                the removed items. The indices must be in sorted order,\n     *                from lowest to highest\n     * @param children an array of Object containing the inserted, removed, or\n     *                changed objects\n     * @see TreeModelListener#treeStructureChanged(TreeModelEvent)\n     */\n    public void fireTreeStructureChanged(\n\t\t\t\t\t Object source,\n\t\t\t\t\t Object[] path,\n\t\t\t\t\t int[] childIndices,\n\t\t\t\t\t Object[] children) {\n\n        // Guaranteed to return a non-null array\n        Object[] listeners = listenerList.getListenerList();\n        TreeModelEvent e = null;\n        // Process the listeners last to first, notifying\n        // those that are interested in this event\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == TreeModelListener.class) {\n                // Lazily create the event:\n                if (e == null) {\n                    e =\n                        new TreeModelEvent(\n\t\t\t\t\t   source,\n\t\t\t\t\t   path,\n\t\t\t\t\t   childIndices,\n\t\t\t\t\t   children);\n                }\n                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(e);\n            }\n        }\n    }\n\n}\n",
    "reason":"affected_files",
    "justification":"This class `TreeModelSupport` contains multiple data clumps (e.g., parameters `source`, `path`, `childIndices`, `children` occur together in several methods). Since this class is primarily responsible for managing events and listeners for tree nodes within a tree model, refactoring it to encapsulate these parameters in a coherent class can improve the organization of data, reduce duplication, and enhance maintainability."

}
