"{
    "key":"//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java\n\n    /**\n     * create token\n     *\n     * @param loginUser login user\n     * @param userId token for user id\n     * @param expireTime expire time for the token\n     * @param token token string (if it is absent, it will be automatically generated)\n     * @return create result state code\n     */\n    @Operation(summary = \"createToken\", description = \"CREATE_TOKEN_NOTES\")\n    @Parameters({\n            @Parameter(name = \"userId\", description = \"USER_ID\", schema = @Schema(implementation = int.class), required = true),\n            @Parameter(name = \"expireTime\", description = \"EXPIRE_TIME\", schema = @Schema(implementation = String.class), required = true, example = \"2021-12-31 00:00:00\"),\n            @Parameter(name = \"token\", description = \"TOKEN\", required = false, schema = @Schema(implementation = String.class), example = \"xxxx\")\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_ACCESS_TOKEN_ERROR)\n    @OperatorLog(auditType = AuditType.TOKEN_CREATE)\n    public Result<AccessToken> createToken(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                           @RequestParam(value = \"userId\") int userId,\n                                           @RequestParam(value = \"expireTime\") String expireTime,\n                                           @RequestParam(value = \"token\", required = false) String token) {\n\n        AccessToken accessToken = accessTokenService.createToken(loginUser, userId, expireTime, token);\n        return Result.success(accessToken);\n    }\n",
    "reason":"occurrence",
    "justification":"This data clump is chosen because it occurs multiple times across different methods and classes, indicating that these parameters are frequently used together and could benefit from being grouped into a single class. Refactoring this clump can improve code readability and maintainability by reducing duplication and making the relationships between these parameters more explicit.",
    "suggestedName":"TokenCreationRequest"
}"