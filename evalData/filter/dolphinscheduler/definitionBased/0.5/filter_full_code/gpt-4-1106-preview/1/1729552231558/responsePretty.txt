"{
    "key": "public class AccessTokenController extends BaseController {\n\n    @Autowired\n    private AccessTokenService accessTokenService;\n\n    /**\n     * create token\n     *\n     * @param loginUser login user\n     * @param userId token for user id\n     * @param expireTime expire time for the token\n     * @param token token string (if it is absent, it will be automatically generated)\n     * @return create result state code\n     */\n    @Operation(summary = \"createToken\", description = \"CREATE_TOKEN_NOTES\")\n    @Parameters({\n            @Parameter(name = \"userId\", description = \"USER_ID\", schema = @Schema(implementation = int.class), required = true),\n            @Parameter(name = \"expireTime\", description = \"EXPIRE_TIME\", schema = @Schema(implementation = String.class), required = true, example = \"2021-12-31 00:00:00\"),\n            @Parameter(name = \"token\", description = \"TOKEN\", required = false, schema = @Schema(implementation = String.class), example = \"xxxx\")\n    })\n    @PostMapping()\n    @ResponseStatus(HttpStatus.CREATED)\n    @ApiException(CREATE_ACCESS_TOKEN_ERROR)\n    @OperatorLog(auditType = AuditType.TOKEN_CREATE)\n    public Result<AccessToken> createToken(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n                                           @RequestParam(value = \"userId\") int userId,\n                                           @RequestParam(value = \"expireTime\") String expireTime,\n                                           @RequestParam(value = \"token\", required = false) String token) {\n\n        AccessToken accessToken = accessTokenService.createToken(loginUser, userId, expireTime, token);\n        return Result.success(accessToken);\n    }\n\n",
    "reason": "affected_files",
    "justification": "The 'AccessTokenController' class contains the 'createToken' method which is one of the entry points for creating access tokens. It is crucial to ensure that the creation of access tokens is well managed and secure, as access tokens are sensitive pieces of information that grant access to resources. Refactoring this data clump could improve the maintainability and readability of the code related to access token creation, and centralize the logic for better security practices.",
    "suggestedName": "TokenCreationRequest"
}"