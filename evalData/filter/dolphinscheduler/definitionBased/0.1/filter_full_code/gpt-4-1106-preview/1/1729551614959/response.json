{
    "key": "public class UsersServiceImpl extends BaseServiceImpl implements UsersService {\n\n    @Autowired\n    private AccessTokenMapper accessTokenMapper;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private TenantMapper tenantMapper;\n\n    @Autowired\n    private ProjectUserMapper projectUserMapper;\n\n    @Autowired\n    private DataSourceUserMapper datasourceUserMapper;\n\n    @Autowired\n    private AlertGroupMapper alertGroupMapper;\n\n    @Autowired\n    private ProjectMapper projectMapper;\n\n    @Autowired(required = false)\n    private StorageOperator storageOperator;\n\n    @Autowired\n    private K8sNamespaceUserMapper k8sNamespaceUserMapper;\n\n    @Autowired\n    private MetricsCleanUpService metricsCleanUpService;\n\n    @Autowired\n    private SessionService sessionService;\n\n    /**\n     * create user, only system admin have permission\n     *\n     * @param loginUser    login user\n     * @param userName     user name\n     * @param userPassword user password\n     * @param email        email\n     * @param tenantId     tenant id\n     * @param phone        phone\n     * @param queue        queue\n     * @return create result code\n     * @throws Exception exception\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public Map<String, Object> createUser(User loginUser,\n                                          String userName,\n                                          String userPassword,\n                                          String email,\n                                          int tenantId,\n                                          String phone,\n                                          String queue,\n                                          int state) throws Exception {\n        Map<String, Object> result = new HashMap<>();\n\n        // check all user params\n        String msg = this.checkUserParams(userName, userPassword, email, phone);\n        if (resourcePermissionCheckService.functionDisabled()) {\n            putMsg(result, Status.FUNCTION_DISABLED, msg);\n            return result;\n        }\n\n        if (!isAdmin(loginUser)) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        if (!StringUtils.isEmpty(msg)) {\n            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, msg);\n            return result;\n        }\n\n        if (!checkTenantExists(tenantId)) {\n            log.warn(\"Tenant does not exist, tenantId:{}.\", tenantId);\n            putMsg(result, Status.TENANT_NOT_EXIST);\n            return result;\n        }\n\n        User user = createUser(userName, userPassword, email, tenantId, phone, queue, state);\n\n        log.info(\"User is created and id is {}.\", user.getId());\n        result.put(Constants.DATA_LIST, user);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n\n    ... rest of the class ...\n}",
    "reason": "domain",
    "justification": "The parameters 'loginUser', 'userName', 'userPassword', 'email', 'tenantId', 'phone', 'queue', and 'state' are related to user domain information and are used together in multiple methods such as user creation, updating, and validation. Extracting these into a separate class would encapsulate user-related data and operations, improving maintainability and readability.",
    "suggestedName": "UserInfo"
}