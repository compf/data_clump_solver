"{
    "key":"//dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the \"License\".  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dolphinscheduler.api.service.impl;\n\nimport static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.USER_MANAGER;\n\nimport org.apache.dolphinscheduler.api.enums.Status;\nimport org.apache.dolphinscheduler.api.exceptions.ServiceException;\nimport org.apache.dolphinscheduler.api.service.MetricsCleanUpService;\nimport org.apache.dolphinscheduler.api.service.SessionService;\nimport org.apache.dolphinscheduler.api.service.UsersService;\nimport org.apache.dolphinscheduler.api.utils.CheckUtils;\nimport org.apache.dolphinscheduler.api.utils.PageInfo;\nimport org.apache.dolphinscheduler.api.utils.Result;\nimport org.apache.dolphinscheduler.common.constants.Constants;\nimport org.apache.dolphinscheduler.common.enums.AuthorizationType;\nimport org.apache.dolphinscheduler.common.enums.Flag;\nimport org.apache.dolphinscheduler.common.enums.UserType;\nimport org.apache.dolphinscheduler.common.utils.EncryptionUtils;\nimport org.apache.dolphinscheduler.dao.entity.AlertGroup;\nimport org.apache.dolphinscheduler.dao.entity.DatasourceUser;\nimport org.apache.dolphinscheduler.dao.entity.K8sNamespaceUser;\nimport org.apache.dolphinscheduler.dao.entity.Project;\nimport org.apache.dolphinscheduler.dao.entity.ProjectUser;\nimport org.apache.dolphinscheduler.dao.entity.Tenant;\nimport org.apache.dolphinscheduler.dao.entity.User;\nimport org.apache.dolphinscheduler.dao.mapper.AccessTokenMapper;\nimport org.apache.dolphinscheduler.dao.mapper.AlertGroupMapper;\nimport org.apache.dolphinscheduler.dao.mapper.DataSourceUserMapper;\nimport org.apache.dolphinscheduler.dao.mapper.K8sNamespaceUserMapper;\nimport org.apache.dolphinscheduler.dao.mapper.ProjectMapper;\nimport org.apache.dolphinscheduler.dao.mapper.ProjectUserMapper;\nimport org.apache.dolphinscheduler.dao.mapper.TenantMapper;\nimport org.apache.dolphinscheduler.dao.mapper.UserMapper;\nimport org.apache.dolphinscheduler.plugin.storage.api.StorageOperator;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.IOException;\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.TimeZone;\nimport java.util.stream.Collectors;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\n\n/**\n * users service impl\n */\n@Service\n@Slf4j\npublic class UsersServiceImpl extends BaseServiceImpl implements UsersService {\n\n    @Autowired\n    private AccessTokenMapper accessTokenMapper;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private TenantMapper tenantMapper;\n\n    @Autowired\n    private ProjectUserMapper projectUserMapper;\n\n    @Autowired\n    private DataSourceUserMapper datasourceUserMapper;\n\n    @Autowired\n    private AlertGroupMapper alertGroupMapper;\n\n    @Autowired\n    private ProjectMapper projectMapper;\n\n    @Autowired(required = false)\n    private StorageOperator storageOperator;\n\n    @Autowired\n    private K8sNamespaceUserMapper k8sNamespaceUserMapper;\n\n    @Autowired\n    private MetricsCleanUpService metricsCleanUpService;\n\n    @Autowired\n    private SessionService sessionService;\n\n    /**\n     * create user, only system admin have permission\n     *\n     * @param loginUser    login user\n     * @param userName     user name\n     * @param userPassword user password\n     * @param email        email\n     * @param tenantId     tenant id\n     * @param phone        phone\n     * @param queue        queue\n     * @return create result code\n     * @throws Exception exception\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public Map<String, Object> createUser(User loginUser,\n                                          String userName,\n                                          String userPassword,\n                                          String email,\n                                          int tenantId,\n                                          String phone,\n                                          String queue,\n                                          int state) throws Exception {\n        Map<String, Object> result = new HashMap<>();\n\n        // check all user params\n        String msg = this.checkUserParams(userName, userPassword, email, phone);\n        if (resourcePermissionCheckService.functionDisabled()) {\n            putMsg(result, Status.FUNCTION_DISABLED, msg);\n            return result;\n        }\n\n        if (!isAdmin(loginUser)) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        if (!StringUtils.isEmpty(msg)) {\n            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, msg);\n            return result;\n        }\n\n        if (!checkTenantExists(tenantId)) {\n            log.warn(\"Tenant does not exist, tenantId:{}.\", tenantId);\n            putMsg(result, Status.TENANT_NOT_EXIST);\n            return result;\n        }\n\n        User user = createUser(userName, userPassword, email, tenantId, phone, queue, state);\n\n        log.info(\"User is created and id is {}.\", user.getId());\n        result.put(Constants.DATA_LIST, user);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n\n    @Override\n    @Transactional\n    public User createUser(String userName,\n                           String userPassword,\n                           String email,\n                           int tenantId,\n                           String phone,\n                           String queue,\n                           int state) {\n        User user = new User();\n        Date now = new Date();\n\n        user.setUserName(userName);\n        user.setUserPassword(EncryptionUtils.getMd5(userPassword));\n        user.setEmail(email);\n        user.setTenantId(tenantId);\n        user.setPhone(phone);\n        user.setState(state);\n        // create general users, administrator users are currently built-in\n        user.setUserType(UserType.GENERAL_USER);\n        user.setCreateTime(now);\n        user.setUpdateTime(now);\n        if (StringUtils.isEmpty(queue)) {\n            queue = \"\";\n        }\n        user.setQueue(queue);\n\n        // save user\n        userMapper.insert(user);\n        return user;\n    }\n\n    /***\n     * create User for ldap„ÄÅCasdoor SSO and OAuth2.0 login\n     */\n    @Override\n    @Transactional\n    public User createUser(UserType userType, String userId, String email) {\n        User user = new User();\n        Date now = new Date();\n\n        user.setUserName(userId);\n        user.setEmail(email);\n        // create general users, administrator users are currently built-in\n        user.setUserType(userType);\n        user.setCreateTime(now);\n        user.setUpdateTime(now);\n        user.setTenantId(-1);\n        user.setQueue(\"\");\n        user.setState(Flag.YES.getCode());\n\n        // save user\n        userMapper.insert(user);\n        return user;\n    }\n}",
    "reason":"domain",
    "justification":"The class UsersServiceImpl contains multiple methods that handle user-related operations, such as creating, updating, deleting, and querying users. These methods share common parameters like userName, userPassword, email, tenantId, phone, and queue, which are all related to the user domain. Extracting these parameters into a separate User class would encapsulate the user-related data and operations, making the code more organized and maintainable.",
    "suggestedName":"UserManager"
}"