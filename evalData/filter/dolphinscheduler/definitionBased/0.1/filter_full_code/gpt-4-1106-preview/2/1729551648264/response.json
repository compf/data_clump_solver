{
    "key":"public class TenantServiceImpl extends BaseServiceImpl implements TenantService {\n\n    @Autowired\n    private TenantMapper tenantMapper;\n\n    @Autowired\n    private WorkflowInstanceMapper workflowInstanceMapper;\n\n    @Autowired\n    private ScheduleMapper scheduleMapper;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private QueueService queueService;\n\n    @Autowired(required = false)\n    private StorageOperator storageOperator;\n\n    @Autowired\n    private K8sNamespaceUserMapper k8sNamespaceUserMapper;\n\n    @Autowired\n    private MetricsCleanUpService metricsCleanUpService;\n\n    @Autowired\n    private SessionService sessionService;\n\n    /**\n     * create tenant\n     *\n     * @param loginUser    login user\n     * @param tenantCode tenant code\n     * @param queueId queue id\n     * @param desc description\n     * @return create result code\n     * @throws Exception exception\n     */\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public Tenant createTenant(User loginUser,\n                               String tenantCode,\n                               int queueId,\n                               String desc) {\n        if (!canOperatorPermissions(loginUser, null, AuthorizationType.TENANT, TENANT_CREATE)) {\n            throw new ServiceException(Status.USER_NO_OPERATION_PERM);\n        }\n        if (checkDescriptionLength(desc)) {\n            throw new ServiceException(Status.DESCRIPTION_TOO_LONG_ERROR);\n        }\n        Tenant tenant = new Tenant(tenantCode, desc, queueId);\n        createTenantValid(tenant);\n        tenantMapper.insert(tenant);\n\n        return tenant;\n    }\n\n    /**\n     * query tenant list paging\n     *\n     * @param loginUser login user\n     * @param searchVal search value\n     * @param pageNo    page number\n     * @param pageSize  page size\n     * @return tenant list page\n     */\n    @Override\n    public PageInfo<Tenant> queryTenantList(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {\n\n        Set<Integer> ids = resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.TENANT,\n                loginUser.getId(), log);\n        if (CollectionUtils.isEmpty(ids)) {\n            return new PageInfo<>(pageNo, pageSize);\n        }\n        Page<Tenant> page = new Page<>(pageNo, pageSize);\n        IPage<Tenant> tenantPage = tenantMapper.queryTenantPaging(page, new ArrayList<>(ids), searchVal);\n        return PageInfo.of(tenantPage);\n    }\n\n    ...\n}",
    "reason":"domain",
    "justification":"The methods 'createTenant' and 'queryTenantList' both operate on the domain of tenants, including creating a new tenant and querying a list of tenants. These methods are closely related to the concept of a tenant in the system, which is a fundamental domain entity. Extracting these methods into a separate Tenant class would encapsulate tenant-related operations and improve the domain model's clarity.",
    "suggestedName":"TenantManagement"
}