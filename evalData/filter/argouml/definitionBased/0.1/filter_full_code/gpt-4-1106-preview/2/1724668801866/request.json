{
    "messages": [
        {
            "content": "\nI will provide you Java files that contain data clumps.\nChoose one data clump that you think is most important and should be refactored.\n\nA data clump exists if\n1) two methods (in the same or in different classes) have at least 3 common parameters\n    and one of those methods does not override the other,\n\nor  \n2) At least three fields in a class are common with the parameters of a method (in the same or in a different class),\n\nor\n3) Two different classes have at least three common fields\n\n\nReturn the key of that data clump.\nJustify your response. \nUse the following  output format in JSON:\n## JSON\n{\n    \"key\":\"<key>\",\n    \"justification\":\"<Your justification>\n\n}\n#Ã¤ END JSON",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/tests/org/argouml/uml/cognitive/critics/TestCrInvalidHistory.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    linus\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2006-2007 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.cognitive.critics;\n\nimport junit.framework.TestCase;\nimport org.argouml.model.InitializeModel;\n\nimport org.argouml.model.Model;\n\npublic class TestCrInvalidHistory extends TestCase {\n\n    private CrUML critic = null;\n\n    private Object statemachine;\n\n    private Object compositestate;\n\n    private Object history;\n\n    private Object state1, state2;\n\n    public TestCrInvalidHistory(String arg0) {\n        super(arg0);\n    }\n\n    protected void setUp() throws Exception {\n        super.setUp();\n        InitializeModel.initializeDefault();\n        critic = new CrInvalidHistory();\n        statemachine = Model.getStateMachinesFactory().createStateMachine();\n        compositestate = Model.getStateMachinesFactory()\n                .buildCompositeStateOnStateMachine(statemachine);\n        history = Model.getStateMachinesFactory().buildPseudoState(\n                compositestate);\n        state1 = Model.getStateMachinesFactory().buildSimpleState(\n                compositestate);\n        state2 = Model.getStateMachinesFactory().buildSimpleState(\n                compositestate);\n\n    }\n\n    public void testShallowHistoryKind() {\n        Model.getCoreHelper().setKind(history,\n                Model.getPseudostateKind().getShallowHistory());\n        assertFalse(critic.predicate2(history, null));\n        Model.getStateMachinesFactory().buildTransition(history, state1);\n        assertFalse(critic.predicate2(history, null));\n        Model.getStateMachinesFactory().buildTransition(history, state2);\n        assertTrue(critic.predicate2(history, null));\n    }\n\n    public void testDeepHistoryKind() {\n        Model.getCoreHelper().setKind(history,\n                Model.getPseudostateKind().getDeepHistory());\n        assertFalse(critic.predicate2(history, null));\n        Model.getStateMachinesFactory().buildTransition(history, state1);\n        assertFalse(critic.predicate2(history, null));\n        Model.getStateMachinesFactory().buildTransition(history, state2);\n        assertTrue(critic.predicate2(history, null));\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/tests/org/argouml/uml/cognitive/critics/TestCrInvalidInitial.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    linus\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2006-2007 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.cognitive.critics;\n\nimport junit.framework.TestCase;\nimport org.argouml.model.InitializeModel;\n\nimport org.argouml.model.Model;\n\npublic class TestCrInvalidInitial extends TestCase {\n\n    private CrUML critic = null;\n\n    private Object statemachine;\n\n    private Object compositestate;\n\n    private Object initial;\n\n    private Object state1, state2;\n    \n    public TestCrInvalidInitial(String arg0) {\n        super(arg0);\n    }\n\n    protected void setUp() throws Exception {\n        super.setUp();\n        InitializeModel.initializeDefault();\n        critic = new CrInvalidInitial();\n        statemachine = Model.getStateMachinesFactory().createStateMachine();\n        compositestate = Model.getStateMachinesFactory()\n                .buildCompositeStateOnStateMachine(statemachine);\n        initial = Model.getStateMachinesFactory().buildPseudoState(\n                compositestate);\n        Model.getCoreHelper().setKind(initial,\n                Model.getPseudostateKind().getInitial());\n        state1 = Model.getStateMachinesFactory().buildSimpleState(\n                compositestate);\n        state2 = Model.getStateMachinesFactory().buildSimpleState(\n                compositestate);\n      \n\n    }\n\n    public void testPredicate2() {\n        assertFalse(critic.predicate2(initial, null));\n        Model.getStateMachinesFactory().buildTransition(initial, state1);\n        assertFalse(critic.predicate2(initial, null));\n        Model.getStateMachinesFactory().buildTransition(initial, state2);\n        assertTrue(critic.predicate2(initial, null));\n        \n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/uml/diagram/state/ui/StateDiagramRenderer.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009-2012 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 1996-2008 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.diagram.state.ui;\n\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.CommentEdge;\nimport org.argouml.uml.diagram.ArgoDiagram;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.UmlDiagramRenderer;\nimport org.argouml.uml.diagram.static_structure.ui.FigEdgeNote;\nimport org.argouml.uml.diagram.ui.UMLDiagram;\nimport org.tigris.gef.base.Diagram;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.base.LayerPerspective;\nimport org.tigris.gef.graph.GraphModel;\nimport org.tigris.gef.presentation.FigEdge;\nimport org.tigris.gef.presentation.FigNode;\n\n/**\n * This class defines a renderer object for UML Statechart Diagrams. In a\n * Statechart Diagram the following UML objects are displayed with the\n * following Figs: <p>\n * <pre>\n *  UML Object          ---  Fig\n *  ---------------------------------------\n *  State              ---  FigSimpleState\n *  CompositeState     ---  FigCompositeState\n *  ActionState        ---  FigActionState\n *  FinalState         ---  FigFinalState\n *  Pseudostate        ---  FigPseudostate\n *    Inititial        ---  FigInitialState\n *    Branch (Choice)  ---  FigBranchState\n *    Junction         ---  FigJunctionState\n *    Fork             ---  FigForkState\n *    Join             ---  FigJoinState\n *    DeepHistory      ---  FigDeepHistoryState\n *    ShallowHistory   ---  FigShallowistoryState\n *  SynchState         ---  FigSynchState\n *  Transition         ---  FigTransition\n *  more...\n *  </pre>\n *\n * @author ics125b spring 1998\n */\npublic class StateDiagramRenderer extends UmlDiagramRenderer {\n\n    private static final Logger LOG =\n        Logger.getLogger(StateDiagramRenderer.class.getName());\n\n    /*\n     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(\n     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,\n     *      java.lang.Object, java.util.Map)\n     */\n    public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,\n                                 Map styleAttributes) {\n\n        assert node != null;\n\n        FigNode figNode = null;\n        // Although not generally true for GEF, for Argo we know that the layer\n        // is a LayerPerspective which knows the associated diagram\n        Diagram diag = ((LayerPerspective) lay).getDiagram();\n        if (diag instanceof UMLDiagram\n                && ((UMLDiagram) diag).doesAccept(node)) {\n            figNode = (FigNode) ((UMLDiagram) diag).drop(node, null);\n        } else {\n            LOG.log(Level.FINE, \"TODO: StateDiagramRenderer getFigNodeFor\");\n\n            throw new IllegalArgumentException(\n                    \"Node is not a recognised type. Received \"\n                    + node.getClass().getName());\n        }\n\n        lay.add(figNode);\n        return figNode;\n    }\n\n    /*\n     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(\n     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,\n     *      java.lang.Object, java.util.Map)\n     */\n    public FigEdge getFigEdgeFor(GraphModel gm, Layer lay, Object edge,\n            Map styleAttributes) {\n        assert edge != null;\n        assert lay instanceof LayerPerspective;\n\n        ArgoDiagram diag = (ArgoDiagram) ((LayerPerspective) lay).getDiagram();\n        DiagramSettings settings = diag.getDiagramSettings();\n        FigEdge newEdge = null;\n\n        if (Model.getFacade().isATransition(edge)) {\n            newEdge = new FigTransition(edge, settings);\n        } else if (edge instanceof CommentEdge) {\n            newEdge = new FigEdgeNote(edge, settings); // TODO -> settings\n        }\n        addEdge(lay, newEdge, edge);\n        return newEdge;\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/gefext/ArgoModeCreateFigInk.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    mvw\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2007 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies. This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason. IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.gefext;\n\nimport java.awt.event.MouseEvent;\n\nimport org.argouml.i18n.Translator;\nimport org.tigris.gef.base.ModeCreateFigInk;\nimport org.tigris.gef.presentation.Fig;\nimport org.tigris.gef.presentation.FigInk;\n\n/**\n * A Mode to interprete user input while creating a FigInk.\n *\n * @author Michiel\n */\npublic class ArgoModeCreateFigInk extends ModeCreateFigInk {\n\n    public String instructions() { \n        return Translator.localize(\"statusmsg.help.create.ink\"); \n    }\n\n    public Fig createNewItem(MouseEvent me, int snapX, int snapY) {\n        FigInk p = new ArgoFigInk(snapX, snapY);\n        _lastX = snapX; _lastY = snapY;\n        return p;\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/gefext/ArgoModeCreateFigSpline.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    mvw\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2007 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies. This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason. IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.gefext;\n\nimport java.awt.event.MouseEvent;\n\nimport org.argouml.i18n.Translator;\nimport org.tigris.gef.base.ModeCreateFigSpline;\nimport org.tigris.gef.presentation.Fig;\nimport org.tigris.gef.presentation.FigSpline;\n\n/**\n * A Mode to interprete user input while creating a FigSpline.\n *\n * @author Michiel\n */\npublic class ArgoModeCreateFigSpline extends ModeCreateFigSpline {\n\n    public String instructions() {\n        return Translator.localize(\"statusmsg.help.create.spline\");\n    }\n    \n    public Fig createNewItem(MouseEvent me, int snapX, int snapY) {\n        FigSpline p = new ArgoFigSpline(snapX, snapY);\n        p.addPoint(snapX, snapY); // add the first point twice\n        _startX = snapX; \n        _startY = snapY;\n        _lastX = snapX; \n        _lastY = snapY;\n        _npoints = 2;\n        return p;\n    }\n\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/ActivityDiagramRenderer.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2010-2012 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n */\n\npackage org.argouml.activity2.diagram;\n\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.CommentEdge;\nimport org.argouml.uml.diagram.ArgoDiagram;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.UmlDiagramRenderer;\nimport org.argouml.uml.diagram.static_structure.ui.FigEdgeNote;\nimport org.argouml.uml.diagram.ui.UMLDiagram;\nimport org.tigris.gef.base.Diagram;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.base.LayerPerspective;\nimport org.tigris.gef.graph.GraphModel;\nimport org.tigris.gef.presentation.FigEdge;\nimport org.tigris.gef.presentation.FigNode;\n\nclass ActivityDiagramRenderer extends UmlDiagramRenderer {\n\n    private static final Logger LOG =\n        Logger.getLogger(ActivityDiagramRenderer.class.getName());\n\n    public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,\n                                 Map styleAttributes) {\n        FigNode result = null;\n        // Although not generally true for GEF, for Argo we know that the layer\n        // is a LayerPerspective which knows the associated diagram\n        Diagram diag = ((LayerPerspective) lay).getDiagram();\n        if (diag instanceof UMLDiagram\n                && ((UMLDiagram) diag).doesAccept(node)) {\n            result = (FigNode) ((UMLDiagram) diag).drop(node, null);\n        } else {\n            LOG.log(Level.WARNING,\n                    \"ActivityDiagramRenderer getFigNodeFor unexpected node \"\n                    + node);\n            return null;\n        }\n        LOG.log(Level.FINE, \"ActivityDiagramRenderer getFigNodeFor {0}\", result);\n        lay.add(result);\n        return result;\n    }\n\n    public FigEdge getFigEdgeFor(GraphModel gm, Layer lay, Object edge,\n            Map styleAttributes) {\n        assert edge != null;\n        assert lay instanceof LayerPerspective;\n\n        ArgoDiagram diag = (ArgoDiagram) ((LayerPerspective) lay).getDiagram();\n        DiagramSettings settings = diag.getDiagramSettings();\n        FigEdge newEdge = null;\n\n        if (Model.getFacade().isAActivityEdge(edge)) {\n            newEdge = new FigActivityEdge(edge, settings);\n        } else if (edge instanceof CommentEdge) {\n            newEdge = new FigEdgeNote(edge, settings);\n        }\n        addEdge(lay, newEdge, edge);\n        return newEdge;\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/CreateDiagramElementAction.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2010 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n */\n\npackage org.argouml.activity2.diagram;\n\nimport java.awt.event.ActionEvent;\nimport org.argouml.application.helpers.ResourceLoaderWrapper;\nimport org.argouml.ui.UndoableAction;\nimport org.tigris.gef.base.Globals;\nimport org.tigris.gef.base.Mode;\n\nclass CreateDiagramElementAction extends UndoableAction {\n    \n    final Object metaType;\n    final String style;\n    final BaseDiagram diagram;\n\n    CreateDiagramElementAction(\n            final Object metaType,\n            final String style,\n            final String name,\n            final BaseDiagram diagram) {\n        super(name, ResourceLoaderWrapper.lookupIconResource(\n                ResourceLoaderWrapper.getImageBinding(name)));\n        this.diagram = diagram;\n        this.metaType = metaType;\n        this.style = style;\n    }\n    \n    public void actionPerformed(ActionEvent e) {\n        super.actionPerformed(e);\n\n        Mode placeMode = new ModePlaceDiagramElement(\n                diagram, metaType, style, \"Click to place diagram element\");\n        Globals.mode(placeMode, false);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/ModePlaceDiagramElement.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2011-2012 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n */\n\npackage org.argouml.activity2.diagram;\n\nimport java.awt.Cursor;\nimport java.awt.Graphics;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.MouseEvent;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.base.FigModifyingModeImpl;\nimport org.tigris.gef.base.Globals;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.di.GraphNode;\nimport org.tigris.gef.graph.MutableGraphModel;\nimport org.tigris.gef.presentation.Fig;\nimport org.tigris.gef.undo.UndoManager;\n\nclass ModePlaceDiagramElement extends FigModifyingModeImpl {\n\n    private static final Logger LOG =\n        Logger.getLogger(ModePlaceDiagramElement.class.getName());\n    private final Object metaType;\n    private final String style;\n    private final String instructions;\n    private final BaseDiagram diagram;\n\n    private Object modelElement;\n    private GraphNode graphNode;\n\n    private static final int WIDTH = 90;\n    private static final int HEIGHT = 25;\n\n    public ModePlaceDiagramElement(\n            final BaseDiagram diagram,\n            final Object metaType,\n            final String style,\n            final String instructions) {\n        this.diagram = diagram;\n        this.metaType = metaType;\n        this.style = style;\n        if (instructions == null) {\n            this.instructions = \"\";\n        } else {\n            this.instructions = instructions;\n        }\n    }\n\n    public String instructions() {\n        return instructions;\n    }\n\n    public Cursor getInitialCursor() {\n        return Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);\n    }\n\n    public void mousePressed(MouseEvent me) {\n        if (me.isConsumed()) {\n            return;\n        }\n        UndoManager.getInstance().addMementoLock(this);\n        // TODO: Something might go wrong during processing. We don't really\n        // want to create the model element until the user releases the mouse\n        // in the place expected.\n        modelElement = Model.getUmlFactory().buildNode(metaType, diagram.getOwner());\n        LOG.log(Level.INFO, \"Created {0}\", modelElement);\n\n        //\n        start();\n        editor = Globals.curEditor();\n        Layer lay = editor.getLayerManager().getActiveLayer();\n        graphNode = createDiagramElement(lay, modelElement, diagram.getDiagramSettings());\n        mouseMoved(me);\n        me.consume();\n    }\n\n    private GraphNode createDiagramElement(Layer lay, Object owner, DiagramSettings settings) {\n        FigBaseNode fig = new FigBaseNode(owner, new Rectangle(0, 0, 0, 0), settings);\n        DiagramElementBuilder.buildDiagramElement(fig, style, owner, settings);\n        fig.setLayer(lay);\n        return fig;\n    }\n\n    public void mouseExited(MouseEvent me) {\n        editor.damageAll();\n        me.consume();\n    }\n\n    public void mouseMoved(MouseEvent me) {\n        mouseDragged(me);\n    }\n\n    public void mouseDragged(MouseEvent me) {\n        if (me.isConsumed()) {\n            return;\n        }\n        if (graphNode == null) {\n            me.consume();\n            return;\n        }\n        editor.damageAll();\n        Point snapPt = new Point(me.getX(), me.getY());\n        editor.snap(snapPt);\n        ((Fig) graphNode).setLocation(snapPt.x, snapPt.y);\n        editor.damageAll();\n        me.consume();\n    }\n\n    public void mouseEntered(MouseEvent me) {\n        me.consume();\n    }\n\n    public void mouseReleased(MouseEvent me) {\n        if (me.isConsumed()) {\n            return;\n        }\n\n        LOG.log(Level.INFO, \"Mouse released\");\n        MutableGraphModel mgm = (MutableGraphModel) editor.getGraphModel();\n        UndoManager.getInstance().startChain();\n        editor.add((Fig) graphNode);\n        mgm.addNode(modelElement);\n\n        editor.getSelectionManager().select((Fig) graphNode);\n        LOG.log(Level.INFO, \"The diagram element {0} was added\", graphNode);\n        done();\n        me.consume();\n    }\n\n    public void keyTyped(KeyEvent ke) {\n        if (ke.getKeyChar() == KeyEvent.VK_ESCAPE) {\n            leave();\n        }\n    }\n\n    public void paint(Graphics g) {\n        if (graphNode != null) {\n            ((Fig) graphNode).paint(g);\n        }\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-core-diagrams-sequence2/src/org/argouml/sequence2/diagram/SequenceDiagramRenderer.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009-2012 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2007-2009 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies. This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason. IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.sequence2.diagram;\n\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.CommentEdge;\nimport org.argouml.uml.diagram.ArgoDiagram;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.UmlDiagramRenderer;\nimport org.argouml.uml.diagram.static_structure.ui.FigEdgeNote;\nimport org.argouml.uml.diagram.ui.UMLDiagram;\nimport org.tigris.gef.base.Diagram;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.base.LayerPerspective;\nimport org.tigris.gef.graph.GraphModel;\nimport org.tigris.gef.presentation.FigEdge;\nimport org.tigris.gef.presentation.FigNode;\n\n/**\n *\n * @author penyaskito\n */\nclass SequenceDiagramRenderer extends UmlDiagramRenderer {\n\n    /**\n     * Logger.\n     */\n    private static final Logger LOG =\n        Logger.getLogger(SequenceDiagramRenderer.class.getName());\n\n    /*\n     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(\n     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,\n     *         java.lang.Object, java.util.Map)\n     */\n    public FigNode getFigNodeFor(GraphModel gm, Layer lay, Object node,\n                                 Map styleAttributes) {\n        FigNode result = null;\n        // Although not generally true for GEF, for Argo we know that the layer\n        // is a LayerPerspective which knows the associated diagram\n        Diagram diag = ((LayerPerspective) lay).getDiagram();\n        if (diag instanceof UMLDiagram\n                && ((UMLDiagram) diag).doesAccept(node)) {\n            result = (FigNode) ((UMLDiagram) diag).drop(node, null);\n        } else {\n            LOG.log(Level.WARNING, \"SequenceDiagramRenderer getFigNodeFor unexpected node \"\n                    + node);\n            return null;\n        }\n        LOG.log(Level.FINE, \"SequenceDiagramRenderer getFigNodeFor {0}\", result);\n        lay.add(result);\n        return result;\n    }\n\n    /*\n     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(\n     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,\n     *         java.lang.Object, java.util.Map)\n     */\n    public FigEdge getFigEdgeFor(GraphModel gm, Layer lay, Object edge,\n                                 Map styleAttributes) {\n        FigEdge figEdge = null;\n\n        assert lay instanceof LayerPerspective;\n        ArgoDiagram diag = (ArgoDiagram) ((LayerPerspective) lay).getDiagram();\n        DiagramSettings settings = diag.getDiagramSettings();\n\n        if (edge instanceof CommentEdge) {\n            figEdge = new FigEdgeNote(edge, settings);\n        } else if (Model.getFacade().isAMessage(edge)) {\n            figEdge = new FigMessage(edge, settings);\n        } else {\n            figEdge = getFigEdgeFor(edge, styleAttributes);\n        }\n        addEdge(lay, figEdge, edge);\n        return figEdge;\n    }\n\n    protected FigNode getFigNodeForAssociationEnd(\n            final ArgoDiagram diagram,\n            final Object associationEnd) {\n        final Object element;\n        if (Model.getFacade().getUmlVersion().startsWith(\"1\")) {\n            element =\n                Model.getFacade().getClassifier(associationEnd);\n        } else {\n            element =\n                Model.getFacade().getLifeline(associationEnd);\n        }\n        return getNodePresentationFor(diagram.getLayer(), element);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/uml/diagram/static_structure/ui/FigClass.java\n/* $Id$\n *******************************************************************************\n * Copyright (c) 2010 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *******************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n// $Id$\n// Copyright (c) 1996-2009 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.diagram.static_structure.ui;\n\nimport java.awt.Rectangle;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.tigris.gef.base.Selection;\nimport org.tigris.gef.presentation.Fig;\nimport org.tigris.gef.presentation.FigGroup;\nimport org.tigris.gef.presentation.FigText;\n\n/**\n * Class to display graphics for a UML Class in a diagram.<p>\n * \n * A Class may show stereotypes, a name and compartments for\n * attributes and operations.\n */\npublic class FigClass extends FigClassifierBox {\n\n    /**\n     * Constructor for a {@link FigClass} during file load.<p>\n     *\n     * Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement}\n     * will have created the main box {@link #getBigPort()} and its\n     * name {@link #getNameFig()} and stereotype\n     * (@link #getStereotypeFig()}. This constructor\n     * creates a box for the attributes and operations.<p>\n     *\n     * The properties of all these graphic elements are adjusted\n     * appropriately. The main boxes are all filled and have\n     * outlines. \n     * TODO: which is wrong, since the bigPort is filled, too.\n     * \n     * @param element model element to be represented by this fig.\n     * @param bounds rectangle describing bounds\n     * @param settings rendering settings\n     */\n    public FigClass(Object element, Rectangle bounds, \n            DiagramSettings settings) {\n        super(element, bounds, settings);\n        constructFigs(bounds);\n    }\n\n    private void constructFigs(Rectangle bounds) {\n        enableSizeChecking(false);\n        setSuppressCalcBounds(true);\n        \n        addFig(getBigPort());\n        addFig(getNameFig());\n        /* Stereotype covers NameFig: */\n        addFig(getStereotypeFig());\n        /* Compartments from top to bottom: */\n        createCompartments();\n        \n        // Make all the parts match the main fig\n        setFilled(true);\n        setFillColor(FILL_COLOR);\n        setLineColor(LINE_COLOR);\n        setLineWidth(LINE_WIDTH);\n        \n        /* Set the drop location in the case of D&D: */\n        if (bounds != null) {\n            setLocation(bounds.x, bounds.y);\n        }\n        \n        setSuppressCalcBounds(false);\n        setBounds(getBounds());\n        enableSizeChecking(true);\n    }\n\n    @Override\n    public Object clone() {\n        FigClass figClone = (FigClass) super.clone();\n        Iterator thisIter = this.getFigs().iterator();\n        Iterator cloneIter = figClone.getFigs().iterator();\n        while (thisIter.hasNext()) {\n            Fig thisFig = (Fig) thisIter.next();\n            Fig cloneFig = (Fig) cloneIter.next();\n        }\n        return figClone;\n    }\n\n    public Selection makeSelection() {\n        return new SelectionClass(this);\n    }\n\n    protected Object buildModifierPopUp() {\n        return buildModifierPopUp(ABSTRACT | LEAF | ROOT | ACTIVE);\n    }\n\n    /**\n     * @param fgVec the FigGroup\n     * @param ft    the Figtext\n     * @param i     get the fig before fig i\n     * @return the FigText\n     */\n    protected FigText getPreviousVisibleFeature(FigGroup fgVec,\n\t\t\t\t\t\tFigText ft, int i) {\n        if (fgVec == null || i < 1) {\n            return null;\n        }\n        FigText ft2 = null;\n        List figs = fgVec.getFigs();\n        if (i >= figs.size() || !((FigText) figs.get(i)).isVisible()) {\n            return null;\n        }\n        do {\n            i--;\n            while (i < 1) {\n                if (fgVec == getCompartment(Model.getMetaTypes().getAttribute())) {\n                    fgVec = getCompartment(Model.getMetaTypes().getOperation());\n                } else {\n                    fgVec = getCompartment(Model.getMetaTypes().getAttribute());\n                }\n                figs = fgVec.getFigs();\n                i = figs.size() - 1;\n            }\n            ft2 = (FigText) figs.get(i);\n            if (!ft2.isVisible()) {\n                ft2 = null;\n            }\n        } while (ft2 == null);\n        return ft2;\n    }\n\n    /**\n     * @param fgVec the FigGroup\n     * @param ft    the FigText\n     * @param i     get the fig after fig i\n     * @return the FigText\n     */\n    protected FigText getNextVisibleFeature(FigGroup fgVec, FigText ft, int i) {\n        if (fgVec == null || i < 1) {\n            return null;\n        }\n        FigText ft2 = null;\n        List v = fgVec.getFigs();\n        if (i >= v.size() || !((FigText) v.get(i)).isVisible()) {\n            return null;\n        }\n        do {\n            i++;\n            while (i >= v.size()) {\n                if (fgVec == getCompartment(Model.getMetaTypes().getAttribute())) {\n                    fgVec = getCompartment(Model.getMetaTypes().getOperation());\n                } else {\n                    fgVec = getCompartment(Model.getMetaTypes().getAttribute());\n                }\n                v = new ArrayList(fgVec.getFigs());\n                i = 1;\n            }\n            ft2 = (FigText) v.get(i);\n            if (!ft2.isVisible()) {\n                ft2 = null;\n            }\n        } while (ft2 == null);\n        return ft2;\n    }\n\n    public void setEnclosingFig(Fig encloser) {\n        if (encloser == getEncloser()) {\n            return;\n        }\n        if (encloser == null\n                || (encloser != null\n                && !Model.getFacade().isAInstance(encloser.getOwner()))) {\n            super.setEnclosingFig(encloser);\n        }\n        if (!(Model.getFacade().isAUMLElement(getOwner()))) {\n            return;\n        }\n        if (encloser != null\n                && (Model.getFacade().isAComponent(encloser.getOwner()))) {\n            moveIntoComponent(encloser);\n            super.setEnclosingFig(encloser);\n        }\n\n    }\n\n    @Override\n    protected void updateNameText() {\n        super.updateNameText();\n        calcBounds();\n        setBounds(getBounds());\n    }\n    \n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/uml/diagram/ui/ActionNavigability.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    bobtarling\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 1996-2006 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.diagram.ui;\n\nimport java.awt.event.ActionEvent;\n\nimport javax.swing.Action;\n\nimport org.argouml.i18n.Translator;\nimport org.argouml.model.Model;\nimport org.argouml.ui.UndoableAction;\n\n/**\n * A class to perform the action of changing the unidirectional or\n * bidirectional navigation of an association.\n *\n * @author  Bob Tarling\n */\npublic class ActionNavigability extends UndoableAction {\n    /**\n     * Enumeration constant for <code>BIDIRECTIONAL</code> navigability.\n     */\n    public static final int BIDIRECTIONAL = 0;\n\n    /**\n     * Enumeration constant for <code>STARTTOEND</code> navigability.\n     */\n    public static final int STARTTOEND = 1;\n\n    /**\n     * Enumeration constant for <code>ENDTOSTART</code> navigability.\n     */\n    public static final int ENDTOSTART = 2;\n\n    /**\n     * The actual navigability of this action.\n     */\n    private int nav = BIDIRECTIONAL;\n\n    /**\n     * The association start.\n     */\n    private Object assocStart;\n\n    /**\n     * The association end.\n     */\n    private Object assocEnd;\n\n    /**\n     * The <code>ActionNavigability</code> constructor.\n     *\n     * @param assocStart a <code>MAssociationEnd</code> object at the start\n     * of an association.\n     * @param assocEnd a <code>MAssociationEnd</code> object at the end of\n     * an association.\n     * @param nav the type of navigation required in the association\n     * being either <ul> <li>BIDIRECTIONAL <li>STARTTOEND\n     * <li>ENDTOSTART </ul>\n     *\n     * @return the constructed class\n     */\n    public static ActionNavigability newActionNavigability(Object assocStart,\n\t\t\t\t\t\t\t   Object assocEnd,\n\t\t\t\t\t\t\t   int nav) {\n        return new ActionNavigability(getDescription(assocStart, assocEnd, nav),\n\t\t\t\t      assocStart,\n\t\t\t\t      assocEnd,\n\t\t\t\t      nav);\n    }\n\n    /**\n     * Build a description string from the given association ends,\n     * and the navigability.\n     *\n     * @param assocStart association end 1\n     * @param assocEnd   association end 2\n     * @param nav        the navigability\n     * @return           the string containing a human-readible indication\n     *                   of the navigability\n     */\n    private static String getDescription(Object assocStart,\n\t\t\t\t\t Object assocEnd,\n\t\t\t\t\t int nav) {\n        String startName =\n            Model.getFacade().getName(Model.getFacade().getType(assocStart));\n        String endName =\n            Model.getFacade().getName(Model.getFacade().getType(assocEnd));\n\n        if (startName == null || startName.length() == 0) {\n            startName = Translator.localize(\"action.navigation.anon\");\n        }\n        if (endName == null || endName.length() == 0) {\n            endName = Translator.localize(\"action.navigation.anon\");\n        }\n\n        if (nav == STARTTOEND) {\n            return Translator.messageFormat(\n                    \"action.navigation.from-to\",\n                    new Object[] {\n                        startName,\n                        endName,\n                    }\n            );\n        } else if (nav == ENDTOSTART) {\n            return Translator.messageFormat(\n                    \"action.navigation.from-to\",\n                    new Object[] {\n                        endName,\n                        startName,\n                    }\n            );\n        } else {\n            return Translator.localize(\"action.navigation.bidirectional\");\n        }\n    }\n\n    /**\n     * The constructor.\n     *\n     * @param label   the description as build in <code>getDescription</code>\n     * @param theAssociationStart association end 1\n     * @param theAssociationEnd   association end 2\n     * @param theNavigability     the navigability: one of\n     *                            BIDIRECTIONAL, STARTTOEND, ENDTOSTART\n     */\n    protected ActionNavigability(String label,\n\t\t\t\t Object theAssociationStart,\n\t\t\t\t Object theAssociationEnd,\n\t\t\t\t int theNavigability) {\n        super(label, null);\n        // Set the tooltip string:\n        putValue(Action.SHORT_DESCRIPTION, label);\n\n        this.nav = theNavigability;\n        this.assocStart = theAssociationStart;\n        this.assocEnd = theAssociationEnd;\n    }\n\n    /*\n     * @see java.awt.event.ActionListener#actionPerformed(\n     *         java.awt.event.ActionEvent)\n     */\n    public void actionPerformed(ActionEvent ae) {\n    \tsuper.actionPerformed(ae);\n\tModel.getCoreHelper().setNavigable(assocStart,\n\t        (nav == BIDIRECTIONAL || nav == ENDTOSTART));\n        Model.getCoreHelper().setNavigable(assocEnd,\n                (nav == BIDIRECTIONAL || nav == STARTTOEND));\n    }\n\n    /**\n     * The is action is always enabled.\n     *\n     *@return always true (the action is always enabled)\n     * @see org.tigris.gef.undo.UndoableAction#isEnabled()\n     */\n    public boolean isEnabled() {\n\treturn true;\n    }\n} /* end class ActionNavigability */\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/src/org/argouml/uml/diagram/collaboration/ui/CollabDiagramRenderer.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009-2012 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Bob Tarling\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 1996-2008 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.diagram.collaboration.ui;\n\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.argouml.model.Model;\nimport org.argouml.uml.CommentEdge;\nimport org.argouml.uml.diagram.ArgoDiagram;\nimport org.argouml.uml.diagram.DiagramEdgeSettings;\nimport org.argouml.uml.diagram.DiagramSettings;\nimport org.argouml.uml.diagram.UmlDiagramRenderer;\nimport org.argouml.uml.diagram.static_structure.ui.FigEdgeNote;\nimport org.argouml.uml.diagram.ui.FigDependency;\nimport org.argouml.uml.diagram.ui.FigGeneralization;\nimport org.argouml.uml.diagram.ui.UMLDiagram;\nimport org.tigris.gef.base.Diagram;\nimport org.tigris.gef.base.Layer;\nimport org.tigris.gef.base.LayerPerspective;\nimport org.tigris.gef.graph.GraphModel;\nimport org.tigris.gef.presentation.FigEdge;\nimport org.tigris.gef.presentation.FigNode;\n\n/**\n * This class defines a renderer object for UML Collaboration Diagrams.\n * In a collaboration Diagram the following UML objects are displayed with the\n * following Figs:<p>\n *\n * <pre>\n *   UML Object       ---  Fig\n *   ---------------------------------------\n *   MClassifierRole  ---  FigClassifierRole\n *   MMessage         ---  FigMessage\n *   MComment         ---  FigComment\n * </pre>\n *\n * Provides {@link #getFigNodeFor} to implement the\n * {@link org.tigris.gef.graph.GraphNodeRenderer} interface and\n * {@link #getFigEdgeFor} to implement the\n * {@link org.tigris.gef.graph.GraphEdgeRenderer} interface.<p>\n *\n * <em>Note</em>. Should be implemented as a singleton - we don't really\n * need a separate instance for each use case diagram.<p>\n *\n *\n * @author agauthie\n */\npublic class CollabDiagramRenderer extends UmlDiagramRenderer {\n    /**\n     * Logger.\n     */\n    private static final Logger LOG =\n        Logger.getLogger(CollabDiagramRenderer.class.getName());\n\n    /*\n     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(\n     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,\n     *         java.lang.Object, java.util.Map)\n     */\n    public FigNode getFigNodeFor(GraphModel gm, Layer lay,\n\t\t\t\t Object node, Map styleAttributes) {\n\n        FigNode figNode = null;\n\n        assert node != null;\n\n        // Although not generally true for GEF, for Argo we know that the layer\n        // is a LayerPerspective which knows the associated diagram\n        Diagram diag = ((LayerPerspective) lay).getDiagram();\n        if (diag instanceof UMLDiagram\n                && ((UMLDiagram) diag).doesAccept(node)) {\n            figNode = (FigNode) ((UMLDiagram) diag).drop(node, null);\n        } else {\n            LOG.log(Level.SEVERE, \"TODO: CollabDiagramRenderer getFigNodeFor\");\n            throw new IllegalArgumentException(\n                    \"Node is not a recognised type. Received \"\n                    + node.getClass().getName());\n        }\n\n        lay.add(figNode);\n        return figNode;\n    }\n\n    /**\n     * Return a Fig that can be used to represent the given edge,\n     * Generally the same code as for the ClassDiagram, since its\n     * very related to it.\n     *\n     * {@inheritDoc}\n     */\n    public FigEdge getFigEdgeFor(GraphModel gm, Layer lay,\n\t\t\t\t Object edge, Map styleAttributes) {\n        LOG.log(Level.FINE, \"making figedge for {0}\", edge);\n\n        if (edge == null) {\n            throw new IllegalArgumentException(\"A model edge must be supplied\");\n        }\n\n        assert lay instanceof LayerPerspective;\n        ArgoDiagram diag = (ArgoDiagram) ((LayerPerspective) lay).getDiagram();\n        DiagramSettings settings = diag.getDiagramSettings();\n\n        FigEdge newEdge = null;\n        if (Model.getFacade().isAAssociationRole(edge)\n                || Model.getFacade().isAConnector(edge)) {\n            Object[] associationEnds =\n                Model.getFacade().getConnections(edge).toArray();\n            newEdge = new FigAssociationRole(\n                    new DiagramEdgeSettings(\n                            edge,\n                            associationEnds[0],\n                            associationEnds[1]),\n                            settings);\n            FigNode sourceFig =\n                getFigNodeForAssociationEnd(diag, associationEnds[0]);\n            FigNode destFig =\n                getFigNodeForAssociationEnd(diag, associationEnds[1]);\n            newEdge.setSourceFigNode(sourceFig);\n            newEdge.setSourcePortFig(sourceFig);\n            newEdge.setDestFigNode(destFig);\n            newEdge.setDestPortFig(destFig);\n        } else if (Model.getFacade().isAGeneralization(edge)) {\n            newEdge = new FigGeneralization(edge, settings);\n        } else if (Model.getFacade().isADependency(edge)) {\n            newEdge = new FigDependency(edge , settings);\n        } else if (edge instanceof CommentEdge) {\n            newEdge = new FigEdgeNote(edge, settings); // TODO -> settings\n        }\n\n        addEdge(lay, newEdge, edge);\n        return newEdge;\n    }\n\n    protected FigNode getFigNodeForAssociationEnd(\n            final ArgoDiagram diagram,\n            final Object associationEnd) {\n        final Object element;\n        if (Model.getFacade().getUmlVersion().startsWith(\"1\")) {\n            element =\n                Model.getFacade().getClassifier(associationEnd);\n        } else {\n            element =\n                Model.getFacade().getLifeline(associationEnd);\n        }\n        return getNodePresentationFor(diagram.getLayer(), element);\n    }\n}\n",
            "role": "user"
        },
        {
            "content": "//src/argouml-app/tests/org/argouml/uml/cognitive/critics/TestCrNoInitialState.java\n/* $Id$\n *****************************************************************************\n * Copyright (c) 2009 Contributors - see below\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    linus\n *****************************************************************************\n *\n * Some portions of this file was previously release using the BSD License:\n */\n\n// Copyright (c) 2006-2007 The Regents of the University of California. All\n// Rights Reserved. Permission to use, copy, modify, and distribute this\n// software and its documentation without fee, and without a written\n// agreement is hereby granted, provided that the above copyright notice\n// and this paragraph appear in all copies.  This software program and\n// documentation are copyrighted by The Regents of the University of\n// California. The software program and documentation are supplied \"AS\n// IS\", without any accompanying services from The Regents. The Regents\n// does not warrant that the operation of the program will be\n// uninterrupted or error-free. The end-user understands that the program\n// was developed for research purposes and is advised not to rely\n// exclusively on the program for any reason.  IN NO EVENT SHALL THE\n// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\n// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,\n// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n\npackage org.argouml.uml.cognitive.critics;\n\nimport junit.framework.TestCase;\nimport org.argouml.model.InitializeModel;\n\nimport org.argouml.model.Model;\n\npublic class TestCrNoInitialState extends TestCase {\n\n    private CrUML critic = null;\n\n    private Object statemachine;\n\n    private Object compositestate;\n\n    private Object initial;\n\n    \n    public TestCrNoInitialState(String arg0) {\n        super(arg0);\n    }\n\n    protected void setUp() throws Exception {\n        super.setUp();\n        InitializeModel.initializeDefault();\n        critic = new CrNoInitialState();\n        statemachine = Model.getStateMachinesFactory().createStateMachine();\n        compositestate = Model.getStateMachinesFactory()\n                .buildCompositeStateOnStateMachine(statemachine);\n        initial = Model.getStateMachinesFactory().buildPseudoState(\n                compositestate);\n      \n\n    }\n\n    public void testPredicate2() {\n        assertTrue(critic.predicate2(compositestate, null));\n        Model.getCoreHelper().setKind(initial,\n                Model.getPseudostateKind().getInitial());\n        assertFalse(critic.predicate2(compositestate, null));\n    }\n}\n",
            "role": "user"
        }
    ],
    "model": "gpt-4-1106-preview",
    "response_format": {
        "type": "json_object"
    },
    "temperature": 0.1
}