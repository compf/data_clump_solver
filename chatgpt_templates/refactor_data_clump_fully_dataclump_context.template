I will provide you ${programming_language} code files.
Data clumps can be either on method parameter level or on field level.
One can represent them as a graph by connecting two groups of method parameters or two groups of fields or or a group of method parameters and a group of fields, if the two groups have the same names parameter/field names.
For instance if the method printSomething in class 'FromClass' has parameters x,y,z and method 'printAnother' in class 'ToClass' has also x,y,z a new class 'Point' can be created instead.
Locate all method and field definitions where data clumps exist.
Output in JSON. An example of an output is provided below.
The methods in 'from_method' and 'to_method' must have at least 3 parameters. E.g. doMaxStuff() cannot contain a data clump but printProduct(int x,int y, int z) can. 
Disregard a JSON object if the code is not a field definition or a method definition but the usage of a field or method. 

### JSON FORMAT
{
 
  "type": "data_clump",
      "key": "parameters_to_parameters_data_clump-lib/src/main/java/packageName/FromClass.java-packageName.FromClass/method/printSomething(int x, int y, int z)-packageName.ToClass/method/printAnother(int x, int y, int z)-xyz",
      "probability": 1,
      "from_file_path": "lib/src/main/java/packageName/FromClass.java",
      "from_class_or_interface_name": "FromClass",
      "from_class_or_interface_key": "packageName.FromClass",
      "from_method_name": "printSomething",
      "from_method_key": "packageName.FromClass/method/printSomething(int x, int y, int z)",
      "to_file_path": "lib/src/main/java/packageName/ToClass.java",
      "to_class_or_interface_name": "ToClass",
      "to_class_or_interface_key": "packageName.ToClass",
      "to_method_name": "printAnother",
      "to_method_key": "packageName.ToClass/method/printAnother(int x, int y, int z)",
      "data_clump_type": "parameters_to_parameters_data_clump",
      "data_clump_data": {
        "packageName.FromClass/method/printSomething(int x, int y, int z)/parameter/x": {
          "key": "packageName.FromClass/method/printSomething(int x, int y, int z)/parameter/x",
          "name": "x",
          "type": "int",
          "probability": 1,
          "modifiers": [],
          "to_variable": {
            "key": "packageName.ToClass/method/printAnother(int x, int y, int z)/parameter/x",
            "name": "x",
            "type": "int",
            "modifiers": [],
            "position": {
              "startLine": 6,
              "startColumn": 30,
              "endLine": 6,
              "endColumn": 31
            }
          },
          "position": {
            "startLine": 5,
            "startColumn": 33,
            "endLine": 5,
            "endColumn": 34
          }
        },
}
}