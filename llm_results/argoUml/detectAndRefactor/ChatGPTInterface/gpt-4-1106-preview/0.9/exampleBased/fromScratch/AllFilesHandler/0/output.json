[
  {
    "messages": [
      [
        "",
        "",
        "I will provide you  Java code files.",
        "",
        "Refactor all data clumps in the respective files.",
        "To do this, replace the method parameters or fields of all data clump variables by an instance of the extracted class, and update all usages accordingly.",
        "Also provide the content of all extracted classes.",
        "",
        "Examples of data clump are provided below.",
        "",
        "Use the following JSON format for the output:",
        "## JSON",
        "",
        "{",
        "    \"refactorings\":{",
        "        // for each refactored file",
        "        \"file1Path\": [",
        "            // for each change in the file performed by you",
        "            {",
        "                \"lineRange\": \"the line numbers (e.g 1-4) of the changed lines\",",
        "                \"newContent\": \"the new content of the changed lines\",",
        "            },",
        "            //...",
        "        ]",
        "    },",
        "    \"extractedClasses\":{",
        "          // for each extracted class",
        "        \"extractedClassPath1\": \"full content of the newly extracted class 1 \",",
        "        //...",
        "    }",
        "}",
        "",
        "## END JSON",
        "",
        "## Examples",
        "import java.util.Arrays;",
        "import java.util.Date;",
        "import java.time.LocalDateTime;",
        "//#### example 1 ##################################",
        "// 'Parameters to parameters' data clump",
        "class Example1A {",
        "",
        "    //Both methods have the same parameters, so we can extract them into a class",
        "    void processUserData(int userID, String username, String email) {",
        "        System.out.println(\"Processing user data: ID-\" + userID + \", Username-\" + username + \", Email-\" + email);",
        "    }",
        "",
        "    void performUserAction(int userID, String username, String email) {",
        "        System.out.println(\"Performing user action: ID-\" + userID + \", Username-\" + username + \", Email-\" + email);",
        "    }",
        "}",
        "",
        "",
        "//refactored######################################",
        "class UserData{",
        "    int userID;",
        "    String username;",
        "    String email;",
        "    UserData(int userID, String username, String email){",
        "        this.userID = userID;",
        "        this.username = username;",
        "        this.email = email;",
        "    }",
        "    public int getUserID() {",
        "        return userID;",
        "    }",
        "    public String getUsername() {",
        "        return username;",
        "    }",
        "    public String getEmail() {",
        "        return email;",
        "    }",
        "",
        "    public void setUserID(int userID) {",
        "        this.userID = userID;",
        "    }",
        "    public void setUsername(String username) {",
        "        this.username = username;",
        "    }",
        "    public void setEmail(String email) {",
        "        this.email = email;",
        "    }",
        "    ",
        "}",
        "class Example1A {",
        "    void processUserData(UserData userData) {",
        "        System.out.println(\"Processing user data: ID-\" + userData.getUserId() + \", Username-\" + userData.getUsername() + \", Email-\" + userData.getEmail());",
        "    }",
        "",
        "    void performUserAction(UserData userData) {",
        "        System.out.println(\"Performing user action: ID-\" + userData.getUserId() + \", Username-\" + userData.getUsername() + \", Email-\" + userData.getEmail());",
        "    }",
        "}",
        "",
        "",
        "",
        "//#### example 1 end ##################################",
        "",
        "//#### example 2 ##################################",
        "//// 'Parameters to parameters' data clump",
        "// Example2A.java",
        "class Example2A {",
        "    //The methods in both classes have the same parameters, so we can extract them into a class",
        "    void processProductData(int productID, String name, String description) {",
        "        System.out.println(\"Processing product data: ID-\" + productID + \", Name-\" + name + \", Description-\" + description);",
        "    }",
        "",
        "   ",
        "}",
        "class Example2B {",
        "    void showProductInfo(int productID, String name, String description) {",
        "        System.out.println(\"Showing product info: ID-\" + productID + \", Name-\" + name + \", Description-\" + description);",
        "    }",
        "}",
        "//### refactored ##################################",
        "class ProductInfo{",
        "    int productID;",
        "    String name;",
        "    String description;",
        "    ProductInfo(int productID, String name, String description){",
        "        this.productID = productID;",
        "        this.name = name;",
        "        this.description = description;",
        "    }",
        "    public int getProductID() {",
        "        return productID;",
        "    }",
        "    public String getName() {",
        "        return name;",
        "    }",
        "    public String getDescription() {",
        "        return description;",
        "    }",
        "",
        "    public void setProductID(int productID) {",
        "        this.productID = productID;",
        "    }",
        "    public void setName(String name) {",
        "        this.name = name;",
        "    }",
        "    public void setDescription(String description) {",
        "        this.description = description;",
        "    }    ",
        "}",
        "class Example2A {",
        "    void processProductData(ProductInfo productInfo) {",
        "        System.out.println(\"Processing product data: ID-\" + productInfo.getProductID() + \", Name-\" + productInfo.getName() + \", Description-\" + productInfo.getDescription());",
        "    }",
        "",
        "    void displayProductInfo(int productID, String name, String description) {",
        "        System.out.println(\"Displaying product info: ID-\" + productInfo.getProductID() + \", Name-\" + productInfo.getName() + \", Description-\" + productInfo.getDescription());",
        "    }",
        "}",
        "class Example2B {",
        "    void showProductInfo(ProductInfo productInfo) {",
        "        System.out.println(\"Showing product info: ID-\" + productInfo.getProductID() + \", Name-\" + productInfo.getName() + \", Description-\" + productInfo.getDescription());",
        "    }",
        "}",
        "//#### example 2 end ##################################",
        "",
        "//#### example 3 ##################################",
        "//'fields to fields' data clump",
        "class Example3A {",
        "    // both classes have the same fields, so we can extract them into a class",
        "    private int orderId;",
        "    private int customerId;",
        "    private int[] productIds;",
        "    void processOrderData() {",
        "        System.out.println(\"Processing order data: OrderID-\" + orderID + \", CustomerID-\" + customerID + \", ProductIDs-\" + Arrays.toString(productIDs));",
        "    }",
        "    Example3A(int orderID, int customerID, int[] productIDs){",
        "        this.orderID = orderID;",
        "        this.customerID = customerID;",
        "        this.productIDs = productIDs;",
        "    }",
        "",
        " ",
        "}",
        "",
        "// Example3B.java",
        "class Example3B {",
        "    private int orderId;",
        "    private int customerId;",
        "    private int[] productIds;",
        "    void displayOrderSummary() {",
        "        System.out.println(\"Displaying order summary: OrderID-\" + orderID + \", CustomerID-\" + customerID + \", ProductIDs-\" + Arrays.toString(productIDs));",
        "    }",
        "    Example3B(int orderID, int customerID, int[] productIDs){",
        "        this.orderID = orderID;",
        "        this.customerID = customerID;",
        "        this.productIDs = productIDs;",
        "    }",
        "}",
        "//### refactored ##################################",
        "class OrderDetails{",
        "    int orderID;",
        "    int customerID;",
        "    int[] productIDs;",
        "    OrderDetails(int orderID, int customerID, int[] productIDs){",
        "        this.orderID = orderID;",
        "        this.customerID = customerID;",
        "        this.productIDs = productIDs;",
        "    }",
        "    public int getOrderID() {",
        "        return orderID;",
        "    }",
        "    public int getCustomerID() {",
        "        return customerID;",
        "    }",
        "    public int[] getProductIDs() {",
        "        return productIDs;",
        "    }",
        "",
        "    public void setOrderID(int orderID) {",
        "        this.orderID = orderID;",
        "    }",
        "    public void setCustomerID(int customerID) {",
        "        this.customerID = customerID;",
        "    }",
        "    public void setProductIDs(int[] productIDs) {",
        "        this.productIDs = productIDs;",
        "    }    ",
        "}",
        "class Example3A {",
        "    private OrderDetails orderDetails;",
        "    void processOrderData() {",
        "        System.out.println(\"Processing order data: OrderID-\" + orderDetails.getOrderID() + \", CustomerID-\" + orderDetails.getCustomerId() + \", ProductIDs-\" + Arrays.toString(orderDetails.getProductIDs()));",
        "    }",
        "    Example3A(int orderID, int customerID, int[] productIDs){",
        "        this.orderDetails = new OrderDetails(orderID, customerID, productIDs);",
        "    }",
        "",
        " ",
        "}",
        "",
        "// Example3B.java",
        "class Example3B {",
        "    private OrderDetails orderDetails;",
        "    void displayOrderSummary() {",
        "        System.out.println(\"Displaying order summary: OrderID-\" + orderDetails.getOrderID() + \", CustomerID-\" + orderDetails.getCustomerId() + \", ProductIDs-\" + Arrays.toString(orderDetails.getProductIDs()));",
        "    }",
        "    Example3B(int orderID, int customerID, int[] productIDs){",
        "        this.orderDetails = new OrderDetails(orderID, customerID, productIDs);",
        "    }",
        "}",
        "//#### example 3 end ##################################",
        "",
        "",
        "//#### example 4 ##################################",
        "// 'method parameters to fields' data clump",
        "class Example4A {",
        "    private int employeeID;",
        "    private String firstName;",
        "    private String lastName;",
        "    void processEmployeeData() {",
        "        System.out.println(\"Processing employee data: ID-\" + employeeID + \", First Name-\" + firstName + \", Last Name-\" + lastName);",
        "    }",
        "}",
        "",
        "// Example4B.java",
        "class Example4B {",
        "    void showEmployeeInfo(int employeeID, String firstName, String lastName) {",
        "        //this method has the same parameters as the fields in Example4A, so we can extract them into a class",
        "        System.out.println(\"Showing employee info: ID-\" + employeeID + \", First Name-\" + firstName + \", Last Name-\" + lastName);",
        "    }",
        "}",
        "//### refactored ##################################",
        "class EmployeeRecord{",
        "    int employeeID;",
        "    String firstName;",
        "    String lastName;",
        "    EmployeeRecord(int employeeID, String firstName, String lastName){",
        "        this.employeeID = employeeID;",
        "        this.firstName = firstName;",
        "        this.lastName = lastName;",
        "    }",
        "    public int getEmployeeID() {",
        "        return employeeID;",
        "    }",
        "    public String getFirstName() {",
        "        return firstName;",
        "    }",
        "    public String getLastName() {",
        "        return lastName;",
        "    }",
        "",
        "    public void setEmployeeID(int employeeID) {",
        "        this.employeeID = employeeID;",
        "    }",
        "    public void setFirstName(String firstName) {",
        "        this.firstName = firstName;",
        "    }",
        "    public void setLastName(String lastName) {",
        "        this.lastName = lastName;",
        "    } ",
        "       ",
        "}",
        "class Example4A {",
        "    private EmployeeRecord employeeRecord;",
        "    void processEmployeeData() {",
        "        System.out.println(\"Processing employee data: ID-\" + employeeRecord.getEmployeeID() + \", First Name-\" + employeeRecord.getFirstName() + \", Last Name-\" + employeeRecord.getLastName());",
        "    }",
        "",
        "}",
        "class Example4B {",
        "    void showEmployeeInfo(EmployeeRecord employeeRecord) {",
        "        System.out.println(\"Showing employee info: ID-\" + employeeRecord.getEmployeeID() + \", First Name-\" + employeeRecord.getFirstName() + \", Last Name-\" + employeeRecord.getLastName());",
        "    }",
        "}",
        "//#### example 4 end ##################################",
        "",
        "",
        "// ### example 5#########################",
        "//'method parameters to method parameters' data clump",
        "class Example5A {",
        "",
        "    // both methods share at least 3 parameters, so we can extract those 3 parameters into a class",
        "    void processCustomerData(int customerID, String firstName, String lastName,int offset) {",
        "        System.out.println(\"Processing customer data: ID-\" + customerID+offset + \", First Name-\" + firstName + \", Last Name-\" + lastName);",
        "    }",
        "",
        "    void sendCustomerNotification(int customerID, String firstName, String lastName,double factor) {",
        "        System.out.println(\"Sending customer notification: ID-\" + customerID*factor + \", First Name-\" + firstName + \", Last Name-\" + lastName);",
        "    }",
        "}",
        "",
        "//## refactored ##################################",
        "class CustomerData{",
        "    int customerID;",
        "    String firstName;",
        "    String lastName;",
        "    CustomerData(int customerID, String firstName, String lastName){",
        "        this.customerID = customerID;",
        "        this.firstName = firstName;",
        "        this.lastName = lastName;",
        "    }",
        "    public int getCustomerID() {",
        "        return customerID;",
        "    }",
        "    public String getFirstName() {",
        "        return firstName;",
        "    }",
        "    public String getLastName() {",
        "        return lastName;",
        "    }",
        "",
        "    public void setCustomerID(int customerID) {",
        "        this.customerID = customerID;",
        "    }",
        "    public void setFirstName(String firstName) {",
        "        this.firstName = firstName;",
        "    }",
        "    public void setLastName(String lastName) {",
        "        this.lastName = lastName;",
        "    } ",
        "       ",
        "}",
        "class Example5A {",
        "    void processCustomerData(CustomerData customerData, int offset) {",
        "        System.out.println(\"Processing customer data: ID-\" + customerData.getCustomerID()+offset + \", First Name-\" + customerData.getFirstName() + \", Last Name-\" + customerData.getLastName());",
        "    }",
        "",
        "    void sendCustomerNotification(CustomerData customerData, double factor) {",
        "        System.out.println(\"Sending customer notification: ID-\" + customerData.getCustomerID()*factor + \", First Name-\" + customerData.getFirstName() + \", Last Name-\" + customerData.getLastName());",
        "    }",
        "}",
        "//#### example 5 end ##################################",
        "",
        "//### Example 6 #############",
        "// method parameters to method parameters' data clump",
        "class Example6A {",
        "",
        "    // both classes have methods which share at least 3 parameters, so we can extract those 3 parameters into a class",
        "    void processTaskData(int taskID, String description, String status,String prefix) {",
        "        System.out.println(\"Processing task data: ID-\" + taskID + \", Description-\" + description + \", Status-\" + prefix+\":\"+status);",
        "    }",
        "",
        " ",
        "}",
        "",
        "",
        "class Example6B {",
        "    void finishTask(int taskID, String description, String status,boolean lowerCase) {",
        "        System.out.println(\"Finishing task: ID-\" + taskID + \", Description-\" + description + \", Status-\" + lowerCase?status.toLowerCase():status);",
        "    }",
        "}",
        "//## refactored ##################################",
        "",
        "class TaskData{",
        "    int taskID;",
        "    String description;",
        "    String status;",
        "    TaskData(int taskID, String description, String status){",
        "        this.taskID = taskID;",
        "        this.description = description;",
        "        this.status = status;",
        "    }",
        "    public int getTaskID() {",
        "        return taskID;",
        "    }",
        "    public String getDescription() {",
        "        return description;",
        "    }",
        "    public String getStatus() {",
        "        return status;",
        "    }",
        "",
        "    public void setTaskID(int taskID) {",
        "        this.taskID = taskID;",
        "    }",
        "    public void setDescription(String description) {",
        "        this.description = description;",
        "    }",
        "    public void setStatus(String status) {",
        "        this.status = status;",
        "    } ",
        "       ",
        "}",
        "class Example6A {",
        "    void processTaskData(TaskData taskData, String prefix) {",
        "        System.out.println(\"Processing task data: ID-\" + taskData.getTaskID() + \", Description-\" + taskData.getDescription() + \", Status-\" + prefix+\":\"+taskData.getStatus());",
        "    }",
        "",
        " ",
        "}",
        "class Example6B {",
        "    void finishTask(TaskData taskData, boolean lowerCase) {",
        "        System.out.println(\"Finishing task: ID-\" + taskData.getTaskID() + \", Description-\" + taskData.getDescription() + \", Status-\" + lowerCase?taskData.getStatus().toLowerCase():taskData.getStatus());",
        "    }",
        "}",
        "//## Example 6 end ##################################",
        "",
        "",
        "//## example 7 ##################################",
        "// 'fields to fields' data clump",
        "class Example7A {",
        "",
        "    // both classes share at least 3 fields, so we can extract those 3 fields into a class",
        "    private int postID;",
        "    private String title;",
        "    private String content;",
        "    private String author;",
        "",
        "    void processBlogPostData() {",
        "        System.out.println(\"Processing blog post data: PostID-\" + postID + \", Title-\" + title + \", Content-\" + content+\", Author-\"+author);",
        "    }",
        "    Example7A(int postID, String title, String content, String author){",
        "        this.postID = postID;",
        "        this.title = title;",
        "        this.content = content;",
        "        this.author = author;",
        "    }",
        "   ",
        "}",
        "",
        "// Example7B.java",
        "class Example7B {",
        "    private int postID;",
        "    private String title;",
        "    private String content;",
        "    private int length;",
        "    void distributeBlogPost(int postID, String title, String content) {",
        "        System.out.println(\"Distributing blog post: PostID-\" + postID + \", Title-\" + title + \", Content-\" + content+ \", Length-\" + length+ \"words\");",
        "    }",
        "    Example7B(int postID, String title, String content){",
        "        this.postID = postID;",
        "        this.title = title;",
        "        this.content = content;",
        "        this.length = content.split(\" \").length;",
        "    }",
        "}",
        "//## refactored ##################################",
        "",
        "class BlogPost{",
        "    int postID;",
        "    String title;",
        "    String content;",
        "    BlogPost(int postID, String title, String content, String author){",
        "        this.postID = postID;",
        "        this.title = title;",
        "        this.content = content;",
        "    }",
        "    public int getPostID() {",
        "        return postID;",
        "    }",
        "    public String getTitle() {",
        "        return title;",
        "    }",
        "    public String getContent() {",
        "        return content;",
        "    }",
        "",
        "",
        "    public void setPostID(int postID) {",
        "        this.postID = postID;",
        "    }",
        "    public void setTitle(String title) {",
        "        this.title = title;",
        "    }",
        "    public void setContent(String content) {",
        "        this.content = content;",
        "    }",
        "   ",
        "       ",
        "}",
        "",
        "class Example7A {",
        "    private BlogPost blogPost;",
        "    private String author;",
        "    void processBlogPostData() {",
        "        System.out.println(\"Processing blog post data: PostID-\" + blogPost.getPostID() + \", Title-\" + blogPost.getTitle() + \", Content-\" + blogPost.getContent()+\", Author-\"+author);",
        "    }",
        "    Example7A(int postID, String title, String content, String author){",
        "        this.blogPost = new BlogPost(postID, title, content);",
        "        this.author = author;",
        "    }",
        "   ",
        "}",
        "class Example7B {",
        "    private BlogPost blogPost;",
        "    private int length;",
        "    void distributeBlogPost() {",
        "        System.out.println(\"Distributing blog post: PostID-\" + blogPost.getPostID() + \", Title-\" + blogPost.getTitle() + \", Content-\" + blogPost.getContent()+ \", Length-\" + length+ \"words\");",
        "    }",
        "    Example7B(int postID, String title, String content){",
        "        this.blogPost = new BlogPost(postID, title, content);",
        "        this.length= content.split(\" \").length;",
        "    }",
        "}",
        "//## example 7 end ##################################",
        "",
        "",
        "//## example 8 ##################################",
        "// 'method parameters to fields' data clump",
        "class Example8A {",
        "    void processEventData(int eventID, String title, LocalDateTime dateTime,boolean isGlobalEvent) {",
        "        // this method shares at least 3 parameters with the fields in Example8B, so we can extract those 3 parameters into a class",
        "        System.out.println(\"Processing event data: EventID-\" + eventID + \", Title-\" + title + \", Date and Time-\" + dateTime+\", Is Global Event-\"+isGlobalEvent);",
        "    }   ",
        "}",
        "",
        "// Example8B.java",
        "class Example8B {",
        "    private int eventID;",
        "    private String title;",
        "    private LocalDateTime dateTime;",
        "    private Object params;",
        "",
        "    void attendEvent() {",
        "        System.out.println(\"Attending event: EventID-\" + eventID + \", Title-\" + title + \", Date and Time-\" + dateTime + \", Params-\" + params.toString());",
        "    }",
        "}",
        "//## refactored ##################################",
        "class EventData{",
        "    int eventID;",
        "    String title;",
        "    LocalDateTime dateTime;",
        "    EventData(int eventID, String title, LocalDateTime dateTime){",
        "        this.eventID = eventID;",
        "        this.title = title;",
        "        this.dateTime = dateTime;",
        "    }",
        "    public int getEventID() {",
        "        return eventID;",
        "    }",
        "    public String getTitle() {",
        "        return title;",
        "    }",
        "    public LocalDateTime getDateTime() {",
        "        return dateTime;",
        "    }",
        "",
        "    public void setEventID(int eventID) {",
        "        this.eventID = eventID;",
        "    }",
        "    public void setTitle(String title) {",
        "        this.title = title;",
        "    }",
        "    public void setDateTime(LocalDateTime dateTime) {",
        "        this.dateTime = dateTime;",
        "    }",
        " ",
        "       ",
        "}",
        "class Example8A {",
        "    private EventData eventData;",
        "    private  boolean isGlobalEvent;",
        "    void processEventData() {",
        "        System.out.println(\"Processing event data: EventID-\" + eventData.getEventID() + \", Title-\" + eventData.getTitle() + \", Date and Time-\" + eventData.getDateTime()+\", Is Global Event-\"+eventData.getIsGlobalEvent());",
        "    }   ",
        "    Example8A(int eventID, String title, LocalDateTime dateTime,boolean isGlobalEvent){",
        "        this.eventData = new EventData(eventID, title, dateTime);",
        "        this.isGlobalEvent = isGlobalEvent;",
        "    }",
        "}",
        "class Example8B {",
        "    private EventData eventData;",
        "    private Object params;",
        "    void attendEvent() {",
        "        System.out.println(\"Attending event: EventID-\" + eventData.getEventID() + \", Title-\" + eventData.getTitle() + \", Date and Time-\" + eventData.getDateTime() + \", Params-\" + params.toString());",
        "    }",
        "    Example8B(int eventID, String title, LocalDateTime dateTime){",
        "        this.eventData = new EventData(eventID, title, dateTime);",
        "        this.params = params;",
        "    }",
        "}",
        "//## example 8 end ##################################",
        "",
        "//## example 9 ##################################",
        "class Example9A {",
        "    void processPaymentData(int paymentID, int orderID, double paymentAmount) {",
        "        System.out.println(\"Processing payment data: PaymentID-\" + paymentID + \", OrderID-\" + orderID + \", Amount-\" + paymentAmount);",
        "    }",
        "}",
        "",
        "// Example9B.java",
        "class Example9B extends Example9A {",
        "    @Override",
        "    void processPaymentData(int paymentID, int orderID, double paymentAmount) {",
        "        // This method constitutes not a data clump even if signature is copied because the method is overridden and therefore must have the same paremeters",
        "        System.out.println(\"Confirming payment: PaymentID-\" + paymentID + \", OrderID-\" + orderID + \", Amount-\" + paymentAmount);",
        "    }",
        "}",
        "//## example 9 end ##################################",
        "",
        "",
        "## END examples",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-app/tests/org/argouml/profile/internal/ocl/TestDefaultOclEvaluator.java",
        "package org.argouml.profile.internal.ocl;",
        "",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "",
        "import junit.framework.TestCase;",
        "",
        "import org.argouml.model.InitializeModel;",
        "import org.argouml.model.Model;",
        "",
        "/**",
        " * Tests for the EvaluateExpression class.",
        " * ",
        " * @author maurelio1234",
        " */",
        "public class TestDefaultOclEvaluator extends TestCase {",
        "    ",
        "    private class DummyModelInterpreter implements ModelInterpreter {",
        "",
        "        public Object invokeFeature(FeatureInvocationContext fic) {",
        "            return null;",
        "        }",
        "",
        "        public Object getBuiltInSymbol(String sym) {",
        "            return null;",
        "        }",
        "    }",
        "",
        "    // ... rest of the class remains unchanged ...",
        "}",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-app/tests/org/argouml/profile/internal/ocl/TestOclInterpreter.java",
        "package org.argouml.profile.internal.ocl;",
        "",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "",
        "import junit.framework.TestCase;",
        "",
        "import org.argouml.model.InitializeModel;",
        "import org.argouml.model.Model;",
        "",
        "/**",
        " * Tests for the OclInterpreter class.",
        " * ",
        " * @author maurelio1234",
        " */",
        "public class TestOclInterpreter extends TestCase {",
        "",
        "    private class DefaultModelInterpreter implements ModelInterpreter {",
        "        public Object invokeFeature(FeatureInvocationContext fic) {",
        "            return null;",
        "        }",
        "",
        "        public Object getBuiltInSymbol(String sym) {",
        "            return null;",
        "        }",
        "    }",
        "",
        "    // ... rest of the class remains unchanged ...",
        "}",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigCompartment.java",
        "/* $Id$",
        " *****************************************************************************",
        " * Copyright (c) 2011 Contributors - see below",
        " * All rights reserved. This program and the accompanying materials",
        " * are made available under the terms of the Eclipse Public License v1.0",
        " * which accompanies this distribution, and is available at",
        " * http://www.eclipse.org/legal/epl-v10.html",
        " *",
        " * Contributors:",
        " *    Bob Tarling",
        " *****************************************************************************",
        " */",
        "",
        "package org.argouml.activity2.diagram;",
        "",
        "import java.awt.Dimension;",
        "import java.awt.Rectangle;",
        "import java.util.Arrays;",
        "import java.util.List;",
        "",
        "import org.argouml.model.AddAssociationEvent;",
        "import org.argouml.model.AssociationChangeListener;",
        "import org.argouml.model.InvalidElementException;",
        "import org.argouml.model.Model;",
        "import org.argouml.model.RemoveAssociationEvent;",
        "import org.argouml.notation2.NotationType;",
        "import org.argouml.uml.diagram.DiagramSettings;",
        "import org.tigris.gef.presentation.Fig;",
        "",
        "/**",
        " * The UML defines a Name Compartment, and a List Compartment. ",
        " * This class implements the latter.<p>",
        " * ",
        " * A List Compartment is a boxed compartment,",
        " * containing vertically stacked figs,",
        " * which is common to e.g. a stereotypes compartment, operations",
        " * compartment and an attributes compartment.<p>",
        " * ",
        " * @author Bob Tarling",
        " */",
        "class FigCompartment extends FigComposite implements AssociationChangeListener {",
        "",
        "    public FigCompartment(",
        "            final Object owner,",
        "            final Rectangle bounds,",
        "            final DiagramSettings settings,",
        "            final Object metaType,",
        "            final String propertyName) {",
        "        this(owner, bounds, settings,",
        "                Arrays.asList(new Object[] {metaType}),",
        "                propertyName);",
        "    }",
        "    ",
        "    /**",
        "     * @param owner the model element that owns the compartment",
        "     * @param bounds the initial bounds of the compartment",
        "     * @param settings the diagram settings",
        "     * @param metaType the different metatype that can be displayed in the compartment",
        "     */",
        "    public FigCompartment(",
        "            final Object owner,",
        "            final Rectangle bounds,",
        "            final DiagramSettings settings,",
        "            final List<Object> metaTypes,",
        "            final String propertyName) {",
        "        ",
        "        super(owner, settings);",
        "        ",
        "        Model.getFacade().getModelElementContents(owner);",
        "        for (Object element",
        "                : Model.getFacade().getModelElementContents(owner)) {",
        "            if (metaTypes.contains(element.getClass())) {",
        "                try {",
        "                    int y = bounds.y + getTopMargin();",
        "                    int x = bounds.x + getLeftMargin();",
        "                    Rectangle childBounds = new Rectangle(x, y, 0, 0);",
        "                    FigNotation fn = new FigNotation(",
        "                            element, childBounds, settings, NotationType.NAME);",
        "                    addFig(fn);",
        "                    y += fn.getHeight();",
        "                } catch (InvalidElementException e) {",
        "                }",
        "            }",
        "        }",
        "        ",
        "        Model.getPump().addModelEventListener(",
        "                (AssociationChangeListener) this, owner, propertyName);",
        "        // TODO: Remove listeners for add/remove events",
        "    }",
        "    ",
        "    public FigCompartment(",
        "            final Object owner,",
        "            final DiagramSettings settings) {",
        "        super(owner, settings);",
        "    }",
        "    ",
        "    ",
        "    @Override",
        "    public Dimension getMinimumSize() {",
        "        int minWidth = 0;",
        "        int minHeight = 0;",
        "        for (Object f : getFigs()) {",
        "            Fig fig = (Fig) f;",
        "            minWidth = Math.max(fig.getMinimumSize().width, minWidth);",
        "            minHeight += fig.getMinimumSize().height;",
        "        }",
        "",
        "        minHeight += getTopMargin() + getBottomMargin();",
        "        minWidth += getLeftMargin() + getRightMargin();",
        "        ",
        "        return new Dimension(minWidth, minHeight);",
        "    }",
        "",
        "    @Override",
        "    protected void positionChildren() {",
        "",
        "        int w = _w - (getLeftMargin() + getRightMargin());",
        "        int x = _x + getLeftMargin();",
        "        int y = _y + getTopMargin();",
        "        ",
        "        for (Object f : getFigs()) {",
        "            Fig fig = (Fig) f;",
        "            fig.setBounds(x, y, w, fig.getMinimumSize().height);",
        "            y += fig.getHeight();",
        "        }",
        "    }",
        "",
        "    public void elementAdded(AddAssociationEvent evt) {",
        "        Object element = evt.getNewValue();",
        "        Rectangle childBounds = new Rectangle(getX() + getHeight(), getY(), 0, 0);",
        "        FigNotation fn = new FigNotation(",
        "                element, childBounds, getDiagramSettings(), NotationType.NAME);",
        "        addFig(fn);",
        "        calcBounds();",
        "    }",
        "",
        "    public void elementRemoved(RemoveAssociationEvent evt) {",
        "        Object element = evt.getOldValue();",
        "        for (Object f : getFigs()) {",
        "            Fig fig = (Fig) f;",
        "            if (fig.getOwner() == element) {",
        "                removeFig(fig);",
        "                calcBounds();",
        "                return;",
        "            }",
        "        }",
        "    }",
        "}",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-core-model/src/org/argouml/model/AbstractModelEventPump.java",
        "package org.argouml.model;",
        "",
        "import java.beans.PropertyChangeListener;",
        "",
        "",
        "/**",
        " * Abstract class that implements the convenience methods of the",
        " * {@link ModelEventPump} interface.",
        " *",
        " * @author Linus Tolke",
        " */",
        "public abstract class AbstractModelEventPump implements ModelEventPump {",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String[])",
        "     */",
        "    public abstract void addModelEventListener(PropertyChangeListener listener,",
        "            \t\t\t\t\t       Object modelelement,",
        "            \t\t\t\t\t       String[] eventNames);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String)",
        "     */",
        "    public void addModelEventListener(PropertyChangeListener listener,",
        "            Object modelelement, String eventName) {",
        "        addModelEventListener(listener,",
        "                \t\t      modelelement,",
        "                \t\t      new String[] {eventName });",
        "    }",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String)",
        "     */",
        "    public void addModelEventListener(UmlChangeListener listener,",
        "            Object modelelement, String eventName) {",
        "        addModelEventListener(listener,",
        "                              modelelement,",
        "                              new String[] {eventName });",
        "    }",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object)",
        "     */",
        "    public abstract void addModelEventListener(PropertyChangeListener listener,",
        "            \t\t\t\t\t       Object modelelement);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String[])",
        "     */",
        "    public abstract void removeModelEventListener(",
        "            PropertyChangeListener listener,",
        "            Object modelelement, String[] eventNames);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String)",
        "     */",
        "    public void removeModelEventListener(PropertyChangeListener listener,",
        "            \t\t\t\t Object modelelement,",
        "            \t\t\t\t String eventName) {",
        "        removeModelEventListener(listener,",
        "                \t\t\t modelelement,",
        "                \t\t\t new String[] {eventName, });",
        "    }",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeModelEventListener(",
        "     *          java.beans.PropertyChangeListener, java.lang.Object,",
        "     *          java.lang.String)",
        "     */",
        "    public void removeModelEventListener(UmlChangeListener listener,",
        "                                         Object modelelement,",
        "                                         String eventName) {",
        "        removeModelEventListener(listener,",
        "                                 modelelement,",
        "                                 new String[] {eventName, });",
        "    }",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeModelEventListener(",
        "     * \t\tjava.beans.PropertyChangeListener, java.lang.Object)",
        "     */",
        "    public abstract void removeModelEventListener(",
        "            PropertyChangeListener listener,",
        "            Object modelelement);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(",
        "     * \t\tjava.beans.PropertyChangeListener, java.lang.Object,",
        "     * \t\tjava.lang.String[])",
        "     */",
        "    public abstract void addClassModelEventListener(",
        "            PropertyChangeListener listener,",
        "            Object modelClass,",
        "            String[] eventNames);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(",
        "     * \t\tjava.beans.PropertyChangeListener, java.lang.Object,",
        "     * \t\tjava.lang.String)",
        "     */",
        "    public void addClassModelEventListener(PropertyChangeListener listener,",
        "            \t\t\t\t   Object modelClass,",
        "            \t\t\t\t   String eventName) {",
        "        addClassModelEventListener(listener,",
        "                \t\t   modelClass,",
        "                \t\t   new String[] {eventName, });",
        "    }",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(",
        "     * \t\tjava.beans.PropertyChangeListener, java.lang.Object,",
        "     * \t\tjava.lang.String[])",
        "     */",
        "    public abstract void removeClassModelEventListener(",
        "            PropertyChangeListener listener,",
        "            Object modelClass,",
        "            String[] eventNames);",
        "",
        "    /*",
        "     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(",
        "     * \t\tjava.beans.PropertyChangeListener, java.lang.Object,",
        "     * \t\tjava.lang.String)",
        "     */",
        "    public void removeClassModelEventListener(PropertyChangeListener listener,",
        "            \t\t\t\t      Object modelClass,",
        "            \t\t\t\t      String eventName) {",
        "        removeClassModelEventListener(listener,",
        "                \t\t      modelClass,",
        "                \t\t      new String[] {eventName, });",
        "",
        "    }",
        "",
        "}"
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-core-model/src/org/argouml/model/ModelEventPump.java",
        "package org.argouml.model;",
        "",
        "import java.beans.PropertyChangeListener;",
        "",
        "/**",
        " * This is the interface for registering interest in events sent from",
        " * the model component.<p>",
        " *",
        " * Neither the registration or unregistration, nor the events themselves",
        " * contain any reference to the model implementation.  Instead they",
        " * use the {@link java.beans.PropertyChangeListener},",
        " * {@link java.beans.PropertyChangeEvent} to",
        " * deliver events.<p>",
        " *",
        " * The reference to the listener is a WeakReference so you don't need to",
        " * call removeWHATEVERListener, you can just forget about your listener",
        " * and it is eventually finalized and removed. This also means that you",
        " * will have to keep a reference to your listener while it is active.",
        " * Since the garbage collecting mechanism is not really deterministic",
        " * a forgotten about listener might still receive events. Unless it can",
        " * handle them in a harmless way, this approach should not be used.",
        " *",
        " * TODO: (Is this still true or does it refer to the NSUML",
        " * implementation? - tfm 20051109)",
        " * (This is part of the contract that is established between the Model",
        " * subsystem and its users. If that is not fulfilled by the current",
        " * implementation, then the current implementation is incorrect.",
        " * Linus 20060411).<p>",
        " *",
        " * TODO: What event names?",
        " * The event names generated are {@link String}s and their values and",
        " * meanings are not really well documented. In general they are the",
        " * name of an an association end or attribute in the UML metamodel.<p>",
        " *",
        " * Here are some highlights:<ul>",
        " * <li>\"remove\" - event sent when the element is removed.",
        " * </ul>",
        " *",
        " * @author Linus Tolke",
        " */",
        "public interface ModelEventPump {",
        "    // Operations that work on elements:",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have any of the names in eventNames.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyNames The array of property names the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(UmlChangeListener listener,",
        "                               Object modelelement,",
        "                               String[] propertyNames);",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have the name in eventName.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyName The property name the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(UmlChangeListener listener,",
        "                               Object modelelement,",
        "                               String propertyName);",
        "",
        "    // Operations that work on classes of objects:",
        "",
        "    /**",
        "     * Adds a listener that listens to all events that are named eventNames and",
        "     * that occur to instances of the given modelClass.",
        "     * <p>",
        "     * ",
        "     * @param listener",
        "     *            is the listener to add.",
        "     * @param modelClass",
        "     *            is the given model class",
        "     * @param propertyNames",
        "     *            The property names the listener wishes to receive events for.",
        "     *            If null or an empty array, all events will be returned.",
        "     * @throws IllegalArgumentException",
        "     *             if one of the arguments is null or if the modelClass is not a",
        "     *             valid metamodel class.",
        "     * @throws IllegalStateException",
        "     *             if the listener is already registred.",
        "     */",
        "    void addClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t\t    Object modelClass,",
        "\t\t\t\t\t    String[] propertyNames);",
        "",
        "    /**",
        "     * Adds a listener that listens to the event that is named eventName and",
        "     * that occur to instances of the given modelClass.  If you want to be ",
        "     * notified of changes on all properties, use ",
        "     * {@link #addClassModelEventListener(PropertyChangeListener, Object, String[])}",
        "     * with a null third argument.",
        "     * <p>",
        "     * ",
        "     * @param listener",
        "     *            is the listener to add.",
        "     * @param modelClass",
        "     *            is the given model class",
        "     * @param propertyName",
        "     *            The property name the listener wishes to receive events for.",
        "     * @throws IllegalArgumentException",
        "     *             if one of the arguments is null or if the modelClass is not a",
        "     *             valid metamodel class.",
        "     * @throws IllegalStateException",
        "     *             if the listener is already registered.",
        "     */",
        "    void addClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t\t    Object modelClass,",
        "\t\t\t\t\t    String propertyName);",
        "",
        "    /**",
        "     * Removes a listener that listens to all modelevents fired by instances of",
        "     * modelClass and that have the original name eventNames.",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelClass The class the listener does not want to listen to",
        "     * instances anymore",
        "     * @param propertyNames The property names the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t\t       Object modelClass,",
        "\t\t\t\t\t       String[] propertyNames);",
        "",
        "    /**",
        "     * Removes a listener that listens to all modelevents fired by instances of",
        "     * modelClass and that have the name eventName.",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelClass The class the listener does not want to listen to",
        "     * instances anymore.",
        "     * @param propertyName The property name the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t\t       Object modelClass,",
        "\t\t\t\t\t       String propertyName);",
        "",
        "    // Other operations:",
        "",
        "    /**",
        "     * Start the ModelEventPump firing events.",
        "     */",
        "    void startPumpingEvents();",
        "",
        "    /**",
        "     * Stop the ModelEventPump firing events.",
        "     */",
        "    void stopPumpingEvents();",
        "",
        "    /**",
        "     * Flush events from the ModelEventPump. Blocks until all events have been",
        "     * delivered.",
        "     * <p>",
        "     * <em>NOTE: </em> This may not be called from a ",
        "     * {@link PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)}",
        "     * method which has been invoked by the ModelEventPump.",
        "     */",
        "    void flushModelEvents();",
        "    ",
        "    /**",
        "     * Get debug info for the event pump. Information returned is implementation",
        "     * specific. List returned contains either Strings or Lists. Lists may be",
        "     * nested arbitrarily deeply forming a tree of information. If a node",
        "     * contains children, the first entry in the list is expected to be a String",
        "     * with subsequent entries representing children.",
        "     * ",
        "     * @return List of Strings or other Lists.",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public List getDebugInfo();",
        "}"
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      {
        "refactorings": {
          "src/argouml-app/tests/org/argouml/profile/internal/ocl/TestDefaultOclEvaluator.java": [
            {
              "lineRange": "13-15",
              "newContent": ""
            }
          ],
          "src/argouml-app/tests/org/argouml/profile/internal/ocl/TestOclInterpreter.java": [
            {
              "lineRange": "13-15",
              "newContent": ""
            }
          ],
          "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/FigCompartment.java": [
            {
              "lineRange": "35-35",
              "newContent": "        final CompartmentParams params,"
            },
            {
              "lineRange": "36-49",
              "newContent": "        this(owner, bounds, settings, params.getMetaTypes(), params.getPropertyName());"
            },
            {
              "lineRange": "54-60",
              "newContent": "    public FigCompartment(final Object owner, final Rectangle bounds, final DiagramSettings settings, CompartmentParams params) {"
            }
          ],
          "src/argouml-core-model/src/org/argouml/model/AbstractModelEventPump.java": [
            {
              "lineRange": "48-48",
              "newContent": "    public void addModelEventListener(UmlChangeListener listener, Object modelelement, String[] eventNames) {}"
            },
            {
              "lineRange": "60-60",
              "newContent": "    public void addClassModelEventListener(PropertyChangeListener listener, Object modelClass, String[] propertyNames) {}"
            },
            {
              "lineRange": "85-85",
              "newContent": "    public void removeClassModelEventListener(PropertyChangeListener listener, Object modelClass, String[] propertyNames) {}"
            }
          ],
          "src/argouml-core-model/src/org/argouml/model/ModelEventPump.java": [
            {
              "lineRange": "36-36",
              "newContent": "    void addModelEventListener(PropertyChangeListener listener, Object modelelement, String[] propertyNames);"
            },
            {
              "lineRange": "52-52",
              "newContent": "    void addClassModelEventListener(PropertyChangeListener listener, Object modelClass, String[] propertyNames);"
            },
            {
              "lineRange": "68-68",
              "newContent": "    void removeClassModelEventListener(PropertyChangeListener listener, Object modelClass, String[] propertyNames);"
            }
          ]
        },
        "extractedClasses": {
          "src/argouml-app/tests/org/argouml/profile/internal/ocl/ModelInterpreterParams.java": "package org.argouml.profile.internal.ocl;\n\npublic class ModelInterpreterParams {\n    private FeatureInvocationContext featureInvocationContext;\n    private String symbol;\n\n    public ModelInterpreterParams(FeatureInvocationContext fic, String sym) {\n        this.featureInvocationContext = fic;\n        this.symbol = sym;\n    }\n\n    public FeatureInvocationContext getFeatureInvocationContext() {\n        return featureInvocationContext;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n}",
          "src/argouml-core-diagrams-activity2/src/org/argouml/activity2/diagram/CompartmentParams.java": "package org.argouml.activity2.diagram;\n\nimport java.util.List;\n\npublic class CompartmentParams {\n    private List<Object> metaTypes;\n    private String propertyName;\n\n    public CompartmentParams(List<Object> metaTypes, String propertyName) {\n        this.metaTypes = metaTypes;\n        this.propertyName = propertyName;\n    }\n\n    public List<Object> getMetaTypes() {\n        return metaTypes;\n    }\n\n    public String getPropertyName() {\n        return propertyName;\n    }\n}"
        }
      }
    ],
    "messageType": "output"
  }
]