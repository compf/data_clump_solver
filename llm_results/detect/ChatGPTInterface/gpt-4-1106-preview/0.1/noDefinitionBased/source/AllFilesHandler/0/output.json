[
  {
    "messages": [
      [
        "",
        "I will provide you one or more Java code files.",
        "Find all data clumps in the respective files.",
        "",
        "",
        "Use the following JSON format for the output:",
        "## JSON",
        "{",
        "   \"data_clumps\":{",
        "        \"unique_key\":{",
        "            \"key\": \"a unique key that should be created. It must be same as the key 'unique_key' in the 'data_clumps' object\",",
        "            \"from_file_path\":\"The path of the file where one part of the data clump is found\",",
        "            \"from_class_or_interface_key\":\"The fully qualified name of the class or interface where one part of the data clump is found\",",
        "            \"from_class_or_interface_name\":\"The name of the class or interface where one part of the data clump is found\",",
        "            ",
        "            \"from_method_key\":\"The fully qualified name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",",
        "            \"from_method_name\":\"The name of the method where one part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",",
        "",
        "            \"to_file_path\":\"The path of the file where the  other part of the data clump is found\",",
        "            \"to_class_or_interface_key\":\"The fully qualified name of the class or interface where the  other part part of the data clump is found\",",
        "            \"to_class_or_interface_name\":\"The name of the class or interface where the  other  part of the data clump is found\",",
        "            ",
        "            \"to_method_key\":\"The fully qualified name of the method where the  other part part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",",
        "            \"to_method_name\":\"The name of the method where the  other  part of the data clump is found. It may be 'null' if the data clump on this part is not found in a method\",",
        "            \"data_clump_data\":{",
        "                // for each data clump variable",
        "                \"other_unique_key\":{",
        "                    \"key\":\"a unique key that should be created. It must be same as the key 'other_unique_key' in the 'data_clump_data' object\",",
        "                    \"name\": \"The name of the data clump variable that exists on the one part of the data clump\",",
        "                    \"type\": \"The type of the data clump variable that exists on the one part of the data clump\",",
        "                    \"displayedType\": \"The  type of the data clump variable, as it appears in the source code, that exists on the one part of the data clump\",",
        "                    ",
        "                    \"position\": {",
        "                        \"startLine\": \"The line number of the  data clump variable on the one part of the data clump.This must be relative to the file\",",
        "                        \"startColumn\": \"The column number of the data clump variable on the one part of the data clump\"",
        "                    },",
        "                    \"to_variable\":{",
        "                        \"key\":\"a unique key that should be created.\",",
        "                        \"name\": \"The name of the data clump variable that exists on the other part of the data clump\",",
        "                        \"type\": \"The type of the data clump variable, as it appears in the source code, that exists on the other part of the data clump\",",
        "                        \"position\": {",
        "                            \"startLine\": \"The line number of the  data clump variable on the other part of the data clump. This must be relative to the file\",",
        "                            \"startColumn\": \"The column number of the data clump variable on the other part of the data clump\",",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "        }",
        "   }",
        "}",
        "",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-app/tests/org/argouml/profile/internal/ocl/TestDefaultOclEvaluator.java",
        "/* $Id$",
        " *****************************************************************************",
        " * Copyright (c) 2009 Contributors - see below",
        " * All rights reserved. This program and the accompanying materials",
        " * are made available under the terms of the Eclipse Public License v1.0",
        " * which accompanies this distribution, and is available at",
        " * http://www.eclipse.org/legal/epl-v10.html",
        " *",
        " * Contributors:",
        " *    maurelio1234",
        " *****************************************************************************",
        " *",
        " * Some portions of this file was previously release using the BSD License:",
        " */",
        "",
        "// Copyright (c) 2008 The Regents of the University of California. All",
        "// Rights Reserved. Permission to use, copy, modify, and distribute this",
        "// software and its documentation without fee, and without a written",
        "// agreement is hereby granted, provided that the above copyright notice",
        "// and this paragraph appear in all copies. This software program and",
        "// documentation are copyrighted by The Regents of the University of",
        "// California. The software program and documentation are supplied \"AS",
        "// IS\", without any accompanying services from The Regents. The Regents",
        "// does not warrant that the operation of the program will be",
        "// uninterrupted or error-free. The end-user understands that the program",
        "// was developed for research purposes and is advised not to rely",
        "// exclusively on the program for any reason. IN NO EVENT SHALL THE",
        "// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,",
        "// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,",
        "// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF",
        "// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF",
        "// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY",
        "// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
        "// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE",
        "// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF",
        "// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,",
        "// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.",
        "",
        "package org.argouml.profile.internal.ocl;",
        "",
        "import java.util.Collection;",
        "import java.util.HashMap;",
        "import java.util.HashSet;",
        "import java.util.List;",
        "import java.util.Map;",
        "import java.util.Set;",
        "",
        "import junit.framework.TestCase;",
        "",
        "import org.argouml.model.InitializeModel;",
        "import org.argouml.model.Model;",
        "import org.argouml.profile.internal.ocl.uml14.Bag;",
        "import org.argouml.profile.internal.ocl.uml14.Uml14ModelInterpreter;",
        "",
        "/**",
        " * Tests for the EvaluateExpression class.",
        " * ",
        " * @author maurelio1234",
        " */",
        "public class TestDefaultOclEvaluator extends TestCase {",
        "    ",
        "    @SuppressWarnings(\"unused\")",
        "    private class DummyModelInterpreter implements ModelInterpreter {",
        "",
        "        /**",
        "         * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)",
        "         */",
        "        public Object getBuiltInSymbol(String sym) {",
        "            return null;",
        "        }",
        "",
        "        public Object invokeFeature(HashMap<String, Object> vt, Object subject,",
        "                 String feature, String type, Object[] parameters) {",
        "            return null;",
        "        }",
        "",
        "        public Object invokeFeature(Map<String, Object> vt, Object subject,",
        "                String feature, String type, Object[] parameters) {",
        "            return null;",
        "        }",
        "        ",
        "    }",
        "    ",
        "    @Override",
        "    protected void setUp() throws Exception {",
        "        super.setUp();",
        "        InitializeModel.initializeDefault();",
        "    }",
        "",
        "    /**",
        "     * Test the basic values and types (section 8.4)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testBasicValuesAndTypes() throws Exception {",
        "        assertEquals(DefaultOclEvaluator.getInstance()",
        "                .evaluate(null, null, \"true\"), true);",
        "        assertEquals(DefaultOclEvaluator.getInstance()",
        "                .evaluate(null, null, \"false\"), false);",
        "        assertEquals(DefaultOclEvaluator.getInstance()",
        "                .evaluate(null, null, \"5\"), 5);        ",
        "        assertEquals(DefaultOclEvaluator.getInstance()",
        "                .evaluate(null, null, \"-2\"), -2);",
        "",
        "        // TODO real numbers not yet supported",
        "        //assertEquals(DefaultOclEvaluator.getInstance()",
        "                //.evaluate(null, null, \"1.5\"), 1.5);",
        "        ",
        "        // TODO write test for enumerations, although they are not yet supported",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(null, null,",
        "                \"'to be or not to be'\"), \"to be or not to be\");",
        "    }",
        "    ",
        "    /**",
        "     * Test the let expressions (section 8.4.3)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testLetExpressions() throws Exception {",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(",
        "                new HashMap<String, Object>(), new DummyModelInterpreter(),",
        "                \"let x : Integer = 12 in x * 5\"), 60);",
        "    }",
        "    ",
        "    // TODO do tests for type conformance (8.4.4),",
        "    // even though it is not yet supported",
        "    ",
        "    // TODO do tests for infix operators (8.4.7),",
        "    // even though it is not yet supported",
        "",
        "    /**",
        "     * Test the undefined values (section 8.4.10)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testUndefined() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new DummyModelInterpreter();",
        "        ",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"false and x\"), false);",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"x and false\"), false);",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"true or x\"), true);",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"x or true\"), true);        ",
        "    }",
        "    ",
        "    /**",
        "     * Test collections operations in objects (section 8.5.4.2)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testObjectAsCollection() throws Exception {",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(null,",
        "                new Uml14ModelInterpreter(), \"2->size()\"), 1);",
        "    }",
        "",
        "    // TODO do tests for navigation to association classes (8.5.5),",
        "    // even though it is not yet supported",
        "",
        "    /**",
        "     * Test predefined properties on all objects (section 8.5.10)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testPredefinedPropertiesAllObjects() throws Exception {",
        "        Object iface = Model.getCoreFactory().buildInterface();",
        "        ",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        vt.put(\"x\", iface);",
        "",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, \"x\"),",
        "                iface);",
        "        ",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "            \"x.oclIsTypeOf(Interface)\"), true);",
        "        ",
        "//        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "//                \"x.oclIsKindOf(Classifier)\"), true);               ",
        "    }",
        "",
        "    // TODO do tests for allInstances (8.5.11),",
        "    // even though it is not yet supported",
        "",
        "    // TODO do tests for ranges in collection definition (8.5.12),",
        "    // even though it is not yet supported",
        "",
        "    /**",
        "     * Test set constructor (section 8.5.12)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testSetConstructors() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        Object obj = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,5,88}\");",
        "",
        "        assertTrue(obj instanceof Set);",
        "        ",
        "        Set<Object> oset = (Set<Object>) obj;",
        "        assertTrue(oset.size() == 4);",
        "        assertTrue(oset.contains(1));",
        "        assertTrue(oset.contains(2));",
        "        assertTrue(oset.contains(5));        ",
        "        assertTrue(oset.contains(88));",
        "",
        "    }",
        "    ",
        "    /**",
        "     * Test bag constructor (section 8.5.12)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testBagConstructors() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        Object obj = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Bag{1,3,4,3,5}\");",
        "",
        "        assertTrue(obj instanceof Bag);",
        "        ",
        "        Bag<Object> obag = (Bag<Object>) obj;",
        "        assertTrue(obag.size() == 5);",
        "        assertTrue(obag.contains(1));",
        "        assertTrue(obag.contains(3));",
        "        assertTrue(obag.contains(4));        ",
        "        assertTrue(obag.contains(5));",
        "        assertTrue(obag.count(1) == 1);",
        "        assertTrue(obag.count(3) == 2);",
        "    }",
        "",
        "    /**",
        "     * Test sequence constructor (section 8.5.12)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testSequenceConstructors() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        Object obj = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Sequence{'ape', 'nut'}\");",
        "",
        "        assertTrue(obj instanceof List);",
        "        ",
        "        List<Object> oseq = (List<Object>) obj;",
        "        assertTrue(oseq.size() == 2);",
        "        assertTrue(oseq.contains(\"ape\"));",
        "        assertTrue(oseq.contains(\"nut\"));",
        "        assertTrue(oseq.get(0).equals(\"ape\"));",
        "        assertTrue(oseq.get(1).equals(\"nut\"));",
        "    }",
        "",
        "    // TODO do tests for collections of collections (8.5.13),",
        "    // even though it is not yet supported ",
        "    // question: should this happen with all collections or only ",
        "    // the constructed ones?",
        "",
        "    /**",
        "     * Test select operation (section 8.6.1)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testSelectOperation() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        Object obj = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->select(x|x>3)\");",
        "",
        "        assertTrue(obj instanceof Collection);",
        "        ",
        "        Collection<Object> ocol = (Collection<Object>) obj;",
        "        assertTrue(ocol.size() == 2);",
        "        assertTrue(ocol.contains(4));",
        "        assertTrue(ocol.contains(5));",
        "    }",
        "  ",
        "    /**",
        "     * Test reject operation (section 8.6.1)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testRejectOperation() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        Object obj = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->reject(x|x>3)\");",
        "",
        "        assertTrue(obj instanceof Collection);",
        "        ",
        "        Collection<Object> ocol = (Collection<Object>) obj;",
        "        assertTrue(ocol.size() == 3);",
        "        assertTrue(ocol.contains(1));",
        "        assertTrue(ocol.contains(2));",
        "        assertTrue(ocol.contains(3));",
        "    }",
        "",
        "    /**",
        "     * Test collect operation (section 8.6.2 & 8.6.2.1)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testCollectOperation() throws Exception {        ",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "",
        "        Set<Object> classes = new HashSet<Object>();",
        "        classes.add(Model.getCoreFactory().buildClass(\"class1\"));",
        "        classes.add(Model.getCoreFactory().buildClass(\"class2\"));",
        "        classes.add(Model.getCoreFactory().buildClass(\"class2\"));",
        "        ",
        "        vt.put(\"x\", classes);",
        "        ",
        "        Object obj1 = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"x.name\");",
        "        assertTrue(obj1 instanceof Collection);        ",
        "        assertTrue(((Collection<Object>) obj1).size() == 3);",
        "",
        "        Object obj2 = DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"x->collect(x|x.name)\");",
        "        assertTrue(obj2 instanceof Collection);        ",
        "        assertTrue(((Collection<Object>) obj2).size() == 3);",
        "        assertEquals(obj1, obj2);",
        "    }",
        "",
        "    /**",
        "     * Test forAll operation (section 8.6.3)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testForAllOperation() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->forAll(x|x>0)\"), true);",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->forAll(x|x<4)\"), false);",
        "        ",
        "    }",
        "",
        "    /**",
        "     * Test exists operation (section 8.6.4)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public void testExistsOperation() throws Exception {",
        "        HashMap<String, Object> vt = new HashMap<String, Object>();",
        "        ModelInterpreter mi = new Uml14ModelInterpreter();",
        "        ",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->exists(x|x>3)\"), true);",
        "        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi,",
        "                \"Set{1,2,3,4,5}->exists(x|x>40)\"), false);",
        "        ",
        "    }",
        "        ",
        "}",
        "",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-app/tests/org/argouml/profile/internal/ocl/TestOclInterpreter.java",
        "/* $Id$",
        " *****************************************************************************",
        " * Copyright (c) 2009 Contributors - see below",
        " * All rights reserved. This program and the accompanying materials",
        " * are made available under the terms of the Eclipse Public License v1.0",
        " * which accompanies this distribution, and is available at",
        " * http://www.eclipse.org/legal/epl-v10.html",
        " *",
        " * Contributors:",
        " *    maurelio1234",
        " *****************************************************************************",
        " *",
        " * Some portions of this file was previously release using the BSD License:",
        " */",
        "",
        "// Copyright (c) 2007 The Regents of the University of California. All",
        "// Rights Reserved. Permission to use, copy, modify, and distribute this",
        "// software and its documentation without fee, and without a written",
        "// agreement is hereby granted, provided that the above copyright notice",
        "// and this paragraph appear in all copies. This software program and",
        "// documentation are copyrighted by The Regents of the University of",
        "// California. The software program and documentation are supplied \"AS",
        "// IS\", without any accompanying services from The Regents. The Regents",
        "// does not warrant that the operation of the program will be",
        "// uninterrupted or error-free. The end-user understands that the program",
        "// was developed for research purposes and is advised not to rely",
        "// exclusively on the program for any reason. IN NO EVENT SHALL THE",
        "// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,",
        "// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,",
        "// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF",
        "// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF",
        "// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY",
        "// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
        "// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE",
        "// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF",
        "// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,",
        "// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.",
        "",
        "package org.argouml.profile.internal.ocl;",
        "",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "",
        "import junit.framework.TestCase;",
        "",
        "import org.argouml.model.InitializeModel;",
        "import org.argouml.model.Model;",
        "",
        "/**",
        " * Tests for the OclInterpreter class.",
        " * ",
        " * @author maurelio1234",
        " */",
        "public class TestOclInterpreter extends TestCase {",
        "",
        "    @SuppressWarnings(\"unused\")",
        "    private class DefaultModelInterpreter implements ModelInterpreter {",
        "        public Object invokeFeature(HashMap<String, Object> vt, Object subject,",
        "                String feature, String type, Object[] parameters) {",
        "            return null;",
        "        }",
        "",
        "        public Object getBuiltInSymbol(String sym) {",
        "            return null;",
        "        }",
        "",
        "        public Object invokeFeature(Map<String, Object> vt, Object subject,",
        "                String feature, String type, Object[] parameters) {",
        "            return null;",
        "        }",
        "    }",
        "",
        "    @Override",
        "    protected void setUp() throws Exception {",
        "        super.setUp();",
        "        InitializeModel.initializeDefault();",
        "    }",
        "",
        "    /**",
        "     * Test <code>applicable</code> operation",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testApplicable() throws Exception {",
        "        Object obj1 = Model.getUseCasesFactory().createActor();",
        "        Object obj2 = Model.getActivityGraphsFactory().createPartition();",
        "",
        "        String ocl = \"context Actor inv: 2 > 0\";",
        "",
        "        OclInterpreter interpreter = new OclInterpreter(ocl,",
        "                new DefaultModelInterpreter());",
        "",
        "        assertTrue(interpreter.applicable(obj1));",
        "        assertFalse(interpreter.applicable(obj2));",
        "    }",
        "",
        "    /**",
        "     * Test <code>getTriggers</code> operation",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testGetTriggers() throws Exception {",
        "        String ocl = \"context Actor inv: 2 > 0\";",
        "",
        "        OclInterpreter interpreter = new OclInterpreter(ocl,",
        "                new DefaultModelInterpreter());",
        "",
        "        assertTrue(interpreter.getTriggers().contains(\"actor\"));",
        "    }",
        "",
        "    /**",
        "     * Test <code>check</code> operation (general)",
        "     * ",
        "     * @throws Exception if something goes wrong",
        "     */",
        "    public void testCheckGeneral() throws Exception {",
        "        Object obj = Model.getUseCasesFactory().createActor();",
        "",
        "        String ocl1 = \"context Actor inv: 2 > 0\";",
        "        String ocl2 = \"context Actor inv: 2 < 0\";",
        "",
        "        OclInterpreter interpreter1 = new OclInterpreter(ocl1,",
        "                new DefaultModelInterpreter());",
        "        OclInterpreter interpreter2 = new OclInterpreter(ocl2,",
        "                new DefaultModelInterpreter());",
        "",
        "        assertTrue(interpreter1.check(obj));",
        "        assertFalse(interpreter2.check(obj));",
        "    }",
        "",
        "}",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      [
        "//src/argouml-core-model/src/org/argouml/model/ModelEventPump.java",
        "/* $Id$",
        " *******************************************************************************",
        " * Copyright (c) 2009 Contributors - see below",
        " * All rights reserved. This program and the accompanying materials",
        " * are made available under the terms of the Eclipse Public License v1.0",
        " * which accompanies this distribution, and is available at",
        " * http://www.eclipse.org/legal/epl-v10.html",
        " *",
        " * Contributors:",
        " *    tfmorris",
        " *******************************************************************************",
        " *",
        " * Some portions of this file was previously release using the BSD License:",
        " */",
        "",
        "// Copyright (c) 2004-2007 The Regents of the University of California. All",
        "// Rights Reserved. Permission to use, copy, modify, and distribute this",
        "// software and its documentation without fee, and without a written",
        "// agreement is hereby granted, provided that the above copyright notice",
        "// and this paragraph appear in all copies.  This software program and",
        "// documentation are copyrighted by The Regents of the University of",
        "// California. The software program and documentation are supplied \"AS",
        "// IS\", without any accompanying services from The Regents. The Regents",
        "// does not warrant that the operation of the program will be",
        "// uninterrupted or error-free. The end-user understands that the program",
        "// was developed for research purposes and is advised not to rely",
        "// exclusively on the program for any reason.  IN NO EVENT SHALL THE",
        "// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,",
        "// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,",
        "// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF",
        "// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF",
        "// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY",
        "// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
        "// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE",
        "// PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND THE UNIVERSITY OF",
        "// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,",
        "// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.",
        "",
        "package org.argouml.model;",
        "",
        "import java.beans.PropertyChangeListener;",
        "import java.util.List;",
        "",
        "",
        "/**",
        " * This is the interface for registering interest in events sent from",
        " * the model component.<p>",
        " *",
        " * Neither the registration or unregistration, nor the events themselves",
        " * contain any reference to the model implementation.  Instead they",
        " * use the {@link java.beans.PropertyChangeListener},",
        " * {@link java.beans.PropertyChangeEvent} to",
        " * deliver events.<p>",
        " *",
        " * The reference to the listener is a WeakReference so you don't need to",
        " * call removeWHATEVERListener, you can just forget about your listener",
        " * and it is eventually finalized and removed. This also means that you",
        " * will have to keep a reference to your listener while it is active.",
        " * Since the garbage collecting mechanism is not really deterministic",
        " * a forgotten about listener might still receive events. Unless it can",
        " * handle them in a harmless way, this approach should not be used.",
        " *",
        " * TODO: (Is this still true or does it refer to the NSUML",
        " * implementation? - tfm 20051109)",
        " * (This is part of the contract that is established between the Model",
        " * subsystem and its users. If that is not fulfilled by the current",
        " * implementation, then the current implementation is incorrect.",
        " * Linus 20060411).<p>",
        " *",
        " * TODO: What event names?",
        " * The event names generated are {@link String}s and their values and",
        " * meanings are not really well documented. In general they are the",
        " * name of an an association end or attribute in the UML metamodel.<p>",
        " *",
        " * Here are some highlights:<ul>",
        " * <li>\"remove\" - event sent when the element is removed.",
        " * </ul>",
        " *",
        " * @author Linus Tolke",
        " */",
        "public interface ModelEventPump {",
        "    // Operations that work on elements:",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have any of the names in eventNames.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyNames The array of property names the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(UmlChangeListener listener,",
        "                               Object modelelement,",
        "                               String[] propertyNames);",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have the name in eventName.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyName The property name the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(UmlChangeListener listener,",
        "                               Object modelelement,",
        "                               String propertyName);",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have any of the names in eventNames.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyNames The array of property names the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(PropertyChangeListener listener,",
        "            \t\t       Object modelelement,",
        "\t\t\t       String[] propertyNames);",
        "",
        "    /**",
        "     * Adds a listener to modelevents that are fired by some given modelelement",
        "     * and that have the name in eventName.<p>",
        "     *",
        "     * @param listener The listener to add",
        "     * @param modelelement The modelelement the listener should be added too",
        "     * @param propertyName The property name the listener wishes to",
        "     * receive events for",
        "     */",
        "    void addModelEventListener(PropertyChangeListener listener,",
        "\t\t\t       Object modelelement,",
        "\t\t\t       String propertyName);",
        "",
        "    /**",
        "     * Adds a listener to all events fired by some modelelement.",
        "     *",
        "     * @param listener is the listener to add",
        "     * @param modelelement is the model element",
        "     */",
        "    void addModelEventListener(PropertyChangeListener listener,",
        "            \t\t       Object modelelement);",
        "",
        "    /**",
        "     * Removes a listener that listens to modelevents with name",
        "     * eventNames that are fired by the given modelelement.<p>",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelelement The modelelement that fires the events the",
        "     * listener is listening to.",
        "     * @param propertyNames The property names the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeModelEventListener(UmlChangeListener listener,",
        "                                  Object modelelement,",
        "                                  String[] propertyNames);",
        "",
        "    /**",
        "     * Removes a listener that listens to modelevents with name",
        "     * eventName that are fired by the given modelelement.<p>",
        "     *",
        "     * @param listener The listener to remove.",
        "     * @param modelelement The modelelement that fires the events the",
        "     * listener is listening to.",
        "     * @param propertyName The property name the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeModelEventListener(UmlChangeListener listener,",
        "                                  Object modelelement,",
        "                                  String propertyName);",
        "",
        "    /**",
        "     * Removes a listener that listens to modelevents with name",
        "     * eventNames that are fired by the given modelelement.<p>",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelelement The modelelement that fires the events the",
        "     * listener is listening to.",
        "     * @param propertyNames The property names the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t  Object modelelement,",
        "\t\t\t\t  String[] propertyNames);",
        "",
        "    /**",
        "     * Removes a listener that listens to modelevents with name",
        "     * eventName that are fired by the given modelelement.<p>",
        "     *",
        "     * @param listener The listener to remove.",
        "     * @param modelelement The modelelement that fires the events the",
        "     * listener is listening to.",
        "     * @param propertyName The property name the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t  Object modelelement,",
        "\t\t\t\t  String propertyName);",
        "",
        "    /**",
        "     * Removes a listener that listens to all events fired by the",
        "     * given modelelement.<p>",
        "     *",
        "     * @param listener is the listener",
        "     * @param modelelement is the model element",
        "     */",
        "    void removeModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t  Object modelelement);",
        "",
        "    // Operations that work on classes of objects:",
        "",
        "    /**",
        "     * Adds a listener that listens to all events that are named eventNames and",
        "     * that occur to instances of the given modelClass.",
        "     * <p>",
        "     * ",
        "     * @param listener",
        "     *            is the listener to add.",
        "     * @param modelClass",
        "     *            is the given model class",
        "     * @param propertyNames",
        "     *            The property names the listener wishes to receive events for.",
        "     *            If null or an empty array, all events will be returned.",
        "     * @throws IllegalArgumentException",
        "     *             if one of the arguments is null or if the modelClass is not a",
        "     *             valid metamodel class.",
        "     * @throws IllegalStateException",
        "     *             if the listener is already registred.",
        "     */",
        "    void addClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t    Object modelClass,",
        "\t\t\t\t    String[] propertyNames);",
        "",
        "    /**",
        "     * Adds a listener that listens to the event that is named eventName and",
        "     * that occur to instances of the given modelClass.  If you want to be ",
        "     * notified of changes on all properties, use ",
        "     * {@link #addClassModelEventListener(PropertyChangeListener, Object, String[])}",
        "     * with a null third argument.",
        "     * <p>",
        "     * ",
        "     * @param listener",
        "     *            is the listener to add.",
        "     * @param modelClass",
        "     *            is the given model class",
        "     * @param propertyName",
        "     *            The property name the listener wishes to receive events for.",
        "     * @throws IllegalArgumentException",
        "     *             if one of the arguments is null or if the modelClass is not a",
        "     *             valid metamodel class.",
        "     * @throws IllegalStateException",
        "     *             if the listener is already registered.",
        "     */",
        "    void addClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t    Object modelClass,",
        "\t\t\t\t    String propertyName);",
        "",
        "    /**",
        "     * Removes a listener that listens to all modelevents fired by instances of",
        "     * modelClass and that have the original name eventNames.",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelClass The class the listener does not want to listen to",
        "     * instances anymore",
        "     * @param propertyNames The property names the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t       Object modelClass,",
        "\t\t\t\t       String[] propertyNames);",
        "",
        "    /**",
        "     * Removes a listener that listens to all modelevents fired by instances of",
        "     * modelClass and that have the name eventName.",
        "     *",
        "     * @param listener The listener to remove",
        "     * @param modelClass The class the listener does not want to listen to",
        "     * instances anymore.",
        "     * @param propertyName The property name the listener no longer wishes to",
        "     * receive events for",
        "     */",
        "    void removeClassModelEventListener(PropertyChangeListener listener,",
        "\t\t\t\t       Object modelClass,",
        "\t\t\t\t       String propertyName);",
        "",
        "    /**",
        "     * Start the ModelEventPump firing events.",
        "     */",
        "    void startPumpingEvents();",
        "",
        "    /**",
        "     * Stop the ModelEventPump firing events.",
        "     */",
        "    void stopPumpingEvents();",
        "",
        "    /**",
        "     * Flush events from the ModelEventPump. Blocks until all events have been",
        "     * delivered.",
        "     * <p>",
        "     * <em>NOTE: </em> This may not be called from a ",
        "     * {@link PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)}",
        "     * method which has been invoked by the ModelEventPump.",
        "     */",
        "    void flushModelEvents();",
        "    ",
        "    /**",
        "     * Get debug info for the event pump. Information returned is implementation",
        "     * specific. List returned contains either Strings or Lists. Lists may be",
        "     * nested arbitrarily deeply forming a tree of information. If a node",
        "     * contains children, the first entry in the list is expected to be a String",
        "     * with subsequent entries representing children.",
        "     * ",
        "     * @return List of Strings or other Lists.",
        "     */",
        "    @SuppressWarnings(\"unchecked\")",
        "    public List getDebugInfo();",
        "}",
        ""
      ]
    ],
    "messageType": "input"
  },
  {
    "messages": [
      {
        "data_clumps": {
          "data_clump_1": {
            "key": "data_clump_1",
            "from_file_path": "src/argouml-app/tests/org/argouml/profile/internal/ocl/TestDefaultOclEvaluator.java",
            "from_class_or_interface_key": "org.argouml.profile.internal.ocl.TestDefaultOclEvaluator",
            "from_class_or_interface_name": "TestDefaultOclEvaluator",
            "from_method_key": "org.argouml.profile.internal.ocl.TestDefaultOclEvaluator.setUp",
            "from_method_name": "setUp",
            "to_file_path": "src/argouml-app/tests/org/argouml/profile/internal/ocl/TestOclInterpreter.java",
            "to_class_or_interface_key": "org.argouml.profile.internal.ocl.TestOclInterpreter",
            "to_class_or_interface_name": "TestOclInterpreter",
            "to_method_key": "org.argouml.profile.internal.ocl.TestOclInterpreter.setUp",
            "to_method_name": "setUp",
            "data_clump_data": {
              "data_clump_variable_1": {
                "key": "data_clump_variable_1",
                "name": "Exception",
                "type": "Exception",
                "displayedType": "Exception",
                "position": {
                  "startLine": "37",
                  "startColumn": "25"
                },
                "to_variable": {
                  "key": "data_clump_variable_1",
                  "name": "Exception",
                  "type": "Exception",
                  "position": {
                    "startLine": "28",
                    "startColumn": "25"
                  }
                }
              }
            }
          }
        }
      }
    ],
    "messageType": "output"
  }
]